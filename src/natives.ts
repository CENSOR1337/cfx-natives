import { Vector3 } from "@fivemjs/shared";
//@ts-ignore
const Citizen = global.Citizen;
//@ts-ignore
const msgpack_pack = global.msgpack_pack;
const _i = Citizen.pointerValueInt();
const _f = Citizen.pointerValueFloat();
const _v = Citizen.pointerValueVector();
const _r = Citizen.returnResultAnyway();
const _ri = Citizen.resultAsInteger();
const _rf = Citizen.resultAsFloat();
const _rl = Citizen.resultAsLong();
const _s = Citizen.resultAsString();
const _rv = Citizen.resultAsVector();
//@ts-ignore
const _ro = Citizen.resultAsObject2();
//@ts-ignore
const _in = Citizen.invokeNativeByHash;
const _ii = Citizen.pointerValueIntInitialized;
const _fi = Citizen.pointerValueFloatInitialized;
function joaat(key: string) {
	var hash = 0,
		i = key.length;

	while (i--) {
		hash += key.charCodeAt(i);
		hash += hash << 10;
		hash ^= hash >> 6;
	}
	hash += hash << 3;
	hash ^= hash >> 11;
	hash += hash << 15;
	return hash;
}
function _ch(hash: any) {
	if (typeof hash === "string") {
		return joaat(hash);
	}

	return hash;
}

function _obj(obj: any) {
	const s = msgpack_pack(obj);
	return [s, s.length];
}

function _ts(num: any) {
	if (num === 0 || num === null || num === undefined || num === false) {
		// workaround for users calling string parameters with '0', also nil being translated
		return null;
	}
	if (ArrayBuffer.isView(num) || num instanceof ArrayBuffer) {
		// these are handled as strings internally
		return num;
	}
	return num.toString();
}
function _fv(flt: number) {
	return flt === 0.0 ? flt : flt + 0.0000001;
}

function _mfr(fn: any) {
	return Citizen.makeRefFunction(fn);
}

/**
 * 
 */
export function appClearBlock(): void {
	return _in(0x5fe1df33, 0x42db7dba); 
}

/**
 * 
 */
export function appCloseApp(): void {
	return _in(0xe41c65e0, 0x7a5f05fc); 
}

/**
 * 
 */
export function appCloseBlock(): void {
	return _in(0xe8e3fcf7, 0x2eac0ef8); 
}

/**
 * 
 * @param appName
 */
export function appDeleteAppData(appName: string): boolean {
	return _in(0x44151aea, 0x95c8a003, _ts(appName), _r); 
}

/**
 * 
 */
export function appDataValid(): boolean {
	return _in(0x846aa8e7, 0xd55ee5b6, _r); 
}

/**
 * 
 * @param property
 */
export function appGetFloat(property: string): number {
	return _in(0x1514fb24, 0xc02c2322, _ts(property), _r, _rf); 
}

/**
 * 
 */
export function appGetDeletedFileStatus(): number {
	return _in(0xc9853a2b, 0xe3ded1a6, _r, _ri); 
}

/**
 * 
 * @param property
 */
export function appGetString(property: string): string {
	return _in(0x749b0239, 0x50d2311c, _ts(property), _r, _s); 
}

/**
 * 
 * @param property
 */
export function appGetInt(property: string): number {
	return _in(0xd3a58a12, 0xc77d9d4b, _ts(property), _r, _ri); 
}

/**
 * 
 */
export function appHasLinkedSocialClubAccount(): boolean {
	return _in(0x71eee697, 0x45088da0, _r); 
}

/**
 * ```
 * Called in the gamescripts like:
 * APP::APP_SET_APP("car");
 * APP::APP_SET_APP("dog");
 * ```
 * @param appName
 */
export function appSetApp(appName: string): void {
	return _in(0xcfd0406a, 0xdaf90d2b, _ts(appName)); 
}

/**
 * 
 * @param appName
 */
export function appHasSyncedData(appName: string): boolean {
	return _in(0xca52279a, 0x7271517f, _ts(appName), _r); 
}

/**
 * 
 * @param property
 * @param value
 */
export function appSetFloat(property: string, value: number): void {
	return _in(0x25d7687c, 0x68e0daa4, _ts(property), _fv(value)); 
}

/**
 * 
 */
export function appSaveData(): void {
	return _in(0x95c5d356, 0xcda6e85f); 
}

/**
 * 
 * @param blockName
 */
export function appSetBlock(blockName: string): void {
	return _in(0x262ab456, 0xa3d21f93, _ts(blockName)); 
}

/**
 * 
 * @param property
 * @param value
 */
export function appSetString(property: string, value: string): void {
	return _in(0x3ff2fcec, 0x4b7721b4, _ts(property), _ts(value)); 
}

/**
 * 
 * @param property
 * @param value
 */
export function appSetInt(property: string, value: number): void {
	return _in(0x607e8e3d, 0x3e4f9611, _ts(property), value); 
}

/**
 * ```
 * All found occurrences in b678d:
 * pastebin.com/ceu67jz8
 * ```
 * @param entity
 * @param groupName
 * @param p2
 */
export function addEntityToAudioMixGroup(entity: number, groupName: string, p2: number): void {
	return _in(0x153973ab, 0x99fe8980, entity, _ts(groupName), _fv(p2)); 
}

/**
 * 
 * @param p0
 */
export function activateAudioSlowmoMode(p0: string): void {
	return _in(0xd01005d2, 0xba2eb778, _ts(p0)); 
}

/**
 * ```
 * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
 * AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
 * =================================================
 * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
 * ```
 * @param index
 * @param ped
 * @param p2
 */
export function addPedToConversation(index: number, ped: number, p2: string): void {
	return _in(0x95d9f4bc, 0x443956e7, index, ped, _ts(p2)); 
}

/**
 * ```
 * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
 * _GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
 * p0 is -1, 0 - 35
 * p1 is a char or string (whatever you wanna call it)
 * p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
 * p3 is again -1, 0 - 35
 * p4 is again -1, 0 - 35
 * p5 is either 0 or 1 (bool ?)
 * p6 is either 0 or 1 (The func to determine this is bool)
 * p7 is either 0 or 1 (The func to determine this is bool)
 * p8 is either 0 or 1 (The func to determine this is bool)
 * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
 * p10 is either 0 or 1 (The func to determine this is bool)
 * p11 is either 0 or 1 (The func to determine this is bool)
 * p12 is unknown as in TU27 X360 scripts it only goes to p11.
 * ```
 * @param index
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 */
export function addLineToConversation(index: number, p1: string, p2: string, p3: number, p4: number, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: number, p10: boolean, p11: boolean, p12: boolean): void {
	return _in(0xc5ef9634, 0x05593646, index, _ts(p1), _ts(p2), p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); 
}

/**
 * ```
 * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
 * Only works on vehicles with a police siren.
 * ```
 * @param vehicle
 */
export function blipSiren(vehicle: number): void {
	return _in(0x1b9025bd, 0xa76822b6, vehicle); 
}

/**
 * 
 * @param toggle
 */
export function blockDeathJingle(toggle: boolean): void {
	return _in(0xf154b8d1, 0x775b2dec, toggle); 
}

/**
 * 
 */
export function audioIsScriptedMusicPlaying(): boolean {
	return _in(0x845ffc3a, 0x4feefa3e, _r); 
}

/**
 * 
 */
export function CancelCurrentPoliceReport(): void {
	return _in(0xb4f90faf, 0x7670b16f); 
}

/**
 * ```
 * Checks if the ped can play the speech or has the speech file, last parameter is usually 0
 * ```
 * @param ped
 * @param speechName
 * @param unk
 */
export function CanPedSpeak(ped: number, speechName: string, unk: boolean): boolean {
	return _in(0x49b99bf3, 0xfda89a7a, ped, _ts(speechName), unk, _r); 
}

/**
 * 
 */
export function clearAllBrokenGlass(): void {
	return _in(0xb32209ef, 0xfdc04913); 
}

/**
 * ```
 * This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);
 * Still needs more research.
 * ```
 * @param zoneName
 * @param p1
 */
export function clearAmbientZoneState(zoneName: string, p1: boolean): void {
	return _in(0x218dd44a, 0xaac964ff, _ts(zoneName), p1); 
}

/**
 * ```
 * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
 * ```
 * @param eventName
 */
export function cancelMusicEvent(eventName: string): boolean {
	return _in(0x5b17a902, 0x91133da5, _ts(eventName), _r); 
}

/**
 * ```
 * 3 calls in the b617d scripts, removed duplicate.
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
 * ```
 * @param radioStation
 */
export function clearCustomRadioTrackList(radioStation: string): void {
	return _in(0x1654f24a, 0x88a8e3fe, _ts(radioStation)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function clearAmbientZoneListState(p1: boolean): void {
	return _in(0x120c48c6, 0x14909fa4, _i, p1); 
}

/**
 * 
 * @param p0
 */
export function deactivateAudioSlowmoMode(p0: string): void {
	return _in(0xddc635d5, 0xb3262c56, _ts(p0)); 
}

/**
 * 
 */
export function createNewScriptedConversation(): void {
	return _in(0xd2c91a0b, 0x572aae56); 
}

/**
 * 
 */
export function doesPlayerVehHaveRadio(): boolean {
	return _in(0x109697e2, 0xffbac8a1, _r); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function disablePedPainAudio(ped: number, toggle: boolean): void {
	return _in(0xa9a41c1e, 0x940fb0e8, ped, toggle); 
}

/**
 * Sets whether the vehicle passed has exhaust pops.
 * @param vehicle
 * @param toggle
 */
export function enableVehicleExhaustPops(vehicle: number, toggle: boolean): void {
	return _in(0x2be4bc73, 0x1d039d5a, vehicle, toggle); 
}

/**
 * ```
 * If value is set to true, and ambient siren sound will be played.
 * Appears to enable/disable an audio flag.
 * ```
 * @param value
 */
export function distantCopCarSirens(value: boolean): void {
	return _in(0x552369f5, 0x49563ad5, value); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function enableStallWarningSounds(vehicle: number, toggle: boolean): void {
	return _in(0xc15907d6, 0x67f7cfb2, vehicle, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param radioStation
 * @param trackListName
 * @param milliseconds
 */
export function ForceRadioTrackListPosition(radioStation: string, trackListName: string, milliseconds: number): void {
	return _in(0x4e0af911, 0x4608257c, _ts(radioStation), _ts(trackListName), milliseconds); 
}

/**
 * 
 * @param stationNameHash
 */
export function findRadioStationIndex(stationNameHash: number): number {
	return _in(0x8d674897, 0x93ff428b, stationNameHash, _r, _ri); 
}

/**
 * 
 */
export function freezeMicrophone(): void {
	return _in(0xd57aaae0, 0xe2214d11); 
}

/**
 * 
 * @param radioStation
 */
export function freezeRadioStation(radioStation: string): void {
	return _in(0x344f393b, 0x027e38c3, _ts(radioStation)); 
}

/**
 * ```
 * This native sets the audio of the specified vehicle to the audioName (p1).
 * Use the audioNameHash found in vehicles.meta
 * Example:
 * _SET_VEHICLE_AUDIO(veh, "ADDER");
 * The selected vehicle will now have the audio of the Adder.
 * FORCE_VEHICLE_???
 * ```
 * @param vehicle
 * @param audioName
 */
export function ForceVehicleEngineAudio(vehicle: number, audioName: string): void {
	return _in(0x4f0c4139, 0x26060b38, vehicle, _ts(audioName)); 
}

/**
 * 
 */
export function getAudibleMusicTrackTextId(): number {
	return _in(0x50b196fc, 0x9ed6545b, _r, _ri); 
}

/**
 * 
 */
export function getCurrentScriptedConversationLine(): number {
	return _in(0x480357ee, 0x890c295a, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function GetAmbientVoiceNameHash(ped: number): number {
	return _in(0x5e203da2, 0xba15d436, ped, _r); 
}

/**
 * ```
 * Return the hash of the radio stations current track.
 * 
 * NativeDB Introduced: v1493
 * ```
 * @param radioStationName
 */
export function GetCurrentRadioTrackName(radioStationName: string): number {
	return _in(0x34d66bc0, 0x58019ce0, _ts(radioStationName), _r); 
}

/**
 * ```
 * Return the playback time (in milliseconds) of the radio stations current track.
 * 
 * NativeDB Introduced: v1493
 * ```
 * @param radioStationName
 */
export function GetCurrentRadioTrackPlaybackTime(radioStationName: string): number {
	return _in(0x3e65cde5, 0x215832c1, _ts(radioStationName), _r, _ri); 
}

/**
 * 
 */
export function getIsPreloadedConversationReady(): boolean {
	return _in(0xe73364db, 0x90778ffa, _r); 
}

/**
 * ```
 * Could this be used alongside either,
 * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
 * ```
 * @param soundId
 */
export function getNetworkIdFromSoundId(soundId: number): number {
	return _in(0x2de3f0a1, 0x34ffbc0d, soundId, _r, _ri); 
}

/**
 * 
 */
export function getMusicPlaytime(): number {
	return _in(0xe7a0d23d, 0xc414507b, _r, _ri); 
}

/**
 * 
 */
export function getNumUnlockedRadioStations(): number {
	return _in(0xf1620ecb, 0x50e01de7, _r, _ri); 
}

/**
 * ```
 * Returns 255 (radio off index) if the function fails.
 * ```
 */
export function getPlayerRadioStationIndex(): number {
	return _in(0xe8af77c4, 0xc06adc93, _r, _ri); 
}

/**
 * 
 */
export function getPlayerRadioStationGenre(): number {
	return _in(0xa571991a, 0x7fe6cceb, _r, _ri); 
}

/**
 * ```
 * Returns active radio station name
 * ```
 */
export function getPlayerRadioStationName(): string {
	return _in(0xf6d733c3, 0x2076ad03, _r, _s); 
}

/**
 * ```
 * Returns String with radio station name.
 * ```
 * @param radioStation
 */
export function getRadioStationName(radioStation: number): string {
	return _in(0xb28eca15, 0x046ca8b9, radioStation, _r, _s); 
}

/**
 * 
 */
export function getSoundId(): number {
	return _in(0x430386fe, 0x9bf80b45, _r, _ri); 
}

/**
 * 
 */
export function getStreamPlayTime(): number {
	return _in(0x4e72bbdb, 0xca58a3db, _r, _ri); 
}

/**
 * Counterpart: [`GET_NETWORK_ID_FROM_SOUND_ID`](#\_0x2DE3F0A134FFBC0D).
 * @param netId
 * @return Integer representing a sound id, -1 (0xFFFFFFFF) on failure.
 */
export function getSoundIdFromNetworkId(netId: number): number {
	return _in(0x75262fd1, 0x2d0a1c84, netId, _r, _ri); 
}

/**
 * ```
 * Returns hash of default vehicle horn
 * Hash is stored in audVehicleAudioEntity
 * ```
 * @param vehicle
 */
export function getVehicleDefaultHorn(vehicle: number): number {
	return _in(0x02165d55, 0x000219ac, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleDefaultHornIgnoreMods(vehicle: number): number {
	return _in(0xacb5dcca, 0x1ec76840, vehicle, _r); 
}

/**
 * ```
 * HAS_*
 * ```
 */
export function HasMultiplayerAudioDataLoaded(): boolean {
	return _in(0x544810ed, 0x9db6bbe6, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 */
export function GetVehicleDefaultHornVariation(vehicle: number): number {
	return _in(0xd53f3a29, 0xbce2580e, vehicle, _r, _ri); 
}

/**
 * ```
 * HAS_*
 * ```
 */
export function HasMultiplayerAudioDataUnloaded(): boolean {
	return _in(0x5b50abb1, 0xfe3746f4, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param p0
 * @param p1
 */
export function hintAmbientAudioBank(p0: any, p1: any): any {
	return _in(0x8f8c0e37, 0x0ae62f5c, p0, p1, _r, _ri); 
}

/**
 * 
 * @param soundId
 */
export function hasSoundFinished(soundId: number): boolean {
	return _in(0xfcbdce71, 0x4a7c88e5, soundId, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function interruptConversation(p0: any): void {
	return _in(0xa018a12e, 0x5c5c2fa6, p0, _i, _i); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param p0
 * @param p1
 */
export function hintScriptAudioBank(p0: any, p1: number): any {
	return _in(0xfb380a29, 0x641ec31a, p0, p1, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function isAmbientSpeechPlaying(ped: number): boolean {
	return _in(0x9072c8b4, 0x9907bfad, ped, _r); 
}

/**
 * ```
 * One call found in the b617d scripts:
 * AUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[0 -- [[1]] ]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
 * ```
 * @param ped
 * @param p1
 * @param p2
 */
export function interruptConversationAndPause(ped: number, p1: string, p2: string): void {
	return _in(0x8a694d7a, 0x68f8dc38, ped, _ts(p1), _ts(p2)); 
}

/**
 * ```
 * Example:
 * bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * ```
 * @param alarmName
 */
export function isAlarmPlaying(alarmName: string): boolean {
	return _in(0x226435cb, 0x96ccfc8c, _ts(alarmName), _r); 
}

/**
 * ```
 * Common in the scripts:
 * AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
 * ```
 * @param ped
 */
export function isAmbientSpeechDisabled(ped: number): boolean {
	return _in(0x932c2d09, 0x6a2c3fff, ped, _r); 
}

/**
 * 
 * @param ambientZone
 */
export function isAmbientZoneEnabled(ambientZone: string): boolean {
	return _in(0x01e2817a, 0x479a7f9b, _ts(ambientZone), _r); 
}

/**
 * 
 * @param scene
 */
export function isAudioSceneActive(scene: string): boolean {
	return _in(0xb65b6055, 0x6e2a9225, _ts(scene), _r); 
}

/**
 * 
 * @param pedHandle
 */
export function isAnimalVocalizationPlaying(pedHandle: number): boolean {
	return _in(0xc265df9f, 0xb44a9fbd, pedHandle, _r); 
}

/**
 * 
 * @param ped
 */
export function isAnySpeechPlaying(ped: number): boolean {
	return _in(0x72907235, 0x5fa39ec9, ped, _r); 
}

/**
 * ```
 * Hardcoded to return 1
 * ```
 */
export function isGameInControlOfMusic(): boolean {
	return _in(0x6d28dc16, 0x71e334fd, _r); 
}

/**
 * 
 */
export function isMissionCompleteReadyForUi(): boolean {
	return _in(0x6f259f82, 0xd873b8b8, _r); 
}

/**
 * ```
 * Checks whether the horn of a vehicle is currently played.
 * ```
 * @param vehicle
 */
export function isHornActive(vehicle: number): boolean {
	return _in(0x9d6bfc12, 0xb05c6121, vehicle, _r); 
}

/**
 * 
 */
export function isMissionCompletePlaying(): boolean {
	return _in(0x19a30c23, 0xf5827f8a, _r); 
}

/**
 * 
 * @param newsStory
 */
export function isMissionNewsStoryUnlocked(newsStory: number): boolean {
	return _in(0x66e49bf5, 0x5b4b1874, newsStory, _r); 
}

/**
 * 
 */
export function isMobilePhoneRadioActive(): boolean {
	return _in(0xb35ce999, 0xe8ef317e, _r); 
}

/**
 * 
 */
export function isMobilePhoneCallOngoing(): boolean {
	return _in(0x7497d2ce, 0x2c30d24c, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInCurrentConversation(ped: number): boolean {
	return _in(0x049e937f, 0x18f4020c, ped, _r); 
}

/**
 * 
 */
export function isMusicOneshotPlaying(): boolean {
	return _in(0xa097ab27, 0x5061fb21, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedRingtonePlaying(ped: number): boolean {
	return _in(0x1e8e5e20, 0x937e3137, ped, _r); 
}

/**
 * 
 */
export function isPlayerVehRadioEnable(): boolean {
	return _in(0x5f43d83f, 0xd6738741, _r); 
}

/**
 * 
 */
export function isRadioFadedOut(): boolean {
	return _in(0x0626a247, 0xd2405330, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param radioStation
 */
export function IsRadioStationVisible(radioStation: string): boolean {
	return _in(0x2b1784db, 0x08afea79, _ts(radioStation), _r); 
}

/**
 * 
 */
export function isRadioRetuning(): boolean {
	return _in(0xa151a739, 0x4a214e65, _r); 
}

/**
 * 
 */
export function isScriptedConversationLoaded(): boolean {
	return _in(0xdf0d54be, 0x7a776737, _r); 
}

/**
 * 
 */
export function isScriptedConversationOngoing(): boolean {
	return _in(0x16754c55, 0x6d2ede3d, _r); 
}

/**
 * 
 * @param p0
 */
export function isScriptedSpeechPlaying(p0: any): boolean {
	return _in(0xcc9aa18d, 0xcc7084f4, p0, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleAudiblyDamaged(vehicle: number): boolean {
	return _in(0x5db8010e, 0xe71fdef2, vehicle, _r); 
}

/**
 * 
 */
export function isStreamPlaying(): boolean {
	return _in(0xd11fa52e, 0xb849d978, _r); 
}

/**
 * 
 * @param vehicle
 */
export function IsVehicleRadioLoud(vehicle: number): boolean {
	return _in(0x032a1166, 0x63a4d5ac, vehicle, _r); 
}

/**
 * ```
 * IS_VEHICLE_*
 * ```
 * @param vehicle
 * @return Is the given vehicle's radio enabled
 */
export function IsVehicleRadioEnabled(vehicle: number): boolean {
	return _in(0x0be4be94, 0x6463f917, vehicle, _r); 
}

/**
 * ```
 * L* (LINK_*?)
 * ```
 * @param emitterName
 * @param entity
 */
export function LinkStaticEmitterToEntity(emitterName: string, entity: number): void {
	return _in(0x651d3228, 0x960d08af, _ts(emitterName), entity); 
}

/**
 * ```
 * Example:
 * AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
 * All found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w
 * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
 * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
 * ```
 * @param streamName
 * @param soundSet
 */
export function loadStream(streamName: string, soundSet: string): boolean {
	return _in(0x1f1f9571, 0x54ec51df, _ts(streamName), _ts(soundSet), _r); 
}

/**
 * ```
 * Disables the radio station (hides it from the radio wheel).
 * 
 * NativeDB Introduced: v1493
 * ```
 * @param radioStationName
 * @param toggle
 */
export function LockRadioStation(radioStationName: string, toggle: boolean): void {
	return _in(0x477d9db4, 0x8f889591, _ts(radioStationName), toggle); 
}

/**
 * ```
 * Example:
 * AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
 * Only called a few times in the scripts.
 * ```
 * @param streamName
 * @param startOffset
 * @param soundSet
 */
export function loadStreamWithStartOffset(streamName: string, startOffset: number, soundSet: string): boolean {
	return _in(0x59c16b79, 0xf53b3712, _ts(streamName), startOffset, _ts(soundSet), _r); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param radioStation
 * @param trackListName
 */
export function LockRadioStationTrackList(radioStation: string, trackListName: string): void {
	return _in(0xff5e5ea2, 0xdceeacf3, _ts(radioStation), _ts(trackListName)); 
}

/**
 * Sets audio flag "OverrideMicrophoneSettings"
 * @param hash
 * @param toggle
 */
export function OverrideMicrophoneSettings(hash: number, toggle: boolean): void {
	return _in(0x75773e11, 0xba459e90, _ch(hash), toggle); 
}

/**
 * 
 * @param hash
 * @param toggle
 */
export function overridePlayerGroundMaterial(hash: number, toggle: boolean): void {
	return _in(0xd2cc78cd, 0x3d0b50f9, _ch(hash), toggle); 
}

/**
 * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
 * @param voiceEffect
 */
export function overrideTrevorRage(voiceEffect: string): void {
	return _in(0x13ad6650, 0x62541a7e, _ts(voiceEffect)); 
}

/**
 * Overrides the vehicle's horn hash.
 * 
 * When changing this hash on a vehicle, [`_GET_VEHICLE_HORN_HASH`](#\_0xACB5DCCA1EC76840) will **not** return the 'overwritten' hash. It will still always return the default horn hash (same as [`GET_VEHICLE_DEFAULT_HORN`](#\_0x02165D55000219AC)).
 * 
 * List of possible hashes (found in decompiled scripts):
 * 
 * |        signed |     unsigned |      hex     |
 * |--------------:|-------------:|:------------:|
 * |  `1604822495` | `1604822495` | `0x5FA7A5DF` |
 * | `-1262465009` | `3032502287` | `0xB4C0500F` |
 * |  `-889553789` | `3405413507` | `0xCAFA7C83` |
 * | `-1557943086` | `2737024210` | `0xA323ACD2` |
 * | `-1318696617` | `2976270679` | `0xB1664957` |
 * |    `-7740003` | `4287227293` | `0xFF89E59D` |
 * | `-1815146967` | `2479820329` | `0x93CF0E29` |
 * |  `-339919356` | `3955047940` | `0xEBBD3E04` |
 * @param vehicle
 * @param override
 * @param hornHash
 */
export function overrideVehHorn(vehicle: number, override: boolean, hornHash: number): void {
	return _in(0x3cdc1e62, 0x2cce0356, vehicle, override, hornHash); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function overrideUnderwaterStream(p1: boolean): void {
	return _in(0xf2a9cdab, 0xcea04bd6, _i, p1); 
}

/**
 * 
 * @param p0
 */
export function pauseScriptedConversation(p0: boolean): void {
	return _in(0x8530ad77, 0x6cd72b12, p0); 
}

/**
 * 
 * @param speechName
 * @param voiceName
 * @param x
 * @param y
 * @param z
 * @param speechParam
 */
export function playAmbientSpeechFromPositionNative(speechName: string, voiceName: string, x: number, y: number, z: number, speechParam: string): void {
	return _in(0xed640017, 0xed337e45, _ts(speechName), _ts(voiceName), _fv(x), _fv(y), _fv(z), _ts(speechParam)); 
}

/**
 * ```
 * Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
 * This native is works only when you call it on the ped with right model (ac_chop only ?)
 * Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
 * ```
 * @param pedHandle
 * @param p1
 * @param speechName
 */
export function playAnimalVocalization(pedHandle: number, p1: number, speechName: string): void {
	return _in(0xee066c70, 0x06c49c0a, pedHandle, p1, _ts(speechName)); 
}

/**
 * ```
 * Only call found in the b617d scripts:
 * AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
 * ```
 * @param soundName
 * @param soundsetName
 */
export function playDeferredSoundFrontend(soundName: string, soundsetName: string): void {
	return _in(0xcada5a0d, 0x0702381e, _ts(soundName), _ts(soundsetName)); 
}

/**
 * 
 * @param play
 */
export function playEndCreditsMusic(play: boolean): void {
	return _in(0xcd536c4d, 0x33dcc900, play); 
}

/**
 * ```
 * Called 38 times in the scripts. There are 5 different audioNames used.
 * One unknown removed below.
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
 * ```
 * @param audioName
 */
export function playMissionCompleteAudio(audioName: string): void {
	return _in(0xb138aab8, 0xa70d3c69, _ts(audioName)); 
}

/**
 * **Warning**:
 * 
 * Parameters are wrong after painID. To preserve C-Sharp backwards compatibility, we can't add or remove parameters.
 * 
 * Correct parameters should be:\
 * `PLAY_PAIN(Ped ped, int painID, float p3, bool createNetEvent)`
 * 
 * Check the *examples* section for the correct usage of this native.
 * 
 * **Description:**
 * 
 * Plays a pain sound. A maximum of 33 pain IDs are allowed.\
 * `createNetEvent` creates a `CPedPlayPainEvent` when set to true.
 * 
 * Below is a list of all the pain IDs (Asterisks indicate that sounds can play in a Low, Medium or High fashion), for example: `PAIN_LOW_GENERIC`. The corresponding pain strings belong to the game exe.
 * 
 * **Pain IDs:**
 * 
 * *   0: PAIN_\*\_GENERIC (Low, Medium, High)
 * *   1: UNUSED
 * *   2: UNUSED
 * *   3: SCREAM_PANIC (Nothing can be heard)
 * *   4: SCREAM_PANIC_SHORT
 * *   5: SCREAM_SCARED
 * *   6: SCREAM_SHOCKED
 * *   7: SCREAM_TERROR
 * *   8: ON_FIRE
 * *   9: UNUSED
 * *   10: UNUSED
 * *   11: INHALE (Nothing can be heard)
 * *   12: EXHALE (Nothing can be heard)
 * *   13: DEATH_HIGH_SHORT
 * *   14: UNUSED
 * *   15: PAIN_HIGH_GENERIC
 * *   16: PAIN_\*\_GENERIC (Low, Medium, High)
 * *   17: PAIN_SHOVE
 * *   18: PAIN_WHEEZE
 * *   19: COUGH
 * *   20: PAIN_TAZER
 * *   21: UNUSED
 * *   22: CLIMB_LARGE (Nothing can be heard)
 * *   23: CLIMB_SMALL (Nothing can be heard)
 * *   24: JUMP (Nothing can be heard)
 * *   25: COWER
 * *   26: WHIMPER
 * *   27: DYING_MOAN
 * *   28: EXHALE_CYCLING (Nothing can be heard)
 * *   29: PAIN_RAPIDS (Nothing can be heard)
 * *   30: SNEEZE
 * *   31: MELEE_SMALL_GRUNT (Nothing can be heard)
 * *   32: MELEE_LARGE_GRUNT (Nothing can be heard)
 * *   33: PAIN_\*\_GENERIC (Low, Medium, High)
 * @param ped
 * @param painID
 * @param p1
 */
export function playPain(ped: number, painID: number, p1: number): void {
	return _in(0xbc9ae166, 0x038a5cec, ped, painID, p1); 
}

/**
 * See [`PLAY_PED_AMBIENT_SPEECH_NATIVE`](#\_0x8E04FEDD28D42462) for parameter specifications.
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param ped
 * @param speechName
 * @param speechParam
 */
export function playPedAmbientSpeechAndCloneNative(ped: number, speechName: string, speechParam: string): void {
	return _in(0xc6941b4a, 0x3a8fbbb9, ped, _ts(speechName), _ts(speechParam)); 
}

/**
 * Plays ambient speech; see also [`PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE`](#\_0xC6941B4A3A8FBBB9).
 * 
 * ```
 * speechParam: Can be one of the following:
 * SPEECH_PARAMS_STANDARD
 * SPEECH_PARAMS_ALLOW_REPEAT
 * SPEECH_PARAMS_BEAT
 * SPEECH_PARAMS_FORCE
 * SPEECH_PARAMS_FORCE_FRONTEND
 * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
 * SPEECH_PARAMS_FORCE_NORMAL
 * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
 * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
 * SPEECH_PARAMS_FORCE_SHOUTED
 * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
 * SPEECH_PARAMS_MEGAPHONE
 * SPEECH_PARAMS_HELI
 * SPEECH_PARAMS_FORCE_MEGAPHONE
 * SPEECH_PARAMS_FORCE_HELI
 * SPEECH_PARAMS_INTERRUPT
 * SPEECH_PARAMS_INTERRUPT_SHOUTED
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE
 * SPEECH_PARAMS_INTERRUPT_FRONTEND
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
 * SPEECH_PARAMS_ADD_BLIP
 * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
 * SPEECH_PARAMS_ADD_BLIP_FORCE
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
 * SPEECH_PARAMS_SHOUTED
 * SPEECH_PARAMS_SHOUTED_CLEAR
 * SPEECH_PARAMS_SHOUTED_CRITICAL
 * Note: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param ped
 * @param speechName
 * @param speechParam
 */
export function playPedAmbientSpeechNative(ped: number, speechName: string, speechParam: string): void {
	return _in(0x8e04fedd, 0x28d42462, ped, _ts(speechName), _ts(speechParam)); 
}

/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny
 * AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 * AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 * ```
 * @param ringtoneName
 * @param ped
 * @param p2
 */
export function playPedRingtone(ringtoneName: string, ped: number, p2: boolean): void {
	return _in(0xf9e56683, 0xca8e11a5, _ts(ringtoneName), ped, p2); 
}

/**
 * ```
 * Plays the given police radio message.
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr
 * ```
 * @param name
 * @param p1
 */
export function playPoliceReport(name: string, p1: number): number {
	return _in(0xdfebd56d, 0x9bd1eb16, _ts(name), _fv(p1), _r, _ri); 
}

/**
 * ```
 * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
 * EX (C#):
 * GTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
 * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
 * ```
 * @param ped
 * @param speechName
 * @param voiceName
 * @param speechParam
 * @param p4
 */
export function playPedAmbientSpeechWithVoiceNative(ped: number, speechName: string, voiceName: string, speechParam: string, p4: boolean): void {
	return _in(0x35236342, 0x55fc3318, ped, _ts(speechName), _ts(voiceName), _ts(speechParam), p4); 
}

/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0
 * No changes made in b678d.
 * gtaforums.com/topic/795622-audio-for-mods
 * ```
 * @param soundId
 * @param audioName
 * @param entity
 * @param audioRef
 * @param isNetwork
 * @param p5
 */
export function playSoundFromEntity(soundId: number, audioName: string, entity: number, audioRef: string, isNetwork: boolean, p5: any): void {
	return _in(0xe65f427e, 0xb70ab1ed, soundId, _ts(audioName), entity, _ts(audioRef), isNetwork, p5); 
}

/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ
 * ```
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 * @param p4
 * @param p5
 */
export function playSound(soundId: number, audioName: string, audioRef: string, p3: boolean, p4: any, p5: boolean): void {
	return _in(0x7ff4944c, 0xc209192d, soundId, _ts(audioName), _ts(audioRef), p3, p4, p5); 
}

/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW
 * gtaforums.com/topic/795622-audio-for-mods
 * ```
 * @param soundId
 * @param audioName
 * @param x
 * @param y
 * @param z
 * @param audioRef
 * @param isNetwork
 * @param range
 * @param p8
 */
export function playSoundFromCoord(soundId: number, audioName: string, x: number, y: number, z: number, audioRef: string, isNetwork: boolean, range: number, p8: boolean): void {
	return _in(0x8d8686b6, 0x22b88120, soundId, _ts(audioName), _fv(x), _fv(y), _fv(z), _ts(audioRef), isNetwork, range, p8); 
}

/**
 * ```
 * List: https://pastebin.com/DCeRiaLJ
 * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
 * ```
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 */
export function playSoundFrontend(soundId: number, audioName: string, audioRef: string, p3: boolean): void {
	return _in(0x67c540aa, 0x08e4a6f5, soundId, _ts(audioName), _ts(audioRef), p3); 
}

/**
 * ```
 * Used with AUDIO::LOAD_STREAM
 * Example from finale_heist2b.c4:
 * TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2 -- [[14]] ], l_4C8[2 -- [[14]] ]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
 * PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2 -- [[14]] ]._f7, 0.0);
 * PED::_2208438012482A1A(l_4C8[2 -- [[14]] ], 0, 0);
 * PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2 -- [[14]] ], 38, 1);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2 -- [[14]] ], 1);
 * if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
 * AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0 -- [[1]] ]);
 * }
 * ```
 * @param object
 */
export function playStreamFromObject(object: number): void {
	return _in(0xebaa9b64, 0xd76356fd, object); 
}

/**
 * 
 * @param ped
 */
export function playStreamFromPed(ped: number): void {
	return _in(0x89049dd6, 0x3c08b5d1, ped); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function playStreamFromPosition(x: number, y: number, z: number): void {
	return _in(0x21442f41, 0x2e8de56b, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param vehicle
 */
export function playStreamFromVehicle(vehicle: number): void {
	return _in(0xb70374a7, 0x58007dfa, vehicle); 
}

/**
 * 
 * @param p0
 */
export function playSynchronizedAudioEvent(p0: any): boolean {
	return _in(0x8b2fd456, 0x0e55dd2d, p0, _r); 
}

/**
 * 
 */
export function playStreamFrontend(): void {
	return _in(0x58fce434, 0x88f9f5f4); 
}

/**
 * 
 * @param vehicle
 * @param doorIndex
 */
export function playVehicleDoorCloseSound(vehicle: number, doorIndex: number): void {
	return _in(0x62a456aa, 0x4769ef34, vehicle, doorIndex); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function preloadScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void {
	return _in(0x3b3cad61, 0x66916d87, p0, p1, p2, p3); 
}

/**
 * 
 * @param vehicle
 * @param doorIndex
 */
export function playVehicleDoorOpenSound(vehicle: number, doorIndex: number): void {
	return _in(0x3a539d52, 0x857ea82d, vehicle, doorIndex); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function preloadScriptPhoneConversation(p0: boolean, p1: boolean): void {
	return _in(0x6004bcb0, 0xe226aaea, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param model
 */
export function PreloadVehicleAudio(model: number): void {
	return _in(0xca4cea6a, 0xe0000a7e, _ch(model)); 
}

/**
 * ```
 * Example:
 * bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * ```
 * @param alarmName
 */
export function prepareAlarm(alarmName: string): boolean {
	return _in(0x9d74ae34, 0x3db65533, _ts(alarmName), _r); 
}

/**
 * ```
 * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
 * ```
 * @param eventName
 */
export function prepareMusicEvent(eventName: string): boolean {
	return _in(0x1e5185b7, 0x2ef5158a, _ts(eventName), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function recordBrokenGlass(x: number, y: number, z: number, radius: number): void {
	return _in(0xfbe20329, 0x593dec9d, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function prepareSynchronizedAudioEvent(p0: string, p1: any): any {
	return _in(0xc7abcaca, 0x4985a766, _ts(p0), p1, _r, _ri); 
}

/**
 * 
 */
export function releaseAmbientAudioBank(): void {
	return _in(0x65475a21, 0x8ffaa93d); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function prepareSynchronizedAudioEventForScene(p0: any): boolean {
	return _in(0x029fe7cd, 0x1b7e2e75, p0, _i, _r); 
}

/**
 * 
 */
export function releaseMissionAudioBank(): void {
	return _in(0x0ec92a1b, 0xf0857187); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * @param p0
 */
export function registerScriptWithAudio(p0: number): void {
	return _in(0xc6ed9d50, 0x92438d91, p0); 
}

/**
 * 
 */
export function releaseScriptAudioBank(): void {
	return _in(0x7a2d8ad0, 0xa9eb9c3f); 
}

/**
 * 
 * @param audioBank
 */
export function releaseNamedScriptAudioBank(audioBank: string): void {
	return _in(0x77ed1706, 0x67f50170, _ts(audioBank)); 
}

/**
 * 
 * @param soundId
 */
export function releaseSoundId(soundId: number): void {
	return _in(0x353fc880, 0x830b88fa, soundId); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function releaseWeaponAudio(): void {
	return _in(0xce4ac043, 0x9f607045); 
}

/**
 * 
 * @param entity
 * @param p1
 */
export function removeEntityFromAudioMixGroup(entity: number, p1: number): void {
	return _in(0x18eb48cf, 0xc41f2ea0, entity, _fv(p1)); 
}

/**
 * ```
 * Found in the b617d scripts, duplicates removed:
 * AUDIO::_B4BBFD9CD8B3922B("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
 * AUDIO::_B4BBFD9CD8B3922B("V_CIA_PS_WINDOW_UNBROKEN");
 * AUDIO::_B4BBFD9CD8B3922B("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
 * AUDIO::_B4BBFD9CD8B3922B("V_FINALEBANK_PS_VAULT_INTACT");
 * AUDIO::_B4BBFD9CD8B3922B("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
 * ```
 * @param p0
 */
export function removePortalSettingsOverride(p0: string): void {
	return _in(0xb4bbfd9c, 0xd8b3922b, _ts(p0)); 
}

/**
 * ```
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param p0
 * @param p1
 */
export function requestAmbientAudioBank(p0: string, p1: boolean): boolean {
	return _in(0xfe02ffbe, 0xd8ca9d99, _ts(p0), p1, _r); 
}

/**
 * ```
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * @param p0
 * @param p1
 */
export function requestScriptAudioBank(p0: string, p1: boolean): boolean {
	return _in(0x2f844a8b, 0x08d76685, _ts(p0), p1, _r); 
}

/**
 * ```
 * All occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param p0
 * @param p1
 */
export function requestMissionAudioBank(p0: string, p1: boolean): boolean {
	return _in(0x7345bdd9, 0x5e62e0f2, _ts(p0), p1, _r); 
}

/**
 * 
 */
export function resetTrevorRage(): void {
	return _in(0xe78503b1, 0x0c4314e0); 
}

/**
 * 
 * @param ped
 */
export function resetPedAudioFlags(ped: number): void {
	return _in(0xf54bb7b6, 0x1036f335, ped); 
}

/**
 * ```
 * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
 * ```
 * @param toggle
 */
export function setAggressiveHorns(toggle: boolean): void {
	return _in(0x395bf710, 0x85d1b1d9, toggle); 
}

/**
 * 
 */
export function restartScriptedConversation(): void {
	return _in(0x9aeb285d, 0x1818c9ac); 
}

/**
 * ```
 * Audio List
 * gtaforums.com/topic/795622-audio-for-mods/
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ
 * Yes
 * ```
 * @param ped
 * @param name
 */
export function setAmbientVoiceName(ped: number, name: string): void {
	return _in(0x6c8065a3, 0xb780185b, ped, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function setAmbientZoneListState(p0: string, p1: boolean, p2: boolean): void {
	return _in(0x9748fa4d, 0xe50cce3e, _ts(p0), p1, p2); 
}

/**
 * 
 * @param ped
 * @param hash
 */
export function SetAmbientVoiceNameHash(ped: number, hash: number): void {
	return _in(0x9a53ded9, 0x921de990, ped, _ch(hash)); 
}

/**
 * 
 * @param ambientZone
 * @param p1
 * @param p2
 */
export function setAmbientZoneListStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void {
	return _in(0xf3638dae, 0x8c4045e1, _ts(ambientZone), p1, p2); 
}

/**
 * 
 * @param zoneName
 * @param p1
 * @param p2
 */
export function setAmbientZoneState(zoneName: string, p1: boolean, p2: boolean): void {
	return _in(0xbda07e59, 0x50085e46, _ts(zoneName), p1, p2); 
}

/**
 * 
 * @param ambientZone
 * @param p1
 * @param p2
 */
export function setAmbientZoneStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void {
	return _in(0x1d665042, 0x0cec9d3b, _ts(ambientZone), p1, p2); 
}

/**
 * ```
 * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
 * ```
 * @param animal
 * @param mood
 */
export function setAnimalMood(animal: number, mood: number): void {
	return _in(0xcc97b292, 0x85b1dc3b, animal, mood); 
}

/**
 * ```
 * Possible flag names:
 * "ActivateSwitchWheelAudio"
 * "AllowAmbientSpeechInSlowMo"
 * "AllowCutsceneOverScreenFade"
 * "AllowForceRadioAfterRetune"
 * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
 * "AllowPlayerAIOnMission"
 * "AllowPoliceScannerWhenPlayerHasNoControl"
 * "AllowRadioDuringSwitch"
 * "AllowRadioOverScreenFade"
 * "AllowScoreAndRadio"
 * "AllowScriptedSpeechInSlowMo"
 * "AvoidMissionCompleteDelay"
 * "DisableAbortConversationForDeathAndInjury"
 * "DisableAbortConversationForRagdoll"
 * "DisableBarks"
 * "DisableFlightMusic"
 * "DisableReplayScriptStreamRecording"
 * "EnableHeadsetBeep"
 * "ForceConversationInterrupt"
 * "ForceSeamlessRadioSwitch"
 * "ForceSniperAudio"
 * "FrontendRadioDisabled"
 * "HoldMissionCompleteWhenPrepared"
 * "IsDirectorModeActive"
 * "IsPlayerOnMissionForSpeech"
 * "ListenerReverbDisabled"
 * "LoadMPData"
 * "MobileRadioInGame"
 * "OnlyAllowScriptTriggerPoliceScanner"
 * "PlayMenuMusic"
 * "PoliceScannerDisabled"
 * "ScriptedConvListenerMaySpeak"
 * "SpeechDucksScore"
 * "SuppressPlayerScubaBreathing"
 * "WantedMusicDisabled"
 * "WantedMusicOnMission"
 * -------------------------------
 * No added flag names between b393d and b573d, including b573d.
 * #######################################################################
 * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
 * -----------------------------------------------------------------------
 * All flag IDs and hashes:
 * ID: 01 | Hash: 0x20A7858F
 * ID: 02 | Hash: 0xA11C2259
 * ID: 03 | Hash: 0x08DE4700
 * ID: 04 | Hash: 0x989F652F
 * ID: 05 | Hash: 0x3C9E76BA
 * ID: 06 | Hash: 0xA805FEB0
 * ID: 07 | Hash: 0x4B94EA26
 * ID: 08 | Hash: 0x803ACD34
 * ID: 09 | Hash: 0x7C741226
 * ID: 10 | Hash: 0x31DB9EBD
 * ID: 11 | Hash: 0xDF386F18
 * ID: 12 | Hash: 0x669CED42
 * ID: 13 | Hash: 0x51F22743
 * ID: 14 | Hash: 0x2052B35C
 * ID: 15 | Hash: 0x071472DC
 * ID: 16 | Hash: 0xF9928BCC
 * ID: 17 | Hash: 0x7ADBDD48
 * ID: 18 | Hash: 0xA959BA1A
 * ID: 19 | Hash: 0xBBE89B60
 * ID: 20 | Hash: 0x87A08871
 * ID: 21 | Hash: 0xED1057CE
 * ID: 22 | Hash: 0x1584AD7A
 * ID: 23 | Hash: 0x8582CFCB
 * ID: 24 | Hash: 0x7E5E2FB0
 * ID: 25 | Hash: 0xAE4F72DB
 * ID: 26 | Hash: 0x5D16D1FA
 * ID: 27 | Hash: 0x06B2F4B8
 * ID: 28 | Hash: 0x5D4CDC96
 * ID: 29 | Hash: 0x8B5A48BA
 * ID: 30 | Hash: 0x98FBD539
 * ID: 31 | Hash: 0xD8CB0473
 * ID: 32 | Hash: 0x5CBB4874
 * ID: 33 | Hash: 0x2E9F93A9
 * ID: 34 | Hash: 0xD93BEA86
 * ID: 35 | Hash: 0x92109B7D
 * ID: 36 | Hash: 0xB7EC9E4D
 * ID: 37 | Hash: 0xCABDBB1D
 * ID: 38 | Hash: 0xB3FD4A52
 * ID: 39 | Hash: 0x370D94E5
 * ID: 40 | Hash: 0xA0F7938F
 * ID: 41 | Hash: 0xCBE1CE81
 * ID: 42 | Hash: 0xC27F1271
 * ID: 43 | Hash: 0x9E3258EB
 * ID: 44 | Hash: 0x551CDA5B
 * ID: 45 | Hash: 0xCB6D663C
 * ID: 46 | Hash: 0x7DACE87F
 * ID: 47 | Hash: 0xF9DE416F
 * ID: 48 | Hash: 0x882E6E9E
 * ID: 49 | Hash: 0x16B447E7
 * ID: 50 | Hash: 0xBD867739
 * ID: 51 | Hash: 0xA3A58604
 * ID: 52 | Hash: 0x7E046BBC
 * ID: 53 | Hash: 0xD95FDB98
 * ID: 54 | Hash: 0x5842C0ED
 * ID: 55 | Hash: 0x285FECC6
 * ID: 56 | Hash: 0x9351AC43
 * ID: 57 | Hash: 0x50032E75
 * ID: 58 | Hash: 0xAE6D0D59
 * ID: 59 | Hash: 0xD6351785
 * ID: 60 | Hash: 0xD25D71BC
 * ID: 61 | Hash: 0x1F7F6423
 * ID: 62 | Hash: 0xE24C3AA6
 * ID: 63 | Hash: 0xBFFDD2B7
 * ```
 * @param flagName
 * @param toggle
 */
export function setAudioFlag(flagName: string, toggle: boolean): void {
	return _in(0xb9efd5c2, 0x5018725a, _ts(flagName), toggle); 
}

/**
 * Needs to be called every frame.
 * Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
 * @param mode
 */
export function setAudioSpecialEffectMode(mode: number): void {
	return _in(0x12561fcb, 0xb62d5b9c, mode); 
}

/**
 * 
 * @param scene
 * @param variable
 * @param value
 */
export function setAudioSceneVariable(scene: string, variable: string, value: number): void {
	return _in(0xef21a9ef, 0x089a2668, _ts(scene), _ts(variable), _fv(value)); 
}

/**
 * 
 * @param time
 */
export function setAudioScriptCleanupTime(time: number): void {
	return _in(0xa5f377b1, 0x75a699c5, time); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setAudioVehiclePriority(vehicle: number, p1: any): void {
	return _in(0xe5564483, 0xe407f914, vehicle, p1); 
}

/**
 * ```
 * Examples:
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * ```
 * @param radioStation
 * @param trackListName
 * @param p2
 */
export function setCustomRadioTrackList(radioStation: string, trackListName: string, p2: boolean): void {
	return _in(0x4e404a93, 0x61f75bb2, _ts(radioStation), _ts(trackListName), p2); 
}

/**
 * 
 * @param emitterName
 * @param radioStation
 */
export function setEmitterRadioStation(emitterName: string, radioStation: string): void {
	return _in(0xacf57305, 0xb12af907, _ts(emitterName), _ts(radioStation)); 
}

/**
 * 
 * @param active
 */
export function setFrontendRadioActive(active: boolean): void {
	return _in(0xf7f26c6e, 0x9cc9ebb8, active); 
}

/**
 * ```
 * All occurrences found in b617d, sorted alphabetically and identical lines removed:
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
 * ```
 * @param name
 */
export function setCutsceneAudioOverride(name: string): void {
	return _in(0x3b4bf5f0, 0x859204d9, _ts(name)); 
}

/**
 * 
 * @param active
 */
export function setGpsActive(active: boolean): void {
	return _in(0x3bd3f52b, 0xa9b1e4e8, active); 
}

/**
 * 
 * @param radioStation
 */
export function setInitialPlayerStation(radioStation: string): void {
	return _in(0x88795f13, 0xfacda88d, _ts(radioStation)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setHornEnabled(vehicle: number, toggle: boolean): void {
	return _in(0x76d683c1, 0x08594d0e, vehicle, toggle); 
}

/**
 * ```
 * If this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..
 * ```
 * @param p0
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 */
export function setMicrophonePosition(p0: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void {
	return _in(0xb6ae90ed, 0xde95c762, p0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3)); 
}

/**
 * 
 * @param state
 */
export function setMobilePhoneRadioState(state: boolean): void {
	return _in(0xbf286c55, 0x4784f3df, state); 
}

/**
 * ```
 * Enables/disables ped's "loud" footstep sound.
 * ```
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param toggle
 */
export function SetPedAudioFootstepLoud(ped: number, toggle: boolean): void {
	return _in(0x0653b735, 0xbfbdfe87, ped, toggle); 
}

/**
 * ```
 * Enables/disables ped's "quiet" footstep sound.
 * ```
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param toggle
 */
export function SetPedAudioFootstepQuiet(ped: number, toggle: boolean): void {
	return _in(0x29da3ca8, 0xd8b2692d, ped, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setMobileRadioEnabledDuringGameplay(toggle: boolean): void {
	return _in(0x1098355a, 0x16064bb3, toggle); 
}

/**
 * ```
 * Assigns some ambient voice to the ped.
 * ```
 * @param ped
 */
export function SetPedScream(ped: number): void {
	return _in(0x40cf0d12, 0xd142a9e8, ped); 
}

/**
 * ```
 * Speech related.
 * ```
 * @param ped
 */
export function SetPedTalk(ped: number): void {
	return _in(0x4ada3f19, 0xbe4a6047, ped); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function SetPedAudioGender(ped: number, p1: boolean): void {
	return _in(0xa5342d39, 0x0cda41d6, ped, p1); 
}

/**
 * ```
 * From the scripts:
 * AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
 * AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
 * AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
 * AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
 * ```
 * @param ped
 * @param voiceGroupHash
 */
export function SetPedVoiceGroup(ped: number, voiceGroupHash: number): void {
	return _in(0x7cdc8c3b, 0x89f661b3, ped, _ch(voiceGroupHash)); 
}

/**
 * ```
 * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
 * ====================================================
 * As mentioned above, this only sets the drunk sound to ped/player.
 * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
 * Below is an example
 * if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
 * {
 * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
 * }
 * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
 * And to stop the effect use
 * RESET_PED_MOVEMENT_CLIPSET
 * ```
 * @param ped
 * @param toggle
 */
export function setPedIsDrunk(ped: number, toggle: boolean): void {
	return _in(0x95d2d383, 0xd5396b8a, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPlayerAngry(ped: number, toggle: boolean): void {
	return _in(0xea241bb0, 0x4110f091, ped, toggle); 
}

/**
 * ```
 * Dat151RelType == 29
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param ped
 * @param voiceGroupHash
 */
export function SetPedVoiceGroupRace(ped: number, voiceGroupHash: number): void {
	return _in(0x0babc134, 0x5abbfb16, ped, _ch(voiceGroupHash)); 
}

/**
 * 
 * @param toggle
 */
export function setRadioAutoUnfreeze(toggle: boolean): void {
	return _in(0xc1aa9f53, 0xce982990, toggle); 
}

/**
 * ```
 * Found in the b617d scripts, duplicates removed:
 * AUDIO::_044DBAD7A7FA2BE5("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
 * AUDIO::_044DBAD7A7FA2BE5("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
 * AUDIO::_044DBAD7A7FA2BE5("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
 * AUDIO::_044DBAD7A7FA2BE5("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
 * AUDIO::_044DBAD7A7FA2BE5("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
 * ```
 * @param p0
 * @param p1
 */
export function setPortalSettingsOverride(p0: string, p1: string): void {
	return _in(0x044dbad7, 0xa7fa2be5, _ts(p0), _ts(p1)); 
}

/**
 * ```
 * 6 calls in the b617d scripts, removed identical lines:
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
 * ```
 * @param radioStation
 * @param toggle
 */
export function setRadioStationMusicOnly(radioStation: string, toggle: boolean): void {
	return _in(0x774bd811, 0xf656a122, _ts(radioStation), toggle); 
}

/**
 * ```
 * Sets radio station by index.
 * ```
 * @param radioStation
 */
export function setRadioToStationIndex(radioStation: number): void {
	return _in(0xa619b168, 0xb8a8570f, radioStation); 
}

/**
 * 
 * @param fadeTime
 */
export function setRadioFrontendFadeTime(fadeTime: number): void {
	return _in(0x2c96cdb0, 0x4fca358e, _fv(fadeTime)); 
}

/**
 * ```
 * Only found this one in the decompiled scripts:
 * AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
 * ```
 * @param radioStation
 * @param radioTrack
 */
export function setRadioTrack(radioStation: string, radioTrack: string): void {
	return _in(0xb39786f2, 0x01fee30b, _ts(radioStation), _ts(radioTrack)); 
}

/**
 * Doesn't have an effect in Story Mode.
 * 
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param radioStation
 * @param toggle
 */
export function SetRadioStationIsVisible(radioStation: string, toggle: boolean): void {
	return _in(0x4cafebfa, 0x21ec188d, _ts(radioStation), toggle); 
}

/**
 * Find the radio station list [here](https://gist.github.com/4mmonium/b47d6512a2d992cbf4eea15d9038b581)
 * @param stationName
 */
export function setRadioToStationName(stationName: string): void {
	return _in(0xc69eda28, 0x699d5107, _ts(stationName)); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param radioStationName
 * @param mixName
 * @param p2
 */
export function SetRadioTrackMix(radioStationName: string, mixName: string, p2: number): void {
	return _in(0x2cb00751, 0x10be1e56, _ts(radioStationName), _ts(mixName), p2); 
}

/**
 * 
 * @param doorHash
 * @param toggle
 */
export function setScriptUpdateDoorAudio(doorHash: number, toggle: boolean): void {
	return _in(0x06c0023b, 0xed16dd6b, _ch(doorHash), toggle); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetSirenKeepOn(vehicle: number, toggle: boolean): void {
	return _in(0xf584cf85, 0x29b51434, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setSirenWithNoDriver(vehicle: number, toggle: boolean): void {
	return _in(0x1fef0683, 0xb96ebcf2, vehicle, toggle); 
}

/**
 * ```
 * Example:
 * AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
 * This turns off surrounding sounds not connected directly to peds.
 * ```
 * @param emitterName
 * @param toggle
 */
export function setStaticEmitterEnabled(emitterName: string, toggle: boolean): void {
	return _in(0x399d2d3b, 0x33f1b8eb, _ts(emitterName), toggle); 
}

/**
 * ```
 * SET_VARIABLE_ON_*
 * ```
 * @param variableName
 * @param value
 */
export function SetVariableOnCutsceneAudio(variableName: string, value: number): void {
	return _in(0xbcc29f93, 0x5ed07688, _ts(variableName), _fv(value)); 
}

/**
 * ```
 * Sets the position of the audio event to the entity's position for one frame(?)
 * if (l_8C3 == 0) {
 * sub_27fd1(0, -1, 1);
 * if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {
 * AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);
 * }
 * if (sub_7dd(l_A00)) {
 * AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
 * }
 * sub_91c("TK************ SETTING SYNCH SCENE AUDIO POSITION THIS FRAME ************TK");
 * l_8C3 = 1;
 * }
 * --
 * Found in the b617d scripts, duplicates removed:
 * AUDIO::_950A154B8DAB6185("CAR_5_IG_6", l_7FE[1 -- [[1]] ]);
 * AUDIO::_950A154B8DAB6185("EX03_TRAIN_BIKE_LAND",   PLAYER::PLAYER_PED_ID());
 * AUDIO::_950A154B8DAB6185("FBI_2_MCS_1_LeadIn", l_40[2 -- [[1]] ]);
 * AUDIO::_950A154B8DAB6185("FIN_C2_MCS_1", l_24C[0 -- [[1]] ]);
 * AUDIO::_950A154B8DAB6185("MNT_DNC", l_5F);
 * AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
 * ```
 * @param p0
 * @param p1
 */
export function SetSynchronizedAudioEventPositionThisFrame(p0: string, p1: number): void {
	return _in(0x950a154b, 0x8dab6185, _ts(p0), p1); 
}

/**
 * ```
 * From the scripts, p0:
 * "ArmWrestlingIntensity",
 * "INOUT",
 * "Monkey_Stream",
 * "ZoomLevel"
 * ```
 * @param p0
 * @param p1
 */
export function setVariableOnStream(p0: string, p1: number): void {
	return _in(0x2f9d3834, 0xaeb9ef79, _ts(p0), _fv(p1)); 
}

/**
 * 
 * @param toggle
 */
export function setUserRadioControlEnabled(toggle: boolean): void {
	return _in(0x19f21e63, 0xae6eae4e, toggle); 
}

/**
 * 
 * @param soundId
 * @param variableName
 * @param value
 */
export function setVariableOnSound(soundId: number, variableName: string, value: number): void {
	return _in(0xad6b3148, 0xa78ae9b6, soundId, _ts(variableName), _fv(value)); 
}

/**
 * ```
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
 * ```
 * @param variableName
 * @param value
 */
export function setVariableOnUnderWaterStream(variableName: string, value: number): void {
	return _in(0x733adf24, 0x1531e5c2, _ts(variableName), _fv(value)); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 */
export function SetVehHasRadioOverride(vehicle: number): void {
	return _in(0x3e45765f, 0x3fbb582f, vehicle); 
}

/**
 * Find the radio station list [here](https://gist.github.com/4mmonium/b47d6512a2d992cbf4eea15d9038b581)
 * @param vehicle
 * @param radioStation
 */
export function setVehRadioStation(vehicle: number, radioStation: string): void {
	return _in(0x1b9c0099, 0xcb942ac6, vehicle, _ts(radioStation)); 
}

/**
 * Vehicle will make a 'rattling' noise when decelerating
 * @param vehicle
 * @param intensity
 */
export function setVehicleAudioBodyDamageFactor(vehicle: number, intensity: number): void {
	return _in(0x01bb4d57, 0x7d38bd9e, vehicle, _fv(intensity)); 
}

/**
 * 
 * @param vehicle
 * @param damageFactor
 */
export function setVehicleAudioEngineDamageFactor(vehicle: number, damageFactor: number): void {
	return _in(0x59e7b488, 0x451f4d3a, vehicle, _fv(damageFactor)); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param value
 */
export function SetVehicleHornVariation(vehicle: number, value: number): void {
	return _in(0x0350e7e1, 0x7ba767d0, vehicle, value); 
}

/**
 * ```
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
 * Will give a boost-soundeffect.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleBoostActive(vehicle: number, toggle: boolean): void {
	return _in(0x4a04de7c, 0xab2739a1, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleRadioLoud(vehicle: number, toggle: boolean): void {
	return _in(0xbb6f1cae, 0xc68b0bce, vehicle, toggle); 
}

/**
 * ```
 * can't seem to enable radio on cop cars etc
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleRadioEnabled(vehicle: number, toggle: boolean): void {
	return _in(0x3b988190, 0xc0aa6c0b, vehicle, toggle); 
}

/**
 * Overrides the vehicle's startup engine rev sound.
 * 
 * 2 calls found in the b617d scripts:
 * 
 * ```cpp
 * AUDIO::SET_VEHICLE_STARTUP_REV_SOUND(l_A42, "Franklin_Bike_Rev", "BIG_SCORE_3A_SOUNDS");
 * AUDIO::SET_VEHICLE_STARTUP_REV_SOUND(l_166, "Trevor_Revs_Off", "PALETO_SCORE_SETUP_SOUNDS");
 * ```
 * @param vehicle
 * @param p1
 * @param p2
 */
export function setVehicleStartupRevSound(vehicle: number, p1: string, p2: string): void {
	return _in(0xf1f8157b, 0x8c3f171c, vehicle, _ts(p1), _ts(p2)); 
}

/**
 * 
 */
export function skipToNextScriptedConversationLine(): void {
	return _in(0x9663fe6b, 0x7a61eb00); 
}

/**
 * 
 */
export function skipRadioForward(): void {
	return _in(0x6ddbbdd9, 0x8e2e9c25); 
}

/**
 * ```
 * SET_*
 * ```
 * @param vehicle
 */
export function SoundVehicleHornThisFrame(vehicle: number): void {
	return _in(0x9c119080, 0x13ea4715, vehicle); 
}

/**
 * ```
 * Example:
 * This will start the alarm at Fort Zancudo.
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
 * ----------
 * It DOES make a difference but it has to do with the duration or something I dunno yet
 * ----------
 * Found in the b617d scripts:
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
 * AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
 * AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
 * AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
 * AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
 * AUDIO::START_ALARM("PRISON_ALARMS", 0);
 * AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
 * ```
 * @param alarmName
 * @param p2
 */
export function startAlarm(alarmName: string, p2: boolean): void {
	return _in(0x0355ef11, 0x6c4c97b2, _ts(alarmName), p2); 
}

/**
 * ```
 * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
 * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC
 * ```
 * @param scene
 */
export function startAudioScene(scene: string): boolean {
	return _in(0x013a80fc, 0x08f6e4f2, _ts(scene), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function startScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void {
	return _in(0x6b17c62c, 0x9635d2dc, p0, p1, p2, p3); 
}

/**
 * ```
 * Example:
 * This will stop the alarm at Fort Zancudo.
 * AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) has to be true (1) to have any effect.
 * ```
 * @param alarmName
 * @param toggle
 */
export function stopAlarm(alarmName: string, toggle: boolean): void {
	return _in(0xa1caddcd, 0x98415a41, _ts(alarmName), toggle); 
}

/**
 * 
 */
export function startPreloadedConversation(): void {
	return _in(0x23641afe, 0x870af385); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function startScriptPhoneConversation(p0: boolean, p1: boolean): void {
	return _in(0x252e5f91, 0x5eabb675, p0, p1); 
}

/**
 * 
 * @param stop
 */
export function stopAllAlarms(stop: boolean): void {
	return _in(0x2f794a87, 0x7add4c92, stop); 
}

/**
 * ```
 * ??
 * ```
 */
export function stopAudioScenes(): void {
	return _in(0xbac7fc81, 0xa75ec1a1); 
}

/**
 * 
 * @param scene
 */
export function stopAudioScene(scene: string): void {
	return _in(0xdfe8422b, 0x3b94e688, _ts(scene)); 
}

/**
 * 
 * @param ped
 */
export function stopCurrentPlayingSpeech(ped: number): void {
	return _in(0x7a73d05a, 0x607734c7, ped); 
}

/**
 * 
 * @param ped
 */
export function stopPedRingtone(ped: number): void {
	return _in(0x6c5ae23e, 0xfa885092, ped); 
}

/**
 * 
 * @param ped
 */
export function stopCurrentPlayingAmbientSpeech(ped: number): void {
	return _in(0xb8bec0ca, 0x6f0edb0f, ped); 
}

/**
 * 
 * @param p0
 */
export function stopScriptedConversation(p0: boolean): number {
	return _in(0xd79deefb, 0x53455eba, p0, _r, _ri); 
}

/**
 * 
 */
export function stopCutsceneAudio(): void {
	return _in(0x806058bb, 0xdc136e06); 
}

/**
 * 
 */
export function stopStream(): void {
	return _in(0xa4718a14, 0x19d18151); 
}

/**
 * 
 * @param ped
 * @param shaking
 */
export function stopPedSpeaking(ped: number, shaking: boolean): void {
	return _in(0x9d64d740, 0x5520e3d3, ped, shaking); 
}

/**
 * 
 * @param soundId
 */
export function stopSound(soundId: number): void {
	return _in(0xa3b0c41b, 0xa5cc0bb5, soundId); 
}

/**
 * ```
 * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W
 * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
 * ```
 * @param eventName
 */
export function triggerMusicEvent(eventName: string): boolean {
	return _in(0x706d57b0, 0xf50da710, _ts(eventName), _r); 
}

/**
 * 
 * @param p0
 */
export function stopSynchronizedAudioEvent(p0: any): boolean {
	return _in(0x92d6a88e, 0x64a94430, p0, _r); 
}

/**
 * ... When not in a vehicle
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 */
export function TriggerSiren(vehicle: number): void {
	return _in(0x66c3fb05, 0x206041ba, vehicle); 
}

/**
 * 
 * @param newsStory
 */
export function unlockMissionNewsStory(newsStory: number): void {
	return _in(0xb165ab7c, 0x248b2dc1, newsStory); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param enableMixes
 */
export function UpdateLsur(enableMixes: boolean): void {
	return _in(0x47aed842, 0x13a47510, enableMixes); 
}

/**
 * 
 * @param radioStation
 */
export function unfreezeRadioStation(radioStation: string): void {
	return _in(0xfc00454c, 0xf60b91dd, _ts(radioStation)); 
}

/**
 * ```
 * AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
 * ```
 * @param radioStation
 * @param trackListName
 */
export function unlockRadioStationTrackList(radioStation: string, trackListName: string): void {
	return _in(0x031acb6a, 0xba18c729, _ts(radioStation), _ts(trackListName)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function useSirenAsHorn(vehicle: number, toggle: boolean): void {
	return _in(0xfa932de3, 0x50266ef8, vehicle, toggle); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * 
 * ```
 * On last-gen this just runs blr and this func is called by several other functions other then the native's table.
 * ```
 */
export function unregisterScriptWithAudio(): void {
	return _in(0xa8638be2, 0x28d4751a); 
}

/**
 * 
 * @param brainSet
 */
export function disableScriptBrainSet(brainSet: number): void {
	return _in(0x14d8518e, 0x9760f08f, brainSet); 
}

/**
 * ```
 * BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
 * - Nacorpio
 * -----
 * Hardcoded to not work in Multiplayer.
 * ```
 * @param name
 * @param model
 * @param p2
 * @param p3
 */
export function addScriptToRandomPed(name: string, model: number, p2: number, p3: number): void {
	return _in(0x4ee53674, 0x68a65ccc, _ts(name), _ch(model), _fv(p2), _fv(p3)); 
}

/**
 * 
 * @param brainSet
 */
export function enableScriptBrainSet(brainSet: number): void {
	return _in(0x67aa4d73, 0xf0cfa86b, brainSet); 
}

/**
 * 
 * @param object
 */
export function isObjectWithinBrainActivationRange(object: number): boolean {
	return _in(0xccba1542, 0x09823057, object, _r); 
}

/**
 * ```
 * Gets whether the world point the calling script is registered to is within desired range of the player.
 * ```
 */
export function isWorldPointWithinBrainActivationRange(): boolean {
	return _in(0xc5042cc6, 0xf5e3d450, _r); 
}

/**
 * ```
 * Registers a script for any object with a specific model hash.
 * BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
 * ```
 * @param scriptName
 * @param modelHash
 * @param p2
 * @param activationRange
 * @param p4
 * @param p5
 */
export function registerObjectScriptBrain(scriptName: string, modelHash: number, p2: number, activationRange: number, p4: number, p5: number): void {
	return _in(0x0be84c31, 0x8ba6ec22, _ts(scriptName), _ch(modelHash), p2, _fv(activationRange), p4, p5); 
}

/**
 * 
 * @param scriptName
 * @param activationRange
 * @param p2
 */
export function registerWorldPointScriptBrain(scriptName: string, activationRange: number, p2: number): void {
	return _in(0x3cdc7136, 0x613284bd, _ts(scriptName), _fv(activationRange), p2); 
}

/**
 * 
 * @param hour
 * @param minute
 * @param second
 */
export function advanceClockTimeTo(hour: number, minute: number, second: number): void {
	return _in(0xc8ca9670, 0xb9d83b3b, hour, minute, second); 
}

/**
 * 
 * @param hours
 * @param minutes
 * @param seconds
 */
export function addToClockTime(hours: number, minutes: number, seconds: number): void {
	return _in(0xd716f30d, 0x8c8980e2, hours, minutes, seconds); 
}

/**
 * 
 */
export function getClockDayOfMonth(): number {
	return _in(0x3d10bc92, 0xa4db1d35, _r, _ri); 
}

/**
 * ```
 * Gets the current day of the week.
 * 0: Sunday
 * 1: Monday
 * 2: Tuesday
 * 3: Wednesday
 * 4: Thursday
 * 5: Friday
 * 6: Saturday
 * ```
 */
export function getClockDayOfWeek(): number {
	return _in(0xd972e4bd, 0x7aeb235f, _r, _ri); 
}

/**
 * ```
 * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
 * ```
 */
export function getClockHours(): number {
	return _in(0x25223ca6, 0xb4d20b7f, _r, _ri); 
}

/**
 * ```
 * Gets the current ingame clock minute.
 * ```
 */
export function getClockMinutes(): number {
	return _in(0x13d2b8ad, 0xd79640f2, _r, _ri); 
}

/**
 * 
 */
export function getClockMonth(): number {
	return _in(0xbbc72712, 0xe80257a1, _r, _ri); 
}

/**
 * ```
 * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
 * ```
 */
export function getClockSeconds(): number {
	return _in(0x494e97c2, 0xef27c470, _r, _ri); 
}

/**
 * 
 */
export function getClockYear(): number {
	return _in(0x961777e6, 0x4bdaf717, _r, _ri); 
}

/**
 * ```
 * Gets local system time as year, month, day, hour, minute and second.
 * Example usage:
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * or use std::tm struct
 * TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
 * ```
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export function getLocalTime(): void {
	return _in(0x50c7a990, 0x57a69748, _i, _i, _i, _i, _i, _i); 
}

/**
 * Returns how many real ms are equal to one game minute.
 * A getter for [`SetMillisecondsPerGameMinute`](#\_0x36CA2554).
 * @return A number of milliseconds that equals to one game minute.
 */
export function getMillisecondsPerGameMinute(): number {
	return _in(0x2f8b4d1c, 0x595b11db, _r, _ri); 
}

/**
 * ```
 * Gets system time as year, month, day, hour, minute and second.
 * Example usage:
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
 * ```
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export function getPosixTime(): void {
	return _in(0xda488f29, 0x9a5b164e, _i, _i, _i, _i, _i, _i); 
}

/**
 * 
 * @param day
 * @param month
 * @param year
 */
export function setClockDate(day: number, month: number, year: number): void {
	return _in(0xb096419d, 0xf0d06ce7, day, month, year); 
}

/**
 * ```
 * Gets current UTC time
 * ```
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export function getUtcTime(): void {
	return _in(0x8117e09a, 0x19eef4d3, _i, _i, _i, _i, _i, _i); 
}

/**
 * 
 * @param toggle
 */
export function pauseClock(toggle: boolean): void {
	return _in(0x4055e40b, 0xd2dbec1d, toggle); 
}

/**
 * ```
 * SET_CLOCK_TIME(12, 34, 56);
 * ```
 * @param hour
 * @param minute
 * @param second
 */
export function setClockTime(hour: number, minute: number, second: number): void {
	return _in(0x47c3b584, 0x8c3e45d8, hour, minute, second); 
}

/**
 * ```
 * modelHash (p1) was always 0 in R* scripts
 * ```
 * @param cutsceneEntName
 * @param modelHash
 */
export function canSetEnterStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean {
	return _in(0x645d0b45, 0x8d8e17b5, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

/**
 * Whether or not it is safe to run functions on the camera,
 * as the camera is now no longer being used by the cutscene.
 * @param p0
 */
export function canSetExitStateForCamera(p0: boolean): boolean {
	return _in(0xb2cbcd09, 0x30dfb420, p0, _r); 
}

/**
 * 
 * @param cutsceneEntName
 * @param modelHash
 */
export function doesCutsceneEntityExist(cutsceneEntName: string, modelHash: number): boolean {
	return _in(0x499ef20c, 0x5db25c59, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

/**
 * Returns when it is safe to start applying changes to cutscene entities.
 * 
 * Should always be used for applying components.
 * 
 * See [`SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED`](#\_0x2A56C06EBEF2B0D9) and [`REGISTER_ENTITY_FOR_CUTSCENE`](#\_0xE40C1C56DF95C2E8) for an example.
 * 
 * This will be true before the cutscene is considered loaded
 * @return Whether you can request assets for cutscene entities, like components.
 */
export function canRequestAssetsForCutsceneEntity(): boolean {
	return _in(0xb56bbbcc, 0x2955d9cb, _r); 
}

/**
 * 
 * @param cutsceneName
 */
export function GetCutFileNumSections(cutsceneName: string): number {
	return _in(0x0abc54de, 0x641dc0fc, _ts(cutsceneName), _r, _ri); 
}

/**
 * Returns if the script can begin interacting with the registered entity. Primarly used for lead-outs of cutscenes.
 * Returns on frame after cutscene ends, so you cannot get is while using IsCutsceneActive()
 * 
 * Whether it is safe to start doing scripted actions on the entity, like simulating walking out of a cutscene.
 * @param cutsceneEntName
 * @param modelHash
 * @return Whether or not it is safe to begin interacting with the entity
 */
export function canSetExitStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean {
	return _in(0x4c6a6451, 0xc79e4662, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

/**
 * Returns the time of the cutscene's end accounting for [`REQUEST_CUTSCENE_WITH_PLAYBACK_LIST`](\_0xC23DE0E91C30B58C)
 * 
 * If a cutscene is laid out with 10 second sections, and section 0 and 1 are enabled then it would be 20000ms.
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 */
export function GetCutsceneEndTime(): number {
	return _in(0x011883f4, 0x1211432a, _r, _ri); 
}

/**
 * 
 */
export function getCutsceneSectionPlaying(): number {
	return _in(0x49010a6a, 0x396553d8, _r, _ri); 
}

/**
 * Gets the elapsed time of the current cutscene in
 * @return Elapsed time in milliseconds
 */
export function getCutsceneTime(): number {
	return _in(0xe625beab, 0xbaffdab9, _r, _ri); 
}

/**
 * Returns the handle of a cutscene entity, can be ped
 * @param cutsceneEntName
 * @param modelHash
 * @return Returns entity handle
 */
export function getEntityIndexOfCutsceneEntity(cutsceneEntName: string, modelHash: number): number {
	return _in(0x0a2e9fdb, 0x9a8c62f6, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

/**
 * Gets the total length of the cutscene irrespective of playback list in milliseconds
 * To account for sections, see [`_GET_CUTSCENE_END_TIME`]()
 * @return Cutscene total length in milliseconds
 */
export function getCutsceneTotalDuration(): number {
	return _in(0xee53b14a, 0x19e480d4, _r, _ri); 
}

/**
 * 
 * @param cutsceneEntName
 * @param modelHash
 */
export function getEntityIndexOfRegisteredEntity(cutsceneEntName: string, modelHash: number): number {
	return _in(0xc0741a26, 0x499654cd, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

/**
 * ```
 * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
 * ```
 * @param cutsceneName
 */
export function hasCutFileLoaded(cutsceneName: string): boolean {
	return _in(0xa1c996c2, 0xa744262e, _ts(cutsceneName), _r); 
}

/**
 * 
 */
export function hasCutsceneCutThisFrame(): boolean {
	return _in(0x708bdd8c, 0xd795b043, _r); 
}

/**
 * 
 */
export function hasCutsceneFinished(): boolean {
	return _in(0x7c0a8930, 0x88881d57, _r); 
}

/**
 * 
 */
export function hasCutsceneLoaded(): boolean {
	return _in(0xc59f528e, 0x9ab9f339, _r); 
}

/**
 * 
 */
export function isCutsceneActive(): boolean {
	return _in(0x991251af, 0xc3981f84, _r); 
}

/**
 * 
 * @param cutsceneName
 */
export function hasThisCutsceneLoaded(cutsceneName: string): boolean {
	return _in(0x228d3d94, 0xf8a11c3c, _ts(cutsceneName), _r); 
}

/**
 * 
 * @param flag
 */
export function isCutscenePlaybackFlagSet(flag: number): boolean {
	return _in(0x71b74d2a, 0xe19338d0, flag, _r); 
}

/**
 * 
 */
export function isCutscenePlaying(): boolean {
	return _in(0xd3c2e180, 0xa40f031e, _r); 
}

/**
 * This can only be run once [`CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY`](#\_0xB56BBBCC2955D9CB) is true, but can be run before [`HAS_CUTSCENE_LOADED`](#\_0xC59F528E9AB9F339)
 * @param cutsceneEntity
 * @param cutsceneEntName
 * @param p2
 * @param modelHash
 * @param p4
 */
export function registerEntityForCutscene(cutsceneEntity: number, cutsceneEntName: string, p2: number, modelHash: number, p4: number): void {
	return _in(0xe40c1c56, 0xdf95c2e8, cutsceneEntity, _ts(cutsceneEntName), p2, _ch(modelHash), p4); 
}

/**
 * ```
 * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
 * ```
 * @param cutsceneName
 */
export function removeCutFile(cutsceneName: string): void {
	return _in(0xd00d76a7, 0xdfc9d852, _ts(cutsceneName)); 
}

/**
 * Only used twice in armenian1.c
 */
export function registerSynchronisedScriptSpeech(): void {
	return _in(0x21310469, 0x57f31b04); 
}

/**
 * 
 */
export function removeCutscene(): void {
	return _in(0x440af51a, 0x3462b86f); 
}

/**
 * ```
 * playbackFlags: Which scenes should be played.
 * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
 * ```
 * @param cutsceneName
 * @param playbackFlags
 * @param flags
 */
export function requestCutsceneWithPlaybackList(cutsceneName: string, playbackFlags: number, flags: number): void {
	return _in(0xc23de0e9, 0x1c30b58c, _ts(cutsceneName), playbackFlags, flags); 
}

/**
 * 
 * @param cutsceneName
 * @param flags
 */
export function requestCutscene(cutsceneName: string, flags: number): void {
	return _in(0x7a86743f, 0x475d9e09, _ts(cutsceneName), flags); 
}

/**
 * ```
 * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
 * ```
 * @param cutsceneName
 */
export function requestCutFile(cutsceneName: string): void {
	return _in(0x06a35241, 0x61c502ba, _ts(cutsceneName)); 
}

/**
 * Only used in networked environment with MP cutscenes
 * @param cutsceneEntName
 * @param p1
 * @param p2
 */
export function setCutsceneEntityStreamingFlags(cutsceneEntName: string, p1: number, p2: number): void {
	return _in(0x4c61c75b, 0xee8184c2, _ts(cutsceneEntName), p1, p2); 
}

/**
 * 
 * @param p0
 */
export function setCutsceneCanBeSkipped(p0: boolean): void {
	return _in(0x41faa8fb, 0x2ece8720, p0); 
}

/**
 * Sets cutscene location, used for multiplayer apartments/businesses.
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p4
 */
export function setCutsceneOrigin(x: number, y: number, z: number, heading: number, p4: number): void {
	return _in(0xb812b3fd, 0x1c01cf27, _fv(x), _fv(y), _fv(z), _fv(heading), p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setCutsceneFadeValues(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void {
	return _in(0x8093f23a, 0xbaccc7d4, p0, p1, p2, p3); 
}

/**
 * See [`SET_PED_COMPONENT_VARIATION`](#\_0x262B14F48D29DE80)
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
export function setCutscenePedComponentVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number): void {
	return _in(0xba01e7b6, 0xdeefbbc9, _ts(cutsceneEntName), componentId, drawableId, textureId, _ch(modelHash)); 
}

/**
 * ```
 * Only used twice in R* scripts
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function setCutsceneTriggerArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void {
	return _in(0x9896ce47, 0x21be84ba, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5)); 
}

/**
 * Sets the components for a cutscene ped, this will take precendence over the cutscene's component overrides. This does not require the entity be registered.
 * 
 * See
 * @param cutsceneEntName
 * @param ped
 * @param modelHash
 */
export function setCutscenePedComponentVariationFromPed(cutsceneEntName: string, ped: number, modelHash: number): void {
	return _in(0x2a56c06e, 0xbef2b0d9, _ts(cutsceneEntName), ped, _ch(modelHash)); 
}

/**
 * Similar to [`SET_CUTSCENE_ORIGIN`](\_0xB812B3FD1C01CF27) but without heading and doesn't need [`START_CUTSCENE`](\_0x186D5CB5E7B0FF7B)
 * @param x
 * @param y
 * @param z
 * @param flags
 */
export function startCutsceneAtCoords(x: number, y: number, z: number, flags: number): void {
	return _in(0x1c9adda3, 0x244a1fbf, _fv(x), _fv(y), _fv(z), flags); 
}

/**
 * See [`SET_PED_PROP_INDEX`](\_0x93376B65A266EB5F)
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
export function setCutscenePedPropVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number): void {
	return _in(0x0546524a, 0xde2e9723, _ts(cutsceneEntName), componentId, drawableId, textureId, _ch(modelHash)); 
}

/**
 * 
 * @param p0
 */
export function stopCutscene(p0: boolean): void {
	return _in(0xc7272775, 0xb4dc786e, p0); 
}

/**
 * ```
 * flags: Usually 0.
 * ```
 * @param flags
 */
export function startCutscene(flags: number): void {
	return _in(0x186d5cb5, 0xe7b0ff7b, flags); 
}

/**
 * Stop cutscene instantly, will dump registered entities right where they were when ran.
 */
export function stopCutsceneImmediately(): void {
	return _in(0xd220bdd2, 0x22ac4a1e); 
}

/**
 * 
 */
export function wasCutsceneSkipped(): boolean {
	return _in(0x40c8656e, 0xdaedd569, _r); 
}

/**
 * ```
 * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
 * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
 * p8 big values ~100 will slow down the camera movement before reaching this node
 * p9 != 0 seems to override the rotation/pitch (bool?)
 * ```
 * @param camera
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param length
 * @param p8
 * @param transitionType
 */
export function addCamSplineNode(camera: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, length: number, p8: number, transitionType: number): void {
	return _in(0x8609c75e, 0xc438fb3b, camera, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), length, p8, transitionType); 
}

/**
 * Takes a camera and uses the information from it as a camera spline node.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
export function addCamSplineNodeUsingCamera(cam: number, cam2: number, length: number, p3: number): void {
	return _in(0x0fb82563, 0x989cf4fb, cam, cam2, length, p3); 
}

/**
 * 
 * @param cam
 * @param cam2
 * @param p2
 * @param p3
 */
export function addCamSplineNodeUsingCameraFrame(cam: number, cam2: number, p2: number, p3: number): void {
	return _in(0x0a9f2a46, 0x8b328e74, cam, cam2, p2, p3); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param p2
 */
export function addCamSplineNodeUsingGameplayFrame(cam: number, p1: number, p2: number): void {
	return _in(0x60927824, 0x6a29ca34, cam, p1, p2); 
}

/**
 * ```
 * CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function animatedShakeScriptGlobal(p0: string, p1: string, p2: string, p3: number): void {
	return _in(0xc2eae3fb, 0x8cdbed31, _ts(p0), _ts(p1), _ts(p2), _fv(p3)); 
}

/**
 * ```
 * Example from michael2 script.
 * CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
 * ```
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 * @param amplitude
 */
export function animatedShakeCam(cam: number, p1: string, p2: string, p3: string, amplitude: number): void {
	return _in(0xa2746eea, 0xe3e577cd, cam, _ts(p1), _ts(p2), _ts(p3), _fv(amplitude)); 
}

/**
 * ```
 * Seems to animate the gameplay camera zoom.
 * Eg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);
 * will animate the camera zooming in from 1000 meters away.
 * Game scripts use it like this:
 * // Setting this to 1 prevents V key from changing zoom
 * PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
 * // These restrict how far you can move cam up/down left/right
 * CAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);
 * CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);
 * CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);
 * ```
 * @param p0
 * @param distance
 */
export function AnimateGameplayCamZoom(p0: number, distance: number): void {
	return _in(0xdf2e1f77, 0x42402e81, _fv(p0), _fv(distance)); 
}

/**
 * 
 * @param cam
 * @param ped
 * @param boneIndex
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
export function attachCamToPedBone(cam: number, ped: number, boneIndex: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void {
	return _in(0x61a3dba1, 0x4ab7f411, cam, ped, boneIndex, _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative); 
}

/**
 * ```
 * Last param determines if its relative to the Entity
 * ```
 * @param cam
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
export function attachCamToEntity(cam: number, entity: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void {
	return _in(0xfedb7d26, 0x9e8c60e3, cam, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative); 
}

/**
 * ```
 * minimum: Degrees between -90f and 90f.
 * maximum: Degrees between -90f and 90f.
 * Clamps the gameplay camera's current pitch.
 * Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
 * ```
 * @param minimum
 * @param maximum
 */
export function ClampGameplayCamPitch(minimum: number, maximum: number): void {
	return _in(0xa516c198, 0xb7dca1e1, _fv(minimum), _fv(maximum)); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param cam
 * @param ped
 * @param boneIndex
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function AttachCamToPedBone2(cam: number, ped: number, boneIndex: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): void {
	return _in(0x149916f5, 0x0c34a40d, cam, ped, boneIndex, _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9); 
}

/**
 * ```
 * minimum: Degrees between -180f and 180f.
 * maximum: Degrees between -180f and 180f.
 * Clamps the gameplay camera's current yaw.
 * Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
 * ```
 * @param minimum
 * @param maximum
 */
export function ClampGameplayCamYaw(minimum: number, maximum: number): void {
	return _in(0x8f993d26, 0xe0ca5e8e, _fv(minimum), _fv(maximum)); 
}

/**
 * Creates a camera with the specified cam name, You can use `SET_CAM_` natives to manipulate the camera.\
 * Make sure to call [RENDER_SCRIPT_CAMS](#\_0x07E5B515DB0636FC) once the camera is created, or this won't have any visible effect.
 * 
 * ### Camera names:
 * 
 * *   DEFAULT_SCRIPTED_CAMERA
 * *   DEFAULT_ANIMATED_CAMERA
 * *   DEFAULT_SPLINE_CAMERA
 * *   DEFAULT_SCRIPTED_FLY_CAMERA
 * *   TIMED_SPLINE_CAMERA
 * *   CUSTOM_TIMED_SPLINE_CAMERA
 * *   ROUNDED_SPLINE_CAMERA
 * *   SMOOTHED_SPLINE_CAMERA
 * @param camName
 * @param active
 * @return A camera handle referencing the camera that was created.
 */
export function createCam(camName: string, active: boolean): number {
	return _in(0xc3981dce, 0x61d9e13f, _ts(camName), active, _r); 
}

/**
 * 
 * @param camHash
 * @param active
 */
export function createCamera(camHash: number, active: boolean): number {
	return _in(0x5e3cf89c, 0x6bcca67d, _ch(camHash), active, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param entity
 */
export function createCinematicShot(p0: any, p1: number, p2: any, entity: number): void {
	return _in(0x741b0129, 0xd4560f31, p0, p1, p2, entity); 
}

/**
 * This native works with vehicles only.
 * Bone indexes are usually given by this native [GET_ENTITY_BONE_INDEX_BY_NAME](#\_0xFB71170B7E76ACBA).
 * @param cam
 * @param vehicle
 * @param boneIndex
 * @param relativeRotation
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param offX
 * @param offY
 * @param offZ
 * @param fixedDirection
 */
export function AttachCamToVehicleBone(cam: number, vehicle: number, boneIndex: number, relativeRotation: boolean, rotX: number, rotY: number, rotZ: number, offX: number, offY: number, offZ: number, fixedDirection: boolean): void {
	return _in(0x8db3f12a, 0x02caef72, cam, vehicle, boneIndex, relativeRotation, _fv(rotX), _fv(rotY), _fv(rotZ), _fv(offX), _fv(offY), _fv(offZ), fixedDirection); 
}

/**
 * ```
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * ```
 * @param bScriptHostCam
 */
export function destroyAllCams(bScriptHostCam: boolean): void {
	return _in(0x8e5fb156, 0x63f79120, bScriptHostCam); 
}

/**
 * ```
 * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * ```
 * @param p0
 */
export function customMenuCoordinates(p0: number): void {
	return _in(0x487a82c6, 0x50eb7799, _fv(p0)); 
}

/**
 * Create a camera with the specified cam name/type, You can use `SET_CAM_` natives to manipulate the camera.
 * 
 * Take a look at [CREATE_CAM](#\_0xC3981DCE61D9E13F) if you would like to see the available camera names.
 * @param camName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param active
 * @param rotationOrder
 * @return A camera handle.
 */
export function createCamWithParams(camName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, active: boolean, rotationOrder: number): number {
	return _in(0xb5119480, 0x0b257161, _ts(camName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), active, rotationOrder, _r); 
}

/**
 * 
 * @param cam
 */
export function detachCam(cam: number): void {
	return _in(0xa2fabbe8, 0x7f4bad82, cam); 
}

/**
 * CAM::\_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z\
 * CAM::\_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z\
 * CAM::\_GET_FINAL_RENDERED_CAM_FOV can be used instead of p7 (Possible p7 is FOV parameter. )\
 * rotationOrder is 2 usually
 * @param camHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param active
 * @param rotationOrder
 */
export function createCameraWithParams(camHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, active: boolean, rotationOrder: number): number {
	return _in(0x6abfa3e1, 0x6460f22d, _ch(camHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), active, rotationOrder, _r); 
}

/**
 * ```
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * ```
 * @param cam
 * @param bScriptHostCam
 */
export function destroyCam(cam: number, bScriptHostCam: boolean): void {
	return _in(0x865908c8, 0x1a2c22e9, cam, bScriptHostCam); 
}

/**
 * 
 */
export function disableAimCamThisUpdate(): void {
	return _in(0x1a31fe00, 0x49e542f6); 
}

/**
 * 
 * @param entity
 */
export function disableCamCollisionForObject(entity: number): void {
	return _in(0x49482f9f, 0xcd825aaa, entity); 
}

/**
 * 
 * @param entity
 */
export function DisableCamCollisionForEntity(entity: number): void {
	return _in(0x2aed6301, 0xf67007d5, entity); 
}

/**
 * ```
 * Fades the screen in.
 * duration: The time the fade should take, in milliseconds.
 * ```
 * @param duration
 */
export function doScreenFadeIn(duration: number): void {
	return _in(0xd4e8e249, 0x55024033, duration); 
}

/**
 * ```
 * Disables first person camera for the current frame.
 * Found in decompiled scripts:
 * GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
 * CAM::_DE2EF5DA284CC8DF();
 * ```
 */
export function DisableFirstPersonCamThisFrame(): void {
	return _in(0xde2ef5da, 0x284cc8df); 
}

/**
 * Looks up a camera handle in the current camera pool and returns `true` if the handle is found, otherwise it returns `false`.
 * @param cam
 * @return A boolean value representing whether the camera exists or not.
 */
export function doesCamExist(cam: number): boolean {
	return _in(0xa7a93217, 0x0592b50e, cam, _r); 
}

/**
 * 
 */
export function DisableVehicleFirstPersonCamThisFrame(): void {
	return _in(0xadff1b2a, 0x555f5fba); 
}

/**
 * ```
 * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
 * ```
 */
export function EnableCrosshairThisFrame(): void {
	return _in(0xea7f0ad7, 0xe9ba676f); 
}

/**
 * ```
 * Fades the screen out.
 * duration: The time the fade should take, in milliseconds.
 * ```
 * @param duration
 */
export function doScreenFadeOut(duration: number): void {
	return _in(0x891b5b39, 0xac6302af, duration); 
}

/**
 * 
 * @param p0
 */
export function forceCinematicRenderingThisUpdate(p0: boolean): void {
	return _in(0xa41bcd72, 0x13805aac, p0); 
}

/**
 * Enumerated type defined in camControlHelperMetadataViewModes:
 * 
 * ```cpp
 * enum Context {
 * ON_FOOT = 0, // [G|S]ET_FOLLOW_PED_CAM_*
 * IN_VEHICLE = 1, // [G|S]ET_FOLLOW_VEHICLE_CAM_*
 * ON_BIKE = 2,
 * IN_BOAT = 3,
 * IN_AIRCRAFT = 4,
 * IN_SUBMARINE = 5,
 * IN_HELI = 6,
 * IN_TURRET = 7,
 * }
 * ```
 * @return The active view mode context.
 */
export function GetCamActiveViewModeContext(): number {
	return _in(0x19cafa3c, 0x87f7c2ff, _r, _ri); 
}

/**
 * 
 * @param cam
 */
export function getCamAnimCurrentPhase(cam: number): number {
	return _in(0xa10b2db4, 0x9e92a6b0, cam, _r, _rf); 
}

/**
 * 
 * @param cam
 */
export function getCamFarClip(cam: number): number {
	return _in(0xb60a9cfe, 0xb21ca6aa, cam, _r, _rf); 
}

/**
 * 
 * @param cam
 */
export function getCamCoord(cam: number): Vector3 {
	return _in(0xbac038f7, 0x459ae5ae, cam, _r, _rv); 
}

/**
 * 
 * @param cam
 */
export function getCamFov(cam: number): number {
	return _in(0xc3330a45, 0xcccdb26a, cam, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param cam
 */
export function GetCamDofStrength(cam: number): number {
	return _in(0x06d153c0, 0xb99b6128, cam, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param cam
 */
export function GetCamNearDof(cam: number): number {
	return _in(0xc2612d22, 0x3d915a1c, cam, _r, _rf); 
}

/**
 * 
 * @param cam
 */
export function getCamFarDof(cam: number): number {
	return _in(0x255f8daf, 0xd540d397, cam, _r, _rf); 
}

/**
 * 
 * @param cam
 */
export function getCamNearClip(cam: number): number {
	return _in(0xc520a34d, 0xafbf24b1, cam, _r, _rf); 
}

/**
 * Gets a camera's rotation by handle (`cam`) lookup, outputs a `Vector3` in degrees.
 * @param cam
 * @param rotationOrder
 * @return A `Vector3` representing the camera rotation in degrees.
 */
export function getCamRot(cam: number, rotationOrder: number): Vector3 {
	return _in(0x7d304c1c, 0x955e3e12, cam, rotationOrder, _r, _rv); 
}

/**
 * 
 * @param cam
 */
export function getCamSplineNodeIndex(cam: number): number {
	return _in(0xb22b17df, 0x858716a6, cam, _r, _ri); 
}

/**
 * ```
 * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
 * ```
 * @param cam
 */
export function getCamSplineNodePhase(cam: number): number {
	return _in(0xd9d0e694, 0xc8282c96, cam, _r, _rf); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the view mode enum.
 * @param context
 */
export function getCamViewModeForContext(context: number): number {
	return _in(0xee778f8c, 0x7e1142e2, context, _r, _ri); 
}

/**
 * ```
 * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
 * (returns 1.0f when no nodes has been added, reached end of non existing spline)
 * ```
 * @param cam
 */
export function getCamSplinePhase(cam: number): number {
	return _in(0xb5349e36, 0xc546509a, cam, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 */
export function GetDebugCamera(): number {
	return _in(0x77c3cec4, 0x6be286f6, _r); 
}

/**
 * 
 */
export function getFinalRenderedCamCoord(): Vector3 {
	return _in(0xa200eb1e, 0xe790f448, _r, _rv); 
}

/**
 * 
 */
export function getFinalRenderedCamFarDof(): number {
	return _in(0x9780f32b, 0xcaf72431, _r, _rf); 
}

/**
 * 
 */
export function getFinalRenderedCamFarClip(): number {
	return _in(0xdfc8cbc6, 0x06fdb0fc, _r, _rf); 
}

/**
 * 
 */
export function getFinalRenderedCamFov(): number {
	return _in(0x80ec1146, 0x69daeff4, _r, _rf); 
}

/**
 * 
 */
export function getFinalRenderedCamMotionBlurStrength(): number {
	return _in(0x162f9d99, 0x5753dc19, _r, _rf); 
}

/**
 * 
 */
export function getFinalRenderedCamNearDof(): number {
	return _in(0xa03502fc, 0x581f7d9b, _r, _rf); 
}

/**
 * 
 */
export function getFinalRenderedCamNearClip(): number {
	return _in(0xd0082607, 0x100d7193, _r, _rf); 
}

/**
 * 
 * @param player
 */
export function getFinalRenderedInWhenFriendlyFov(player: number): number {
	return _in(0x5f35f673, 0x2c3fbba0, player, _r, _rf); 
}

/**
 * 
 * @param rotationOrder
 */
export function getFinalRenderedCamRot(rotationOrder: number): Vector3 {
	return _in(0x5b4e4c81, 0x7fcc2dfb, rotationOrder, _r, _rv); 
}

/**
 * 
 * @param player
 * @param rotationOrder
 */
export function getFinalRenderedInWhenFriendlyRot(player: number, rotationOrder: number): Vector3 {
	return _in(0x26903d9c, 0xd1175f2c, player, rotationOrder, _r, _rv); 
}

/**
 * 
 */
export function getFirstPersonAimCamZoomFactor(): number {
	return _in(0x7ec52cc4, 0x0597d170, _r, _rf); 
}

/**
 * ```cpp
 * // view mode enumeration
 * enum _0xA11D7CA8
 * {
 * THIRD_PERSON_NEAR = 0,
 * THIRD_PERSON_MEDIUM = 1,
 * THIRD_PERSON_FAR = 2,
 * CINEMATIC = 3,
 * FIRST_PERSON = 4,
 * };
 * ```
 * @return Returns a value from the view mode enumeration
 */
export function getFollowPedCamViewMode(): number {
	return _in(0x8d4d4623, 0x0b2c353a, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function getFocusPedOnScreen(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number {
	return _in(0x89215ec7, 0x47df244a, _fv(p0), p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 */
export function getFollowPedCamZoomLevel(): number {
	return _in(0x33e6c8ef, 0xd0cd93e9, _r, _ri); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 */
export function getFollowVehicleCamViewMode(): number {
	return _in(0xa4ff579a, 0xc0e3aaae, _r, _ri); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 */
export function getFollowVehicleCamZoomLevel(): number {
	return _in(0xee82280a, 0xb767b690, _r, _ri); 
}

/**
 * 
 */
export function getGameplayCamFov(): number {
	return _in(0x65019750, 0xa0324133, _r, _rf); 
}

/**
 * 
 */
export function getGameplayCamCoord(): Vector3 {
	return _in(0x14d6f567, 0x8d8f1b37, _r, _rv); 
}

/**
 * 
 * @return Returns the relative pitch of the gameplay camera
 */
export function getGameplayCamRelativePitch(): number {
	return _in(0x3a6867b4, 0x845beda2, _r, _rf); 
}

/**
 * 
 */
export function getGameplayCamRelativeHeading(): number {
	return _in(0x74360764, 0x8add4587, _r, _rf); 
}

/**
 * 
 */
export function getRenderingCam(): number {
	return _in(0x5234f9f1, 0x0919eaba, _r); 
}

/**
 * This function takes a rotation order and outputs a `Vector3` in degrees.
 * 
 * It first calls a game function to calculate these values given the rotation order and effectively multiplies those values by `180/PI`, hence degrees since the function it calls outputs radians which are then converted to degrees.
 * @param rotationOrder
 * @return A `Vector3` representing the gameplay camera rotation in degrees.
 */
export function getGameplayCamRot(rotationOrder: number): Vector3 {
	return _in(0x837765a2, 0x5378f0bb, rotationOrder, _r, _rv); 
}

/**
 * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
 */
export function InvalidateVehicleIdleCam(): void {
	return _in(0x9e4cfff9, 0x89258472); 
}

/**
 * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
 */
export function invalidateIdleCam(): void {
	return _in(0xf4f2c0d4, 0xee209e20); 
}

/**
 * 
 */
export function isAimCamActive(): boolean {
	return _in(0x68edda28, 0xa5976d07, _r); 
}

/**
 * ```
 * IS_A*
 * ```
 */
export function IsAimCamThirdPersonActive(): boolean {
	return _in(0x74bd83ea, 0x840f6bc9, _r); 
}

/**
 * 
 */
export function isBonnetCinematicCamRendering(): boolean {
	return _in(0xd7360051, 0xc885628b, _r); 
}

/**
 * 
 * @param cam
 */
export function isCamInterpolating(cam: number): boolean {
	return _in(0x036f97c9, 0x08c2b52c, cam, _r); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param cam
 * @param animName
 * @param animDictionary
 */
export function isCamPlayingAnim(cam: number, animName: string, animDictionary: string): boolean {
	return _in(0xc90621d8, 0xa0ceecf2, cam, _ts(animName), _ts(animDictionary), _r); 
}

/**
 * ```
 * Returns whether or not the passed camera handle is active.
 * ```
 * @param cam
 */
export function isCamActive(cam: number): boolean {
	return _in(0xdfb2b516, 0x207d3534, cam, _r); 
}

/**
 * 
 * @param p0
 */
export function isCamSplinePaused(p0: any): boolean {
	return _in(0x0290f35c, 0x0ad97864, p0, _r); 
}

/**
 * 
 * @param cam
 */
export function isCamRendering(cam: number): boolean {
	return _in(0x02ec0af5, 0xc5a49b7a, cam, _r); 
}

/**
 * 
 */
export function isCinematicCamRendering(): boolean {
	return _in(0xb15162cb, 0x5826e9e8, _r); 
}

/**
 * 
 * @param cam
 */
export function isCamShaking(cam: number): boolean {
	return _in(0x6b24bfe8, 0x3a2be47b, cam, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 */
export function isCinematicCamInputActive(): boolean {
	return _in(0xf5f1e89a, 0x970b7796, _r); 
}

/**
 * 
 */
export function isCinematicCamShaking(): boolean {
	return _in(0xbbc08f6b, 0x4cb8ff0a, _r); 
}

/**
 * 
 */
export function isCinematicIdleCamRendering(): boolean {
	return _in(0xca9d2aa3, 0xe326d720, _r); 
}

/**
 * 
 * @param p0
 */
export function isCinematicShotActive(p0: any): boolean {
	return _in(0xcc9f3371, 0xa7c28bc9, p0, _r); 
}

/**
 * 
 */
export function isFirstPersonAimCamActive(): boolean {
	return _in(0x5e346d93, 0x4122613f, _r); 
}

/**
 * 
 */
export function isFollowVehicleCamActive(): boolean {
	return _in(0xcbbde6d3, 0x35d6d496, _r); 
}

/**
 * 
 */
export function isGameplayCamShaking(): boolean {
	return _in(0x016c0906, 0x30df1f89, _r); 
}

/**
 * 
 */
export function isFollowPedCamActive(): boolean {
	return _in(0xc6d3d268, 0x10c8e0f9, _r); 
}

/**
 * 
 */
export function isGameplayCamLookingBehind(): boolean {
	return _in(0x70fda869, 0xf3317ea9, _r); 
}

/**
 * 
 */
export function isGameplayHintActive(): boolean {
	return _in(0xe520ff1a, 0xd2785b40, _r); 
}

/**
 * ```
 * Examples when this function will return 0 are:
 * - During busted screen.
 * - When player is coming out from a hospital.
 * - When player is coming out from a police station.
 * - When player is buying gun from AmmuNation.
 * ```
 */
export function isGameplayCamRendering(): boolean {
	return _in(0x39b5d1b1, 0x0383f0c8, _r); 
}

/**
 * 
 */
export function IsInVehicleCamDisabled(): boolean {
	return _in(0x4f32c0d5, 0xa90a9b40, _r); 
}

/**
 * 
 */
export function isScreenFadedIn(): boolean {
	return _in(0x5a859503, 0xb0c08678, _r); 
}

/**
 * 
 */
export function isScreenFadingIn(): boolean {
	return _in(0x5c544bc6, 0xc57ac575, _r); 
}

/**
 * 
 */
export function isScreenFadingOut(): boolean {
	return _in(0x797ac7cb, 0x535ba28f, _r); 
}

/**
 * 
 */
export function isScreenFadedOut(): boolean {
	return _in(0xb16fce9d, 0xdc7ba182, _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isSphereVisible(x: number, y: number, z: number, radius: number): boolean {
	return _in(0xe33d59da, 0x70b58fdf, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * ```
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 * ```
 */
export function isScriptGlobalShaking(): boolean {
	return _in(0xc912af07, 0x8af19212, _r); 
}

/**
 * ```
 * Max value for p1 is 15.
 * ```
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export function overrideCamSplineMotionBlur(cam: number, p1: number, p2: number, p3: number): void {
	return _in(0x7dcf7c70, 0x8d292d55, cam, p1, _fv(p2), _fv(p3)); 
}

/**
 * ```
 * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
 * p9 is unknown at this time.
 * p10 throughout all the X360 Scripts is always 2.
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param cam
 * @param animName
 * @param animDictionary
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param p10
 */
export function playCamAnim(cam: number, animName: string, animDictionary: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p9: boolean, p10: number): boolean {
	return _in(0x9a2d0fb2, 0xe7852392, cam, _ts(animName), _ts(animDictionary), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), p9, p10, _r); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export function overrideCamSplineVelocity(cam: number, p1: number, p2: number, p3: number): void {
	return _in(0x40b62fa0, 0x33eb0346, cam, p1, _fv(p2), _fv(p3)); 
}

/**
 * ```
 * Examples:
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7 -- [[1]] ], l_F4D[15 -- [[1]] ], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param camera
 * @param scene
 * @param animName
 * @param animDictionary
 */
export function playSynchronizedCamAnim(camera: number, scene: number, animName: string, animDictionary: string): boolean {
	return _in(0xe32efe9a, 0xb4a9aa0c, camera, scene, _ts(animName), _ts(animDictionary), _r); 
}

/**
 * 
 * @param cam
 * @param x
 * @param y
 * @param z
 */
export function pointCamAtCoord(cam: number, x: number, y: number, z: number): void {
	return _in(0xf75497bb, 0x865f0803, cam, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Points the camera at the specified entity.
 * 
 * Offset works like [GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS](#\_0x1899F328B0E12848).
 * @param cam
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param p5
 */
export function pointCamAtEntity(cam: number, entity: number, offsetX: number, offsetY: number, offsetZ: number, p5: boolean): void {
	return _in(0x5640bff8, 0x6b16e8dc, cam, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p5); 
}

/**
 * ```
 * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
 * ```
 * @param cam
 * @param ped
 * @param boneIndex
 * @param x
 * @param y
 * @param z
 * @param p6
 */
export function pointCamAtPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, p6: boolean): void {
	return _in(0x68b2b5f3, 0x3ba63c41, cam, ped, boneIndex, _fv(x), _fv(y), _fv(z), p6); 
}

/**
 * 
 */
export function ReplayFreeCamGetMaxRange(): number {
	return _in(0x8bfceb5e, 0xa1b161b6, _r, _rf); 
}

/**
 * ```
 * ease - smooth transition between the camera's positions
 * easeTime - Time in milliseconds for the transition to happen
 * If you have created a script (rendering) camera, and want to go back to the
 * character (gameplay) camera, call this native with render set to 0.
 * Setting ease to 1 will smooth the transition.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param render
 * @param ease
 * @param easeTime
 * @param p3
 * @param p4
 */
export function renderScriptCams(render: boolean, ease: boolean, easeTime: number, p3: boolean, p4: boolean): void {
	return _in(0x07e5b515, 0xdb0636fc, render, ease, easeTime, p3, p4); 
}

/**
 * ```
 * Allows you to aim and shoot at the direction the camera is facing.
 * ```
 * @param cam
 * @param toggle
 */
export function setCamAffectsAiming(cam: number, toggle: boolean): void {
	return _in(0x8c1dc777, 0x0c51dc8d, cam, toggle); 
}

/**
 * ```
 * Set camera as active/inactive.
 * ```
 * @param cam
 * @param active
 */
export function setCamActive(cam: number, active: boolean): void {
	return _in(0x026fb97d, 0x0a425f84, cam, active); 
}

/**
 * 
 * @param cam
 * @param phase
 */
export function setCamAnimCurrentPhase(cam: number, phase: number): void {
	return _in(0x4145a4c4, 0x4ff3b5a6, cam, _fv(phase)); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param camera
 * @param name
 */
export function setCamDebugName(camera: number, name: string): void {
	return _in(0x1b93e010, 0x7865dd40, camera, _ts(name)); 
}

/**
 * ```
 * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
 * ```
 * @param camTo
 * @param camFrom
 * @param duration
 * @param easeLocation
 * @param easeRotation
 */
export function setCamActiveWithInterp(camTo: number, camFrom: number, duration: number, easeLocation: number, easeRotation: number): void {
	return _in(0x9fbda379, 0x383a52a4, camTo, camFrom, duration, easeLocation, easeRotation); 
}

/**
 * ```
 * Sets the position of the cam.
 * ```
 * @param cam
 * @param posX
 * @param posY
 * @param posZ
 */
export function setCamCoord(cam: number, posX: number, posY: number, posZ: number): void {
	return _in(0x4d41783f, 0xb745e42e, cam, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * ```
 * This native has a name defined inside its code
 * ```
 * @param camera
 * @param p1
 */
export function SetCamDofFocusDistanceBias(camera: number, p1: number): void {
	return _in(0xc669eea5, 0xd031b7de, camera, _fv(p1)); 
}

/**
 * ```
 * This native has its name defined inside its codE
 * ```
 * @param camera
 * @param p1
 */
export function SetCamDofFnumberOfLens(camera: number, p1: number): void {
	return _in(0x7dd234d6, 0xf3914c5b, camera, _fv(p1)); 
}

/**
 * ```
 * Native name labeled within its code
 * ```
 * @param camera
 * @param multiplier
 */
export function SetCamDofFocalLengthMultiplier(camera: number, multiplier: number): void {
	return _in(0x47b595d6, 0x0664cffa, camera, _fv(multiplier)); 
}

/**
 * ```
 * This native has a name defined inside its code
 * ```
 * @param camera
 * @param p1
 */
export function SetCamDofMaxNearInFocusDistance(camera: number, p1: number): void {
	return _in(0xc3654a44, 0x1402562d, camera, _fv(p1)); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function setCamDofPlanes(cam: number, p1: number, p2: number, p3: number, p4: number): void {
	return _in(0x3cf48f6f, 0x96e749dc, cam, _fv(p1), _fv(p2), _fv(p3), _fv(p4)); 
}

/**
 * ```
 * This native has a name defined inside its code
 * ```
 * @param camera
 * @param p1
 */
export function SetCamDofMaxNearInFocusDistanceBlendLevel(camera: number, p1: number): void {
	return _in(0x2c654b49, 0x43bddf7c, camera, _fv(p1)); 
}

/**
 * 
 * @param cam
 * @param dofStrength
 */
export function setCamDofStrength(cam: number, dofStrength: number): void {
	return _in(0x5ee29b4d, 0x7d5df897, cam, _fv(dofStrength)); 
}

/**
 * ```
 * if p0 is 0, effect is cancelled
 * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
 * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
 * ```
 * @param p0
 */
export function SetCamEffect(p0: number): void {
	return _in(0x80c8b184, 0x6639bb19, p0); 
}

/**
 * 
 * @param cam
 * @param farClip
 */
export function setCamFarClip(cam: number, farClip: number): void {
	return _in(0xae306f2a, 0x904bf86e, cam, _fv(farClip)); 
}

/**
 * 
 * @param cam
 * @param farDOF
 */
export function setCamFarDof(cam: number, farDOF: number): void {
	return _in(0xedd91296, 0xcd01aee0, cam, _fv(farDOF)); 
}

/**
 * ```
 * Sets the field of view of the cam.
 * ---------------------------------------------
 * Min: 1.0f
 * Max: 130.0f
 * ```
 * @param cam
 * @param fieldOfView
 */
export function setCamFov(cam: number, fieldOfView: number): void {
	return _in(0xb13c14f6, 0x6a00d047, cam, _fv(fieldOfView)); 
}

/**
 * 
 * @param cam
 * @param strength
 */
export function setCamMotionBlurStrength(cam: number, strength: number): void {
	return _in(0x6f0f77fb, 0xa9a8f2e6, cam, _fv(strength)); 
}

/**
 * ```
 * The native seems to only be called once.
 * The native is used as so,
 * CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
 * In the exile1 script.
 * ```
 * @param cam
 * @param p1
 */
export function setCamInheritRollVehicle(cam: number, p1: boolean): void {
	return _in(0x45f1de9c, 0x34b93ae6, cam, p1); 
}

/**
 * 
 * @param cam
 * @param nearClip
 */
export function setCamNearClip(cam: number, nearClip: number): void {
	return _in(0xc7848efc, 0xcc545182, cam, _fv(nearClip)); 
}

/**
 * 
 * @param cam
 * @param nearDOF
 */
export function setCamNearDof(cam: number, nearDOF: number): void {
	return _in(0x3fa4bf0a, 0x7ab7de2c, cam, _fv(nearDOF)); 
}

/**
 * 
 * @param cam
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fieldOfView
 * @param transitionSpeed
 * @param p9
 * @param p10
 * @param rotationOrder
 */
export function setCamParams(cam: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fieldOfView: number, transitionSpeed: number, p9: number, p10: number, rotationOrder: number): void {
	return _in(0xbfd8727a, 0xea3cceba, cam, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fieldOfView), transitionSpeed, p9, p10, rotationOrder); 
}

/**
 * Sets the rotation of the camera.
 * @param cam
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotationOrder
 */
export function setCamRot(cam: number, rotX: number, rotY: number, rotZ: number, rotationOrder: number): void {
	return _in(0x85973643, 0x155d0b07, cam, _fv(rotX), _fv(rotY), _fv(rotZ), rotationOrder); 
}

/**
 * 
 * @param cam
 * @param amplitude
 */
export function setCamShakeAmplitude(cam: number, amplitude: number): void {
	return _in(0xd93db43b, 0x82bc0d00, cam, _fv(amplitude)); 
}

/**
 * ```
 * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
 * ```
 * @param cam
 * @param timeDuration
 */
export function setCamSplineDuration(cam: number, timeDuration: number): void {
	return _in(0x1381539f, 0xee034cda, cam, timeDuration); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param flags
 */
export function setCamSplineNodeExtraFlags(cam: number, p1: number, flags: number): void {
	return _in(0x7bf1a54a, 0xe67ac070, cam, p1, flags); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export function setCamSplineNodeEase(cam: number, p1: number, p2: number, p3: number): void {
	return _in(0x83b8201e, 0xd82a9a2d, cam, p1, p2, _fv(p3)); 
}

/**
 * 
 * @param cam
 * @param p1
 */
export function setCamSplinePhase(cam: number, p1: number): void {
	return _in(0x242b5874, 0xf0a4e052, cam, _fv(p1)); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param scale
 */
export function setCamSplineNodeVelocityScale(cam: number, p1: number, scale: number): void {
	return _in(0xa6385deb, 0x180f319f, cam, p1, _fv(scale)); 
}

/**
 * Sets the smoothing style for a DEFAULT_SPLINE_CAMERA
 * Ranges from 0 to 3 in rockstar scripts although there are actually 26
 * 
 * ```
 * 0: No lead-in or lead-out smoothing
 * 1: Smooth lead-in
 * 2: Smooth lead-out
 * 3: Both lead-in and lead-out are smoothed
 * 4-6: Longer speed up, lead-in, lead-out, and both in order as above.
 * 6: see above, but missed a node in testing(?)
 * 7: Smoothed lead-in, longer smoothed lead-out
 * 8: Longer lead-in and lead-out than 6, didn't drop node
 * 9: Constant acceleration
 * 10: Constant deceleration. Dropped 2 nodes in testing.
 * 11: Same as 0
 * 12: 10 but slower lead-in, reaches end node less early
 * 13: Extremely close to 3, slightly longer lead-in/lead-out
 * 14: Constant acceleration, dropped last 2 nodes in testing and halted (?)
 * 15: Very similar to 10, did not drop any nodes.
 * 16: Long lead-in, dropped 2 nodes in testing, very long leadout.
 * 17: Constant acceleration, slower speed-up than 9
 * 18: Same as 17 is to 9, slightly longer lead-out, lingers at end node
 * 19: Very long lead in and out
 * 20: Very long, gradual lead-in acceleration at start, gets extremely fast
 * 21: Same as 20 but for constant deceleration
 * 22: 20 and 21 combined, long linger at end node. Dropped 2 nodes in testing
 * 23: Constant acceleration, doesn't complete path before it stops
 * 24: Same as 23 but with constant deceleration, but completes path
 * 25: 23 and 24 combined, insanely fast at middle.
 * 26: No noticable lead-in, misses last 2 nodes in testing
 * 27+: Alternates between 0 and 26
 * ```
 * 
 * The above is documented and graphed at [Spline Cam Interp Graphs](https://docs.google.com/spreadsheets/d/1ejyiMcEYrhhQOL0mLe8664UN-vU4Oh-SBqQnVcKlFIk/edit?usp=sharing)
 * 
 * ```
 * 
 * Using 1-3 will result in misalignment from the passed durations for the spline nodes, the overall duration will remain but other nodes will be shortened if smoothing anything.
 * 
 * Graph below demonstrates interpolation between 0-1000 and back 10 times.
 * 
 * ![](https://i.imgur.com/cixWh7m.png)
 * 
 * ## Parameters
 * * **cam**: The DEFAULT_SPLINE_CAMERA to apply the smoothing to
 * * **smoothingStyle**: 0 to 3, 0 no additional smoothing, 1 smooth lead-in, 2 smooth lead-out, 3 smooth lead-in & lead-out
 * ```
 * @param cam
 * @param smoothingStyle
 */
export function setCamSplineSmoothingStyle(cam: number, smoothingStyle: number): void {
	return _in(0xd1b0f412, 0xf109ea5d, cam, smoothingStyle); 
}

/**
 * 
 * @param cam
 * @param toggle
 */
export function setCamUseShallowDofMode(cam: number, toggle: boolean): void {
	return _in(0x16a96863, 0xa17552bb, cam, toggle); 
}

/**
 * 
 * @param p0
 */
export function setCinematicCamShakeAmplitude(p0: number): void {
	return _in(0xc724c701, 0xc30b2fe7, _fv(p0)); 
}

/**
 * 
 * @param context
 * @param viewMode
 */
export function setCamViewModeForContext(context: number, viewMode: number): void {
	return _in(0x2a2173e4, 0x6daecd12, context, viewMode); 
}

/**
 * 
 */
export function setCinematicNewsChannelActiveThisUpdate(): void {
	return _in(0xdc9da9e8, 0x789f5246); 
}

/**
 * 
 * @param p0
 */
export function setCinematicButtonActive(p0: boolean): void {
	return _in(0x51669f7d, 0x1fb53d9f, p0); 
}

/**
 * ```
 * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
 * ```
 * @param toggle
 */
export function setCinematicModeActive(toggle: boolean): void {
	return _in(0xdcf0754a, 0xc3d6fd4e, toggle); 
}

/**
 * 
 * @param distance
 */
export function setFirstPersonAimCamNearClipThisUpdate(distance: number): void {
	return _in(0x0af7b437, 0x918103b3, _fv(distance)); 
}

/**
 * 
 * @param minAngle
 * @param maxAngle
 */
export function SetFirstPersonCamPitchRange(minAngle: number, maxAngle: number): void {
	return _in(0xbcfc632d, 0xb7673bf0, _fv(minAngle), _fv(maxAngle)); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export function setFlyCamHorizontalResponse(cam: number, p1: number, p2: number, p3: number): void {
	return _in(0x503f5920, 0x162365b2, cam, _fv(p1), _fv(p2), _fv(p3)); 
}

/**
 * 
 * @param zoomFactor
 */
export function setFirstPersonAimCamZoomFactor(zoomFactor: number): void {
	return _in(0x70894bd0, 0x915c5bca, _fv(zoomFactor)); 
}

/**
 * 
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export function SetFlyCamVerticalSpeedMultiplier(cam: number, p1: number, p2: number, p3: number): void {
	return _in(0xe827b938, 0x2cfb41ba, cam, _fv(p1), _fv(p2), _fv(p3)); 
}

/**
 * 
 * @param cam
 * @param x
 * @param y
 * @param z
 */
export function setFlyCamCoordAndConstrain(cam: number, x: number, y: number, z: number): void {
	return _in(0xc91c6c55, 0x199308ca, cam, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param cam
 * @param height
 */
export function setFlyCamMaxHeight(cam: number, height: number): void {
	return _in(0xf9d02130, 0xecdd1d77, cam, _fv(height)); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * @param viewMode
 */
export function setFollowPedCamViewMode(viewMode: number): void {
	return _in(0x5a4f9edf, 0x1673f704, viewMode); 
}

/**
 * ```
 * From the scripts:
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * ```
 * @param camName
 * @param p1
 */
export function setFollowPedCamThisUpdate(camName: string, p1: number): boolean {
	return _in(0x44a113dd, 0x6ffc48d1, _ts(camName), p1, _r); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * @param viewMode
 */
export function setFollowVehicleCamViewMode(viewMode: number): void {
	return _in(0xac253d78, 0x42768f48, viewMode); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param seatIndex
 */
export function SetFollowTurretSeatCam(seatIndex: number): void {
	return _in(0x5c90cab0, 0x9951a12f, seatIndex); 
}

/**
 * 
 * @param ped
 */
export function setGameplayCamFollowPedThisUpdate(ped: number): void {
	return _in(0x8bbacbf5, 0x1da047a8, ped); 
}

/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * @param zoomLevel
 */
export function setFollowVehicleCamZoomLevel(zoomLevel: number): void {
	return _in(0x19464cb6, 0xe4078c8a, zoomLevel); 
}

/**
 * ```
 * Sets gameplay camera to hash
 * ```
 * 
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param camName
 */
export function SetGameplayCamHash(camName: string): void {
	return _in(0x425a920f, 0xdb9a0dda, _ts(camName)); 
}

/**
 * 
 * @param pitch
 */
export function SetGameplayCamRawPitch(pitch: number): void {
	return _in(0x759e13eb, 0xc1c15c5a, _fv(pitch)); 
}

/**
 * ```
 * Sets the camera position relative to heading in float from -360 to +360.
 * Heading is alwyas 0 in aiming camera.
 * ```
 * @param heading
 */
export function setGameplayCamRelativeHeading(heading: number): void {
	return _in(0xb4ec2312, 0xf4e5b1f1, _fv(heading)); 
}

/**
 * ```
 * Does nothing
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param yaw
 */
export function SetGameplayCamRawYaw(yaw: number): void {
	return _in(0x103991d4, 0xa307d472, _fv(yaw)); 
}

/**
 * 
 * @param roll
 * @param pitch
 * @param yaw
 */
export function SetGameplayCamRelativeRotation(roll: number, pitch: number, yaw: number): void {
	return _in(0x48608c34, 0x64f58ab4, _fv(roll), _fv(pitch), _fv(yaw)); 
}

/**
 * ```
 * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
 * ```
 * @param amplitude
 */
export function setGameplayCamShakeAmplitude(amplitude: number): void {
	return _in(0xa87e0093, 0x2db4d85d, _fv(amplitude)); 
}

/**
 * This native sets the camera's pitch (rotation on the x-axis).
 * @param angle
 * @param scalingFactor
 */
export function setGameplayCamRelativePitch(angle: number, scalingFactor: number): void {
	return _in(0x6d0858b8, 0xedfd2b7d, _fv(angle), _fv(scalingFactor)); 
}

/**
 * ```
 * From b617 scripts:
 * CAM::_21E253A7F8DA5DFB("DINGHY");
 * CAM::_21E253A7F8DA5DFB("ISSI2");
 * CAM::_21E253A7F8DA5DFB("SPEEDO");
 * ```
 * @param vehicleName
 */
export function SetGameplayCamVehicleCamera(vehicleName: string): void {
	return _in(0x21e253a7, 0xf8da5dfb, _ts(vehicleName)); 
}

/**
 * ```
 * p6 & p7 - possibly length or time
 * ```
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function setGameplayEntityHint(entity: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, p5: number, p6: number, p7: number, p8: any): void {
	return _in(0x189e955a, 0x8313e298, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), p4, p5, p6, p7, p8); 
}

/**
 * 
 * @param xOffset
 */
export function SetGameplayHintAnimOffsetx(xOffset: number): void {
	return _in(0x5d7b620d, 0xae436138, _fv(xOffset)); 
}

/**
 * 
 * @param vehicleModel
 */
export function SetGameplayCamVehicleCameraName(vehicleModel: number): void {
	return _in(0x11fa5d34, 0x79c7dd47, _ch(vehicleModel)); 
}

/**
 * 
 * @param yOffset
 */
export function SetGameplayHintAnimOffsety(yOffset: number): void {
	return _in(0xc92717ef, 0x615b6704, _fv(yOffset)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param blendOutDuration
 * @param blendInDuration
 * @param unk
 */
export function setGameplayCoordHint(x: number, y: number, z: number, duration: number, blendOutDuration: number, blendInDuration: number, unk: number): void {
	return _in(0xd51adcd2, 0xd8bc0fb3, _fv(x), _fv(y), _fv(z), duration, blendOutDuration, blendInDuration, unk); 
}

/**
 * 
 * @param value
 */
export function setGameplayHintBaseOrbitPitchOffset(value: number): void {
	return _in(0xd1f8363d, 0xfad03848, _fv(value)); 
}

/**
 * 
 * @param toggle
 */
export function SetGameplayHintAnimCloseup(toggle: boolean): void {
	return _in(0xe3433ead, 0xaaf7ee40, toggle); 
}

/**
 * 
 * @param FOV
 */
export function setGameplayHintFov(FOV: number): void {
	return _in(0x513403fb, 0x9c56211f, _fv(FOV)); 
}

/**
 * 
 * @param value
 */
export function setGameplayHintFollowDistanceScalar(value: number): void {
	return _in(0xf8bdbf3d, 0x573049a1, _fv(value)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function setGameplayObjectHint(p0: any, p1: number, p2: number, p3: number, p4: boolean, p5: any, p6: any, p7: any): void {
	return _in(0x83e87508, 0xa2ca2ac6, p0, _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, p7); 
}

/**
 * 
 * @param p0
 * @param x1
 * @param y1
 * @param z1
 * @param p4
 * @param duration
 * @param blendOutDuration
 * @param blendInDuration
 */
export function setGameplayPedHint(p0: number, x1: number, y1: number, z1: number, p4: boolean, duration: number, blendOutDuration: number, blendInDuration: number): void {
	return _in(0x2b486269, 0xacd548d3, p0, _fv(x1), _fv(y1), _fv(z1), p4, duration, blendOutDuration, blendInDuration); 
}

/**
 * Focuses the camera on the specified vehicle.
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 */
export function setGameplayVehicleHint(vehicle: number, offsetX: number, offsetY: number, offsetZ: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void {
	return _in(0xa2297e18, 0xf3e71c2e, vehicle, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p4, time, easeInTime, easeOutTime); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setInVehicleCamStateThisUpdate(p0: number, p1: number): void {
	return _in(0xe9ea16d6, 0xe54cdca4, p0, p1); 
}

/**
 * 
 * @param distance
 */
export function setThirdPersonAimCamNearClipThisUpdate(distance: number): void {
	return _in(0x42156508, 0x606de65e, _fv(distance)); 
}

/**
 * 
 */
export function setUseHiDof(): void {
	return _in(0xa13b0222, 0xf3d94a94); 
}

/**
 * ```
 * Only used in R* Script fm_mission_controller_2020
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 */
export function SetUseHiDofInCutscene(): void {
	return _in(0x731a8805, 0x55da3647); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setWidescreenBorders(p0: boolean, p1: number): void {
	return _in(0xdcd4ea92, 0x4f42d01a, p0, p1); 
}

/**
 * ```
 * Possible shake types (updated b617d):
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 * ```
 * @param cam
 * @param type
 * @param amplitude
 */
export function shakeCam(cam: number, type: string, amplitude: number): void {
	return _in(0x6a25241c, 0x340d3822, cam, _ts(type), _fv(amplitude)); 
}

/**
 * ```
 * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
 * ```
 * @param p0
 * @param p1
 */
export function shakeCinematicCam(p0: string, p1: number): void {
	return _in(0xdce214d9, 0xed58f3cf, _ts(p0), _fv(p1)); 
}

/**
 * ```
 * Possible shake types (updated b617d):
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 * ```
 * @param shakeName
 * @param intensity
 */
export function shakeGameplayCam(shakeName: string, intensity: number): void {
	return _in(0xfd55e495, 0x55e017cf, _ts(shakeName), _fv(intensity)); 
}

/**
 * ```
 * CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
 * ```
 * @param p0
 * @param p1
 */
export function shakeScriptGlobal(p0: string, p1: number): void {
	return _in(0xf4c8cf9e, 0x353afeca, _ts(p0), _fv(p1)); 
}

/**
 * 
 * @param cam
 * @param p1
 */
export function stopCamShaking(cam: number, p1: boolean): void {
	return _in(0xbdecf643, 0x67884ac3, cam, p1); 
}

/**
 * 
 * @param p0
 */
export function stopCinematicShot(p0: number): void {
	return _in(0x7660c6e7, 0x5d3a078e, _ch(p0)); 
}

/**
 * 
 * @param cam
 */
export function stopCamPointing(cam: number): void {
	return _in(0xf33ab757, 0x80ba57de, cam); 
}

/**
 * 
 * @param p0
 */
export function stopCinematicCamShaking(p0: boolean): void {
	return _in(0x2238e588, 0xe588a6d7, p0); 
}

/**
 * 
 * @param p0
 */
export function stopGameplayCamShaking(p0: boolean): void {
	return _in(0x0ef93e9f, 0x3d08c178, p0); 
}

/**
 * 
 */
export function stopCutsceneCamShaking(): void {
	return _in(0xdb629ffd, 0x9285fa06); 
}

/**
 * ```
 * This native makes the gameplay camera zoom into first person/third person with a special effect.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param render
 * @param p1
 * @param p2
 */
export function stopRenderingScriptCamsUsingCatchUp(render: boolean, p1: number, p2: number): void {
	return _in(0xc819f3cb, 0xb62bf692, render, _fv(p1), p2); 
}

/**
 * 
 * @param p0
 */
export function stopGameplayHint(p0: boolean): void {
	return _in(0xf46c581c, 0x61718916, p0); 
}

/**
 * 
 */
export function UseStuntCameraThisFrame(): void {
	return _in(0x6493cf69, 0x859b116a); 
}

/**
 * ```
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 * ```
 * @param p0
 */
export function stopScriptGlobalShaking(p0: boolean): void {
	return _in(0x1c9d7949, 0xfa533490, p0); 
}

/**
 * 
 * @param arrayData
 * @param value
 */
export function dataarrayAddBool(value: boolean): void {
	return _in(0xf8b0f5a4, 0x3e928c76, _i, value); 
}

/**
 * 
 * @param arrayData
 */
export function dataarrayAddDict(): any {
	return _in(0x6889498b, 0x3e19c797, _i, _r, _ri); 
}

/**
 * 
 * @param arrayData
 * @param value
 */
export function dataarrayAddInt(value: number): void {
	return _in(0xcabdb751, 0xd86fe93b, _i, value); 
}

/**
 * 
 * @param arrayData
 * @param value
 */
export function dataarrayAddFloat(value: number): void {
	return _in(0x57a995fd, 0x75d37f56, _i, _fv(value)); 
}

/**
 * 
 * @param arrayData
 * @param valueX
 * @param valueY
 * @param valueZ
 */
export function dataarrayAddVector(valueX: number, valueY: number, valueZ: number): void {
	return _in(0x407f8d03, 0x4f70f0c2, _i, _fv(valueX), _fv(valueY), _fv(valueZ)); 
}

/**
 * 
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetBool(arrayIndex: number): boolean {
	return _in(0x50c1b287, 0x4e50c114, _i, arrayIndex, _r); 
}

/**
 * 
 * @param arrayData
 * @param value
 */
export function dataarrayAddString(value: string): void {
	return _in(0x2f0661c1, 0x55aeeeaa, _i, _ts(value)); 
}

/**
 * 
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetDict(arrayIndex: number): any {
	return _in(0x8b5fadcc, 0x4e3a145f, _i, arrayIndex, _r, _ri); 
}

/**
 * 
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetFloat(arrayIndex: number): number {
	return _in(0xc0c527b5, 0x25d7cfb5, _i, arrayIndex, _r, _rf); 
}

/**
 * 
 * @param arrayData
 */
export function dataarrayGetCount(): number {
	return _in(0x065db281, 0x590cea2d, _i, _r, _ri); 
}

/**
 * ```
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * ```
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetType(arrayIndex: number): number {
	return _in(0x3a0014ad, 0xb172a3c5, _i, arrayIndex, _r, _ri); 
}

/**
 * 
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetVector(arrayIndex: number): Vector3 {
	return _in(0x8d2064e5, 0xb64a628a, _i, arrayIndex, _r, _rv); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictCreateDict(key: string): any {
	return _in(0xa358f56f, 0x10732ee1, _i, _ts(key), _r, _ri); 
}

/**
 * 
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetInt(arrayIndex: number): number {
	return _in(0x3e5ae194, 0x25cd74be, _i, arrayIndex, _r, _ri); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetBool(key: string): boolean {
	return _in(0x1186940e, 0xd72ffeec, _i, _ts(key), _r); 
}

/**
 * 
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetString(arrayIndex: number): string {
	return _in(0xd3f2ffeb, 0x8d836f52, _i, arrayIndex, _r, _s); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetDict(key: string): any {
	return _in(0xb6b9ddc4, 0x12fceee2, _i, _ts(key), _r, _ri); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictCreateArray(key: string): any {
	return _in(0x5b117285, 0x27ca6e5f, _i, _ts(key), _r, _ri); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetArray(key: string): any {
	return _in(0x7a983aa9, 0xda2659ed, _i, _ts(key), _r, _ri); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetFloat(key: string): number {
	return _in(0x06610343, 0xe73b9727, _i, _ts(key), _r, _rf); 
}

/**
 * ```
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * ```
 * @param objectData
 * @param key
 */
export function datadictGetType(key: string): number {
	return _in(0x031c55ed, 0x33227371, _i, _ts(key), _r, _ri); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetInt(key: string): number {
	return _in(0x78f06f6b, 0x1fb5a80c, _i, _ts(key), _r, _ri); 
}

/**
 * 
 * @param objectData
 * @param key
 * @param value
 */
export function datadictSetFloat(key: string, value: number): void {
	return _in(0xc27e1cc2, 0xd795105e, _i, _ts(key), _fv(value)); 
}

/**
 * 
 * @param objectData
 * @param key
 * @param value
 */
export function datadictSetBool(key: string, value: boolean): void {
	return _in(0x35124302, 0xa556a325, _i, _ts(key), value); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetString(key: string): string {
	return _in(0x3d2fd9e7, 0x63b24472, _i, _ts(key), _r, _s); 
}

/**
 * 
 * @param objectData
 * @param key
 */
export function datadictGetVector(key: string): Vector3 {
	return _in(0x46cd3cb6, 0x6e0825cc, _i, _ts(key), _r, _rv); 
}

/**
 * 
 * @param objectData
 * @param key
 * @param value
 */
export function datadictSetInt(key: string, value: number): void {
	return _in(0xe7e03545, 0x0a7948d5, _i, _ts(key), value); 
}

/**
 * 
 * @param objectData
 * @param key
 * @param value
 */
export function datadictSetString(key: string, value: string): void {
	return _in(0x8ff3847d, 0xadd8e30c, _i, _ts(key), _ts(value)); 
}

/**
 * 
 */
export function datafileClearWatchList(): void {
	return _in(0x6cc86e78, 0x358d5119); 
}

/**
 * 
 * @param objectData
 * @param key
 * @param valueX
 * @param valueY
 * @param valueZ
 */
export function datadictSetVector(key: string, valueX: number, valueY: number, valueZ: number): void {
	return _in(0x4cd49b76, 0x338c7dee, _i, _ts(key), _fv(valueX), _fv(valueY), _fv(valueZ)); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 */
export function datafileCreate(): void {
	return _in(0xd27058a1, 0xca2b13ee); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 */
export function datafileDelete(): void {
	return _in(0x9ab9c1cf, 0xc8862dfb); 
}

/**
 * 
 * @param p0
 */
export function datafileDeleteRequestedFile(p0: any): boolean {
	return _in(0x8f5ea1c0, 0x1d65a100, p0, _r); 
}

/**
 * 
 */
export function datafileFlushMissionHeader(): void {
	return _in(0xc55854c7, 0xd7274882); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 */
export function datafileGetFileDict(): string {
	return _in(0x906b778c, 0xa1dc72b6, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function datafileHasLoadedFileData(p0: any): boolean {
	return _in(0x15ff52b8, 0x09db2353, p0, _r); 
}

/**
 * ```
 * Example:
 * if (!DATAFILE::_BEDB96A7584AA8CF())
 * {
 * if (!g_109E3)
 * {
 * if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))
 * {
 * if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())
 * {
 * g_17A8B = 0;
 * }
 * if (!g_D52C)
 * {
 * sub_730();
 * }
 * }
 * }
 * }
 * ```
 */
export function datafileIsSavePending(): boolean {
	return _in(0xbedb96a7, 0x584aa8cf, _r); 
}

/**
 * 
 * @param p0
 */
export function datafileHasValidFileData(p0: any): boolean {
	return _in(0xf8cc1ebe, 0x0b62e29f, p0, _r); 
}

/**
 * 
 * @param index
 */
export function datafileIsValidRequestId(index: number): boolean {
	return _in(0xfccae5b9, 0x2a830878, index, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function datafileSelectActiveFile(p0: any): boolean {
	return _in(0x22da6693, 0x6e0fff37, p0, _r); 
}

/**
 * ```
 * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
 * Returns whether or not the file was successfully loaded.
 * Example:
 * DATAFILE::_LOAD_UGC_FILE("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param filename
 */
export function datafileLoadOfflineUgc(filename: string): boolean {
	return _in(0xc5238c01, 0x1af405e4, _ts(filename), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function datafileSelectCreatorStats(p0: number): boolean {
	return _in(0x01095c95, 0xcd46b624, p0, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function datafileSelectUgcData(p0: number): boolean {
	return _in(0xa69ac4ad, 0xe82b57a4, p0, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function datafileSelectUgcPlayerData(p0: number): boolean {
	return _in(0x52818819, 0x057f2b40, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function datafileUpdateSaveToCloud(): boolean {
	return _in(0x4dfdd9eb, 0x705f8140, _i, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param p0
 * @param p1
 */
export function datafileSelectUgcStats(p0: number, p1: boolean): boolean {
	return _in(0x9cb0bfa7, 0xa9342c3d, p0, p1, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param filename
 */
export function datafileStartSaveToCloud(filename: string): boolean {
	return _in(0x83bcce32, 0x24735f05, _ts(filename), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 */
export function datafileStoreMissionHeader(): void {
	return _in(0x2ed61456, 0x317b8178); 
}

/**
 * ```
 * Adds the given request ID to the watch list.
 * ```
 * @param id
 */
export function datafileWatchRequestId(id: number): void {
	return _in(0xad6875bb, 0xc0fc899c, id); 
}

/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * ```
 * @param data
 * @param dataCount
 * @param contentName
 * @param description
 * @param tagsCsv
 * @param contentTypeName
 * @param publish
 */
export function ugcCreateContent(data: string, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean): boolean {
	return _in(0xc84527e2, 0x35fca219, _ts(data), dataCount, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), publish, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param contentId
 * @param rating
 * @param contentTypeName
 */
export function ugcSetPlayerData(contentId: string, rating: number, contentTypeName: string): boolean {
	return _in(0x692d808c, 0x34a82143, _ts(contentId), _fv(rating), _ts(contentTypeName), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param contentName
 * @param description
 * @param tagsCsv
 * @param contentTypeName
 * @param publish
 */
export function ugcCreateMission(contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean): boolean {
	return _in(0xa5efc3e8, 0x47d60507, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), publish, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * ```
 * @param contentId
 * @param data
 * @param dataCount
 * @param contentName
 * @param description
 * @param tagsCsv
 * @param contentTypeName
 */
export function ugcUpdateContent(contentId: string, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string): boolean {
	return _in(0x648e7a54, 0x34af7969, _ts(contentId), _i, dataCount, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param contentId
 * @param contentName
 * @param description
 * @param tagsCsv
 * @param contentTypeName
 */
export function ugcUpdateMission(contentId: string, contentName: string, description: string, tagsCsv: string, contentTypeName: string): boolean {
	return _in(0x4645de99, 0x80999e93, _ts(contentId), _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), _r); 
}

/**
 * ```
 * Returns whether or not the specified property is set for the entity.
 * ```
 * @param entity
 * @param propertyName
 */
export function decorExistOn(entity: number, propertyName: string): boolean {
	return _in(0x05661b80, 0xa8c9165f, entity, _ts(propertyName), _r); 
}

/**
 * 
 * @param entity
 * @param propertyName
 */
export function decorGetBool(entity: number, propertyName: string): boolean {
	return _in(0xdace6716, 0x63f2f5db, entity, _ts(propertyName), _r); 
}

/**
 * 
 * @param entity
 * @param propertyName
 */
export function decorGetFloat(entity: number, propertyName: string): number {
	return _in(0x6524a2f1, 0x14706f43, entity, _ts(propertyName), _r, _rf); 
}

/**
 * 
 * @param entity
 * @param propertyName
 */
export function decorGetInt(entity: number, propertyName: string): number {
	return _in(0xa06c969b, 0x02a97298, entity, _ts(propertyName), _r, _ri); 
}

/**
 * Decor types:
 * 
 * ```
 * enum eDecorType
 * {
 * DECOR_TYPE_FLOAT = 1,
 * DECOR_TYPE_BOOL = 2,
 * DECOR_TYPE_INT = 3,
 * DECOR_TYPE_UNK = 4,
 * DECOR_TYPE_TIME = 5
 * };
 * ```
 * @param propertyName
 * @param type
 */
export function decorRegister(propertyName: string, type: number): void {
	return _in(0x9fd90732, 0xf56403ce, _ts(propertyName), type); 
}

/**
 * 
 * @param propertyName
 * @param type
 */
export function decorIsRegisteredAsType(propertyName: string, type: number): boolean {
	return _in(0x4f14f9f8, 0x70d6fbc8, _ts(propertyName), type, _r); 
}

/**
 * ```
 * Called after all decorator type initializations.
 * ```
 */
export function decorRegisterLock(): void {
	return _in(0xa9d14eea, 0x259f9248); 
}

/**
 * 
 * @param entity
 * @param propertyName
 */
export function decorRemove(entity: number, propertyName: string): boolean {
	return _in(0x00ee9f29, 0x7c738720, entity, _ts(propertyName), _r); 
}

/**
 * ```
 * This function sets metadata of type bool to specified entity.
 * ```
 * @param entity
 * @param propertyName
 * @param value
 */
export function decorSetBool(entity: number, propertyName: string, value: boolean): boolean {
	return _in(0x6b1e8e2e, 0xd1335b71, entity, _ts(propertyName), value, _r); 
}

/**
 * ```
 * Sets property to int.
 * ```
 * @param entity
 * @param propertyName
 * @param value
 */
export function decorSetInt(entity: number, propertyName: string, value: number): boolean {
	return _in(0x0ce3aa5e, 0x1ca19e10, entity, _ts(propertyName), value, _r); 
}

/**
 * 
 * @param entity
 * @param propertyName
 * @param timestamp
 */
export function decorSetTime(entity: number, propertyName: string, timestamp: number): boolean {
	return _in(0x95aed7b8, 0xe39ecaa4, entity, _ts(propertyName), timestamp, _r); 
}

/**
 * 
 * @param entity
 * @param propertyName
 * @param value
 */
export function decorSetFloat(entity: number, propertyName: string, value: number): boolean {
	return _in(0x211ab1dd, 0x8d0f363a, entity, _ts(propertyName), _fv(value), _r); 
}

/**
 * 
 */
export function getIsLoadingScreenActive(): boolean {
	return _in(0x10d0a8f2, 0x59e93ec9, _r); 
}

/**
 * 
 */
export function GetExtraContentPackHasBeenInstalled(): boolean {
	return _in(0x8d30f648, 0x014a92b5, _r); 
}

/**
 * ```
 * Sets the value of the specified variable to 0.
 * Always returns true.
 * ```
 * @param variable
 * @param unused
 */
export function hasCloudRequestsFinished(unused: any): boolean {
	return _in(0x46e2b844, 0x905bc5f0, _i, unused, _r); 
}

/**
 * ```
 * Example:
 * DLC::IS_DLC_PRESENT($\mpbusiness2\);
 * ($ = gethashkey)
 * bruteforce these:
 * 0xB119F6D
 * 0x96F02EE6
 * ```
 * @param dlcHash
 */
export function isDlcPresent(dlcHash: number): boolean {
	return _in(0x812595a0, 0x644ce1de, _ch(dlcHash), _r); 
}

/**
 * ```
 * This loads the GTA:O dlc map parts (high end garages, apartments).
 * Works in singleplayer.
 * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
 * ```
 */
export function onEnterMp(): void {
	return _in(0x0888c350, 0x2dbbeef5); 
}

/**
 * ```
 * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
 * The original (and wrong) definition is below:
 * This unload the GTA:O DLC map parts (like high end garages/apartments).
 * Works in singleplayer.
 * ```
 */
export function onEnterSp(): void {
	return _in(0xd7c10c4a, 0x637992c9); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export function addShockingEventAtPosition(eventType: number, x: number, y: number, z: number, duration: number): number {
	return _in(0xd9f84554, 0x09b525e9, eventType, _fv(x), _fv(y), _fv(z), _fv(duration), _r); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * @param eventType
 * @param entity
 * @param duration
 */
export function addShockingEventForEntity(eventType: number, entity: number, duration: number): number {
	return _in(0x7fd8f3be, 0x76f89422, eventType, entity, _fv(duration), _r); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * @param name
 * @param eventType
 */
export function clearDecisionMakerEventResponse(name: number, eventType: number): void {
	return _in(0x4fc9381a, 0x7aee8968, _ch(name), eventType); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * This is limited to 4 blocked events at a time.
 * ```
 * @param name
 * @param eventType
 */
export function blockDecisionMakerEvent(name: number, eventType: number): void {
	return _in(0xe42fcdfd, 0x0e4196f7, _ch(name), eventType); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isShockingEventInSphere(eventType: number, x: number, y: number, z: number, radius: number): boolean {
	return _in(0x1374abb7, 0xc15bab92, eventType, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * 
 * @param p0
 */
export function removeAllShockingEvents(p0: boolean): void {
	return _in(0xeaabe8fd, 0xfa21274c, p0); 
}

/**
 * 
 * @param ped
 * @param name
 */
export function setDecisionMaker(ped: number, name: number): void {
	return _in(0xb604a294, 0x2aded0ee, ped, _ch(name)); 
}

/**
 * 
 * @param event
 */
export function removeShockingEvent(event: number): boolean {
	return _in(0x2cda538c, 0x44c6cce5, event, _r); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * @param eventType
 */
export function suppressShockingEventTypeNextFrame(eventType: number): void {
	return _in(0x3fd2ec8b, 0xf1f1cf30, eventType); 
}

/**
 * 
 */
export function removeShockingEventSpawnBlockingAreas(): void {
	return _in(0x340f1415, 0xb68aeade); 
}

/**
 * 
 */
export function suppressShockingEventsNextFrame(): void {
	return _in(0x2f9a292a, 0xd0a3bd89); 
}

/**
 * 
 */
export function suppressAgitationEventsNextFrame(): void {
	return _in(0x5f3b7749, 0xc112d552); 
}

/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * @param name
 * @param eventType
 */
export function unblockDecisionMakerEvent(name: number, eventType: number): void {
	return _in(0xd7cd9cf3, 0x4f2c99e8, _ch(name), eventType); 
}

/**
 * ```
 * Applies a force to the specified entity.
 * **List of force types (p1)**:
 * public enum ForceType
 * {
 * MinForce = 0,
 * MaxForceRot = 1,
 * MinForce2 = 2,
 * MaxForceRot2 = 3,
 * ForceNoRot = 4,
 * ForceRotPlusForce = 5
 * }
 * Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
 * p6/relative - makes the xyz force not relative to world coords, but to something else
 * p7/highForce - setting false will make the force really low
 * ```
 * @param entity
 * @param forceType
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param isDirectionRel
 * @param isForceRel
 * @param p8
 */
export function applyForceToEntityCenterOfMass(entity: number, forceType: number, x: number, y: number, z: number, p5: boolean, isDirectionRel: boolean, isForceRel: boolean, p8: boolean): void {
	return _in(0x18ff00fc, 0x7eff559e, entity, forceType, _fv(x), _fv(y), _fv(z), p5, isDirectionRel, isForceRel, p8); 
}

/**
 * Attach an entity to the specified entity.
 * @param entity1
 * @param entity2
 * @param boneIndex
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param useSoftPinning
 * @param collision
 * @param isPed
 * @param rotationOrder
 * @param syncRot
 */
export function attachEntityToEntity(entity1: number, entity2: number, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p9: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, rotationOrder: number, syncRot: boolean): void {
	return _in(0x6b9bbd38, 0xab0796df, entity1, entity2, boneIndex, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), p9, useSoftPinning, collision, isPed, rotationOrder, syncRot); 
}

/**
 * Applies a force to the specified entity.
 * 
 * **List of force types (p1)**:
 * 
 * ```
 * public enum ForceType
 * {
 * MinForce = 0,
 * MaxForceRot = 1,
 * MinForce2 = 2,
 * MaxForceRot2 = 3,
 * ForceNoRot = 4,
 * ForceRotPlusForce = 5
 * }
 * ```
 * 
 * Research/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).
 * @param entity
 * @param forceType
 * @param x
 * @param y
 * @param z
 * @param offX
 * @param offY
 * @param offZ
 * @param boneIndex
 * @param isDirectionRel
 * @param ignoreUpVec
 * @param isForceRel
 * @param p12
 * @param p13
 */
export function applyForceToEntity(entity: number, forceType: number, x: number, y: number, z: number, offX: number, offY: number, offZ: number, boneIndex: number, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean, p12: boolean, p13: boolean): void {
	return _in(0xc5f68be9, 0x613e2d18, entity, forceType, _fv(x), _fv(y), _fv(z), _fv(offX), _fv(offY), _fv(offZ), boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13); 
}

/**
 * 
 * @param entity1
 * @param entity2
 * @param entityBone
 * @param entityBone2
 * @param p4
 * @param p5
 */
export function AttachEntityBoneToEntityBone(entity1: number, entity2: number, entityBone: number, entityBone2: number, p4: boolean, p5: boolean): void {
	return _in(0x5c48b757, 0x32c8456c, entity1, entity2, entityBone, entityBone2, p4, p5); 
}

/**
 * 
 * @param entity1
 * @param entity2
 * @param entityBone
 * @param entityBone2
 * @param p4
 * @param p5
 */
export function AttachEntityBoneToEntityBonePhysically(entity1: number, entity2: number, entityBone: number, entityBone2: number, p4: boolean, p5: boolean): void {
	return _in(0xfd1695c5, 0xd3b05439, entity1, entity2, entityBone, entityBone2, p4, p5); 
}

/**
 * This native **could affect** the arguments of the `CEventNetworkEntityDamage` game event, by clearing the damaging entity before the event is fired.
 * @param entity
 */
export function clearEntityLastDamageEntity(entity: number): void {
	return _in(0xa72cd9ca, 0x74a5ecba, entity); 
}

/**
 * ```
 * p5 = sets as true in scripts
 * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
 * Network players do not see changes done with this.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param model
 * @param p5
 */
export function createModelHide(x: number, y: number, z: number, radius: number, model: number, p5: boolean): void {
	return _in(0x8a97bca3, 0x0a0ce478, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(model), p5); 
}

/**
 * ```
 * breakForce is the amount of force required to break the bond.
 * p14 - is always 1 in scripts
 * p15 - is 1 or 0 in scripts - unknown what it does
 * p16 - controls collision between the two entities (FALSE disables collision).
 * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
 * p18 - is always 2 in scripts.
 * ```
 * @param entity1
 * @param entity2
 * @param boneIndex1
 * @param boneIndex2
 * @param xPos1
 * @param yPos1
 * @param zPos1
 * @param xPos2
 * @param yPos2
 * @param zPos2
 * @param xRot
 * @param yRot
 * @param zRot
 * @param breakForce
 * @param fixedRot
 * @param p15
 * @param collision
 * @param teleport
 * @param p18
 */
export function attachEntityToEntityPhysically(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, xRot: number, yRot: number, zRot: number, breakForce: number, fixedRot: boolean, p15: boolean, collision: boolean, teleport: boolean, p18: number): void {
	return _in(0xc3675780, 0xc92f90f9, entity1, entity2, boneIndex1, boneIndex2, _fv(xPos1), _fv(yPos1), _fv(zPos1), _fv(xPos2), _fv(yPos2), _fv(zPos2), _fv(xRot), _fv(yRot), _fv(zRot), _fv(breakForce), fixedRot, p15, collision, teleport, p18); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param model
 * @param p5
 */
export function createModelHideExcludingScriptObjects(x: number, y: number, z: number, radius: number, model: number, p5: boolean): void {
	return _in(0x3a52ae58, 0x8830bf7f, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(model), p5); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param modelHash
 * @param p5
 */
export function createForcedObject(x: number, y: number, z: number, p3: any, modelHash: number, p5: boolean): void {
	return _in(0x150e808b, 0x375a385a, _fv(x), _fv(y), _fv(z), p3, _ch(modelHash), p5); 
}

/**
 * ```
 * Only works with objects!
 * Network players do not see changes done with this.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param originalModel
 * @param newModel
 * @param p6
 */
export function createModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void {
	return _in(0x92c47782, 0xfda8b2a3, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6); 
}

/**
 * Deletes the specified entity, and invalidates the passed handle (i.e. in/out argument).
 * @param entity
 */
export function deleteEntity(): void {
	return _in(0xae3cbe5b, 0xf394c9c9, _i); 
}

/**
 * 
 * @param entity
 * @param p2
 */
export function doesEntityBelongToThisScript(entity: number, p2: boolean): boolean {
	return _in(0xdde6df5a, 0xe89981d2, entity, p2, _r); 
}

/**
 * 
 * @param entity
 * @param dynamic
 * @param collision
 */
export function detachEntity(entity: number, dynamic: boolean, collision: boolean): void {
	return _in(0x961ac54b, 0xf0613f5d, entity, dynamic, collision); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param entity
 */
export function DoesEntityHaveAnimDirector(entity: number): boolean {
	return _in(0x2158e81a, 0x6af65ea9, entity, _r); 
}

/**
 * Checks whether an entity exists in the game world.
 * @param entity
 * @return Whether the entity exists or not.
 */
export function doesEntityExist(entity: number): boolean {
	return _in(0x7239b21a, 0x38f536ba, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function doesEntityHavePhysics(entity: number): boolean {
	return _in(0xda95ea33, 0x17cc5064, entity, _r); 
}

/**
 * ```
 * ENABLE_*
 * ```
 * @param entity
 */
export function EnableEntityUnk(entity: number): void {
	return _in(0x6ce177d0, 0x14502e8a, entity); 
}

/**
 * 
 * @param entity
 */
export function doesEntityHaveDrawable(entity: number): boolean {
	return _in(0x060d6e96, 0xf8b8e48d, entity, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param entity
 */
export function DoesEntityHaveSkeletonData(entity: number): boolean {
	return _in(0x764eb968, 0x74effdc1, entity, _r); 
}

/**
 * ```
 * In the script "player_scene_t_bbfight.c4":
 * "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4 -- [[16]] ], v_9, &v_A, &v_B))"
 * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
 * -- &l_19F[v_4 -- [[16]] ] (p1) is used in other natives in the script as the "animation" param.
 * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
 * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
 * "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
 * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
 * -alphazolam
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param animDictionary
 * @param animName
 * @param p2
 * @param p3
 * @param p4
 */
export function findAnimEventPhase(animDictionary: string, animName: string, p2: string): boolean {
	return _in(0x07f1be2b, 0xccaa27a7, _ts(animDictionary), _ts(animName), _ts(p2), _i, _i, _r); 
}

/**
 * ```
 * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
 * ```
 * @param entity
 */
export function forceEntityAiAndAnimationUpdate(entity: number): void {
	return _in(0x40fdedb7, 0x2f8293b2, entity); 
}

/**
 * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
 * @param entity
 * @param toggle
 */
export function freezeEntityPosition(entity: number, toggle: boolean): void {
	return _in(0x428ca6db, 0xd1094446, entity, toggle); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param animDict
 * @param animName
 */
export function getAnimDuration(animDict: string, animName: string): number {
	return _in(0xfeddf04d, 0x62b8d790, _ts(animDict), _ts(animName), _r, _rf); 
}

/**
 * 
 * @param entity
 */
export function getEntityAlpha(entity: number): number {
	return _in(0x5a47b3b5, 0xe63e94c6, entity, _r, _ri); 
}

/**
 * 
 * @param entity
 */
export function getCollisionNormalOfLastHitForEntity(entity: number): Vector3 {
	return _in(0xe465d4ab, 0x7ca6ae72, entity, _r, _rv); 
}

/**
 * ```
 * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
 * Example:
 * 0.000000 - mark the starting of animation.
 * 0.500000 - mark the midpoint of the animation.
 * 1.000000 - mark the end of animation.
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param animDict
 * @param animName
 */
export function getEntityAnimCurrentTime(entity: number, animDict: string, animName: string): number {
	return _in(0x346d8150, 0x0d088f42, entity, _ts(animDict), _ts(animName), _r, _rf); 
}

/**
 * 
 * @param entity
 */
export function getEntityAttachedTo(entity: number): number {
	return _in(0x48c2bed9, 0x180fe123, entity, _r); 
}

/**
 * ```
 * Returns a float value representing animation's total playtime in milliseconds.
 * Example:
 * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
 * return 20800.000000
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param animDict
 * @param animName
 */
export function getEntityAnimTotalTime(entity: number, animDict: string, animName: string): number {
	return _in(0x50bd2730, 0xb191e360, entity, _ts(animDict), _ts(animName), _r, _rf); 
}

/**
 * ```
 * Gets the world rotation of the specified bone of the specified entity.
 * This native is used in casinoroulette.c but I don't know yet what is the difference with _GET_ENTITY_BONE_ROTATION
 * ```
 * @param entity
 * @param boneIndex
 */
export function GetEntityBonePosition2(entity: number, boneIndex: number): Vector3 {
	return _in(0x46f86969, 0x33a63c9b, entity, boneIndex, _r, _rv); 
}

/**
 * 
 * @param entity
 */
export function GetEntityBoneCount(entity: number): number {
	return _in(0xb328dcc3, 0xa3aa401b, entity, _r, _ri); 
}

/**
 * ```
 * Gets the world rotation of the specified bone of the specified entity.
 * ```
 * @param entity
 * @param boneIndex
 */
export function GetEntityBoneRotation(entity: number, boneIndex: number): Vector3 {
	return _in(0xce6294a2, 0x32d03786, entity, boneIndex, _r, _rv); 
}

/**
 * 
 * @param entity
 */
export function getEntityCollisionDisabled(entity: number): boolean {
	return _in(0xccf1e97b, 0xefdae480, entity, _r); 
}

/**
 * ```
 * Returns the index of the bone. If the bone was not found, -1 will be returned.
 * list:
 * pastebin.com/D7JMnX1g
 * BoneNames:
 * chassis,
 * windscreen,
 * seat_pside_r,
 * seat_dside_r,
 * bodyshell,
 * suspension_lm,
 * suspension_lr,
 * platelight,
 * attach_female,
 * attach_male,
 * bonnet,
 * boot,
 * chassis_dummy,	//Center of the dummy
 * chassis_Control,	//Not found yet
 * door_dside_f,	//Door left, front
 * door_dside_r,	//Door left, back
 * door_pside_f,	//Door right, front
 * door_pside_r,	//Door right, back
 * Gun_GripR,
 * windscreen_f,
 * platelight,	//Position where the light above the numberplate is located
 * VFX_Emitter,
 * window_lf,	//Window left, front
 * window_lr,	//Window left, back
 * window_rf,	//Window right, front
 * window_rr,	//Window right, back
 * engine,	//Position of the engine
 * gun_ammo,
 * ROPE_ATTATCH,	//Not misspelled. In script "finale_heist2b.c4".
 * wheel_lf,	//Wheel left, front
 * wheel_lr,	//Wheel left, back
 * wheel_rf,	//Wheel right, front
 * wheel_rr,	//Wheel right, back
 * exhaust,	//Exhaust. shows only the position of the stock-exhaust
 * overheat,	//A position on the engine(not exactly sure, how to name it)
 * misc_e,	//Not a car-bone.
 * seat_dside_f,	//Driver-seat
 * seat_pside_f,	//Seat next to driver
 * Gun_Nuzzle,
 * seat_r
 * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
 * ```
 * @param entity
 * @param boneName
 */
export function getEntityBoneIndexByName(entity: number, boneName: string): number {
	return _in(0xfb71170b, 0x7e76acba, entity, _ts(boneName), _r, _ri); 
}

/**
 * Gets the current coordinates (world position) for a specified entity.
 * @param entity
 * @param alive
 * @return The current entity coordinates.
 */
export function getEntityCoords(entity: number, alive: boolean): Vector3 {
	return _in(0x3fef770d, 0x40960d5a, entity, alive, _r, _rv); 
}

/**
 * Gets the local rotation of the specified bone of the specified entity.
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param entity
 * @param boneIndex
 */
export function GetEntityBoneRotationLocal(entity: number, boneIndex: number): Vector3 {
	return _in(0xbd8d3255, 0x0e5cebfe, entity, boneIndex, _r, _rv); 
}

/**
 * ```
 * Gets the entity's forward vector.
 * ```
 * @param entity
 * @return The forward vector.
 */
export function getEntityForwardVector(entity: number): Vector3 {
	return _in(0x0a794a5a, 0x57f8df91, entity, _r, _rv); 
}

/**
 * 
 * @param entity
 */
export function getEntityCanBeDamaged(entity: number): boolean {
	return _in(0xd95cc5d2, 0xab15a09f, entity, _r); 
}

/**
 * ```
 * Returns an integer value of entity's current health.
 * Example of range for ped:
 * - Player [0 to 200]
 * - Ped [100 to 200]
 * - Vehicle [0 to 1000]
 * - Object [0 to 1000]
 * Health is actually a float value but this native casts it to int.
 * In order to get the actual value, do:
 * float health = *(float *)(entityAddress + 0x280);
 * ```
 * @param entity
 * @return The current entity health.
 */
export function getEntityHealth(entity: number): number {
	return _in(0xeef059fa, 0xd016d209, entity, _r, _ri); 
}

/**
 * ```
 * Gets the X-component of the entity's forward vector.
 * ```
 * @param entity
 */
export function getEntityForwardX(entity: number): number {
	return _in(0x8bb4ef42, 0x14e0e6d5, entity, _r, _rf); 
}

/**
 * ```
 * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
 * ```
 * @param entity
 * @return The current entity heading.
 */
export function getEntityHeading(entity: number): number {
	return _in(0xe83d4f9b, 0xa2a38914, entity, _r, _rf); 
}

/**
 * ```
 * Gets the Y-component of the entity's forward vector.
 * ```
 * @param entity
 */
export function getEntityForwardY(entity: number): number {
	return _in(0x866a4a5f, 0xae349510, entity, _r, _rf); 
}

/**
 * ```
 * Returns the LOD distance of an entity.
 * ```
 * @param entity
 */
export function getEntityLodDist(entity: number): number {
	return _in(0x4159c276, 0x2b5791d6, entity, _r, _ri); 
}

/**
 * ```
 * Return an integer value of entity's maximum health.
 * Example:
 * - Player = 200
 * ```
 * @param entity
 */
export function getEntityMaxHealth(entity: number): number {
	return _in(0x15d75760, 0x6d170c3c, entity, _r, _ri); 
}

/**
 * ```
 * Return height (z-dimension) above ground.
 * Example: The pilot in a titan plane is 1.844176 above ground.
 * How can i convert it to meters?
 * Everything seems to be in meters, probably this too.
 * ```
 * @param entity
 */
export function getEntityHeightAboveGround(entity: number): number {
	return _in(0x1dd55701, 0x034110e5, entity, _r, _rf); 
}

/**
 * Returns the model hash from an entity.
 * @param entity
 * @return The model hash of the entity.
 */
export function getEntityModel(entity: number): number {
	return _in(0x9f47b058, 0x362c84b5, entity, _r); 
}

/**
 * 
 * @param entity
 * @param X
 * @param Y
 * @param Z
 * @param atTop
 * @param inWorldCoords
 */
export function getEntityHeight(entity: number, X: number, Y: number, Z: number, atTop: boolean, inWorldCoords: boolean): number {
	return _in(0x5a504562, 0x485944dd, entity, _fv(X), _fv(Y), _fv(Z), atTop, inWorldCoords, _r, _rf); 
}

/**
 * 
 * @param entity
 * @param forwardVector
 * @param rightVector
 * @param upVector
 * @param position
 */
export function getEntityMatrix(entity: number): void {
	return _in(0xecb2fc72, 0x35a7d137, entity, _v(forwardVector), _v(rightVector), _v(upVector), _v(position)); 
}

/**
 * ```
 * GET_ENTITY_*
 * 
 * Seems to return the handle of the entity's portable pickup.
 * 
 * NativeDB Introduced: v1180
 * ```
 * @param entity
 * @param modelHash
 */
export function GetEntityPickup(entity: number, modelHash: number): number {
	return _in(0x1f922734, 0xe259bd26, entity, _ch(modelHash), _r); 
}

/**
 * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
 * @param entity
 * @return A population type, from the enumeration above.
 */
export function getEntityPopulationType(entity: number): number {
	return _in(0xf6f5161f, 0x4534edff, entity, _r, _ri); 
}

/**
 * ```
 * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
 * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
 * ```
 * @param entity
 */
export function GetEntityPhysicsHeading(entity: number): number {
	return _in(0x846bf629, 0x1198a71e, entity, _r, _rf); 
}

/**
 * 
 * @param entity
 */
export function getEntityPitch(entity: number): number {
	return _in(0xd45dc289, 0x3621e1fe, entity, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param entity
 * @param bulletProof
 * @param fireProof
 * @param explosionProof
 * @param collisionProof
 * @param meleeProof
 * @param steamProof
 * @param p7
 * @param drownProof
 */
export function GetEntityProofs(entity: number): boolean {
	return _in(0xbe8cd9be, 0x829bbebf, entity, _i, _i, _i, _i, _i, _i, _i, _i, _r); 
}

/**
 * ```
 * w is the correct parameter name!
 * ```
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
export function getEntityQuaternion(entity: number): void {
	return _in(0x7b3703d2, 0xd32dfa18, entity, _f, _f, _f, _f); 
}

/**
 * ```
 * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
 * (Sideways Roll) such as a vehicle tipped on its side
 * ```
 * @param entity
 */
export function getEntityRoll(entity: number): number {
	return _in(0x831e0242, 0x595560df, entity, _r, _rf); 
}

/**
 * 
 * @param entity
 */
export function getEntityRotationVelocity(entity: number): Vector3 {
	return _in(0x213b9104, 0x5d09b983, entity, _r, _rv); 
}

/**
 * ```
 * rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
 * 
 * What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
 * 
 * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll:
 * www.allstar.fiu.edu/aero/images/pic5-1.gif
 * ```
 * 
 * ### Rotation Orders
 * 
 * *   **0**: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
 * *   **1**: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
 * *   **2**: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
 * *   **3**: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
 * *   **4**: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
 * *   **5**: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
 * @param entity
 * @param rotationOrder
 * @return A vector where the Z coordinate is the yaw.
 */
export function getEntityRotation(entity: number, rotationOrder: number): Vector3 {
	return _in(0xafbd61cc, 0x738d9eb9, entity, rotationOrder, _r, _rv); 
}

/**
 * ```
 * All ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.
 * ```
 * @param entity
 * @param script
 */
export function getEntityScript(entity: number): string {
	return _in(0xa6e9c38d, 0xb51d7748, entity, _i, _r, _s); 
}

/**
 * Get the speed of a entity.
 * @param entity
 * @return Speed of a entity in m/s. You can convert to km/h using the value you get and multiply by 3.6, and miles/h by 2.236936. Also, the float returned is the length of [GET_ENTITY_SPEED_VECTOR](?\_0x9A8D700A51CB7B0D)
 */
export function getEntitySpeed(entity: number): number {
	return _in(0xd5037ba8, 0x2e12416f, entity, _r, _rf); 
}

/**
 * ```
 * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
 * ```
 * @param entity
 * @param relative
 */
export function getEntitySpeedVector(entity: number, relative: boolean): Vector3 {
	return _in(0x9a8d700a, 0x51cb7b0d, entity, relative, _r, _rv); 
}

/**
 * ```
 * Get how much of the entity is submerged.  1.0f is whole entity.
 * ```
 * @param entity
 */
export function getEntitySubmergedLevel(entity: number): number {
	return _in(0xe81afc1b, 0xc4cc41ce, entity, _r, _rf); 
}

/**
 * ```
 * Returns:
 * 0 = no entity
 * 1 = ped
 * 2 = vehicle
 * 3 = object
 * ```
 * @param entity
 */
export function getEntityType(entity: number): number {
	return _in(0x8acd3660, 0x38d14505, entity, _r, _ri); 
}

/**
 * 
 * @param entity
 */
export function getEntityUprightValue(entity: number): number {
	return _in(0x95eed5a6, 0x94951f9f, entity, _r, _rf); 
}

/**
 * 
 * @param entity
 */
export function getLastMaterialHitByEntity(entity: number): number {
	return _in(0x5c3d0a93, 0x5f535c4c, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function getEntityVelocity(entity: number): Vector3 {
	return _in(0x4805d2b1, 0xd8cf94a9, entity, _r, _rv); 
}

/**
 * 
 * @param entity
 * @param team
 */
export function getNearestPlayerToEntityOnTeam(entity: number, team: number): number {
	return _in(0x4dc9a62f, 0x844d9337, entity, team, _r); 
}

/**
 * 
 * @param entity
 */
export function getNearestPlayerToEntity(entity: number): number {
	return _in(0x7196842c, 0xb375cdb3, entity, _r); 
}

/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * @param entity
 */
export function getObjectIndexFromEntityIndex(entity: number): number {
	return _in(0xd7e3b973, 0x5c0f89d6, entity, _r, _ro); 
}

/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * @param entity
 */
export function getPedIndexFromEntityIndex(entity: number): number {
	return _in(0x04a2a40c, 0x73395041, entity, _r); 
}

/**
 * ```
 * Converts world coords (posX - Z) to coords relative to the entity
 * Example:
 * posX = 50
 * posY = 1000
 * posZ = 60
 * Entity's coords are: x=30, y=1000, z=60.
 * All three returned coords will then be in range of [-20,20] depending on rotation of the entity.
 * ```
 * @param entity
 * @param posX
 * @param posY
 * @param posZ
 */
export function getOffsetFromEntityGivenWorldCoords(entity: number, posX: number, posY: number, posZ: number): Vector3 {
	return _in(0x2274bc1c, 0x4885e333, entity, _fv(posX), _fv(posY), _fv(posZ), _r, _rv); 
}

/**
 * ```
 * Offset values are relative to the entity.
 * x = left/right
 * y = forward/backward
 * z = up/down
 * ```
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function getOffsetFromEntityInWorldCoords(entity: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 {
	return _in(0x1899f328, 0xb0e12848, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv); 
}

/**
 * ```
 * Returns the coordinates of an entity-bone.
 * ```
 * @param entity
 * @param boneIndex
 */
export function getWorldPositionOfEntityBone(entity: number, boneIndex: number): Vector3 {
	return _in(0x44a8fcb8, 0xed227738, entity, boneIndex, _r, _rv); 
}

/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * @param entity
 */
export function getVehicleIndexFromEntityIndex(entity: number): number {
	return _in(0x4b53f929, 0x32adfac0, entity, _r); 
}

/**
 * ```
 * if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
 * ```
 * @param entity
 * @param actionHash
 */
export function hasAnimEventFired(entity: number, actionHash: number): boolean {
	return _in(0xeaf4cd9e, 0xa3e7e922, entity, _ch(actionHash), _r); 
}

/**
 * 
 * @param entity
 */
export function hasCollisionLoadedAroundEntity(entity: number): boolean {
	return _in(0xe9676f61, 0xbc0b3321, entity, _r); 
}

/**
 * ```
 * P3 is always 3 as far as i cant tell
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param animDict
 * @param animName
 * @param p3
 */
export function hasEntityAnimFinished(entity: number, animDict: string, animName: string, p3: number): boolean {
	return _in(0x20b71166, 0x2962b472, entity, _ts(animDict), _ts(animName), p3, _r); 
}

/**
 * 
 * @param entity
 */
export function hasEntityBeenDamagedByAnyObject(entity: number): boolean {
	return _in(0x95eb9964, 0xff5c5c65, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function hasEntityBeenDamagedByAnyVehicle(entity: number): boolean {
	return _in(0xdfd5033f, 0xdba0a9c8, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function hasEntityBeenDamagedByAnyPed(entity: number): boolean {
	return _in(0x605f5a14, 0x0f202491, entity, _r); 
}

/**
 * ```
 * Entity 1 = Victim
 * Entity 2 = Attacker
 * p2 seems to always be 1
 * ```
 * @param entity1
 * @param entity2
 * @param p2
 */
export function hasEntityBeenDamagedByEntity(entity1: number, entity2: number, p2: boolean): boolean {
	return _in(0xc86d67d5, 0x2a707cf8, entity1, entity2, p2, _r); 
}

/**
 * Checks if entity1 has a clear line of sight to entity2. So a simple raycast which if it collides with any of the given colliderTypes returns false.
 * 
 * The direction of the check matters with for example bushes, so checking from inside to outside a bush with traceType 256 returns true, but the other way around returns false.
 * @param entity1
 * @param entity2
 * @param flags
 * @return Returns `true` if no collider of specified bitmask is hit.
 */
export function hasEntityClearLosToEntity(entity1: number, entity2: number, flags: number): boolean {
	return _in(0xfcdff7b7, 0x2d23a1ac, entity1, entity2, flags, _r); 
}

/**
 * ```
 * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
 * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
 * ```
 * @param entity1
 * @param entity2
 */
export function hasEntityClearLosToEntityInFront(entity1: number, entity2: number): boolean {
	return _in(0x0267d00a, 0xf114f17a, entity1, entity2, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param entity1
 * @param entity2
 * @param traceType
 */
export function HasEntityClearLosToEntity2(entity1: number, entity2: number, traceType: number): any {
	return _in(0x394bde2a, 0x7bba031e, entity1, entity2, traceType, _r, _ri); 
}

/**
 * ```
 * Called on tick.
 * Tested with vehicles, returns true whenever the vehicle is touching any entity.
 * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
 * ```
 * @param entity
 */
export function hasEntityCollidedWithAnything(entity: number): boolean {
	return _in(0x8bad02f0, 0x368d9e14, entity, _r); 
}

/**
 * 
 * @param handle
 */
export function isAnEntity(handle: number): boolean {
	return _in(0x731ec8a9, 0x16bd11a1, handle, _r); 
}

/**
 * 
 * @param entity
 * @return Whether the entity is a Ped.
 */
export function isEntityAPed(entity: number): boolean {
	return _in(0x524ac5ec, 0xea15343e, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityAMissionEntity(entity: number): boolean {
	return _in(0x0a7b2709, 0x12999b3c, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityAVehicle(entity: number): boolean {
	return _in(0x6ac7003f, 0xa6e5575e, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityAnObject(entity: number): boolean {
	return _in(0x8d68c8fd, 0x0faca94e, entity, _r); 
}

/**
 * 
 * @param entity
 * @return Whether the entity is attached to another entity.
 */
export function isEntityAttached(entity: number): boolean {
	return _in(0xb346476e, 0xf1a64897, entity, _r); 
}

/**
 * ```
 * Checks if entity is within x/y/zSize distance of x/y/z.
 * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
 * ```
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p7
 * @param p8
 * @param p9
 */
export function isEntityAtCoord(entity: number, xPos: number, yPos: number, zPos: number, xSize: number, ySize: number, zSize: number, p7: boolean, p8: boolean, p9: number): boolean {
	return _in(0x20b60995, 0x556d004f, entity, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xSize), _fv(ySize), _fv(zSize), p7, p8, p9, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityAttachedToAnyPed(entity: number): boolean {
	return _in(0xb1632e9a, 0x5f988d11, entity, _r); 
}

/**
 * ```
 * Checks if entity1 is within the box defined by x/y/zSize of entity2.
 * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
 * ```
 * @param entity1
 * @param entity2
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p5
 * @param p6
 * @param p7
 */
export function isEntityAtEntity(entity1: number, entity2: number, xSize: number, ySize: number, zSize: number, p5: boolean, p6: boolean, p7: number): boolean {
	return _in(0x751b70c3, 0xd034e187, entity1, entity2, _fv(xSize), _fv(ySize), _fv(zSize), p5, p6, p7, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: BOOL p1
 * ```
 * @param entity
 */
export function isEntityDead(entity: number): boolean {
	return _in(0x5f9532f3, 0xb5cc2551, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityAttachedToAnyObject(entity: number): boolean {
	return _in(0xcf511840, 0xceede0cc, entity, _r); 
}

/**
 * p10 is some entity flag check, also used in [`IS_ENTITY_AT_ENTITY`](#\_0x751B70C3D034E187), [`IS_ENTITY_IN_AREA`](#\_0x54736AA40E271165) and [`IS_ENTITY_AT_COORD`](#\_0x20B60995556D004F).
 * 
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * @param entity
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includez
 * @param p10
 */
export function isEntityInAngledArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includez: boolean, p10: any): boolean {
	return _in(0x51210ced, 0x3da1c78a, entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), debug, includez, p10, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityAttachedToAnyVehicle(entity: number): boolean {
	return _in(0x26aa915a, 0xd89bfb4b, entity, _r); 
}

/**
 * 
 * @param from
 * @param to
 */
export function isEntityAttachedToEntity(from: number, to: number): boolean {
	return _in(0xefbe7189, 0x8a993728, from, to, _r); 
}

/**
 * 
 * @param entity
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p7
 * @param p8
 * @param p9
 */
export function isEntityInArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean, p9: any): boolean {
	return _in(0x54736aa4, 0x0e271165, entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, p9, _r); 
}

/**
 * 
 * @param entity
 * @param zone
 */
export function isEntityInZone(entity: number, zone: string): boolean {
	return _in(0xb6463cf6, 0xaf527071, entity, _ts(zone), _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityInAir(entity: number): boolean {
	return _in(0x886e37ec, 0x497200b6, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityInWater(entity: number): boolean {
	return _in(0xcfb0a0d8, 0xedd145a3, entity, _r); 
}

/**
 * ```
 * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
 * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
 * Chipping
 * ```
 * @param entity
 */
export function isEntityOnScreen(entity: number): boolean {
	return _in(0xe659e47a, 0xf827484b, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityOccluded(entity: number): boolean {
	return _in(0xe31c2c72, 0xb8692b64, entity, _r); 
}

/**
 * ```
 * A static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "AI::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
 * ^ Attach a phCollider to the ped.
 * ```
 * @param entity
 */
export function isEntityStatic(entity: number): boolean {
	return _in(0x1218e688, 0x6d3d8327, entity, _r); 
}

/**
 * See also [`IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM`](#\_0x6EC47A344923E1ED)
 * 
 * ```
 * Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
 * p4 is always 3 in the scripts.
 * taskFlag:
 * 2 - Check synchronized scene
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param animDict
 * @param animName
 * @param taskFlag
 */
export function isEntityPlayingAnim(entity: number, animDict: string, animName: string, taskFlag: number): boolean {
	return _in(0x1f0b7922, 0x8e461ec9, entity, _ts(animDict), _ts(animName), taskFlag, _r); 
}

/**
 * 
 * @param entity
 * @param modelHash
 */
export function isEntityTouchingModel(entity: number, modelHash: number): boolean {
	return _in(0x0f423237, 0x98a58c8c, entity, _ch(modelHash), _r); 
}

/**
 * 
 * @param entity
 * @param targetEntity
 */
export function isEntityTouchingEntity(entity: number, targetEntity: number): boolean {
	return _in(0x17ffc1b2, 0xba35a494, entity, targetEntity, _r); 
}

/**
 * 
 * @param entity
 * @param angle
 */
export function isEntityUpright(entity: number, angle: number): boolean {
	return _in(0x5333f526, 0xf6ab19aa, entity, _fv(angle), _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityVisible(entity: number): boolean {
	return _in(0x47d6f43d, 0x77935c75, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityWaitingForWorldCollision(entity: number): boolean {
	return _in(0xd05bff0c, 0x0a12c68f, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityUpsidedown(entity: number): boolean {
	return _in(0x1dbd5882, 0x0fa61d71, entity, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityVisibleToScript(entity: number): boolean {
	return _in(0xd796cb5b, 0xa8f20e32, entity, _r); 
}

/**
 * ```
 * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
 * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param animName
 * @param animDict
 * @param p3
 * @param loop
 * @param stayInAnim
 * @param p6
 * @param delta
 * @param bitset
 */
export function playEntityAnim(entity: number, animName: string, animDict: string, p3: number, loop: boolean, stayInAnim: boolean, p6: boolean, delta: number, bitset: any): boolean {
	return _in(0x7fb21826, 0x2b810701, entity, _ts(animName), _ts(animDict), _fv(p3), loop, stayInAnim, p6, _fv(delta), bitset, _r); 
}

/**
 * ```
 * p4 and p7 are usually 1000.0f.
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param syncedScene
 * @param animation
 * @param propName
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function playSynchronizedEntityAnim(entity: number, syncedScene: number, animation: string, propName: string, p4: number, p5: number, p6: any, p7: number): boolean {
	return _in(0xc77720a1, 0x2fe14a86, entity, syncedScene, _ts(animation), _ts(propName), _fv(p4), _fv(p5), p6, _fv(p7), _r); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export function playSynchronizedMapEntityAnim(p0: number, p1: number, p2: number, p3: number, p4: any, p5: any, p8: number, p9: number, p10: any, p11: number): boolean {
	return _in(0xb9c54555, 0xed30fbc4, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, _i, _i, _fv(p8), _fv(p9), p10, _fv(p11), _r); 
}

/**
 * ```
 * Called to update entity attachments.
 * ```
 * @param entity
 */
export function processEntityAttachments(entity: number): void {
	return _in(0xf4080490, 0xadc51c6f, entity); 
}

/**
 * p5 requires more research. See also [`CREATE_MODEL_HIDE`](#\_0x8A97BCA30A0CE478) and [`CREATE_MODEL_SWAP`](#\_0x92C47782FDA8B2A3).
 * 
 * Network players do not see changes done with this.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param model
 * @param p5
 */
export function removeModelHide(x: number, y: number, z: number, radius: number, model: number, p5: boolean): void {
	return _in(0xd9e3006f, 0xb3cbd765, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(model), p5); 
}

/**
 * 
 * @param entity
 */
export function resetEntityAlpha(entity: number): void {
	return _in(0x9b1e824f, 0xfbb7027a, entity); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function removeForcedObject(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x61b6775e, 0x83c0db6f, p0, p1, p2, p3, p4); 
}

/**
 * This native sets the entity's alpha level.
 * @param entity
 * @param alphaLevel
 * @param skin
 */
export function setEntityAlpha(entity: number, alphaLevel: number, skin: boolean): void {
	return _in(0x44a0870b, 0x7e92d7c0, entity, alphaLevel, skin); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param originalModel
 * @param newModel
 * @param p6
 */
export function removeModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void {
	return _in(0x033c0f9a, 0x64e229ae, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityAlwaysPrerender(entity: number, toggle: boolean): void {
	return _in(0xacad101e, 0x1fb66689, entity, toggle); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param entity
 * @param animDictionary
 * @param animName
 * @param time
 */
export function setEntityAnimCurrentTime(entity: number, animDictionary: string, animName: string, time: number): void {
	return _in(0x4487c259, 0xf0f70977, entity, _ts(animDictionary), _ts(animName), _fv(time)); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setCanAutoVaultOnEntity(entity: number, toggle: boolean): void {
	return _in(0xe12abe5e, 0x3a389a6c, entity, toggle); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setCanClimbOnEntity(entity: number, toggle: boolean): void {
	return _in(0xa80ae305, 0xe0a3044f, entity, toggle); 
}

/**
 * 
 * @param entity
 * @param animDictionary
 * @param animName
 * @param speedMultiplier
 */
export function setEntityAnimSpeed(entity: number, animDictionary: string, animName: string, speedMultiplier: number): void {
	return _in(0x28d1a165, 0x53c51776, entity, _ts(animDictionary), _ts(animName), _fv(speedMultiplier)); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param entity
 * @param x
 * @param y
 * @param z
 */
export function SetEntityAngularVelocity(entity: number, x: number, y: number, z: number): void {
	return _in(0x83396434, 0x99d1222e, entity, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityCanBeDamaged(entity: number, toggle: boolean): void {
	return _in(0x1760ffa8, 0xab074d66, entity, toggle); 
}

/**
 * ```
 * Sets whether the entity can be targeted without being in line-of-sight.
 * ```
 * @param entity
 * @param toggle
 */
export function setEntityCanBeTargetedWithoutLos(entity: number, toggle: boolean): void {
	return _in(0xd3997889, 0x736fd899, entity, toggle); 
}

/**
 * ```
 * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
 * ```
 * @param entity
 * @param toggle
 */
export function SetEntityCleanupByEngine(entity: number, toggle: boolean): void {
	return _in(0x3910051c, 0xcecdb00c, entity, toggle); 
}

/**
 * Assigns an existing entity to be owned by the current script. If the entity was not owned by a script yet, this also means the entity will remain persistent until released.
 * 
 * Note that this is not needed right after creating an entity as a script-created entity will automatically be assigned.
 * @param entity
 * @param p1
 * @param p2
 */
export function setEntityAsMissionEntity(entity: number, p1: boolean, p2: boolean): void {
	return _in(0xad738c30, 0x85fe7e11, entity, p1, p2); 
}

/**
 * ```
 * Marks the specified entity (ped, vehicle or object) as no longer needed.
 * Entities marked as no longer needed, will be deleted as the engine sees fit.
 * ```
 * @param entity
 */
export function setEntityAsNoLongerNeeded(): void {
	return _in(0xb736a491, 0xe64a32cf, _i); 
}

/**
 * 
 * @param entity
 * @param bCanBeDamaged
 * @param relGroup
 */
export function setEntityCanBeDamagedByRelationshipGroup(entity: number, bCanBeDamaged: boolean, relGroup: number): void {
	return _in(0xe22d8fde, 0x858b8119, entity, bCanBeDamaged, relGroup); 
}

/**
 * 
 * @param entity
 * @param toggle
 * @param keepPhysics
 */
export function setEntityCompletelyDisableCollision(entity: number, toggle: boolean, keepPhysics: boolean): void {
	return _in(0x9ebc85ed, 0x0fffe51c, entity, toggle, keepPhysics); 
}

/**
 * 
 * @param entity
 * @param toggle
 * @param keepPhysics
 */
export function setEntityCollision(entity: number, toggle: boolean, keepPhysics: boolean): void {
	return _in(0x1a9205c1, 0xb9ee827f, entity, toggle, keepPhysics); 
}

/**
 * Sets the coordinates (world position) for a specified entity.
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param alive
 * @param deadFlag
 * @param ragdollFlag
 */
export function setEntityCoordsNoOffset(entity: number, xPos: number, yPos: number, zPos: number, alive: boolean, deadFlag: boolean, ragdollFlag: boolean): void {
	return _in(0x239a3351, 0xac1da385, entity, _fv(xPos), _fv(yPos), _fv(zPos), alive, deadFlag, ragdollFlag); 
}

/**
 * Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param alive
 * @param deadFlag
 * @param ragdollFlag
 * @param clearArea
 */
export function setEntityCoords(entity: number, xPos: number, yPos: number, zPos: number, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void {
	return _in(0x06843da7, 0x060a026b, entity, _fv(xPos), _fv(yPos), _fv(zPos), alive, deadFlag, ragdollFlag, clearArea); 
}

/**
 * 
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param alive
 * @param deadFlag
 * @param ragdollFlag
 * @param clearArea
 */
export function setEntityCoordsWithoutPlantsReset(entity: number, xPos: number, yPos: number, zPos: number, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void {
	return _in(0x621873ec, 0xe1178967, entity, _fv(xPos), _fv(yPos), _fv(zPos), alive, deadFlag, ragdollFlag, clearArea); 
}

/**
 * ```
 * SET_ENTITY_*
 * ```
 * @param entity
 * @param p1
 */
export function SetEntityDecalsDisabled(entity: number, p1: boolean): void {
	return _in(0x2c2e3dc1, 0x28f44309, entity, p1); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityDynamic(entity: number, toggle: boolean): void {
	return _in(0x1718de8e, 0x3f2823ca, entity, toggle); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityHasGravity(entity: number, toggle: boolean): void {
	return _in(0x4a472244, 0x8f18eef5, entity, toggle); 
}

/**
 * ```
 * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
 * If you use this for a ped and you want Ragdoll to stay enabled, then do:
 * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
 * Use this if you want to get the invincibility status:
 * bool IsPedInvincible(Ped ped)
 * {
 * auto addr = getScriptHandleBaseAddress(ped);
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 * return false;
 * }
 * ```
 * @param entity
 * @param toggle
 */
export function setEntityInvincible(entity: number, toggle: boolean): void {
	return _in(0x3882114b, 0xde571ad4, entity, toggle); 
}

/**
 * Set the heading of an entity in degrees also known as "Yaw".
 * @param entity
 * @param heading
 */
export function setEntityHeading(entity: number, heading: number): void {
	return _in(0x8e2530aa, 0x8ada980e, entity, _fv(heading)); 
}

/**
 * 
 * @param entity
 * @param p1
 * @param p2
 */
export function setEntityIsTargetPriority(entity: number, p1: boolean, p2: number): void {
	return _in(0xea02e132, 0xf5c68722, entity, p1, _fv(p2)); 
}

/**
 * health >= 0
 * 
 * male ped ~= 100 - 200
 * 
 * female ped ~= 0 - 100
 * 
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * @param entity
 * @param health
 */
export function setEntityHealth(entity: number, health: number): void {
	return _in(0x6b76dc1f, 0x3ae6e6a3, entity, health); 
}

/**
 * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
 * 
 * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param entity
 * @param toggle
 */
export function setEntityLoadCollisionFlag(entity: number, toggle: boolean): void {
	return _in(0x0dc7caba, 0xb1e9b67e, entity, toggle); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityLights(entity: number, toggle: boolean): void {
	return _in(0x7cfba6a8, 0x0bdf3874, entity, toggle); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityMotionBlur(entity: number, toggle: boolean): void {
	return _in(0x295d82a8, 0x559f9150, entity, toggle); 
}

/**
 * ```
 * Calling this function disables collision between two entities.
 * The importance of the order for entity1 and entity2 is unclear.
 * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
 * ```
 * @param entity1
 * @param entity2
 * @param thisFrameOnly
 */
export function setEntityNoCollisionEntity(entity1: number, entity2: number, thisFrameOnly: boolean): void {
	return _in(0xa53ed552, 0x0c07654a, entity1, entity2, thisFrameOnly); 
}

/**
 * ```
 * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
 * ```
 * @param entity
 * @param value
 */
export function setEntityLodDist(entity: number, value: number): void {
	return _in(0x5927f96a, 0x78577363, entity, value); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityOnlyDamagedByPlayer(entity: number, toggle: boolean): void {
	return _in(0x79f020ff, 0x9edc0748, entity, toggle); 
}

/**
 * ```
 * For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
 * ```
 * @param entity
 * @param value
 */
export function setEntityMaxHealth(entity: number, value: number): void {
	return _in(0x166e7cf6, 0x8597d8b5, entity, value); 
}

/**
 * 
 * @param entity
 * @param speed
 */
export function setEntityMaxSpeed(entity: number, speed: number): void {
	return _in(0x0e46a3fc, 0xbde2a1b1, entity, _fv(speed)); 
}

/**
 * ```
 * Enable / disable each type of damage.
 * --------------
 * p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);
 * ```
 * @param entity
 * @param bulletProof
 * @param fireProof
 * @param explosionProof
 * @param collisionProof
 * @param meleeProof
 * @param steamProof
 * @param p7
 * @param drownProof
 */
export function setEntityProofs(entity: number, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, steamProof: boolean, p7: boolean, drownProof: boolean): void {
	return _in(0xfaee099c, 0x6f890bb8, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof); 
}

/**
 * 
 * @param entity
 * @param p1
 * @param relationshipHash
 */
export function setEntityOnlyDamagedByRelationshipGroup(entity: number, p1: boolean, relationshipHash: number): void {
	return _in(0x7022bd82, 0x8fa0b082, entity, p1, _ch(relationshipHash)); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityRecordsCollisions(entity: number, toggle: boolean): void {
	return _in(0x0a50a1ee, 0xdad01e65, entity, toggle); 
}

/**
 * ```
 * w is the correct parameter name!
 * ```
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
export function setEntityQuaternion(entity: number, x: number, y: number, z: number, w: number): void {
	return _in(0x77b21be7, 0xac540f07, entity, _fv(x), _fv(y), _fv(z), _fv(w)); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityRenderScorched(entity: number, toggle: boolean): void {
	return _in(0x730f5f8d, 0x3f0f2050, entity, toggle); 
}

/**
 * 
 * @param entity
 * @param pitch
 * @param roll
 * @param yaw
 * @param rotationOrder
 * @param p5
 */
export function setEntityRotation(entity: number, pitch: number, roll: number, yaw: number, rotationOrder: number, p5: boolean): void {
	return _in(0x8524a8b0, 0x171d5e07, entity, _fv(pitch), _fv(roll), _fv(yaw), rotationOrder, p5); 
}

/**
 * ```
 * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
 * ```
 * @param entity
 * @param x
 * @param y
 * @param z
 */
export function setEntityVelocity(entity: number, x: number, y: number, z: number): void {
	return _in(0x1c99bb7b, 0x6e96d16f, entity, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
 * 0 = green
 * 1 = red
 * 2 = yellow
 * 3 = reset changes
 * changing lights may not change the behavior of vehicles
 * ```
 * @param entity
 * @param state
 */
export function setEntityTrafficlightOverride(entity: number, state: number): void {
	return _in(0x57c5db65, 0x6185eac4, entity, state); 
}

/**
 * Toggle the visibility of a given entity.
 * @param entity
 * @param toggle
 * @param unk
 */
export function setEntityVisible(entity: number, toggle: boolean, unk: boolean): void {
	return _in(0xea1c610a, 0x04db6bbb, entity, toggle, unk); 
}

/**
 * ```
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * ```
 * @param object
 */
export function setObjectAsNoLongerNeeded(): void {
	return _in(0x3ae22deb, 0x5ba5a3e6, _i); 
}

/**
 * ```
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * ```
 * @param vehicle
 */
export function setVehicleAsNoLongerNeeded(): void {
	return _in(0x629bfa74, 0x418d6239, _i); 
}

/**
 * ```
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * ```
 * @param ped
 */
export function setPedAsNoLongerNeeded(): void {
	return _in(0x2595dd42, 0x36549ce3, _i); 
}

/**
 * ```
 * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
 * ```
 * @param entity
 * @param animation
 * @param animGroup
 * @param p3
 */
export function stopEntityAnim(entity: number, animation: string, animGroup: string, p3: number): any {
	return _in(0x28004f88, 0x151e03e0, entity, _ts(animation), _ts(animGroup), _fv(p3), _r, _ri); 
}

/**
 * ```
 * p1 sync task id?
 * ```
 * @param entity
 * @param p1
 * @param p2
 */
export function stopSynchronizedEntityAnim(entity: number, p1: number, p2: boolean): boolean {
	return _in(0x43d3807c, 0x077261e3, entity, _fv(p1), p2, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function stopSynchronizedMapEntityAnim(p0: number, p1: number, p2: number, p3: number, p4: any, p5: number): boolean {
	return _in(0x11e79cab, 0x7183b6f5, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _fv(p5), _r); 
}

/**
 * 
 * @param entityModelHash
 * @param x
 * @param y
 * @param z
 * @param p4
 */
export function wouldEntityBeOccluded(entityModelHash: number, x: number, y: number, z: number, p4: boolean): boolean {
	return _in(0xee5d2a12, 0x2e09ec42, _ch(entityModelHash), _fv(x), _fv(y), _fv(z), p4, _r); 
}

/**
 * 
 * @param componentHash
 * @param restrictionTagHash
 * @param componentId
 */
export function doesShopPedApparelHaveRestrictionTag(componentHash: number, restrictionTagHash: number, componentId: number): boolean {
	return _in(0x341de7ed, 0x1d2a1bfd, _ch(componentHash), _ch(restrictionTagHash), componentId, _r); 
}

/**
 * 
 * @param dlcVehicleIndex
 */
export function getDlcVehicleFlags(dlcVehicleIndex: number): number {
	return _in(0x5549ee11, 0xfa22fcf2, dlcVehicleIndex, _r, _ri); 
}

/**
 * 
 * @param hash
 */
export function getDlcVehicleModLockHash(hash: number): number {
	return _in(0xc0988104, 0x37312fff, _ch(hash), _r); 
}

/**
 * The Second item in the struct `*(Hash *)(outData + 1)` is the vehicle hash.
 * @param dlcVehicleIndex
 * @param outData
 * @return A boolean value return if find or not the dlcVehicleIndex.
 */
export function getDlcVehicleData(dlcVehicleIndex: number): boolean {
	return _in(0x33468edc, 0x08e371f6, dlcVehicleIndex, _i, _r); 
}

/**
 * ```
 * p0 seems to be the weapon index
 * p1 seems to be the weapon component index
 * struct DlcComponentData{
 * int attachBone;
 * int padding1;
 * int bActiveByDefault;
 * int padding2;
 * int unk;
 * int padding3;
 * int componentHash;
 * int padding4;
 * int unk2;
 * int padding5;
 * int componentCost;
 * int padding6;
 * char nameLabel[64];
 * char descLabel[64];
 * };
 * ```
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
export function getDlcWeaponComponentData(dlcWeaponIndex: number, dlcWeapCompIndex: number): boolean {
	return _in(0x6cf598a2, 0x957c2bf8, dlcWeaponIndex, dlcWeapCompIndex, _ii(ComponentDataPtr), _r); 
}

/**
 * ```
 * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()
 * ```
 * @param dlcVehicleIndex
 */
export function getDlcVehicleModel(dlcVehicleIndex: number): number {
	return _in(0xecc01b7c, 0x5763333c, dlcVehicleIndex, _r); 
}

/**
 * ```
 * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
 * struct DlcWeaponData
 * {
 * int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this
 * int padding1;
 * int weaponHash;
 * int padding2;
 * int unk;
 * int padding3;
 * int weaponCost;
 * int padding4;
 * int ammoCost;
 * int padding5;
 * int ammoType;
 * int padding6;
 * int defaultClipSize;
 * int padding7;
 * char nameLabel[64];
 * char descLabel[64];
 * char desc2Label[64]; // usually "the" + name
 * char upperCaseNameLabel[64];
 * };
 * ```
 * @param dlcWeaponIndex
 * @param outData
 */
export function getDlcWeaponData(dlcWeaponIndex: number): boolean {
	return _in(0x79923cd2, 0x1bece14e, dlcWeaponIndex, _ii(outData), _r); 
}

/**
 * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
export function GetDlcWeaponComponentDataSp(dlcWeaponIndex: number, dlcWeapCompIndex: number): boolean {
	return _in(0x31d5e073, 0xb6f93cdc, dlcWeaponIndex, dlcWeapCompIndex, _ii(ComponentDataPtr), _r); 
}

/**
 * 
 * @param componentHash
 * @param forcedComponentIndex
 * @param nameHash
 * @param enumValue
 * @param componentType
 */
export function getForcedComponent(componentHash: number, forcedComponentIndex: number): void {
	return _in(0x6c93ed8c, 0x2f74859b, _ch(componentHash), forcedComponentIndex, _i, _i, _i); 
}

/**
 * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param dlcWeaponIndex
 * @param outData
 */
export function GetDlcWeaponDataSp(dlcWeaponIndex: number): boolean {
	return _in(0x310836ee, 0x7129ba33, dlcWeaponIndex, _ii(outData), _r); 
}

/**
 * 
 * @param entity
 * @param componentId
 * @param drawableVariant
 * @param textureVariant
 */
export function getHashNameForComponent(entity: number, componentId: number, drawableVariant: number, textureVariant: number): number {
	return _in(0x0368b3a8, 0x38070348, entity, componentId, drawableVariant, textureVariant, _r); 
}

/**
 * 
 * @param componentHash
 * @param forcedPropIndex
 * @param nameHash
 * @param enumValue
 * @param anchorPoint
 */
export function getForcedProp(componentHash: number, forcedPropIndex: number): void {
	return _in(0xe1ca84eb, 0xf72e691d, _ch(componentHash), forcedPropIndex, _i, _i, _i); 
}

/**
 * Returns the total number of DLC vehicles.
 */
export function getNumDlcVehicles(): number {
	return _in(0xa7a866d2, 0x1cd2329b, _r, _ri); 
}

/**
 * 
 * @param entity
 * @param componentId
 * @param propIndex
 * @param propTextureIndex
 */
export function getHashNameForProp(entity: number, componentId: number, propIndex: number, propTextureIndex: number): number {
	return _in(0x5d616027, 0x5caec8dd, entity, componentId, propIndex, propTextureIndex, _r); 
}

/**
 * ```
 * Returns the total number of DLC weapon components.
 * ```
 * @param dlcWeaponIndex
 */
export function getNumDlcWeaponComponents(dlcWeaponIndex: number): number {
	return _in(0x40542535, 0x8a7d61fe, dlcWeaponIndex, _r, _ri); 
}

/**
 * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 */
export function GetNumDlcWeaponsSp(): number {
	return _in(0x4160b65a, 0xe085b5a9, _r, _ri); 
}

/**
 * Returns the total number of DLC weapon components that are available in SP.
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param dlcWeaponIndex
 */
export function GetNumDlcWeaponComponentsSp(dlcWeaponIndex: number): number {
	return _in(0xad2a7a6d, 0xff55841b, dlcWeaponIndex, _r, _ri); 
}

/**
 * ```
 * Returns the total number of DLC weapons.
 * ```
 */
export function getNumDlcWeapons(): number {
	return _in(0xee47635f, 0x352da367, _r, _ri); 
}

/**
 * ```
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * ```
 * @param character
 */
export function getNumTattooShopDlcItems(character: number): number {
	return _in(0x278f76c3, 0xb0a8f109, character, _r, _ri); 
}

/**
 * ```
 * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
 * ```
 * @param componentHash
 */
export function getShopPedApparelForcedComponentCount(componentHash: number): number {
	return _in(0xc6b9db42, 0xc04dd8c3, _ch(componentHash), _r, _ri); 
}

/**
 * ```
 * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
 * ```
 * @param componentHash
 */
export function getShopPedApparelForcedPropCount(componentHash: number): number {
	return _in(0x017568a8, 0x182d98a6, _ch(componentHash), _r, _ri); 
}

/**
 * 
 * @param componentHash
 */
export function getShopPedApparelVariantComponentCount(componentHash: number): number {
	return _in(0xc17ad0e5, 0x752becda, _ch(componentHash), _r, _ri); 
}

/**
 * 
 * @param propHash
 * @return This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
 */
export function GetShopPedApparelVariantPropCount(propHash: number): number {
	return _in(0xd40aac51, 0xe8e4c663, _ch(propHash), _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function getShopPedOutfit(p0: any): void {
	return _in(0xb7952076, 0xe444979d, p0, _i); 
}

/**
 * ```
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * ```
 * @param componentHash
 * @param outComponent
 */
export function getShopPedComponent(componentHash: number): void {
	return _in(0x74c0e2a5, 0x7ec66760, _ch(componentHash), _i); 
}

/**
 * 
 * @param p0
 */
export function getShopPedOutfitLocate(p0: any): number {
	return _in(0x073ca26b, 0x079f956e, p0, _r, _ri); 
}

/**
 * 
 * @param componentId
 * @param outComponent
 */
export function getShopPedQueryComponent(componentId: number): void {
	return _in(0x249e310b, 0x2d920699, componentId, _ii(outComponent)); 
}

/**
 * 
 * @param componentId
 * @param outProp
 */
export function getShopPedQueryProp(componentId: number): void {
	return _in(0xde44a009, 0x99b2837d, componentId, _i); 
}

/**
 * 
 * @param outfit
 * @param slot
 * @param outComponentVariant
 */
export function getShopPedOutfitComponentVariant(outfit: number, slot: number): boolean {
	return _in(0x19f2a026, 0xedf0013f, _ch(outfit), slot, _i, _r); 
}

/**
 * Character types:
 * 
 * ```
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * ```
 * 
 * ```csharp
 * enum TattooZoneData
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_UNKNOWN = 6,
 * ZONE_NONE = 7,
 * };
 * 
 * struct outComponent
 * {
 * // these vars are suffixed with 4 bytes of padding each.
 * uint unk;
 * int unk2;
 * uint tattooCollectionHash;
 * uint tattooNameHash;
 * int unk3;
 * TattooZoneData zoneId;
 * uint unk4;
 * uint unk5;
 * // maybe more, not sure exactly, decompiled scripts are very vague around this part.
 * }
 * ```
 * @param characterType
 * @param decorationIndex
 * @param outComponent
 * @return A bool indicating that the tattoo data could be fetched(?)
 */
export function getTattooShopDlcItemData(characterType: number, decorationIndex: number): boolean {
	return _in(0xff563818, 0x74f82086, characterType, decorationIndex, _i, _r); 
}

/**
 * 
 * @param outfitHash
 * @param variantIndex
 * @param outPropVariant
 */
export function getShopPedOutfitPropVariant(outfitHash: number, variantIndex: number): boolean {
	return _in(0xa9f9c2e0, 0xfde11cbb, _ch(outfitHash), variantIndex, _i, _r); 
}

/**
 * 
 * @param componentHash
 * @param variantPropIndex
 * @param nameHash
 * @param enumValue
 * @param anchorPoint
 */
export function GetVariantProp(componentHash: number, variantPropIndex: number): void {
	return _in(0xd81b7f27, 0xbc773e66, _ch(componentHash), variantPropIndex, _i, _i, _i); 
}

/**
 * 
 * @param outComponent
 */
export function initShopPedComponent(): void {
	return _in(0x1e8c308f, 0xd312c036, _ii(outComponent)); 
}

/**
 * 
 * @param componentHash
 * @param outProp
 */
export function getShopPedProp(componentHash: number): void {
	return _in(0x5d5caff6, 0x61ddf6fc, _ch(componentHash), _i); 
}

/**
 * ```
 * struct Outfit_s
 * {
 * int mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;
 * int maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,
 * armourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;
 * };
 * ```
 * @param outfitIndex
 * @param outfit
 */
export function getShopPedQueryOutfit(outfitIndex: number): void {
	return _in(0x6d793f03, 0xa631fe56, outfitIndex, _i); 
}

/**
 * 
 * @param componentHash
 * @param variantComponentIndex
 * @param nameHash
 * @param enumValue
 * @param componentType
 */
export function getVariantComponent(componentHash: number, variantComponentIndex: number): void {
	return _in(0x6e11f282, 0xf11863b6, _ch(componentHash), variantComponentIndex, _i, _i, _i); 
}

/**
 * 
 * @param hash
 */
export function isDlcVehicleMod(hash: number): boolean {
	return _in(0x0564b9ff, 0x9631b82c, _ch(hash), _r); 
}

/**
 * 
 * @param outProp
 */
export function initShopPedProp(): void {
	return _in(0xeb0a2b75, 0x8f7b850f, _ii(outProp)); 
}

/**
 * 
 * @param itemHash
 */
export function isContentItemLocked(itemHash: number): boolean {
	return _in(0xd4d7b033, 0xc3aa243c, _ch(itemHash), _r); 
}

/**
 * ```
 * From fm_deathmatch_creator and fm_race_creator:
 * 
 * FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
 * FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));
 * 
 * NativeDB Introduced: v1604
 * ```
 * @param hash
 */
export function LoadContentChangeSetGroup(hash: number): void {
	return _in(0x6bedf576, 0x9ac2dc07, _ch(hash)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setupShopPedApparelQuery(p0: number, p1: number, p2: number, p3: number): number {
	return _in(0x50f45782, 0x3ce6eb5f, p0, p1, p2, p3, _r, _ri); 
}

/**
 * ```
 * characters
 * 0: Michael
 * 1: Franklin
 * 2: Trevor
 * 3: MPMale
 * 4: MPFemale
 * ```
 * @param character
 * @param p1
 */
export function setupShopPedOutfitQuery(character: number, p1: boolean): number {
	return _in(0xf3fbe2d5, 0x0a6a8c28, character, p1, _r, _ri); 
}

/**
 * ```
 * From fm_deathmatch_creator and fm_race_creator:
 * 
 * FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
 * FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));
 * 
 * NativeDB Introduced: v1604
 * ```
 * @param hash
 */
export function UnloadContentChangeSetGroup(hash: number): void {
	return _in(0x3c197828, 0x5b036b25, _ch(hash)); 
}

/**
 * ```
 * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
 * componentId is between 0 and 11 and corresponds to the usual component slots.
 * p1 could be the outfit number; unsure.
 * p2 is usually -1; unknown function.
 * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
 * p4 is usually -1; unknown function.
 * componentId is -1 when p3 is true in decompiled scripts.
 * ```
 * @param character
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param componentId
 */
export function setupShopPedApparelQueryTu(character: number, p1: number, p2: number, p3: boolean, p4: number, componentId: number): number {
	return _in(0x9bdf5981, 0x8b1e38c1, character, p1, p2, p3, p4, componentId, _r, _ri); 
}

/**
 * ```
 * NativeDB Added Parameter 9: BOOL noDamage
 * ```
 * 
 * ```
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 * BOOL noDamage = false: damage || nodamage = true: no damage
 * ```
 * 
 * ```cpp
 * enum class eExplosionTag : uint32_t
 * {
 * DONTCARE = 0xFFFFFFFF,
 * GRENADE = 0,
 * GRENADELAUNCHER = 1,
 * STICKYBOMB = 2,
 * MOLOTOV = 3,
 * ROCKET = 4,
 * TANKSHELL = 5,
 * HI_OCTANE = 6,
 * CAR = 7,
 * PLANE = 8,
 * PETROL_PUMP = 9,
 * BIKE = 10,
 * DIR_STEAM = 11,
 * DIR_FLAME = 12,
 * DIR_WATER_HYDRANT = 13,
 * DIR_GAS_CANISTER = 14,
 * BOAT = 15,
 * SHIP_DESTROY = 16,
 * TRUCK = 17,
 * BULLET = 18,
 * SMOKEGRENADELAUNCHER = 19,
 * SMOKEGRENADE = 20,
 * BZGAS = 21,
 * FLARE = 22,
 * GAS_CANISTER = 23,
 * EXTINGUISHER = 24,
 * _0x988620B8 = 25,
 * EXP_TAG_TRAIN = 26,
 * EXP_TAG_BARREL = 27,
 * EXP_TAG_PROPANE = 28,
 * EXP_TAG_BLIMP = 29,
 * EXP_TAG_DIR_FLAME_EXPLODE = 30,
 * EXP_TAG_TANKER = 31,
 * PLANE_ROCKET = 32,
 * EXP_TAG_VEHICLE_BULLET = 33,
 * EXP_TAG_GAS_TANK = 34,
 * EXP_TAG_BIRD_CRAP = 35,
 * EXP_TAG_RAILGUN = 36,
 * EXP_TAG_BLIMP2 = 37,
 * EXP_TAG_FIREWORK = 38,
 * EXP_TAG_SNOWBALL = 39,
 * EXP_TAG_PROXMINE = 40,
 * EXP_TAG_VALKYRIE_CANNON = 41,
 * EXP_TAG_AIR_DEFENCE = 42,
 * EXP_TAG_PIPEBOMB = 43,
 * EXP_TAG_VEHICLEMINE = 44,
 * EXP_TAG_EXPLOSIVEAMMO = 45,
 * EXP_TAG_APCSHELL = 46,
 * EXP_TAG_BOMB_CLUSTER = 47,
 * EXP_TAG_BOMB_GAS = 48,
 * EXP_TAG_BOMB_INCENDIARY = 49,
 * EXP_TAG_BOMB_STANDARD = 50,
 * EXP_TAG_TORPEDO = 51,
 * EXP_TAG_TORPEDO_UNDERWATER = 52,
 * EXP_TAG_BOMBUSHKA_CANNON = 53,
 * EXP_TAG_BOMB_CLUSTER_SECONDARY = 54,
 * EXP_TAG_HUNTER_BARRAGE = 55,
 * EXP_TAG_HUNTER_CANNON = 56,
 * EXP_TAG_ROGUE_CANNON = 57,
 * EXP_TAG_MINE_UNDERWATER = 58,
 * EXP_TAG_ORBITAL_CANNON = 59,
 * EXP_TAG_BOMB_STANDARD_WIDE = 60,
 * EXP_TAG_EXPLOSIVEAMMO_SHOTGUN = 61,
 * EXP_TAG_OPPRESSOR2_CANNON = 62,
 * EXP_TAG_MORTAR_KINETIC = 63,
 * EXP_TAG_VEHICLEMINE_KINETIC = 64,
 * EXP_TAG_VEHICLEMINE_EMP = 65,
 * EXP_TAG_VEHICLEMINE_SPIKE = 66,
 * EXP_TAG_VEHICLEMINE_SLICK = 67,
 * EXP_TAG_VEHICLEMINE_TAR = 68,
 * EXP_TAG_SCRIPT_DRONE = 69,
 * EXP_TAG_RAYGUN = 70,
 * EXP_TAG_BURIEDMINE = 71,
 * EXP_TAG_SCRIPT_MISSILE = 72,
 * EXP_TAG_RCTANK_ROCKET = 73,
 * EXP_TAG_BOMB_WATER = 74,
 * EXP_TAG_BOMB_WATER_SECONDARY = 75,
 * _0xF728C4A9 = 76,
 * _0xBAEC056F = 77,
 * EXP_TAG_FLASHGRENADE = 78,
 * EXP_TAG_STUNGRENADE = 79,
 * _0x763D3B3B = 80,
 * EXP_TAG_SCRIPT_MISSILE_LARGE = 81,
 * EXP_TAG_SUBMARINE_BIG = 82,
 * };
 * ```
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export function addExplosion(x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void {
	return _in(0xe3ad2bdb, 0xaee269ac, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param explosionFx
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export function addExplosionWithUserVfx(x: number, y: number, z: number, explosionType: number, explosionFx: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void {
	return _in(0x36dd3fe5, 0x8b5e5212, _fv(x), _fv(y), _fv(z), explosionType, _ch(explosionFx), _fv(damageScale), isAudible, isInvisible, _fv(cameraShake)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export function addOwnedExplosion(ped: number, x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void {
	return _in(0x172aa1b6, 0x24fa1013, ped, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake)); 
}

/**
 * ```
 * Returns TRUE if it found something. FALSE if not.
 * ```
 * @param outPosition
 * @param x
 * @param y
 * @param z
 */
export function getClosestFirePos(x: number, y: number, z: number): boolean {
	return _in(0x352a9f6b, 0xcf90081f, _v(outPosition), _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function getNumberOfFiresInRange(x: number, y: number, z: number, radius: number): number {
	return _in(0x50cad495, 0xa460b305, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri); 
}

/**
 * ```
 * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
 * ```
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 */
export function GetEntityInsideExplosionArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number {
	return _in(0x14ba4ba1, 0x37af6cec, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), _r); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function GetEntityInsideExplosionSphere(explosionType: number, x: number, y: number, z: number, radius: number): number {
	return _in(0xb3cd51e3, 0xdb86f176, explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityOnFire(entity: number): boolean {
	return _in(0x28d3fed7, 0x190d3a0b, entity, _r); 
}

/**
 * 
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isExplosionActiveInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0x6070104b, 0x699b2ef4, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * 
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0x2e2eba0e, 0xe7ced0e0, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * 
 * @param fireHandle
 */
export function removeScriptFire(fireHandle: number): void {
	return _in(0x7ff54838, 0x5680673f, fireHandle); 
}

/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): boolean {
	return _in(0xa079a6c5, 0x1525dc4b, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r); 
}

/**
 * 
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): boolean {
	return _in(0xab0f8168, 0x85b0e483, explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * SET_FIRE_\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function SetFireSpreadRate(p0: number): void {
	return _in(0x8f390ac4, 0x155099ba, _fv(p0)); 
}

/**
 * 
 * @param entity
 */
export function startEntityFire(entity: number): number {
	return _in(0xf6a9d970, 0x8f6f23df, entity, _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function stopFireInRange(x: number, y: number, z: number, radius: number): void {
	return _in(0x056a8a21, 0x9b8e829f, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * ```
 * Starts a fire:
 * xyz: Location of fire
 * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
 * isGasFire: Whether or not the fire is powered by gasoline.
 * ```
 * @param X
 * @param Y
 * @param Z
 * @param maxChildren
 * @param isGasFire
 */
export function startScriptFire(X: number, Y: number, Z: number, maxChildren: number, isGasFire: boolean): number {
	return _in(0x6b83617e, 0x04503888, _fv(X), _fv(Y), _fv(Z), maxChildren, isGasFire, _r); 
}

/**
 * 
 * @param entity
 */
export function stopEntityFire(entity: number): void {
	return _in(0x7f0dd2eb, 0xbb651aff, entity); 
}

/**
 * ```
 * Example:
 * GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
 * I tried this and nothing happened...
 * ```
 * @param entity
 * @param icon
 */
export function addEntityIcon(entity: number, icon: string): any {
	return _in(0x9cd43eee, 0x12bf4dd0, entity, _ts(icon), _r, _ri); 
}

/**
 * ```
 * decal types:
 * public enum DecalTypes
 * {
 * splatters_blood = 1010,
 * splatters_blood_dir = 1015,
 * splatters_blood_mist = 1017,
 * splatters_mud = 1020,
 * splatters_paint = 1030,
 * splatters_water = 1040,
 * splatters_water_hydrant = 1050,
 * splatters_blood2 = 1110,
 * weapImpact_metal = 4010,
 * weapImpact_concrete = 4020,
 * weapImpact_mattress = 4030,
 * weapImpact_mud = 4032,
 * weapImpact_wood = 4050,
 * weapImpact_sand = 4053,
 * weapImpact_cardboard = 4040,
 * weapImpact_melee_glass = 4100,
 * weapImpact_glass_blood = 4102,
 * weapImpact_glass_blood2 = 4104,
 * weapImpact_shotgun_paper = 4200,
 * weapImpact_shotgun_mattress,
 * weapImpact_shotgun_metal,
 * weapImpact_shotgun_wood,
 * weapImpact_shotgun_dirt,
 * weapImpact_shotgun_tvscreen,
 * weapImpact_shotgun_tvscreen2,
 * weapImpact_shotgun_tvscreen3,
 * weapImpact_melee_concrete = 4310,
 * weapImpact_melee_wood = 4312,
 * weapImpact_melee_metal = 4314,
 * burn1 = 4421,
 * burn2,
 * burn3,
 * burn4,
 * burn5,
 * bang_concrete_bang = 5000,
 * bang_concrete_bang2,
 * bang_bullet_bang,
 * bang_bullet_bang2 = 5004,
 * bang_glass = 5031,
 * bang_glass2,
 * solidPool_water = 9000,
 * solidPool_blood,
 * solidPool_oil,
 * solidPool_petrol,
 * solidPool_mud,
 * porousPool_water,
 * porousPool_blood,
 * porousPool_oil,
 * porousPool_petrol,
 * porousPool_mud,
 * porousPool_water_ped_drip,
 * liquidTrail_water = 9050
 * }
 * ```
 * @param decalType
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param width
 * @param height
 * @param rCoef
 * @param gCoef
 * @param bCoef
 * @param opacity
 * @param timeout
 * @param p17
 * @param p18
 * @param p19
 */
export function addDecal(decalType: number, posX: number, posY: number, posZ: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, width: number, height: number, rCoef: number, gCoef: number, bCoef: number, opacity: number, timeout: number, p17: boolean, p18: boolean, p19: boolean): number {
	return _in(0xb302244a, 0x1839bdad, decalType, _fv(posX), _fv(posY), _fv(posZ), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(width), _fv(height), _fv(rCoef), _fv(gCoef), _fv(bCoef), _fv(opacity), _fv(timeout), p17, p18, p19, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param x
 * @param y
 * @param z
 * @param groundLvl
 * @param width
 * @param transparency
 */
export function AddOilDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number {
	return _in(0x126d7f89, 0xfe859a5e, _fv(x), _fv(y), _fv(z), _fv(groundLvl), _fv(width), _fv(transparency), _r, _ri); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param groundLvl
 * @param width
 * @param transparency
 */
export function addPetrolDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number {
	return _in(0x4f5212c7, 0xad880df8, _fv(x), _fv(y), _fv(z), _fv(groundLvl), _fv(width), _fv(transparency), _r, _ri); 
}

/**
 * 
 * @param modifierName1
 * @param modifierName2
 */
export function addTcmodifierOverride(modifierName1: string, modifierName2: string): void {
	return _in(0x1a8e2c8b, 0x9cf4549c, _ts(modifierName1), _ts(modifierName2)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param p3
 */
export function addPetrolTrailDecalInfo(x: number, y: number, z: number, p3: number): void {
	return _in(0x96727868, 0x2cb6967a, _fv(x), _fv(y), _fv(z), _fv(p3)); 
}

/**
 * See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724)
 * @param effectName
 */
export function AnimpostfxGetUnk(effectName: string): number {
	return _in(0xe35b38a2, 0x7e8e7179, _ts(effectName), _r, _rf); 
}

/**
 * ```
 * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
 * ```
 * @param vehicle
 * @param ped
 * @param boneIndex
 * @param x1
 * @param x2
 * @param x3
 * @param y1
 * @param y2
 * @param y3
 * @param z1
 * @param z2
 * @param z3
 * @param scale
 * @param p13
 * @param alpha
 */
export function addVehicleCrewEmblem(vehicle: number, ped: number, boneIndex: number, x1: number, x2: number, x3: number, y1: number, y2: number, y3: number, z1: number, z2: number, z3: number, scale: number, p13: any, alpha: number): boolean {
	return _in(0x428bdcb9, 0xda58da53, vehicle, ped, boneIndex, _fv(x1), _fv(x2), _fv(x3), _fv(y1), _fv(y2), _fv(y3), _fv(z1), _fv(z2), _fv(z3), _fv(scale), p13, alpha, _r); 
}

/**
 * See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724).
 * @param effectName
 * @return Whether the specified effect is active
 */
export function animpostfxIsRunning(effectName: string): boolean {
	return _in(0x36ad3e69, 0x0da5aceb, _ts(effectName), _r); 
}

/**
 * ```
 * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
 * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
 * ```
 * @param effectName
 * @param duration
 * @param looped
 */
export function animpostfxPlay(effectName: string, duration: number, looped: boolean): void {
	return _in(0x2206bf9a, 0x37b7f724, _ts(effectName), duration, looped); 
}

/**
 * See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724).
 * @param effectName
 */
export function animpostfxStop(effectName: string): void {
	return _in(0x068e835a, 0x1d0dc0e3, _ts(effectName)); 
}

/**
 * 
 */
export function animpostfxStopAll(): void {
	return _in(0xb4eddc19, 0x532bfb85); 
}

/**
 * ```
 * Might be more appropriate in AUDIO?
 * ```
 * @param entity
 */
export function attachTvAudioToEntity(entity: number): void {
	return _in(0x845bad77, 0xcc770633, entity); 
}

/**
 * Stops the effect and sets a value (bool) in its data (+0x199) to false; See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724).
 * @param effectName
 */
export function AnimpostfxStopAndDoUnk(effectName: string): void {
	return _in(0xd2209be1, 0x28b5418c, _ts(effectName)); 
}

/**
 * ```
 * Push a function from the Scaleform onto the stack
 * ```
 * @param scaleform
 * @param methodName
 */
export function beginScaleformMovieMethod(scaleform: number, methodName: string): boolean {
	return _in(0xf6e48914, 0xc7a8694e, scaleform, _ts(methodName), _r); 
}

/**
 * Starts frontend (pause menu) scaleform movie methods.
 * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
 * 
 * Use [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER`](#\_0xB9449845F73F5E9C) for header scaleform functions.
 * @param functionName
 */
export function beginScaleformMovieMethodOnFrontend(functionName: string): boolean {
	return _in(0xab58c27c, 0x2e6123c6, _ts(functionName), _r); 
}

/**
 * 
 */
export function beginTakeHighQualityPhoto(): boolean {
	return _in(0xa67c35c5, 0x6eb1bd9d, _r); 
}

/**
 * Starts frontend (pause menu) scaleform movie methods for header options.
 * 
 * Use [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND`](#\_0xAB58C27C2E6123C6) to customize the content inside the frontend menus.
 * @param functionName
 */
export function beginScaleformMovieMethodOnFrontendHeader(functionName: string): boolean {
	return _in(0xb9449845, 0xf73f5e9c, _ts(functionName), _r); 
}

/**
 * ```
 * Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
 * Examples:
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
 * HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
 * HUD::_ADD_TEXT_COMPONENT_STRING(a_2);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
 * HUD::_0x17299B63C7683A2B(v_3);
 * HUD::_0x17299B63C7683A2B(v_4);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
 * HUD::_0x17299B63C7683A2B(v_3);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * ```
 * @param textLabel
 */
export function beginTextCommandScaleformString(textLabel: string): void {
	return _in(0x80338406, 0xf3475e55, _ts(textLabel)); 
}

/**
 * ```
 * Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
 * Known components:
 * 19 - MP_RANK_BAR
 * 20 - HUD_DIRECTOR_MODE
 * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
 * ```
 * @param hudComponent
 * @param methodName
 */
export function beginScaleformScriptHudMovieMethod(hudComponent: number, methodName: string): boolean {
	return _in(0x98c494fd, 0x5bdfbfd5, hudComponent, _ts(methodName), _r); 
}

/**
 * ```
 * Calls the Scaleform function.
 * ```
 * @param scaleform
 * @param method
 */
export function callScaleformMovieMethod(scaleform: number, method: string): void {
	return _in(0xfbd96d87, 0xac96d533, scaleform, _ts(method)); 
}

/**
 * 
 */
export function beginTakeMissionCreatorPhoto(): boolean {
	return _in(0x1dd2139a, 0x9a20dce8, _r); 
}

/**
 * ```
 * Calls the Scaleform function and passes the parameters as floats.
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
 * ```
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
export function callScaleformMovieMethodWithNumber(scaleform: number, methodName: string, param1: number, param2: number, param3: number, param4: number, param5: number): void {
	return _in(0xd0837058, 0xae2e4bee, scaleform, _ts(methodName), _fv(param1), _fv(param2), _fv(param3), _fv(param4), _fv(param5)); 
}

/**
 * ```
 * Calls the Scaleform function and passes both float and string parameters (in their respective order).
 * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
 * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
 * Examples:
 * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
 * GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
 * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
 * GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
 * ```
 * @param scaleform
 * @param methodName
 * @param floatParam1
 * @param floatParam2
 * @param floatParam3
 * @param floatParam4
 * @param floatParam5
 * @param stringParam1
 * @param stringParam2
 * @param stringParam3
 * @param stringParam4
 * @param stringParam5
 */
export function callScaleformMovieMethodWithNumberAndString(scaleform: number, methodName: string, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void {
	return _in(0xef662d8d, 0x57e290b1, scaleform, _ts(methodName), _fv(floatParam1), _fv(floatParam2), _fv(floatParam3), _fv(floatParam4), _fv(floatParam5), _ts(stringParam1), _ts(stringParam2), _ts(stringParam3), _ts(stringParam4), _ts(stringParam5)); 
}

/**
 * ```
 * Calls the Scaleform function and passes the parameters as strings.
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
 * ```
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
export function callScaleformMovieMethodWithString(scaleform: number, methodName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void {
	return _in(0x51bc1ed3, 0xcc44e8f7, scaleform, _ts(methodName), _ts(param1), _ts(param2), _ts(param3), _ts(param4), _ts(param5)); 
}

/**
 * 
 */
export function CascadeShadowsClearShadowSampleType(): void {
	return _in(0x27cb7722, 0x18215325); 
}

/**
 * 
 */
export function cascadeShadowsInitSession(): void {
	return _in(0x03fc694a, 0xe06c5a20); 
}

/**
 * ```
 * When this is set to ON, shadows only draw as you get nearer.
 * When OFF, they draw from a further distance.
 * ```
 * @param toggle
 */
export function cascadeShadowsEnableEntityTracker(toggle: boolean): void {
	return _in(0x80ecbc0c, 0x856d3b0b, toggle); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function cascadeShadowsSetCascadeBounds(p0: any, p1: boolean, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number): void {
	return _in(0xd2936cab, 0x8b58fcbd, p0, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7)); 
}

/**
 * 
 * @param p0
 */
export function cascadeShadowsSetAircraftMode(p0: boolean): void {
	return _in(0x6ddbf9df, 0xfc4ac080, p0); 
}

/**
 * 
 * @param p0
 */
export function cascadeShadowsSetCascadeBoundsScale(p0: number): void {
	return _in(0x5f0f3f56, 0x635809ef, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function cascadeShadowsSetDynamicDepthMode(p0: boolean): void {
	return _in(0xd39d13c9, 0xfebf0511, p0); 
}

/**
 * 
 * @param p0
 */
export function cascadeShadowsSetDynamicDepthValue(p0: number): void {
	return _in(0x02ac28f3, 0xa01fa04a, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function cascadeShadowsSetEntityTrackerScale(p0: number): void {
	return _in(0x5e9daf5a, 0x20f15908, _fv(p0)); 
}

/**
 * ```
 * Possible values:
 * "CSM_ST_POINT"
 * "CSM_ST_LINEAR"
 * "CSM_ST_TWOTAP"
 * "CSM_ST_BOX3x3"
 * "CSM_ST_BOX4x4"
 * "CSM_ST_DITHER2_LINEAR"
 * "CSM_ST_CUBIC"
 * "CSM_ST_DITHER4"
 * "CSM_ST_DITHER16"
 * "CSM_ST_SOFT16"
 * "CSM_ST_DITHER16_RPDB"
 * "CSM_ST_POISSON16_RPDB_GNORM"
 * "CSM_ST_HIGHRES_BOX4x4"
 * "CSM_ST_CLOUDS_SIMPLE"
 * "CSM_ST_CLOUDS_LINEAR"
 * "CSM_ST_CLOUDS_TWOTAP"
 * "CSM_ST_CLOUDS_BOX3x3"
 * "CSM_ST_CLOUDS_BOX4x4"
 * "CSM_ST_CLOUDS_DITHER2_LINEAR"
 * "CSM_ST_CLOUDS_SOFT16"
 * "CSM_ST_CLOUDS_DITHER16_RPDB"
 * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
 * ```
 * @param type
 */
export function cascadeShadowsSetShadowSampleType(type: string): void {
	return _in(0xb11d94bc, 0x55f41932, _ts(type)); 
}

/**
 * Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\_0xAA0008F3BBB8F416) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\_0xAA0008F3BBB8F416) for further information.
 */
export function clearDrawOrigin(): void {
	return _in(0xff0b610f, 0x6be0d7af); 
}

/**
 * Clears the secondary timecycle modifier usually set with [`SetExtraTimecycleModifier`](#\_0x5096FD9CCB49056D)
 */
export function ClearExtraTimecycleModifier(): void {
	return _in(0x92ccc17a, 0x7a2285da); 
}

/**
 * 
 */
export function clearTimecycleModifier(): void {
	return _in(0x0f07e774, 0x5a236711); 
}

/**
 * 
 * @param tvChannel
 */
export function clearTvChannelPlaylist(tvChannel: number): void {
	return _in(0xbeb3d46b, 0xb7f043c0, tvChannel); 
}

/**
 * ```
 * Creates a checkpoint. Returns the handle of the checkpoint.
 * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
 * Parameters:
 * * type - The type of checkpoint to create. See below for a list of checkpoint types.
 * * pos1 - The position of the checkpoint.
 * * pos2 - The position of the next checkpoint to point to.
 * * diameter - The diameter of the checkpoint.
 * * color - The color of the checkpoint.
 * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
 * Checkpoint types (prior to game build 2189):
 * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
 * 39----------?
 * 40----------Ring: just a ring
 * 41----------?
 * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
 * 45-47-------Cylinder no arrow or number
 * If using type 42-44, reserved sets number / number and shape to display
 * 0-99------------Just numbers (0-99)
 * 100-109-----------------Arrow (0-9)
 * 110-119------------Two arrows (0-9)
 * 120-129----------Three arrows (0-9)
 * 130-139----------------Circle (0-9)
 * 140-149------------CycleArrow (0-9)
 * 150-159----------------Circle (0-9)
 * 160-169----Circle  w/ pointer (0-9)
 * 170-179-------Perforated ring (0-9)
 * 180-189----------------Sphere (0-9)
 * ```
 * 
 * [Checkpoint Types](https://docs.fivem.net/docs/game-references/checkpoints/) as of game build 2189
 * @param type
 * @param posX1
 * @param posY1
 * @param posZ1
 * @param posX2
 * @param posY2
 * @param posZ2
 * @param diameter
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param reserved
 */
export function createCheckpoint(type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, diameter: number, red: number, green: number, blue: number, alpha: number, reserved: number): number {
	return _in(0x0134f083, 0x5ab6bfcb, type, _fv(posX1), _fv(posY1), _fv(posZ1), _fv(posX2), _fv(posY2), _fv(posZ2), _fv(diameter), red, green, blue, alpha, reserved, _r, _ri); 
}

/**
 * Creates a tracked point: useful for checking the visibility of a 3D point on screen.
 * 
 * Tracked points must be manually managed and will not be destroyed on resource stop (they are not an instance of CScriptResource). See [`DESTROY_TRACKED_POINT`](#\_0xB25DC90BAD56CA42) and [onResourceStop](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/).
 * 
 * Only 64 points may be tracked at a given time.
 */
export function createTrackedPoint(): number {
	return _in(0xe2c9439e, 0xd45dea60, _r, _ri); 
}

/**
 * 
 * @param checkpoint
 */
export function deleteCheckpoint(checkpoint: number): void {
	return _in(0xf5ed37f5, 0x4cd4d52e, checkpoint); 
}

/**
 * 
 */
export function disableOcclusionThisFrame(): void {
	return _in(0x3669f1b1, 0x98dcaa4f); 
}

/**
 * 
 * @param p0
 */
export function DisableScriptAmbientEffects(p0: any): void {
	return _in(0xefd97ff4, 0x7b745b8d, p0); 
}

/**
 * Used in pi_menu.c. Checks if there is a brief entry for specified value.
 * Values:
 * 0 - Dialogue brief
 * 1 - Help text brief
 * 2 - Mission Objective brief
 * @param briefValue
 */
export function doesLatestBriefStringExist(briefValue: number): boolean {
	return _in(0x5e657ef1, 0x099edd65, briefValue, _r); 
}

/**
 * 
 * @param point
 */
export function destroyTrackedPoint(point: number): void {
	return _in(0xb25dc90b, 0xad56ca42, point); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function doesVehicleHaveCrewEmblem(vehicle: number, p1: number): boolean {
	return _in(0x060d935d, 0x3981a275, vehicle, p1, _r); 
}

/**
 * 
 */
export function disableScreenblurFade(): void {
	return _in(0xde812394, 0x37e8c5a8); 
}

/**
 * 
 * @param toggle
 */
export function disableVehicleDistantlights(toggle: boolean): void {
	return _in(0xc9f98ac1, 0x884e73a2, toggle); 
}

/**
 * 
 * @param ptfxHandle
 */
export function doesParticleFxLoopedExist(ptfxHandle: number): boolean {
	return _in(0x74afef0d, 0x2e1e409b, ptfxHandle, _r); 
}

/**
 * ```
 * x,y,z = start pos
 * x2,y2,z2 = end pos
 * Draw's a 3D Box between the two x,y,z coords.
 * --------------
 * Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
 * End Sub
 * [C#]
 * public void DrawBox(Vector3 a, Vector3 b, Color col)
 * {
 * Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
 * }
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xd3a9971c, 0xadac7252, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), red, green, blue, alpha); 
}

/**
 * 
 * @param p0
 */
export function dontRenderInGameUi(p0: boolean): void {
	return _in(0x22a249a5, 0x3034450a, p0); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param x
 * @param y
 * @param z
 * @param size
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugCross(x: number, y: number, z: number, size: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x73b11896, 0x23049839, _fv(x), _fv(y), _fv(z), _fv(size), red, green, blue, alpha); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function drawDebugLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, a: number): void {
	return _in(0x7fdfade6, 0x76aa3cb0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r, g, b, a); 
}

/**
 * Must be called each frame, will play at specified position on screen when called with [`_PLAY_BINK_MOVIE`](#\_0x70D2CC8A542A973C)
 * @param binkMovie
 * @param posX
 * @param posY
 * @param scaleX
 * @param scaleY
 * @param rotation
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function DrawBinkMovie(binkMovie: number, posX: number, posY: number, scaleX: number, scaleY: number, rotation: number, r: number, g: number, b: number, a: number): void {
	return _in(0x7118e83e, 0xeb9f7238, binkMovie, _fv(posX), _fv(posY), _fv(scaleX), _fv(scaleY), _fv(rotation), r, g, b, a); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function drawDebugBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, a: number): void {
	return _in(0x083a2ca4, 0xf2e573bd, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r, g, b, a); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param r1
 * @param g1
 * @param b1
 * @param r2
 * @param g2
 * @param b2
 * @param alpha1
 * @param alpha2
 */
export function drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void {
	return _in(0xd8b9a8ac, 0x5608ff94, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r1, g1, b1, r2, g2, b2, alpha1, alpha2); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugText(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x3903e216, 0x620488e8, _ts(text), _fv(x), _fv(y), _fv(z), red, green, blue, alpha); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xaad68e1a, 0xb39da632, _fv(x), _fv(y), _fv(z), _fv(radius), red, green, blue, alpha); 
}

/**
 * Similar to [\_DRAW_SPRITE](#\_0xE7FFAE5EBF23D890), but seems to be some kind of "interactive" sprite, at least used by render targets.
 * These seem to be the only dicts ever requested by this native:
 * 
 * ```
 * prop_screen_biker_laptop
 * Prop_Screen_GR_Disruption
 * Prop_Screen_TaleOfUs
 * prop_screen_nightclub
 * Prop_Screen_IE_Adhawk
 * prop_screen_sm_free_trade_shipping
 * prop_screen_hacker_truck
 * MPDesktop
 * Prop_Screen_Nightclub
 * And a few others
 * ```
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function DrawInteractiveSprite(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x2bc54a81, 0x88768488, _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param r
 * @param g
 * @param b
 * @param range
 * @param intensity
 * @param shadow
 */
export function DrawLightWithRangeAndShadow(x: number, y: number, z: number, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void {
	return _in(0xf49e9a97, 0x16a04595, _fv(x), _fv(y), _fv(z), r, g, b, _fv(range), _fv(intensity), _fv(shadow)); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugText2d(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xa3bb2e95, 0x55c05a8f, _ts(text), _fv(x), _fv(y), _fv(z), red, green, blue, alpha); 
}

/**
 * 
 * @param posX
 * @param posY
 * @param posZ
 * @param colorR
 * @param colorG
 * @param colorB
 * @param range
 * @param intensity
 */
export function drawLightWithRange(posX: number, posY: number, posZ: number, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void {
	return _in(0xf2a1b277, 0x1a01dbd4, _fv(posX), _fv(posY), _fv(posZ), colorR, colorG, colorB, _fv(range), _fv(intensity)); 
}

/**
 * ```
 * Draws a depth-tested line from one point to another.
 * ----------------
 * x1, y1, z1 : Coordinates for the first point
 * x2, y2, z2 : Coordinates for the second point
 * r, g, b, alpha : Color with RGBA-Values
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
 * End Sub
 * [C#]
 * public void DrawLine(Vector3 from, Vector3 to, Color col)
 * {
 * Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
 * }
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x6b725607, 0x4ae34680, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), red, green, blue, alpha); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function drawLowQualityPhotoToPhone(p0: boolean, p1: boolean): void {
	return _in(0x1072f115, 0xdab0717e, p0, p1); 
}

/**
 * Draws a marker with the specified appearance at the target location. This has to be called every frame, e.g. in a `Wait(0)` loop.
 * 
 * There's a [list of markers](https://docs.fivem.net/game-references/markers/) on the FiveM documentation site.
 * @param type
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param bobUpAndDown
 * @param faceCamera
 * @param p19
 * @param rotate
 * @param textureDict
 * @param textureName
 * @param drawOnEnts
 */
export function drawMarker(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void {
	return _in(0x28477ec2, 0x3d892089, type, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts); 
}

/**
 * ```
 * x/y/z - Location of a vertex (in world coords), presumably.
 * ----------------
 * x1, y1, z1     : Coordinates for the first point
 * x2, y2, z2     : Coordinates for the second point
 * x3, y3, z3     : Coordinates for the third point
 * r, g, b, alpha : Color with RGBA-Values
 * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
 * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
 * End Sub
 * [C#]
 * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
 * {
 * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
 * }
 * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xac267160, 0x48436851, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), red, green, blue, alpha); 
}

/**
 * ```
 * NativeDB Added Parameter 26: BOOL p25
 * ```
 * @param type
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param bobUpAndDown
 * @param faceCamera
 * @param p19
 * @param rotate
 * @param textureDict
 * @param textureName
 * @param drawOnEnts
 * @param p24
 */
export function DrawMarker2(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean, p24: boolean): void {
	return _in(0xe82728f0, 0xde75d13a, type, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts, p24); 
}

/**
 * ```
 * Draws a rectangle on the screen.
 * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
 * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
 * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
 * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
 * -R: Red part of the color. (0-255)
 * -G: Green part of the color. (0-255)
 * -B: Blue part of the color. (0-255)
 * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
 * The total number of rectangles to be drawn in one frame is apparently limited to 399.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 9: BOOL p8
 * ```
 * @param x
 * @param y
 * @param width
 * @param height
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number): void {
	return _in(0x3a618a21, 0x7e5154f0, _fv(x), _fv(y), _fv(width), _fv(height), r, g, b, a); 
}

/**
 * 
 * @param scaleformHandle
 * @param x
 * @param y
 * @param width
 * @param height
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param unk
 */
export function drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number, unk: number): void {
	return _in(0x54972ada, 0xf0294a93, scaleformHandle, _fv(x), _fv(y), _fv(width), _fv(height), red, green, blue, alpha, unk); 
}

/**
 * ```
 * unk is not used so no need
 * ```
 * @param scaleform
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param unk
 */
export function drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number, unk: number): void {
	return _in(0x0df60692, 0x9c105be1, scaleform, red, green, blue, alpha, unk); 
}

/**
 * 
 * @param scaleform1
 * @param scaleform2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xcf537fde, 0x4fbd4ce5, scaleform1, scaleform2, red, green, blue, alpha); 
}

/**
 * ```
 * It's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A
 * p0 was always "CELEBRATION_WINNER"
 * ```
 * @param p0
 * @param ped
 * @param p2
 * @param posX
 * @param posY
 * @param posZ
 */
export function DrawShowroom(p0: string, ped: number, p2: number, posX: number, posY: number, posZ: number): boolean {
	return _in(0x98c4fe6e, 0xc34154ca, _ts(p0), ped, p2, _fv(posX), _fv(posY), _fv(posZ), _r); 
}

/**
 * 
 * @param scaleform
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p7
 * @param sharpness
 * @param p9
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param p13
 */
export function drawScaleformMovie3d(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, sharpness: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, p13: any): void {
	return _in(0x87d51d72, 0x255d4e78, scaleform, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(p7), _fv(sharpness), _fv(p9), _fv(scaleX), _fv(scaleY), _fv(scaleZ), p13); 
}

/**
 * 
 * @param scaleform
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p7
 * @param p8
 * @param p9
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param p13
 */
export function drawScaleformMovie3dSolid(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, p13: any): void {
	return _in(0x1ce592fd, 0xc749d6f5, scaleform, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(p7), _fv(p8), _fv(p9), _fv(scaleX), _fv(scaleY), _fv(scaleZ), p13); 
}

/**
 * ```
 * Parameters:
 * * pos - coordinate where the spotlight is located
 * * dir - the direction vector the spotlight should aim at from its current position
 * * r,g,b - color of the spotlight
 * * distance - the maximum distance the light can reach
 * * brightness - the brightness of the light
 * * roundness - "smoothness" of the circle edge
 * * radius - the radius size of the spotlight
 * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
 * Example in C# (spotlight aims at the closest vehicle):
 * Vector3 myPos = Game.Player.Character.Position;
 * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
 * Vector3 destinationCoords = nearest.Position;
 * Vector3 dirVector = destinationCoords - myPos;
 * dirVector.Normalize();
 * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
 * ```
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param colorR
 * @param colorG
 * @param colorB
 * @param distance
 * @param brightness
 * @param hardness
 * @param radius
 * @param falloff
 */
export function drawSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, hardness: number, radius: number, falloff: number): void {
	return _in(0xd0f64b26, 0x5c8c8b33, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), colorR, colorG, colorB, _fv(distance), _fv(brightness), _fv(hardness), _fv(radius), _fv(falloff)); 
}

/**
 * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
 * 
 * Example [image](https://imgur.com/nCbtS4H):
 * 
 * ```lua
 * DrawSphere(35.45, 172.66, 126.22, 1.0, 0, 0, 255, 0.2)
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param r
 * @param g
 * @param b
 * @param opacity
 */
export function DrawSphere(x: number, y: number, z: number, radius: number, r: number, g: number, b: number, opacity: number): void {
	return _in(0x799017f9, 0xe3b10112, _fv(x), _fv(y), _fv(z), _fv(radius), r, g, b, _fv(opacity)); 
}

/**
 * 
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param colorR
 * @param colorG
 * @param colorB
 * @param distance
 * @param brightness
 * @param roundness
 * @param radius
 * @param falloff
 * @param shadowId
 */
export function DrawSpotLightWithShadow(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadowId: number): void {
	return _in(0x5bca583a, 0x583194db, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), colorR, colorG, colorB, _fv(distance), _fv(brightness), _fv(roundness), _fv(radius), _fv(falloff), shadowId); 
}

/**
 * ```
 * Draws a 2D sprite on the screen.
 * Parameters:
 * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
 * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
 * screenX/Y - Screen offset (0.5 = center)
 * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
 * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
 * red,green,blue - Sprite color (default = 255/255/255)
 * alpha - opacity level
 * ```
 * 
 * ```
 * NativeDB Added Parameter 12: BOOL p11
 * ```
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawSprite(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xe7ffae5e, 0xbf23d890, _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha); 
}

/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 * 
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
export function DrawSpritePoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void {
	return _in(0x29280002, 0x282f1928, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), red, green, blue, alpha, _ts(textureDict), _ts(textureName), _fv(u1), _fv(v1), _fv(w1), _fv(u2), _fv(v2), _fv(w2), _fv(u3), _fv(v3), _fv(w3)); 
}

/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 * 
 * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
 * 
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red1
 * @param green1
 * @param blue1
 * @param alpha1
 * @param red2
 * @param green2
 * @param blue2
 * @param alpha2
 * @param red3
 * @param green3
 * @param blue3
 * @param alpha3
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
export function DrawSpritePoly2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red1: number, green1: number, blue1: number, alpha1: number, red2: number, green2: number, blue2: number, alpha2: number, red3: number, green3: number, blue3: number, alpha3: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void {
	return _in(0x736d7aa1, 0xb750856b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(red1), _fv(green1), _fv(blue1), alpha1, _fv(red2), _fv(green2), _fv(blue2), alpha2, _fv(red3), _fv(green3), _fv(blue3), alpha3, _ts(textureDict), _ts(textureName), _fv(u1), _fv(v1), _fv(w1), _fv(u2), _fv(v2), _fv(w2), _fv(u3), _fv(v3), _fv(w3)); 
}

/**
 * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
 * u1, v1 - texture coordinates for the top-left corner
 * u2, v2 - texture coordinates for the bottom-right corner
 * 
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param u1
 * @param v1
 * @param u2
 * @param v2
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function DrawSpriteUv(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, u1: number, v1: number, u2: number, v2: number, heading: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x95812f9b, 0x26074726, _ts(textureDict), _ts(textureName), _fv(x), _fv(y), _fv(width), _fv(height), _fv(u1), _fv(v1), _fv(u2), _fv(v2), _fv(heading), red, green, blue, alpha); 
}

/**
 * ```
 * All calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.
 * "act_cinema.ysc", line 1483:
 * HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
 * HUD::SET_TEXT_RENDER_ID(l_AE);
 * GRAPHICS::_0x61BB1D9B3A95D802(4);
 * GRAPHICS::_0xC6372ECD45D73BCD(1);
 * if (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
 * } else {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * }
 * "am_mp_property_int.ysc", line 102545:
 * if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
 * if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
 * HUD::SET_TEXT_RENDER_ID(a_2._f1);
 * GRAPHICS::_0x61BB1D9B3A95D802(4);
 * GRAPHICS::_0xC6372ECD45D73BCD(1);
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * if (GRAPHICS::GET_TV_CHANNEL() == -1) {
 * sub_a8fa5(a_2, 1);
 * } else {
 * sub_a8fa5(a_2, 1);
 * GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
 * }
 * HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
 * }
 * }
 * ```
 * @param xPos
 * @param yPos
 * @param xScale
 * @param yScale
 * @param rotation
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xfddc2b4e, 0xd3c69df0, _fv(xPos), _fv(yPos), _fv(xScale), _fv(yScale), _fv(rotation), red, green, blue, alpha); 
}

/**
 * Creates a motion-blur sort of effect, this native does not seem to work, however by using the [`START_SCREEN_EFFECT`](#\_0x2206BF9A37B7F724) native with `"DrugsMichaelAliensFight"` as the effect parameter, you should be able to get the effect.
 * 
 * This native does not seem to work, however by using the [START_SCREEN_EFFECT](https://runtime.fivem.net/doc/natives/#\_0x2206BF9A37B7F724) native with "DrugsMichaelAliensFight" as the effect parameter, you should be able to get the effect.
 * @param toggle
 */
export function enableAlienBloodVfx(toggle: boolean): void {
	return _in(0x9dce1f0f, 0x78260875, toggle); 
}

/**
 * If true, this native will create purple explosions upon projectile impact, add comic-like PTFX when firing a weapon, create a sound on bullet impact and have its own "blood effect".
 * 
 * If the PTFX asset "scr_rcbarry2" is not requested using ([`RequestNamedPtfxAsset`](#\_0xD821490579791273)) then this native **will not work as intended**.
 * 
 * Excerpt from fm_content_drug_lab_work.c:
 * 
 * ```
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry2");
 * if (STREAMING::HAS_NAMED_PTFX_ASSET_LOADED("scr_rcbarry2"))
 * {
 * GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(true);
 * AUDIO::START_AUDIO_SCENE("DLC_CM2022_DRUG_TRIP_SPRINKLERS_SCENE");
 * func_720(26);
 * }
 * ```
 * @param toggle
 */
export function enableClownBloodVfx(toggle: boolean): void {
	return _in(0xd8214905, 0x79791273, toggle); 
}

/**
 * 
 */
export function endPetrolTrailDecals(): void {
	return _in(0x0a123435, 0xa26c36cd); 
}

/**
 * 
 * @param toggle
 */
export function enableMovieKeyframeWait(toggle: boolean): void {
	return _in(0x74c18003, 0x0fde4b69, toggle); 
}

/**
 * 
 * @param toggle
 */
export function enableMovieSubtitles(toggle: boolean): void {
	return _in(0x873fa65c, 0x778ad970, toggle); 
}

/**
 * ```
 * Pops and calls the Scaleform function on the stack
 * ```
 */
export function endScaleformMovieMethod(): void {
	return _in(0xc6796a8f, 0xfa375e53); 
}

/**
 * 
 */
export function endTextCommandScaleformString(): void {
	return _in(0x362e2d3f, 0xe93a9959); 
}

/**
 * 
 */
export function endScaleformMovieMethodReturnValue(): number {
	return _in(0xc50aa39a, 0x577af886, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function fadeUpPedLight(p0: number): void {
	return _in(0xc9b18b46, 0x19f48f7b, _fv(p0)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param duration
 */
export function fadeDecalsInRange(x: number, y: number, z: number, radius: number, duration: number): void {
	return _in(0xd77edadb, 0x0420e6e0, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(duration)); 
}

/**
 * 
 * @param toggle
 */
export function forceRenderInGameUi(toggle: boolean): void {
	return _in(0xdc459cfa, 0x0cce245b, toggle); 
}

/**
 * 
 */
export function freeMemoryForLowQualityPhoto(): void {
	return _in(0x6a12d888, 0x81435dca); 
}

/**
 * ```
 * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
 * ```
 */
export function EndTextCommandScaleformString2(): void {
	return _in(0xae4e8157, 0xd9ecf087); 
}

/**
 * 
 */
export function freeMemoryForHighQualityPhoto(): void {
	return _in(0xd801cc02, 0x177fa3f1); 
}

/**
 * 
 */
export function freeMemoryForMissionCreatorPhoto(): void {
	return _in(0x0a46af8a, 0x78dc5e0a); 
}

/**
 * 
 * @param b
 */
export function GetAspectRatio(b: boolean): number {
	return _in(0xf1307ef6, 0x24a80d87, b, _r, _rf); 
}

/**
 * ```
 * Returns current screen resolution.
 * ```
 * @param x
 * @param y
 */
export function GetActiveScreenResolution(): void {
	return _in(0x873c9f31, 0x04101dd3, _i, _i); 
}

/**
 * In percentage: 0.0 - 100.0
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param binkMovie
 */
export function GetBinkMovieTime(binkMovie: number): number {
	return _in(0x8e17ddd6, 0xb9d5bf29, binkMovie, _r, _rf); 
}

/**
 * 
 */
export function getCurrentNumberOfCloudPhotos(): number {
	return _in(0x473151eb, 0xc762c6da, _r, _ri); 
}

/**
 * See [`GET_TIMECYCLE_MODIFIER_INDEX`](#\_0xFDF3D97C674AFB66) for use, works the same just for the secondary timecycle modifier.
 * @return An integer representing the Timecycle modifier
 */
export function GetExtraTimecycleModifierIndex(): number {
	return _in(0xbb0527ec, 0x6341496d, _r, _ri); 
}

/**
 * 
 * @param decal
 */
export function getDecalWashLevel(decal: number): number {
	return _in(0x323f6476, 0x79a09103, decal, _r, _rf); 
}

/**
 * ```
 * false = Any resolution < 1280x720
 * true = Any resolution >= 1280x720
 * ```
 */
export function getIsHidef(): boolean {
	return _in(0x84ed3119, 0x1cc5d2c9, _r); 
}

/**
 * ```
 * Setting Aspect Ratio Manually in game will return:
 * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
 * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
 * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
 * ```
 */
export function getIsWidescreen(): boolean {
	return _in(0x30cf4bda, 0x4fcb1905, _r); 
}

/**
 * 
 * @param xCoord
 * @param yCoord
 * @param zCoord
 * @param radius
 */
export function getIsPetrolDecalInRange(xCoord: number, yCoord: number, zCoord: number, radius: number): boolean {
	return _in(0x2f09f797, 0x6c512404, _fv(xCoord), _fv(yCoord), _fv(zCoord), _fv(radius), _r); 
}

/**
 * ```
 * This function is hard-coded to always return 96.
 * ```
 */
export function getMaximumNumberOfCloudPhotos(): number {
	return _in(0xdc54a7af, 0x8b3a14ef, _r, _ri); 
}

/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 */
export function getMaximumNumberOfPhotos(): number {
	return _in(0x34d23450, 0xf028b0bf, _r, _ri); 
}

/**
 * ```
 * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
 * ```
 */
export function getSafeZoneSize(): number {
	return _in(0xbaf107b6, 0xbb2c97f0, _r, _rf); 
}

/**
 * 
 */
export function getRequestingnightvision(): boolean {
	return _in(0x35fb78dc, 0x42b7bd21, _r); 
}

/**
 * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
 * @param method_return
 * @return Returns a string in the same way `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT` returns an int.
 */
export function getScaleformMovieMethodReturnValueString(method_return: number): string {
	return _in(0xe1e25882, 0x9a885245, method_return, _r, _s); 
}

/**
 * ```
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * ```
 * @param methodReturn
 */
export function GetScaleformMovieMethodReturnValueBool(methodReturn: number): boolean {
	return _in(0xd80a8034, 0x6a45d761, methodReturn, _r); 
}

/**
 * Hardcoded to always return 1280x720. Use [`_GET_ACTIVE_SCREEN_RESOLUTION`](?\_0x873C9F3104101DD3) to retrieve the correct screen resolution.
 * @param x
 * @param y
 */
export function getScreenResolution(): void {
	return _in(0x888d57e4, 0x07e63624, _i, _i); 
}

/**
 * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
 * @param method_return
 * @return Returns an int in the same way `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING` returns a string.
 */
export function getScaleformMovieMethodReturnValueInt(method_return: number): number {
	return _in(0x2de7efa6, 0x6b906036, method_return, _r, _ri); 
}

/**
 * ```
 * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
 * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
 * For .NET users...
 * VB:
 * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
 * Dim x2dp, y2dp As New Native.OutputArgument
 * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
 * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
 * 
 * End Function
 * C#:
 * Vector2 World3DToScreen2d(Vector3 pos)
 * {
 * var x2dp = new OutputArgument();
 * var y2dp = new OutputArgument();
 * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
 * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
 * }
 * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
 * Used to be called _WORLD3D_TO_SCREEN2D
 * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
 * ```
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
export function getScreenCoordFromWorldCoord(worldX: number, worldY: number, worldZ: number): boolean {
	return _in(0x34e82f05, 0xdf2974f5, _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r); 
}

/**
 * 
 */
export function getScreenblurFadeCurrentTime(): number {
	return _in(0x5ccabffc, 0xa31dde33, _r, _rf); 
}

/**
 * Calculates the effective X/Y fractions when applying the values set by `SET_SCRIPT_GFX_ALIGN` and
 * `SET_SCRIPT_GFX_ALIGN_PARAMS`.
 * @param x
 * @param y
 * @param calculatedX
 * @param calculatedY
 */
export function GetScriptGfxPosition(x: number, y: number): void {
	return _in(0x6dd8f5aa, 0x635eb4b2, _fv(x), _fv(y), _f, _f); 
}

/**
 * 
 * @param p0
 */
export function getStatusOfLoadMissionCreatorPhoto(p0: string): number {
	return _in(0x1670f8d0, 0x5056f257, _ts(p0), _r, _ri); 
}

/**
 * ```
 * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
 * appcamera, appmedia, and cellphone_controller.
 * ```
 * @param p0
 */
export function getStatusOfSortedListOperation(p0: boolean): number {
	return _in(0xf5bed327, 0xcea362b1, p0, _r, _ri); 
}

/**
 * 
 */
export function getStatusOfSaveHighQualityPhoto(): number {
	return _in(0x0c0c4e81, 0xe1ac60a0, _r, _ri); 
}

/**
 * 
 */
export function getStatusOfTakeMissionCreatorPhoto(): number {
	return _in(0x90a78eca, 0xa4e78453, _r, _ri); 
}

/**
 * 
 */
export function getStatusOfTakeHighQualityPhoto(): number {
	return _in(0x0d6ca79e, 0xeebd8ca3, _r, _ri); 
}

/**
 * ```
 * Only use for this in the PC scripts is:
 * if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
 * For a full list, see here: pastebin.com/cnk7FTF2
 * ```
 */
export function getTimecycleModifierIndex(): number {
	return _in(0xfdf3d97c, 0x674afb66, _r, _ri); 
}

/**
 * ```
 * Returns the texture resolution of the passed texture dict+name.
 * Note: Most texture resolutions are doubled compared to the console version of the game.
 * ```
 * @param textureDict
 * @param textureName
 */
export function getTextureResolution(textureDict: string, textureName: string): Vector3 {
	return _in(0x35736ee6, 0x5bd00c11, _ts(textureDict), _ts(textureName), _r, _rv); 
}

/**
 * 
 */
export function getTimecycleTransitionModifierIndex(): number {
	return _in(0x459fd2c8, 0xd0ab78bc, _r, _ri); 
}

/**
 * 
 */
export function getTogglePausedRenderphasesStatus(): boolean {
	return _in(0xeb3dac2c, 0x86001e5e, _r); 
}

/**
 * 
 */
export function getTvChannel(): number {
	return _in(0xfc1e275a, 0x90d39995, _r, _ri); 
}

/**
 * 
 */
export function getUsingseethrough(): boolean {
	return _in(0x44b80aba, 0xb9d80bd3, _r); 
}

/**
 * 
 */
export function getTvVolume(): number {
	return _in(0x2170813d, 0x3dd8661b, _r, _rf); 
}

/**
 * 
 */
export function getUsingnightvision(): boolean {
	return _in(0x2202a3f4, 0x2c8e5f79, _r); 
}

/**
 * 
 */
export function golfTrailGetMaxHeight(): number {
	return _in(0xa4819f5e, 0x23e2ffad, _r, _rf); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function getVehicleCrewEmblemRequestState(vehicle: number, p1: number): number {
	return _in(0xfe26117a, 0x5841b2ff, vehicle, p1, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function golfTrailGetVisualControlPoint(p0: number): Vector3 {
	return _in(0xa4664972, 0xa9b8f8ba, p0, _r, _rv); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export function golfTrailSetColour(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void {
	return _in(0x12995f2e, 0x53ffa601, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); 
}

/**
 * 
 * @param p0
 */
export function golfTrailSetFacing(p0: boolean): void {
	return _in(0x06f761ea, 0x47c1d3ed, p0); 
}

/**
 * 
 * @param toggle
 */
export function golfTrailSetEnabled(toggle: boolean): void {
	return _in(0xa51c4b86, 0xb71652ae, toggle); 
}

/**
 * ```
 * 12 matches across 4 scripts. All 4 scripts were job creators.
 * type ranged from 0 - 2.
 * p4 was always 0.2f. Likely scale.
 * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
 * Tested but noticed nothing.
 * ```
 * @param type
 * @param xPos
 * @param yPos
 * @param zPos
 * @param p4
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function golfTrailSetFixedControlPoint(type: number, xPos: number, yPos: number, zPos: number, p4: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xb1bb0374, 0x2917a5d6, type, _fv(xPos), _fv(yPos), _fv(zPos), _fv(p4), red, green, blue, alpha); 
}

/**
 * ```
 * Only appeared in Golf & Golf_mp. Parameters were all ptrs
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function golfTrailSetShaderParams(p0: number, p1: number, p2: number, p3: number, p4: number): void {
	return _in(0x9cfdd90b, 0x2b844bf7, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4)); 
}

/**
 * ```
 * p8 seems to always be false.
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function golfTrailSetPath(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): void {
	return _in(0x312342e1, 0xa4874f3f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8); 
}

/**
 * 
 */
export function GrassLodResetScriptAreas(): void {
	return _in(0x302c91ab, 0x2d477f7e); 
}

/**
 * 
 * @param scaleformHandle
 */
export function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean {
	return _in(0x8217150e, 0x1217ebfd, scaleformHandle, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function golfTrailSetRadius(p0: number, p1: number, p2: number): void {
	return _in(0x2485d34e, 0x50a22e84, _fv(p0), _fv(p1), _fv(p2)); 
}

/**
 * ```
 * Only values used in the scripts are:
 * "heist_mp"
 * "heistmap_mp"
 * "instructional_buttons"
 * "heist_pre"
 * ```
 * @param scaleformName
 */
export function hasScaleformMovieFilenameLoaded(scaleformName: string): boolean {
	return _in(0x0c1c5d75, 0x6fb5f337, _ts(scaleformName), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function golfTrailSetTessellation(p0: number, p1: number): void {
	return _in(0xdbaa5ec8, 0x48ba2d46, p0, p1); 
}

/**
 * ```
 * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 */
export function GrassLodShrinkScriptAreas(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number): void {
	return _in(0x6d955f6a, 0x9e0295b1, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p4), _fv(p5), _fv(p6)); 
}

/**
 * 
 * @param hudComponent
 */
export function hasScaleformScriptHudMovieLoaded(hudComponent: number): boolean {
	return _in(0xdf6e5987, 0xd2b4d140, hudComponent, _r); 
}

/**
 * 
 * @param decal
 */
export function isDecalAlive(decal: number): boolean {
	return _in(0xc694d749, 0x49cafd0c, decal, _r); 
}

/**
 * 
 * @param scaleformHandle
 */
export function hasScaleformMovieLoaded(scaleformHandle: number): boolean {
	return _in(0x85f01b8d, 0x5b90570e, scaleformHandle, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param tvChannel
 * @param p1
 */
export function IsPlaylistUnk(tvChannel: number, p1: any): boolean {
	return _in(0x1f710bff, 0x7dae6261, tvChannel, p1, _r); 
}

/**
 * ```
 * Returns whether screen transition to blur/from blur is running.
 * ```
 */
export function isScreenblurFadeRunning(): boolean {
	return _in(0x7b226c78, 0x5a52a0a9, _r); 
}

/**
 * 
 * @param point
 */
export function isTrackedPointVisible(point: number): boolean {
	return _in(0xc45ccdaa, 0xc9221ca8, point, _r); 
}

/**
 * 
 * @param textureDict
 */
export function hasStreamedTextureDictLoaded(textureDict: string): boolean {
	return _in(0x0145f696, 0xaaaad2e4, _ts(textureDict), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function loadMissionCreatorPhoto(p0: string, p3: boolean): boolean {
	return _in(0x4862437a, 0x486f91b0, _ts(p0), _i, _i, p3, _r); 
}

/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
 * @param method_return
 * @return Returns true if the return value of a scaleform function is ready to be collected
 */
export function isScaleformMovieMethodReturnValueReady(method_return: number): boolean {
	return _in(0x768ff896, 0x1ba904d6, method_return, _r); 
}

/**
 * ```
 * IS_*
 * ```
 * @param videoCliphash
 */
export function IsTvPlaylistItemPlaying(videoCliphash: number): boolean {
	return _in(0x0ad973ca, 0x1e077b60, _ch(videoCliphash), _r); 
}

/**
 * 
 * @param movieMeshSetName
 */
export function loadMovieMeshSet(movieMeshSetName: string): number {
	return _in(0xb6606445, 0x2270e8f1, _ts(movieMeshSetName), _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function moveVehicleDecals(p0: any, p1: any): void {
	return _in(0x84c8d7c2, 0xd30d3280, p0, p1); 
}

/**
 * 
 */
export function overrideInteriorSmokeEnd(): void {
	return _in(0xefb55e7c, 0x25d3b3be); 
}

/**
 * 
 * @param name
 */
export function overrideInteriorSmokeName(name: string): void {
	return _in(0x2a2a5282, 0x4db96700, _ts(name)); 
}

/**
 * 
 * @param level
 */
export function overrideInteriorSmokeLevel(level: number): void {
	return _in(0x1600fd8c, 0xf72ebc12, _fv(level)); 
}

/**
 * ```
 * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
 * ```
 * @param ped
 * @param txd
 * @param txn
 */
export function OverridePedBadgeTexture(ped: number, txd: string, txn: string): boolean {
	return _in(0x95eb5e34, 0xf821babe, ped, _ts(txd), _ts(txn), _r); 
}

/**
 * ```
 * REQUEST_STREAMED_TEXTURE_DICT("MPOnMissMarkers", false);
 * *uParam0.f_809 = add_decal(9120, vParam1, vVar4, vVar7, 2f, 2f, to_float(iVar0) / 255f, to_float(iVar1) / 255f, to_float(iVar2) / 255f, 1f, -1f, 1, 0, 0);
 * PATCH_DECAL_DIFFUSE_MAP(9120, "MPOnMissMarkers", "Capture_The_Flag_Base_Icon");
 * ```
 * @param decalType
 * @param textureDict
 * @param textureName
 */
export function patchDecalDiffuseMap(decalType: number, textureDict: string, textureName: string): void {
	return _in(0x8a35c742, 0x130c6080, decalType, _ts(textureDict), _ts(textureName)); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param binkMovie
 */
export function PlayBinkMovie(binkMovie: number): void {
	return _in(0x70d2cc8a, 0x542a973c, binkMovie); 
}

/**
 * 
 */
export function popTimecycleModifier(): void {
	return _in(0x3c8938d7, 0xd872211e); 
}

/**
 * ```
 * Only one match in the scripts:
 * GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
 * ```
 * @param timecycleModifierName
 */
export function presetInteriorAmbientCache(timecycleModifierName: string): void {
	return _in(0xd7021272, 0xeb0a451e, _ts(timecycleModifierName)); 
}

/**
 * 
 */
export function pushTimecycleModifier(): void {
	return _in(0x58f73529, 0x0861e6b4); 
}

/**
 * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
 */
export function RegisterNoirScreenEffectThisFrame(): void {
	return _in(0xa44ff770, 0xdfbc5dae); 
}

/**
 * 
 * @param p0
 */
export function queryMovieMeshSetState(p0: any): any {
	return _in(0x9b6e70c5, 0xceef4eeb, p0, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param binkMovie
 */
export function ReleaseBinkMovie(binkMovie: number): void {
	return _in(0x04d950ee, 0xfa4eed8c, binkMovie); 
}

/**
 * 
 * @param movieMeshSet
 */
export function releaseMovieMeshSet(movieMeshSet: number): void {
	return _in(0xeb119aa0, 0x14e89183, movieMeshSet); 
}

/**
 * 
 * @param decal
 */
export function removeDecal(decal: number): void {
	return _in(0xed3f3464, 0x29ccd659, decal); 
}

/**
 * 
 * @param obj
 */
export function removeDecalsFromObject(obj: number): void {
	return _in(0xccf71cbd, 0xdf5b6cb9, obj); 
}

/**
 * 
 * @param obj
 * @param x
 * @param y
 * @param z
 */
export function removeDecalsFromObjectFacing(obj: number, x: number, y: number, z: number): void {
	return _in(0xa6f6f70f, 0xdc6d144c, obj, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param vehicle
 */
export function removeDecalsFromVehicle(vehicle: number): void {
	return _in(0xe91f1b65, 0xf2b48d57, vehicle); 
}

/**
 * 
 * @param entity
 */
export function removeParticleFxFromEntity(entity: number): void {
	return _in(0xb8feaeeb, 0xcc127425, entity); 
}

/**
 * 
 * @param X
 * @param Y
 * @param Z
 * @param radius
 */
export function removeParticleFxInRange(X: number, Y: number, Z: number, radius: number): void {
	return _in(0xdd19fa1c, 0x6d657305, _fv(X), _fv(Y), _fv(Z), _fv(radius)); 
}

/**
 * ```
 * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
 * ```
 * @param x
 * @param y
 * @param z
 * @param range
 */
export function removeDecalsInRange(x: number, y: number, z: number, range: number): void {
	return _in(0x5d6b2d48, 0x30a67c62, _fv(x), _fv(y), _fv(z), _fv(range)); 
}

/**
 * 
 * @param p0
 */
export function removeTcmodifierOverride(p0: string): void {
	return _in(0x15e33297, 0xc3e8dc60, _ts(p0)); 
}

/**
 * 
 * @param ptfxHandle
 * @param p1
 */
export function removeParticleFx(ptfxHandle: number, p1: boolean): void {
	return _in(0xc401503d, 0xfe8d53cf, ptfxHandle, p1); 
}

/**
 * 
 * @param hudComponent
 */
export function removeScaleformScriptHudMovie(hudComponent: number): void {
	return _in(0xf44a5456, 0xac3f4f97, hudComponent); 
}

/**
 * 
 * @param scaleformName
 */
export function requestScaleformMovie(scaleformName: string): number {
	return _in(0x11fe353c, 0xf9733e6f, _ts(scaleformName), _r, _ri); 
}

/**
 * Same as [REQUEST_SCALEFORM_MOVIE](#\_0x11FE353CF9733E6F), except it seems to fix stretched scaleforms on ultrawide.
 * @param scaleformName
 */
export function requestScaleformMovieInstance(scaleformName: string): number {
	return _in(0xc514489c, 0xfb8af806, _ts(scaleformName), _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function removeVehicleCrewEmblem(vehicle: number, p1: number): void {
	return _in(0xd2300034, 0x310557e4, vehicle, p1); 
}

/**
 * ```
 * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
 * These seem to be the only scaleforms ever requested by this native:
 * "breaking_news"
 * "desktop_pc"
 * "ECG_MONITOR"
 * "Hacking_PC"
 * "TEETH_PULLING"
 * Note: Unless this hash is out-of-order, this native is next-gen only.
 * ```
 * @param scaleformName
 */
export function RequestScaleformMovieInteractive(scaleformName: string): number {
	return _in(0xbd06c611, 0xbb9048c2, _ts(scaleformName), _r, _ri); 
}

/**
 * Another [REQUEST_SCALEFORM_MOVIE](#\_0x11FE353CF9733E6F) equivalent.
 * @param scaleformName
 */
export function RequestScaleformMovie2(scaleformName: string): number {
	return _in(0x65e7e788, 0x42e74cdb, _ts(scaleformName), _r, _ri); 
}

/**
 * ```
 * This function can requests texture dictonaries from following RPFs:
 * scaleform_generic.rpf
 * scaleform_minigames.rpf
 * scaleform_minimap.rpf
 * scaleform_web.rpf
 * last param isnt a toggle
 * ```
 * @param textureDict
 * @param p1
 */
export function requestStreamedTextureDict(textureDict: string, p1: boolean): void {
	return _in(0xdfa2ef8e, 0x04127dd5, _ts(textureDict), p1); 
}

/**
 * 
 * @param hudComponent
 */
export function requestScaleformScriptHudMovie(hudComponent: number): void {
	return _in(0x9304881d, 0x6f6537ea, hudComponent); 
}

/**
 * 
 */
export function resetPausedRenderphases(): void {
	return _in(0xe1c87094, 0x06f2c41c); 
}

/**
 * Resets the extra timecycle modifier strength normally set with [`SetExtraTimecycleModifierStrength`](#\_0x2C328AF17210F009)
 */
export function ResetExtraTimecycleModifierStrength(): void {
	return _in(0x2bf72ad5, 0xb41aa739); 
}

/**
 * This function resets the alignment set using `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS` to the default
 * values ('I', 'I'; 0, 0, 0, 0). This should be used after having used the aforementioned functions in order to not affect
 * any other scripts attempting to draw.
 */
export function resetScriptGfxAlign(): void {
	return _in(0xe3a3db41, 0x4a373dab); 
}

/**
 * ```
 * Resets the effect of SET_PARTICLE_FX_OVERRIDE
 * ```
 * @param name
 */
export function resetParticleFxOverride(name: string): void {
	return _in(0x89c8553d, 0xd3274aae, _ts(name)); 
}

/**
 * 
 * @param p0
 */
export function ReturnTwo(p0: number): number {
	return _in(0x40afb081, 0xf8add4ee, p0, _r, _ri); 
}

/**
 * 
 * @param unused
 */
export function saveHighQualityPhoto(unused: number): boolean {
	return _in(0x3dec726c, 0x25a11bac, unused, _r); 
}

/**
 * ```
 * Pushes a boolean for the Scaleform function onto the stack.
 * ```
 * @param value
 */
export function scaleformMovieMethodAddParamBool(value: boolean): void {
	return _in(0xc58424ba, 0x936eb458, value); 
}

/**
 * Values:
 * 0 - Dialogue Brief
 * 1 - Help Text Brief
 * 2 - Mission Objective Brief
 * @param value
 */
export function scaleformMovieMethodAddParamLatestBriefString(value: number): void {
	return _in(0xec52c631, 0xa1831c03, value); 
}

/**
 * ```
 * Pushes a float for the Scaleform function onto the stack.
 * ```
 * @param value
 */
export function scaleformMovieMethodAddParamFloat(value: number): void {
	return _in(0xd69736aa, 0xe04db51a, _fv(value)); 
}

/**
 * 
 * @param string
 */
export function scaleformMovieMethodAddParamTextureNameString(string: string): void {
	return _in(0xba714848, 0x4bd90365, _ts(string)); 
}

/**
 * ```
 * Pushes an integer for the Scaleform function onto the stack.
 * ```
 * @param value
 */
export function scaleformMovieMethodAddParamInt(value: number): void {
	return _in(0xc3d0841a, 0x0cc546a6, value); 
}

/**
 * GRAPHICS::\_0x77FE3402004CD1B0(HUD::\_GET_LABEL_TEXT("YACHT_GSY"));
 * GRAPHICS::\_0x77FE3402004CD1B0(PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID()));
 * 
 * Both \_0xBA7148484BD90365 / \_0x77FE3402004CD1B0 works, but \_0x77FE3402004CD1B0 is usually used for "name" (organisation, players..).
 * @param string
 */
export function ScaleformMovieMethodAddParamTextureNameString2(string: string): void {
	return _in(0x77fe3402, 0x004cd1b0, _ts(string)); 
}

/**
 * 
 * @param red
 * @param green
 * @param blue
 */
export function seethroughSetColorNear(red: number, green: number, blue: number): void {
	return _in(0x1086127b, 0x3a63505e, red, green, blue); 
}

/**
 * ```
 * This method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like "INSTRUCTIONAL_BUTTONS").
 * When switching with a controller, the icons update and become the controller's icons.
 * ```
 * @param string
 */
export function scaleformMovieMethodAddParamPlayerNameString(string: string): void {
	return _in(0xe83a3e35, 0x57a56640, _ts(string)); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 */
export function SeethroughGetMaxThickness(): number {
	return _in(0x43dbae39, 0x626ce83f, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function seethroughReset(): void {
	return _in(0x70a64c02, 0x34ef522c); 
}

/**
 * 
 * @param distance
 */
export function SeethroughSetFadeStartDistance(distance: number): void {
	return _in(0xa78de255, 0x77300ba1, _fv(distance)); 
}

/**
 * 
 * @param distance
 */
export function SeethroughSetFadeEndDistance(distance: number): void {
	return _in(0x9d75795b, 0x9dc6ebbf, _fv(distance)); 
}

/**
 * 
 * @param intensity
 */
export function SeethroughSetHiLightIntensity(intensity: number): void {
	return _in(0x19e50eb6, 0xe33e1d28, _fv(intensity)); 
}

/**
 * 
 * @param thickness
 */
export function SeethroughSetMaxThickness(thickness: number): void {
	return _in(0x0c8fac83, 0x902a62df, _fv(thickness)); 
}

/**
 * 
 * @param amount
 */
export function SeethroughSetNoiseAmountMin(amount: number): void {
	return _in(0xff5992e1, 0xc9e65d05, _fv(amount)); 
}

/**
 * 
 * @param index
 * @param heatScale
 */
export function seethroughSetHeatscale(index: number, heatScale: number): void {
	return _in(0xd7d0b001, 0x77485411, index, _fv(heatScale)); 
}

/**
 * 
 * @param noise
 */
export function SeethroughSetHiLightNoise(noise: number): void {
	return _in(0x1636d7fc, 0x127b10d2, _fv(noise)); 
}

/**
 * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param toggle
 */
export function SetArtificialLightsStateAffectsVehicles(toggle: boolean): void {
	return _in(0xe2b187c0, 0x939b3d32, toggle); 
}

/**
 * 
 * @param amount
 */
export function SeethroughSetNoiseAmountMax(amount: number): void {
	return _in(0xfebfbfdf, 0xb66039de, _fv(amount)); 
}

/**
 * 
 * @param toggle
 */
export function setBackfaceculling(toggle: boolean): void {
	return _in(0x23ba6b0c, 0x2ad7b0d3, toggle); 
}

/**
 * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
 * 
 * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
 * 
 * Used in Humane Labs Heist for EMP.
 * @param state
 */
export function setArtificialLightsState(state: boolean): void {
	return _in(0x1268615a, 0xce24d504, state); 
}

/**
 * Creates an integer (usually 1) for a BINK movie to be called with other natives.
 * [List of all BINK movies (alphabetically ordered) as of b2802](https://gist.github.com/ItsJunction/8046f28c29ea8ff2821e9e4f933f595f)
 * @param name
 */
export function SetBinkMovie(name: string): number {
	return _in(0x338d9f60, 0x9fd632db, _ts(name), _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param binkMovie
 * @param p1
 */
export function SetBinkMovieUnk2(binkMovie: number, p1: boolean): void {
	return _in(0xf816f293, 0x3752322d, binkMovie, p1); 
}

/**
 * Seeks a BINK movie to a specified position.
 * @param binkMovie
 * @param progress
 */
export function SetBinkMovieTime(binkMovie: number, progress: number): void {
	return _in(0x0cb6b344, 0x6855b57a, binkMovie, _fv(progress)); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param binkMovie
 * @param shouldSkip
 */
export function SetBinkShouldSkip(binkMovie: number, shouldSkip: boolean): void {
	return _in(0x6805d58c, 0xaa427b72, binkMovie, shouldSkip); 
}

/**
 * ```
 * binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
 * ```
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param binkMovie
 * @param value
 */
export function SetBinkMovieVolume(binkMovie: number, value: number): void {
	return _in(0xaff33b11, 0x78172223, binkMovie, _fv(value)); 
}

/**
 * ```
 * Sets the cylinder height of the checkpoint.
 * Parameters:
 * * nearHeight - The height of the checkpoint when inside of the radius.
 * * farHeight - The height of the checkpoint when outside of the radius.
 * * radius - The radius of the checkpoint.
 * ```
 * @param checkpoint
 * @param nearHeight
 * @param farHeight
 * @param radius
 */
export function setCheckpointCylinderHeight(checkpoint: number, nearHeight: number, farHeight: number, radius: number): void {
	return _in(0x2707aae9, 0xd9297d89, checkpoint, _fv(nearHeight), _fv(farHeight), _fv(radius)); 
}

/**
 * This multiplies the height of the icon inside a checkpoint with the default height of about 2 units above the checkpoint's coordinates.
 * @param checkpoint
 * @param height_multiplier
 */
export function SetCheckpointIconHeight(checkpoint: number, height_multiplier: number): void {
	return _in(0x4b5b4da5, 0xd79f1943, checkpoint, _fv(height_multiplier)); 
}

/**
 * 
 * @param checkpoint
 * @param scale
 */
export function SetCheckpointIconScale(checkpoint: number, scale: number): void {
	return _in(0x44621483, 0xff966526, checkpoint, _fv(scale)); 
}

/**
 * ```
 * Sets the checkpoint color.
 * ```
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setCheckpointRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x7167371e, 0x8ad747f7, checkpoint, red, green, blue, alpha); 
}

/**
 * 
 * @param modifierName
 */
export function setCurrentPlayerTcmodifier(modifierName: string): void {
	return _in(0xbbf327de, 0xd94e4deb, _ts(modifierName)); 
}

/**
 * ```
 * Sets the checkpoint icon color.
 * ```
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setCheckpointRgba2(checkpoint: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0xb9ea4090, 0x7c680580, checkpoint, red, green, blue, alpha); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param enabled
 */
export function setDebugLinesAndSpheresDrawingActive(enabled: boolean): void {
	return _in(0x175b6bfc, 0x15cdd0c5, enabled); 
}

/**
 * 
 */
export function setDisableDecalRenderingThisFrame(): void {
	return _in(0x4b5cfc83, 0x122df602); 
}

/**
 * 
 * @param entity
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setEntityIconColor(entity: number, red: number, green: number, blue: number, alpha: number): void {
	return _in(0x1d5f595c, 0xcae2e238, entity, red, green, blue, alpha); 
}

/**
 * Sets the on-screen drawing origin for draw-functions in world coordinates.
 * 
 * The effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\_0xFF0B610F6BE0D7AF) and is limited to 32 different origins each frame.
 * @param x
 * @param y
 * @param z
 * @param p3
 */
export function setDrawOrigin(x: number, y: number, z: number, p3: any): void {
	return _in(0xaa0008f3, 0xbbb8f416, _fv(x), _fv(y), _fv(z), p3); 
}

/**
 * 
 * @param modifierName
 */
export function SetExtraTimecycleModifier(modifierName: string): void {
	return _in(0x5096fd9c, 0xcb49056d, _ts(modifierName)); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function setEntityIconVisibility(entity: number, toggle: boolean): void {
	return _in(0xe0e8beec, 0xca96ba31, entity, toggle); 
}

/**
 * The same as [`SetTimecycleModifierStrength`](#\_0x82E7FFCD5B2326B3) but for the secondary tiemcycle modifier.
 * @param strength
 */
export function SetExtraTimecycleModifierStrength(strength: number): void {
	return _in(0x2c328af1, 0x7210f009, _fv(strength)); 
}

/**
 * ```
 * Forces vehicle trails on all surfaces.
 * USE_/USING_*
 * ```
 * @param toggle
 */
export function SetForceVehicleTrails(toggle: boolean): void {
	return _in(0x4cc7f0fe, 0xa5283fe0, toggle); 
}

/**
 * ```
 * Purpose of p0 and p1 unknown.
 * ```
 * @param p0
 * @param p1
 * @param fadeIn
 * @param duration
 * @param fadeOut
 */
export function setFlash(p0: number, p1: number, fadeIn: number, duration: number, fadeOut: number): void {
	return _in(0x0ab84296, 0xfed9cfc6, _fv(p0), _fv(p1), _fv(fadeIn), _fv(duration), _fv(fadeOut)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param nearplaneOut
 * @param nearplaneIn
 * @param farplaneOut
 * @param farplaneIn
 */
export function setHidofOverride(p0: boolean, p1: boolean, nearplaneOut: number, nearplaneIn: number, farplaneOut: number, farplaneIn: number): void {
	return _in(0xba3d6590, 0x6822bed5, p0, p1, _fv(nearplaneOut), _fv(nearplaneIn), _fv(farplaneOut), _fv(farplaneIn)); 
}

/**
 * ```
 * Enables Night Vision.
 * Example:
 * C#: Function.Call(Hash.SET_NIGHTVISION, true);
 * C++: GRAPHICS::SET_NIGHTVISION(true);
 * BOOL toggle:
 * true = turns night vision on for your player.
 * false = turns night vision off for your player.
 * ```
 * @param toggle
 */
export function setNightvision(toggle: boolean): void {
	return _in(0x18f621f7, 0xa5b1f85d, toggle); 
}

/**
 * ```
 * Forces footstep tracks on all surfaces.
 * USE_/USING_*
 * ```
 * @param toggle
 */
export function SetForcePedFootstepsTracks(toggle: boolean): void {
	return _in(0xaeedad14, 0x20c65cc0, toggle); 
}

/**
 * 
 * @param value
 */
export function setNoisinessoveride(value: number): void {
	return _in(0xcb6a7c3b, 0xb17a0c67, _fv(value)); 
}

/**
 * 
 * @param modifierName
 */
export function setNextPlayerTcmodifier(modifierName: string): void {
	return _in(0xbf59707b, 0x3e5ed531, _ts(modifierName)); 
}

/**
 * 
 * @param toggle
 */
export function setNoiseoveride(toggle: boolean): void {
	return _in(0xe787bf1c, 0x5cf823c9, toggle); 
}

/**
 * ```
 * only works on some fx's
 * p4 = 0
 * ```
 * @param ptfxHandle
 * @param r
 * @param g
 * @param b
 * @param p4
 */
export function setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number, p4: boolean): void {
	return _in(0x7f8f6587, 0x7f88783b, ptfxHandle, _fv(r), _fv(g), _fv(b), p4); 
}

/**
 * 
 * @param scale
 */
export function setParticleFxBulletImpactScale(scale: number): void {
	return _in(0x27e32866, 0xe9a5c416, _fv(scale)); 
}

/**
 * 
 * @param ptfxHandle
 * @param propertyName
 * @param amount
 * @param noNetwork
 */
export function setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string, amount: number, noNetwork: boolean): void {
	return _in(0x5f0c4b5b, 0x1c393be2, ptfxHandle, _ts(propertyName), _fv(amount), noNetwork); 
}

/**
 * 
 * @param ptfxHandle
 * @param range
 */
export function setParticleFxLoopedFarClipDist(ptfxHandle: number, range: number): void {
	return _in(0xdcb194b8, 0x5ef7b541, ptfxHandle, _fv(range)); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setParticleFxCamInsideNonplayerVehicle(vehicle: number, p1: boolean): void {
	return _in(0xacee6f36, 0x0fc1f6b6, vehicle, p1); 
}

/**
 * 
 * @param p0
 */
export function setParticleFxCamInsideVehicle(p0: boolean): void {
	return _in(0xeec40470, 0x28426510, p0); 
}

/**
 * 
 * @param ptfxHandle
 * @param alpha
 */
export function setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void {
	return _in(0x72684513, 0x2380142e, ptfxHandle, _fv(alpha)); 
}

/**
 * 
 * @param ptfxHandle
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 */
export function setParticleFxLoopedOffsets(ptfxHandle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number): void {
	return _in(0xf7ddebec, 0x43483c43, ptfxHandle, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ)); 
}

/**
 * ```
 * Usage example for C#:
 * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
 * Note: the argument alpha ranges from 0.0f-1.0f !
 * ```
 * @param alpha
 */
export function setParticleFxNonLoopedAlpha(alpha: number): void {
	return _in(0x77168d72, 0x2c58b2fc, _fv(alpha)); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param scale
 */
export function SetParticleFxNonLoopedEmitterScale(p0: number, p1: number, scale: number): void {
	return _in(0x1e2e01c0, 0x0837d26e, _fv(p0), _fv(p1), _fv(scale)); 
}

/**
 * 
 * @param ptfxHandle
 * @param scale
 */
export function setParticleFxLoopedScale(ptfxHandle: number, scale: number): void {
	return _in(0xb44250aa, 0xa456492d, ptfxHandle, _fv(scale)); 
}

/**
 * 
 * @param oldAsset
 * @param newAsset
 */
export function setParticleFxOverride(oldAsset: string, newAsset: string): void {
	return _in(0xea1e2d93, 0xf6f75ed9, _ts(oldAsset), _ts(newAsset)); 
}

/**
 * 
 * @param value
 */
export function setPlayerTcmodifierTransition(value: number): void {
	return _in(0xbdeb86f4, 0xd5809204, _fv(value)); 
}

/**
 * Only works on some fx's, while on others it might SEEM to work "properly", but the colors can be "strange" or even completly different from what you've expected. Reason for this is that those fx's might already have colors "baked into them" which then start to act as a "mixing palette", resulting in a different color than expected. A hypothetical example of this would be if the fx itself is already full (bright) red (RGB: 1.0, 0.0, 0.0) and you then set the color to (bright) green (RGB: 0.0, 1.0, 0.0), that it MIGHT result in Yellow (RGB: 1.0, 1.0, 0.0).
 * 
 * This doc previously stated that the set color is **NOT** networked, however it does actually turns out to be networked. Tested with all fireworks effects and several other FX effects resulted in colored fx effects on all clients when used in combination with [START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD](#\_0xF56B8137DF10135D).
 * This might however not be the case for all types of particle fx's, so it's recommended to test this thoroughly with multiple clients before releasing your script for example.
 * @param r
 * @param g
 * @param b
 */
export function setParticleFxNonLoopedColour(r: number, g: number, b: number): void {
	return _in(0x26143a59, 0xef48b262, _fv(r), _fv(g), _fv(b)); 
}

/**
 * This native is used in some casino scripts to fit the scaleform in the rendertarget.
 * @param scaleformHandle
 * @param toggle
 */
export function SetScaleformFitRendertarget(scaleformHandle: number, toggle: boolean): void {
	return _in(0xe6a9f00d, 0x4240b519, scaleformHandle, toggle); 
}

/**
 * 
 * @param p0
 */
export function setParticleFxShootoutBoat(p0: any): void {
	return _in(0x96ef97da, 0xeb89bef5, p0); 
}

/**
 * 
 * @param scaleform
 * @param toggle
 */
export function setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void {
	return _in(0x6d8eb211, 0x944dce08, scaleform, toggle); 
}

/**
 * 
 * @param scaleformHandle
 */
export function setScaleformMovieAsNoLongerNeeded(): void {
	return _in(0x1d132d61, 0x4dd86811, _ii(scaleformHandle)); 
}

/**
 * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface
 * independent of the player's safe zone configuration.
 * 
 * These values are equivalent to `alignX` and `alignY` in `common:/data/ui/frontend.xml`, which can be used as a baseline
 * for default alignment.
 * 
 * Valid values for `horizontalAlign`, from original documentation:
 * 
 * *   **C (67)** - Center: DRAW_TEXT starts in the middle of the screen, while DRAW_RECT starts on the right; both move with
 * the right side of the screen.
 * *   **L (76)** - Left: Anchors to the left side, DRAW_RECT starts on the left side of the screen, same as DRAW_TEXT when
 * centered.
 * *   **R (82)** - Right: DRAW_TEXT starts on the left side (normal 0,0), while DRAW_RECT starts some short distance away
 * from the right side of the screen, both move with the right side of the screen.
 * 
 * Valid values for `verticalAlign`, from original documentation:
 * 
 * *   **B (66)** - Bottom: DRAW_RECT starts about as far as the middle of the map from the bottom, while DRAW_TEXT is about
 * rather centered.
 * *   **C (67)** - Center: It starts at a certain distance from the bottom, but the distance is fixed, the distance is
 * different from 66.
 * *   **T (84)** - Top: Anchors to the top, DRAW_RECT starts on the top of the screen, DRAW_TEXT just below it.
 * 
 * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The
 * canonical value for this is 'I' (73).
 * 
 * For example, you can use `SET_SCRIPT_GFX_ALIGN(0, 84)` to only scale on the Y axis (to the top), but not change the X
 * axis.
 * 
 * To reset the value, use `RESET_SCRIPT_GFX_ALIGN`.
 * @param horizontalAlign
 * @param verticalAlign
 */
export function setScriptGfxAlign(horizontalAlign: number, verticalAlign: number): void {
	return _in(0xb8a850f2, 0x0a067eb6, horizontalAlign, verticalAlign); 
}

/**
 * Sets the draw offset/calculated size for `SET_SCRIPT_GFX_ALIGN`. If using any alignment other than left/top, the game
 * expects the width/height to be configured using this native in order to get a proper starting position for the draw
 * command.
 * @param x
 * @param y
 * @param w
 * @param h
 */
export function setScriptGfxAlignParams(x: number, y: number, w: number, h: number): void {
	return _in(0xf5a2c681, 0x787e579d, _fv(x), _fv(y), _fv(w), _fv(h)); 
}

/**
 * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
 * @param flag
 */
export function setScriptGfxDrawBehindPausemenu(flag: boolean): void {
	return _in(0xc6372ecd, 0x45d73bcd, flag); 
}

/**
 * Sets the draw order for script draw commands.
 * Examples from decompiled scripts:
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v\_4, v\_5, v\_6, a\_0.\_f172, 0);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
 * @param order
 */
export function setScriptGfxDrawOrder(order: number): void {
	return _in(0x61bb1d9b, 0x3a95d802, order); 
}

/**
 * ```
 * Toggles Heatvision on/off.
 * ```
 * @param toggle
 */
export function setSeethrough(toggle: boolean): void {
	return _in(0x7e089242, 0x59e08ce0, toggle); 
}

/**
 * 
 * @param strength
 */
export function setTimecycleModifierStrength(strength: number): void {
	return _in(0x82e7ffcd, 0x5b2326b3, _fv(strength)); 
}

/**
 * ```
 * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
 * Parameters:
 * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
 * ```
 * @param modifierName
 */
export function setTimecycleModifier(modifierName: string): void {
	return _in(0x2c933abf, 0x17a1df41, _ts(modifierName)); 
}

/**
 * 
 * @param textureDict
 */
export function setStreamedTextureDictAsNoLongerNeeded(textureDict: string): void {
	return _in(0xbe2caccf, 0x5a8aa805, _ts(textureDict)); 
}

/**
 * ```
 * Probably changes tvs from being a 3d audio to being "global" audio
 * ```
 * @param toggle
 */
export function setTvAudioFrontend(toggle: boolean): void {
	return _in(0x113d2c5d, 0xc57e1774, toggle); 
}

/**
 * 
 * @param point
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function setTrackedPointInfo(point: number, x: number, y: number, z: number, radius: number): void {
	return _in(0x164ecbb3, 0xcf750cb0, point, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * This native doesn't work like [`SetWeatherTypeTransition`](#\_0x578C752848ECFA0C).
 * @param modifierName
 * @param transition
 */
export function setTransitionTimecycleModifier(modifierName: string, transition: number): void {
	return _in(0x3bcf5674, 0x85e1971c, _ts(modifierName), _fv(transition)); 
}

/**
 * 
 * @param channel
 */
export function setTvChannel(channel: number): void {
	return _in(0xbaabbb23, 0xeb6e484e, channel); 
}

/**
 * 
 * @param tvChannel
 * @param playlistName
 * @param hour
 */
export function setTvChannelPlaylistAtHour(tvChannel: number, playlistName: string, hour: number): void {
	return _in(0x2201c576, 0xfacaebe8, tvChannel, _ts(playlistName), hour); 
}

/**
 * 
 * @param volume
 */
export function setTvVolume(volume: number): void {
	return _in(0x2982bf73, 0xf66e9ddc, _fv(volume)); 
}

/**
 * Loads specified video sequence into the TV Channel
 * TV_Channel ranges from 0-2
 * VideoSequence can be any of the following:
 * "PL_STD_CNT" CNT Standard Channel
 * "PL_STD_WZL" Weazel Standard Channel
 * "PL_LO_CNT"
 * "PL_LO_WZL"
 * "PL_SP_WORKOUT"
 * "PL_SP_INV" - Jay Norris Assassination Mission Fail
 * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
 * "PL_LO_RS" - Righteous Slaughter Ad
 * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
 * "PL_SP_PLSH1\_INTRO"
 * "PL_LES1\_FAME_OR_SHAME"
 * "PL_STD_WZL_FOS_EP2"
 * "PL_MP_WEAZEL" - Weazel Logo on loop
 * "PL_MP_CCTV" - Generic CCTV loop
 * Restart:
 * 0=video sequence continues as normal
 * 1=sequence restarts from beginning every time that channel is selected
 * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
 * https://pastebin.com/zUzGB6h7
 * @param tvChannel
 * @param playlistName
 * @param restart
 */
export function setTvChannelPlaylist(tvChannel: number, playlistName: string, restart: boolean): void {
	return _in(0xf7b38b83, 0x05f1fe8b, tvChannel, _ts(playlistName), restart); 
}

/**
 * NOTE: the [USE_PARTICLE_FX_ASSET](#\_0x6C38AF3693A69A91) needs to be called before EVERY StartNetworkedParticleFxNonLoopedAtCoord(....) call!
 * 
 * List with lots of particle effects: https://vespura.com/fivem/particle-list/
 * 
 * Note: Not all particles on this list are for non looped and vice versa, neither are all of them suited/meant to have SetParticleFxNonLoopedColour(....) called on them.
 * 
 * ```
 * NativeDB Added Parameter 12: BOOL p11
 * ```
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startNetworkedParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean {
	return _in(0xf56b8137, 0xdf10135d, _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r); 
}

/**
 * ```
 * network fx
 * ```
 * 
 * ```
 * NativeDB Added Parameter 13: Any p12
 * NativeDB Added Parameter 14: Any p13
 * NativeDB Added Parameter 15: Any p14
 * NativeDB Added Parameter 16: Any p15
 * ```
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startNetworkedParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
	return _in(0x6f60e89a, 0x7b64ee1d, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * 
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startNetworkedParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
	return _in(0xc95eb1db, 0x6e92113d, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * ```
 * network fx
 * ```
 * 
 * ```
 * NativeDB Added Parameter 14: Any p13
 * NativeDB Added Parameter 15: Any p14
 * NativeDB Added Parameter 16: Any p15
 * NativeDB Added Parameter 17: Any p16
 * ```
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startNetworkedParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
	return _in(0xdde23f30, 0xcc5a0f03, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * 
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
	return _in(0xc6eb449e, 0x33977f0b, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function StartNetworkedParticleFxNonLoopedOnEntityBone(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
	return _in(0x02b1f2a7, 0x2e0f5325, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * 
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
	return _in(0x1ae42c16, 0x60fd6517, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * ```
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
 * Axis - Invert Axis Flags
 * list: pastebin.com/N9unUFWY
 * ```
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
	return _in(0x0e7e7296, 0x1ba18619, _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * 
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startNetworkedParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
	return _in(0xa41b6a43, 0x642ac2cf, _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * ```
 * GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
 * p11 seems to be always 0
 * ```
 * @param effectName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
export function startParticleFxLoopedAtCoord(effectName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): number {
	return _in(0xe184f4f0, 0xdc5910e7, _ts(effectName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, p11, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function startPetrolTrailDecals(p0: number): void {
	return _in(0x99ac7f0d, 0x8b9c893d, _fv(p0)); 
}

/**
 * 
 * @param effectName
 * @param ped
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxLoopedOnPedBone(effectName: string, ped: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
	return _in(0xf28da9f3, 0x8cd1787c, _ts(effectName), ped, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * ```
 * p1 is always 0 in the native scripts
 * ```
 * @param ptfxHandle
 * @param p1
 */
export function stopParticleFxLooped(ptfxHandle: number, p1: boolean): void {
	return _in(0x8f759988, 0x77616996, ptfxHandle, p1); 
}

/**
 * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
 * This requires these two natives to be called as well to configure the grid: [`0x1c4fc5752bcd8e48`](https://runtime.fivem.net/doc/reference.html#\_0x1C4FC5752BCD8E48) and [`0x5ce62918f8d703c7`](https://runtime.fivem.net/doc/reference.html#\_0x5CE62918F8D703C7).
 * @param toggle
 */
export function terraingridActivate(toggle: boolean): void {
	return _in(0xa356990e, 0x161c9e65, toggle); 
}

/**
 * ```
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
 * Axis - Invert Axis Flags
 * list: pastebin.com/N9unUFWY
 * -------------------------------------------------------------------
 * C#
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
 * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
 * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
 * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
 * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
 * bool xaxis, yaxis, zaxis = To bool the axis values.
 * example:
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
 * ```
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
	return _in(0x25129531, 0xf77b9ed3, _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * ```
 * Starts a particle effect on an entity for example your player.
 * List: pastebin.com/N9unUFWY
 * Example:
 * C#:
 * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
 * Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
 * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
 * ```
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
	return _in(0x0d53a3b8, 0xda0809d2, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * This native is used along with these two natives: [`0xa356990e161c9e65`](https://runtime.fivem.net/doc/reference.html#\_0xA356990E161C9E65) and [`0x1c4fc5752bcd8e48`](https://runtime.fivem.net/doc/reference.html#\_0x1C4FC5752BCD8E48).
 * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * 
 * Old description:
 * Only called in golf and golf_mp\
 * parameters used are\
 * GRAPHICS::\_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);
 * @param lowR
 * @param lowG
 * @param lowB
 * @param lowAlpha
 * @param R
 * @param G
 * @param B
 * @param Alpha
 * @param highR
 * @param highG
 * @param highB
 * @param highAlpha
 */
export function terraingridSetColours(lowR: number, lowG: number, lowB: number, lowAlpha: number, R: number, G: number, B: number, Alpha: number, highR: number, highG: number, highB: number, highAlpha: number): void {
	return _in(0x5ce62918, 0xf8d703c7, lowR, lowG, lowB, lowAlpha, R, G, B, Alpha, highR, highG, highB, highAlpha); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param binkMovie
 */
export function StopBinkMovie(binkMovie: number): void {
	return _in(0x63606a61, 0xde68898a, binkMovie); 
}

/**
 * This native is used along with these two natives: [`0xa356990e161c9e65`](https://runtime.fivem.net/doc/reference.html#\_0xA356990E161C9E65) and [`0x5ce62918f8d703c7`](https://runtime.fivem.net/doc/reference.html#\_0x5CE62918F8D703C7).
 * 
 * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
 * 
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param rotation
 * @param p5
 * @param width
 * @param height
 * @param p8
 * @param scale
 * @param glowIntensity
 * @param normalHeight
 * @param heightDiff
 */
export function terraingridSetParams(x: number, y: number, z: number, p3: number, rotation: number, p5: number, width: number, height: number, p8: number, scale: number, glowIntensity: number, normalHeight: number, heightDiff: number): void {
	return _in(0x1c4fc575, 0x2bcd8e48, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(rotation), _fv(p5), _fv(width), _fv(height), _fv(p8), _fv(scale), _fv(glowIntensity), _fv(normalHeight), _fv(heightDiff)); 
}

/**
 * 
 * @param toggle
 */
export function togglePausedRenderphases(toggle: boolean): void {
	return _in(0xdfc252d8, 0xa3e15ab7, toggle); 
}

/**
 * 
 */
export function ui3dsceneIsAvailable(): boolean {
	return _in(0xd3a10fc7, 0xfd8d98cd, _r); 
}

/**
 * 
 * @param transitionTime
 */
export function triggerScreenblurFadeIn(transitionTime: number): boolean {
	return _in(0xa328a24a, 0xaa6b7fdc, _fv(transitionTime), _r); 
}

/**
 * 
 * @param transitionTime
 */
export function triggerScreenblurFadeOut(transitionTime: number): boolean {
	return _in(0xefacc8ae, 0xf94430d5, _fv(transitionTime), _r); 
}

/**
 * ```
 * GRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(9123);
 * GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED("MPMissMarkers256");
 * ```
 * @param decalType
 */
export function unpatchDecalDiffuseMap(decalType: number): void {
	return _in(0xb7ed70c4, 0x9521a61d, decalType); 
}

/**
 * 
 * @param entity
 */
export function updateLightsOnEntity(entity: number): void {
	return _in(0xdeadc0de, 0xdeadc0de, entity); 
}

/**
 * ```
 * All presets can be found in common\data\ui\uiscenes.meta
 * ```
 * @param presetName
 */
export function ui3dscenePushPreset(presetName: string): boolean {
	return _in(0xf1cea8a4, 0x198d8e9a, _ts(presetName), _r); 
}

/**
 * ```
 * From the b678d decompiled scripts:
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");
 * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");
 * ```
 * @param name
 */
export function useParticleFxAsset(name: string): void {
	return _in(0x6c38af36, 0x93a69a91, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function washDecalsInRange(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x9c30613d, 0x50a6adef, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function washDecalsFromVehicle(vehicle: number, p1: number): void {
	return _in(0x5b712761, 0x429dbc14, vehicle, _fv(p1)); 
}

/**
 * ```
 * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
 * ```
 * @param interior
 * @param entitySetName
 */
export function activateInteriorEntitySet(interior: number, entitySetName: string): void {
	return _in(0x55e86af2, 0x712b36a1, interior, _ts(entitySetName)); 
}

/**
 * ```
 * Does something similar to INTERIOR::DISABLE_INTERIOR
 * ```
 * @param interiorID
 * @param toggle
 */
export function capInterior(interiorID: number, toggle: boolean): void {
	return _in(0xd9175f94, 0x1610db54, interiorID, toggle); 
}

/**
 * 
 * @param pickup
 * @param roomName
 */
export function addPickupToInteriorRoomByName(pickup: number, roomName: string): void {
	return _in(0x3f6167f3, 0x51168730, pickup, _ts(roomName)); 
}

/**
 * Immediately removes entity from an interior. Like sets entity to `limbo` room.
 * 
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param entity
 */
export function ClearInteriorForEntity(entity: number): void {
	return _in(0x85d5422b, 0x2039a70d, entity); 
}

/**
 * 
 */
export function clearRoomForGameViewport(): void {
	return _in(0x23b59d89, 0x12f94246); 
}

/**
 * 
 * @param interior
 * @param entitySetName
 */
export function deactivateInteriorEntitySet(interior: number, entitySetName: string): void {
	return _in(0x420bd372, 0x89eee162, interior, _ts(entitySetName)); 
}

/**
 * 
 * @param entity
 */
export function clearRoomForEntity(entity: number): void {
	return _in(0xb365fc0c, 0x4e27ffa7, entity); 
}

/**
 * ```
 * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
 * ```
 * @param mapObjectHash
 */
export function enableExteriorCullModelThisFrame(mapObjectHash: number): void {
	return _in(0xa97f257d, 0x0151a6ab, _ch(mapObjectHash)); 
}

/**
 * ```
 * Example:
 * This removes the interior from the strip club and when trying to walk inside the player just falls:
 * INTERIOR::DISABLE_INTERIOR(118018, true);
 * ```
 * @param interiorID
 * @param toggle
 */
export function disableInterior(interiorID: number, toggle: boolean): void {
	return _in(0x61709414, 0x19d7d8ec, interiorID, toggle); 
}

/**
 * ```
 * Forces the particular room in an interior to load incase not teleporting into the portal.
 * ```
 * @param entity
 * @param interior
 * @param roomHashKey
 */
export function forceRoomForEntity(entity: number, interior: number, roomHashKey: number): void {
	return _in(0x52923c47, 0x10dd9907, entity, interior, _ch(roomHashKey)); 
}

/**
 * ```
 * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
 * Example for VB.NET
 * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
 * ```
 * @param x
 * @param y
 * @param z
 */
export function getInteriorAtCoords(x: number, y: number, z: number): number {
	return _in(0xb0f7f866, 0x3821d9c3, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * ```
 * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
 * Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
 * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
 * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
 * ```
 * @param x
 * @param y
 * @param z
 * @param interiorType
 */
export function getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string): number {
	return _in(0x05b7a89b, 0xd78797fc, _fv(x), _fv(y), _fv(z), _ts(interiorType), _r, _ri); 
}

/**
 * 
 * @param mapObjectHash
 */
export function EnableScriptCullModelThisFrame(mapObjectHash: number): void {
	return _in(0x50c37553, 0x7449f369, _ch(mapObjectHash)); 
}

/**
 * ```
 * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
 * ```
 * @param x
 * @param y
 * @param z
 * @param typeHash
 */
export function getInteriorAtCoordsWithTypehash(x: number, y: number, z: number, typeHash: number): number {
	return _in(0xf0f77adb, 0x9f67e79d, _fv(x), _fv(y), _fv(z), _ch(typeHash), _r, _ri); 
}

/**
 * 
 * @param interiorID
 * @param roomHashKey
 */
export function forceRoomForGameViewport(interiorID: number, roomHashKey: number): void {
	return _in(0x920d853f, 0x3e17f1da, interiorID, _ch(roomHashKey)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function getInteriorFromCollision(x: number, y: number, z: number): number {
	return _in(0xec4cf9fc, 0xb29a4424, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 */
export function getInteriorFromPrimaryView(): number {
	return _in(0xe7d267ec, 0x6ca966c3, _r, _ri); 
}

/**
 * ```
 * Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.
 * ```
 * @param interior
 */
export function getInteriorGroupId(interior: number): number {
	return _in(0xe4a84abf, 0x135ef91a, interior, _r, _ri); 
}

/**
 * ```
 * Returns the handle of the interior that the entity is in. Returns 0 if outside.
 * ```
 * @param entity
 */
export function getInteriorFromEntity(entity: number): number {
	return _in(0x2107ba50, 0x4071a6bb, entity, _r, _ri); 
}

/**
 * ```
 * GET_INTERIOR_*
 * 
 * NativeDB Introduced: v1493
 * ```
 * @param interior
 */
export function GetInteriorHeading(interior: number): number {
	return _in(0xf49b5863, 0x1d9e22d9, interior, _r, _rf); 
}

/**
 * ```
 * Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
 * ```
 * @param entity
 */
export function getKeyForEntityInRoom(entity: number): number {
	return _in(0x399685db, 0x942336bc, entity, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param interior
 * @param position
 * @param nameHash
 */
export function getInteriorLocationAndNamehash(interior: number): void {
	return _in(0x252bdc06, 0xb73fa6ea, interior, _v(position), _i); 
}

/**
 * ```
 * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
 * ```
 * @param entity
 */
export function getRoomKeyFromEntity(entity: number): number {
	return _in(0x47c2a06d, 0x4f5f424b, entity, _r); 
}

/**
 * 
 * @param interior
 * @param x
 * @param y
 * @param z
 */
export function getOffsetFromInteriorInWorldCoords(interior: number, x: number, y: number, z: number): Vector3 {
	return _in(0x9e3b3e6d, 0x66f6e22f, interior, _fv(x), _fv(y), _fv(z), _r, _rv); 
}

/**
 * 
 * @param interiorID
 */
export function isInteriorCapped(interiorID: number): boolean {
	return _in(0x92bac8ac, 0xf88cec26, interiorID, _r); 
}

/**
 * 
 * @param interior
 * @param entitySetName
 */
export function isInteriorEntitySetActive(interior: number, entitySetName: string): boolean {
	return _in(0x35f7dd45, 0xe8c0a16d, interior, _ts(entitySetName), _r); 
}

/**
 * 
 */
export function getRoomKeyForGameViewport(): number {
	return _in(0xa6575914, 0xd2a0b450, _r); 
}

/**
 * 
 */
export function isInteriorScene(): boolean {
	return _in(0xbc72b5d7, 0xa1cbd54d, _r); 
}

/**
 * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
 * @param x
 * @param y
 * @param z
 */
export function isCollisionMarkedOutside(x: number, y: number, z: number): boolean {
	return _in(0xeea5ac2e, 0xda7c33e8, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * 
 * @param interior
 */
export function isInteriorDisabled(interior: number): boolean {
	return _in(0xbc5115a5, 0xa939dd15, interior, _r); 
}

/**
 * 
 * @param interior
 */
export function isValidInterior(interior: number): boolean {
	return _in(0x26b0e73d, 0x7eaaf4d3, interior, _r); 
}

/**
 * 
 * @param interiorID
 */
export function isInteriorReady(interiorID: number): boolean {
	return _in(0x6726bdcc, 0xc1932f0e, interiorID, _r); 
}

/**
 * 
 * @param interiorID
 */
export function refreshInterior(interiorID: number): void {
	return _in(0x41f37c34, 0x27c75ae0, interiorID); 
}

/**
 * ```
 * Does something similar to INTERIOR::DISABLE_INTERIOR.
 * You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
 * ```
 * @param interior
 */
export function unpinInterior(interior: number): void {
	return _in(0x261cce7e, 0xed010641, interior); 
}

/**
 * 
 * @param interior
 */
export function pinInteriorInMemory(interior: number): void {
	return _in(0x2ca429c0, 0x29ccf247, interior); 
}

/**
 * 
 * @param interior
 * @param entitySetName
 * @param color
 */
export function SetInteriorEntitySetColor(interior: number, entitySetName: string, color: number): void {
	return _in(0xc1f1920b, 0xaf281317, interior, _ts(entitySetName), color); 
}

/**
 * Adds a rectangular blip for the specified coordinates/area.
 * 
 * It is recommended to use [SET_BLIP_ROTATION](#\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.
 * 
 * By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.
 * 
 * Example image:
 * ![minimap](https://w.wew.wtf/pdcjig.png)
 * ![big map](https://w.wew.wtf/zgcjcm.png)
 * 
 * (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
 * @param x
 * @param y
 * @param z
 * @param width
 * @param height
 * @return A handle to the blip.
 */
export function AddBlipForArea(x: number, y: number, z: number, width: number, height: number): number {
	return _in(0xce5d0e5e, 0x315db238, _fv(x), _fv(y), _fv(z), _fv(width), _fv(height), _r); 
}

/**
 * Does stuff like this:\
 * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617\
 * Example:\
 * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");\
 * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);\
 * BOOL p1 is a toggle to define the game in pause.\
 * int p2 is unknown but -1 always works, not sure why though.\
 * \[30/03/2017] ins1de :\
 * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.\
 * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);\
 * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.
 * 
 * Below is a list of all known Frontend Menu Hashes.
 * 
 * *   FE_MENU_VERSION_SP_PAUSE
 * *   FE_MENU_VERSION_MP_PAUSE
 * *   FE_MENU_VERSION_CREATOR_PAUSE
 * *   FE_MENU_VERSION_CUTSCENE_PAUSE
 * *   FE_MENU_VERSION_SAVEGAME
 * *   FE_MENU_VERSION_PRE_LOBBY
 * *   FE_MENU_VERSION_LOBBY
 * *   FE_MENU_VERSION_MP_CHARACTER_SELECT
 * *   FE_MENU_VERSION_MP_CHARACTER_CREATION
 * *   FE_MENU_VERSION_EMPTY
 * *   FE_MENU_VERSION_EMPTY_NO_BACKGROUND
 * *   FE_MENU_VERSION_TEXT_SELECTION
 * *   FE_MENU_VERSION_CORONA
 * *   FE_MENU_VERSION_CORONA_LOBBY
 * *   FE_MENU_VERSION_CORONA_JOINED_PLAYERS
 * *   FE_MENU_VERSION_CORONA_INVITE_PLAYERS
 * *   FE_MENU_VERSION_CORONA_INVITE_FRIENDS
 * *   FE_MENU_VERSION_CORONA_INVITE_CREWS
 * *   FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
 * *   FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
 * *   FE_MENU_VERSION_CORONA_RACE
 * *   FE_MENU_VERSION_CORONA_BETTING
 * *   FE_MENU_VERSION_JOINING_SCREEN
 * *   FE_MENU_VERSION_LANDING_MENU
 * *   FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
 * @param menuhash
 * @param togglePause
 * @param component
 */
export function activateFrontendMenu(menuhash: number, togglePause: boolean, component: number): void {
	return _in(0xef01d36b, 0x9c9d0c7b, _ch(menuhash), togglePause, component); 
}

/**
 * Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\_0xC6F43D0E) to make it blue (friend).\
 * Can be used for objects, vehicles and peds.
 * 
 * Example of enemy:
 * ![enemy](https://i.imgur.com/fl78svv.png)
 * Example of friend:
 * ![friend](https://i.imgur.com/Q16ho5d.png)
 * @param entity
 * @return A blip handle.
 */
export function addBlipForEntity(entity: number): number {
	return _in(0x5cde92c7, 0x02a8fce7, entity, _r); 
}

/**
 * Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.
 * @param x
 * @param y
 * @param z
 * @return A blip handle.
 */
export function addBlipForCoord(x: number, y: number, z: number): number {
	return _in(0x5a039bb0, 0xbca604b6, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * 
 * @param pickup
 */
export function addBlipForPickup(pickup: number): number {
	return _in(0xbe339365, 0xc863bd36, pickup, _r); 
}

/**
 * Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\_0xC6F43D0E))
 * 
 * Example image:
 * ![example](https://i.imgur.com/9hQl3DB.png)
 * @param posX
 * @param posY
 * @param posZ
 * @param radius
 * @return The blip handle that can be manipulated with every `SetBlip` natives
 */
export function addBlipForRadius(posX: number, posY: number, posZ: number, radius: number): number {
	return _in(0x46818d79, 0xb1f7499a, _fv(posX), _fv(posY), _fv(posZ), _fv(radius), _r); 
}

/**
 * 
 * @param p0
 */
export function addNextMessageToPreviousBriefs(p0: boolean): void {
	return _in(0x60296af4, 0xba14abc5, p0); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function addPointToGpsCustomRoute(x: number, y: number, z: number): void {
	return _in(0x311438a0, 0x71dd9b1a, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function addPointToGpsMultiRoute(x: number, y: number, z: number): void {
	return _in(0xa905192a, 0x6781c41b, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param value
 * @param commaSeparated
 */
export function addTextComponentFormattedInteger(value: number, commaSeparated: boolean): void {
	return _in(0x0e4c749f, 0xf9de9cc4, value, commaSeparated); 
}

/**
 * Adds a float to a text component placeholder, replacing `~1~` in the current text command's text label.
 * 
 * ![Example output](https://i.imgur.com/jvuQ0II.png)
 * @param value
 * @param decimalPlaces
 */
export function addTextComponentFloat(value: number, decimalPlaces: number): void {
	return _in(0xe7dcb5b8, 0x74bcd96e, _fv(value), decimalPlaces); 
}

/**
 * 
 * @param value
 */
export function addTextComponentInteger(value: number): void {
	return _in(0x03b504cf, 0x259931bc, value); 
}

/**
 * Adds an arbitrary string as a text component placeholder, replacing `~a~` in the current text command's text label.
 * 
 * See the documentation on text formatting for more information.
 * @param text
 */
export function addTextComponentSubstringPlayerName(text: string): void {
	return _in(0x6c188be1, 0x34e074aa, _ts(text)); 
}

/**
 * 
 * @param blip
 */
export function addTextComponentSubstringBlipName(blip: number): void {
	return _in(0x80ead8e2, 0xe1d5d52e, blip); 
}

/**
 * ```
 * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
 * ```
 * @param gxtEntryHash
 */
export function addTextComponentSubstringTextLabelHashKey(gxtEntryHash: number): void {
	return _in(0x17299b63, 0xc7683a2b, _ch(gxtEntryHash)); 
}

/**
 * 
 * @param string
 */
export function addTextComponentSubstringKeyboardDisplay(string: string): void {
	return _in(0x5f685208, 0x88e69014, _ts(string)); 
}

/**
 * ```
 * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
 * ```
 * @param timestamp
 * @param flags
 */
export function addTextComponentSubstringTime(timestamp: number, flags: number): void {
	return _in(0x1115f16b, 0x8ab9e8bf, timestamp, flags); 
}

/**
 * Allows opening the pause menu this frame, when the player is dead.
 */
export function AllowPauseMenuWhenDeadThisFrame(): void {
	return _in(0xcc3fdded, 0x67bcfc63); 
}

/**
 * ```
 * p1 was always -1
 * ```
 * @param p0
 * @param p1
 */
export function addTextComponentSubstringPhoneNumber(p0: string, p1: number): void {
	return _in(0x761b7745, 0x4205a61d, _ts(p0), p1); 
}

/**
 * 
 * @param labelName
 */
export function addTextComponentSubstringTextLabel(labelName: string): void {
	return _in(0xc63cd5d2, 0x920acbe7, _ts(labelName)); 
}

/**
 * ```
 * This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
 * ```
 * @param website
 */
export function addTextComponentSubstringWebsite(website: string): void {
	return _in(0x94cf4ac0, 0x34c9c986, _ts(website)); 
}

/**
 * 
 * @param toggle
 */
export function allowSonarBlips(toggle: boolean): void {
	return _in(0x60734cc2, 0x07c9833c, toggle); 
}

/**
 * ```
 * Initializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here
 * BEGIN_TEXT_COMMAND_PRINT
 * e.g
 * void StartLoadingMessage(char *text, int spinnerType = 3)
 * {
 * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SHOW_LOADING_PROMPT(spinnerType);
 * }
 *  -- [[OR]] 
 * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
 * {
 * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SHOW_LOADING_PROMPT(spinnerType);
 * WAIT(timeMs);
 * _REMOVE_LOADING_PROMPT();
 * }
 * These are some localized strings used in the loading spinner.
 * "PM_WAIT"                   = Please Wait
 * "CELEB_WPLYRS"              = Waiting For Players.
 * "CELL_SPINNER2"             = Scanning storage.
 * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
 * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
 * "FM_COR_AUTOD"                        = Just spinner no text
 * "FM_IHELP_WAT2"                        = Waiting for other players
 * "FM_JIP_WAITO"                            = Game options are being set
 * "FMMC_DOWNLOAD"                    = Downloading
 * "FMMC_PLYLOAD"                         = Loading
 * "FMMC_STARTTRAN"                    = Launching session
 * "HUD_QUITTING"                           =  Quiting session
 * "KILL_STRIP_IDM"                         = Waiting for to accept
 * "MP_SPINLOADING"                      = Loading
 * ```
 * @param string
 */
export function beginTextCommandBusyspinnerOn(string: string): void {
	return _in(0xaba17d7c, 0xe615adbf, _ts(string)); 
}

/**
 * ```
 * clears a print text command with this text
 * ```
 * @param text
 */
export function beginTextCommandClearPrint(text: string): void {
	return _in(0xe124fa80, 0xa759019c, _ts(text)); 
}

/**
 * ```
 * Used to be known as _SET_TEXT_COMPONENT_FORMAT
 * ```
 * @param inputType
 */
export function beginTextCommandDisplayHelp(inputType: string): void {
	return _in(0x8509b634, 0xfbe7da11, _ts(inputType)); 
}

/**
 * ```
 * The following were found in the decompiled script files:
 * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
 * ESDOLLA
 * ESMINDOLLA - cash (negative)
 * Used to be known as _SET_TEXT_ENTRY
 * ```
 * @param text
 */
export function beginTextCommandDisplayText(text: string): void {
	return _in(0x25fbb336, 0xdf1804cb, _ts(text)); 
}

/**
 * ```
 * nothin doin.
 * BOOL Message(char* text)
 * {
 * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
 * }
 * ```
 * @param text
 */
export function beginTextCommandIsMessageDisplayed(text: string): void {
	return _in(0x853648fd, 0x1063a213, _ts(text)); 
}

/**
 * ```
 * BEGIN_TEXT_COMMAND_*
 * Example:
 * _BEGIN_TEXT_COMMAND_GET_WIDTH("NUMBER");
 * ADD_TEXT_COMPONENT_FLOAT(69.420f, 2);
 * float width = _END_TEXT_COMMAND_GET_WIDTH(1);
 * ```
 * @param text
 */
export function BeginTextCommandGetWidth(text: string): void {
	return _in(0x54ce8ac9, 0x8e120cab, _ts(text)); 
}

/**
 * 
 * @param labelName
 */
export function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName: string): void {
	return _in(0x0a24da3a, 0x41b718f5, _ts(labelName)); 
}

/**
 * ```
 * get's line count
 * int GetLineCount(char *text, float x, float y)
 * {
 * _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);
 * }
 * ```
 * @param entry
 */
export function BeginTextCommandLineCount(entry: string): void {
	return _in(0x521fb041, 0xd93dd0e4, _ts(entry)); 
}

/**
 * 
 * @param p0
 */
export function BeginTextCommandObjective(p0: string): void {
	return _in(0x23d69e04, 0x65570028, _ts(p0)); 
}

/**
 * 
 * @param gxtEntry
 */
export function beginTextCommandOverrideButtonText(gxtEntry: string): void {
	return _in(0x8f9ee568, 0x7f8eeccd, _ts(gxtEntry)); 
}

/**
 * ```
 * Used to be known as _SET_TEXT_ENTRY_2
 * void ShowSubtitle(char *text)
 * {
 * BEGIN_TEXT_COMMAND_PRINT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_PRINT(2000, 1);
 * }
 * ```
 * @param GxtEntry
 */
export function beginTextCommandPrint(GxtEntry: string): void {
	return _in(0xb87a37ee, 0xb7faa67d, _ts(GxtEntry)); 
}

/**
 * Starts a text command to change the name of a blip displayed in the pause menu.
 * 
 * This should be paired with [`END_TEXT_COMMAND_SET_BLIP_NAME`](#\_0xBC38B49BCB83BC9B), once adding all required text components.
 * @param textLabel
 */
export function beginTextCommandSetBlipName(textLabel: string): void {
	return _in(0xf9113a30, 0xde5c6670, _ts(textLabel)); 
}

/**
 * 
 */
export function busyspinnerIsDisplaying(): boolean {
	return _in(0xb2a592b0, 0x4648a9cb, _r); 
}

/**
 * Declares the entry type of a notification, for example "STRING".
 * int ShowNotification(char \*text)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return \_DRAW_NOTIFICATION(1, 1);
 * }
 * @param text
 */
export function beginTextCommandThefeedPost(text: string): void {
	return _in(0x202709f4, 0xc58a0424, _ts(text)); 
}

/**
 * ```
 * Displays cash change notifications on HUD.
 * ```
 * @param cash
 * @param bank
 */
export function changeFakeMpCash(cash: number, bank: number): void {
	return _in(0x0772df77, 0x852c2e30, cash, bank); 
}

/**
 * 
 */
export function busyspinnerIsOn(): boolean {
	return _in(0xd422fcc5, 0xf239a915, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function clearAdditionalText(p0: number, p1: boolean): void {
	return _in(0x2a179df1, 0x7ccf04cd, p0, p1); 
}

/**
 * ```
 * Removes the loading prompt at the bottom right of the screen.
 * ```
 */
export function busyspinnerOff(): void {
	return _in(0x10d37332, 0x3e5b9c0d); 
}

/**
 * Clears all active blip routes that have been set with [`SetBlipRoute`](#\_0x3E160C90).
 */
export function ClearAllBlipRoutes(): void {
	return _in(0xd12882d3, 0xff82bf11); 
}

/**
 * 
 */
export function clearAllHelpMessages(): void {
	return _in(0x6178f68a, 0x87a4d3a0); 
}

/**
 * 
 */
export function clearBrief(): void {
	return _in(0x9d292f73, 0xadbd9313); 
}

/**
 * 
 * @param hudIndex
 * @param p1
 */
export function clearFloatingHelp(hudIndex: number, p1: boolean): void {
	return _in(0x50085246, 0xabd3fefa, hudIndex, p1); 
}

/**
 * 
 */
export function clearDynamicPauseMenuErrorMessage(): void {
	return _in(0x7792424a, 0xa0eac32e); 
}

/**
 * 
 */
export function clearGpsCustomRoute(): void {
	return _in(0xe6de0561, 0xd9232a64); 
}

/**
 * Does the same as [`SET_GPS_MULTI_ROUTE_RENDER(false)`](https://runtime.fivem.net/doc/reference.html#\_0x3DDA37128DD1ACA8)
 */
export function clearGpsMultiRoute(): void {
	return _in(0x67eedea1, 0xb9bafd94); 
}

/**
 * ```
 * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
 * Doesn't seem like the flags are actually read by the game at all.
 * ```
 */
export function clearGpsFlags(): void {
	return _in(0x21986729, 0xd6a3a830); 
}

/**
 * 
 */
export function clearGpsPlayerWaypoint(): void {
	return _in(0xff4fb7c8, 0xcdfa3da7); 
}

/**
 * 
 * @param toggle
 */
export function clearHelp(toggle: boolean): void {
	return _in(0x8dfced7a, 0x656f8802, toggle); 
}

/**
 * ```
 * Does the same as SET_RACE_TRACK_RENDER(false);
 * ```
 */
export function clearGpsRaceTrack(): void {
	return _in(0x7aa5b4ce, 0x533c858b); 
}

/**
 * 
 */
export function clearPedInPauseMenu(): void {
	return _in(0x5e62be5d, 0xc58e9e06); 
}

/**
 * 
 */
export function ClearRaceGalleryBlips(): void {
	return _in(0x2708fc08, 0x3123f9ff); 
}

/**
 * ```
 * p0: found arguments in the b617d scripts: pastebin.com/X5akCN7z
 * ```
 * @param p0
 */
export function clearThisPrint(p0: string): void {
	return _in(0xcf708001, 0xe1e536dd, _ts(p0)); 
}

/**
 * 
 */
export function clearPrints(): void {
	return _in(0xcc33fa79, 0x1322b9d9); 
}

/**
 * 
 */
export function CloseMultiplayerChat(): void {
	return _in(0x1ac8f4ad, 0x40e22127); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 */
export function clearReminderMessage(): void {
	return _in(0xb57d8dd6, 0x45cfa2cf); 
}

/**
 * As per the name, this native creates a "fake" gamer tag that is attached to a specific ped.
 * Unlike "real" gamer tags, you cannot set the crew colour of these gamer tags.
 * 
 * To create gamer tags for actual players and for more gamer tag information, see [CREATE_MP_GAMER_TAG_WITH_CREW_COLOR](#\_0x6DD05E9D83EFA4C9).
 * @param ped
 * @param username
 * @param crewIsPrivate
 * @param crewIsRockstar
 * @param crewName
 * @param crewRank
 * @return The ID of the new gamer tag.
 */
export function createFakeMpGamerTag(ped: number, username: string, crewIsPrivate: boolean, crewIsRockstar: boolean, crewName: string, crewRank: number): number {
	return _in(0xbfefe332, 0x1a3f5015, ped, _ts(username), crewIsPrivate, crewIsRockstar, _ts(crewName), crewRank, _r, _ri); 
}

/**
 * 
 */
export function clearSmallPrints(): void {
	return _in(0x2cea2839, 0x313c09ac); 
}

/**
 * 
 */
export function closeSocialClubMenu(): void {
	return _in(0xd2b32be3, 0xfc1626c6); 
}

/**
 * Creates a gamer tag for the specified local player ID, automatically attached to the player's current ped.
 * The created gamer tag will have the same ID as the player. You can use [IS_MP_GAMER_TAG_ACTIVE](#\_0x4E929E7A5796FD26) to check if a gamer tag already exists for a player.
 * After the gamer tag is created, all components will be set as invisible. Use [SET_MP_GAMER_TAG_VISIBILITY](#\_0x63BB75ABEDC1F6A0) to change the visibility of individual components or [\_SET_MP_GAMER_TAG_VISIBILITY_ALL](#\_0xEE76FF7E6A0166B0) to set all of them at once.
 * 
 * To create a gamer tag for a ped that is not a player, see [CREATE_FAKE_MP_GAMER_TAG](#\_0xBFEFE3321A3F5015).
 * @param player
 * @param username
 * @param crewIsPrivate
 * @param crewIsRockstar
 * @param crewName
 * @param crewRank
 * @param crewR
 * @param crewG
 * @param crewB
 */
export function createMpGamerTagWithCrewColor(player: number, username: string, crewIsPrivate: boolean, crewIsRockstar: boolean, crewName: string, crewRank: number, crewR: number, crewG: number, crewB: number): void {
	return _in(0x6dd05e9d, 0x83efa4c9, player, _ts(username), crewIsPrivate, crewIsRockstar, _ts(crewName), crewRank, crewR, crewG, crewB); 
}

/**
 * 
 */
export function DeleteWaypoint(): void {
	return _in(0xd8e69475, 0x7bcea8e9); 
}

/**
 * 
 */
export function disableFrontendThisFrame(): void {
	return _in(0x6d3465a7, 0x3092f0e6); 
}

/**
 * If true is passed, the player won't be able to open the multiplayer chat
 * @param disable
 */
export function DisableMultiplayerChat(disable: boolean): void {
	return _in(0x1db21a44, 0xb09e8ba3, disable); 
}

/**
 * 
 * @param display
 */
export function displayAmmoThisFrame(display: boolean): void {
	return _in(0xa5e78ba2, 0xb1331c55, display); 
}

/**
 * 
 * @param toggle
 */
export function displayAreaName(toggle: boolean): void {
	return _in(0x276b6ce3, 0x69c33678, toggle); 
}

/**
 * ```
 * The messages are localized strings.
 * Examples:
 * "No_bus_money"
 * "Enter_bus"
 * "Tour_help"
 * "LETTERS_HELP2"
 * "Dummy"
 * **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
 * --------
 * p1 doesn't seem to make a difference, regardless of the state it's in.
 * picture of where on the screen this is displayed?
 * ```
 * @param message
 * @param p1
 */
export function displayHelpTextThisFrame(message: string, p1: boolean): void {
	return _in(0x960c9ff8, 0xf616e41c, _ts(message), p1); 
}

/**
 * ```
 * "DISPLAY_CASH(true);" makes the cash amount render on the screen when appropriate
 * "DISPLAY_CASH(false);" disables cash amount rendering
 * ```
 * @param display
 */
export function displayCash(display: boolean): void {
	return _in(0x96dec8d5, 0x430208b7, display); 
}

/**
 * ```
 * If Hud should be displayed
 * ```
 * @param toggle
 */
export function displayHud(toggle: boolean): void {
	return _in(0xa6294919, 0xe56ff02a, toggle); 
}

/**
 * 
 */
export function displayHudWhenPausedThisFrame(): void {
	return _in(0x402f9ed6, 0x2087e898); 
}

/**
 * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
 */
export function DisplayHudWhenDeadThisFrame(): void {
	return _in(0x7669f9e3, 0x9dc17063); 
}

/**
 * ```
 * If Minimap / Radar should be displayed.
 * ```
 * @param toggle
 */
export function displayRadar(toggle: boolean): void {
	return _in(0xa0ebb943, 0xc300e693, toggle); 
}

/**
 * 
 * @param blip
 */
export function doesBlipExist(blip: number): boolean {
	return _in(0xa6db27d1, 0x9ecbb7da, blip, _r); 
}

/**
 * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
 * Doesn't need to be called every frame.
 * Preview: https://i.imgur.com/DfqKWfJ.png
 * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
 * @param toggle
 */
export function displayPlayerNameTagsOnBlips(toggle: boolean): void {
	return _in(0x82cedc33, 0x687e1f50, toggle); 
}

/**
 * 
 * @param blip
 */
export function doesBlipHaveGpsRoute(blip: number): boolean {
	return _in(0xdd2238f5, 0x7b977751, blip, _r); 
}

/**
 * ```
 * Displays the crosshair for this frame.
 * ```
 */
export function displaySniperScopeThisFrame(): void {
	return _in(0x73115226, 0xf4814e62); 
}

/**
 * ```
 * Checks if the passed gxt name exists in the game files.
 * ```
 * @param gxt
 */
export function doesTextLabelExist(gxt: string): boolean {
	return _in(0xac09ca97, 0x3c564252, _ts(gxt), _r); 
}

/**
 * ```
 * Returns whether the ped's blip is controlled by the game.
 * It's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).
 * ```
 * @param ped
 */
export function doesPedHaveAiBlip(ped: number): boolean {
	return _in(0x15b8ecf8, 0x44ee67ed, ped, _r); 
}

/**
 * ```
 * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
 * ```
 */
export function dontTiltMinimapThisFrame(): void {
	return _in(0x6d14bfdc, 0x33b34f55); 
}

/**
 * 
 * @param gxt
 */
export function doesTextBlockExist(gxt: string): boolean {
	return _in(0x1c7302e7, 0x25259789, _ts(gxt), _r); 
}

/**
 * ```
 * enum eBusySpinnerType
 * {
 * BUSY_SPINNER_LEFT,
 * BUSY_SPINNER_LEFT_2,
 * BUSY_SPINNER_LEFT_3,
 * BUSY_SPINNER_SAVE,
 * BUSY_SPINNER_RIGHT,
 * };
 * ```
 * @param busySpinnerType
 */
export function endTextCommandBusyspinnerOn(busySpinnerType: number): void {
	return _in(0xbd12f822, 0x8410d9b4, busySpinnerType); 
}

/**
 * 
 */
export function endTextCommandClearPrint(): void {
	return _in(0xfcc75460, 0xaba29378); 
}

/**
 * 
 * @param shape
 * @param loop
 * @param beep
 * @param duration
 */
export function endTextCommandDisplayHelp(shape: number, loop: boolean, beep: boolean, duration: number): void {
	return _in(0x238ffe5c, 0x7b0498a6, shape, loop, beep, duration); 
}

/**
 * ```
 * After applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * @param x
 * @param y
 */
export function endTextCommandDisplayText(x: number, y: number): void {
	return _in(0xcd015e5b, 0xb0d96a57, _fv(x), _fv(y)); 
}

/**
 * ```
 * END_TEXT_COMMAND_*
 * In scripts font most of the time is passed as 1.
 * Use _BEGIN_TEXT_GET_COMMAND_GET_WIDTH
 * param is not font from what i've tested
 * ```
 * @param p0
 */
export function EndTextCommandGetWidth(p0: boolean): number {
	return _in(0x85f061da, 0x64ed2f67, p0, _r, _rf); 
}

/**
 * 
 */
export function endTextCommandIsMessageDisplayed(): boolean {
	return _in(0x8a9ba1ab, 0x3e237613, _r); 
}

/**
 * Returns whether a specific help message is being displayed or not.
 * 
 * ```cpp
 * enum HudIndexes {
 * HELP_TEXT = 0,
 * FLOATING_HELP_TEXT_1 = 1,
 * FLOATING_HELP_TEXT_2 = 2,
 * }
 * ```
 * @param hudIndex
 * @return `true`: Indicates if the specific help message has been displayed.\
`false`: Indicates that the specific help message is still being displayed.
 */
export function endTextCommandIsThisHelpMessageBeingDisplayed(hudIndex: number): boolean {
	return _in(0x10bddbfc, 0x529428dd, hudIndex, _r); 
}

/**
 * ```
 * END_TEXT_COMMAND_*
 * Determines how many lines the text string will use when drawn on screen.
 * Must use 0x521FB041D93DD0E4 for setting up
 * ```
 * @param x
 * @param y
 */
export function EndTextCommandLineCount(x: number, y: number): number {
	return _in(0x9040dfb0, 0x9be75706, _fv(x), _fv(y), _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function EndTextCommandObjective(p0: boolean): void {
	return _in(0xcfdbdf5a, 0xe59ba0f4, p0); 
}

/**
 * 
 * @param buttonIndex
 */
export function endTextCommandOverrideButtonText(buttonIndex: number): void {
	return _in(0xa8691197, 0x9638106f, buttonIndex); 
}

/**
 * Finalizes a text command started with [`BEGIN_TEXT_COMMAND_SET_BLIP_NAME`](#\_0xF9113A30DE5C6670), setting the name
 * of the specified blip.
 * @param blip
 */
export function endTextCommandSetBlipName(blip: number): void {
	return _in(0xbc38b49b, 0xcb83bc9b, blip); 
}

/**
 * ```
 * Draws the subtitle at middle center of the screen.
 * int duration = time in milliseconds to show text on screen before disappearing
 * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
 * Used to be known as _DRAW_SUBTITLE_TIMED
 * ```
 * @param duration
 * @param drawImmediately
 */
export function endTextCommandPrint(duration: number, drawImmediately: boolean): void {
	return _in(0x9d77056a, 0x530643f6, duration, drawImmediately); 
}

/**
 * 
 * @param chTitle
 * @param clanTxd
 * @param clanTxn
 * @param isImportant
 * @param showSubtitle
 */
export function endTextCommandThefeedPostCrewRankup(chTitle: string, clanTxd: string, clanTxn: string, isImportant: boolean, showSubtitle: boolean): number {
	return _in(0x8efccf6e, 0xc66d85e4, _ts(chTitle), _ts(clanTxd), _ts(clanTxn), isImportant, showSubtitle, _r, _ri); 
}

/**
 * ```
 * p0 = 1 or 0
 * crashes my game...
 * this is for sending invites to network players - jobs/apartment/ect...
 * return notification handle
 * int invite(Player player)
 * {
 * networkHandleMgr netHandle;
 * networkClanMgr clan;
 * char *playerName = GET_PLAYER_NAME(player);
 * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 * _SET_NOTIFACTION_COLOR_NEXT(1);
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
 * NETWORK_HANDLE_FROM_PLAYER(player, &netHandle.netHandle, 13);
 * if (NETWORK_CLAN_PLAYER_IS_ACTIVE(&netHandle.netHandle))
 * {
 * NETWORK_CLAN_PLAYER_GET_DESC(&clan.clanHandle, 35, &netHandle.netHandle);
 * _DRAW_NOTIFICATION_CLAN_INVITE(0, _0x54E79E9C(&clan.clanHandle, 35), &clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);
 * }
 * }
 * ```
 * @param crewTypeIsPrivate
 * @param crewTagContainsRockstar
 * @param crewTag
 * @param rank
 * @param isLeader
 * @param isImportant
 * @param clanHandle
 * @param gamerStr
 * @param r
 * @param g
 * @param b
 */
export function endTextCommandThefeedPostCrewtagWithGameName(crewTypeIsPrivate: boolean, crewTagContainsRockstar: boolean, rank: number, isLeader: boolean, isImportant: boolean, clanHandle: number, gamerStr: string, r: number, g: number, b: number): number {
	return _in(0x137bc355, 0x89e34e1e, crewTypeIsPrivate, crewTagContainsRockstar, _i, rank, isLeader, isImportant, clanHandle, _ts(gamerStr), r, g, b, _r, _ri); 
}

/**
 * Shows an "award" notification above the minimap, lua example result:
 * 
 * ![](https://i.imgur.com/e2DNaKX.png)
 * 
 * Old description:
 * 
 * ```
 * Example:
 * UI::_SET_NOTIFICATION_TEXT_ENTRY("HUNT");
 * UI::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
 * ```
 * @param textureDict
 * @param textureName
 * @param rpBonus
 * @param colorOverlay
 * @param titleLabel
 * @return The notification handle.
 */
export function endTextCommandThefeedPostAward(textureDict: string, textureName: string, rpBonus: number, colorOverlay: number, titleLabel: string): number {
	return _in(0xaa295b6f, 0x28bd587d, _ts(textureDict), _ts(textureName), rpBonus, colorOverlay, _ts(titleLabel), _r, _ri); 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * Needs more research.
 * Only one type of usage in the scripts:
 * HUD::\_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a\_0);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
export function EndTextCommandThefeedPostMessagetextGxtEntry(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number {
	return _in(0xc6f580e4, 0xc94926ac, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _r, _ri); 
}

/**
 * ```
 * This function and the one below it are for after you receive an invite, not sending it.
 * p0 = 1 or 0
 * nothin doin.
 * int invite(Player player)
 * {
 * int iVar2, iVar3;
 * networkHandleMgr handle;
 * NETWORK_HANDLE_FROM_PLAYER(player, &handle.netHandle, 13);
 * networkClanMgr clan;
 * char *playerName = GET_PLAYER_NAME(player);
 * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 * _SET_NOTIFACTION_COLOR_NEXT(0);
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
 * if (NETWORK_CLAN_PLAYER_GET_DESC(&clan, 35, &handle.netHandle))
 * {
 * iVar2 = 0;
 * if (ARE_STRINGS_EQUAL(clan.unk22, "Leader") && clan.unk30 == 0)
 * {
 * iVar2 = 1;
 * }
 * if (clan.unk21 > 0)
 * {
 * iVar3 = 0;
 * }
 * else
 * {
 * iVar3 = 1;
 * }
 * BOOL unused = _0x54E79E9C(&clan.clanHandle, 35);
 * return _DRAW_NOTIFICATION_APARTMENT_INVITE(iVar3, 0  -- [[unused]] , &clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);
 * }
 * }
 * ```
 * @param crewTypeIsPrivate
 * @param crewTagContainsRockstar
 * @param crewTag
 * @param rank
 * @param hasFounderStatus
 * @param isImportant
 * @param clanHandle
 * @param r
 * @param g
 * @param b
 */
export function endTextCommandThefeedPostCrewtag(crewTypeIsPrivate: boolean, crewTagContainsRockstar: boolean, rank: number, hasFounderStatus: boolean, isImportant: boolean, clanHandle: number, r: number, g: number, b: number): number {
	return _in(0x97c9e4e7, 0x024a8f2c, crewTypeIsPrivate, crewTagContainsRockstar, _i, rank, hasFounderStatus, isImportant, clanHandle, r, g, b, _r, _ri); 
}

/**
 * ```
 * List of picNames pastebin.com/XdpJVbHz
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * ```
 * @param picTxd
 * @param picTxn
 * @param flash
 * @param iconType
 * @param nameStr
 * @param subtitleStr
 * @param duration
 * @param crewPackedStr
 */
export function endTextCommandThefeedPostMessagetextWithCrewTag(picTxd: string, picTxn: string, flash: boolean, iconType: number, nameStr: string, subtitleStr: string, duration: number, crewPackedStr: string): number {
	return _in(0x5cbf7bad, 0xe20db93e, _ts(picTxd), _ts(picTxn), flash, iconType, _ts(nameStr), _ts(subtitleStr), _fv(duration), _ts(crewPackedStr), _r, _ri); 
}

/**
 * Sets some extra options for a notification. It adds an image (or icon type) and sets a notification title (sender) and subtitle (subject).
 * 
 * Texture dictionary and texture name parameters are usually the same exact value.
 * 
 * Example result:
 * 
 * ![](https://i.imgur.com/LviutDl.png)
 * 
 * Old description with list of possible icons and texture names:
 * 
 * ```
 * List of picNames: pastebin.com/XdpJVbHz
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * ```
 * @param textureDict
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @return The notification handle.
 */
export function endTextCommandThefeedPostMessagetext(textureDict: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number {
	return _in(0x1ccd9a37, 0x359072cf, _ts(textureDict), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _r, _ri); 
}

/**
 * ```
 * List of picNames: pastebin.com/XdpJVbHz
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
 * int IconNotification(char *text, char *text2, char *Subject)
 * {
 * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
 * return _DRAW_NOTIFICATION(1, 1);
 * }
 * ```
 * @param picTxd
 * @param picTxn
 * @param flash
 * @param iconType1
 * @param nameStr
 * @param subtitleStr
 * @param duration
 * @param crewPackedStr
 * @param iconType2
 * @param textColor
 */
export function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(picTxd: string, picTxn: string, flash: boolean, iconType1: number, nameStr: string, subtitleStr: string, duration: number, crewPackedStr: string, iconType2: number, textColor: number): number {
	return _in(0x531b84e7, 0xda981fb6, _ts(picTxd), _ts(picTxn), flash, iconType1, _ts(nameStr), _ts(subtitleStr), _fv(duration), _ts(crewPackedStr), iconType2, textColor, _r, _ri); 
}

/**
 * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * 
 * Example, only occurrence in the scripts:
 * 
 * ```
 * v_8 = UI::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
 * ```
 * 
 * Example result:
 * 
 * ![](https://i.imgur.com/YrN4Bcm.png)
 * @param picTxd
 * @param picTxn
 * @param flash
 * @param iconType
 * @param nameStr
 * @param subtitleStr
 * @param duration
 */
export function endTextCommandThefeedPostMessagetextTu(picTxd: string, picTxn: string, flash: boolean, iconType: number, nameStr: string, subtitleStr: string, duration: number): number {
	return _in(0x1e661114, 0x9db3db6b, _ts(picTxd), _ts(picTxn), flash, iconType, _ts(nameStr), _ts(subtitleStr), _fv(duration), _r, _ri); 
}

/**
 * ```
 * returns a notification handle, prints out a notification like below:
 * type range: 0
 * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
 * example:
 * UI::_0xD202B92CBF1D816F(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * ```
 * @param eType
 * @param iIcon
 * @param sTitle
 */
export function EndTextCommandThefeedPostReplayIcon(eType: number, iIcon: number, sTitle: string): number {
	return _in(0xd202b92c, 0xbf1d816f, eType, iIcon, _ts(sTitle), _r, _ri); 
}

/**
 * 
 * @param blink
 * @param bHasTokens
 */
export function endTextCommandThefeedPostMpticker(blink: boolean, bHasTokens: boolean): number {
	return _in(0xf020c969, 0x15705b3a, blink, bHasTokens, _r, _ri); 
}

/**
 * ```
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, button accepts "~INPUT_SOMETHING~"
 * example:
 * HUD::_0xDD6CB2CCE7C2735C(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - imgur.com/UPy0Ial
 * Examples from the scripts:
 * l_D1[1 -- [[1]] ]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_SAVE_REPLAY_CLIP~","");
 * l_D1[1 -- [[1]] ]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
 * ```
 * @param type
 * @param button
 * @param text
 */
export function EndTextCommandThefeedPostReplayInput(type: number, button: string, text: string): number {
	return _in(0xdd6cb2cc, 0xe7c2735c, type, _ts(button), _ts(text), _r, _ri); 
}

/**
 * Example output preview:
 * 
 * ![](https://i.imgur.com/TJvqkYq.png)
 * @param isImportant
 * @param bHasTokens
 * @return The notification handle.
 */
export function endTextCommandThefeedPostTicker(isImportant: boolean, bHasTokens: boolean): number {
	return _in(0x2ed7843f, 0x8f801023, isImportant, bHasTokens, _r, _ri); 
}

/**
 * 
 * @param isImportant
 * @param bHasTokens
 */
export function endTextCommandThefeedPostTickerWithTokens(isImportant: boolean, bHasTokens: boolean): number {
	return _in(0x378e809b, 0xf61ec840, isImportant, bHasTokens, _r, _ri); 
}

/**
 * 
 * @param chTitle
 * @param iconType
 * @param chSubtitle
 */
export function endTextCommandThefeedPostUnlock(chTitle: string, iconType: number, chSubtitle: string): any {
	return _in(0x33ee1274, 0x3ccd6343, _ts(chTitle), iconType, _ts(chSubtitle), _r, _ri); 
}

/**
 * [List of picture names](https://pastebin.com/XdpJVbHz)
 * 
 * Example result:
 * 
 * ![](https://i.imgur.com/SdEZ22m.png)
 * @param statTitle
 * @param iconEnum
 * @param stepVal
 * @param barValue
 * @param isImportant
 * @param picTxd
 * @param picTxn
 * @return The notification handle.
 */
export function endTextCommandThefeedPostStats(statTitle: string, iconEnum: number, stepVal: boolean, barValue: number, isImportant: boolean, picTxd: string, picTxn: string): number {
	return _in(0x2b7e9a4e, 0xaaa93c89, _ts(statTitle), iconEnum, stepVal, barValue, isImportant, _ts(picTxd), _ts(picTxn), _r, _ri); 
}

/**
 * 
 * @param blink
 * @param bHasTokens
 */
export function endTextCommandThefeedPostTickerForced(blink: boolean, bHasTokens: boolean): number {
	return _in(0x44fa0397, 0x5424a0ee, blink, bHasTokens, _r, _ri); 
}

/**
 * 
 * @param chTitle
 * @param iconType
 * @param chSubtitle
 * @param isImportant
 */
export function endTextCommandThefeedPostUnlockTu(chTitle: string, iconType: number, chSubtitle: string, isImportant: boolean): any {
	return _in(0xc8f3aaf9, 0x3d0600bf, _ts(chTitle), iconType, _ts(chSubtitle), isImportant, _r, _ri); 
}

/**
 * 
 * @param chTitle
 * @param iconType
 * @param chSubtitle
 * @param isImportant
 * @param titleColor
 * @param p5
 */
export function endTextCommandThefeedPostUnlockTuWithColor(chTitle: string, iconType: number, chSubtitle: string, isImportant: boolean, titleColor: number, p5: boolean): any {
	return _in(0x7ae05890, 0x93a2e088, _ts(chTitle), iconType, _ts(chSubtitle), isImportant, titleColor, p5, _r, _ri); 
}

/**
 * 
 * @param toggle
 */
export function flagPlayerContextInTournament(toggle: boolean): void {
	return _in(0xcef21431, 0x5d276fd1, toggle); 
}

/**
 * ```
 * NativeDB Added Parameter 7: int hudColorIndex1
 * NativeDB Added Parameter 8: int hudColorIndex2
 * ```
 * @param ch1TXD
 * @param ch1TXN
 * @param val1
 * @param ch2TXD
 * @param ch2TXN
 * @param val2
 */
export function endTextCommandThefeedPostVersusTu(ch1TXD: string, ch1TXN: string, val1: number, ch2TXD: string, ch2TXN: string, val2: number): number {
	return _in(0xb6871b05, 0x55b02996, _ts(ch1TXD), _ts(ch1TXN), val1, _ts(ch2TXD), _ts(ch2TXN), val2, _r, _ri); 
}

/**
 * 
 * @param millisecondsToFlash
 */
export function flashAbilityBar(millisecondsToFlash: number): void {
	return _in(0x02cfba0c, 0x9e9275ce, millisecondsToFlash); 
}

/**
 * 
 * @param hudColorIndex
 */
export function flashMinimapDisplayWithColor(hudColorIndex: number): void {
	return _in(0x6b1de27e, 0xe78e6a19, hudColorIndex); 
}

/**
 * 
 * @param p0
 */
export function flashWantedDisplay(p0: boolean): void {
	return _in(0xa18afb39, 0x081b6a1f, p0); 
}

/**
 * ```
 * adds a short flash to the Radar/Minimap
 * Usage: UI.FLASH_MINIMAP_DISPLAY
 * ```
 */
export function flashMinimapDisplay(): void {
	return _in(0xf2dd778c, 0x22b15bda); 
}

/**
 * 
 */
export function forceCloseReportugcMenu(): void {
	return _in(0xee4c0e6d, 0xbc6f2c6f); 
}

/**
 * 
 */
export function ForceCloseTextInputBox(): void {
	return _in(0x8817605c, 0x2ba76200); 
}

/**
 * ```
 * Doesn't actually return anything.
 * ```
 */
export function forceSonarBlipsThisFrame(): any {
	return _in(0x1121bfa1, 0xa1a522a8, _r, _ri); 
}

/**
 * ```
 * Returns the current AI BLIP for the specified ped
 * ```
 * @param ped
 */
export function GetAiBlip(ped: number): number {
	return _in(0x56176892, 0x826a4fe8, ped, _r); 
}

/**
 * 
 * @param blip
 */
export function getBlipAlpha(blip: number): number {
	return _in(0x970f608f, 0x0ee6c885, blip, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function GetAiBlip2(ped: number): number {
	return _in(0x7cd93401, 0x0e115c2c, ped, _r); 
}

/**
 * 
 * @param blip
 */
export function getBlipColour(blip: number): number {
	return _in(0xdf729e8d, 0x20cf7327, blip, _r, _ri); 
}

/**
 * 
 * @param blip
 */
export function getBlipCoords(blip: number): Vector3 {
	return _in(0x586afe3f, 0xf72d996e, blip, _r, _rv); 
}

/**
 * ```
 * Returns the Blip handle of given Entity.
 * ```
 * @param entity
 */
export function getBlipFromEntity(entity: number): number {
	return _in(0xbc8dbdca, 0x2436f7e8, entity, _r); 
}

/**
 * 
 * @param blip
 */
export function getBlipHudColour(blip: number): number {
	return _in(0x729b5f1e, 0xfbc0aaee, blip, _r, _ri); 
}

/**
 * 
 * @param blip
 */
export function getBlipInfoIdCoord(blip: number): Vector3 {
	return _in(0xfa7c7f0a, 0xadf25d09, blip, _r, _rv); 
}

/**
 * 
 * @param blip
 */
export function getBlipInfoIdDisplay(blip: number): number {
	return _in(0x1e314167, 0xf701dc3b, blip, _r, _ri); 
}

/**
 * 
 * @param blip
 */
export function getBlipInfoIdEntityIndex(blip: number): number {
	return _in(0x4ba4e255, 0x3afedc2c, blip, _r); 
}

/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * @param blip
 */
export function getBlipInfoIdPickupIndex(blip: number): number {
	return _in(0x9b6786e4, 0xc03dd382, blip, _r); 
}

/**
 * ```
 * Returns a value based on what the blip is attached to
 * 1 - Vehicle
 * 2 - Ped
 * 3 - Object
 * 4 - Coord
 * 5 - unk
 * 6 - Pickup
 * 7 - Radius
 * ```
 * @param blip
 */
export function getBlipInfoIdType(blip: number): number {
	return _in(0xbe9b0959, 0xffd0779b, blip, _r, _ri); 
}

/**
 * Gets the sprite id of the specified blip. Blip sprite ids and images can be found [here](https://docs.fivem.net/docs/game-references/blips/).
 * @param blip
 */
export function getBlipSprite(blip: number): number {
	return _in(0x1fc87746, 0x4a04fc4f, blip, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param blip
 */
export function GetBlipRotation(blip: number): number {
	return _in(0x003e92ba, 0x477f9d7f, blip, _r, _ri); 
}

/**
 * ```
 * if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
 * ```
 */
export function getCurrentFrontendMenuVersion(): number {
	return _in(0x2309595a, 0xd6145265, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param blipSprite
 */
export function GetClosestBlipOfType(blipSprite: number): number {
	return _in(0xd484bf71, 0x050ca1ee, blipSprite, _r); 
}

/**
 * 
 * @param blipSprite
 */
export function getFirstBlipInfoId(blipSprite: number): number {
	return _in(0x1bede233, 0xe6cd2a1f, blipSprite, _r); 
}

/**
 * 
 */
export function getCurrentWebpageId(): number {
	return _in(0x01a358d9, 0x128b7a86, _r, _ri); 
}

/**
 * 
 */
export function getCurrentWebsiteId(): number {
	return _in(0x97d47996, 0xfc48cbad, _r, _ri); 
}

/**
 * ```
 * Returns the ActionScript flagValue.
 * ActionScript flags are global flags that scaleforms use
 * Flags found during testing
 * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
 * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
 * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
 * 9: Returns the current selection on the mobile phone scaleform
 * There are 20 flags in total.
 * ```
 * @param flagIndex
 */
export function getGlobalActionscriptFlag(flagIndex: number): number {
	return _in(0xe3b05614, 0xdce1d014, flagIndex, _r, _ri); 
}

/**
 * ```
 * This function is hard-coded to always return 1.
 * ```
 */
export function getDefaultScriptRendertargetRenderId(): number {
	return _in(0x52f0982d, 0x7fd156b6, _r, _ri); 
}

/**
 * Gets hud color RGBA parameter values by passing a hud color index (hudColorIndex).
 * 
 * HUD colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)
 * @param hudColorIndex
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function getHudColour(hudColorIndex: number): void {
	return _in(0x7c9c91ab, 0x74a0360f, hudColorIndex, _i, _i, _i, _i); 
}

/**
 * ```
 * World to relative screen coords
 * this world to screen will keep the text on screen. it will keep it in the screen pos
 * ```
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
export function getHudScreenPositionFromWorldPosition(worldX: number, worldY: number, worldZ: number): boolean {
	return _in(0xf9904d11, 0xf1acbec3, _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r); 
}

/**
 * 
 * @param id
 */
export function getHudComponentPosition(id: number): Vector3 {
	return _in(0x223ca69a, 0x8c4417fd, id, _r, _rv); 
}

/**
 * ```
 * Gets a string literal from a label name.
 * GET_F*
 * ```
 * @param labelName
 */
export function GetLabelText(labelName: string): string {
	return _in(0x7b5280eb, 0xa9840c72, _ts(labelName), _r, _s); 
}

/**
 * ```
 * Returns the length of the string passed (much like strlen).
 * ```
 * @param string
 */
export function getLengthOfLiteralString(string: string): number {
	return _in(0xf030907c, 0xcbb8a9fd, _ts(string), _r, _ri); 
}

/**
 * 
 * @param string
 */
export function getLengthOfLiteralStringInBytes(string: string): number {
	return _in(0x43e41111, 0x89e54f0e, _ts(string), _r, _ri); 
}

/**
 * 
 */
export function getMainPlayerBlipId(): number {
	return _in(0xdcd4ec3f, 0x419d02fa, _r); 
}

/**
 * ```
 * Returns the string length of the string from the gxt string .
 * ```
 * @param gxt
 */
export function getLengthOfStringWithThisTextLabel(gxt: string): number {
	return _in(0x801bd273, 0xd3a23f74, _ts(gxt), _r, _ri); 
}

/**
 * ```
 * p0 was always 0xAE2602A3.
 * ```
 * @param p0
 * @param p1
 */
export function getMenuPedBoolStat(p0: number): boolean {
	return _in(0x052991e5, 0x9076e4e4, _ch(p0), _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function getMenuPedFloatStat(p0: any): boolean {
	return _in(0x5fbd7095, 0xfe7ae57f, p0, _fi(p1), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function getMinimapFowCoordinateIsRevealed(x: number, y: number, z: number): boolean {
	return _in(0x6e31b911, 0x45873922, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function getMenuPedIntStat(p0: any): boolean {
	return _in(0xef4ced81, 0xcebedc6d, p0, _i, _r); 
}

/**
 * 
 * @param name
 */
export function getNamedRendertargetRenderId(name: string): number {
	return _in(0x1a6478b6, 0x1c6bdc3b, _ts(name), _r, _ri); 
}

/**
 * 
 * @param blipSprite
 */
export function getNextBlipInfoId(blipSprite: number): number {
	return _in(0x14f96aa5, 0x0d6fbea7, blipSprite, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function getMenuPedMaskedIntStat(p0: any, p2: any, p3: any): boolean {
	return _in(0x90a6526c, 0xf0381030, p0, _i, p2, p3, _r); 
}

/**
 * 
 */
export function GetNorthRadarBlip(): number {
	return _in(0x3f0cf9cb, 0x7e589b88, _r); 
}

/**
 * 
 */
export function getMinimapFowDiscoveryRatio(): number {
	return _in(0xe0130b41, 0xd3cf4574, _r, _rf); 
}

/**
 * Name between `GET_ONSCREEN_KEYBOARD_RESULT` and `GET_PAUSE_MENU_STATE`. Likely, `GET_PAUSE_MENU_*`.
 * @return If the pause menu is open, it will return a Vector3, Z is always 0.
If the pause menu is closed, it will return Vector3.Zero
 */
export function GetPauseMenuCursorPosition(): Vector3 {
	return _in(0x5bff36d6, 0xed83e0ae, _r, _rv); 
}

/**
 * 
 */
export function getNewSelectedMissionCreatorBlip(): number {
	return _in(0x5c90988e, 0x7c8e1af4, _r); 
}

/**
 * 
 * @param lastItemMenuId
 * @param selectedItemUniqueId
 */
export function GetPauseMenuSelection(): void {
	return _in(0x36c1451a, 0x88a09630, _i, _i); 
}

/**
 * 
 */
export function getNumberOfActiveBlips(): number {
	return _in(0x9a3ff3de, 0x163034e8, _r, _ri); 
}

/**
 * ```
 * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
 * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
 * selectedItemUniqueId: this is uniqueID of the currently selected menu item
 * when the pausemenu is closed:
 * lastItemMenuId = -1
 * selectedItemMenuId = -1
 * selectedItemUniqueId = 0
 * when the header gains focus:
 * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
 * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
 * selectedItemUniqueId = -1
 * when focus is moved from the header to a pausemenu page:
 * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
 * selectedItemMenuId = -1
 * selectedItemUniqueId updates as normal
 * ```
 * @param lastItemMenuId
 * @param selectedItemMenuId
 * @param selectedItemUniqueId
 */
export function GetPauseMenuSelectionData(): void {
	return _in(0x7e17be53, 0xe1aaabaf, _i, _i, _i); 
}

/**
 * ```
 * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
 * Old name: _GET_TEXT_SCALE_HEIGHT
 * ```
 * @param size
 * @param font
 */
export function getRenderedCharacterHeight(size: number, font: number): number {
	return _in(0xdb88a374, 0x83346780, _fv(size), font, _r, _rf); 
}

/**
 * ```
 * Returns:
 * 0
 * 5
 * 10
 * 15
 * 20
 * 25
 * 30
 * 35
 * ```
 */
export function getPauseMenuState(): number {
	return _in(0x272acd84, 0x970869c5, _r, _ri); 
}

/**
 * 
 */
export function getStandardBlipEnumId(): number {
	return _in(0x4a992338, 0x5bdb9dad, _r, _ri); 
}

/**
 * Converts the hash of a street name into a readable string. To retrieve a hash for a given (street) coordinate, see [`GET_STREET_NAME_AT_COORD`](#\_0x2EB41072B4C1E4C0).
 * @param hash
 */
export function getStreetNameFromHashKey(hash: number): string {
	return _in(0xd0ef8a95, 0x9b8a4cb9, _ch(hash), _r, _s); 
}

/**
 * Gets mouse selection data from scaleforms with mouse support. Must be checked every frame.
 * Returns item index if using the COLOUR_SWITCHER\_02 scaleform.
 * Selection types, found in MOUSE_EVENTS.as:
 * MOUSE_DRAG_OUT = 0;
 * MOUSE_DRAG_OVER = 1;
 * MOUSE_DOWN = 2;
 * MOUSE_MOVE = 3;
 * MOUSE_UP = 4;
 * MOUSE_PRESS = 5;
 * MOUSE_RELEASE = 6;
 * MOUSE_RELEASE_OUTSIDE = 7;
 * MOUSE_ROLL_OUT = 8;
 * MOUSE_ROLL_OVER = 9;
 * MOUSE_WHEEL_UP = 10;
 * MOUSE_WHEEL_DOWN = 11;
 * 
 * Scaleforms that this works with:
 * 
 * *   COLOUR_SWITCHER\_02
 * *   MP_RESULTS_PANEL
 * *   MP_NEXT_JOB_SELECTION
 * *   SC_LEADERBOARD
 * Probably works with other scaleforms, needs more research.
 * In order to use this Native you MUST have controls 239, 240, 237, 238 enabled!
 * This native, due to its erroneous redundancy of the returned boolean value, works differently in C#: shifting the parameters (where `received` becomes `selectionType` and so on making the fourth parameter unused and always 0).
 * @param scaleformHandle
 * @param received
 * @param selectionType
 * @param context
 * @param slotIndex
 * @return *   **retVal** Returns true if MOUSE_EVENT callback from Scaleforms has been called.
 */
export function GetScaleformMovieCursorSelection(scaleformHandle: number): boolean {
	return _in(0x632b2940, 0xc67f4ea9, scaleformHandle, _i, _i, _i, _i, _r); 
}

/**
 * ```
 * Returns a substring of a specified length starting at a specified position.
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6);
 * ```
 * @param text
 * @param position
 * @param length
 */
export function GetTextSubstring(text: string, position: number, length: number): string {
	return _in(0x169bd938, 0x2084c8c0, _ts(text), position, length, _r, _s); 
}

/**
 * ```
 * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9);
 * // Overflows are possibly replaced with underscores (needs verification)
 * subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"?
 * ```
 * @param text
 * @param startPosition
 * @param endPosition
 */
export function GetTextSubstringSlice(text: string, startPosition: number, endPosition: number): string {
	return _in(0xce94aeba, 0x5d82908a, _ts(text), startPosition, endPosition, _r, _s); 
}

/**
 * ```
 * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
 * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
 * Example:
 * // Condensed example of how Rockstar uses this function
 * strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
 * subStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
 * --
 * "fm_race_creator.ysc", line 85115:
 * // parameters modified for clarity
 * BOOL sub_8e5aa(char *text, int length) {
 * for (i = 0; i <= (length - 2); i += 1) {
 * if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), " ")) {
 * return FALSE;
 * }
 * }
 * return TRUE;
 * }
 * ```
 * @param text
 * @param position
 * @param length
 * @param maxLength
 */
export function GetTextSubstringSafe(text: string, position: number, length: number, maxLength: number): string {
	return _in(0xb2798643, 0x312205c5, _ts(text), position, length, maxLength, _r, _s); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 */
export function GetWarningMessageTitleHash(): number {
	return _in(0x81df9aba, 0x6c83dff9, _r); 
}

/**
 * ```
 * p1 is either 1 or 2 in the PC scripts.
 * ```
 * 
 * This native is used to "give"/duplicate a player ped to a frontend menu as configured via the `ACTIVATE_FRONTEND_MENU` native, you first must utilize the `CLONE_PED` ( https://runtime.fivem.net/doc/natives/#\_0xEF29A16337FACADB ) to clone said ped.
 * @param ped
 * @param p1
 */
export function givePedToPauseMenu(ped: number, p1: number): void {
	return _in(0xac0bfbdc, 0x3be00e14, ped, p1); 
}

/**
 * 
 */
export function getWaypointBlipEnumId(): number {
	return _in(0x186e5d25, 0x2fa50e7d, _r, _ri); 
}

/**
 * ```
 * HAS_*
 * ```
 */
export function HasDirectorModeBeenTriggered(): boolean {
	return _in(0xa277800a, 0x9eae340e, _r); 
}

/**
 * 
 * @param slot
 */
export function hasAdditionalTextLoaded(slot: number): boolean {
	return _in(0x02245fe4, 0xbed318b8, slot, _r); 
}

/**
 * ```
 * Checks if the specified gxt has loaded into the passed slot.
 * ```
 * @param gxt
 * @param slot
 */
export function hasThisAdditionalTextLoaded(gxt: string, slot: number): boolean {
	return _in(0xadbf060e, 0x2b30c5bc, _ts(gxt), slot, _r); 
}

/**
 * ```
 * HIDE_*_THIS_FRAME
 * 
 * Hides area and vehicle name HUD components for one frame.
 * ```
 */
export function HideAreaAndVehicleNameThisFrame(): void {
	return _in(0xa4dede28, 0xb1814289); 
}

/**
 * ```
 * I think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)
 * ```
 */
export function hideHudAndRadarThisFrame(): void {
	return _in(0x719ff505, 0xf097fd20); 
}

/**
 * 
 */
export function hideHelpTextThisFrame(): void {
	return _in(0xd46923fc, 0x481ca285); 
}

/**
 * This function hides various HUD (Heads-up Display) components.
 * 
 * Listed below are the integers and the corresponding HUD component.
 * 
 * *   1 : WANTED_STARS
 * *   2 : WEAPON_ICON
 * *   3 : CASH
 * *   4 : MP_CASH
 * *   5 : MP_MESSAGE
 * *   6 : VEHICLE_NAME
 * *   7 : AREA_NAME
 * *   8 : VEHICLE_CLASS
 * *   9 : STREET_NAME
 * *   10 : HELP_TEXT
 * *   11 : FLOATING_HELP_TEXT\_1
 * *   12 : FLOATING_HELP_TEXT\_2
 * *   13 : CASH_CHANGE
 * *   14 : RETICLE
 * *   15 : SUBTITLE_TEXT
 * *   16 : RADIO_STATIONS
 * *   17 : SAVING_GAME
 * *   18 : GAME_STREAM
 * *   19 : WEAPON_WHEEL
 * *   20 : WEAPON_WHEEL_STATS
 * *   21 : HUD_COMPONENTS
 * *   22 : HUD_WEAPONS
 * 
 * These integers also work for the [`SHOW_HUD_COMPONENT_THIS_FRAME`](#\_0x0B4DF1FA60C0E664) native, but instead shows the HUD Component.
 * @param id
 */
export function hideHudComponentThisFrame(id: number): void {
	return _in(0x6806c51a, 0xd12b83b8, id); 
}

/**
 * 
 */
export function hideLoadingOnFadeThisFrame(): void {
	return _in(0x4b0311d3, 0xcdc4648f); 
}

/**
 * 
 */
export function hideMinimapExteriorMapThisFrame(): void {
	return _in(0x5fbae526, 0x203990c9); 
}

/**
 * 
 * @param id
 */
export function hideScriptedHudComponentThisFrame(id: number): void {
	return _in(0xe374c498, 0xd8badc14, id); 
}

/**
 * 
 */
export function hideMinimapInteriorMapThisFrame(): void {
	return _in(0x20fe7fdf, 0xeead38c0); 
}

/**
 * 
 * @param blip
 */
export function hideNumberOnBlip(blip: number): void {
	return _in(0x532cff63, 0x7ef80148, blip); 
}

/**
 * Displays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand.
 */
export function HudDisplayLoadingScreenTips(): void {
	return _in(0x48804384, 0x1bbe156f); 
}

/**
 * ```
 * Forces the weapon wheel to show/hide.
 * ```
 * @param show
 */
export function hudForceWeaponWheel(show: boolean): void {
	return _in(0xeb354e53, 0x76bc81a7, show); 
}

/**
 * ```
 * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
 * ```
 * @param weaponHash
 */
export function hudSetWeaponWheelTopSlot(weaponHash: number): void {
	return _in(0x72c1056d, 0x678bb7d8, _ch(weaponHash)); 
}

/**
 * ```
 * Returns the weapon hash to the selected/highlighted weapon in the wheel
 * ```
 */
export function HudWeaponWheelGetSelectedHash(): number {
	return _in(0xa4893118, 0x5f0536fe, _r); 
}

/**
 * ```
 * Returns the weapon hash active in a specific weapon wheel slotList
 * ```
 * @param weaponTypeIndex
 */
export function HudWeaponWheelGetSlotHash(weaponTypeIndex: number): number {
	return _in(0xa13e9340, 0x3f26c812, weaponTypeIndex, _r); 
}

/**
 * ```
 * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
 * ```
 * @param toggle
 */
export function HudWeaponWheelIgnoreControlInput(toggle: boolean): void {
	return _in(0x14c9fdcc, 0x41f81f63, toggle); 
}

/**
 * ```
 * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
 * ```
 */
export function HudWeaponWheelIgnoreSelection(): void {
	return _in(0x0afc4af5, 0x10774b47); 
}

/**
 * 
 * @param blip
 */
export function isBlipFlashing(blip: number): boolean {
	return _in(0xa5e41fd8, 0x3ad6cef0, blip, _r); 
}

/**
 * 
 * @param blip
 */
export function isBlipShortRange(blip: number): boolean {
	return _in(0xda5f8727, 0xeb75b926, blip, _r); 
}

/**
 * 
 * @param blip
 */
export function isBlipOnMinimap(blip: number): boolean {
	return _in(0xe41ca530, 0x51197a27, blip, _r); 
}

/**
 * 
 */
export function isFrontendReadyForControl(): boolean {
	return _in(0x3bab9a4e, 0x4f2ff5c7, _r); 
}

/**
 * 
 */
export function isHelpMessageOnScreen(): boolean {
	return _in(0xdad37f45, 0x428801ae, _r); 
}

/**
 * 
 * @param hudIndex
 */
export function isFloatingHelpTextOnScreen(hudIndex: number): boolean {
	return _in(0x2432784a, 0xca090da4, hudIndex, _r); 
}

/**
 * 
 */
export function isHelpMessageBeingDisplayed(): boolean {
	return _in(0x4d79439a, 0x6b55ac67, _r); 
}

/**
 * 
 */
export function isHelpMessageFadingOut(): boolean {
	return _in(0x327edeee, 0xac55c369, _r); 
}

/**
 * 
 */
export function isHoveringOverMissionCreatorBlip(): boolean {
	return _in(0x4167efe0, 0x527d706e, _r); 
}

/**
 * ```
 * Full list of components below
 * HUD = 0;
 * HUD_WANTED_STARS = 1;
 * HUD_WEAPON_ICON = 2;
 * HUD_CASH = 3;
 * HUD_MP_CASH = 4;
 * HUD_MP_MESSAGE = 5;
 * HUD_VEHICLE_NAME = 6;
 * HUD_AREA_NAME = 7;
 * HUD_VEHICLE_CLASS = 8;
 * HUD_STREET_NAME = 9;
 * HUD_HELP_TEXT = 10;
 * HUD_FLOATING_HELP_TEXT_1 = 11;
 * HUD_FLOATING_HELP_TEXT_2 = 12;
 * HUD_CASH_CHANGE = 13;
 * HUD_RETICLE = 14;
 * HUD_SUBTITLE_TEXT = 15;
 * HUD_RADIO_STATIONS = 16;
 * HUD_SAVING_GAME = 17;
 * HUD_GAME_STREAM = 18;
 * HUD_WEAPON_WHEEL = 19;
 * HUD_WEAPON_WHEEL_STATS = 20;
 * MAX_HUD_COMPONENTS = 21;
 * MAX_HUD_WEAPONS = 22;
 * MAX_SCRIPTED_HUD_COMPONENTS = 141;
 * ```
 * @param id
 */
export function isHudComponentActive(id: number): boolean {
	return _in(0xbc4c9ea5, 0x391ecc0d, id, _r); 
}

/**
 * 
 */
export function isHudPreferenceSwitchedOn(): boolean {
	return _in(0x1930dfa7, 0x31813ec4, _r); 
}

/**
 * 
 */
export function isHudHidden(): boolean {
	return _in(0xa86478c6, 0x958735c5, _r); 
}

/**
 * 
 */
export function isMessageBeingDisplayed(): boolean {
	return _in(0x7984c03a, 0xa5cc2f41, _r); 
}

/**
 * 
 */
export function IsMinimapInInterior(): boolean {
	return _in(0x9049fe33, 0x9d5f6f6f, _r); 
}

/**
 * 
 */
export function isMinimapRendering(): boolean {
	return _in(0xaf754f20, 0xeb5cd51a, _r); 
}

/**
 * 
 * @param blip
 */
export function isMissionCreatorBlip(blip: number): boolean {
	return _in(0x26f49bf3, 0x381d933d, blip, _r); 
}

/**
 * 
 * @param gamerTagId
 */
export function isMpGamerTagActive(gamerTagId: number): boolean {
	return _in(0x4e929e7a, 0x5796fd26, gamerTagId, _r); 
}

/**
 * Returns true if the cursor is hovering above instructional buttons.
 * Note: The buttons need to support mouse (with the TOGGLE_MOUSE_SUPPORT scaleform movie method) for it to return true.
 */
export function IsMouseCursorAboveInstructionalButtons(): boolean {
	return _in(0x3d9acb1e, 0xb139e702, _r); 
}

/**
 * 
 * @param gamerTagId
 */
export function isMpGamerTagFree(gamerTagId: number): boolean {
	return _in(0x595b5178, 0xe412e199, gamerTagId, _r); 
}

/**
 * ```
 * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
 * ```
 */
export function IsMultiplayerChatActive(): boolean {
	return _in(0xb118af58, 0xb5f332a1, _r); 
}

/**
 * 
 */
export function isMpGamerTagMovieActive(): boolean {
	return _in(0x6e0eb3eb, 0x47c8d7aa, _r); 
}

/**
 * 
 * @param name
 */
export function isNamedRendertargetRegistered(name: string): boolean {
	return _in(0x78dcdc15, 0xc9f116b4, _ts(name), _r); 
}

/**
 * 
 */
export function isPauseMenuActive(): boolean {
	return _in(0xb0034a22, 0x3497ffcb, _r); 
}

/**
 * 
 * @param modelHash
 */
export function isNamedRendertargetLinked(modelHash: number): boolean {
	return _in(0x11375053, 0x8fa31298, _ch(modelHash), _r); 
}

/**
 * 
 */
export function isPauseMenuRestarting(): boolean {
	return _in(0x1c491717, 0x107431c7, _r); 
}

/**
 * 
 */
export function isNavigatingMenuContent(): any {
	return _in(0x4e3cd0ef, 0x8a489541, _r, _ri); 
}

/**
 * Returns the same as `IS_SOCIAL_CLUB_ACTIVE`.
 */
export function isOnlinePoliciesMenuActive(): boolean {
	return _in(0x6f72cd94, 0xf7b5b68c, _r); 
}

/**
 * 
 */
export function isRadarHidden(): boolean {
	return _in(0x157f93b0, 0x36700462, _r); 
}

/**
 * 
 */
export function isRadarPreferenceSwitchedOn(): boolean {
	return _in(0x9eb6522e, 0xa68f22fe, _r); 
}

/**
 * 
 */
export function isReportugcMenuOpen(): boolean {
	return _in(0x9135584d, 0x09a3437e, _r); 
}

/**
 * 
 * @param id
 */
export function isScriptedHudComponentActive(id: number): boolean {
	return _in(0xdd100eb1, 0x7a94ff65, id, _r); 
}

/**
 * 
 * @param id
 */
export function isScriptedHudComponentHiddenThisFrame(id: number): boolean {
	return _in(0x09c0403e, 0xd9a751c2, id, _r); 
}

/**
 * 
 */
export function isSocialClubActive(): boolean {
	return _in(0xc406be34, 0x3fc4b9af, _r); 
}

/**
 * ```
 * IS_*
 * ```
 * @param gamerTagId
 */
export function IsValidMpGamerTagMovie(gamerTagId: number): boolean {
	return _in(0xeb709a36, 0x958abe0d, gamerTagId, _r); 
}

/**
 * 
 * @param p0
 */
export function isStreamingAdditionalText(p0: number): boolean {
	return _in(0x8b6817b7, 0x1b85ebf0, p0, _r); 
}

/**
 * Returns true if a Warning Message or ReportUGC menu is active.
 */
export function isWarningMessageActive(): boolean {
	return _in(0xe18b138f, 0xabc53103, _r); 
}

/**
 * 
 */
export function isSubtitlePreferenceSwitchedOn(): boolean {
	return _in(0xad6daca4, 0xba53e0a4, _r); 
}

/**
 * ```
 * IS_WARNING_MESSAGE_*
 * ```
 */
export function IsWarningMessageActive2(): boolean {
	return _in(0xaf42195a, 0x42c63bba, _r); 
}

/**
 * 
 */
export function isWaypointActive(): boolean {
	return _in(0x1dd1f58f, 0x493f1da5, _r); 
}

/**
 * ```
 * Locks the minimap to the specified angle in integer degrees.
 * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
 * ```
 * @param angle
 */
export function lockMinimapAngle(angle: number): void {
	return _in(0x299faebb, 0x108ae05b, angle); 
}

/**
 * 
 * @param modelHash
 */
export function linkNamedRendertarget(modelHash: number): void {
	return _in(0xf6c09e27, 0x6aeb3f2d, _ch(modelHash)); 
}

/**
 * ```
 * Locks the minimap to the specified world position.
 * ```
 * @param x
 * @param y
 */
export function lockMinimapPosition(x: number, y: number): void {
	return _in(0x1279e861, 0xa329e73f, _fv(x), _fv(y)); 
}

/**
 * ```
 * Not present in retail version of the game, actual definiton seems to be
 * _LOG_DEBUG_INFO(const char* category, const char* debugText);
 * ```
 * @param p0
 */
export function LogDebugInfo(p0: string): void {
	return _in(0x2162c446, 0xdfdf38fd, _ts(p0)); 
}

/**
 * Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 */
export function thefeedForceRenderOff(): void {
	return _in(0x58304988, 0x4a2eee3c); 
}

/**
 * ```
 * Displays "normal" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
 * ```
 */
export function thefeedCommentTeleportPoolOff(): void {
	return _in(0xaded7f57, 0x48acafe6); 
}

/**
 * 
 */
export function openOnlinePoliciesMenu(): void {
	return _in(0x805d7cbb, 0x36fd6c4c); 
}

/**
 * ```
 * Shows a menu for reporting UGC content.
 * ```
 */
export function openReportugcMenu(): void {
	return _in(0x523a590c, 0x1a3cc0d3); 
}

/**
 * 
 * @param gxtEntryHash
 */
export function OverrideMultiplayerChatPrefix(gxtEntryHash: number): void {
	return _in(0x6a1738b4, 0x323fe2d9, _ch(gxtEntryHash)); 
}

/**
 * Uses the `SOCIAL_CLUB2` scaleform.
 */
export function openSocialClubMenu(): void {
	return _in(0x75d36917, 0x13c3b05a); 
}

/**
 * 
 * @param contextHash
 */
export function pauseMenuDeactivateContext(contextHash: number): void {
	return _in(0x444d8cf2, 0x41ec25c5, _ch(contextHash)); 
}

/**
 * 
 * @param p0
 * @param hudColor
 */
export function OverrideMultiplayerChatColour(p0: number, hudColor: number): void {
	return _in(0xf47e567b, 0x3630dd12, p0, hudColor); 
}

/**
 * Disables the loading spinner in Pause Menu when switching from one header tab to another.
 * @param toggle
 */
export function PauseMenuDisableBusyspinner(toggle: boolean): void {
	return _in(0x9245e810, 0x72704b8a, toggle); 
}

/**
 * Activates the specified frontend menu context.
 * 
 * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
 * 
 * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
 * 
 * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
 * 
 * This basically allows you to hide certain menu sections, or things like instructional buttons.
 * 
 * See the old description below for more info.
 * 
 * ***
 * 
 * > Seems to add/set the current menu context (to show/hide buttons?)
 * > Pausemenu.xml:
 * > `<Contexts>*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION</Contexts>`
 * > Code:
 * >
 * > ```
 * > if (...) {
 * >     sub_bbd34(a_0, 0, "FM_BET_HELP");
 * >     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_available}); // This native
 * >     UI::OBJECT_DECAL_TOGGLE(${bet_locked});
 * > } else {
 * >     sub_bbd34(a_0, 0, "");
 * >     UI::OBJECT_DECAL_TOGGLE(${bet_available});
 * >     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_locked}); // This native
 * > }
 * > ```
 * >
 * > OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision
 * > // Old
 * > Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, "OBJECT_DECAL_TOGGLE" is called prior.
 * @param hash
 */
export function pauseMenuActivateContext(hash: number): void {
	return _in(0xdd564bdd, 0x0472c936, _ch(hash)); 
}

/**
 * If mouse is hovering on a slot, it returns the slot's index, else it returns -1.
 */
export function PauseMenuGetIndexOfMouseHoveredSlot(): number {
	return _in(0x359af31a, 0x4b52f5ed, _r, _ri); 
}

/**
 * If mouse is hovering on a slot, it returns uniqueid of that slot, else it returns -1.
 */
export function PauseMenuGetUniqueIdOfMouseHoveredSlot(): number {
	return _in(0x13c4b962, 0x653a5280, _r, _ri); 
}

/**
 * 
 * @param contextHash
 */
export function pauseMenuIsContextActive(contextHash: number): boolean {
	return _in(0x84698ab3, 0x8d0c6636, _ch(contextHash), _r); 
}

/**
 * 
 */
export function pauseMenuIsContextMenuActive(): any {
	return _in(0x2a25adc4, 0x8f87841f, _r, _ri); 
}

/**
 * Updates instructional buttons in Pause Menu after menu contexts have been toggled. p0 purpose is currently unknown, only 0 is used in scripts.
 * @param p0
 */
export function pauseMenuRedrawInstructionalButtons(p0: number): void {
	return _in(0x4895bdea, 0x16e7c080, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function pauseMenuSetBusySpinner(p0: boolean, p1: any, p2: any): void {
	return _in(0xc78e239a, 0xc5b2ddb9, p0, p1, p2); 
}

/**
 * Shows this warning message when trying to switch pause menu header tabs: https://i.imgur.com/8qmfztu.png
 * @param setWarn
 */
export function pauseMenuSetWarnOnTabChange(setWarn: boolean): void {
	return _in(0xf06ebb91, 0xa81e09e3, setWarn); 
}

/**
 * Forces the Pause Menu to back out of unique pages such as Awards, Unlocks, Key Bindings etc
 */
export function pauseMenuceptionTheKick(): void {
	return _in(0xcdca26e8, 0x0faecb8f); 
}

/**
 * Sets current pause menu page/component to the specified value.
 * Available page IDs: https://pastebin.com/qxuhwjPT
 * @param pageId
 */
export function pauseMenuceptionGoDeeper(pageId: number): void {
	return _in(0x77f16b44, 0x7824da6c, pageId); 
}

/**
 * 
 * @param blip
 */
export function pulseBlip(blip: number): void {
	return _in(0x742d6fd4, 0x3115af73, blip); 
}

/**
 * 
 */
export function preloadBusyspinner(): void {
	return _in(0xc65ab383, 0xcd91df98); 
}

/**
 * ```
 * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
 * ```
 * @param x
 * @param y
 * @param z
 */
export function RaceGalleryAddBlip(x: number, y: number, z: number): any {
	return _in(0x551df996, 0x58db6ee8, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * ```
 * If toggle is true, the map is shown in full screen
 * If toggle is false, the map is shown in normal mode
 * ```
 * @param toggle
 */
export function RaceGalleryFullscreen(toggle: boolean): void {
	return _in(0x5354c5ba, 0x2ea868a4, toggle); 
}

/**
 * ```
 * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
 * ```
 * @param spriteId
 */
export function RaceGalleryNextBlipSprite(spriteId: number): void {
	return _in(0x1eae6dd1, 0x7b7a5efa, spriteId); 
}

/**
 * 
 * @param name
 * @param p1
 */
export function registerNamedRendertarget(name: string, p1: boolean): boolean {
	return _in(0x57d9c126, 0x35e25ce3, _ts(name), p1, _r); 
}

/**
 * 
 * @param name
 */
export function releaseNamedRendertarget(name: string): boolean {
	return _in(0xe9f6ffe8, 0x37354dd4, _ts(name), _r); 
}

/**
 * 
 */
export function refreshWaypoint(): void {
	return _in(0x81fa173f, 0x170560d1); 
}

/**
 * Removes the gamer tag associated with the provided ID. This does not happen instantly. Use [IS_MP_GAMER_TAG_FREE](#\_0x595B5178E412E199) to determine when the ID is free for reuse.
 * @param gamerTagId
 */
export function removeMpGamerTag(gamerTagId: number): void {
	return _in(0x31698aa8, 0x0e0223f8, gamerTagId); 
}

/**
 * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
 * 
 * To disable the keys, use [`0xEC9264727EEC0F28`](#\_0xEC9264727EEC0F28).
 */
export function releaseControlOfFrontend(): void {
	return _in(0x14621bb1, 0xdf14e2b2); 
}

/**
 * Removes the blip from your map.
 * @param blip
 */
export function removeBlip(): void {
	return _in(0x86a65257, 0x0e5f25dd, _i); 
}

/**
 * 
 */
export function removeMultiplayerBankCash(): void {
	return _in(0xc7c6789a, 0xa1cfedd0); 
}

/**
 * ```
 * Removes multiplayer cash hud each frame
 * ```
 */
export function removeMultiplayerHudCash(): void {
	return _in(0x968f270e, 0x39141eca); 
}

/**
 * 
 */
export function removeMultiplayerWalletCash(): void {
	return _in(0x95cf81bd, 0x06ee1887); 
}

/**
 * 
 */
export function RemoveWarningMessageListItems(): void {
	return _in(0x6ef54ab7, 0x21dc6242); 
}

/**
 * Changes the hud color at a given index (hudColorIndex) by another one (hudColorIndex2).
 * 
 * HUD colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)
 * @param hudColorIndex
 * @param hudColorIndex2
 */
export function replaceHudColour(hudColorIndex: number, hudColorIndex2: number): void {
	return _in(0x1ccc708f, 0x0f850613, hudColorIndex, hudColorIndex2); 
}

/**
 * Hud colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)
 * @param hudColorIndex
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function replaceHudColourWithRgba(hudColorIndex: number, r: number, g: number, b: number, a: number): void {
	return _in(0xf314cf4f, 0x0211894e, hudColorIndex, r, g, b, a); 
}

/**
 * ```
 * Request a gxt into the passed slot.
 * ```
 * @param gxt
 * @param slot
 */
export function requestAdditionalText(gxt: string, slot: number): void {
	return _in(0x71a78003, 0xc8e71424, _ts(gxt), slot); 
}

/**
 * 
 * @param flagIndex
 */
export function resetGlobalActionscriptFlag(flagIndex: number): void {
	return _in(0xb99c4e4d, 0x9499df29, flagIndex); 
}

/**
 * 
 * @param gxt
 * @param slot
 */
export function requestAdditionalTextForDlc(gxt: string, slot: number): void {
	return _in(0x6009f9f1, 0xae90d8a6, _ts(gxt), slot); 
}

/**
 * 
 * @param id
 */
export function resetHudComponentValues(id: number): void {
	return _in(0x450930e6, 0x16475d0d, id); 
}

/**
 * 
 */
export function resetReticuleValues(): void {
	return _in(0x12782ce0, 0xa636e9f0); 
}

/**
 * ```
 * Before using this native click the native above and look at the decription.
 * Example:
 * int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
 * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
 * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
 * This native refreshes the frontend menu.
 * p1 = Hash of Menu
 * p2 = Unknown but always works with -1.
 * ```
 * @param menuHash
 * @param p1
 */
export function restartFrontendMenu(menuHash: number, p1: number): void {
	return _in(0x10706dc6, 0xad2d49c0, _ch(menuHash), p1); 
}

/**
 * 
 * @param value
 * @param maxValue
 */
export function setAbilityBarValue(value: number, maxValue: number): void {
	return _in(0x9969599c, 0xcff5d85e, _fv(value), _fv(maxValue)); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param visible
 */
export function SetAbilityBarVisibilityInMultiplayer(visible: boolean): void {
	return _in(0x1dfedd15, 0x019315a9, visible); 
}

/**
 * ```
 * Sets alpha-channel for blip color.
 * Example:
 * Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
 * HUD::SET_BLIP_COLOUR(blip , 3);
 * HUD::SET_BLIP_ALPHA(blip , 64);
 * ```
 * @param blip
 * @param alpha
 */
export function setBlipAlpha(blip: number, alpha: number): void {
	return _in(0x45ff974e, 0xee1c8734, blip, alpha); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function setBlipAsMissionCreatorBlip(blip: number, toggle: boolean): void {
	return _in(0x24ac0137, 0x444f9fd5, blip, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param toggle
 */
export function SetAllowAbilityBarInMultiplayer(toggle: boolean): void {
	return _in(0x889329c8, 0x0fe5963c, toggle); 
}

/**
 * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
 * @param blip
 * @param toggle
 */
export function setBlipAsShortRange(blip: number, toggle: boolean): void {
	return _in(0xbe8be4fe, 0x60e27b72, blip, toggle); 
}

/**
 * Toggles the big minimap state like in GTA:Online.
 * 
 * To get the current state of the minimap, use [`IS_BIGMAP_ACTIVE`](#\_0xFFF65C63).
 * @param toggleBigMap
 * @param showFullMap
 */
export function setBigmapActive(toggleBigMap: boolean, showFullMap: boolean): void {
	return _in(0x231c8f89, 0xd0539d8f, toggleBigMap, showFullMap); 
}

/**
 * Allows the user to set a blip as friendly or enemy based on the toggle.
 * @param blip
 * @param toggle
 */
export function setBlipAsFriendly(blip: number, toggle: boolean): void {
	return _in(0x6f6f2901, 0x02c02ab4, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function setBlipBright(blip: number, toggle: boolean): void {
	return _in(0xb2039137, 0x33f27884, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param color
 */
export function setBlipColour(blip: number, color: number): void {
	return _in(0x03d7fb09, 0xe75d6b7e, blip, color); 
}

/**
 * Examples result:
 * 
 * ![](https://i.imgur.com/skY6vAJ.png)
 * 
 * **index:**
 * 
 * ```
 * 1 = No distance shown in legend
 * 2 = Distance shown in legend
 * 7 = "Other Players" category, also shows distance in legend
 * 10 = "Property" category
 * 11 = "Owned Property" category
 * ```
 * 
 * Any other value behaves like `index = 1`, `index` wraps around after 255
 * 
 * Blips with categories `7`, `10` or `11` will all show under the specific categories listing in the map legend, regardless of sprite or name.
 * 
 * **Legend entries**
 * 
 * | index | Legend entry | Label |
 * | --- | --- | --- |
 * | 7 | Other Players | `BLIP_OTHPLYR` |
 * | 10 | Property | `BLIP_PROPCAT` |
 * | 11 | Owned Property | `BLIP_APARTCAT` |
 * @param blip
 * @param index
 */
export function setBlipCategory(blip: number, index: number): void {
	return _in(0x234cdd44, 0xd996fd9a, blip, index); 
}

/**
 * **displayId Behaviour** <br>
 * 0 = Doesn't show up, ever, anywhere. <br>
 * 1 = Doesn't show up, ever, anywhere. <br>
 * 2 = Shows on both main map and minimap. (Selectable on map) <br>
 * 3 = Shows on main map only. (Selectable on map) <br>
 * 4 = Shows on main map only. (Selectable on map) <br>
 * 5 = Shows on minimap only. <br>
 * 6 = Shows on both main map and minimap. (Selectable on map) <br>
 * 7 = Doesn't show up, ever, anywhere. <br>
 * 8 = Shows on both main map and minimap. (Not selectable on map) <br>
 * 9 = Shows on minimap only. <br>
 * 10 = Shows on both main map and minimap. (Not selectable on map) <br>
 * Anything higher than 10 seems to be exactly the same as 10. <br>
 * <br>
 * Rockstar seem to only use 0, 2, 3, 4, 5 and 8 in the decompiled scripts.
 * @param blip
 * @param displayId
 */
export function setBlipDisplay(blip: number, displayId: number): void {
	return _in(0x9029b2f3, 0xda924928, blip, displayId); 
}

/**
 * 
 * @param blip
 * @param posX
 * @param posY
 * @param posZ
 */
export function setBlipCoords(blip: number, posX: number, posY: number, posZ: number): void {
	return _in(0xae2af67e, 0x9d9af65d, blip, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * ```
 * Must be toggled before being queued for animation
 * ```
 * @param blip
 * @param toggle
 */
export function SetBlipDisplayIndicatorOnBlip(blip: number, toggle: boolean): void {
	return _in(0xc4278f70, 0x131baa6d, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param opacity
 * @param duration
 */
export function setBlipFade(blip: number, opacity: number, duration: number): void {
	return _in(0x2aee8f83, 0x90d2298c, blip, opacity, duration); 
}

/**
 * Flashes blip for time in milliseconds before stopping.
 * @param blip
 * @param duration
 */
export function setBlipFlashTimer(blip: number, duration: number): void {
	return _in(0xd3cd6fd2, 0x97ae87cc, blip, duration); 
}

/**
 * Sets the interval in milliseconds before flashing the blip.
 * @param blip
 * @param interval
 */
export function setBlipFlashInterval(blip: number, interval: number): void {
	return _in(0xaa51db31, 0x3c010a7e, blip, interval); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function setBlipFlashes(blip: number, toggle: boolean): void {
	return _in(0xb1455238, 0x3d39ce3e, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function setBlipFlashesAlternate(blip: number, toggle: boolean): void {
	return _in(0x2e8d9498, 0xc56dd0d1, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function setBlipHiddenOnLegend(blip: number, toggle: boolean): void {
	return _in(0x54318c91, 0x5d27e4ce, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function setBlipHighDetail(blip: number, toggle: boolean): void {
	return _in(0xe2590bc2, 0x9220cebb, blip, toggle); 
}

/**
 * ```
 * Doesn't work if the label text of gxtEntry is >= 80.
 * ```
 * @param blip
 * @param gxtEntry
 */
export function setBlipNameFromTextFile(blip: number, gxtEntry: string): void {
	return _in(0xeaa0ffe1, 0x20d92784, blip, _ts(gxtEntry)); 
}

/**
 * ```
 * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
 * ```
 * @param blip
 * @param rotation
 */
export function setBlipRotation(blip: number, rotation: number): void {
	return _in(0xf87683cd, 0xf73c3f6e, blip, rotation); 
}

/**
 * ```
 * Enable / disable showing route for the Blip-object.
 * ```
 * @param blip
 * @param enabled
 */
export function setBlipRoute(blip: number, enabled: boolean): void {
	return _in(0x4f7d8a9b, 0xfb0b43e9, blip, enabled); 
}

/**
 * 
 * @param blip
 * @param player
 */
export function setBlipNameToPlayerName(blip: number, player: number): void {
	return _in(0x127de7b2, 0x0c60a6a3, blip, player); 
}

/**
 * ```
 * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
 * ```
 * @param blip
 * @param priority
 */
export function setBlipPriority(blip: number, priority: number): void {
	return _in(0xae9fc9ef, 0x6a9fac79, blip, priority); 
}

/**
 * 
 * @param blip
 * @param scale
 */
export function setBlipScale(blip: number, scale: number): void {
	return _in(0xd3874416, 0x7b2fa257, blip, _fv(scale)); 
}

/**
 * 
 * @param blip
 * @param colour
 */
export function setBlipRouteColour(blip: number, colour: number): void {
	return _in(0x837155cd, 0x2f63da09, blip, colour); 
}

/**
 * See https://imgur.com/a/lLkEsMN
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param blip
 * @param xScale
 * @param yScale
 */
export function SetBlipScaleTransformation(blip: number, xScale: number, yScale: number): void {
	return _in(0xcd652443, 0x9909c979, blip, _fv(xScale), _fv(yScale)); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param blip
 * @param toggle
 */
export function setBlipShowCone(blip: number, toggle: boolean): void {
	return _in(0x13127ec3, 0x665e8ee1, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param r
 * @param g
 * @param b
 */
export function setBlipSecondaryColour(blip: number, r: number, g: number, b: number): void {
	return _in(0x14892474, 0x891e09eb, blip, r, g, b); 
}

/**
 * <!--
 * _loc1_.map((name, idx) => `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\n')
 * -->
 * 
 * Sets the displayed sprite for a specific blip.
 * 
 * There's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.
 * @param blip
 * @param spriteId
 */
export function setBlipSprite(blip: number, spriteId: number): void {
	return _in(0xdf735600, 0xa4696daf, blip, spriteId); 
}

/**
 * ```
 * Makes a blip go small when off the minimap.
 * SET_BLIP_AS_*
 * ```
 * @param blip
 * @param toggle
 */
export function SetBlipShrink(blip: number, toggle: boolean): void {
	return _in(0x2b6d467d, 0xab714e8d, blip, toggle); 
}

/**
 * ```
 * Does not require whole number/integer rotations.
 * ```
 * @param blip
 * @param heading
 */
export function SetBlipSquaredRotation(blip: number, heading: number): void {
	return _in(0xa8b6afda, 0xc320ac87, blip, _fv(heading)); 
}

/**
 * 
 * @param hudColor
 */
export function setColourOfNextTextComponent(hudColor: number): void {
	return _in(0x39bbf623, 0xfc803eac, hudColor); 
}

/**
 * 
 * @param hudIndex
 * @param x
 * @param y
 */
export function setFloatingHelpTextScreenPosition(hudIndex: number, x: number, y: number): void {
	return _in(0x7679cc1b, 0xcebe3d4c, hudIndex, _fv(x), _fv(y)); 
}

/**
 * ```
 * SET_*
 * ```
 */
export function SetDirectorModeClearTriggeredFlag(): void {
	return _in(0x2632482f, 0xd6b9ab87); 
}

/**
 * 
 * @param hudIndex
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function setFloatingHelpTextStyle(hudIndex: number, p1: number, p2: number, p3: number, p4: number, p5: number): void {
	return _in(0x788e7fd4, 0x31bd67f1, hudIndex, p1, p2, p3, p4, p5); 
}

/**
 * 
 * @param hudIndex
 * @param entity
 * @param offsetX
 * @param offsetY
 */
export function setFloatingHelpTextToEntity(hudIndex: number, entity: number, offsetX: number, offsetY: number): void {
	return _in(0xb094bc1d, 0xb4018240, hudIndex, entity, _fv(offsetX), _fv(offsetY)); 
}

/**
 * 
 * @param hudIndex
 * @param x
 * @param y
 * @param z
 */
export function setFloatingHelpTextWorldPosition(hudIndex: number, x: number, y: number, z: number): void {
	return _in(0x784ba7e0, 0xeceb4178, hudIndex, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param active
 */
export function setFrontendActive(active: boolean): void {
	return _in(0x745711a7, 0x5ab09277, active); 
}

/**
 * 
 * @param toggle
 * @param radarThickness
 * @param mapThickness
 */
export function setGpsCustomRouteRender(toggle: boolean, radarThickness: number, mapThickness: number): void {
	return _in(0x900086f3, 0x71220b6f, toggle, radarThickness, mapThickness); 
}

/**
 * 
 * @param toggle
 */
export function setGpsMultiRouteRender(toggle: boolean): void {
	return _in(0x3dda3712, 0x8dd1aca8, toggle); 
}

/**
 * ```
 * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
 * Doesn't seem like the flags are actually read by the game at all.
 * ```
 * @param p0
 * @param p1
 */
export function setGpsFlags(p0: number, p1: number): void {
	return _in(0x5b440763, 0xa4c8d15b, p0, _fv(p1)); 
}

/**
 * 
 * @param style
 * @param hudColor
 * @param alpha
 * @param p3
 * @param p4
 */
export function SetHelpMessageTextStyle(style: number, hudColor: number, alpha: number, p3: number, p4: number): void {
	return _in(0xb9c362ba, 0xbecddc7a, style, hudColor, alpha, p3, p4); 
}

/**
 * 
 * @param toggle
 */
export function setGpsFlashes(toggle: boolean): void {
	return _in(0x320d0e0d, 0x936a0e9b, toggle); 
}

/**
 * 
 * @param health
 * @param capacity
 * @param wasAdded
 */
export function setHealthHudDisplayValues(health: number, capacity: number, wasAdded: boolean): void {
	return _in(0x3f5cc444, 0xdcaaa8f2, health, capacity, wasAdded); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param toggle
 */
export function SetInteriorZoomLevelDecreased(toggle: boolean): void {
	return _in(0x7ec8aba5, 0xe74b3d7a, toggle); 
}

/**
 * 
 * @param id
 * @param x
 * @param y
 */
export function setHudComponentPosition(id: number, x: number, y: number): void {
	return _in(0xaabb1f56, 0xe2a17ced, id, _fv(x), _fv(y)); 
}

/**
 * 
 * @param color
 */
export function SetMainPlayerBlipColour(color: number): void {
	return _in(0x7b21e0bb, 0x01e8224a, color); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param toggle
 */
export function SetInteriorZoomLevelIncreased(toggle: boolean): void {
	return _in(0x504dfe62, 0xa1692296, toggle); 
}

/**
 * 
 * @param maximumValue
 */
export function setMaxHealthHudDisplay(maximumValue: number): void {
	return _in(0x975d66a0, 0xbc17064c, maximumValue); 
}

/**
 * 
 * @param maximumValue
 */
export function setMaxArmourHudDisplay(maximumValue: number): void {
	return _in(0x06a32053, 0x5f5f0248, maximumValue); 
}

/**
 * ```
 * Argument must be 0.0f or above 38.0f, or it will be ignored.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param altitude
 * @param p1
 */
export function SetMinimapAltitudeIndicatorLevel(altitude: number, p1: boolean): void {
	return _in(0xd201f3ff, 0x917a506d, _fv(altitude), p1); 
}

/**
 * 
 * @param toggle
 */
export function setMinimapBlockWaypoint(toggle: boolean): void {
	return _in(0x58fadded, 0x207897dc, toggle); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function setMinimapFowRevealCoordinate(x: number, y: number, z: number): void {
	return _in(0x0923dbf8, 0x7dff735e, _fv(x), _fv(y), _fv(z)); 
}

/**
 * This native is used to colorize certain map components like the army base at the top of the map.
 * 
 * An incomplete list of components ID:
 * 
 * 0: Los Santos' air port yellow lift-off markers.
 * 1: Sandy Shore's air port yellow lift-off markers.
 * 2: Trevor's air port yellow lift-off markers.
 * 6: Vespucci Beach lifeguard building.
 * 15: Army base.
 * 
 * [List of hud colors](https://docs.fivem.net/docs/game-references/hud-colors/)
 * @param componentID
 * @param toggle
 * @param hudColor
 */
export function setMinimapComponent(componentID: number, toggle: boolean, hudColor: number): any {
	return _in(0x75a9a109, 0x48d1dea6, componentID, toggle, hudColor, _r, _ri); 
}

/**
 * Not much is known so far on what it does *exactly*.
 * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
 * 
 * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
 * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
 * 
 * Use [`N_0x35edd5b2e3ff01c0()`](https://runtime.fivem.net/doc/reference.html#\_0x35EDD5B2E3FF01C0) to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
 * @param hole
 */
export function setMinimapGolfCourse(hole: number): void {
	return _in(0x71bdb63d, 0xbaf8da59, hole); 
}

/**
 * 
 */
export function setMinimapGolfCourseOff(): void {
	return _in(0x35edd5b2, 0xe3ff01c0); 
}

/**
 * ```
 * If true, the entire map will be revealed.
 * ```
 * @param toggle
 */
export function setMinimapHideFow(toggle: boolean): void {
	return _in(0xf8dee0a5, 0x600cbb93, toggle); 
}

/**
 * ```
 * Toggles the North Yankton map
 * ```
 * @param toggle
 */
export function setMinimapInPrologue(toggle: boolean): void {
	return _in(0x9133955f, 0x1a2da957, toggle); 
}

/**
 * 
 * @param toggle
 * @param ped
 */
export function setMinimapInSpectatorMode(toggle: boolean, ped: number): void {
	return _in(0x1a5cd775, 0x2dd28cd3, toggle, ped); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function setMissionName(p0: boolean, name: string): void {
	return _in(0x5f28ecf5, 0xfc84772f, p0, _ts(name)); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param toggle
 */
export function SetMinimapSonarEnabled(toggle: boolean): void {
	return _in(0x6b50fc87, 0x49632ec1, toggle); 
}

/**
 * ```
 * Changes the mouse cursor's sprite.
 * public enum CursorType
 * {
 * None = 0,
 * Normal = 1,
 * TransparentNormal = 2,
 * PreGrab = 3,
 * Grab = 4,
 * MiddleFinger = 5,
 * LeftArrow = 6,
 * RightArrow = 7,
 * UpArrow = 8,
 * DownArrow = 9,
 * HorizontalExpand = 10,
 * Add = 11,
 * Remove = 12,
 * }
 * ```
 * @param spriteId
 */
export function SetMouseCursorSprite(spriteId: number): void {
	return _in(0x8db8cffd, 0x58b62552, spriteId); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function SetMissionName2(p0: boolean, name: string): void {
	return _in(0xe45087d8, 0x5f468bc2, p0, _ts(name)); 
}

/**
 * ```
 * Shows the cursor on screen for one frame.
 * ```
 */
export function SetMouseCursorActiveThisFrame(): void {
	return _in(0xaae7ce1d, 0x63167423); 
}

/**
 * ```
 * Sets flag's sprite transparency. 0-255.
 * ```
 * @param gamerTagId
 * @param component
 * @param alpha
 */
export function setMpGamerTagAlpha(gamerTagId: number, component: number, alpha: number): void {
	return _in(0xd48fe545, 0xcd46f857, gamerTagId, component, alpha); 
}

/**
 * Shows/hides the frontend cursor on the pause menu or similar menus.
 * Clicking off and then on the game window will show it again.
 * @param enable
 */
export function SetMouseCursorVisibleInMenus(enable: boolean): void {
	return _in(0x98215325, 0xa695e78a, enable); 
}

/**
 * Sets a gamer tag's component colour
 * @param gamerTagId
 * @param component
 * @param hudColorIndex
 */
export function setMpGamerTagColour(gamerTagId: number, component: number, hudColorIndex: number): void {
	return _in(0x613ed644, 0x950626ae, gamerTagId, component, hudColorIndex); 
}

/**
 * 
 * @param gamerTagId
 * @param string
 */
export function setMpGamerTagBigText(gamerTagId: number, string: string): void {
	return _in(0x7b772374, 0x7ccb55b6, gamerTagId, _ts(string)); 
}

/**
 * Should be enabled as component (2). Has 0 alpha by default.
 * @param gamerTagId
 * @param hudColorIndex
 */
export function setMpGamerTagHealthBarColour(gamerTagId: number, hudColorIndex: number): void {
	return _in(0x3158c77a, 0x7e888ab4, gamerTagId, hudColorIndex); 
}

/**
 * By default, the player health value shown by a gamer tag's health bar is synchronised with the health of the ped it is attached to.
 * This native disables that behaviour, allowing [`_SET_MP_GAMER_TAG_OVERRIDE_PLAYER_HEALTH`](#\_0x1563FE35E9928E67) to have an effect.
 * @param gamerTagId
 * @param toggle
 */
export function SetMpGamerTagDisablePlayerHealthSync(gamerTagId: number, toggle: boolean): void {
	return _in(0xd29ec58c, 0x2f6b5014, gamerTagId, toggle); 
}

/**
 * ```
 * displays wanted star above head
 * ```
 * @param gamerTagId
 * @param count
 */
export function SetMpGamerTagMpBagLargeCount(gamerTagId: number, count: number): void {
	return _in(0x9c16459b, 0x2324b2cf, gamerTagId, count); 
}

/**
 * 
 * @param gamerTagId
 * @param string
 */
export function setMpGamerTagName(gamerTagId: number, string: string): void {
	return _in(0xdea2b828, 0x3baa3944, gamerTagId, _ts(string)); 
}

/**
 * Sets the health bar of a gamer tag to show the health of the last (or current) vehicle of the ped the gamer tag is attached to.
 * The vehicle health value is stored separate from the player health and using it won't clear any player health overrides.
 * @param gamerTagId
 * @param toggle
 */
export function SetMpGamerTagUseVehicleHealth(gamerTagId: number, toggle: boolean): void {
	return _in(0xa67f9c46, 0xd612b6f1, gamerTagId, toggle); 
}

/**
 * Manually sets the player health value for a gamer tag, using the maximum health to calculate what percentage of the bar should be filled.
 * Has no effect unless [\_SET_MP_GAMER_TAG_DISABLE_PLAYER_HEALTH_SYNC](#\_0xD29EC58C2F6B5014) has been called prior to disable synchronisation with the attached ped.
 * @param gamerTagId
 * @param health
 * @param maximumHealth
 */
export function SetMpGamerTagOverridePlayerHealth(gamerTagId: number, health: number, maximumHealth: number): void {
	return _in(0x1563fe35, 0xe9928e67, gamerTagId, health, maximumHealth); 
}

/**
 * ```cpp
 * enum eMpGamerTagComponent
 * {
 * MP_TAG_GAMER_NAME,
 * MP_TAG_CREW_TAG,
 * MP_TAG_HEALTH_ARMOUR,
 * MP_TAG_BIG_TEXT,
 * MP_TAG_AUDIO_ICON,
 * MP_TAG_USING_MENU,
 * MP_TAG_PASSIVE_MODE,
 * MP_TAG_WANTED_STARS,
 * MP_TAG_DRIVER,
 * MP_TAG_CO_DRIVER,
 * MP_TAG_TAGGED,
 * MP_TAG_GAMER_NAME_NEARBY,
 * MP_TAG_ARROW,
 * MP_TAG_PACKAGES,
 * MP_TAG_INV_IF_PED_FOLLOWING,
 * MP_TAG_RANK_TEXT,
 * MP_TAG_TYPING,
 * MP_TAG_BAG_LARGE,
 * MP_TAG_ARROW,
 * MP_TAG_GANG_CEO,
 * MP_TAG_GANG_BIKER,
 * MP_TAG_BIKER_ARROW,
 * MP_TAG_MC_ROLE_PRESIDENT,
 * MP_TAG_MC_ROLE_VICE_PRESIDENT,
 * MP_TAG_MC_ROLE_ROAD_CAPTAIN,
 * MP_TAG_MC_ROLE_SARGEANT,
 * MP_TAG_MC_ROLE_ENFORCER,
 * MP_TAG_MC_ROLE_PROSPECT,
 * MP_TAG_TRANSMITTER,
 * MP_TAG_BOMB
 * };
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param gamerTagId
 * @param component
 * @param toggle
 */
export function setMpGamerTagVisibility(gamerTagId: number, component: number, toggle: boolean): void {
	return _in(0x63bb75ab, 0xedc1f6a0, gamerTagId, component, toggle); 
}

/**
 * Sets the visibility of all components of the gamer tag to the specified value.
 * @param gamerTagId
 * @param toggle
 */
export function SetMpGamerTagVisibilityAll(gamerTagId: number, toggle: boolean): void {
	return _in(0xee76ff7e, 0x6a0166b0, gamerTagId, toggle); 
}

/**
 * ```
 * displays wanted star above head
 * ```
 * @param gamerTagId
 * @param wantedlvl
 */
export function setMpGamerTagWantedLevel(gamerTagId: number, wantedlvl: number): void {
	return _in(0xcf228e2a, 0xa03099c3, gamerTagId, wantedlvl); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * @param p0
 * @param p1
 */
export function setMultiplayerHudCash(p0: number, p1: number): void {
	return _in(0xfd1d2203, 0x94bcb824, p0, p1); 
}

/**
 * Preview image:
 * 
 * ![](https://i.imgur.com/1BTmdyv.png)
 * 
 * To change the bank balance use [`STAT_SET_INT`](#\_0xB3271D7AB655B441) with "BANK_BALANCE" to whatever value you need to.
 */
export function setMultiplayerBankCash(): void {
	return _in(0xdd21b55d, 0xf695cd0a); 
}

/**
 * 
 * @param x
 * @param y
 */
export function setNewWaypoint(x: number, y: number): void {
	return _in(0xfe43368d, 0x2aa4f2fc, _fv(x), _fv(y)); 
}

/**
 * Preview image:
 * 
 * ![](https://i.imgur.com/1BTmdyv.png)
 * 
 * To change money value use [`STAT_SET_INT`](#\_0xB3271D7AB655B441) with "MP0\_WALLET_BALANCE" to whatever value you need to.
 */
export function setMultiplayerWalletCash(): void {
	return _in(0xc2d15bef, 0x167e27bc); 
}

/**
 * Toggles the light state for the pause menu ped in frontend menus.
 * 
 * This is used by R\* in combination with [`SET_PAUSE_MENU_PED_SLEEP_STATE`](#\_0xECF128344E9FF9F1) to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
 * 
 * Example:
 * On: ![lights on](https://vespura.com/hi/i/2019-04-01\_16-09\_540ee\_1015.png)
 * Off: ![lights off](https://vespura.com/hi/i/2019-04-01\_16-10\_8b5e7\_1016.png)
 * @param state
 */
export function setPauseMenuPedLighting(state: boolean): void {
	return _in(0x3ca60506, 0x92bc61b0, state); 
}

/**
 * 
 * @param toggle
 */
export function setPauseMenuActive(toggle: boolean): void {
	return _in(0xdf47fc56, 0xc71569cf, toggle); 
}

/**
 * Toggles the pause menu ped sleep state for frontend menus.
 * 
 * [Example GIF](https://vespura.com/hi/i/2019-04-01\_15-51\_8ed38\_1014.gif)
 * @param state
 */
export function setPauseMenuPedSleepState(state: boolean): void {
	return _in(0xecf12834, 0x4e9ff9f1, state); 
}

/**
 * ```
 * if "flag" is true, the AI blip will always be displayed for the specified ped, if it has an AI blip
 * If "flag" is false, the AI blip will only be displayed when the player is in combat with the specified ped, if it has an AI blip
 * ```
 * @param ped
 * @param toggle
 */
export function setPedAiBlipForcedOn(ped: number, toggle: boolean): void {
	return _in(0x0c4bbf62, 0x5ca98c4e, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param gangId
 */
export function setPedAiBlipGangId(ped: number, gangId: number): void {
	return _in(0xe52b8e7f, 0x85d39a08, ped, gangId); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedAiBlipHasCone(ped: number, toggle: boolean): void {
	return _in(0x3eed80df, 0xf7325caa, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param range
 */
export function setPedAiBlipNoticeRange(ped: number, range: number): void {
	return _in(0x97c65887, 0xd4b37fa9, ped, _fv(range)); 
}

/**
 * 
 * @param ped
 * @param spriteId
 */
export function SetPedAiBlipSprite(ped: number, spriteId: number): void {
	return _in(0xfcfacd0d, 0xb9d7a57d, ped, spriteId); 
}

/**
 * 
 * @param ped
 * @param hasCone
 * @param color
 */
export function SetPedHasAiBlipWithColor(ped: number, hasCone: boolean, color: number): void {
	return _in(0xb13dcb4c, 0x6faad238, ped, hasCone, color); 
}

/**
 * ```
 * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
 * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
 * ```
 * @param ped
 * @param hasCone
 */
export function setPedHasAiBlip(ped: number, hasCone: boolean): void {
	return _in(0xd30c50df, 0x888d58b5, ped, hasCone); 
}

/**
 * ```
 * Sets the position of the arrow icon representing the player on both the minimap and world map.
 * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
 * ```
 * @param x
 * @param y
 */
export function SetPlayerBlipPositionThisFrame(x: number, y: number): void {
	return _in(0x77e2dd17, 0x7910e1cf, _fv(x), _fv(y)); 
}

/**
 * ```
 * If toggle is true, hides special ability bar / character name in the pause menu
 * If toggle is false, shows special ability bar / character name in the pause menu
 * SET_PLAYER_*
 * ```
 * @param toggle
 */
export function SetPlayerIsInDirectorMode(toggle: boolean): void {
	return _in(0x80851937, 0x3fd336a3, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setRaceTrackRender(toggle: boolean): void {
	return _in(0x1eac5f91, 0xbcbc5073, toggle); 
}

/**
 * 
 */
export function setRadarAsExteriorThisFrame(): void {
	return _in(0xe81b7d2a, 0x3dab2d81); 
}

/**
 * ```
 * List of interior hashes: pastebin.com/1FUyXNqY
 * Not for every interior zoom > 0 available.
 * ```
 * @param interior
 * @param x
 * @param y
 * @param heading
 * @param zoom
 */
export function setRadarAsInteriorThisFrame(interior: number, x: number, y: number, heading: number, zoom: number): void {
	return _in(0x59e727a1, 0xc9d3e31a, _ch(interior), _fv(x), _fv(y), heading, zoom); 
}

/**
 * ```
 * zoomLevel ranges from 0 to 200
 * ```
 * @param zoomLevel
 */
export function setRadarZoom(zoomLevel: number): void {
	return _in(0x096ef57a, 0x0c999bba, zoomLevel); 
}

/**
 * 
 * @param zoom
 */
export function setRadarZoomPrecise(zoom: number): void {
	return _in(0xbd12c5ee, 0xe184c337, _fv(zoom)); 
}

/**
 * 
 * @param blip
 * @param zoom
 */
export function setRadarZoomToBlip(blip: number, zoom: number): void {
	return _in(0xf98e4b3e, 0x56afc7b1, blip, _fv(zoom)); 
}

/**
 * 
 * @param zoom
 */
export function setRadarZoomToDistance(zoom: number): void {
	return _in(0xcb7cc0d5, 0x8405ad41, _fv(zoom)); 
}

/**
 * ```
 * Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
 * ```
 * @param blip
 * @param toggle
 */
export function setRadiusBlipEdge(blip: number, toggle: boolean): void {
	return _in(0x25615540, 0xd894b814, blip, toggle); 
}

/**
 * ```
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
 * ```
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function SetScriptVariable2HudColour(r: number, g: number, b: number, a: number): void {
	return _in(0x16a304e6, 0xcb2bfab9, r, g, b, a); 
}

/**
 * ```
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
 * ```
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setScriptVariableHudColour(r: number, g: number, b: number, a: number): void {
	return _in(0xd68a5ff8, 0xa3a89874, r, g, b, a); 
}

/**
 * 
 * @param align
 */
export function setTextCentre(align: boolean): void {
	return _in(0xc02f4dbf, 0xb51d988b, align); 
}

/**
 * ```
 * HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
 * HUD::SET_SOCIAL_CLUB_TOUR("Missions");
 * HUD::SET_SOCIAL_CLUB_TOUR("General");
 * HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
 * ```
 * @param name
 */
export function setSocialClubTour(name: string): void {
	return _in(0x9e778248, 0xd6685fe0, _ts(name)); 
}

/**
 * 
 */
export function setTextDropShadow(): void {
	return _in(0x1ca3e9ea, 0xc9d93e5e); 
}

/**
 * ```
 * colors you input not same as you think?
 * A: for some reason its R B G A
 * ```
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setTextColour(red: number, green: number, blue: number, alpha: number): void {
	return _in(0xbe6b23ff, 0xa53fb442, red, green, blue, alpha); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * @param p0
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setTextEdge(p0: number, r: number, g: number, b: number, a: number): void {
	return _in(0x44160324, 0x0d202fa6, p0, r, g, b, a); 
}

/**
 * distance - shadow distance in pixels, both horizontal and vertical
 * r, g, b, a - color
 * @param distance
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void {
	return _in(0x465c84bc, 0x39f1c351, distance, r, g, b, a); 
}

/**
 * ```
 * fonts that mess up your text where made for number values/misc stuff
 * ```
 * @param fontType
 */
export function setTextFont(fontType: number): void {
	return _in(0x66e0276c, 0xc5f6b9da, fontType); 
}

/**
 * ```
 * Types -
 * 0: Center-Justify
 * 1: Left-Justify
 * 2: Right-Justify
 * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
 * ```
 * @param justifyType
 */
export function setTextJustification(justifyType: number): void {
	return _in(0x4e096588, 0xb13ffeca, justifyType); 
}

/**
 * 
 * @param p0
 */
export function setTextLeading(p0: number): void {
	return _in(0xa50abc31, 0xe3cdfaff, p0); 
}

/**
 * 
 */
export function setTextOutline(): void {
	return _in(0x2513dfb0, 0xfb8400fe); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * @param p0
 */
export function setTextProportional(p0: boolean): void {
	return _in(0x038c1f51, 0x7d7fdcf8, p0); 
}

/**
 * 
 * @param toggle
 */
export function setTextRightJustify(toggle: boolean): void {
	return _in(0x6b3c4650, 0xbc8bee47, toggle); 
}

/**
 * 
 * @param renderId
 */
export function setTextRenderId(renderId: number): void {
	return _in(0x5f153029, 0x36e07111, renderId); 
}

/**
 * ```
 * Size range : 0F to 1.0F
 * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
 * ```
 * @param scale
 * @param size
 */
export function setTextScale(scale: number, size: number): void {
	return _in(0x07c837f9, 0xa01c34c9, _fv(scale), _fv(size)); 
}

/**
 * Toggles the Cayo Perico map.
 * 
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param toggle
 */
export function SetToggleMinimapHeistIsland(toggle: boolean): void {
	return _in(0x5e146062, 0x4d194a38, toggle); 
}

/**
 * ```
 * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
 * start - left boundry on screen position (0.0 - 1.0)
 * end - right boundry on screen position (0.0 - 1.0)
 * ```
 * @param start
 * @param end
 */
export function setTextWrap(start: number, end: number): void {
	return _in(0x63145d9c, 0x883a1a70, _fv(start), _fv(end)); 
}

/**
 * Sets a global mode which makes the pause menu map show 'Destination' instead of 'Waypoint' in the key legend on the
 * bottom of the screen.
 * 
 * <!--
 * 
 * Name guess:
 * 
 * - alphabetical function order, below [SET_USER_RADIO_CONTROL_ENABLED, SET_USE_HI_DOF], above SET_VARIABLE_ON_SOUND.
 * 
 * -->
 * @param toggle
 */
export function SetUseWaypointAsDestination(toggle: boolean): void {
	return _in(0x6cdd5814, 0x6a436083, toggle); 
}

/**
 * instructionalKey enum list:
 * 
 * ```
 * Buttons = {
 * Empty = 0,
 * Select = 1, -- (RETURN)
 * Ok = 2, -- (RETURN)
 * Yes = 4, -- (RETURN)
 * Back = 8, -- (ESC)
 * Cancel = 16, -- (ESC)
 * No = 32, -- (ESC)
 * RetrySpace = 64, -- (SPACE)
 * Restart = 128, -- (SPACE)
 * Skip = 256, -- (SPACE)
 * Quit = 512, -- (ESC)
 * Adjust = 1024, -- (ARROWS)
 * SpaceKey = 2048, -- (SPACE)
 * Share = 4096, -- (SPACE)
 * SignIn = 8192, -- (SPACE)
 * Continue = 16384, -- (RETURN)
 * AdjustLeftRight = 32768, -- (SCROLL L/R)
 * AdjustUpDown = 65536, -- (SCROLL U/D)
 * Overwrite = 131072, -- (SPACE)
 * SocialClubSignup = 262144, -- (RETURN)
 * Confirm = 524288, -- (RETURN)
 * Queue = 1048576, -- (RETURN)
 * RetryReturn = 2097152, -- (RETURN)
 * BackEsc = 4194304, -- (ESC)
 * SocialClub = 8388608, -- (RETURN)
 * Spectate = 16777216, -- (SPACE)
 * OkEsc = 33554432, -- (ESC)
 * CancelTransfer = 67108864, -- (ESC)
 * LoadingSpinner = 134217728,
 * NoReturnToGTA = 268435456, -- (ESC)
 * CancelEsc = 536870912, -- (ESC)
 * }
 * 
 * Alt = {
 * Empty = 0,
 * No = 1, -- (SPACE)
 * Host = 2, -- (ESC)
 * SearchForJob = 4, -- (RETURN)
 * ReturnKey = 8, -- (TURN)
 * Freemode = 16, -- (ESC)
 * }
 * ```
 * 
 * **Result of the example code:** <https://i.imgur.com/TvmNF4k.png>
 * @param labelTitle
 * @param labelMsg
 * @param p2
 * @param p3
 * @param labelMsg2
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param background
 * @param errorCode
 */
export function SetWarningMessageWithAlert(labelTitle: string, labelMsg: string, p2: number, p3: number, labelMsg2: string, p5: boolean, p6: number, p7: number, p8: string, p9: string, background: boolean, errorCode: number): void {
	return _in(0x15803fec, 0x3b9a872b, _ts(labelTitle), _ts(labelMsg), p2, p3, _ts(labelMsg2), p5, p6, p7, _ts(p8), _ts(p9), background, errorCode); 
}

/**
 * **instructionalKey enum list**:
 * 
 * ```
 * enum INSTRUCTIONAL_BUTTON_TYPES
 * {
 * NONE = 0,
 * SELECT = 1,
 * OK = 2,
 * YES = 4,
 * BACK = 8,
 * BACK_SELECT = 9,
 * BACK_OK = 10,
 * BACK_YES = 12,
 * CANCEL = 16,
 * CANCEL_SELECT = 17,
 * CANCEL_OK = 18,
 * CANCEL_YES = 20,
 * NO = 32,
 * NO_SELECT = 33,
 * NO_OK = 34,
 * YES_NO = 36,
 * RETRY = 64,
 * RETRY_SELECT = 65,
 * RETRY_OK = 66,
 * RETRY_YES = 68,
 * RETRY_BACK = 72,
 * RETRY_BACK_SELECT = 73,
 * RETRY_BACK_OK = 74,
 * RETRY_BACK_YES = 76,
 * RETRY_CANCEL = 80,
 * RETRY_CANCEL_SELECT = 81,
 * RETRY_CANCEL_OK = 82,
 * RETRY_CANCEL_YES = 84,
 * SKIP = 256,
 * SKIP_SELECT = 257,
 * SKIP_OK = 258,
 * SKIP_YES = 260,
 * SKIP_BACK = 264,
 * SKIP_BACK_SELECT = 265,
 * SKIP_BACK_OK = 266,
 * SKIP_BACK_YES = 268,
 * SKIP_CANCEL = 272,
 * SKIP_CANCEL_SELECT = 273,
 * SKIP_CANCEL_OK = 274,
 * SKIP_CANCEL_YES = 276,
 * CONTINUE = 16384,
 * BACK_CONTINUE = 16392,
 * CANCEL_CONTINUE = 16400,
 * LOADING_SPINNER = 134217728,
 * SELECT_LOADING_SPINNER = 134217729,
 * OK_LOADING_SPINNER = 134217730,
 * YES_LOADING_SPINNER = 134217732,
 * BACK_LOADING_SPINNER = 134217736,
 * BACK_SELECT_LOADING_SPINNER = 134217737,
 * BACK_OK_LOADING_SPINNER = 134217738,
 * BACK_YES_LOADING_SPINNER = 134217740,
 * CANCEL_LOADING_SPINNER = 134217744,
 * CANCEL_SELECT_LOADING_SPINNER = 134217745,
 * CANCEL_OK_LOADING_SPINNER = 134217746,
 * CANCEL_YES_LOADING_SPINNER = 134217748
 * }
 * ```
 * 
 * Note: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations.
 * 
 * **Result of the example code:**
 * <https://i.imgur.com/imwoimm.png>
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p3
 * @param p4
 * @param background
 * @param p6
 * @param showBg
 * @param errorCode
 */
export function setWarningMessage(entryLine1: string, instructionalKey: number, entryLine2: string, p3: boolean, p4: number, background: string, p6: string, showBg: boolean, errorCode: number): void {
	return _in(0x7b1776b3, 0xb53f8d74, _ts(entryLine1), instructionalKey, _ts(entryLine2), p3, p4, _ts(background), _ts(p6), showBg, errorCode); 
}

/**
 * ```
 * Param names copied from the corresponding scaleform function "SET_LIST_ROW"
 * ```
 * @param index
 * @param name
 * @param cash
 * @param rp
 * @param lvl
 * @param colour
 */
export function SetWarningMessageListRow(index: number, name: string, cash: number, rp: number, lvl: number, colour: number): boolean {
	return _in(0x0c5a80a9, 0xe096d529, index, _ts(name), cash, rp, lvl, colour, _r); 
}

/**
 * ```
 * You can only use text entries. No custom text.
 * C# Example :
 * Function.Call(Hash._SET_WARNING_MESSAGE_2, "HUD_QUIT", "HUD_CGIGNORE", 2, "HUD_CGINVITE", 0, -1, 0, 0, 1);
 * you can recreate this easily with scaleforms
 * ---------------
 * Fixed native name, from before nativedb restoration.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 10: Any p9
 * ```
 * @param titleMsg
 * @param entryLine1
 * @param flags
 * @param promptMsg
 * @param p4
 * @param p5
 * @param background
 * @param p7
 * @param showBg
 */
export function setWarningMessageWithHeader(titleMsg: string, entryLine1: string, flags: number, promptMsg: string, p4: boolean, p5: any, background: boolean, showBg: boolean): void {
	return _in(0xdc38cc1e, 0x35b6a5d7, _ts(titleMsg), _ts(entryLine1), flags, _ts(promptMsg), p4, p5, background, _i, showBg); 
}

/**
 * ```
 * You can only use text entries. No custom text.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 11: Any p10
 * ```
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function setWarningMessageWithHeaderAndSubstringFlags(entryHeader: string, entryLine1: string, instructionalKey: any, entryLine2: string, p4: boolean, p5: any, p6: any, p9: boolean): void {
	return _in(0x70191948, 0x2c74b5ab, _ts(entryHeader), _ts(entryLine1), instructionalKey, _ts(entryLine2), p4, p5, p6, _i, _i, p9); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param entryHeader
 * @param entryLine1
 * @param flags
 * @param entryLine2
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param showBg
 * @param p9
 * @param p10
 */
export function SetWarningMessageWithHeaderUnk(entryHeader: string, entryLine1: string, flags: number, entryLine2: string, p4: boolean, p5: any, showBg: boolean, p9: any, p10: any): void {
	return _in(0x38b55259, 0xc2e078ed, _ts(entryHeader), _ts(entryLine1), flags, _ts(entryLine2), p4, p5, _i, _i, showBg, p9, p10); 
}

/**
 * ```
 * This native removes the current waypoint from the map.
 * Example:
 * C#:
 * Function.Call(Hash.SET_WAYPOINT_OFF);
 * C++:
 * HUD::SET_WAYPOINT_OFF();
 * ```
 */
export function setWaypointOff(): void {
	return _in(0xa7e4e2d3, 0x61c2627f); 
}

/**
 * 
 * @param p0
 */
export function setWidescreenFormat(p0: any): void {
	return _in(0xc3b07ba0, 0x0a83b0f1, p0); 
}

/**
 * Highlights a blip by a half cyan circle on the right side of the blip. ![](https://i.imgur.com/FrV9M4e.png) Indicating that that player is a friend (in GTA:O). This color can not be changed.
 * 
 * To toggle the left side (crew member indicator) of the half circle around the blip, use: [`SHOW_CREW_INDICATOR_ON_BLIP`](#\_0xDCFB5D4DB8BF367E).
 * @param blip
 * @param toggle
 */
export function showFriendIndicatorOnBlip(blip: number, toggle: boolean): void {
	return _in(0x23c3eb80, 0x7312f01a, blip, toggle); 
}

/**
 * Enables or disables the blue half circle ![](https://i.imgur.com/iZes9Ec.png) around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using [`SET_BLIP_SECONDARY_COLOUR`](#\_0x14892474891E09EB).
 * 
 * To toggle the right side of the circle use: [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\_0x23C3EB807312F01A).
 * 
 * Example code result:
 * ![](https://i.imgur.com/iZ9tNWl.png)
 * @param blip
 * @param toggle
 */
export function showCrewIndicatorOnBlip(blip: number, toggle: boolean): void {
	return _in(0xdcfb5d4d, 0xb8bf367e, blip, toggle); 
}

/**
 * ```
 * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
 * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param blip
 * @param toggle
 */
export function ShowHasCompletedIndicatorOnBlip(blip: number, toggle: boolean): void {
	return _in(0xcac2031e, 0xbf79b1a8, blip, toggle); 
}

/**
 * ```
 * Adds the GTA: Online player heading indicator to a blip.
 * ```
 * @param blip
 * @param toggle
 */
export function showHeadingIndicatorOnBlip(blip: number, toggle: boolean): void {
	return _in(0x5fbca483, 0x27b914df, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param toggle
 */
export function showHeightOnBlip(blip: number, toggle: boolean): void {
	return _in(0x75a16c3d, 0xa34f1245, blip, toggle); 
}

/**
 * 
 * @param blip
 * @param number
 */
export function showNumberOnBlip(blip: number, number: number): void {
	return _in(0xa3c0b359, 0xdcb848b6, blip, number); 
}

/**
 * This function shows various HUD (Heads-up Display) components.
 * 
 * Listed below are the integers and the corresponding HUD component.
 * 
 * *   1 : WANTED_STARS
 * *   2 : WEAPON_ICON
 * *   3 : CASH
 * *   4 : MP_CASH
 * *   5 : MP_MESSAGE
 * *   6 : VEHICLE_NAME
 * *   7 : AREA_NAME
 * *   8 : VEHICLE_CLASS
 * *   9 : STREET_NAME
 * *   10 : HELP_TEXT
 * *   11 : FLOATING_HELP_TEXT\_1
 * *   12 : FLOATING_HELP_TEXT\_2
 * *   13 : CASH_CHANGE
 * *   14 : RETICLE
 * *   15 : SUBTITLE_TEXT
 * *   16 : RADIO_STATIONS
 * *   17 : SAVING_GAME
 * *   18 : GAME_STREAM
 * *   19 : WEAPON_WHEEL
 * *   20 : WEAPON_WHEEL_STATS
 * *   21 : HUD_COMPONENTS
 * *   22 : HUD_WEAPONS
 * 
 * These integers also work for the [`HIDE_HUD_COMPONENT_THIS_FRAME`](#\_0x6806C51AD12B83B8) native, but instead hides the HUD component.
 * @param id
 */
export function showHudComponentThisFrame(id: number): void {
	return _in(0x0b4df1fa, 0x60c0e664, id); 
}

/**
 * Toggles a cyan outline around the blip.
 * 
 * Color can be changed with [`SET_BLIP_SECONDARY_COLOUR`](#\_0x14892474891E09EB). Enabling this circle will override the "crew" and "friend" half-circles (see [`SHOW_CREW_INDICATOR_ON_BLIP`](#\_0xDCFB5D4DB8BF367E) and [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\_0x23C3EB807312F01A)).
 * @param blip
 * @param toggle
 */
export function showOutlineIndicatorOnBlip(blip: number, toggle: boolean): void {
	return _in(0xb81656bc, 0x81fe24d1, blip, toggle); 
}

/**
 * ```
 * Adds a green checkmark on top of a blip.
 * ```
 * @param blip
 * @param toggle
 */
export function showTickOnBlip(blip: number, toggle: boolean): void {
	return _in(0x74513ea3, 0xe505181e, blip, toggle); 
}

/**
 * SHOW_\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param id
 */
export function ShowScriptedHudComponentThisFrame(id: number): void {
	return _in(0x4f38dca1, 0x27daaea2, id); 
}

/**
 * 
 * @param p0
 */
export function showStartMissionInstructionalButton(p0: boolean): void {
	return _in(0xf1a6c18b, 0x35bcade6, p0); 
}

/**
 * Starts a new GPS custom-route, allowing you to plot lines on the map.
 * Lines are drawn directly between points.
 * The GPS custom route works like the GPS multi route, except it does not follow roads.
 * 
 * **Example result:**
 * 
 * ![](https://i.imgur.com/BDm5pzt.png)
 * @param hudColor
 * @param displayOnFoot
 * @param followPlayer
 */
export function startGpsCustomRoute(hudColor: number, displayOnFoot: boolean, followPlayer: boolean): void {
	return _in(0xdb34e8d5, 0x6fc13b08, hudColor, displayOnFoot, followPlayer); 
}

/**
 * 
 */
export function ShowSigninUi(): void {
	return _in(0x60e892ba, 0x4f5bdca4); 
}

/**
 * 
 */
export function suppressFrontendRenderingThisFrame(): void {
	return _in(0xba751764, 0xf0821256); 
}

/**
 * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
 * 
 * To enable the keys again, use [`0x14621BB1DF14E2B2`](#\_0x14621BB1DF14E2B2).
 */
export function takeControlOfFrontend(): void {
	return _in(0xec926472, 0x7eec0f28); 
}

/**
 * Starts a new GPS multi-route, allowing you to create custom GPS paths.
 * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
 * Once the player has passed a point, the GPS will no longer force its path through it.
 * 
 * Works independently from the player-placed waypoint and blip routes.
 * 
 * **Example result:**
 * 
 * ![](https://i.imgur.com/ZZHQatX.png)
 * @param hudColor
 * @param routeFromPlayer
 * @param displayOnFoot
 */
export function startGpsMultiRoute(hudColor: number, routeFromPlayer: boolean, displayOnFoot: boolean): void {
	return _in(0x3d3d15af, 0x7bcaaf83, hudColor, routeFromPlayer, displayOnFoot); 
}

/**
 * Displays loading screen tips, requires `0x56C8B608CFD49854` to be called beforehand.
 */
export function ThefeedDisplayLoadingScreenTips(): void {
	return _in(0x15cfa549, 0x788d35ef); 
}

/**
 * 
 */
export function thefeedClearFrozenPost(): void {
	return _in(0x80fe4f3a, 0xb4e1b62a); 
}

/**
 * ```
 * Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 * ```
 */
export function thefeedCommentTeleportPoolOn(): void {
	return _in(0x56c8b608, 0xcfd49854); 
}

/**
 * 
 */
export function thefeedFlushQueue(): void {
	return _in(0xa8fdb297, 0xa8d25fba); 
}

/**
 * 
 */
export function thefeedForceRenderOn(): void {
	return _in(0xa13c11e1, 0xb5c06bfc); 
}

/**
 * Stops loading screen tips shown by invoking either `0x488043841BBE156F` or `0x15CFA549788D35EF`
 */
export function ThefeedDisableLoadingScreenTips(): void {
	return _in(0x32888337, 0x579a5970); 
}

/**
 * ```
 * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
 * ```
 */
export function thefeedFreezeNextPost(): void {
	return _in(0xfdec055a, 0xb549e328); 
}

/**
 * Once called each frame hides all above radar notifications.
 */
export function thefeedHideThisFrame(): void {
	return _in(0x25f87b30, 0xc382fca7); 
}

/**
 * 
 */
export function thefeedIsPaused(): boolean {
	return _in(0xa9cbfd40, 0xb3fa3010, _r); 
}

/**
 * ```
 * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
 * ```
 */
export function thefeedGetFirstVisibleDeleteRemaining(): number {
	return _in(0x82352748, 0x437638ca, _r, _ri); 
}

/**
 * 
 */
export function thefeedPause(): void {
	return _in(0xfdb42399, 0x7fa30340); 
}

/**
 * 
 * @param toggle
 */
export function thefeedOnlyShowTooltips(toggle: boolean): void {
	return _in(0x6f1554b0, 0xcc2089fa, toggle); 
}

/**
 * 
 */
export function thefeedResume(): void {
	return _in(0xe1cd1e48, 0xe025e661); 
}

/**
 * ```
 * Removes a notification instantly instead of waiting for it to disappear
 * ```
 * @param notificationId
 */
export function thefeedRemoveItem(notificationId: number): void {
	return _in(0xbe4390cb, 0x40b3e627, notificationId); 
}

/**
 * 
 */
export function thefeedResetAllParameters(): void {
	return _in(0xfdd85225, 0xb2dea55e); 
}

/**
 * Related to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification.
 * @param count
 */
export function ThefeedSetAnimpostfxCount(count: number): void {
	return _in(0x17ad8c97, 0x06bdd88a, count); 
}

/**
 * 
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function ThefeedSetAnimpostfxColor(red: number, green: number, blue: number, alpha: number): void {
	return _in(0x17430b91, 0x8701c342, red, green, blue, alpha); 
}

/**
 * ```
 * If true, remove all feed components instantly. Otherwise tween/animate close each component
 * ```
 * @param toggle
 */
export function ThefeedSetFlushAnimpostfx(toggle: boolean): void {
	return _in(0xbae4f9b9, 0x7cd43b30, toggle); 
}

/**
 * 
 * @param pos
 */
export function thefeedSetScriptedMenuHeight(pos: number): void {
	return _in(0x55598d21, 0x339cb998, _fv(pos)); 
}

/**
 * ```
 * Requires GAME_STREAM_ENUMS.MSGTEXT. Default sounds: "DPAD_WEAPON_SCROLL" and "HUD_FRONTEND_DEFAULT_SOUNDSET"
 * ```
 * @param toggle
 */
export function ThefeedSetAnimpostfxSound(toggle: boolean): void {
	return _in(0x4a0c7c9b, 0xb10abb36, toggle); 
}

/**
 * ```
 * From the decompiled scripts:
 * HUD::_92F0DA1E27DB96DC(6);
 * HUD::_92F0DA1E27DB96DC(184);
 * HUD::_92F0DA1E27DB96DC(190);
 * sets background color for the next notification
 * 6 = red
 * 184 = green
 * 190 = yellow
 * Here is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15
 * ```
 * @param hudColorIndex
 */
export function ThefeedSetNextPostBackgroundColor(hudColorIndex: number): void {
	return _in(0x92f0da1e, 0x27db96dc, hudColorIndex); 
}

/**
 * 
 */
export function thefeedSpsExtendWidescreenOff(): void {
	return _in(0xb695e2cd, 0x0a2da9ee); 
}

/**
 * 
 * @param toggle
 */
export function toggleStealthRadar(toggle: boolean): void {
	return _in(0x6afdfb93, 0x754950c7, toggle); 
}

/**
 * 
 */
export function thefeedSpsExtendWidescreenOn(): void {
	return _in(0xd4438c05, 0x64490e63); 
}

/**
 * ```
 * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
 * 
 * NativeDB Introduced: v323
 * ```
 * @param txdString1
 * @param txnString1
 * @param txdString2
 * @param txnString2
 */
export function thefeedUpdateItemTexture(txdString1: string, txnString1: string, txdString2: string, txnString2: string): void {
	return _in(0x317eba71, 0xd7543f52, _ts(txdString1), _ts(txnString1), _ts(txdString2), _ts(txnString2)); 
}

/**
 * 
 * @param posX
 * @param posY
 * @param posZ
 * @param radius
 * @param p4
 */
export function triggerSonarBlip(posX: number, posY: number, posZ: number, radius: number, p4: number): void {
	return _in(0x72dd432f, 0x3cdfc0ee, _fv(posX), _fv(posY), _fv(posZ), _fv(radius), p4); 
}

/**
 * 
 */
export function unlockMinimapAngle(): void {
	return _in(0x8183455e, 0x16c42e3a); 
}

/**
 * 
 */
export function unlockMinimapPosition(): void {
	return _in(0x3e93e06d, 0xb8ef1f30); 
}

/**
 * ```
 * Related to displaying cash on the HUD
 * Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
 * ```
 * @param p0
 */
export function useFakeMpCash(p0: boolean): void {
	return _in(0x170f541e, 0x1cadd1de, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function addToItemset(p0: any, p1: any): boolean {
	return _in(0xe3945201, 0xf14637dd, p0, p1, _r); 
}

/**
 * 
 * @param distri
 */
export function createItemset(distri: boolean): number {
	return _in(0x35ad299f, 0x50d91b24, distri, _r); 
}

/**
 * 
 * @param p0
 */
export function cleanItemset(p0: any): void {
	return _in(0x41bc0d72, 0x2fc04221, p0); 
}

/**
 * 
 * @param p0
 */
export function destroyItemset(p0: any): void {
	return _in(0xde18220b, 0x1c183eda, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function getIndexedItemInItemset(p0: any, p1: any): any {
	return _in(0x7a197e25, 0x21ee2bab, p0, p1, _r, _ri); 
}

/**
 * 
 * @param x
 */
export function getItemsetSize(x: number): any {
	return _in(0xd9127e83, 0xabf7c631, x, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function isItemsetValid(p0: any): boolean {
	return _in(0xb1b1ea59, 0x6344dfab, p0, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function isInItemset(p0: any, p1: any): boolean {
	return _in(0x2d0fc594, 0xd1e9c107, p0, p1, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function removeFromItemset(p0: any, p1: any): void {
	return _in(0x25e68244, 0xb0177686, p0, p1); 
}

/**
 * 
 */
export function LoadingscreenGetLoadFreemode(): boolean {
	return _in(0xef7d17bc, 0x6c85264c, _r); 
}

/**
 * 
 */
export function LoadingscreenGetLoadFreemodeWithEventName(): boolean {
	return _in(0x8aa464d4, 0xe0f6accd, _r); 
}

/**
 * 
 */
export function LoadingscreenIsLoadingFreemode(): boolean {
	return _in(0xc6dc8232, 0x53fbb366, _r); 
}

/**
 * 
 * @param toggle
 */
export function LoadingscreenSetIsLoadingFreemode(toggle: boolean): void {
	return _in(0xc7e7181c, 0x09f33b69, toggle); 
}

/**
 * ```
 * Only occurrence was false, in maintransition.
 * ```
 * @param toggle
 */
export function LoadingscreenSetLoadFreemodeWithEventName(toggle: boolean): void {
	return _in(0xfc309e94, 0x546fcdb5, toggle); 
}

/**
 * 
 * @param toggle
 */
export function LoadingscreenSetLoadFreemode(toggle: boolean): void {
	return _in(0xb0c56bd3, 0xd808d863, toggle); 
}

/**
 * ```
 * 0 = american (en-US)
 * 1 = french (fr-FR)
 * 2 = german (de-DE)
 * 3 = italian (it-IT)
 * 4 = spanish (es-ES)
 * 5 = brazilian (pt-BR)
 * 6 = polish (pl-PL)
 * 7 = russian (ru-RU)
 * 8 = korean (ko-KR)
 * 9 = chinesetrad (zh-TW)
 * 10 = japanese (ja-JP)
 * 11 = mexican (es-MX)
 * 12 = chinesesimp (zh-CN)
 * ```
 */
export function getCurrentLanguage(): number {
	return _in(0x2bdd44cc, 0x428a7eae, _r, _ri); 
}

/**
 * ```
 * Possible return values: 0, 1, 2
 * ```
 */
export function LocalizationGetSystemDateFormat(): number {
	return _in(0xa8ae43ae, 0xc1a61314, _r, _ri); 
}

/**
 * ```
 * Same return values as GET_CURRENT_LANGUAGE
 * ```
 */
export function LocalizationGetSystemLanguage(): number {
	return _in(0x497420e0, 0x22796b3f, _r, _ri); 
}

/**
 * 
 * @param value
 */
export function absf(value: number): number {
	return _in(0x73d57cff, 0xdd12c355, _fv(value), _r, _rf); 
}

/**
 * 
 * @param p0
 */
export function acos(p0: number): number {
	return _in(0x1d08b970, 0x013c34b6, _fv(p0), _r, _rf); 
}

/**
 * 
 * @param value
 */
export function absi(value: number): number {
	return _in(0xf0d31ad1, 0x91a74f87, value, _r, _ri); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function AddDispatchSpawnBlockingArea(x1: number, y1: number, x2: number, y2: number): any {
	return _in(0x2d4259f1, 0xfeb81da9, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _ri); 
}

/**
 * To remove, see: [`REMOVE_DISPATCH_SPAWN_BLOCKING_AREA`](#\_0x264AC28B01B353A5).
 * 
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function AddDispatchSpawnBlockingAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): any {
	return _in(0x918c7b2d, 0x2ff3928b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r, _ri); 
}

/**
 * ```
 * Returns the index of the newly created hospital spawn point.
 * p3 might be radius?
 * ```
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export function addHospitalRestart(x: number, y: number, z: number, p3: number, p4: any): number {
	return _in(0x1f464ef9, 0x88465a81, _fv(x), _fv(y), _fv(z), _fv(p3), p4, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function addPoliceRestart(p0: number, p1: number, p2: number, p3: number, p4: any): any {
	return _in(0x45273676, 0x5b31fc4b, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _r, _ri); 
}

/**
 * ```
 * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param pedMultiplier
 * @param vehicleMultiplier
 * @param p6
 * @param p7
 */
export function addPopMultiplierSphere(x: number, y: number, z: number, radius: number, pedMultiplier: number, vehicleMultiplier: number, p6: boolean, p7: boolean): number {
	return _in(0x32c7a7e8, 0xc43a1f80, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(pedMultiplier), _fv(vehicleMultiplier), p6, p7, _r, _ri); 
}

/**
 * ```
 * NativeDB Added Parameter 10: BOOL p9
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 * @param p8
 */
export function addPopMultiplierArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number, p7: number, p8: boolean): number {
	return _in(0x67f6413d, 0x3220e18d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(p6), _fv(p7), p8, _r, _ri); 
}

/**
 * 
 * @param value
 */
export function addReplayStatValue(value: any): void {
	return _in(0x69fe6dc8, 0x7bd2a5e9, value); 
}

/**
 * ```
 * Adds a point related to CTacticalAnalysis
 * ```
 * @param x
 * @param y
 * @param z
 */
export function AddTacticalAnalysisPoint(x: number, y: number, z: number): void {
	return _in(0xb8721407, 0xee9c3ff6, _fv(x), _fv(y), _fv(z)); 
}

/**
 * See description of [`ADD_STUNT_JUMP_ANGLED`](#\_0xBBE5D803A5360CBF) for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param camX
 * @param camY
 * @param camZ
 * @param unk1
 * @param unk2
 * @param unk3
 * @return The ID of the stunt jump that was added.
 */
export function addStuntJump(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, camX: number, camY: number, camZ: number, unk1: number, unk2: number, unk3: number): number {
	return _in(0x1a992da2, 0x97a4630c, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(x4), _fv(y4), _fv(z4), _fv(camX), _fv(camY), _fv(camZ), unk1, unk2, unk3, _r, _ri); 
}

/**
 * 
 */
export function areProfileSettingsValid(): boolean {
	return _in(0x5aa3befa, 0x29f03ad4, _r); 
}

/**
 * 
 * @param p0
 */
export function asin(p0: number): number {
	return _in(0xc843060b, 0x5765dce7, _fv(p0), _r, _rf); 
}

/**
 * Creates a new stunt jump.
 * 
 * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP\_**ANGLED**.
 * 
 * Info about the specific 'parameter sections':
 * 
 * **x1, y1, z1, x2, y2, z2 and radius1:**
 * 
 * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
 * 
 * **x3, y3, z3, x4, y4, z4 and radius2:**
 * 
 * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
 * 
 * **camX, camY and camZ:**
 * 
 * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
 * 
 * **unk1, unk2 and unk3:**
 * 
 * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
 * 
 * Visualized example in-game:
 * 
 * ![](https://d.fivem.dev/2019-03-15\_18-24\_c7802\_846.png)
 * 
 * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius1
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param radius2
 * @param camX
 * @param camY
 * @param camZ
 * @param unk1
 * @param unk2
 * @param unk3
 * @return The ID of the stuntjump that was created.
 */
export function addStuntJumpAngled(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius1: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, radius2: number, camX: number, camY: number, camZ: number, unk1: number, unk2: number, unk3: number): number {
	return _in(0xbbe5d803, 0xa5360cbf, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius1), _fv(x3), _fv(y3), _fv(z3), _fv(x4), _fv(y4), _fv(z4), _fv(radius2), _fv(camX), _fv(camY), _fv(camZ), unk1, unk2, unk3, _r, _ri); 
}

/**
 * 
 * @param toggle
 */
export function allowMissionCreatorWarp(toggle: boolean): void {
	return _in(0xdea36202, 0xfc3382df, toggle); 
}

/**
 * 
 * @param string1
 * @param string2
 */
export function areStringsEqual(string1: string, string2: string): boolean {
	return _in(0x0c515fab, 0x3ff9ea92, _ts(string1), _ts(string2), _r); 
}

/**
 * 
 * @param p0
 */
export function atan(p0: number): number {
	return _in(0xa9d1795c, 0xd5043663, _fv(p0), _r, _rf); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function beginReplayStats(p0: any, p1: any): void {
	return _in(0xe0e50024, 0x6ff73d66, p0, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function atan2(p0: number, p1: number): number {
	return _in(0x8927cbf9, 0xd22261a4, _fv(p0), _fv(p1), _r, _rf); 
}

/**
 * 
 * @param dispatchService
 * @param toggle
 */
export function blockDispatchServiceResourceCreation(dispatchService: number, toggle: boolean): void {
	return _in(0x9b2bd377, 0x3123ea2f, dispatchService, toggle); 
}

/**
 * ```
 * DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
 * Use _FORCE_CLOSE_TEXT_INPUT_BOX instead.
 * CANCEL_*
 * ```
 */
export function CancelOnscreenKeyboard(): void {
	return _in(0x58a39be5, 0x97ce99cd); 
}

/**
 * 
 */
export function cancelStuntJump(): void {
	return _in(0xe6b7b0ac, 0xd4e4b75e); 
}

/**
 * ```
 * NativeDB Added Parameter 13: Any p12
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export function clearAngledAreaOfVehicles(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean): void {
	return _in(0x11db3500, 0xf042a8aa, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7, p8, p9, p10, p11); 
}

/**
 * 
 */
export function CleanupAsyncInstall(): void {
	return _in(0xc79ae219, 0x74b01fb2); 
}

/**
 * ```
 * MISC::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function clearAreaLeaveVehicleHealth(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void {
	return _in(0x957838aa, 0xf91bd12d, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, p7); 
}

/**
 * Clears an area of cops at the given coordinates and radius.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param createNetEvent
 */
export function clearAreaOfCops(x: number, y: number, z: number, radius: number, createNetEvent: boolean): void {
	return _in(0x04f8fc8f, 0xcf58f88d, _fv(x), _fv(y), _fv(z), _fv(radius), createNetEvent); 
}

/**
 * ```
 * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
 * ```
 * @param X
 * @param Y
 * @param Z
 * @param radius
 * @param p4
 * @param ignoreCopCars
 * @param ignoreObjects
 * @param p7
 */
export function clearArea(X: number, Y: number, Z: number, radius: number, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void {
	return _in(0xa56f01f3, 0x765b93a0, _fv(X), _fv(Y), _fv(Z), _fv(radius), p4, ignoreCopCars, ignoreObjects, p7); 
}

/**
 * Clears an area of peds at the given coordinates and radius.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param createNetEvent
 */
export function clearAreaOfPeds(x: number, y: number, z: number, radius: number, createNetEvent: boolean): void {
	return _in(0xbe31fd6c, 0xe464ac59, _fv(x), _fv(y), _fv(z), _fv(radius), createNetEvent); 
}

/**
 * ```
 * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export function clearAreaOfObjects(x: number, y: number, z: number, radius: number, flags: number): void {
	return _in(0xdd9b9b38, 0x5aac7f5b, _fv(x), _fv(y), _fv(z), _fv(radius), flags); 
}

/**
 * Clears an area of projectiles at the given coordinates and radius.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param createNetEvent
 */
export function clearAreaOfProjectiles(x: number, y: number, z: number, radius: number, createNetEvent: boolean): void {
	return _in(0x0a1cb909, 0x4635d1a6, _fv(x), _fv(y), _fv(z), _fv(radius), createNetEvent); 
}

/**
 * ```
 * Example: 		CLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false);
 * ```
 * 
 * ```
 * NativeDB Added Parameter 10: BOOL p9
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function clearAreaOfVehicles(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean): void {
	return _in(0x01c7b9b3, 0x8428aeb6, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, p7, p8); 
}

/**
 * ```
 * This sets bit [offset] of [address] to off.
 * Example:
 * MISC::CLEAR_BIT(&bitAddress, 1);
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
 * ```
 * @param address
 * @param offset
 */
export function clearBit(offset: number): void {
	return _in(0xe80492a9, 0xac099a93, _i, offset); 
}

/**
 * 
 */
export function clearOverrideWeather(): void {
	return _in(0x338d2e34, 0x77711050); 
}

/**
 * 
 */
export function ClearCloudHat(): void {
	return _in(0x957e790e, 0xa1727b64); 
}

/**
 * 
 */
export function clearReplayStats(): void {
	return _in(0x1b1ab132, 0xa16fda55); 
}

/**
 * 
 */
export function ClearTacticalAnalysisPoints(): void {
	return _in(0xb3cd58cc, 0xa6cda852); 
}

/**
 * ```
 * Compares two strings up to a specified number of characters.
 * Parameters:
 * str1 - String to be compared.
 * str2 - String to be compared.
 * matchCase - Comparison will be case-sensitive.
 * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
 * Returns:
 * A value indicating the relationship between the strings:
 * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
 * 0 - The contents of both strings are equal.
 * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
 * Examples:
 * MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
 * MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
 * MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
 * MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
 * MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
 * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
 * MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
 * MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
 * ```
 * @param str1
 * @param str2
 * @param matchCase
 * @param maxLength
 */
export function compareStrings(str1: string, str2: string, matchCase: boolean, maxLength: number): number {
	return _in(0x1e34710e, 0xcd4ab0eb, _ts(str1), _ts(str2), matchCase, maxLength, _r, _ri); 
}

/**
 * 
 */
export function ClearRestartCustomPosition(): void {
	return _in(0xa2716d40, 0x842eaf79); 
}

/**
 * 
 * @param dst
 * @param src
 * @param size
 */
export function CopyMemory(src: any, size: number): void {
	return _in(0x213aeb2b, 0x90cba7ac, _i, src, size); 
}

/**
 * 
 */
export function clearWeatherTypePersist(): void {
	return _in(0xccc39339, 0xbef76cf5); 
}

/**
 * ```
 * enum IncidentTypes
 * {
 * FireDepartment = 3,
 * Paramedics = 5,
 * Police = 7,
 * PedsInCavalcades = 11,
 * Merryweather = 14
 * };
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * ```
 * 
 * ```
 * NativeDB Added Parameter 8: Any p7
 * NativeDB Added Parameter 9: Any p8
 * ```
 * @param dispatchService
 * @param x
 * @param y
 * @param z
 * @param numUnits
 * @param radius
 * @param outIncidentID
 */
export function createIncident(dispatchService: number, x: number, y: number, z: number, numUnits: number, radius: number): boolean {
	return _in(0x3f892caf, 0x67444ae7, dispatchService, _fv(x), _fv(y), _fv(z), numUnits, _fv(radius), _ii(outIncidentID), _r); 
}

/**
 * ```
 * Delete an incident with a given id.
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * ```
 * @param incidentId
 */
export function deleteIncident(incidentId: number): void {
	return _in(0x556c1aa2, 0x70d5a207, incidentId); 
}

/**
 * ```
 * p0 could be type (valueused in scripts: 14, 7, 5, 3, 11)
 * p1 is a return from get_player_ped() in am_gang_call.c, but player_ped_id() in other (non am) scripts.
 * p3 is usually 0f or 3f
 * =====================================================
 * enum IncidentTypes
 * {
 * FireDepartment = 3,
 * Paramedics = 5,
 * Police = 7,
 * PedsInCavalcades = 11,
 * Merryweather = 14
 * };
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * ```
 * 
 * ```
 * NativeDB Added Parameter 6: Any p5
 * NativeDB Added Parameter 7: Any p6
 * ```
 * @param dispatchService
 * @param ped
 * @param numUnits
 * @param radius
 * @param outIncidentID
 */
export function createIncidentWithEntity(dispatchService: number, ped: number, numUnits: number, radius: number): boolean {
	return _in(0x05983472, 0xf0494e60, dispatchService, ped, numUnits, _fv(radius), _ii(outIncidentID), _r); 
}

/**
 * ```
 * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
 * ```
 * @param hospitalIndex
 * @param toggle
 */
export function disableHospitalRestart(hospitalIndex: number, toggle: boolean): void {
	return _in(0xc8535819, 0xc450eba8, hospitalIndex, toggle); 
}

/**
 * 
 * @param p0
 */
export function deleteStuntJump(p0: number): void {
	return _in(0xdc518000, 0xe39dae1f, p0); 
}

/**
 * 
 * @param p0
 */
export function disableStuntJumpSet(p0: number): void {
	return _in(0xa5272ebe, 0xdd4747f6, p0); 
}

/**
 * ```
 * Disables the spawn point at the police house on the specified index.
 * policeIndex: The police house index.
 * toggle: true to enable the spawn point, false to disable.
 * - Nacorpio
 * ```
 * @param policeIndex
 * @param toggle
 */
export function disablePoliceRestart(policeIndex: number, toggle: boolean): void {
	return _in(0x23285ded, 0x6ebd7ea3, policeIndex, toggle); 
}

/**
 * ```
 * windowTitle's
 * -----------------
 * CELL_EMAIL_BOD	=	"Enter your Eyefind message"
 * CELL_EMAIL_BODE	=	"Message too long. Try again"
 * CELL_EMAIL_BODF	=	"Forbidden message. Try again"
 * CELL_EMAIL_SOD	=	"Enter your Eyefind subject"
 * CELL_EMAIL_SODE	=	"Subject too long. Try again"
 * CELL_EMAIL_SODF	=	"Forbidden text. Try again"
 * CELL_EMASH_BOD	=	"Enter your Eyefind message"
 * CELL_EMASH_BODE	=	"Message too long. Try again"
 * CELL_EMASH_BODF	=	"Forbidden message. Try again"
 * CELL_EMASH_SOD	=	"Enter your Eyefind subject"
 * CELL_EMASH_SODE	=	"Subject too long. Try again"
 * CELL_EMASH_SODF	=	"Forbidden Text. Try again"
 * FMMC_KEY_TIP10	=	"Enter Synopsis"
 * FMMC_KEY_TIP12	=	"Enter Custom Team Name"
 * FMMC_KEY_TIP12F	=	"Forbidden Text. Try again"
 * FMMC_KEY_TIP12N	=	"Custom Team Name"
 * FMMC_KEY_TIP8	=	"Enter Message"
 * FMMC_KEY_TIP8F	=	"Forbidden Text. Try again"
 * FMMC_KEY_TIP8FS	=	"Invalid Message. Try again"
 * FMMC_KEY_TIP8S	=	"Enter Message"
 * FMMC_KEY_TIP9	=	"Enter Outfit Name"
 * FMMC_KEY_TIP9F	=	"Invalid Outfit Name. Try again"
 * FMMC_KEY_TIP9N	=	"Outfit Name"
 * PM_NAME_CHALL	=	"Enter Challenge Name"
 * ```
 * @param p0
 * @param windowTitle
 * @param p2
 * @param defaultText
 * @param defaultConcat1
 * @param defaultConcat2
 * @param defaultConcat3
 * @param maxInputLength
 */
export function displayOnscreenKeyboard(p0: number, windowTitle: string, p2: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: number): void {
	return _in(0x00dc833f, 0x2568dbf6, p0, _ts(windowTitle), _ts(p2), _ts(defaultText), _ts(defaultConcat1), _ts(defaultConcat2), _ts(defaultConcat3), maxInputLength); 
}

/**
 * 
 */
export function doAutoSave(): void {
	return _in(0x50eeaad8, 0x6232ee55); 
}

/**
 * 
 * @param p0
 * @param windowTitle
 * @param p2
 * @param defaultText
 * @param defaultConcat1
 * @param defaultConcat2
 * @param defaultConcat3
 * @param defaultConcat4
 * @param defaultConcat5
 * @param defaultConcat6
 * @param defaultConcat7
 * @param maxInputLength
 */
export function displayOnscreenKeyboardWithLongerInitialString(p0: number, windowTitle: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, defaultConcat4: string, defaultConcat5: string, defaultConcat6: string, defaultConcat7: string, maxInputLength: number): void {
	return _in(0xca78cfa0, 0x366592fe, p0, _ts(windowTitle), _i, _ts(defaultText), _ts(defaultConcat1), _ts(defaultConcat2), _ts(defaultConcat3), _ts(defaultConcat4), _ts(defaultConcat5), _ts(defaultConcat6), _ts(defaultConcat7), maxInputLength); 
}

/**
 * 
 * @param id
 */
export function doesPopMultiplierAreaExist(id: number): boolean {
	return _in(0x1327e2fe, 0x9746baee, id, _r); 
}

/**
 * 
 * @param id
 */
export function doesPopMultiplierSphereExist(id: number): boolean {
	return _in(0x171bafb3, 0xc60389f4, id, _r); 
}

/**
 * 
 * @param p0
 */
export function enableStuntJumpSet(p0: number): void {
	return _in(0xe369a578, 0x3b866016, p0); 
}

/**
 * Enables or disables the specified 'dispatch service' type. 'Dispatch services' are used for spawning AI response peds/vehicles for events such as a fire in the street (type 3 - DT_FireDepartment), or gunfire in a gang area (type 11 - DT_Gangs).
 * 
 * List of dispatch services:
 * 
 * ```cpp
 * enum DispatchType
 * {
 * DT_Invalid = 0,
 * DT_PoliceAutomobile,
 * DT_PoliceHelicopter,
 * DT_FireDepartment,
 * DT_SwatAutomobile,
 * DT_AmbulanceDepartment,
 * DT_PoliceRiders,
 * DT_PoliceVehicleRequest,
 * DT_PoliceRoadBlock,
 * DT_PoliceAutomobileWaitPulledOver,
 * DT_PoliceAutomobileWaitCruising,
 * DT_Gangs,
 * DT_SwatHelicopter,
 * DT_PoliceBoat,
 * DT_ArmyVehicle,
 * DT_BikerBackup = 15
 * };
 * ```
 * 
 * Note that 'dispatch service' has nothing to do with the police scanner (audio), to toggle that, use [SET_AUDIO_FLAG](#\_0xB9EFD5C25018725A) with `'PoliceScannerDisabled'`.
 * @param dispatchService
 * @param toggle
 */
export function enableDispatchService(dispatchService: number, toggle: boolean): void {
	return _in(0xdc0f8178, 0x84cdd856, dispatchService, toggle); 
}

/**
 * ```
 * Makes the ped jump around like they're in a tennis match
 * ```
 * @param ped
 * @param toggle
 * @param p2
 */
export function enableTennisMode(ped: number, toggle: boolean, p2: boolean): void {
	return _in(0x28a04b41, 0x1933f8a6, ped, toggle, p2); 
}

/**
 * 
 */
export function endReplayStats(): void {
	return _in(0xa23e821f, 0xbdf8a5f2); 
}

/**
 * ```
 * Finds a position ahead of the player by predicting the players next actions.
 * The positions match path finding node positions.
 * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
 * ```
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param distance
 * @param spawnPoint
 */
export function findSpawnPointInDirection(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, distance: number): boolean {
	return _in(0x6874e219, 0x0b0c1972, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(distance), _v(spawnPoint), _r); 
}

/**
 * ```
 * Sets the localplayer playerinfo state back to playing (State 0)
 * States are:
 * -1: "Invalid"
 * 0: "Playing"
 * 1: "Died"
 * 2: "Arrested"
 * 3: "Failed Mission"
 * 4: "Left Game"
 * 5: "Respawn"
 * 6: "In MP Cutscene"
 * ```
 */
export function forceGameStatePlaying(): void {
	return _in(0xc0aa53f8, 0x66b3134d); 
}

/**
 * ```
 * creates single lightning+thunder at random position
 * ```
 */
export function forceLightningFlash(): void {
	return _in(0xf6062e08, 0x9251c898); 
}

/**
 * ```
 * Exits the game and downloads a fresh social club update on next restart.
 * ```
 */
export function ForceSocialClubUpdate(): void {
	return _in(0xeb6891f0, 0x3362fb12); 
}

/**
 * 
 */
export function getAllocatedStackSize(): number {
	return _in(0x8b3ca62b, 0x1ef19b62, _r, _ri); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number {
	return _in(0x186fc4be, 0x848e1c92, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf); 
}

/**
 * ```
 * Returns value of the '-benchmarkPass' command line option.
 * ```
 */
export function GetBenchmarkPassFromCommandLine(): number {
	return _in(0x1b2366c3, 0xf2a5c8df, _r, _ri); 
}

/**
 * ```
 * Returns value of the '-benchmarkIterations' command line option.
 * ```
 */
export function GetBenchmarkIterationsFromCommandLine(): number {
	return _in(0x4750fc27, 0x570311ec, _r, _ri); 
}

/**
 * 
 * @param varName
 * @param rangeStart
 * @param rangeEnd
 */
export function getBitsInRange(varName: number, rangeStart: number, rangeEnd: number): number {
	return _in(0x53158863, 0xfcc0893a, varName, rangeStart, rangeEnd, _r, _ri); 
}

/**
 * 
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function GetBaseElementMetadata(p3: any, p4: boolean): boolean {
	return _in(0xb335f761, 0x606db47c, _i, _i, p3, p4, _r); 
}

/**
 * 
 */
export function GetCloudHatOpacity(): number {
	return _in(0x20ac25e7, 0x81ae4a84, _r, _rf); 
}

/**
 * 
 */
export function GetBenchmarkTime(): number {
	return _in(0xe599a503, 0xb3837e1b, _r, _rf); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param projectileHash
 * @param projectilePos
 * @param ownedByPlayer
 */
export function getCoordsOfProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, projectileHash: number, ownedByPlayer: boolean): boolean {
	return _in(0x8d7a43ec, 0x6a5fea45, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _ch(projectileHash), _v(projectilePos), ownedByPlayer, _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param distance
 * @param outCoords
 * @param ownedByPlayer
 */
export function getCoordsOfProjectileTypeWithinDistance(ped: number, weaponHash: number, distance: number, ownedByPlayer: boolean): boolean {
	return _in(0xdfb4138e, 0xefed7b81, ped, _ch(weaponHash), _fv(distance), _v(outCoords), ownedByPlayer, _r); 
}

/**
 * 
 */
export function getFakeWantedLevel(): number {
	return _in(0x4c9296cb, 0xcd1b971e, _r, _ri); 
}

/**
 * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
 * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
 * Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param useZ
 * @return The distance between the passed points in units.
 */
export function getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number {
	return _in(0xf1b76088, 0x1820c952, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), useZ, _r, _rf); 
}

/**
 * Gets the high precision frame time of the last frame in seconds.
 * 
 * *note: the example above is way less precise.*
 * @return The frame time (in seconds) of the last frame.
 */
export function getFrameTime(): number {
	return _in(0x15c40837, 0x039ffaf7, _r, _rf); 
}

/**
 * Gets the number of the current frame being displayed.
 * @return The number of the current frame being displayed.
 */
export function getFrameCount(): number {
	return _in(0xfc8202ef, 0xc642e6f2, _r, _ri); 
}

/**
 * 
 */
export function getGameTimer(): number {
	return _in(0x9cd27b00, 0x45628463, _r, _ri); 
}

/**
 * ```
 * Returns pointer to an empty string.
 * GET_C*
 * ```
 */
export function GetGlobalCharBuffer(): string {
	return _in(0x24da7d76, 0x67fd7b09, _r, _s); 
}

/**
 * ```
 * Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 6: BOOL p5
 * ```
 * @param x
 * @param y
 * @param z
 * @param groundZ
 * @param ignoreWater
 */
export function getGroundZFor3dCoord(x: number, y: number, z: number, ignoreWater: boolean): boolean {
	return _in(0xc906a7da, 0xb05c8d2b, _fv(x), _fv(y), _fv(z), _f, ignoreWater, _r); 
}

/**
 * This native converts its past string to hash. It is hashed using jenkins one at a time method.
 * @param string
 * @return The hash of `string`.
 */
export function getHashKey(string: string): number {
	return _in(0xd24d37cc, 0x275948cc, _ts(string), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param groundZ
 * @param normal
 */
export function getGroundZAndNormalFor3dCoord(x: number, y: number, z: number): boolean {
	return _in(0x8bdc7bfc, 0x57a81e76, _fv(x), _fv(y), _fv(z), _f, _v(normal), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 6: BOOL p5
 * ```
 * @param x
 * @param y
 * @param z
 * @param groundZ
 * @param p4
 */
export function GetGroundZFor3dCoord2(x: number, y: number, z: number, p4: boolean): boolean {
	return _in(0x9e82f0f3, 0x62881b29, _fv(x), _fv(y), _fv(z), _f, p4, _r); 
}

/**
 * ```
 * dx = x1 - x2
 * dy = y1 - y2
 * ```
 * @param dx
 * @param dy
 */
export function getHeadingFromVector2d(dx: number, dy: number): number {
	return _in(0x2ffb6b22, 0x4f4b2926, _fv(dx), _fv(dy), _r, _rf); 
}

/**
 * ```
 * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
 * ```
 */
export function GetIsPlayerInAnimalForm(): boolean {
	return _in(0x9689123e, 0x3f213aa5, _r); 
}

/**
 * ```
 * Gets the dimensions of a model.
 * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
 * Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
 * ```
 * @param modelHash
 * @param minimum
 * @param maximum
 */
export function getModelDimensions(modelHash: number): void {
	return _in(0x03e8d3d5, 0xf549087a, _ch(modelHash), _v(minimum), _v(maximum)); 
}

/**
 * 
 * @param dispatchService
 */
export function GetNumDispatchedUnitsForPlayer(dispatchService: number): number {
	return _in(0xeb4a0c2d, 0x56441717, dispatchService, _r, _ri); 
}

/**
 * ```
 * Returns true if profile setting 208 is equal to 0.
 * ```
 */
export function getIsAutoSaveOff(): boolean {
	return _in(0x6e04f060, 0x94c87047, _r); 
}

/**
 * 
 * @param stackSize
 */
export function getNumberOfFreeStacksOfThisSize(stackSize: number): number {
	return _in(0xfead16fc, 0x8f9dfc0f, stackSize, _r, _ri); 
}

/**
 * 
 */
export function getIndexOfCurrentLevel(): number {
	return _in(0xcbad6729, 0xf7b1f4fc, _r, _ri); 
}

/**
 * 
 */
export function getMissionFlag(): boolean {
	return _in(0xa33cdccd, 0xa663159e, _r); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 */
export function getNextWeatherTypeHashName(): number {
	return _in(0x711327cd, 0x09c8f162, _r); 
}

/**
 * ```
 * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
 * ```
 */
export function getOnscreenKeyboardResult(): string {
	return _in(0x8362b09b, 0x91893647, _r, _s); 
}

/**
 * 
 * @param profileSetting
 */
export function getProfileSetting(profileSetting: number): number {
	return _in(0xc488ff23, 0x56ea7791, profileSetting, _r, _ri); 
}

/**
 * 
 */
export function getNumSuccessfulStuntJumps(): number {
	return _in(0x996dd1e1, 0xe02f1008, _r, _ri); 
}

/**
 * ```
 * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
 * ```
 */
export function GetPowerSavingModeDuration(): number {
	return _in(0xabb2fa71, 0xc83a1b72, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param distance
 * @param outCoords
 * @param outProjectile
 * @param ownedByPlayer
 */
export function GetProjectileNearPed(ped: number, weaponHash: number, distance: number, ownedByPlayer: boolean): boolean {
	return _in(0x82fde6a5, 0x7ee4ee44, ped, _ch(weaponHash), _fv(distance), _v(outCoords), _i, ownedByPlayer, _r); 
}

/**
 * 
 */
export function getRainLevel(): number {
	return _in(0x96695e36, 0x8ad855f3, _r, _rf); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 */
export function getPrevWeatherTypeHashName(): number {
	return _in(0x564b884a, 0x05ec45a3, _r); 
}

/**
 * 
 */
export function getRandomEventFlag(): boolean {
	return _in(0xd2d57f1d, 0x764117b1, _r); 
}

/**
 * 
 * @param startRange
 * @param endRange
 */
export function getRandomFloatInRange(startRange: number, endRange: number): number {
	return _in(0x313ce587, 0x9ceb6fcd, _fv(startRange), _fv(endRange), _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param startRange
 * @param endRange
 */
export function GetRandomIntInRange2(startRange: number, endRange: number): number {
	return _in(0xf2d49816, 0xa804d134, startRange, endRange, _r, _ri); 
}

/**
 * 
 * @param index
 */
export function getReplayStatAtIndex(index: number): number {
	return _in(0x8098c8d6, 0x597aae18, index, _r, _ri); 
}

/**
 * 
 */
export function getReplayStatCount(): number {
	return _in(0xdc9274a7, 0xef6b2867, _r, _ri); 
}

/**
 * 
 * @param startRange
 * @param endRange
 */
export function getRandomIntInRange(startRange: number, endRange: number): number {
	return _in(0xd53343aa, 0x4fb7dd28, startRange, endRange, _r, _ri); 
}

/**
 * 
 */
export function getSnowLevel(): number {
	return _in(0xc5868a96, 0x6e5be3ae, _r, _rf); 
}

/**
 * 
 */
export function getReplayStatMissionType(): number {
	return _in(0x2b626a01, 0x50e4d449, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function getSizeOfSaveData(p0: boolean): number {
	return _in(0xa09f896c, 0xe912481f, p0, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getTennisSwingAnimComplete(ped: number): boolean {
	return _in(0x17df68d7, 0x20aa77f8, ped, _r); 
}

/**
 * 
 */
export function getStatusOfMissionRepeatSave(): number {
	return _in(0x2b5e102e, 0x4a42f2bf, _r, _ri); 
}

/**
 * 
 */
export function getTotalSuccessfulStuntJumps(): number {
	return _in(0x6856ec3d, 0x35c81ea4, _r, _ri); 
}

/**
 * 
 */
export function getWindDirection(): Vector3 {
	return _in(0x1f400fef, 0x721170da, _r, _rv); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * @param weatherType1
 * @param weatherType2
 * @param percentWeather2
 */
export function GetWeatherTypeTransition(): void {
	return _in(0xf3bbe884, 0xa14bb413, _i, _i, _f); 
}

/**
 * ```
 * Hardcoded to always return true.
 * ```
 */
export function HasAsyncInstallFinished(): boolean {
	return _in(0x14832bf2, 0xaba53fc5, _r); 
}

/**
 * ```
 * p3 - possibly radius?
 * ```
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 */
export function hasBulletImpactedInArea(x: number, y: number, z: number, p3: number, p4: boolean, p5: boolean): boolean {
	return _in(0x9870acfb, 0x89a90995, _fv(x), _fv(y), _fv(z), _fv(p3), p4, p5, _r); 
}

/**
 * 
 */
export function getWindSpeed(): number {
	return _in(0xa8cf1cc0, 0xafcd3f12, _r, _rf); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function hasBulletImpactedInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): boolean {
	return _in(0xdc8c5d7c, 0xfeab8394, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, _r); 
}

/**
 * ```
 * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
 * INT_SCORES_SCORTED was a hash collision
 * ```
 * @param hash
 * @param amount
 */
export function HasButtonCombinationJustBeenEntered(hash: number, amount: number): boolean {
	return _in(0x071e2a83, 0x9de82d90, _ch(hash), amount, _r); 
}

/**
 * ```
 * Get inputted "Cheat code", for example:
 * while (TRUE)
 * {
 * if (MISC::_557E43C447E700A8(${fugitive}))
 * {
 * // Do something.
 * }
 * SYSTEM::WAIT(0);
 * }
 * Calling this will also set the last saved string hash to zero.
 * ```
 * @param hash
 */
export function HasCheatStringJustBeenEntered(hash: number): boolean {
	return _in(0x557e43c4, 0x47e700a8, _ch(hash), _r); 
}

/**
 * ```
 * Hardcoded to return false.
 * ```
 */
export function HasResumedFromSuspend(): boolean {
	return _in(0xe8b9c0ec, 0x9e183f35, _r); 
}

/**
 * 
 * @param toggle
 */
export function ignoreNextRestart(toggle: boolean): void {
	return _in(0x21ffb63d, 0x8c615361, toggle); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 */
export function isAreaOccupied(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: any, p12: boolean): boolean {
	return _in(0xa61b4df5, 0x33dcb56e, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, p8, p9, p10, p11, p12, _r); 
}

/**
 * 
 */
export function haveCreditsReachedEnd(): boolean {
	return _in(0x075f1d57, 0x402c93ba, _r); 
}

/**
 * ```
 * if (MISC::IS_AUSSIE_VERSION()) {
 * sub_127a9(&l_31, 1024); // l_31 |= 1024
 * l_129 = 3;
 * sub_129d2("AUSSIE VERSION IS TRUE!?!?!"); // DEBUG
 * }
 * Used to block some of the prostitute stuff due to laws in Australia.
 * ```
 */
export function isAussieVersion(): boolean {
	return _in(0x9f1935ca, 0x1f724008, _r); 
}

/**
 * 
 */
export function isAutoSaveInProgress(): boolean {
	return _in(0x69240733, 0x738c19a0, _r); 
}

/**
 * ```
 * Returns bit's boolean state from [offset] of [address].
 * Example:
 * MISC::IS_BIT_SET(bitAddress, 1);
 * To enable and disable bits, see:
 * MISC::SET_BIT(&bitAddress, 1);   // enable
 * MISC::CLEAR_BIT(&bitAddress, 1); // disable
 * ```
 * @param address
 * @param offset
 */
export function isBitSet(address: number, offset: number): boolean {
	return _in(0xa921aa82, 0x0c25702f, address, offset, _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param ownedByPlayer
 */
export function isBulletInArea(x: number, y: number, z: number, radius: number, ownedByPlayer: boolean): boolean {
	return _in(0x3f202399, 0x9ad51c1f, _fv(x), _fv(y), _fv(z), _fv(radius), ownedByPlayer, _r); 
}

/**
 * ```
 * Returns true if command line option '-benchmark' is set.
 * ```
 */
export function IsCommandLineBenchmarkValueSet(): boolean {
	return _in(0xa049a5be, 0x0f04f2f8, _r); 
}

/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * 
 * For projectiles, see: [`IS_PROJECTILE_TYPE_IN_ANGLED_AREA`](#\_0xF0BC12401061DEA0)
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param ownedByPlayer
 * @return True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
 */
export function isBulletInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, ownedByPlayer: boolean): boolean {
	return _in(0x1a8b5f3c, 0x01e2b477, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), ownedByPlayer, _r); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param ownedByPlayer
 */
export function isBulletInBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean {
	return _in(0xde0f6d74, 0x50d37351, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r); 
}

/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 */
export function isFrontendFading(): boolean {
	return _in(0x7ea2b6af, 0x97eca6ed, _r); 
}

/**
 * ```
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * ```
 * @param incidentId
 */
export function isIncidentValid(incidentId: number): boolean {
	return _in(0xc8bc6461, 0xe629beaa, incidentId, _r); 
}

/**
 * 
 * @return Hard-coded to always return 0.
 */
export function isDurangoVersion(): boolean {
	return _in(0x4d982adb, 0x1978442d, _r); 
}

/**
 * ```
 * aka "constrained"
 * ```
 */
export function IsInPowerSavingMode(): boolean {
	return _in(0x684a4197, 0x5f077262, _r); 
}

/**
 * 
 */
export function isMemoryCardInUse(): boolean {
	return _in(0x8a75ce29, 0x56274add, _r); 
}

/**
 * 
 * @return Hard-coded to always return 0.
 */
export function isOrbisVersion(): boolean {
	return _in(0xa72bc0b6, 0x75b1519e, _r); 
}

/**
 * 
 */
export function isMinigameInProgress(): boolean {
	return _in(0x2b4a15e4, 0x4de0f478, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function isPointObscuredByAMissionEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any): boolean {
	return _in(0xe54e209c, 0x35ffa18d, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * @param weatherType
 */
export function isNextWeatherType(weatherType: string): boolean {
	return _in(0x2faa3a30, 0xbec0f25d, _ts(weatherType), _r); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param id
 */
export function IsPopMultiplierAreaUnk(id: number): boolean {
	return _in(0x1312f4b2, 0x42609ce3, id, _r); 
}

/**
 * 
 * @return Hard-coded to always return 1.
 */
export function isPcVersion(): boolean {
	return _in(0x48af3644, 0x4b965238, _r); 
}

/**
 * ```
 * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
 * ownedByPlayer = only projectiles fired by the player will be detected.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param ownedByPlayer
 */
export function isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean {
	return _in(0x5270a8fb, 0xc098c3f8, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r); 
}

/**
 * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
 * @param x
 * @param y
 * @param z
 * @param range
 * @param p4
 * @param checkVehicles
 * @param checkPeds
 * @param p7
 * @param p8
 * @param ignoreEntity
 * @param p10
 * @return Returns true if there is anything in that location matching the provided parameters.
 */
export function isPositionOccupied(x: number, y: number, z: number, range: number, p4: boolean, checkVehicles: boolean, checkPeds: boolean, p7: boolean, p8: boolean, ignoreEntity: number, p10: boolean): boolean {
	return _in(0xadcde75e, 0x1c60f32d, _fv(x), _fv(y), _fv(z), _fv(range), p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10, _r); 
}

/**
 * ```
 * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param type
 * @param ownedByPlayer
 */
export function isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, type: number, ownedByPlayer: boolean): boolean {
	return _in(0x2e0dc353, 0x342c4a6d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), type, ownedByPlayer, _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param projHash
 * @param radius
 * @param ownedByPlayer
 */
export function isProjectileTypeWithinDistance(x: number, y: number, z: number, projHash: number, radius: number, ownedByPlayer: boolean): boolean {
	return _in(0x34318593, 0x248c8fb2, _fv(x), _fv(y), _fv(z), _ch(projHash), _fv(radius), ownedByPlayer, _r); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * @param weatherType
 */
export function isPrevWeatherType(weatherType: string): boolean {
	return _in(0x44f28f86, 0x433b10a9, _ts(weatherType), _r); 
}

/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * 
 * ```
 * NativeDB Removed Parameter 7: float p7
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 * @param weaponHash
 * @param ownedByPlayer
 */
export function isProjectileTypeInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: number, weaponHash: number, ownedByPlayer: boolean): boolean {
	return _in(0xf0bc1240, 0x1061dea0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _fv(p7), _ch(weaponHash), ownedByPlayer, _r); 
}

/**
 * ```
 * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0xfefcf11b, 0x01287125, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * 
 * @param string
 */
export function isStringNull(string: string): boolean {
	return _in(0xf22b6c47, 0xc6eab066, _ts(string), _r); 
}

/**
 * 
 * @return Hard-coded to always return 0.
 */
export function isPs3Version(): boolean {
	return _in(0xcca1072c, 0x29d096c2, _r); 
}

/**
 * 
 * @param string
 */
export function isStringNullOrEmpty(string: string): boolean {
	return _in(0xca042b69, 0x57743895, _ts(string), _r); 
}

/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 */
export function isSniperInverted(): boolean {
	return _in(0x61a23b7e, 0xda9bda24, _r); 
}

/**
 * 
 */
export function isStuntJumpInProgress(): boolean {
	return _in(0x7a3f1970, 0x0a4d0525, _r); 
}

/**
 * 
 * @param ped
 */
export function isTennisMode(ped: number): boolean {
	return _in(0x5d5479d1, 0x15290c3f, ped, _r); 
}

/**
 * 
 */
export function isThisAMinigameScript(): boolean {
	return _in(0x7b30f65d, 0x7b710098, _r); 
}

/**
 * ```
 * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
 * ```
 */
export function LandingMenuIsActive(): boolean {
	return _in(0x3bbbd13e, 0x5041a79e, _r); 
}

/**
 * 
 */
export function isStuntJumpMessageShowing(): boolean {
	return _in(0x2272b0a1, 0x343129f4, _r); 
}

/**
 * 
 * @return Hard-coded to always return 0.
 */
export function isXbox360Version(): boolean {
	return _in(0xf6201b4d, 0xaf662a9d, _r); 
}

/**
 * ```
 * The following cloudhats are useable:
 * altostratus
 * Cirrus
 * cirrocumulus
 * Clear 01
 * Cloudy 01
 * Contrails
 * Horizon
 * horizonband1
 * horizonband2
 * horizonband3
 * horsey
 * Nimbus
 * Puffs
 * RAIN
 * Snowy 01
 * Stormy 01
 * stratoscumulus
 * Stripey
 * shower
 * Wispy
 * ```
 * @param name
 * @param transitionTime
 */
export function loadCloudHat(name: string, transitionTime: number): void {
	return _in(0xfc4842a3, 0x4657bfcb, _ts(name), _fv(transitionTime)); 
}

/**
 * 
 */
export function networkSetScriptIsSafeForNetworkGame(): void {
	return _in(0x9243bac9, 0x6d64c050); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function overrideSaveHouse(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: number, p7: number): boolean {
	return _in(0x1162ea8a, 0xe9d24eea, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), p5, _fv(p6), _fv(p7), _r); 
}

/**
 * ```
 * p0 was always 2 in R* scripts.
 * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
 * ```
 * @param p0
 */
export function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0: number): void {
	return _in(0x3ed1438c, 0x1f5c6612, p0); 
}

/**
 * 
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 * @param p5
 */
export function playTennisSwingAnim(ped: number, animDict: string, animName: string, p3: number, p4: number, p5: boolean): void {
	return _in(0xe266ed23, 0x311f24d4, ped, _ts(animDict), _ts(animName), _fv(p3), _fv(p4), p5); 
}

/**
 * 
 * @param toggle
 */
export function pauseDeathArrestRestart(toggle: boolean): void {
	return _in(0x2c2b3493, 0xfbf51c71, toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function playTennisDiveAnim(ped: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void {
	return _in(0x8fa9c42f, 0xc5d7c64b, ped, p1, _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * ```
 * Found in the scripts:
 * MISC::_11B56FBBF7224868("CONTRAILS");
 * ```
 * @param name
 */
export function preloadCloudHat(name: string): void {
	return _in(0x11b56fbb, 0xf7224868, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function registerBoolToSave(name: string): void {
	return _in(0xc8f41314, 0x14c835a1, _i, _ts(name)); 
}

/**
 * ```
 * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
 * ```
 */
export function populateNow(): void {
	return _in(0x7472bb27, 0x0d7b4f3e); 
}

/**
 * 
 */
export function queueMissionRepeatLoad(): boolean {
	return _in(0x72de5217, 0x8c291cb5, _r); 
}

/**
 * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
 * @return Returns 1 if the message isn't currently on screen.
 */
export function queueMissionRepeatSave(): boolean {
	return _in(0x44a0bdc5, 0x59b35f6e, _r); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function registerEnumToSave(name: string): void {
	return _in(0x10c2fa78, 0xd0e128a1, _i, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function RegisterInt64ToSave(name: string): void {
	return _in(0xa735353c, 0x77334ea0, _i, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function registerFloatToSave(name: string): void {
	return _in(0x7caec29e, 0xcb5dfebb, _i, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function registerTextLabelToSave(name: string): void {
	return _in(0xedb1232c, 0x5beae62f, _i, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function registerSaveHouse(p0: number, p1: number, p2: number, p3: number, p5: any, p6: any): any {
	return _in(0xc0714d0a, 0x7eeeca54, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _i, p5, p6, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param name
 */
export function registerIntToSave(name: string): void {
	return _in(0x34c9ee59, 0x86258415, _i, _ts(name)); 
}

/**
 * ```
 * Seems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?
 * MISC::_6F7794F28C6B2535(&a_0._f1, "tlPlateText");
 * MISC::_6F7794F28C6B2535(&a_0._f1C, "tlPlateText_pending");
 * MISC::_6F7794F28C6B2535(&a_0._f10B, "tlCarAppPlateText");
 * "tl" prefix sounds like "Text Label"
 * ```
 * @param p0
 * @param name
 */
export function RegisterTextLabelToSave2(name: string): void {
	return _in(0x6f7794f2, 0x8c6b2535, _i, _ts(name)); 
}

/**
 * 
 * @param p0
 */
export function removeDispatchSpawnBlockingArea(p0: any): void {
	return _in(0x264ac28b, 0x01b353a5, p0); 
}

/**
 * 
 * @param id
 * @param p1
 */
export function removePopMultiplierArea(id: number, p1: boolean): void {
	return _in(0xb129e447, 0xa2eda4bf, id, p1); 
}

/**
 * 
 */
export function resetDispatchIdealSpawnDistance(): void {
	return _in(0x77a84429, 0xdd9f0a15); 
}

/**
 * 
 */
export function resetDispatchSpawnBlockingAreas(): void {
	return _in(0xac7bfd5c, 0x1d83ea75); 
}

/**
 * 
 * @param id
 * @param p1
 */
export function removePopMultiplierSphere(id: number, p1: boolean): void {
	return _in(0xe6869bec, 0xdd8f2403, id, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 */
export function ResetDispatchSpawnLocation(): void {
	return _in(0x5896f2bd, 0x5683a4e1); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param p0
 */
export function resetDispatchTimeBetweenSpawnAttempts(p0: any): void {
	return _in(0xeb2db0ca, 0xd13154b3, p0); 
}

/**
 * ```
 * Appears to remove stealth kill action from memory
 * ```
 * @param hash
 * @param p1
 */
export function RemoveStealthKill(hash: number, p1: boolean): void {
	return _in(0xa6a12939, 0xf16d85be, _ch(hash), p1); 
}

/**
 * ```
 * Begins with RESET_*. Next character in the name is either D or E.
 * ```
 */
export function ResetBenchmarkRecording(): void {
	return _in(0x437138b6, 0xa830166a); 
}

/**
 * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
 */
export function RestartGame(): void {
	return _in(0xe574a662, 0xacaefbb1); 
}

/**
 * ```
 * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
 * ```
 */
export function SaveBenchmarkRecording(): void {
	return _in(0x37deb0aa, 0x183fb6d8); 
}

/**
 * 
 * @param player
 * @param p1
 * @param p2
 */
export function scriptRaceGetPlayerSplitTime(player: number): boolean {
	return _in(0x8ef5573a, 0x1f801a5c, player, _i, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function scriptRaceInit(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x0a60017f, 0x841a54f2, p0, p1, p2, p3); 
}

/**
 * ```
 * This sets bit [offset] of [address] to on.
 * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
 * Example:
 * MISC::SET_BIT(&bitAddress, 1);
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
 * Please note, this method may assign a value to [address] when used.
 * ```
 * @param address
 * @param offset
 */
export function setBit(offset: number): void {
	return _in(0x933d6a9e, 0xec1bacd0, _i, offset); 
}

/**
 * 
 * @param varName
 * @param rangeStart
 * @param rangeEnd
 * @param p3
 */
export function setBitsInRange(rangeStart: number, rangeEnd: number, p3: number): void {
	return _in(0x8ef07e15, 0x701d61ed, _i, rangeStart, rangeEnd, p3); 
}

/**
 * 
 */
export function scriptRaceShutdown(): void {
	return _in(0x1ff6bf9a, 0x63e5757f); 
}

/**
 * 
 * @param opacity
 */
export function SetCloudHatOpacity(opacity: number): void {
	return _in(0xf3619922, 0x5d6d8c86, _fv(opacity)); 
}

/**
 * 
 * @param player
 */
export function SetBeastModeActive(player: number): void {
	return _in(0x438822c2, 0x79b73b93, player); 
}

/**
 * 
 * @param p0
 */
export function setDispatchIdealSpawnDistance(p0: number): void {
	return _in(0x6fe601a6, 0x4180d423, _fv(p0)); 
}

/**
 * 
 * @param toggle
 */
export function setCreditsActive(toggle: boolean): void {
	return _in(0xb938b7e6, 0xd3c0620c, toggle); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function setDispatchSpawnLocation(x: number, y: number, z: number): void {
	return _in(0xd10f4420, 0x36302d50, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0: any, p1: number): void {
	return _in(0x48838ed9, 0x937a15d1, p0, _fv(p1)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setDispatchTimeBetweenSpawnAttempts(p0: any, p1: number): void {
	return _in(0x44f7cbc1, 0xbeb3327d, p0, _fv(p1)); 
}

/**
 * 
 * @param player
 */
export function setExplosiveAmmoThisFrame(player: number): void {
	return _in(0xa66c71c9, 0x8d5f2cfb, player); 
}

/**
 * 
 * @param player
 */
export function setExplosiveMeleeThisFrame(player: number): void {
	return _in(0xff1bed81, 0xbfdc0fe0, player); 
}

/**
 * ```
 * Sets whether the game should fade in after the player dies or is arrested.
 * ```
 * @param toggle
 */
export function setFadeInAfterDeathArrest(toggle: boolean): void {
	return _in(0xda66d279, 0x6ba33f12, toggle); 
}

/**
 * ```
 * Sets whether the game should fade out after the player is arrested.
 * ```
 * @param toggle
 */
export function setFadeOutAfterArrest(toggle: boolean): void {
	return _in(0x1e0b4dc0, 0xd990a4e7, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setFadeInAfterLoad(toggle: boolean): void {
	return _in(0xf3d78f59, 0xdfe18d79, toggle); 
}

/**
 * ```
 * Sets whether the game should fade out after the player dies.
 * ```
 * @param toggle
 */
export function setFadeOutAfterDeath(toggle: boolean): void {
	return _in(0x4a18e01d, 0xf2c87b86, toggle); 
}

/**
 * ```
 * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
 * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
 * ```
 * @param fakeWantedLevel
 */
export function setFakeWantedLevel(fakeWantedLevel: number): void {
	return _in(0x1454f244, 0x8de30163, fakeWantedLevel); 
}

/**
 * 
 * @param player
 */
export function setFireAmmoThisFrame(player: number): void {
	return _in(0x11879cdd, 0x803d30f4, player); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param player
 */
export function SetForcePlayerToJump(player: number): void {
	return _in(0xa1183bcf, 0xee0f93d1, player); 
}

/**
 * ```
 * level can be from 0 to 3
 * 0: 9.8
 * 1: 2.4
 * 2: 0.1 - very low
 * 3: 0.0
 * ```
 * @param level
 */
export function setGravityLevel(level: number): void {
	return _in(0x740e14fa, 0xd5842351, level); 
}

/**
 * ```
 * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
 * ```
 * @param toggle
 */
export function setGamePaused(toggle: boolean): void {
	return _in(0x577d1284, 0xd6873711, toggle); 
}

/**
 * ```
 * SET_INCIDENT_*
 * ```
 * @param incidentId
 * @param p1
 */
export function SetIncidentUnk(incidentId: number, p1: number): void {
	return _in(0xd261ba3e, 0x7e998072, incidentId, _fv(p1)); 
}

/**
 * 
 * @param incidentId
 * @param dispatchService
 * @param numUnits
 */
export function setIncidentRequestedUnits(incidentId: number, dispatchService: number, numUnits: number): void {
	return _in(0xb08b85d8, 0x60e7ba3c, incidentId, dispatchService, numUnits); 
}

/**
 * ```
 * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
 * ```
 * @param flag
 */
export function setInstancePriorityHint(flag: number): void {
	return _in(0xc5f0a8eb, 0xd3f361ce, flag); 
}

/**
 * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. It causes a loading screen to show as it reloads map data.
 * @param toggle
 */
export function setInstancePriorityMode(toggle: number): void {
	return _in(0x9bae5ad2, 0x508df078, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setMinigameInProgress(toggle: boolean): void {
	return _in(0x19e00d73, 0x22c6f85b, toggle); 
}

/**
 * ```
 * If true, the player can't save the game.
 * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
 * ^ also, if the mission flag is already set, the function does nothing at all
 * ```
 * @param toggle
 */
export function setMissionFlag(toggle: boolean): void {
	return _in(0xc4301e51, 0x21a0ed73, toggle); 
}

/**
 * ```
 * If toggle is true, the ped's head is shown in the pause menu
 * If toggle is false, the ped's head is not shown in the pause menu
 * ```
 * @param toggle
 */
export function SetPlayerIsInAnimalForm(toggle: boolean): void {
	return _in(0x4ebb7e87, 0xaa0dbed4, toggle); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * @param weatherType
 */
export function setOverrideWeather(weatherType: string): void {
	return _in(0xa43d5c6f, 0xe51adbef, _ts(weatherType)); 
}

/**
 * ```
 * SET_PLAYER_*
 * ```
 * @param toggle
 */
export function SetPlayerRockstarEditorDisabled(toggle: boolean): void {
	return _in(0x9d8d44ad, 0xbba61ef2, toggle); 
}

/**
 * ```
 * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
 * Does nothing if the mission flag is set.
 * ```
 * @param toggle
 */
export function setRandomEventFlag(toggle: boolean): void {
	return _in(0x97192708, 0x6cfd2158, toggle); 
}

/**
 * 
 * @param seed
 */
export function setRandomSeed(seed: number): void {
	return _in(0x444d98f9, 0x8c11f3ec, seed); 
}

/**
 * Controls rain, rain sounds and the creation of puddles.
 * 
 * With an `level` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
 * 
 * With an `level` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
 * 
 * To use the rain level of the current weather, call this native with `-1f` as `level`.
 * @param level
 */
export function SetRainLevel(level: number): void {
	return _in(0x643e26ea, 0x6e024d92, _fv(level)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param heading
 */
export function SetRestartCustomPosition(x: number, y: number, z: number, heading: number): void {
	return _in(0x706b5edc, 0xaa7fa663, _fv(x), _fv(y), _fv(z), _fv(heading)); 
}

/**
 * 
 */
export function setRandomWeatherType(): void {
	return _in(0x8b05f884, 0xcf7e8020); 
}

/**
 * ```
 * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
 * ```
 * @param ignoreVehicle
 */
export function setSaveMenuActive(ignoreVehicle: boolean): void {
	return _in(0xc9bf75d2, 0x8165ff77, ignoreVehicle); 
}

/**
 * Activates riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
 * @param toggle
 */
export function setRiotModeEnabled(toggle: boolean): void {
	return _in(0x2587a48b, 0xc88dfadf, toggle); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function setSaveHouse(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x4f548cab, 0xeae553bc, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param level
 */
export function SetSnowLevel(level: number): void {
	return _in(0x7f06937b, 0x0cdcbc1a, _fv(level)); 
}

/**
 * 
 * @param toggle
 */
export function setStuntJumpsCanTrigger(toggle: boolean): void {
	return _in(0xd7918568, 0x9f8fd5df, toggle); 
}

/**
 * Allows the player to perform super jumps. This function must be called every frame for it to work.
 * It basically OR's a flag for a single frame, allowing the ped to perform a super jump only when the flag is set.
 * @param player
 */
export function setSuperJumpThisFrame(player: number): void {
	return _in(0x57fff03e, 0x423a4c0b, player); 
}

/**
 * 
 * @param toggle
 */
export function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void {
	return _in(0xb98236ca, 0xaecef897, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setThisScriptCanBePaused(toggle: boolean): void {
	return _in(0xaa391c72, 0x8106f7af, toggle); 
}

/**
 * ```
 * Maximum value is 1.
 * At a value of 0 the game will still run at a minimum time scale.
 * Slow Motion 1: 0.6
 * Slow Motion 2: 0.4
 * Slow Motion 3: 0.2
 * ```
 * @param timeScale
 */
export function setTimeScale(timeScale: number): void {
	return _in(0x1d408577, 0xd440e81e, _fv(timeScale)); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#0x29B487C359E19889) for weather types.
 * @param weatherType
 */
export function setWeatherTypeNowPersist(weatherType: string): void {
	return _in(0xed712ca3, 0x27900c8a, _ts(weatherType)); 
}

/**
 * ```
 * // timecycle_keyframe_data
 * BLIZZARD = 0x27EA2814
 * CLEAR = 0x36A83D84
 * CLEARING = 0x6DB1A50D
 * CLOUDS = 0x30FDAF5C
 * EXTRASUNNY = 0x97AA0A79
 * FOGGY = 0xAE737644
 * HALLOWEEN = 0xC91A3202
 * NEUTRAL = 0xA4CA1326
 * OVERCAST = 0xBB898D2D
 * RAIN = 0x54A69840
 * SMOG = 0x10DCF4B5
 * SNOW = 0xEFB6EFF6
 * SNOWLIGHT = 0x23FB812B
 * THUNDER = 0xB677829F
 * XMAS = 0xAAC9C895
 * ```
 * @param weatherType
 */
export function setWeatherTypeNow(weatherType: string): void {
	return _in(0x29b487c3, 0x59e19889, _ts(weatherType)); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * @param weatherType
 */
export function setWeatherTypePersist(weatherType: string): void {
	return _in(0x704983df, 0x373b198f, _ts(weatherType)); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * 
 * ```
 * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
 * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
 * ```
 * @param weatherType1
 * @param weatherType2
 * @param percentWeather2
 */
export function SetWeatherTypeTransition(weatherType1: number, weatherType2: number, percentWeather2: number): void {
	return _in(0x578c7528, 0x48ecfa0c, _ch(weatherType1), _ch(weatherType2), _fv(percentWeather2)); 
}

/**
 * Refer to [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) for weather types.
 * @param weatherType
 * @param time
 */
export function setWeatherTypeOvertimePersist(weatherType: string, time: number): void {
	return _in(0xfb5045b7, 0xc42b75bf, _ts(weatherType), _fv(time)); 
}

/**
 * ```
 * Sets the the raw wind speed value.
 * ```
 * @param speed
 */
export function setWind(speed: number): void {
	return _in(0xac3a74e8, 0x384a9919, _fv(speed)); 
}

/**
 * Sets the wind direction.
 * @param direction
 */
export function setWindDirection(direction: number): void {
	return _in(0xeb0f4468, 0x467b4528, _fv(direction)); 
}

/**
 * ```
 * Using this native will clamp the wind speed value to a range of 0.0- 12.0. Using SET_WIND sets the same value but without the restriction.
 * ```
 * @param speed
 */
export function setWindSpeed(speed: number): void {
	return _in(0xee09eced, 0xbabe47fc, _fv(speed)); 
}

/**
 * Shoots a bullet from the first vector to the second vector. The weapon used as weaponHash should already be loaded via REQUEST_WEAPON_ASSET, otherwise the bullet may fail to materialise.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param pureAccuracy
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 */
export function shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, pureAccuracy: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number): void {
	return _in(0x867654cb, 0xc7606f2c, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, pureAccuracy, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed)); 
}

/**
 * ```
 * NativeDB Added Parameter 19: Any p18
 * NativeDB Added Parameter 20: Any p19
 * NativeDB Added Parameter 21: Any p20
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 * @param p15
 * @param p16
 * @param p17
 */
export function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: boolean, p15: boolean, p16: boolean, p17: boolean): void {
	return _in(0xbfe5756e, 0x7407064a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), entity, p14, p15, p16, p17); 
}

/**
 * ```
 * entity - entity to ignore
 * ```
 * 
 * ```
 * NativeDB Added Parameter 15: Any p14
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 */
export function shootSingleBulletBetweenCoordsIgnoreEntity(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number): void {
	return _in(0xe3a7742e, 0x0b7a2f8b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), entity); 
}

/**
 * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
 * @return Returns true if the game is using the metric measurement system, false if imperial is used.
 */
export function shouldUseMetricMeasurements(): boolean {
	return _in(0xd3d15555, 0x431ab793, _r); 
}

/**
 * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
 * @param t
 * @param x
 * @param y
 * @param z
 * @param w
 * @param x1
 * @param y1
 * @param z1
 * @param w1
 * @param outX
 * @param outY
 * @param outZ
 * @param outW
 */
export function slerpNearQuaternion(t: number, x: number, y: number, z: number, w: number, x1: number, y1: number, z1: number, w1: number): void {
	return _in(0xf2f6a2fa, 0x49278625, _fv(t), _fv(x), _fv(y), _fv(z), _fv(w), _fv(x1), _fv(y1), _fv(z1), _fv(w1), _f, _f, _f, _f); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function startSaveData(p1: any, p2: boolean): void {
	return _in(0xa9575f81, 0x2c6a7997, _i, p1, p2); 
}

/**
 * ```
 * Begins with START_*. Next character in the name is either D or E.
 * ```
 */
export function StartBenchmarkRecording(): void {
	return _in(0x92790862, 0xe36c2ada); 
}

/**
 * ```
 * Begins with STOP_*. Next character in the name is either D or E.
 * ```
 */
export function StopBenchmarkRecording(): void {
	return _in(0xc7db36c2, 0x4634f52b); 
}

/**
 * 
 * @param p0
 * @param size
 * @param arrayName
 */
export function startSaveArrayWithSize(size: number, arrayName: string): void {
	return _in(0x60fe567d, 0xf1b1af9d, _i, size, _ts(arrayName)); 
}

/**
 * 
 */
export function stopSaveData(): void {
	return _in(0x74e20c91, 0x45fb66fd); 
}

/**
 * 
 */
export function stopSaveStruct(): void {
	return _in(0xeb1774df, 0x12bb9f12); 
}

/**
 * 
 * @param p0
 * @param size
 * @param structName
 */
export function startSaveStructWithSize(size: number, structName: string): void {
	return _in(0xbf737600, 0xcddbeadd, _i, size, _ts(structName)); 
}

/**
 * 
 */
export function stopSaveArray(): void {
	return _in(0x04456f95, 0x153c6be4); 
}

/**
 * For a full list, see [here](https://gist.github.com/4mmonium/f76f3ecef649ed275b260b433ea84494).
 * @param scriptName
 */
export function terminateAllScriptsWithThisName(scriptName: string): void {
	return _in(0x9dc711bc, 0x69c548df, _ts(scriptName)); 
}

/**
 * ```
 * Called 4 times in the b617d scripts:
 * MISC::_A74802FB8D0B7814("CONTRAILS", 0);
 * ```
 * @param name
 * @param p1
 */
export function unloadCloudHat(name: string, p1: number): void {
	return _in(0xa74802fb, 0x8d0b7814, _ts(name), _fv(p1)); 
}

/**
 * ```
 * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
 * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
 * ```
 * @param string
 * @param outInteger
 */
export function stringToInt(string: string): boolean {
	return _in(0x5a5f40fe, 0x637eb584, _ts(string), _ii(outInteger), _r); 
}

/**
 * ```
 * Returns the current status of the onscreen keyboard, and updates the output.
 * Status Codes:
 * -1: Keyboard isn't active
 * 0: User still editing
 * 1: User has finished editing
 * 2: User has canceled editing
 * ```
 */
export function updateOnscreenKeyboard(): number {
	return _in(0x0cf2b696, 0xbbf945ae, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function tan(p0: number): number {
	return _in(0x632106cc, 0x96e82e91, _fv(p0), _r, _rf); 
}

/**
 * 
 * @param toggle
 */
export function usingMissionCreator(toggle: boolean): void {
	return _in(0xf14878fc, 0x50bec6ee, toggle); 
}

/**
 * ```
 * Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
 * 
 * U*
 * ```
 */
export function UiIsSingleplayerPauseMenuActive(): boolean {
	return _in(0xea2f2061, 0x875eed90, _r); 
}

/**
 * 
 * @param minAmplitude
 */
export function waterOverrideSetOceannoiseminamplitude(minAmplitude: number): void {
	return _in(0x31727907, 0xb2c43c55, _fv(minAmplitude)); 
}

/**
 * 
 * @param amplitude
 */
export function waterOverrideSetOceanwaveamplitude(amplitude: number): void {
	return _in(0x405591ec, 0x8fd9096d, _fv(amplitude)); 
}

/**
 * 
 * @param p0
 */
export function waterOverrideFadeIn(p0: number): void {
	return _in(0xa8434f1d, 0xff41d6e7, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function waterOverrideFadeOut(p0: number): void {
	return _in(0xc3c221ad, 0xdde31a11, _fv(p0)); 
}

/**
 * 
 * @param minAmplitude
 */
export function waterOverrideSetOceanwaveminamplitude(minAmplitude: number): void {
	return _in(0xf751b16f, 0xb32abc1d, _fv(minAmplitude)); 
}

/**
 * 
 * @param maxAmplitude
 */
export function waterOverrideSetOceanwavemaxamplitude(maxAmplitude: number): void {
	return _in(0xb3e6360d, 0xde733e82, _fv(maxAmplitude)); 
}

/**
 * 
 * @param disturb
 */
export function waterOverrideSetRippledisturb(disturb: number): void {
	return _in(0xb9854dfd, 0xe0d833d6, _fv(disturb)); 
}

/**
 * 
 * @param minBumpiness
 */
export function waterOverrideSetRippleminbumpiness(minBumpiness: number): void {
	return _in(0x6216b116, 0x083a7cb4, _fv(minBumpiness)); 
}

/**
 * 
 * @param bumpiness
 */
export function waterOverrideSetRipplebumpiness(bumpiness: number): void {
	return _in(0x7c9c0b1e, 0xeb1f9072, _fv(bumpiness)); 
}

/**
 * 
 * @param maxAmplitude
 */
export function waterOverrideSetShorewavemaxamplitude(maxAmplitude: number): void {
	return _in(0xa7a11274, 0x90312c36, _fv(maxAmplitude)); 
}

/**
 * 
 * @param maxBumpiness
 */
export function waterOverrideSetRipplemaxbumpiness(maxBumpiness: number): void {
	return _in(0x9f5e6bb6, 0xb34540da, _fv(maxBumpiness)); 
}

/**
 * 
 * @param amplitude
 */
export function waterOverrideSetShorewaveamplitude(amplitude: number): void {
	return _in(0xb8f87ead, 0x7533b176, _fv(amplitude)); 
}

/**
 * 
 * @param minAmplitude
 */
export function waterOverrideSetShorewaveminamplitude(minAmplitude: number): void {
	return _in(0xc3ead29a, 0xb273ece8, _fv(minAmplitude)); 
}

/**
 * ```
 * This seems to edit the water wave, intensity around your current location.
 * 0.0f = Normal
 * 1.0f = So Calm and Smooth, a boat will stay still.
 * 3.0f = Really Intense.
 * ```
 * @param strength
 */
export function waterOverrideSetStrength(strength: number): void {
	return _in(0xc54a08c8, 0x5ae4d410, _fv(strength)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function cellCamActivate(p0: boolean, p1: boolean): void {
	return _in(0xfde8f069, 0xc542d126, p0, p1); 
}

/**
 * ```
 * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
 * I can confirm the above. This function is hard-coded to always return 1.
 * ```
 */
export function canPhoneBeSeenOnScreen(): boolean {
	return _in(0xc4e28138, 0x98c97a4b, _r); 
}

/**
 * ```
 * Disables the phone up-button, oddly enough.
 * i.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.
 * When the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.
 * This can be used for creating menu's when trying to disable the phone from being used.
 * You do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.
 * ```
 * @param toggle
 */
export function CellCamDisableThisFrame(toggle: boolean): void {
	return _in(0x015c49a9, 0x3e3e086e, toggle); 
}

/**
 * 
 * @param entity
 */
export function cellCamIsCharVisibleNoFaceCheck(entity: number): boolean {
	return _in(0x439e9bc9, 0x5b7e7fbe, entity, _r); 
}

/**
 * ```
 * For move the finger of player, the value of int goes 1 at 5.
 * ```
 * @param direction
 */
export function CellCamMoveFinger(direction: number): void {
	return _in(0x95c9e72f, 0x3d7dec9b, direction); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetDistance(p0: number): void {
	return _in(0x53f4892d, 0x18ec90a4, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetHeadPitch(p0: number): void {
	return _in(0xd6ade981, 0x781fca09, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetHeadHeight(p0: number): void {
	return _in(0x466da42c, 0x89865553, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetHeadRoll(p0: number): void {
	return _in(0xf1e22dc1, 0x3f5eebad, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetHorizontalOffset(p0: number): void {
	return _in(0x1b0b4aee, 0xd5b9b41c, _fv(p0)); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetRoll(p0: number): void {
	return _in(0x15e69e28, 0x02c24b8d, _fv(p0)); 
}

/**
 * ```
 * if the bool "Toggle" is "true" so the phone is lean.
 * if the bool "Toggle" is "false" so the phone is not lean.
 * ```
 * @param toggle
 */
export function CellCamSetLean(toggle: boolean): void {
	return _in(0x44e44169, 0xef70138e, toggle); 
}

/**
 * 
 * @param position
 */
export function getMobilePhonePosition(): void {
	return _in(0x584fdfda, 0x48805b86, _v(position)); 
}

/**
 * 
 * @param p0
 */
export function CellCamSetVerticalOffset(p0: number): void {
	return _in(0x3117d84e, 0xfa60f77b, _fv(p0)); 
}

/**
 * ```
 * Destroys the currently active mobile phone.
 * ```
 */
export function destroyMobilePhone(): void {
	return _in(0x3bc861df, 0x703e5097); 
}

/**
 * ```
 * Creates a mobile phone of the specified type.
 * Possible phone types:
 * 0 - Default phone / Michael's phone
 * 1 - Trevor's phone
 * 2 - Franklin's phone
 * 4 - Prologue phone
 * These values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.
 * ```
 * @param phoneType
 */
export function createMobilePhone(phoneType: number): void {
	return _in(0xa4e8e696, 0xc532fbc7, phoneType); 
}

/**
 * 
 * @param renderId
 */
export function getMobilePhoneRenderId(): void {
	return _in(0xb4a53e05, 0xf68b6fa1, _ii(renderId)); 
}

/**
 * 
 * @param rotation
 * @param p1
 */
export function getMobilePhoneRotation(p1: number): void {
	return _in(0x1cefb61f, 0x193070ae, _v(rotation), p1); 
}

/**
 * 
 * @param posX
 * @param posY
 * @param posZ
 */
export function setMobilePhonePosition(posX: number, posY: number, posZ: number): void {
	return _in(0x693a5c6d, 0x6734085b, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * ```
 * Last parameter is unknown and always zero.
 * ```
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p3
 */
export function setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: any): void {
	return _in(0xbb779c0c, 0xa917e865, _fv(rotX), _fv(rotY), _fv(rotZ), p3); 
}

/**
 * ```
 * If bool Toggle = true so the mobile is hide to screen.
 * If bool Toggle = false so the mobile is show to screen.
 * ```
 * @param toggle
 */
export function scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void {
	return _in(0xf511f759, 0x238a5122, toggle); 
}

/**
 * 
 * @param toggle
 */
export function SetMobilePhoneUnk(toggle: boolean): void {
	return _in(0x375a706a, 0x5c2fd084, toggle); 
}

/**
 * ```
 * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
 * ```
 * @param scale
 */
export function setMobilePhoneScale(scale: number): void {
	return _in(0xcbdd322a, 0x73d6d932, _fv(scale)); 
}

/**
 * 
 * @param itemData
 * @param quantity
 */
export function NetGameserverBasketAddItem(quantity: number): boolean {
	return _in(0xf3098071, 0x8c8ed876, _i, quantity, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function NetGameserverBasketApplyServerData(p0: any): boolean {
	return _in(0xe1a0450e, 0xd46a7812, p0, _i, _r); 
}

/**
 * ```
 * NativeDB Introduced: v372
 * ```
 */
export function NetGameserverBasketDelete(): boolean {
	return _in(0xfa336e7f, 0x40c0a0d0, _r); 
}

/**
 * 
 */
export function NetGameserverBasketEnd(): boolean {
	return _in(0xa6556812, 0x1df2ea26, _r); 
}

/**
 * 
 * @param transactionId
 * @param categoryHash
 * @param actionHash
 * @param flags
 */
export function NetGameserverBasketStart(categoryHash: number, actionHash: number, flags: number): boolean {
	return _in(0x279f08b1, 0xa4b29b7e, _i, _ch(categoryHash), _ch(actionHash), flags, _r); 
}

/**
 * 
 */
export function NetGameserverBasketIsFull(): boolean {
	return _in(0x27f76cc6, 0xc55ad30e, _r); 
}

/**
 * 
 * @param transactionId
 * @param categoryHash
 * @param itemHash
 * @param actionTypeHash
 * @param value
 * @param flags
 */
export function NetGameserverBeginService(categoryHash: number, itemHash: number, actionTypeHash: number, value: number, flags: number): boolean {
	return _in(0x3c5fd37b, 0x5499582e, _i, _ch(categoryHash), _ch(itemHash), _ch(actionTypeHash), value, flags, _r); 
}

/**
 * 
 */
export function NetGameserverCatalogIsReady(): boolean {
	return _in(0x3c448746, 0x1e9b0dcb, _r); 
}

/**
 * 
 * @param hash
 */
export function NetGameserverCatalogItemExistsHash(hash: number): boolean {
	return _in(0x247f0f73, 0xa182ea0b, _ch(hash), _r); 
}

/**
 * 
 * @param name
 */
export function NetGameserverCatalogItemExists(name: string): boolean {
	return _in(0xbd4d7eaf, 0x8a30f637, _ts(name), _r); 
}

/**
 * 
 * @param slot
 * @param transfer
 * @param reason
 */
export function NetGameserverDeleteCharacterSlot(slot: number, transfer: boolean, reason: number): boolean {
	return _in(0x51f1a8e4, 0x8c3d2f6d, slot, transfer, _ch(reason), _r); 
}

/**
 * 
 * @param transactionId
 */
export function NetGameserverCheckoutStart(transactionId: number): boolean {
	return _in(0x39be7cea, 0x8d9cc8e6, transactionId, _r); 
}

/**
 * 
 */
export function NetGameserverDeleteCharacterSlotGetStatus(): number {
	return _in(0x0a6d923d, 0xffc9bd89, _r, _ri); 
}

/**
 * 
 */
export function NetGameserverDeleteSetTelemetryNonceSeed(): boolean {
	return _in(0x112cef16, 0x15a1139f, _r); 
}

/**
 * 
 * @param transactionId
 */
export function NetGameserverEndService(transactionId: number): boolean {
	return _in(0xe2a99a9b, 0x524befff, transactionId, _r); 
}

/**
 * ```
 * bool is always true in game scripts
 * ```
 * @param itemHash
 * @param categoryHash
 * @param p2
 */
export function NetGameserverGetPrice(itemHash: number, categoryHash: number, p2: boolean): number {
	return _in(0xc2700942, 0x2fcca88d, _ch(itemHash), _ch(categoryHash), p2, _r, _ri); 
}

/**
 * ```
 * Note: only one of the arguments can be set to true at a time
 * ```
 * @param inventory
 * @param playerbalance
 */
export function NetGameserverGetBalance(inventory: boolean, playerbalance: boolean): boolean {
	return _in(0x35a1b3e1, 0xd1315cfa, inventory, playerbalance, _r); 
}

/**
 * 
 */
export function NetGameserverIsCatalogValid(): boolean {
	return _in(0x2b949a1e, 0x6aec8f6a, _r); 
}

/**
 * 
 * @param state
 */
export function NetGameserverGetCatalogState(): boolean {
	return _in(0xcf38dafb, 0xb49ede5e, _ii(state), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function NetGameserverGetTransactionManagerData(): boolean {
	return _in(0x897433d2, 0x92b44130, _i, _i, _r); 
}

/**
 * 
 * @param charSlot
 */
export function NetGameserverSessionApplyReceivedData(charSlot: number): boolean {
	return _in(0x2f41d51b, 0xa3bcd1f1, charSlot, _r); 
}

/**
 * 
 */
export function NetGameserverIsSessionRefreshPending(): boolean {
	return _in(0x810e8431, 0xc0614bf9, _r); 
}

/**
 * 
 * @param p0
 */
export function NetGameserverSetTelemetryNonceSeed(p0: number): boolean {
	return _in(0x9507d427, 0x1988e1ae, p0, _r); 
}

/**
 * 
 * @param charSlot
 * @param amount
 */
export function NetGameserverTransferBankToWallet(charSlot: number, amount: number): boolean {
	return _in(0xd47a2c1b, 0xa117471d, charSlot, amount, _r); 
}

/**
 * 
 * @param charSlot
 */
export function NetGameserverIsSessionValid(charSlot: number): boolean {
	return _in(0xb24f0944, 0xda203d9e, charSlot, _r); 
}

/**
 * ```
 * Same as 0x23789E777D14CE44
 * ```
 */
export function NetGameserverTransferCashGetStatus2(): number {
	return _in(0x350aa5eb, 0xc03d3bd2, _r, _ri); 
}

/**
 * 
 * @param charSlot
 */
export function NetGameserverStartSession(charSlot: number): boolean {
	return _in(0xa135ac89, 0x2a58fc07, charSlot, _r); 
}

/**
 * 
 * @param charSlot
 * @param amount
 */
export function NetGameserverTransferWalletToBank(charSlot: number, amount: number): boolean {
	return _in(0xc2f7fe53, 0x09181c7d, charSlot, amount, _r); 
}

/**
 * ```
 * Same as 0x350AA5EBC03D3BD2
 * ```
 */
export function NetGameserverTransferCashGetStatus(): number {
	return _in(0x23789e77, 0x7d14ce44, _r, _ri); 
}

/**
 * ```
 * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
 * ```
 */
export function NetGameserverTransferCashSetTelemetryNonceSeed(): boolean {
	return _in(0x498c1e05, 0xce5f7877, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 */
export function NetGameserverUseServerTransactions(): boolean {
	return _in(0x7d270879, 0x6355b20b, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: int p1
 * NativeDB Added Parameter 3: int amount
 * NativeDB Added Parameter 4: int* p3
 * ```
 */
export function CanPayGoon(): boolean {
	return _in(0x9777734d, 0xad16992f, _r); 
}

/**
 * ```
 * Does nothing and always returns false.
 * ```
 * @param amount
 */
export function depositVc(amount: number): boolean {
	return _in(0xe260e0bb, 0x9cd995ac, amount, _r); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkBuyBackupGang(p0: number, p1: number, p2: boolean, p3: boolean): void {
	return _in(0xa3eddaa4, 0x2411d3b9, p0, p1, p2, p3); 
}

/**
 * ```
 * p1 = 0 (always)
 * p2 = 1 (always)
 * ```
 * @param cost
 * @param p1
 * @param p2
 */
export function networkBuyAirstrike(cost: number, p1: boolean, p2: boolean): void {
	return _in(0x763b4bd3, 0x05338f19, cost, p1, p2); 
}

/**
 * ```
 * p1 is just an assumption. p2 was false and p3 was true.
 * ```
 * @param amount
 * @param victim
 * @param p2
 * @param p3
 */
export function networkBuyBounty(amount: number, victim: number, p2: boolean, p3: boolean): void {
	return _in(0x7b718e19, 0x7453f2d9, amount, victim, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkBuyContraband(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void {
	return _in(0x30fd873e, 0xce50e9f6, p0, p1, _ch(p2), p3, p4); 
}

/**
 * 
 * @param cost
 * @param p1
 * @param p2
 */
export function networkBuyHealthcare(cost: number, p1: boolean, p2: boolean): void {
	return _in(0xd9b067e5, 0x5253e3dd, cost, p1, p2); 
}

/**
 * ```
 * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
 * The last 3 parameters are,
 * 2,0,1 in the am_ferriswheel.c
 * 1,0,1 in the am_rollercoaster.c
 * ```
 * @param amountSpent
 * @param p1
 * @param p2
 * @param p3
 */
export function networkBuyFairgroundRide(amountSpent: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0x8a7b3952, 0xdd64d2b5, amountSpent, p1, p2, p3); 
}

/**
 * ```
 * p1 = 0 (always)
 * p2 = 1 (always)
 * ```
 * @param cost
 * @param p1
 * @param p2
 */
export function networkBuyHeliStrike(cost: number, p1: boolean, p2: boolean): void {
	return _in(0x81aa4610, 0xe3fd3a69, cost, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkBuyLotteryTicket(p0: number, p1: number, p2: boolean, p3: boolean): void {
	return _in(0xd987f248, 0x9969668c, p0, p1, p2, p3); 
}

/**
 * 
 * @param amount
 * @param item
 * @param p2
 * @param p3
 * @param p4
 * @param item_name
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function networkBuyItem(amount: number, item: number, p2: any, p3: any, p4: boolean, item_name: string, p6: any, p7: any, p8: any, p9: boolean): void {
	return _in(0xf0077c79, 0x7f66a355, amount, _ch(item), p2, p3, p4, _ts(item_name), p6, p7, p8, p9); 
}

/**
 * 
 * @param propertyCost
 * @param propertyName
 * @param p2
 * @param p3
 */
export function networkBuyProperty(propertyCost: number, propertyName: number, p2: boolean, p3: boolean): void {
	return _in(0x650a08a2, 0x80870af6, propertyCost, _ch(propertyName), p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function networkBuySmokes(p0: number, p1: boolean, p2: boolean): void {
	return _in(0x75af80e6, 0x1248eebd, p0, p1, p2); 
}

/**
 * 
 * @param amount
 */
export function networkCanBet(amount: number): boolean {
	return _in(0x3a54e336, 0x60ded67f, amount, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkCanReceivePlayerCash(p0: any, p1: any, p2: any, p3: any): boolean {
	return _in(0x5d17be59, 0xd2123284, p0, p1, p2, p3, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function networkCanSpendMoney(p0: any, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean {
	return _in(0xab3caa6b, 0x422164da, p0, p1, p2, p3, p4, _r); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param cost
 */
export function networkCanBuyLotteryTicket(cost: number): boolean {
	return _in(0xc62dd183, 0x75c99130, cost, _r); 
}

/**
 * 
 */
export function networkCanShareJobCash(): boolean {
	return _in(0x1c247330, 0x1b1c66ba, _r); 
}

/**
 * NETWORK_C\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function NetworkCasinoCanGamble(p0: any): boolean {
	return _in(0xf62f6d95, 0x28358fe4, p0, _r); 
}

/**
 * ```
 * NETWORK_CAN_R??? or NETWORK_CAN_S???
 * ```
 * 
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function NetworkCanSpendMoney2(p0: any, p1: boolean, p2: boolean, p3: boolean, p5: any): boolean {
	return _in(0x7303e27c, 0xc6532080, p0, p1, p2, p3, _i, p5, _r); 
}

/**
 * Same as 0x394DCDB9E836B7A9.
 * NETWORK_C\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 */
export function NetworkCasinoCanPurchaseChipsWithPvc2(): boolean {
	return _in(0x8968d4d8, 0xc6c40c11, _r); 
}

/**
 * Same as 0x8968D4D8C6C40C11.
 * NETWORK_C\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 */
export function NetworkCasinoCanPurchaseChipsWithPvc(): boolean {
	return _in(0x394dcdb9, 0xe836b7a9, _r); 
}

/**
 * NETWORK_C\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 * @param p1
 */
export function NetworkCasinoPurchaseChips(p0: number, p1: number): boolean {
	return _in(0x3bd10147, 0x1c7f9eec, p0, p1, _r); 
}

/**
 * GTAO_CASINO_HOUSE
 * GTAO_CASINO_INSIDETRACK
 * GTAO_CASINO_LUCKYWHEEL
 * GTAO_CASINO_BLACKJACK
 * GTAO_CASINO_ROULETTE
 * GTAO_CASINO_SLOTS
 * GTAO_CASINO_PURCHASE_CHIPS
 * NETWORK_C\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param hash
 */
export function NetworkCasinoCanUseGamblingType(hash: number): boolean {
	return _in(0x158c16f5, 0xe4cf41f8, _ch(hash), _r); 
}

/**
 * 
 * @param characterSlot
 */
export function networkClearCharacterWallet(characterSlot: number): void {
	return _in(0xa921ded1, 0x5fdf28f5, characterSlot); 
}

/**
 * ```
 * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
 * ```
 * @param characterSlot
 * @param p1
 * @param p2
 */
export function networkDeleteCharacter(characterSlot: number, p1: boolean, p2: boolean): void {
	return _in(0x05a50af3, 0x8947eb8d, characterSlot, p1, p2); 
}

/**
 * NETWORK_C\*
 * 
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 * @param p1
 */
export function NetworkCasinoSellChips(p0: number, p1: number): boolean {
	return _in(0xed44897c, 0xb336f480, p0, p1, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 */
export function NetworkEarnBountyHunterReward(p0: any): void {
	return _in(0xf6b170f9, 0xa02e9e87, p0); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function NetworkDeductCash(amount: number, p1: string, p2: string, p3: boolean, p4: boolean, p5: boolean): void {
	return _in(0x18b7ae22, 0x4b087e26, amount, _ts(p1), _ts(p2), p3, p4, p5); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function NetworkEarnCasinoHeist(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void {
	return _in(0x72e7c7b9, 0x615fa3c3, p0, p1, p2, p3, p4, p5, p6); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnBoss(p0: any, p1: any, p2: any): void {
	return _in(0x08b0ca7a, 0x6ab3ac32, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkEarnBossAgency(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x0cb1be06, 0x33c024a8, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnCollectableCompletedCollection(amount: number, p1: any): void {
	return _in(0x5c9b198a, 0xf5a54fa6, amount, p1); 
}

/**
 * ```
 * Example for p1: "AM_DISTRACT_COPS"
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function networkEarnFromAmbientJob(p0: number, p1: string): void {
	return _in(0xfb6db092, 0xfbae29e6, p0, _ts(p1), _i); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkEarnCasinoHeistBonus(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x3ec7471e, 0x6909798a, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromArenaCareerProgression(amount: number, p1: any): void {
	return _in(0x0f99f70c, 0x61f14619, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 */
export function NetworkEarnFmbbWageBonus(p0: any): void {
	return _in(0xfffba1b1, 0xf7c0b6f4, p0); 
}

/**
 * ```
 * DSPORT
 * ```
 * @param p0
 * @param p1
 */
export function networkEarnFromAiTargetKill(p0: any, p1: any): void {
	return _in(0x515b4a22, 0xe4d3c6d7, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromArenaSkillLevelProgression(amount: number, p1: any): void {
	return _in(0xe08256f9, 0x72c7bb2c, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkEarnFromArenaWar(amount: number, p1: any, p2: any, p3: any): void {
	return _in(0x631f1cb8, 0xfb4130aa, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 */
export function NetworkEarnFromAssassinateTargetKilled(amount: number): void {
	return _in(0xfa700d8a, 0x9905f78a, amount); 
}

/**
 * ```
 * For the money bags that drop a max of $40,000. Often called 40k bags.
 * Most likely NETWORK_EARN_FROM_ROB***
 * ```
 * @param amount
 */
export function NetworkEarnFromArmourTruck(amount: number): void {
	return _in(0xf514621e, 0x8ea463d0, amount); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 */
export function NetworkEarnFromAutoshopBusiness(p0: any, p1: any): void {
	return _in(0x36a7fd5a, 0x7194b03e, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 */
export function NetworkEarnFromAssassinateTargetKilled2(amount: number): void {
	return _in(0x5e7ae8aa, 0xbe8b7c0d, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 */
export function NetworkEarnFromBbEventCargo(amount: number): void {
	return _in(0xa8295906, 0x2361b259, amount); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function NetworkEarnFromAutoshopIncome(p0: any): void {
	return _in(0xc66d1cf9, 0x9ed7fe25, p0); 
}

/**
 * 
 * @param amount
 * @param p1
 */
export function networkEarnFromBetting(amount: number, p1: string): void {
	return _in(0x827a5ba1, 0xa44aca6d, amount, _ts(p1)); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 */
export function NetworkEarnFromBbEventBonus(amount: number): void {
	return _in(0xfdd8d244, 0x0daf1590, amount); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 */
export function NetworkEarnFromBikerIncome(p0: any): void {
	return _in(0x71bec32f, 0xa466e105, p0); 
}

/**
 * 
 * @param amount
 * @param heistHash
 */
export function networkEarnFromBendJob(amount: number, heistHash: string): void {
	return _in(0x61326ee6, 0xdf15b0ca, amount, _ts(heistHash)); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 */
export function NetworkEarnFromBusinessBattle(p0: any): void {
	return _in(0x42fce14f, 0x50f27291, p0); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 */
export function NetworkEarnFromBikeShopBusiness(p0: any, p1: any): void {
	return _in(0x2c5809eb, 0x9df57257, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkEarnFromBusinessHubSource(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x59498bc8, 0xb1c8b15c, p0, p1, p2, p3); 
}

/**
 * 
 * @param amount
 * @param networkHandle
 * @param p2
 * @param p3
 */
export function networkEarnFromBounty(amount: number, p3: any): void {
	return _in(0x131bb5da, 0x15453acf, amount, _i, _i, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function NetworkEarnFromCarclubMembership(p0: any): void {
	return _in(0xbc622779, 0x2a188e2e, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 */
export function NetworkEarnFromCashingOut(amount: number): void {
	return _in(0xefe9c9a1, 0x651b81e6, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnFromBusinessHubSell(p0: any, p1: any, p2: any): void {
	return _in(0x0b39cf0d, 0x53f1c883, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromCasinoMissionParticipation(amount: number): void {
	return _in(0x09e8f186, 0x41be2575, amount); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkEarnFromBusinessProduct(amount: number, p1: any, p2: any, p3: any): void {
	return _in(0x85867897, 0x30b10caf, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param hash
 */
export function NetworkEarnFromCasinoAward(amount: number, hash: number): void {
	return _in(0x973a9781, 0xa34f8deb, amount, _ch(hash)); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromCasinoMissionReward(amount: number): void {
	return _in(0x566fd402, 0xb25787de, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromCasinoStoryMissionReward(amount: number): void {
	return _in(0xac95ed55, 0x2157e092, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 */
export function NetworkEarnFromClubManagementParticipation(p0: any): void {
	return _in(0xa75eac69, 0xf59e96e7, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkEarnFromChallengeWin(p0: any, p2: boolean): void {
	return _in(0x2b171e6b, 0x2f64d8df, p0, _i, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromCollectionItem(amount: number, p1: any): void {
	return _in(0x84ff63bd, 0x4966f33d, amount, p1); 
}

/**
 * 
 * @param amount
 * @param p1
 */
export function NetworkEarnFromContraband(amount: number, p1: any): void {
	return _in(0xeca658ce, 0x2a4e5a72, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromCollectablesActionFigures(amount: number): void {
	return _in(0x5517f900, 0x43466049, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnFromCriminalMastermindBonus(p0: any, p1: any, p2: any): void {
	return _in(0xfa009a62, 0x990671d4, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromCompleteCollection(amount: number): void {
	return _in(0x83ad64f5, 0x3f4e9483, amount); 
}

/**
 * 
 * @param amount
 */
export function networkEarnFromCrateDrop(amount: number): void {
	return _in(0xb1cc1b9e, 0xc3007a2a, amount); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkEarnFromDailyObjectives(p0: number, p1: string, p2: number): void {
	return _in(0x6ea318c9, 0x1c1a8786, p0, _ts(p1), p2); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromDailyObjectiveEvent(amount: number): void {
	return _in(0x5128df14, 0xa5bb86fc, amount); 
}

/**
 * 
 * @param p0
 */
export function NetworkEarnFromDestroyingContraband(p0: any): void {
	return _in(0x84c0116d, 0x012e8fc2, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 */
export function NetworkEarnFromFmbbPhonecallMission(p0: any): void {
	return _in(0xc5156361, 0xf26e2212, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromDarChallenge(amount: number, p1: any): void {
	return _in(0xcac67208, 0x7b4a24ab, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param unk
 * @param p2
 */
export function NetworkEarnFromGangopsAwards(amount: number, unk: string, p2: any): void {
	return _in(0xa9a31475, 0xf530dfda, amount, _ts(unk), p2); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param unk
 * @param actIndex
 */
export function NetworkEarnFromGangopsElite(amount: number, unk: string, actIndex: number): void {
	return _in(0x2597a0d4, 0xa4fc2c77, amount, _ts(unk), actIndex); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param vehicleHash
 */
export function NetworkEarnFromDoomsdayFinaleBonus(amount: number, vehicleHash: number): void {
	return _in(0x128a747f, 0x4a230952, amount, _ch(vehicleHash)); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 */
export function NetworkEarnFromFmbbBossWork(p0: any): void {
	return _in(0x1fda0aa6, 0x79c9919b, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param unk
 */
export function NetworkEarnFromGangopsJobsFinale(amount: number, unk: string): void {
	return _in(0x1c121fc9, 0x545e0d52, amount, _ts(unk)); 
}

/**
 * 
 * @param amount
 */
export function NetworkEarnFromGangPickup(amount: number): void {
	return _in(0xa03d4ace, 0x0a3284ce, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param unk
 */
export function NetworkEarnFromGangopsJobsSetup(amount: number, unk: string): void {
	return _in(0xa9160796, 0xd47a2cf8, amount, _ts(unk)); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 */
export function NetworkEarnFromGangopsJobsPrepParticipation(amount: number): void {
	return _in(0xed26584f, 0x6bdcbbfd, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromGangopsWagesBonus(amount: number, p1: number): void {
	return _in(0x15bb2a5c, 0x757eb91f, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromGangopsWages(amount: number, p1: number): void {
	return _in(0x2dcb19ab, 0xab0380a8, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 * @param amount
 * @param p2
 * @param p3
 */
export function NetworkEarnFromHackerTruckMission(p0: any, amount: number, p2: any, p3: any): void {
	return _in(0xe8815fe9, 0x93896ad3, p0, amount, p2, p3); 
}

/**
 * 
 * @param amount
 */
export function networkEarnFromHoldups(amount: number): void {
	return _in(0x45b8154e, 0x077d9e4d, amount); 
}

/**
 * 
 * @param amount
 * @param modelHash
 */
export function networkEarnFromImportExport(amount: number, modelHash: number): void {
	return _in(0xf92a014a, 0x634442d6, amount, _ch(modelHash)); 
}

/**
 * 
 * @param amount
 * @param p1
 */
export function networkEarnFromJob(amount: number, p1: string): void {
	return _in(0xb2cc4836, 0x834e8a98, amount, _ts(p1)); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function networkEarnFromJobBonus(p0: any): void {
	return _in(0x6816fb44, 0x16760775, p0, _i, _i); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromJobX2(amount: number, p1: string): void {
	return _in(0xdebbf584, 0x665411d0, amount, _ts(p1)); 
}

/**
 * 
 * @param amount
 */
export function networkEarnFromNotBadsport(amount: number): void {
	return _in(0x4337511f, 0xa8221d36, amount); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function networkEarnFromPersonalVehicle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void {
	return _in(0x3f4d0016, 0x7e41e0ad, p0, p1, p2, p3, p4, p5, p6, p7, p8); 
}

/**
 * 
 * @param amount
 * @param p1
 */
export function NetworkEarnFromPremiumJob(amount: number, p1: string): void {
	return _in(0xc8407624, 0xcef2354b, amount, _ts(p1)); 
}

/**
 * 
 * @param amount
 */
export function networkEarnFromPickup(amount: number): void {
	return _in(0xed1517d3, 0xaf17c698, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromRdrBonus(amount: number, p1: any): void {
	return _in(0x7a5349b7, 0x73584675, amount, p1); 
}

/**
 * 
 * @param amount
 * @param propertyName
 */
export function networkEarnFromProperty(amount: number, propertyName: number): void {
	return _in(0x84964834, 0x9d77f5c5, amount, _ch(propertyName)); 
}

/**
 * 
 * @param amount
 */
export function networkEarnFromRockstar(amount: number): void {
	return _in(0x02ce1d6a, 0xc0fc73ea, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromRcTimeTrial(amount: number): void {
	return _in(0xdff49ee9, 0x84e7aae8, amount); 
}

/**
 * 
 * @param amount
 * @param bunkerHash
 */
export function NetworkEarnFromSellBunker(amount: number, bunkerHash: number): void {
	return _in(0x9251b6ab, 0xf2d0a5b4, amount, _ch(bunkerHash)); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param baseNameHash
 */
export function NetworkEarnFromSellBase(amount: number, baseNameHash: number): void {
	return _in(0x0e1e2ff3, 0xf4ec11aa, amount, _ch(baseNameHash)); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * NativeDB Added Parameter 3: Any p2
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromSellingVehicle(amount: number): void {
	return _in(0x8bcb27a0, 0x57df7b7f, amount); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkEarnFromSightseeing(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x45087ae4, 0x80b233ac, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkEarnFromSmuggling(amount: number, p1: any, p2: any, p3: any): void {
	return _in(0xdee612f2, 0xd71b0308, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 */
export function NetworkEarnFromSpinTheWheelCash(amount: number): void {
	return _in(0x676c4877, 0x6cacbb5a, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param p1
 */
export function NetworkEarnFromTargetRefund(amount: number, p1: number): void {
	return _in(0x5b669cf2, 0x299a271f, amount, p1); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnFromTunerAward(p0: any, p1: any, p2: any): void {
	return _in(0xb846f547, 0xd3792df6, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 */
export function NetworkEarnFromTimeTrialWin(amount: number): void {
	return _in(0x0819db99, 0xfd2fbbd8, amount); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function networkEarnFromVehicle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void {
	return _in(0xb539bd8a, 0x4c1eecf8, p0, p1, p2, p3, p4, p5, p6, p7); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkEarnFromTunerFinale(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0xbcb26624, 0x7193ac61, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 */
export function NetworkEarnFromUpgradeAutoshopLocation(p0: any, p1: any): void {
	return _in(0xc10322a8, 0xd3e061ee, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 */
export function NetworkEarnFromVehicleAutoshop(p0: any, p1: any): void {
	return _in(0x533073e8, 0xa596008c, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function NetworkEarnFromVehicleAutoshopBonus(p0: any): void {
	return _in(0xfe65afe7, 0x308e32b2, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param amount
 */
export function NetworkEarnFromWagePayment(amount: number): void {
	return _in(0x35f8da0e, 0x8a31ef1b, amount); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int amount
 * NativeDB Added Parameter 2: int id
 * ```
 */
export function NetworkEarnFromWarehouse(): void {
	return _in(0x3e4adaff, 0x1830f146); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkEarnFromVehicleExport(amount: number, p1: any, p2: any): void {
	return _in(0xedead9a9, 0x1ec768b3, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function NetworkEarnIslandHeist(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0xd21d111c, 0x46ba9f15, p0, p1, p2, p3, p4, p5); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param amount
 */
export function NetworkEarnFromWagePaymentBonus(amount: number): void {
	return _in(0x005aca71, 0x00bd101d, amount); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnGoon(p0: any, p1: any, p2: any): void {
	return _in(0xcda1c62b, 0xe2777802, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnJobBonusFirstTimeBonus(p0: any, p1: any, p2: any): void {
	return _in(0x11b0a20c, 0x493f7e36, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkEarnJobBonusHeistAward(p0: any, p1: any, p2: any): void {
	return _in(0x9d4fdbb0, 0x35229669, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function networkGetEvcBalance(): number {
	return _in(0x5d1e75f9, 0x1c07dee5, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function networkGetPvcBalance(): number {
	return _in(0x4f54f3b6, 0xc202fb4e, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function NetworkGetIsHighEarner(): boolean {
	return _in(0xfb2456b2, 0x040a6a67, _r); 
}

/**
 * ```
 * Same as 0xEA560AC9EEB1E19B.
 * ```
 * 
 * ```
 * Same as 0xEA560AC9EEB1E19B.
 * 
 * NativeDB Introduced: v323
 * ```
 */
export function networkGetPvcTransferBalance(): number {
	return _in(0x13a8de2f, 0xd77d04f3, _r, _ri); 
}

/**
 * ```
 * Same as 0x13A8DE2FD77D04F3.
 * 
 * NativeDB Introduced: v323
 * ```
 */
export function networkGetRemainingTransferBalance(): number {
	return _in(0xea560ac9, 0xeeb1e19b, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function networkGetStringBankWalletBalance(): string {
	return _in(0x700af71a, 0xe615e6dd, _r, _s); 
}

/**
 * 
 */
export function networkGetStringBankBalance(): string {
	return _in(0xa6fa3979, 0xbed01b81, _r, _s); 
}

/**
 * 
 */
export function networkGetVcBalance(): number {
	return _in(0x5cbad97e, 0x059e1b94, _r, _ri); 
}

/**
 * 
 */
export function networkGetVcBankBalance(): number {
	return _in(0x76ef28da, 0x05ea395a, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param characterSlot
 */
export function networkGetStringWalletBalance(characterSlot: number): string {
	return _in(0xf9b10b52, 0x9dcfb33b, characterSlot, _r, _s); 
}

/**
 * ```
 * Returns true if bank balance >= amount.
 * 
 * NativeDB Introduced: v323
 * ```
 * @param amount
 */
export function NetworkGetVcBankBalanceIsNotLessThan(amount: number): boolean {
	return _in(0xa31fd6a0, 0x865b6d14, amount, _r); 
}

/**
 * ```
 * Returns true if bank balance + wallet balance >= amount.
 * ```
 * @param amount
 * @param characterSlot
 */
export function NetworkGetVcBankWalletBalanceIsNotLessThan(amount: number, characterSlot: number): boolean {
	return _in(0xdc18531d, 0x7019a535, amount, characterSlot, _r); 
}

/**
 * 
 * @param amount
 * @param networkHandle
 */
export function networkGivePlayerJobshareCash(amount: number): void {
	return _in(0xfb18df9c, 0xb95e0105, amount, _ii(networkHandle)); 
}

/**
 * 
 * @param characterSlot
 */
export function networkGetVcWalletBalance(characterSlot: number): number {
	return _in(0xa40f9c26, 0x23f6a8b5, characterSlot, _r, _ri); 
}

/**
 * 
 * @param wallet
 * @param bank
 */
export function networkInitializeCash(wallet: number, bank: number): void {
	return _in(0x3da5ecd1, 0xa56cba6d, wallet, bank); 
}

/**
 * ```
 * Returns true if wallet balance >= amount.
 * 
 * NativeDB Introduced: v323
 * ```
 * @param amount
 * @param characterSlot
 */
export function NetworkGetVcWalletBalanceIsNotLessThan(amount: number, characterSlot: number): boolean {
	return _in(0xed5ab886, 0x0415baba, amount, characterSlot, _r); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function networkMoneyCanBet(amount: number, p1: boolean, p2: boolean): boolean {
	return _in(0x81404f3d, 0xc124fe5b, amount, p1, p2, _r); 
}

/**
 * 
 * @param characterSlot
 */
export function NetworkManualDeleteCharacter(characterSlot: number): void {
	return _in(0x821418c7, 0x27fcacd7, characterSlot); 
}

/**
 * 
 * @param amount
 * @param matchId
 * @param p2
 * @param p3
 */
export function networkPayMatchEntryFee(amount: number, matchId: string, p2: boolean, p3: boolean): void {
	return _in(0x9346e14f, 0x2af74d46, amount, _ts(matchId), p2, p3); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function networkPayUtilityBill(amount: number, p1: boolean, p2: boolean): void {
	return _in(0xafe08b35, 0xec0c9eae, amount, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkPayEmployeeWage(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x5fd5ed82, 0xcbbe9989, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param earnedMoney
 */
export function NetworkRivalDeliveryCompleted(earnedMoney: number): void {
	return _in(0x1b882107, 0xc23a9022, earnedMoney); 
}

/**
 * 
 * @param value
 * @param networkHandle
 */
export function networkReceivePlayerJobshareCash(value: number): void {
	return _in(0x56a3b519, 0x44c50598, value, _ii(networkHandle)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentAmmoDrop(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xb162dc95, 0xc0a3317b, p0, p1, p2); 
}

/**
 * ```
 * index
 * -------
 * See function sub_1005 in am_boat_taxi.ysc
 * context
 * ----------
 * "BACKUP_VAGOS"
 * "BACKUP_LOST"
 * "BACKUP_FAMILIES"
 * "HIRE_MUGGER"
 * "HIRE_MERCENARY"
 * "BUY_CARDROPOFF"
 * "HELI_PICKUP"
 * "BOAT_PICKUP"
 * "CLEAR_WANTED"
 * "HEAD_2_HEAD"
 * "CHALLENGE"
 * "SHARE_LAST_JOB"
 * "DEFAULT"
 * reason
 * ---------
 * "NOTREACHTARGET"
 * "TARGET_ESCAPE"
 * "DELIVERY_FAIL"
 * "NOT_USED"
 * "TEAM_QUIT"
 * "SERVER_ERROR"
 * "RECEIVE_LJ_L"
 * "CHALLENGE_PLAYER_LEFT"
 * "DEFAULT"
 * unk
 * -----
 * Unknown bool value
 * ```
 * @param index
 * @param context
 * @param reason
 * @param unk
 */
export function networkRefundCash(index: number, context: string, reason: string, unk: boolean): void {
	return _in(0xf9c812cd, 0x7c46e817, index, _ts(context), _ts(reason), unk); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentArenaJoinSpectator(amount: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0x14eaea58, 0xf93b55af, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentArcadeGame(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0xead3d81f, 0x2c3a1458, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentArcadeGeneric(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x43aa7fac, 0x4e6d6687, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentArenaSpectatorBox(amount: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0x7049bf85, 0x8601dc0f, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentArenaPremium(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x619496d8, 0x37efd920, amount, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentArrestBail(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x812f5488, 0xb1b2a299, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentAutoshopModifications(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x9bea350d, 0x7c48061b, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentBaService(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0xd7cccba2, 0x8c4ecaf0, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentAutoshopPropertyUtilityFee(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xb40f96d6, 0xd252839b, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBankInterest(p0: number, p1: boolean, p2: boolean): void {
	return _in(0xca230c96, 0x82556cf1, p0, p1, p2); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentBallisticEquipment(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x5d97630a, 0x8a0ef123, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 */
export function NetworkSpentBeachPartyGeneric(p0: any): void {
	return _in(0x54aba22f, 0xa6371249, p0); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param matchId
 * @param p3
 * @param p4
 */
export function networkSpentBetting(amount: number, p1: number, matchId: string, p3: boolean, p4: boolean): void {
	return _in(0x1c436fd1, 0x1ffa692f, amount, p1, _ts(matchId), p3, p4); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int amount
 * NativeDB Added Parameter 2: BOOL p1
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 */
export function NetworkSpentBoss(): boolean {
	return _in(0xffbe02cd, 0x385356bd, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentBountyHunterMission(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x1bea0cd9, 0x3470bb1f, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBikeShopModify(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x923aea8e, 0x78f8df0b, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBusiness(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x0035bb91, 0x4316f1e3, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBoatPickup(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x524ee43a, 0x37232c00, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBounty(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x29b260b8, 0x4947dfcc, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBuyAutoshop(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xeeb7e5d1, 0xfeb20869, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBullShark(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xa6dd8458, 0xce24012c, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBuyBase(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x4ea3f425, 0xc7744d21, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param data
 */
export function NetworkSpentBuyCasino(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x34a6fc4d, 0x06c4da0f, amount, p1, p2, _i); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBuyArena(amount: number, p1: boolean, p2: boolean, p3: string): void {
	return _in(0x40d5da95, 0x50b7cb46, amount, p1, p2, _ts(p3)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBuyBunker(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x12d148d2, 0x6538d0f9, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBuyOfftheradar(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xa628a745, 0xe2275c5d, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBuyRevealPlayers(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x6e176f1b, 0x18bc0637, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentBuyPassiveMode(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x6d3a430d, 0x1a809179, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSpentBuyWantedlevel(p0: any, p2: boolean, p3: boolean): void {
	return _in(0xe1b13771, 0xa843c4f6, p0, _i, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBuyTiltrotor(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x0cce73bc, 0x7a11e885, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSpentCallPlayer(p0: any, p2: boolean, p3: boolean): void {
	return _in(0xacde7185, 0xb374177c, p0, _i, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentBuyTruck(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xac272c0a, 0xe01b4bd8, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentCarclub(p0: any, p1: boolean, p2: boolean, p3: any): void {
	return _in(0x92522780, 0x3a0eaa1b, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function NetworkSpentCargoSourcing(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0x948705f6, 0xf9c50824, p0, p1, p2, p3, p4, p5); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentCarclubMembership(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x1464e172, 0x07cd36e2, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function networkSpentCashDrop(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x289016ec, 0x778d60e0, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentCarclubTakeover(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xd1e46824, 0xe6fb92b5, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function NetworkSpentCasinoClubGeneric(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void {
	return _in(0xc991c255, 0xaa6d90b2, p0, p1, p2, p3, p4, p5, p6, p7, p8); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function networkSpentCarwash(p0: any, p1: any, p2: any, p3: boolean, p4: boolean): void {
	return _in(0xec03c719, 0xdb2f4306, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function NetworkSpentCasinoHeist(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any): void {
	return _in(0xd30e8392, 0xf407c328, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentCasinoGeneric(amount: number, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x88bf9b61, 0x2b84d3c3, amount, p1, p2, p3, p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSpentCinema(p0: any, p1: any, p2: boolean, p3: boolean): void {
	return _in(0x6b38ecb0, 0x5a63a685, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentCasinoHeistSkipMission(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x487009dd, 0x91d93429, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentEmployAssassins(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x5bbbd921, 0x86e1f1c5, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentCasinoMembership(amount: number, p1: boolean, p2: boolean, p3: number): void {
	return _in(0xfbbe0570, 0xedf39d46, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentFromBank(p0: any, p1: any, p2: any, p3: boolean): void {
	return _in(0xb9f7a469, 0x460e7a4a, p0, p1, p2, p3); 
}

/**
 * 
 * @param bank
 * @param p1
 * @param p2
 */
export function networkSpentFromRockstar(bank: number, p1: boolean, p2: boolean): void {
	return _in(0x6a445b64, 0xed7abeb5, bank, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param type
 * @param amount
 * @param p2
 * @param p3
 */
export function NetworkSpentGangopsStartStrand(type: number, amount: number, p2: boolean, p3: boolean): void {
	return _in(0xa19ec078, 0x6e326e06, type, amount, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentGunrunningContactService(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x2ceb0e0b, 0xc2a77c05, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentGangopsCannon(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x771adb0e, 0x7635b7bf, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentGangopsStartMission(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xda947ae8, 0x880d5c18, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentGangopsTripSkip(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x5ece6fd7, 0xb4ec8d6a, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentHangarStaffCharges(amount: number, p1: boolean, p2: boolean): void {
	return _in(0xb1f1346f, 0xd57685d7, amount, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentHeliPickup(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x7bf1d73d, 0xb2eca492, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentHangarUtilityCharges(amount: number, p1: boolean, p2: boolean): void {
	return _in(0xb18ac2ec, 0xbb15cb6a, amount, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentHireMercenary(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xe7b80e2b, 0xf9d80bd6, p0, p1, p2); 
}

/**
 * ```
 * Only used once in a script (am_contact_requests)
 * p1 = 0
 * p2 = 1
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentHireMugger(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xe404bfb9, 0x81665bf0, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentImAbility(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x93aa4165, 0xcb67e925, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentHoldups(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xd9b86b98, 0x72039763, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkSpentImportExportRepair(p0: any, p1: any, p2: any): void {
	return _in(0xc1952f37, 0x73ba18fe, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentIslandHeist(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xe86689e5, 0xf82de429, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSpentInStripclub(p0: any, p1: boolean, p2: any, p3: boolean): void {
	return _in(0xee99784e, 0x4467689c, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentJukebox(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x5bcde0f6, 0x40c773d2, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param amount
 * @param matchId
 * @param p2
 * @param p3
 */
export function NetworkSpentJobSkip(amount: number, matchId: string, p2: boolean, p3: boolean): void {
	return _in(0x28f174a6, 0x7b8d0c2f, amount, _ts(matchId), p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentMakeItRain(amount: number, p1: boolean, p2: boolean): void {
	return _in(0xe5f5a060, 0x439c2f5d, amount, p1, p2); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentMoveYacht(amount: number, p1: boolean, p2: boolean): void {
	return _in(0xe7df4e05, 0x45dfb56e, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentNightclubBarDrink(amount: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0xdd21b016, 0xe4289465, amount, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param player
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentNightclubEntryFee(player: number, amount: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0x87605668, 0x4281655d, player, amount, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentOrderWarehouseVehicle(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x05f04155, 0xa226fbbf, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentNoCops(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xd5bb406f, 0x4e04019f, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentOrderBodyguardVehicle(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xe8b0b270, 0xb6e7c76e, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentPaServiceDancer(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xb49eca12, 0x2467d05f, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentPaServiceHeliPickup(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x0fe8e1fc, 0xd2b86b33, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param amount
 */
export function NetworkSpentPayGoon(p0: number, p1: number, amount: number): void {
	return _in(0x08a1b82b, 0x91900682, p0, p1, amount); 
}

/**
 * ```
 * According to how I understood this in the freemode script alone,
 * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
 * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
 * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
 * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
 * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
 * bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
 * ```
 * @param amount
 * @param vehicleModel
 * @param networkHandle
 * @param notBankrupt
 * @param hasTheMoney
 */
export function networkSpentPayVehicleInsurancePremium(amount: number, vehicleModel: number, notBankrupt: boolean, hasTheMoney: boolean): void {
	return _in(0x9ff28d88, 0xc766e3e8, amount, _ch(vehicleModel), _i, notBankrupt, hasTheMoney); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkSpentPayBoss(p0: any, p1: any, p2: any): void {
	return _in(0xdbc966a0, 0x1c02bca7, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSpentPlayerHealthcare(p0: number, p1: number, p2: boolean, p3: boolean): void {
	return _in(0x7c99101f, 0x7fce2ee5, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentProstitutes(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xb21b8950, 0x1cfac79e, p0, p1, p2); 
}

/**
 * 
 * @param amount
 * @param data
 * @param p2
 * @param p3
 */
export function NetworkSpentPurchaseWarehouse(amount: number, data: any, p2: boolean, p3: boolean): void {
	return _in(0x33981d68, 0x04e62f49, amount, data, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentPurchaseHangar(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xccb339cc, 0x970452da, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param amount
 * @param p1
 * @param p2
 */
export function NetworkSpentRdrhatchetBonus(amount: number, p1: boolean, p2: boolean): void {
	return _in(0xe284d46f, 0xfdb82e36, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentRehireDj(amount: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0xf6c8a544, 0xe4cf14fc, amount, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkSpentRenameOrganization(p0: any, p1: any, p2: any): void {
	return _in(0xfc4ee00a, 0x7b3bfb76, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentRequestHeist(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x9d26502b, 0xb97bfe62, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentRequestJob(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x8204da79, 0x34df3155, p0, p1, p2); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function networkSpentRobbedByMugger(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x995a65f1, 0x5f581359, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 */
export function NetworkSpentSalesDisplay(p0: boolean): void {
	return _in(0x7e2f4e8f, 0x44caf4e0, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * 
 * NativeDB Removed Parameter 4: BOOL p3
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentSpinTheWheelPayment(amount: number, p1: any, p2: boolean, p3: boolean): void {
	return _in(0x9a5bd1d0, 0x000b339c, amount, p1, p2, p3); 
}

/**
 * 
 * @param amount
 * @param p1
 * @param p2
 */
export function networkSpentTaxi(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x17c3a7d3, 0x1eae39f9, amount, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function NetworkSpentSubmarine(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0x6c8bc148, 0x8527aaab, p0, p1, p2, p3, p4, p5); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkSpentTelescope(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x7fe61782, 0xad94cc09, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeArena(amount: number, p1: boolean, p2: boolean, p3: string): void {
	return _in(0x037abb06, 0x825d7ab1, amount, p1, p2, _ts(p3)); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeAutoshop(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xdd829aa1, 0x98fdc46c, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeBase(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x3dd3f33a, 0x5d55ea6f, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param amount
 * @param p1
 * @param p2
 * @param data
 */
export function NetworkSpentUpgradeCasino(amount: number, p1: boolean, p2: boolean): void {
	return _in(0x4740d62b, 0xc1b4ebea, amount, p1, p2, _i); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeSub(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x89049a84, 0x065ce68e, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeBunker(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x0c82d21a, 0x77c22d49, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeTruck(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x365e877c, 0x61d6988b, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeHangar(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x615eb504, 0xb0788daf, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSpentUpgradeTiltrotor(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x165e135d, 0x6dfa2907, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function NetworkSpentVehicleRequested(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x02d24a35, 0xa9cc3503, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param amount
 */
export function NetworkSpentWager(p0: any, p1: any, amount: number): void {
	return _in(0xd99db210, 0x089617fe, p0, p1, amount); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function NetworkSpentVehicleExportMods(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void {
	return _in(0xa75ccf58, 0xa60a5fd1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkSpentVipUtilityCharges(p0: any, p1: any, p2: any): void {
	return _in(0x5182a339, 0xa3474510, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function processCashGift(p2: string): string {
	return _in(0x20194d48, 0xeaec9a41, _i, _i, _ts(p2), _r, _s); 
}

/**
 * ```
 * Does nothing and always returns 0.
 * ```
 * @param amount
 */
export function withdrawVc(amount: number): number {
	return _in(0xf70efa14, 0xfe091429, amount, _r, _ri); 
}

/**
 * 
 * @param netID
 * @param toggle
 */
export function activateDamageTrackerOnNetworkId(netID: number, toggle: boolean): void {
	return _in(0xd45b1ffc, 0xcd52ff19, netID, toggle); 
}

/**
 * 
 * @param ped_amt
 * @param vehicle_amt
 * @param object_amt
 * @param pickup_amt
 */
export function canRegisterMissionEntities(ped_amt: number, vehicle_amt: number, object_amt: number, pickup_amt: number): boolean {
	return _in(0x69778e75, 0x64bade6d, ped_amt, vehicle_amt, object_amt, pickup_amt, _r); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function ActivateDamageTrackerOnPlayer(player: number, toggle: boolean): void {
	return _in(0xbec0816f, 0xf5acbcda, player, toggle); 
}

/**
 * 
 * @param amount
 */
export function canRegisterMissionObjects(amount: number): boolean {
	return _in(0x800dd472, 0x1a8b008b, amount, _r); 
}

/**
 * 
 * @param networkHandle
 * @param event
 * @param amountReceived
 */
export function badSportPlayerLeftDetected(event: number, amountReceived: number): boolean {
	return _in(0xec5e3af5, 0x289dca81, _i, event, amountReceived, _r); 
}

/**
 * 
 * @param amount
 */
export function canRegisterMissionPeds(amount: number): boolean {
	return _in(0xbcbf4fef, 0x9fa5d781, amount, _r); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 */
export function ClearLaunchParams(): void {
	return _in(0x966dd84f, 0xb6a46017); 
}

/**
 * 
 * @param amount
 */
export function CanRegisterMissionPickups(amount: number): boolean {
	return _in(0x0a49d1cb, 0x6e34af72, amount, _r); 
}

/**
 * 
 * @param amount
 */
export function canRegisterMissionVehicles(amount: number): boolean {
	return _in(0x7277f1f2, 0xe085ee74, amount, _r); 
}

/**
 * ```
 * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
 * ```
 */
export function cloudCheckAvailability(): void {
	return _in(0x4f18196c, 0x8d38768d); 
}

/**
 * 
 * @param p0
 */
export function cloudDeleteMemberFile(p0: string): number {
	return _in(0xc64ded7e, 0xf0d2fe37, _ts(p0), _r, _ri); 
}

/**
 * 
 * @param handle
 */
export function cloudDidRequestSucceed(handle: number): boolean {
	return _in(0x3a3d5568, 0xaf297cd5, handle, _r); 
}

/**
 * 
 */
export function cloudGetAvailabilityCheckResult(): boolean {
	return _in(0x0b0cc107, 0x20653f3b, _r); 
}

/**
 * 
 * @param handle
 */
export function cloudHasRequestCompleted(handle: number): boolean {
	return _in(0x4c61b399, 0x30d045da, handle, _r); 
}

/**
 * 
 */
export function cloudIsCheckingAvailability(): boolean {
	return _in(0xc7abac5d, 0xe675ee3b, _r); 
}

/**
 * 
 */
export function FacebookDoUnkCheck(): boolean {
	return _in(0xa75e2b67, 0x33da5142, _r); 
}

/**
 * ```
 * Takes the specified time and writes it to the structure specified in the second argument.
 * struct date_time
 * {
 * alignas(8) int year;
 * alignas(8) int month;
 * alignas(8) int day;
 * alignas(8) int hour;
 * alignas(8) int minute;
 * alignas(8) int second;
 * };
 * ```
 * @param posixTime
 * @param timeStructure
 */
export function convertPosixTime(posixTime: number): void {
	return _in(0xac97af97, 0xfa68e5d5, posixTime, _i); 
}

/**
 * 
 */
export function FacebookIsSendingData(): boolean {
	return _in(0x62b9fec9, 0xa11f10ef, _r); 
}

/**
 * 
 */
export function FacebookIsAvailable(): boolean {
	return _in(0x43865688, 0xae10f0d7, _r); 
}

/**
 * 
 */
export function FacebookSetCreateCharacterComplete(): boolean {
	return _in(0xdc484731, 0x42545431, _r); 
}

/**
 * 
 * @param heistName
 * @param cashEarned
 * @param xpEarned
 */
export function FacebookSetHeistComplete(heistName: string, cashEarned: number, xpEarned: number): boolean {
	return _in(0x098ab65b, 0x9ed9a9ec, _ts(heistName), cashEarned, xpEarned, _r); 
}

/**
 * ```
 * Hardcoded to not work in SP.
 * ```
 * @param p0
 */
export function fadeOutLocalPlayer(p0: boolean): void {
	return _in(0x416dbd4c, 0xd6ed8dd2, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function filloutPmPlayerListWithNames(p2: any, p3: any): boolean {
	return _in(0x716b6db9, 0xd1886106, _i, _i, p2, p3, _r); 
}

/**
 * ```
 * milestoneId:
 * 0 = "percentcomplete"
 * 1 = "storycomplete"
 * 2 = "vehicles"
 * 3 = "properties"
 * 4 = "psych"
 * 5 = "mapreveal"
 * 6 = "prologue"
 * ```
 * @param milestoneId
 */
export function FacebookSetMilestoneComplete(milestoneId: number): boolean {
	return _in(0x0ae1f165, 0x3b554ab9, milestoneId, _r); 
}

/**
 * 
 * @param networkHandle
 * @param p1
 * @param p2
 */
export function filloutPmPlayerList(p1: any, p2: any): boolean {
	return _in(0xcbbd7c49, 0x91b64809, _i, p1, p2, _r); 
}

/**
 * Returns POSIX timestamp.
 * 
 * Renamed from `_GET_POSIX_TIME` to `GET_CLOUD_TIME_AS_INT` because of conflicting native names ([`0xDA488F299A5B164E`](#\_0xDA488F299A5B164E))
 * @return An int representing the cloud time.
 */
export function getCloudTimeAsInt(): number {
	return _in(0x9a73240b, 0x49945c76, _r, _ri); 
}

/**
 * ```
 * index2 is unused
 * ```
 * @param index
 * @param index2
 */
export function getCommerceItemCat(index: number, index2: number): string {
	return _in(0x6f44cbf5, 0x6d79fac0, index, index2, _r, _s); 
}

/**
 * ```
 * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
 * ```
 */
export function GetCloudTimeAsString(): string {
	return _in(0xf12e6cd0, 0x6c73d69e, _r, _s); 
}

/**
 * 
 * @param index
 */
export function getCommerceItemId(index: number): string {
	return _in(0x66263585, 0x5957c411, index, _r, _s); 
}

/**
 * 
 * @param index
 */
export function getCommerceItemNumCats(index: number): number {
	return _in(0x2a7776c7, 0x09904ab0, index, _r, _ri); 
}

/**
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * @param index
 */
export function getCommerceItemTexturename(index: number): string {
	return _in(0x722f5d28, 0xb61c5ea8, index, _r, _s); 
}

/**
 * 
 * @param index
 */
export function getCommerceItemName(index: number): string {
	return _in(0xb4271092, 0xca7edf48, index, _r, _s); 
}

/**
 * 
 */
export function getMaxNumNetworkPeds(): number {
	return _in(0x0c1f7d49, 0xc39d2289, _r, _ri); 
}

/**
 * 
 * @param index
 */
export function getCommerceProductPrice(index: number): string {
	return _in(0xca94551b, 0x50b4932c, index, _r, _s); 
}

/**
 * 
 */
export function getMaxNumNetworkObjects(): number {
	return _in(0xc7be3352, 0x16b5ec7c, _r, _ri); 
}

/**
 * 
 */
export function getMaxNumNetworkVehicles(): number {
	return _in(0x0afce529, 0xf69b21ff, _r, _ri); 
}

/**
 * 
 */
export function getMaxNumNetworkPickups(): number {
	return _in(0xa7283506, 0x4dd63e4c, _r, _ri); 
}

/**
 * 
 */
export function getNetworkTime(): number {
	return _in(0x7a5487fe, 0x9faa6b48, _r, _ri); 
}

/**
 * 
 */
export function getNumCommerceItems(): number {
	return _in(0xf2eac213, 0xd5ea0623, _r, _ri); 
}

/**
 * Returns the same value as [`GetNetworkTime`](#\_0x7A5487FE9FAA6B48) in freemode, but as opposed to `GetNetworkTime` it always gets the most recent time, instead of once per tick.
 * 
 * Could be used for benchmarking since it can return times in ticks.
 * @return Returns the network time as an integer
 */
export function getNetworkTimeAccurate(): number {
	return _in(0x89023fbb, 0xf9200e9f, _r, _ri); 
}

/**
 * ```
 * p0 appears to be for MP
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function getNumReservedMissionObjects(p0: boolean): number {
	return _in(0xaa81b5f1, 0x0bc43ac2, p0, _r, _ri); 
}

/**
 * ```
 * p0 appears to be for MP
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function getNumReservedMissionVehicles(p0: boolean): number {
	return _in(0xcf3a9659, 0x06452031, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function getNumCreatedMissionPeds(p0: boolean): number {
	return _in(0xcb215c4b, 0x56a7fae7, p0, _r, _ri); 
}

/**
 * ```
 * p0 appears to be for MP
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function getNumReservedMissionPeds(p0: boolean): number {
	return _in(0x1f13d5ae, 0x5cb17e17, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function getNumCreatedMissionObjects(p0: boolean): number {
	return _in(0x12b6281b, 0x6c6706c0, p0, _r, _ri); 
}

/**
 * ```
 * 0 = succeeded
 * 1 = pending
 * 2 = failed
 * ```
 * @param p0
 */
export function getStatusOfTextureDownload(p0: number): number {
	return _in(0x8bd6c6de, 0xa20e82c6, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function getNumCreatedMissionVehicles(p0: boolean): number {
	return _in(0x0cd9ab83, 0x489430ea, p0, _r, _ri); 
}

/**
 * ```
 * Online version is defined here: update\update.rpf\common\data\version.txt
 * Example:
 * [ONLINE_VERSION_NUMBER]
 * 1.33
 * _GET_ONLINE_VERSION() will return "1.33"
 * ```
 */
export function GetOnlineVersion(): string {
	return _in(0xfca9373e, 0xf340ac0a, _r, _s); 
}

/**
 * 
 * @param time
 */
export function getTimeAsString(time: number): string {
	return _in(0x9e23b177, 0x7a927dad, time, _r, _s); 
}

/**
 * ```
 * Subtracts the second argument from the first.
 * ```
 * @param timeA
 * @param timeB
 */
export function getTimeDifference(timeA: number, timeB: number): number {
	return _in(0xa2c6fc03, 0x1d46fff0, timeA, timeB, _r, _ri); 
}

/**
 * ```
 * Adds the first argument to the second.
 * ```
 * @param timeA
 * @param timeB
 */
export function getTimeOffset(timeA: number, timeB: number): number {
	return _in(0x017008cc, 0xdad48503, timeA, timeB, _r, _ri); 
}

/**
 * 
 */
export function hasNetworkTimeStarted(): boolean {
	return _in(0x46718ace, 0xedeafc84, _r); 
}

/**
 * 
 */
export function isCommerceStoreOpen(): boolean {
	return _in(0x2eac52b4, 0x019e2782, _r); 
}

/**
 * 
 */
export function isCommerceDataValid(): boolean {
	return _in(0xea14eef5, 0xb7cd2c30, _r); 
}

/**
 * 
 * @param netID
 */
export function isDamageTrackerActiveOnNetworkId(netID: number): boolean {
	return _in(0x6e192e33, 0xad436366, netID, _r); 
}

/**
 * 
 * @param player
 */
export function IsDamageTrackerActiveOnPlayer(player: number): boolean {
	return _in(0xb2092a1e, 0xaa7fd45f, player, _r); 
}

/**
 * 
 * @param entity
 */
export function IsEntityGhostedToLocalPlayer(entity: number): boolean {
	return _in(0x21d04d7b, 0xc538c146, entity, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerInCutscene(player: number): boolean {
	return _in(0xe73092f4, 0x157cd126, player, _r); 
}

/**
 * 
 * @param netId
 */
export function isNetworkIdOwnedByParticipant(netId: number): boolean {
	return _in(0xa1607996, 0x431332df, netId, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function isSphereVisibleToAnotherMachine(p0: number, p1: number, p2: number, p3: number): boolean {
	return _in(0xd82cf8e6, 0x4c8729d8, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _r); 
}

/**
 * ```
 * Returns true if the two times are equal; otherwise returns false.
 * ```
 * @param timeA
 * @param timeB
 */
export function isTimeEqualTo(timeA: number, timeB: number): boolean {
	return _in(0xf5bc9585, 0x7bd6d512, timeA, timeB, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function isSphereVisibleToPlayer(p0: any, p1: number, p2: number, p3: number, p4: number): boolean {
	return _in(0xdc3a3102, 0x19e5da62, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _r); 
}

/**
 * ```
 * Subtracts the first argument from the second, then returns whether the result is negative.
 * ```
 * @param timeA
 * @param timeB
 */
export function isTimeMoreThan(timeA: number, timeB: number): boolean {
	return _in(0xde350f86, 0x51e4346c, timeA, timeB, _r); 
}

/**
 * 
 */
export function isStoreAvailableToUser(): boolean {
	return _in(0x883d79c4, 0x071e18b3, _r); 
}

/**
 * ```
 * Subtracts the second argument from the first, then returns whether the result is negative.
 * ```
 * @param timeA
 * @param timeB
 */
export function isTimeLessThan(timeA: number, timeB: number): boolean {
	return _in(0xcb2cf514, 0x8012c8d0, timeA, timeB, _r); 
}

/**
 * 
 * @param toggle
 */
export function networkBlockJoinQueueInvites(toggle: boolean): void {
	return _in(0xcfeb8af2, 0x4fc1d0bb, toggle); 
}

/**
 * ```
 * gets the entity id of a network id
 * ```
 * @param netHandle
 */
export function netToEnt(netHandle: number): number {
	return _in(0xbffeab45, 0xa9a9094a, netHandle, _r); 
}

/**
 * ```
 * gets the object id of a network id
 * ```
 * @param netHandle
 */
export function netToObj(netHandle: number): number {
	return _in(0xd8515f5f, 0xea14cb3f, netHandle, _r, _ro); 
}

/**
 * ```
 * gets the ped id of a network id
 * ```
 * @param netHandle
 */
export function netToPed(netHandle: number): number {
	return _in(0xbdcd95fc, 0x216a8b3e, netHandle, _r); 
}

/**
 * 
 * @param p0
 */
export function networkAcceptPresenceInvite(p0: any): boolean {
	return _in(0xfa91550d, 0xf9318b22, p0, _r); 
}

/**
 * 
 * @param netHandle
 */
export function netToVeh(netHandle: number): number {
	return _in(0x367b9366, 0x10ba360c, netHandle, _r); 
}

/**
 * ```
 * NETWORK_RE*
 * 
 * Triggers a CEventNetworkInviteConfirmed event
 * ```
 */
export function NetworkAcceptInvite(): boolean {
	return _in(0x62a0296c, 0x1bb1ceb3, _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 */
export function networkAccessTunableBool(tunableContext: string, tunableName: string): boolean {
	return _in(0xaa6a47a5, 0x73abb75a, _ts(tunableContext), _ts(tunableName), _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 */
export function networkAccessTunableBoolHash(tunableContext: number, tunableName: number): boolean {
	return _in(0xea16b69d, 0x93d71a45, _ch(tunableContext), _ch(tunableName), _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 * @param value
 */
export function networkAccessTunableFloat(tunableContext: string, tunableName: string): boolean {
	return _in(0xe5608ca7, 0xbc163a5f, _ts(tunableContext), _ts(tunableName), _fi(value), _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 * @param value
 */
export function networkAccessTunableFloatHash(tunableContext: number, tunableName: number): boolean {
	return _in(0x972bc203, 0xbbc4c4d5, _ch(tunableContext), _ch(tunableName), _fi(value), _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 * @param value
 */
export function networkAccessTunableInt(tunableContext: string, tunableName: string): boolean {
	return _in(0x8be1146d, 0xfd5d4468, _ts(tunableContext), _ts(tunableName), _ii(value), _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 * @param value
 */
export function networkAccessTunableIntHash(tunableContext: number, tunableName: number): boolean {
	return _in(0x40fce03e, 0x50e8dbe8, _ch(tunableContext), _ch(tunableName), _ii(value), _r); 
}

/**
 * 
 */
export function networkActionFollowInvite(): any {
	return _in(0xc88156eb, 0xb786f8d5, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function networkAddEntityArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): any {
	return _in(0x494c8fb2, 0x99290269, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _r, _ri); 
}

/**
 * To remove, see: [`NETWORK_REMOVE_ENTITY_AREA`](#\_0x93CF869BAA0C4874).
 * 
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function networkAddEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): any {
	return _in(0x376c6375, 0xba60293a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function networkAddEntityDisplayedBoundaries(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): any {
	return _in(0x25b99872, 0xd588a101, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _r, _ri); 
}

/**
 * ```
 * ..
 * ```
 * @param p0
 * @param p1
 */
export function networkAddFollowers(p1: number): void {
	return _in(0x236406f6, 0x0cf216d6, _i, p1); 
}

/**
 * 
 * @param entity
 * @param netScene
 * @param animDict
 * @param animName
 * @param speed
 * @param speedMulitiplier
 * @param flag
 */
export function networkAddEntityToSynchronisedScene(entity: number, netScene: number, animDict: string, animName: string, speed: number, speedMulitiplier: number, flag: number): void {
	return _in(0xf2404d68, 0xcbc855fa, entity, netScene, _ts(animDict), _ts(animName), _fv(speed), _fv(speedMulitiplier), flag); 
}

/**
 * 
 * @param ped
 * @param netScene
 * @param animDict
 * @param animnName
 * @param blendInSpeed
 * @param blendOutSpeed
 * @param duration
 * @param flag
 * @param playbackRate
 * @param p9
 */
export function networkAddPedToSynchronisedScene(ped: number, netScene: number, animDict: string, animnName: string, blendInSpeed: number, blendOutSpeed: number, duration: number, flag: number, playbackRate: number, p9: any): void {
	return _in(0x742a6374, 0x71bcecd9, ped, netScene, _ts(animDict), _ts(animnName), _fv(blendInSpeed), _fv(blendOutSpeed), duration, flag, _fv(playbackRate), p9); 
}

/**
 * 
 * @param networkHandle
 * @param message
 */
export function networkAddFriend(message: string): boolean {
	return _in(0x8e02d739, 0x14064223, _ii(networkHandle), _ts(message), _r); 
}

/**
 * 
 */
export function NetworkAllocateTunablesRegistrationDataMap(): boolean {
	return _in(0xfafc23ae, 0xe23868db, _r); 
}

/**
 * 
 * @param netScene
 * @param animDict
 * @param animName
 */
export function networkAddSynchronisedSceneCamera(netScene: number, animDict: string, animName: string): void {
	return _in(0xcf8bd3b0, 0xbd6d42d7, netScene, _ts(animDict), _ts(animName)); 
}

/**
 * 
 * @param networkHandle
 */
export function networkAmIBlockedByGamer(): boolean {
	return _in(0x15337c7c, 0x268a27b2, _i, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkAmIMutedByGamer(): boolean {
	return _in(0xdf02a2c9, 0x3f1f26da, _i, _r); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function NetworkAllowLocalEntityAttachment(entity: number, toggle: boolean): void {
	return _in(0x267c78c6, 0x0e806b9a, entity, toggle); 
}

/**
 * 
 * @param player
 */
export function networkAmIMutedByPlayer(player: number): boolean {
	return _in(0x9d6981df, 0xc91a8604, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkAmIBlockedByPlayer(player: number): boolean {
	return _in(0x87f395d9, 0x57d4353d, player, _r); 
}

/**
 * 
 * @param ped
 * @param player
 */
export function networkApplyCachedPlayerHeadBlendData(ped: number, player: number): boolean {
	return _in(0x99b72c7a, 0xbde5c910, ped, player, _r); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function networkApplyPedScarData(ped: number, p1: number): void {
	return _in(0xe66c6902, 0x48f11150, ped, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkApplyTransitionParameter(p0: number, p1: number): void {
	return _in(0x521638ad, 0xa1ba0d18, p0, p1); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function networkApplyVoiceProximityOverride(x: number, y: number, z: number): void {
	return _in(0xdbd20566, 0x52689917, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 */
export function NetworkAreCutsceneEntities(): boolean {
	return _in(0x66d6a5e9, 0xc511214a, _r); 
}

/**
 * 
 * @param p0
 * @param string
 * @param p2
 */
export function networkApplyTransitionParameterString(p0: number, string: string, p2: boolean): void {
	return _in(0xebefc2e7, 0x7084f599, p0, _ts(string), p2); 
}

/**
 * 
 */
export function networkAreSocialClubPoliciesCurrent(): boolean {
	return _in(0xba977557, 0x0db788cf, _r); 
}

/**
 * 
 * @param netHandle1
 * @param netHandle2
 */
export function networkAreHandlesTheSame(): boolean {
	return _in(0x57dba049, 0xe110f217, _i, _i, _r); 
}

/**
 * 
 * @param p0
 */
export function networkAreTransitionDetailsValid(p0: any): boolean {
	return _in(0x2615aa2a, 0x695930c1, p0, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: int p1
 * NativeDB Added Parameter 3: int p2
 * ```
 */
export function networkBail(): void {
	return _in(0x95914459, 0xa87eba28); 
}

/**
 * 
 * @param netScene
 * @param entity
 * @param bone
 */
export function networkAttachSynchronisedSceneToEntity(netScene: number, entity: number, bone: number): void {
	return _in(0x478dcbd2, 0xa98b705a, netScene, entity, bone); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 */
export function NetworkBailTransitionQuickmatch(): void {
	return _in(0x023782ef, 0xc70585ee); 
}

/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: int p1
 * NativeDB Added Parameter 3: int p2
 * ```
 */
export function networkBailTransition(): void {
	return _in(0xeaa57203, 0x6990cd1b); 
}

/**
 * 
 * @param toggle
 */
export function networkBlockInvites(toggle: boolean): void {
	return _in(0x34f9e904, 0x9454a7a0, toggle); 
}

/**
 * ```
 * 11 - Need to download tunables.
 * 12 - Need to download background script.
 * Returns 1 if the multiplayer is loaded, otherwhise 0.
 * ```
 * @param loadingState
 */
export function networkCanAccessMultiplayer(): boolean {
	return _in(0xaf50da1a, 0x3f8b1ba4, _ii(loadingState), _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkCanCommunicateWithGamer(): boolean {
	return _in(0xa150a4f0, 0x65806b1f, _ii(networkHandle), _r); 
}

/**
 * 
 * @param p0
 */
export function NetworkBlockKickedPlayers(p0: boolean): void {
	return _in(0x6b07b9ce, 0x4d390375, p0); 
}

/**
 * 
 */
export function networkCacheLocalPlayerHeadBlendData(): void {
	return _in(0xbd0be0bf, 0xc927eac1); 
}

/**
 * ```
 * Same as NETWORK_CAN_COMMUNICATE_WITH_GAMER
 * 
 * NETWORK_CAN_*
 * ```
 * @param networkHandle
 */
export function NetworkCanCommunicateWithGamer2(): boolean {
	return _in(0x8f5d1ad8, 0x32aeb06c, _i, _r); 
}

/**
 * 
 */
export function networkCanBail(): boolean {
	return _in(0x580ce443, 0x8479cc61, _r); 
}

/**
 * 
 */
export function networkCanEnterMultiplayer(): boolean {
	return _in(0x7e782a91, 0x0c362c25, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function NetworkCanGamerPlayMultiplayerWithMe(): boolean {
	return _in(0x135f9b7b, 0x7add2185, _i, _r); 
}

/**
 * 
 */
export function networkCanSessionEnd(): boolean {
	return _in(0x4eebc369, 0x4e49c572, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function NetworkCanPlayMultiplayerWithGamer(): boolean {
	return _in(0x07dd29d5, 0xe22763f1, _i, _r); 
}

/**
 * 
 */
export function networkCanSetWaypoint(): boolean {
	return _in(0xc927ec22, 0x9934af60, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function NetworkCanViewGamerUserContent(): boolean {
	return _in(0xb57a4954, 0x5ba53ce7, _i, _r); 
}

/**
 * 
 */
export function networkCancelRespawnSearch(): void {
	return _in(0xfb8f2a6f, 0x3df08cbe); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkChangeTransitionSlots(p0: any, p1: any): void {
	return _in(0xeeeda5e6, 0xd7080987, p0, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkCheckCommunicationPrivileges(p0: number, p1: number, p2: boolean): boolean {
	return _in(0x83f28ce4, 0x9fbbffba, p0, p1, p2, _r); 
}

/**
 * Checks if the friendDataIndex in the friend data manager contains the data for the specified networkHandle
 * @param friendDataIndex
 * @param networkHandle
 */
export function networkCheckDataManagerSucceededForHandle(friendDataIndex: number): boolean {
	return _in(0x44b37cdc, 0xae765aae, friendDataIndex, _ii(networkHandle), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkCheckUserContentPrivileges(p0: number, p1: number, p2: boolean): boolean {
	return _in(0x595f0286, 0x98072dd9, p0, p1, p2, _r); 
}

/**
 * ```
 * Only documented...
 * ```
 * @param animDict
 * @param animName
 */
export function NetworkClanAnimation(animDict: string, animName: string): boolean {
	return _in(0x729e3401, 0xf0430686, _ts(animDict), _ts(animName), _r); 
}

/**
 * 
 * @return True if there are any pending downloads, false otherwise.
 */
export function networkClanAnyDownloadMembershipPending(): boolean {
	return _in(0xb3f64a6a, 0x91432477, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkClanDownloadMembership(): boolean {
	return _in(0xa989044e, 0x70010abe, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function networkClanGetLocalMembershipsCount(): number {
	return _in(0x1f471b79, 0xacc90bef, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function networkClanDownloadMembershipPending(): boolean {
	return _in(0x5b9e023d, 0xc6ebedc0, _i, _r); 
}

/**
 * Retrieves a membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP).
 * 
 * Test C++ code:
 * https://pastebin.com/CD8wni4C
 * @param networkHandle
 * @param clanMembership
 * @param membershipIndex
 * @return Returns true on success, false otherwise.
 */
export function networkClanGetMembership(membershipIndex: number): boolean {
	return _in(0xc8bc2011, 0xf67b3411, _i, _i, membershipIndex, _r); 
}

/**
 * 
 * @param netHandle
 * @param txdName
 */
export function networkClanGetEmblemTxdName(txdName: string): boolean {
	return _in(0x5835d9cd, 0x92e83184, _i, _ts(txdName), _r); 
}

/**
 * 
 * @param memberDesc
 * @param p1
 */
export function networkClanGetMembershipDesc(p1: number): boolean {
	return _in(0x48de78af, 0x2c8885b8, _i, p1, _r); 
}

/**
 * 
 * @param p0
 */
export function networkClanGetMembershipCount(): number {
	return _in(0xaab11f6c, 0x4adbc2c1, _ii(p0), _r, _ri); 
}

/**
 * Checks if a crew/membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP) is valid.
 * @param networkHandle
 * @param membershipIndex
 * @return Returns true if valid, false otherwise.
 */
export function networkClanGetMembershipValid(membershipIndex: number): boolean {
	return _in(0x48a59cf8, 0x8d43df0e, _i, membershipIndex, _r); 
}

/**
 * ```
 * bufferSize is 35 in the scripts.
 * ```
 * @param clanDesc
 * @param bufferSize
 * @param formattedTag
 */
export function networkClanGetUiFormattedTag(bufferSize: number, formattedTag: string): void {
	return _in(0xf4535242, 0x6ff3a4f0, _ii(clanDesc), bufferSize, _ts(formattedTag)); 
}

/**
 * ```
 * bufferSize is 35 in the scripts.
 * ```
 * @param clanDesc
 * @param bufferSize
 */
export function networkClanIsRockstarClan(bufferSize: number): boolean {
	return _in(0x7543bb43, 0x9f63792b, _i, bufferSize, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkClanIsEmblemReady(p0: any): boolean {
	return _in(0xa134777f, 0xf7f33331, p0, _i, _r); 
}

/**
 * ```
 * bufferSize is 35 in the scripts.
 * bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
 * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
 * pastebin.com/cSZniHak
 * ```
 * @param clanDesc
 * @param bufferSize
 * @param networkHandle
 */
export function networkClanPlayerGetDesc(bufferSize: number): boolean {
	return _in(0xeee6eacb, 0xe8874fba, _i, bufferSize, _i, _r); 
}

/**
 * 
 * @param clanDesc
 */
export function networkClanJoin(clanDesc: number): boolean {
	return _in(0x9faaa4f4, 0xfc71f87f, clanDesc, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkClanPlayerIsActive(): boolean {
	return _in(0xb124b57f, 0x571d8f18, _ii(networkHandle), _r); 
}

/**
 * 
 * @param p0
 */
export function networkClanRemoteMembershipsAreInCache(): boolean {
	return _in(0xbb6e6fee, 0x99d866b2, _ii(p0), _r); 
}

/**
 * 
 * @param p0
 */
export function networkClanReleaseEmblem(p0: any): void {
	return _in(0x113e6e3e, 0x50e286b0, p0); 
}

/**
 * 
 * @param p0
 */
export function networkClanRequestEmblem(p0: any): boolean {
	return _in(0x13518ff1, 0xc6b28938, p0, _r); 
}

/**
 * 
 */
export function networkClanServiceIsValid(): boolean {
	return _in(0x579cced0, 0x265d4896, _r); 
}

/**
 * 
 */
export function networkClearClockTimeOverride(): void {
	return _in(0xd972df67, 0x326f966e); 
}

/**
 * 
 */
export function networkClearFollowers(): void {
	return _in(0x058f43ec, 0x59a8631a); 
}

/**
 * 
 */
export function networkClearFollowInvite(): any {
	return _in(0x439bfde3, 0xcd0610f6, _r, _ri); 
}

/**
 * 
 */
export function networkClearGroupActivity(): void {
	return _in(0x18886949, 0x23ef4591); 
}

/**
 * 
 */
export function networkClearGetGamerStatus(): void {
	return _in(0x86e0660e, 0x4f5c956d); 
}

/**
 * 
 */
export function networkClearVoiceChannel(): void {
	return _in(0xe036a705, 0xf989e049); 
}

/**
 * 
 */
export function networkClearTransitionCreatorHandle(): void {
	return _in(0xfb327222, 0x9a82c759); 
}

/**
 * 
 */
export function networkClearVoiceProximityOverride(): void {
	return _in(0xf0375569, 0x6450470c); 
}

/**
 * 
 */
export function networkClearPropertyId(): void {
	return _in(0xc2b82527, 0xca77053e); 
}

/**
 * 
 */
export function networkCloseTransitionMatchmaking(): void {
	return _in(0x43f4dba6, 0x9710e01e); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function NetworkConcealEntity(entity: number, toggle: boolean): void {
	return _in(0x1632be0a, 0xc1e62876, entity, toggle); 
}

/**
 * This is what R\* uses to hide players in MP interiors.
 * @param player
 * @param toggle
 * @param p2
 */
export function networkConcealPlayer(player: number, toggle: boolean, p2: boolean): void {
	return _in(0xbbdf0662, 0x52829606, player, toggle, p2); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param rotationOrder
 * @param holdLastFrame
 * @param looped
 * @param p9
 * @param animTime
 * @param animSpeed
 * @return netScene id
 */
export function networkCreateSynchronisedScene(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, rotationOrder: number, holdLastFrame: boolean, looped: boolean, p9: number, animTime: number, animSpeed: number): number {
	return _in(0x7cd6bc4c, 0x2bbdd526, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), rotationOrder, holdLastFrame, looped, _fv(p9), _fv(animTime), _fv(animSpeed), _r, _ri); 
}

/**
 * 
 */
export function networkDidGetGamerStatusSucceed(): boolean {
	return _in(0x5ae17c6b, 0x0134b7f1, _r); 
}

/**
 * 
 */
export function networkDidFindGamersSucceed(): boolean {
	return _in(0xf9b83b77, 0x929d8863, _r); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function networkDisableInvincibleFlashing(player: number, toggle: boolean): void {
	return _in(0x9dd368bf, 0x06983221, player, toggle); 
}

/**
 * 
 * @param netID
 */
export function networkDisableProximityMigration(netID: number): void {
	return _in(0x407091cf, 0x6037118e, netID); 
}

/**
 * 
 * @param toggle
 */
export function networkDisableLeaveRemotePedBehind(toggle: boolean): void {
	return _in(0xc505036a, 0x35afd01b, toggle); 
}

/**
 * ```
 * Hardcoded to return -1.
 * ```
 * @param p0
 * @param p1
 */
export function NetworkDisplaynamesFromHandlesStart(p1: any): number {
	return _in(0xd66c9e72, 0xb3cc4982, _i, p1, _r, _ri); 
}

/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkDoTransitionQuickmatch(p0: any, p1: any, p2: any, p3: any): boolean {
	return _in(0x71fb0ebc, 0xd4915d56, p0, p1, p2, p3, _r); 
}

/**
 * ```
 * p2 is true 3/4 of the occurrences I found.
 * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param players
 * @param p4
 */
export function networkDoTransitionToFreemode(p1: any, p2: boolean, players: number, p4: boolean): boolean {
	return _in(0x3aad8b2f, 0xca1e289f, _i, p1, p2, players, p4, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkDoTransitionQuickmatchAsync(p0: any, p1: any, p2: any, p3: any): boolean {
	return _in(0xa091a5e4, 0x4f0072e5, p0, p1, p2, p3, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param players
 * @param p3
 * @param p4
 * @param p5
 */
export function networkDoTransitionToNewFreemode(players: number, p3: boolean, p4: boolean, p5: boolean): boolean {
	return _in(0x9e80a5ba, 0x8109f974, _i, _i, players, p3, p4, p5, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * NativeDB Added Parameter 8: Any p7
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function networkDoTransitionQuickmatchWithGroup(p0: any, p1: any, p2: any, p3: any, p5: any): boolean {
	return _in(0x9c4ab584, 0x91fdc98a, p0, p1, p2, p3, _i, p5, _r); 
}

/**
 * 
 * @param netId
 */
export function networkDoesEntityExistWithNetworkId(netId: number): boolean {
	return _in(0x18a47d07, 0x4708fd68, netId, _r); 
}

/**
 * 
 * @param p0
 * @param maxPlayers
 */
export function networkDoTransitionToGame(p0: boolean, maxPlayers: number): boolean {
	return _in(0x3e9bb381, 0x02a589b0, p0, maxPlayers, _r); 
}

/**
 * 
 * @param p0
 * @param maxPlayers
 * @param p2
 */
export function networkDoTransitionToNewGame(p0: boolean, maxPlayers: number, p2: boolean): boolean {
	return _in(0x4665f51e, 0xfed00034, p0, maxPlayers, p2, _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 */
export function networkDoesTunableExist(tunableContext: string, tunableName: string): boolean {
	return _in(0x85e5f8b9, 0xb898b20a, _ts(tunableContext), _ts(tunableName), _r); 
}

/**
 * 
 * @param netId
 */
export function networkDoesNetworkIdExist(netId: number): boolean {
	return _in(0x38ce16c9, 0x6bd11344, netId, _r); 
}

/**
 * 
 * @param tunableContext
 * @param tunableName
 */
export function networkDoesTunableExistHash(tunableContext: number, tunableName: number): boolean {
	return _in(0xe4e53e14, 0x19d81127, _ch(tunableContext), _ch(tunableName), _r); 
}

/**
 * 
 * @param areaHandle
 */
export function networkEntityAreaDoesExist(areaHandle: number): boolean {
	return _in(0xe64a3ca0, 0x8dfa37a9, areaHandle, _r); 
}

/**
 * 
 */
export function networkEndTutorialSession(): void {
	return _in(0xd0afaff5, 0xa51d72f7); 
}

/**
 * 
 * @param areaHandle
 */
export function networkEntityAreaIsOccupied(areaHandle: number): boolean {
	return _in(0x4a2d4e8b, 0xf4265b0f, areaHandle, _r); 
}

/**
 * ```
 * In the console script dumps, this is only referenced once.
 * NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
 * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
 * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
 * am_plane_takedown.c
 * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
 * armenian2.c
 * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
 * fm_horde_controler.c
 * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
 * fm_mission_controller.c, has 6 hits so not going to list them.
 * Side note, setting the first parameter to 0 seems to mute sound or so?
 * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
 * ```
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 * @param p3
 */
export function networkExplodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean, p3: boolean): void {
	return _in(0x301a4215, 0x3c9ad707, vehicle, isAudible, isInvisible, p3); 
}

/**
 * 
 * @param heli
 * @param isAudible
 * @param isInvisible
 * @param netScriptEntityId
 */
export function networkExplodeHeli(heli: number, isAudible: boolean, isInvisible: boolean, netScriptEntityId: number): void {
	return _in(0x2a5e0621, 0xdd815a9a, heli, isAudible, isInvisible, netScriptEntityId); 
}

/**
 * ```
 * state - 0 does 5 fades
 * state - 1 does 6 fades
 * native is missing third argument, also boolean, setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: BOOL slow
 * ```
 * @param entity
 * @param state
 */
export function networkFadeInEntity(entity: number, state: boolean): void {
	return _in(0x1f4ed342, 0xacefe62d, entity, state); 
}

/**
 * ```
 * normal - transition like when your coming out of LSC
 * slow - transition like when you walk into a mission
 * ```
 * @param entity
 * @param normal
 * @param slow
 */
export function networkFadeOutEntity(entity: number, normal: boolean, slow: boolean): void {
	return _in(0xde564951, 0xf95e09ed, entity, normal, slow); 
}

/**
 * 
 * @param p0
 */
export function networkFindGamersInCrew(p0: any): boolean {
	return _in(0xe532d681, 0x1b3a4d2a, p0, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkFindMatchedGamers(p0: any, p1: number, p2: number, p3: number): boolean {
	return _in(0xf7b2cfde, 0x5c9f700d, p0, _fv(p1), _fv(p2), _fv(p3), _r); 
}

/**
 * 
 */
export function networkFinishBroadcastingData(): void {
	return _in(0x64f62afb, 0x081e260d); 
}

/**
 * 
 * @param networkHandle
 */
export function networkGamerHasHeadset(): boolean {
	return _in(0xf2fd55cb, 0x574bcc55, _i, _r); 
}

/**
 * 
 * @param sceneId
 */
export function networkForceLocalUseOfSyncedSceneCamera(sceneId: number): void {
	return _in(0xc9b43a33, 0xd09cada7, sceneId); 
}

/**
 * 
 * @param networkHandle
 */
export function networkGamertagFromHandleStart(): boolean {
	return _in(0x9f0c0a98, 0x1d73fa56, _ii(networkHandle), _r); 
}

/**
 * 
 * @param p0
 */
export function networkGetActivityPlayerNum(p0: boolean): number {
	return _in(0x73e2b500, 0x410da5a2, p0, _r, _ri); 
}

/**
 * 
 */
export function networkGamertagFromHandlePending(): boolean {
	return _in(0xb071e279, 0x58ef4cf0, _r); 
}

/**
 * 
 */
export function networkGetAgeGroup(): number {
	return _in(0x9614b71f, 0x8adb982b, _r, _ri); 
}

/**
 * 
 */
export function networkGamertagFromHandleSucceeded(): boolean {
	return _in(0xfd00798d, 0xba7523dd, _r); 
}

/**
 * ```
 * Same as _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER (0xD414BE129BB81B32)
 * ```
 * 
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkGetAverageLatencyForPlayer2(player: number): number {
	return _in(0x0e3a041e, 0xd6ac2b45, player, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkGetAverageLatencyForPlayer(player: number): number {
	return _in(0xd414be12, 0x9bb81b32, player, _r, _rf); 
}

/**
 * ```
 * NETWORK_GET_*
 * 
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkGetAveragePacketLossForPlayer(player: number): number {
	return _in(0x350c2394, 0x9e43686c, player, _r, _rf); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkGetBackgroundLoadingRecipients(p0: any, p1: any): boolean {
	return _in(0x97a770be, 0xef227e2b, p0, p1, _i, _i, _r); 
}

/**
 * ```
 * Return the content modifier id (the tunables context if you want) of a specific content.
 * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
 * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
 * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
 * ```
 * @param contentHash
 */
export function networkGetContentModifierListId(contentHash: number): number {
	return _in(0x187382f8, 0xa3e0a6c3, _ch(contentHash), _r, _ri); 
}

/**
 * 
 * @param netId
 * @param weaponHash
 */
export function networkGetDestroyerOfNetworkId(netId: number): number {
	return _in(0x7a1adeef, 0x01740a24, netId, _i, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param weaponHash
 */
export function NetworkGetDestroyerOfEntity(p0: any, p1: any): boolean {
	return _in(0x4caca844, 0x40fa26f6, p0, p1, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @return Hard-coded to always return 0.
 */
export function NetworkGetDisplaynamesFromHandles(p0: any, p1: any, p2: any): number {
	return _in(0x58cc1817, 0x19256197, p0, p1, p2, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function networkGetCurrentlySelectedGamerHandleFromInviteMenu(): boolean {
	return _in(0x74881e6b, 0xcae2327c, _i, _r); 
}

/**
 * 
 * @param entity
 */
export function networkGetEntityIsLocal(entity: number): boolean {
	return _in(0x0991549d, 0xe4d64762, entity, _r); 
}

/**
 * Get the local entity handle of the given network id
 * 
 * Through this native you can get back the entity that you previously converted to netid with [NetworkGetNetworkIdFromEntity](#\_0x9E35DAB6) or with the `ToNet` natives
 * @param netId
 * @return The local entity handle of the network id
 */
export function networkGetEntityFromNetworkId(netId: number): number {
	return _in(0xce4e5d9b, 0x0a4ff560, netId, _r); 
}

/**
 * 
 * @param entity
 */
export function networkGetEntityIsNetworked(entity: number): boolean {
	return _in(0xc7827959, 0x479dcc78, entity, _r); 
}

/**
 * 
 * @param player
 * @param weaponHash
 */
export function networkGetEntityKillerOfPlayer(player: number): number {
	return _in(0x42b2daa6, 0xb596f5f8, player, _i, _r); 
}

/**
 * 
 * @param entity
 */
export function NetworkGetEntityNetScriptId(entity: number): number {
	return _in(0x815f18ad, 0x865f057f, entity, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkGetFoundGamer(p1: any): boolean {
	return _in(0x9dcff2af, 0xb68b3476, _i, p1, _r); 
}

/**
 * 
 */
export function networkGetFriendCount(): number {
	return _in(0x203f1cfd, 0x823b27a4, _r, _ri); 
}

/**
 * 
 * @param friendIndex
 */
export function NetworkGetFriendNameFromIndex(friendIndex: number): string {
	return _in(0x4164f227, 0xd052e293, friendIndex, _r, _s); 
}

/**
 * 
 * @param friendIndex
 */
export function networkGetFriendName(friendIndex: number): string {
	return _in(0xe11ebbb2, 0xa783fe8b, friendIndex, _r, _s); 
}

/**
 * 
 */
export function networkGetGamerStatusFromQueue(): boolean {
	return _in(0x2cc848a8, 0x61d01493, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkGetGamerStatusResult(p1: any): boolean {
	return _in(0x02a8bec6, 0xfd9af660, _i, p1, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkGetGamertagFromHandle(): string {
	return _in(0x42614116, 0x2ebe5cdb, _ii(networkHandle), _r, _s); 
}

/**
 * ```
 * scriptName examples:
 * "freemode", "AM_CR_SecurityVan", ...
 * Most of the time, these values are used:
 * p1 = -1
 * p2 = 0
 * ```
 * @param scriptName
 * @param p1
 * @param p2
 */
export function networkGetHostOfScript(scriptName: string, p1: number, p2: number): number {
	return _in(0x1d6a14f1, 0xf9a736fc, _ts(scriptName), p1, p2, _r); 
}

/**
 * 
 * @param hours
 * @param minutes
 * @param seconds
 */
export function networkGetGlobalMultiplayerClock(): void {
	return _in(0x6d03bfbd, 0x643b2a02, _i, _i, _i); 
}

/**
 * 
 */
export function networkGetHostOfThisScript(): number {
	return _in(0xc7b4d79b, 0x01fa7a5c, _r); 
}

/**
 * 
 */
export function networkGetInstanceIdOfThisScript(): number {
	return _in(0x638a3a81, 0x733086db, _r, _ri); 
}

/**
 * ```
 * Used by NetBlender
 * ```
 * @param entity
 */
export function NetworkGetLastVelocityReceived(entity: number): Vector3 {
	return _in(0x33de49ed, 0xf4dde77a, entity, _r, _rv); 
}

/**
 * ```
 * Retrieves the local player's NetworkHandle* and stores it in the given buffer.
 * * Currently unknown struct
 * ```
 * @param networkHandle
 * @param bufferSize
 */
export function networkGetLocalHandle(bufferSize: number): void {
	return _in(0xe8605178, 0x6b66cd8e, _i, bufferSize); 
}

/**
 * 
 * @param netId
 */
export function networkGetLocalSceneFromNetworkId(netId: number): number {
	return _in(0x02c40bf8, 0x85c567b6, netId, _r, _ri); 
}

/**
 * 
 */
export function networkClearFoundGamers(): void {
	return _in(0x6d14ccee, 0x1b40381a); 
}

/**
 * 
 */
export function networkGetMaxFriends(): number {
	return _in(0xafebb0d5, 0xd8f687d2, _r, _ri); 
}

/**
 * ```
 * Seems to always return 0, but it's used in quite a few loops.
 * for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
 * {
 * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
 * {
 * var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
 * ```
 */
export function networkGetMaxNumParticipants(): number {
	return _in(0xa6c90fbc, 0x38e395ee, _r, _ri); 
}

/**
 * 
 */
export function NetworkGetNumBodyTrackers(): number {
	return _in(0xd38c4a6d, 0x047c019d, _r, _ri); 
}

/**
 * Get the network id of the given entity
 * 
 * An entity network id represents a given entity for other clients, it's a handle shared between clients, can be reconverted to a client entity handle.\
 * These (entity network IDs) can and will be reused, the network id will not change.
 * If you need to refer to an entity across machines (clients, or the server), you should use its network id.
 * 
 * Read more at [Network and local IDs](https://docs.fivem.net/docs/scripting-manual/networking/ids/)
 * @param entity
 * @return The network id of the given entity
 */
export function networkGetNetworkIdFromEntity(entity: number): number {
	return _in(0xa1170068, 0x2f3ad45c, entity, _r, _ri); 
}

/**
 * ```
 * Returns the amount of players connected in the current session. Only works when connected to a session/server.
 * ```
 */
export function networkGetNumConnectedPlayers(): number {
	return _in(0xa4a79dd2, 0xd9600654, _r, _ri); 
}

/**
 * 
 */
export function networkGetNumParticipants(): number {
	return _in(0x18d0456e, 0x86604654, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function networkGetNumScriptParticipants(p1: any, p2: any): number {
	return _in(0x3658e8cd, 0x94fc121a, _i, p1, p2, _r, _ri); 
}

/**
 * 
 */
export function networkGetNumFoundGamers(): number {
	return _in(0xa1b043ee, 0x79a916fb, _r, _ri); 
}

/**
 * ```
 * NETWORK_GET_*
 * 
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkGetOldestResendCountForPlayer(player: number): number {
	return _in(0x52c1eada, 0xf7b10302, player, _r, _ri); 
}

/**
 * 
 */
export function networkGetNumPresenceInvites(): number {
	return _in(0xcefa9689, 0x12d0f78d, _r, _ri); 
}

/**
 * 
 * @param index
 */
export function networkGetParticipantIndex(index: number): number {
	return _in(0x1b84df6a, 0xf2a46938, index, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkGetNumUnackedForPlayer(player: number): number {
	return _in(0xff8fcf9f, 0xfc458a1c, player, _r, _ri); 
}

/**
 * 
 * @param data
 * @param dataSize
 */
export function networkGetPlatformPartyMembers(dataSize: number): number {
	return _in(0x120364de, 0x2845daf8, _i, dataSize, _r, _ri); 
}

/**
 * 
 */
export function NetworkGetPlatformPartyUnk(): number {
	return _in(0x01abce5e, 0x7cbda196, _r, _ri); 
}

/**
 * Returns the coordinates of another player.
 * 
 * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
 * @param player
 * @return A Vector3 containing the coordinates of another player.
 */
export function NetworkGetPlayerCoords(player: number): Vector3 {
	return _in(0x125e6d63, 0x8b8605d4, player, _r, _rv); 
}

/**
 * 
 * @param player
 */
export function networkGetPlayerIndex(player: number): number {
	return _in(0x24fb80d1, 0x07371267, player, _r, _ri); 
}

/**
 * 
 * @param networkHandle
 */
export function networkGetPlayerFromGamerHandle(): number {
	return _in(0xce5f689c, 0xf5a0a49d, _ii(networkHandle), _r); 
}

/**
 * ```
 * Returns the Player associated to a given Ped when in an online session.
 * ```
 * @param ped
 */
export function networkGetPlayerIndexFromPed(ped: number): number {
	return _in(0x6c0e2e01, 0x25610278, ped, _r); 
}

/**
 * 
 * @param player
 */
export function networkGetPlayerLoudness(player: number): number {
	return _in(0x21a1684a, 0x25c2867f, player, _r, _rf); 
}

/**
 * 
 * @param player
 */
export function networkGetPlayerTutorialSessionInstance(player: number): number {
	return _in(0x3b392367, 0x46714134, player, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function networkGetPlayerOwnsWaypoint(player: number): boolean {
	return _in(0x82377b65, 0xe943f72d, player, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 */
export function NetworkGetPositionHashOfThisScript(): any {
	return _in(0x257ed0fa, 0xdf750bcf, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function networkGetPresenceInviteFromAdmin(p0: any): boolean {
	return _in(0x3dbf2df0, 0xaeb7d289, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function networkGetPresenceInviteContentId(p0: any): any {
	return _in(0x24409fc4, 0xc55cb22d, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkGetPresenceInviteHandle(p0: any): boolean {
	return _in(0x38d5b0fe, 0xbb086f75, p0, _i, _r); 
}

/**
 * 
 * @param p0
 */
export function networkGetPresenceInviteId(p0: any): any {
	return _in(0xdff09646, 0xe12ec386, p0, _r, _ri); 
}

/**
 * Returns the Name of the inviter of the specific selected Invite.
 * @param inviteIndex
 * @return The Name of the inviter.
 */
export function networkGetPresenceInviteInviter(inviteIndex: number): string {
	return _in(0x4962cc4a, 0xa2f345b7, inviteIndex, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function networkGetPresenceInviteIsTournament(p0: any): boolean {
	return _in(0x8806cebf, 0xabd3ce05, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function networkGetPresenceInvitePlaylistLength(p0: any): any {
	return _in(0xd39b3fff, 0x8ffdd5bf, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function networkGetPresenceInvitePlaylistCurrent(p0: any): any {
	return _in(0x728c4cc7, 0x920cd102, p0, _r, _ri); 
}

/**
 * The Native returns a hash of the session id as string from the specific invite index!
 * @param inviteIndex
 * @return A hash of the session id.
 */
export function networkGetPresenceInviteSessionId(inviteIndex: number): number {
	return _in(0x26e1cd96, 0xb0903d60, inviteIndex, _r); 
}

/**
 * 
 */
export function networkGetPrimaryClanDataCancel(): void {
	return _in(0x042e4b70, 0xb93e6054); 
}

/**
 * 
 */
export function networkGetPrimaryClanDataClear(): any {
	return _in(0x9aa46bad, 0xad0e27ed, _r, _ri); 
}

/**
 * 
 */
export function networkGetPrimaryClanDataPending(): any {
	return _in(0xb5074db8, 0x04e28ce7, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkGetPrimaryClanDataNew(): boolean {
	return _in(0xc080ff65, 0x8b2e41da, _i, _i, _r); 
}

/**
 * 
 */
export function networkGetPrimaryClanDataSuccess(): any {
	return _in(0x5b4f04f1, 0x9376a0ba, _r, _ri); 
}

/**
 * ```
 * Same as GET_RANDOM_INT_IN_RANGE
 * ```
 * @param rangeStart
 * @param rangeEnd
 */
export function networkGetRandomIntRanged(rangeStart: number, rangeEnd: number): number {
	return _in(0xe30cf56f, 0x1efa5f43, rangeStart, rangeEnd, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkGetPrimaryClanDataStart(p1: any): boolean {
	return _in(0xce86d819, 0x1b762107, _i, p1, _r); 
}

/**
 * ```
 * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
 * ```
 * @param randomInt
 * @param coordinates
 * @param heading
 */
export function networkGetRespawnResult(randomInt: number): void {
	return _in(0x371ea436, 0x92861cf1, randomInt, _v(coordinates), _f); 
}

/**
 * 
 */
export function networkGetRandomInt(): number {
	return _in(0x599e4fa1, 0xf87eb5ff, _r, _ri); 
}

/**
 * 
 */
export function NetworkGetRosPrivilege25(): boolean {
	return _in(0x91b87c55, 0x093de351, _r); 
}

/**
 * 
 * @param p0
 */
export function networkGetRespawnResultFlags(p0: any): any {
	return _in(0x6c34f120, 0x8b8923fd, p0, _r, _ri); 
}

/**
 * 
 */
export function networkGetScriptStatus(): number {
	return _in(0x57d15864, 0x7a6bfabf, _r, _ri); 
}

/**
 * 
 */
export function NetworkGetRosPrivilege24(): boolean {
	return _in(0x593570c2, 0x89a77688, _r); 
}

/**
 * 
 */
export function networkGetTalkerProximity(): number {
	return _in(0x84f0f131, 0x20b4e098, _r, _rf); 
}

/**
 * 
 */
export function NetworkGetRosPrivilege9(): boolean {
	return _in(0x66b59cff, 0xd78467af, _r); 
}

/**
 * 
 */
export function networkGetThisScriptIsNetworkScript(): boolean {
	return _in(0x29106699, 0x69e9535e, _r); 
}

/**
 * 
 */
export function networkGetTimeoutTime(): number {
	return _in(0x5ed0356a, 0x0ce3a34f, _r, _ri); 
}

/**
 * 
 * @param networkHandle
 */
export function networkGetTransitionHost(): boolean {
	return _in(0x65042b97, 0x74c4435e, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function NetworkGetTargetingMode(): number {
	return _in(0xdffa5be8, 0x381c3314, _r, _ri); 
}

/**
 * 
 */
export function networkGetTotalNumPlayers(): number {
	return _in(0xcf61d4b4, 0x702ee9eb, _r, _ri); 
}

/**
 * ```
 * Returns count.
 * ```
 * @param data
 * @param dataCount
 */
export function networkGetTransitionMembers(dataCount: number): number {
	return _in(0x73b000f7, 0xfbc55829, _i, dataCount, _r, _ri); 
}

/**
 * ```
 * NETWORK_*
 * 
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkGetUnreliableResendCountForPlayer(player: number): number {
	return _in(0x3765c3a3, 0xe8192e10, player, _r, _ri); 
}

/**
 * ```
 * Actually returns the version (TUNABLE_VERSION)
 * ```
 */
export function networkGetTunableCloudCrc(): number {
	return _in(0x10bd227a, 0x753b0d84, _r, _ri); 
}

/**
 * ```
 * Returns a handle to networkHandle* from the specified player handle and stores it in a given buffer.
 * * Currently unknown struct
 * Example:
 * std::vector<UINT64> GetPlayerNetworkHandle(Player player) {
 * const int size = 13;
 * uint64_t *buffer = std::make_unique<uint64_t[]>(size).get();
 * NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13);
 * for (int i = 0; i < size; i++) {
 * Log::Msg("networkhandle[%i]: %llx", i, buffer[i]);
 * }
 * std::vector<UINT64> result(buffer, buffer + sizeof(buffer));
 * return result;
 * }
 * ```
 * @param player
 * @param networkHandle
 * @param bufferSize
 */
export function networkHandleFromPlayer(player: number, bufferSize: number): void {
	return _in(0x388eb2b8, 0x6c73b6b3, player, _i, bufferSize); 
}

/**
 * 
 * @param friendIndex
 * @param networkHandle
 * @param bufferSize
 */
export function networkHandleFromFriend(friendIndex: number, bufferSize: number): void {
	return _in(0xd45cb817, 0xd7e177d2, friendIndex, _i, bufferSize); 
}

/**
 * ```
 * Returns a NetworkHandle* from the specified member ID and stores it in a given buffer.
 * * Currently unknown struct
 * ```
 * @param memberId
 * @param networkHandle
 * @param bufferSize
 */
export function networkHandleFromMemberId(memberId: string, bufferSize: number): void {
	return _in(0xa0fd21be, 0xd61e5c4c, _ts(memberId), _i, bufferSize); 
}

/**
 * ```
 * Returns a NetworkHandle* from the specified user ID and stores it in a given buffer.
 * * Currently unknown struct
 * ```
 * @param userId
 * @param networkHandle
 * @param bufferSize
 */
export function networkHandleFromUserId(userId: string, bufferSize: number): void {
	return _in(0xdcd51dd8, 0xf87aec5c, _ts(userId), _i, bufferSize); 
}

/**
 * 
 */
export function NetworkHasAgeRestrictedProfile(): boolean {
	return _in(0x1353f87e, 0x89946207, _r); 
}

/**
 * 
 * @param player
 */
export function networkHasCachedPlayerHeadBlendData(player: number): boolean {
	return _in(0x237d5336, 0xa9a54108, player, _r); 
}

/**
 * 
 * @param entity
 */
export function networkHasControlOfEntity(entity: number): boolean {
	return _in(0x01bf60a5, 0x00e28887, entity, _r); 
}

/**
 * 
 * @param pickup
 */
export function networkHasControlOfPickup(pickup: number): boolean {
	return _in(0x5bc9495f, 0x0b3b6fa6, pickup, _r); 
}

/**
 * 
 */
export function networkHasFollowInvite(): boolean {
	return _in(0x76d9b976, 0xc4c09fde, _r); 
}

/**
 * 
 * @param doorHash
 */
export function networkHasControlOfDoor(doorHash: number): boolean {
	return _in(0xcb3c68ad, 0xb06195df, _ch(doorHash), _r); 
}

/**
 * 
 * @param netId
 */
export function networkHasControlOfNetworkId(netId: number): boolean {
	return _in(0x4d36070f, 0xe0215186, netId, _r); 
}

/**
 * 
 * @param entity
 */
export function networkHasEntityBeenRegisteredWithThisThread(entity: number): boolean {
	return _in(0xb07d3185, 0xe11657a5, entity, _r); 
}

/**
 * ```
 * Returns true if dinput8.dll is present in the game directory.
 * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
 * ```
 */
export function NetworkHasGameBeenAltered(): boolean {
	return _in(0x659cf2ef, 0x7f550c4f, _r); 
}

/**
 * 
 */
export function networkHasHeadset(): boolean {
	return _in(0xe870f9f1, 0xf7b4f1fa, _r); 
}

/**
 * 
 * @param p0
 */
export function networkHasInvitedGamerToTransition(): boolean {
	return _in(0x7284a47b, 0x3540e6cf, _i, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkHasInviteBeenAcked(): boolean {
	return _in(0x71dc455f, 0x5cd1c2b1, _ii(networkHandle), _r); 
}

/**
 * 
 * @param p0
 */
export function networkHasInvitedGamer(): boolean {
	return _in(0x4d86cd31, 0xe8976ece, _i, _r); 
}

/**
 * 
 * @param player
 */
export function networkHasPlayerStartedTransition(player: number): boolean {
	return _in(0x9ac9ccbf, 0xa8c29795, player, _r); 
}

/**
 * 
 */
export function networkHasReceivedHostBroadcastData(): boolean {
	return _in(0x5d10b379, 0x5f3fc886, _r); 
}

/**
 * 
 */
export function networkHasPendingInvite(): boolean {
	return _in(0xac8c7b9b, 0x88c4a668, _r); 
}

/**
 * ```
 * index is always 18 in scripts
 * ```
 * @param index
 */
export function networkHasRosPrivilege(index: number): boolean {
	return _in(0xa699957e, 0x60d80214, index, _r); 
}

/**
 * 
 * @param privilege
 * @param banType
 * @param timeData
 */
export function networkHasRosPrivilegeEndDate(privilege: number): boolean {
	return _in(0xc22912b1, 0xd85f26b1, privilege, _i, _v(timeData), _r); 
}

/**
 * 
 */
export function networkHasSocialClubAccount(): boolean {
	return _in(0x67a55896, 0x28e0cff6, _r); 
}

/**
 * 
 */
export function networkHasSocialNetworkingSharingPriv(): boolean {
	return _in(0x76bf03fa, 0xdbf154f5, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkHasTransitionInviteBeenAcked(): boolean {
	return _in(0x3f9990bf, 0x5f22759c, _ii(networkHandle), _r); 
}

/**
 * ```
 * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
 * ```
 */
export function networkHasValidRosCredentials(): boolean {
	return _in(0x85443ff4, 0xc328f53b, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function NetworkHasViewGamerUserContentResult(): boolean {
	return _in(0xcca4318e, 0x1ab03f1f, _i, _r); 
}

/**
 * 
 */
export function NetworkHaveOnlinePrivilege2(): boolean {
	return _in(0x5ea784d1, 0x97556507, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkHashFromGamerHandle(): number {
	return _in(0x58575ac3, 0xcf2ca8ec, _ii(networkHandle), _r); 
}

/**
 * 
 * @param p0
 * @param player
 */
export function networkHaveCommunicationPrivileges(p0: number, player: number): boolean {
	return _in(0xaeef48cd, 0xf5b6ce7c, p0, player, _r); 
}

/**
 * 
 */
export function networkHaveOnlinePrivileges(): boolean {
	return _in(0x25cb5a9f, 0x37bfd063, _r); 
}

/**
 * 
 * @param player
 */
export function networkHashFromPlayerHandle(player: number): number {
	return _in(0xbc1d768f, 0x2f5d6c05, player, _r); 
}

/**
 * 
 */
export function networkHaveRosBannedPriv(): boolean {
	return _in(0x8020a738, 0x47e0ca7d, _r); 
}

/**
 * 
 */
export function networkHaveRosLeaderboardWritePriv(): boolean {
	return _in(0x422d396f, 0x80a96547, _r); 
}

/**
 * 
 */
export function networkHaveRosMultiplayerPriv(): boolean {
	return _in(0x5f91d5d0, 0xb36aa310, _r); 
}

/**
 * 
 */
export function networkHaveRosCreateTicketPriv(): boolean {
	return _in(0xa0ad7e2a, 0xf5349f61, _r); 
}

/**
 * 
 */
export function networkHaveRosSocialClubPriv(): boolean {
	return _in(0x606e4d3e, 0x3cccf3eb, _r); 
}

/**
 * 
 * @param p0
 */
export function networkHaveUserContentPrivileges(p0: number): boolean {
	return _in(0x72d918c9, 0x9bcacc54, p0, _r); 
}

/**
 * From what I can tell it looks like it does the following:
 * 
 * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
 * 
 * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @return Probably a bool indicating if the transition was created.
 */
export function networkHostTransition(p0: number, p1: number, p2: number, p3: number, p4: any, p5: boolean, p6: boolean, p7: number, p8: any, p9: number): boolean {
	return _in(0xa60bb5ce, 0x242bb254, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkInviteGamers(p1: any): boolean {
	return _in(0x9d80cd1d, 0x0e6327de, _i, p1, _i, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkInviteGamersToTransition(p1: any): boolean {
	return _in(0x4a595c32, 0xf77dff76, _i, p1, _r); 
}

/**
 * 
 */
export function networkIsActivitySession(): boolean {
	return _in(0x05095437, 0x424397fa, _r); 
}

/**
 * 
 */
export function networkIsActivitySpectator(): boolean {
	return _in(0x12103b9e, 0x0c9f92fb, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsActivitySpectatorFromHandle(): boolean {
	return _in(0x2763bbaa, 0x72a7bcb9, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function networkIsAddingFriend(): any {
	return _in(0x6ea10160, 0x6f6e4d81, _r, _ri); 
}

/**
 * 
 */
export function networkIsCableConnected(): boolean {
	return _in(0xeffb2545, 0x3d8600f9, _r); 
}

/**
 * ```
 * This would be nice to see if someone is in party chat, but 2 sad notes.
 * 1) It only becomes true if said person is speaking in that party at the time.
 * 2) It will never, become true unless you are in that party with said person.
 * ```
 * @param networkHandle
 */
export function networkIsChattingInPlatformParty(): boolean {
	return _in(0x8de9945b, 0xcc9aec52, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function networkIsClockTimeOverridden(): boolean {
	return _in(0xd7c95d32, 0x2ff57522, _r); 
}

/**
 * 
 */
export function networkIsCloudAvailable(): boolean {
	return _in(0x9a4cf4f4, 0x8ad77302, _r); 
}

/**
 * 
 */
export function networkIsCloudBackgroundScriptRequestPending(): boolean {
	return _in(0x8132c0eb, 0x8b2b3293, _r); 
}

/**
 * 
 * @param doorHash
 */
export function networkIsDoorNetworked(doorHash: number): boolean {
	return _in(0xc01e93fa, 0xc20c3346, _ch(doorHash), _r); 
}

/**
 * ```
 * NETWORK_IS_*
 * 
 * NativeDB Introduced: v323
 * ```
 * @param player
 */
export function NetworkIsConnectionEndpointRelayServer(player: number): boolean {
	return _in(0x16d3d499, 0x02f697bb, player, _r); 
}

/**
 * Note: This only works for vehicles, which appears to be a bug (since the setter *does* work for every entity type and the name is 99% correct).
 * @param entity
 */
export function NetworkIsEntityConcealed(entity: number): boolean {
	return _in(0x71302ec7, 0x0689052a, entity, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsFriend(): boolean {
	return _in(0x1a24a179, 0xf9b31654, _ii(networkHandle), _r); 
}

/**
 * 
 * @param entity
 */
export function networkIsEntityFading(entity: number): boolean {
	return _in(0x422f32cc, 0x7e56abad, entity, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function NetworkIsFriendHandleOnline(): boolean {
	return _in(0x87eb7a3f, 0xfcb314db, _ii(networkHandle), _r); 
}

/**
 * 
 * @param friendName
 */
export function networkIsFriendInMultiplayer(friendName: string): boolean {
	return _in(0x57005c18, 0x827f3a28, _ts(friendName), _r); 
}

/**
 * 
 */
export function networkIsFindingGamers(): boolean {
	return _in(0xdddf64c9, 0x1bfcf0aa, _r); 
}

/**
 * ```
 * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
 * ```
 * @param friendName
 */
export function networkIsFriendInSameTitle(friendName: string): boolean {
	return _in(0x2ea9a3be, 0xdf3f17b8, _ts(friendName), _r); 
}

/**
 * 
 */
export function networkIsGameInProgress(): boolean {
	return _in(0x10fab354, 0x28ccc9d7, _r); 
}

/**
 * 
 * @param friendIndex
 */
export function networkIsFriendIndexOnline(friendIndex: number): boolean {
	return _in(0xbad8f2a4, 0x2b844821, friendIndex, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsGamerInMySession(): boolean {
	return _in(0x0f10b05d, 0xdf8d16e9, _ii(networkHandle), _r); 
}

/**
 * 
 * @param name
 */
export function networkIsFriendOnline(name: string): boolean {
	return _in(0x425a4453, 0x3437b64d, _ts(name), _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsGamerTalking(): boolean {
	return _in(0x71c33b22, 0x606cd88a, _ii(networkHandle), _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsGamerBlockedByMe(): boolean {
	return _in(0xe944c4f5, 0xaf1b5883, _i, _r); 
}

/**
 * 
 */
export function networkIsGettingGamerStatus(): boolean {
	return _in(0x94a8394d, 0x150b013a, _r); 
}

/**
 * 
 */
export function networkIsHostOfThisScript(): boolean {
	return _in(0x83cd99a1, 0xe6061ab5, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsGamerMutedByMe(): boolean {
	return _in(0xce60de01, 0x1b6c7978, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function networkIsInMpCutscene(): boolean {
	return _in(0x6cc27c9f, 0xa2040220, _r); 
}

/**
 * 
 * @param networkHandle
 * @param bufferSize
 */
export function networkIsHandleValid(bufferSize: number): boolean {
	return _in(0x6f79b93b, 0x0a8e4133, _i, bufferSize, _r); 
}

/**
 * ```
 * If you are host, returns true else returns false.
 * ```
 */
export function networkIsHost(): boolean {
	return _in(0x8db296b8, 0x14edda07, _r); 
}

/**
 * ```
 * Note according to IDA TU27 X360(Console),
 * This native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.
 * Side note: This location just stops where it's at once jumped to.
 * Screenshot for side note,
 * h t t p ://i.imgur.com/m2ci1mF.png
 * h t t p://i.imgur.com/Z0Wx2B6.png
 * ```
 */
export function networkIsInParty(): boolean {
	return _in(0x966c2bc2, 0xa7fe3f30, _r); 
}

/**
 * ```
 * Hardcoded to return false.
 * ```
 */
export function networkIsInPlatformPartyChat(): boolean {
	return _in(0xfd8b834a, 0x8ba05048, _r); 
}

/**
 * ```
 * Hardcoded to return false.
 * ```
 */
export function networkIsInPlatformParty(): boolean {
	return _in(0x2fc5650b, 0x0271cb57, _r); 
}

/**
 * 
 */
export function networkIsInSession(): boolean {
	return _in(0xca972461, 0x03b63917, _r); 
}

/**
 * 
 */
export function networkIsInTransition(): boolean {
	return _in(0x68049aef, 0xf83d8f0a, _r); 
}

/**
 * 
 */
export function networkIsInTutorialSession(): boolean {
	return _in(0xada24309, 0xfe08dacf, _r); 
}

/**
 * 
 */
export function networkIsInSpectatorMode(): boolean {
	return _in(0x048746e3, 0x88762e11, _r); 
}

/**
 * Checks if the networkHandle is the same as any other user that is signed in on the local machine.
 * For example, if your console has two or more users signed in (on different controllers), the profile that is not controlling the game would be "inactive".
 * @param networkHandle
 * @return Returns true if the networkHandle is signed in on the same machine, but is not the main player.
 */
export function networkIsInactiveProfile(): boolean {
	return _in(0x7e587455, 0x04313a2e, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function networkIsLocalPlayerInvincible(): boolean {
	return _in(0x8a8694b4, 0x8715b000, _r); 
}

/**
 * 
 */
export function networkIsLocalTalking(): boolean {
	return _in(0xc0d2af00, 0xbcc234ca, _r); 
}

/**
 * 
 */
export function networkIsMultiplayerDisabled(): boolean {
	return _in(0x97472928, 0x07126eda, _r); 
}

/**
 * Returns true if the specified network id is controlled by someone else.
 * @param netId
 * @return Probably a bool, returns 1 if you don't have control over the netId entity.
 */
export function NetworkIsNetworkIdAClone(netId: number): boolean {
	return _in(0x7242f8b7, 0x41ce1086, netId, _r); 
}

/**
 * 
 */
export function networkIsOfflineInvitePending(): boolean {
	return _in(0x74698374, 0xc45701d2, _r); 
}

/**
 * 
 * @param p0
 */
export function networkIsParticipantActive(p0: number): boolean {
	return _in(0x6ff8ff40, 0xb6357d45, p0, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerAParticipant(player: number): boolean {
	return _in(0x3ca58f6c, 0xb7cbd784, player, _r); 
}

/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * @param p0
 */
export function networkIsPendingFriend(p0: any): any {
	return _in(0x0be73da6, 0x984a6e33, p0, _r, _ri); 
}

/**
 * ```
 * Note according to IDA TU27 X360(Console),
 * This native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.
 * Side note: This location just stops where it's at once jumped to.
 * Screenshot for side note,
 * h t t p ://i.imgur.com/m2ci1mF.png
 * h t t p://i.imgur.com/Z0Wx2B6.png
 * ```
 * @param networkHandle
 */
export function networkIsPartyMember(): boolean {
	return _in(0x676ed266, 0xaadd31e0, _ii(networkHandle), _r); 
}

/**
 * 
 * @param player1
 * @param script
 * @param player2
 */
export function networkIsPlayerAParticipantOnScript(player1: number, script: string, player2: number): boolean {
	return _in(0x1ad5b715, 0x86b94820, player1, _ts(script), player2, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerActive(player: number): boolean {
	return _in(0xb8dfd30d, 0x6973e135, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerBlockedByMe(player: number): boolean {
	return _in(0x57af1f8e, 0x27483721, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerConcealed(player: number): boolean {
	return _in(0x919b3c98, 0xed8292f9, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerConnected(player: number): boolean {
	return _in(0x93dc1be4, 0xe1abe9d1, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerFading(player: number): boolean {
	return _in(0x631dc5df, 0xf4b110e3, player, _r); 
}

/**
 * ```
 * NETWORK_ARE_*
 * ```
 * @param player
 * @param index
 */
export function NetworkIsPlayerEqualToIndex(player: number, index: number): boolean {
	return _in(0x9de986fc, 0x9a87c474, player, index, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerInMpCutscene(player: number): boolean {
	return _in(0x63f9ee20, 0x3c3619f2, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkIsPlayerMutedByMe(player: number): boolean {
	return _in(0x8c71288a, 0xe68ede39, player, _r); 
}

/**
 * ```
 * returns true if someone is screaming or talking in a microphone
 * ```
 * @param player
 */
export function networkIsPlayerTalking(player: number): boolean {
	return _in(0x031e11f3, 0xd447647e, player, _r); 
}

/**
 * 
 */
export function NetworkIsPsnAvailable(): boolean {
	return _in(0x8d11e61a, 0x4abf49cc, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2245
 * ```
 * @param scriptHash
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkIsScriptActiveByHash(scriptHash: number, p1: number, p2: boolean, p3: number): boolean {
	return _in(0xda7de67f, 0x5fe5ee13, _ch(scriptHash), p1, p2, p3, _r); 
}

/**
 * 
 */
export function networkIsSessionBusy(): boolean {
	return _in(0xf4435d66, 0xa8e2905e, _r); 
}

/**
 * 
 * @param scriptName
 * @param player
 * @param p2
 * @param p3
 */
export function networkIsScriptActive(scriptName: string, player: number, p2: boolean, p3: any): boolean {
	return _in(0x9d40df90, 0xfad26098, _ts(scriptName), player, p2, p3, _r); 
}

/**
 * ```
 * Returns whether the player is signed into Social Club.
 * ```
 */
export function networkIsSignedIn(): boolean {
	return _in(0x054354a9, 0x9211eb96, _r); 
}

/**
 * 
 */
export function networkIsSessionActive(): boolean {
	return _in(0xd83c2b94, 0xe7508980, _r); 
}

/**
 * ```
 * Returns whether the game is not in offline mode.
 * seemed not to work for some ppl
 * ```
 */
export function networkIsSignedOnline(): boolean {
	return _in(0x1077788e, 0x268557c2, _r); 
}

/**
 * ```
 * This checks if player is playing on gta online or not.
 * Please add an if and block your mod if this is "true".
 * ```
 */
export function networkIsSessionStarted(): boolean {
	return _in(0x9de624d2, 0xfc4b603f, _r); 
}

/**
 * 
 */
export function networkIsTransitionClosedCrew(): boolean {
	return _in(0x0dbd5d7e, 0x3c5bec3b, _r); 
}

/**
 * ```
 * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
 * ```
 */
export function NetworkIsTextChatActive(): boolean {
	return _in(0x5fcf4d70, 0x69b09026, _r); 
}

/**
 * 
 */
export function networkIsTransitionHost(): boolean {
	return _in(0x0b824797, 0xc9bf2159, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function NetworkIsThisScriptMarked(p0: any, p1: boolean, p2: any): boolean {
	return _in(0xd1110739, 0xeeadb592, p0, p1, p2, _r); 
}

/**
 * 
 */
export function networkIsTransitionClosedFriends(): boolean {
	return _in(0x6512765e, 0x3be78c50, _r); 
}

/**
 * 
 */
export function networkIsTransitionBusy(): boolean {
	return _in(0x520f3282, 0xa53d26b7, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkIsTransitionHostFromHandle(): boolean {
	return _in(0x6b5c83ba, 0x3efe6a10, _ii(networkHandle), _r); 
}

/**
 * 
 */
export function networkIsTransitionMatchmaking(): boolean {
	return _in(0x292564c7, 0x35375edf, _r); 
}

/**
 * 
 */
export function networkIsTransitionSolo(): boolean {
	return _in(0x5dc57720, 0x1723960a, _r); 
}

/**
 * 
 */
export function networkIsTransitionOpenToMatchmaking(): boolean {
	return _in(0x37a44944, 0x83b9f5c9, _r); 
}

/**
 * 
 */
export function networkIsTransitionPrivate(): boolean {
	return _in(0x5a6aa44f, 0xf8e931e6, _r); 
}

/**
 * 
 */
export function networkIsTransitionStarted(): boolean {
	return _in(0x53fa8340, 0x1d9c07fe, _r); 
}

/**
 * 
 */
export function networkIsTransitionToGame(): boolean {
	return _in(0x9d7696d8, 0xf4fa6cb7, _r); 
}

/**
 * 
 */
export function networkIsTransitionVisibilityLocked(): boolean {
	return _in(0xd0a484cb, 0x2f829fbe, _r); 
}

/**
 * 
 */
export function networkIsTunableCloudRequestPending(): boolean {
	return _in(0x0467c11e, 0xd88b7d28, _r); 
}

/**
 * 
 */
export function networkIsTutorialSessionChangePending(): boolean {
	return _in(0x35f0b98a, 0x8387274d, _r); 
}

/**
 * 
 */
export function networkJoinGroupActivity(): any {
	return _in(0xa06509a6, 0x91d12be4, _r, _ri); 
}

/**
 * 
 */
export function networkJoinPreviouslyFailedSession(): boolean {
	return _in(0x59df7931, 0x7f85a7e0, _r); 
}

/**
 * ```
 * int handle[76];
 * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
 * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
 * NETWORK_JOIN_TRANSITION(uVar2);
 * nothing doin.
 * ```
 * @param player
 */
export function networkJoinTransition(player: number): boolean {
	return _in(0x9d060b08, 0xcd63321a, player, _r); 
}

/**
 * 
 */
export function networkJoinPreviouslyFailedTransition(): boolean {
	return _in(0xffe1e5b7, 0x92d92b34, _r); 
}

/**
 * 
 */
export function networkLeaveTransition(): boolean {
	return _in(0xd23a1a81, 0x5d21db19, _r); 
}

/**
 * 
 */
export function networkLaunchTransition(): boolean {
	return _in(0x2dcf46cb, 0x1a4f0884, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkMemberIdFromGamerHandle(): string {
	return _in(0xc8263013, 0x2081bb6f, _ii(networkHandle), _r, _s); 
}

/**
 * 
 * @param p0
 */
export function networkMarkTransitionGamerAsFullyJoined(): boolean {
	return _in(0x5728bb6d, 0x63e3ff1d, _i, _r); 
}

/**
 * ```
 * Could possibly bypass being muted or automatically muted
 * ```
 * @param player
 * @param toggle
 */
export function networkOverrideChatRestrictions(player: number, toggle: boolean): void {
	return _in(0x3039ae5a, 0xd2c9c0c4, player, toggle); 
}

/**
 * 
 */
export function networkOpenTransitionMatchmaking(): void {
	return _in(0x2b3a8f7c, 0xa3a38fde); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param ms
 */
export function NetworkOverrideClockMillisecondsPerGameMinute(ms: number): void {
	return _in(0x42bf1d2e, 0x723b6d7e, ms); 
}

/**
 * Works in Singleplayer too.
 * Passing wrong data (e.g. hours above 23) will cause the game to crash.
 * @param hours
 * @param minutes
 * @param seconds
 */
export function networkOverrideClockTime(hours: number, minutes: number, seconds: number): void {
	return _in(0xe679e3e0, 0x6e363892, hours, minutes, seconds); 
}

/**
 * 
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param heading
 */
export function networkOverrideCoordsAndHeading(entity: number, x: number, y: number, z: number, heading: number): void {
	return _in(0xa7e30de9, 0x272b6d49, entity, _fv(x), _fv(y), _fv(z), _fv(heading)); 
}

/**
 * ```
 * R* uses this to hear all player when spectating.
 * It allows you to hear other online players when their chat is on none, crew and or friends
 * ```
 * @param player
 * @param toggle
 */
export function networkOverrideReceiveRestrictions(player: number, toggle: boolean): void {
	return _in(0xddf73e2b, 0x1fec5ab4, player, toggle); 
}

/**
 * ```
 * p0 is always false in scripts.
 * ```
 * @param toggle
 */
export function networkOverrideReceiveRestrictionsAll(toggle: boolean): void {
	return _in(0x0ff2862b, 0x61a58af9, toggle); 
}

/**
 * ```
 * This is used alongside the native,
 * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
 * ```
 * @param player
 * @param toggle
 */
export function networkOverrideSendRestrictions(player: number, toggle: boolean): void {
	return _in(0x97dd4c59, 0x44cc2e6a, player, toggle); 
}

/**
 * 
 * @param team
 * @param toggle
 */
export function networkOverrideTeamRestrictions(team: number, toggle: boolean): void {
	return _in(0x6f697a66, 0xce78674e, team, toggle); 
}

/**
 * 
 * @param toggle
 */
export function networkOverrideSendRestrictionsAll(toggle: boolean): void {
	return _in(0x57b192b4, 0xd4ad23d5, toggle); 
}

/**
 * 
 * @param p0
 */
export function networkOverrideTransitionChat(p0: boolean): void {
	return _in(0xaf66059a, 0x131aa269, p0); 
}

/**
 * 
 */
export function networkPlayerGetCheaterReason(): number {
	return _in(0x172f75b6, 0xee2233ba, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param ped
 */
export function NetworkPedForceGameStateUpdate(ped: number): void {
	return _in(0xf0bc9bcd, 0x24a511d5, ped); 
}

/**
 * ```
 * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
 * ```
 * @param player
 * @param userID
 */
export function networkPlayerGetUserid(player: number): string {
	return _in(0x4927fc39, 0xcd0869a0, player, _ii(userID), _r, _s); 
}

/**
 * ```
 * Returns the name of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
 * ```
 * @param player
 */
export function networkPlayerGetName(player: number): string {
	return _in(0x7718d2e2, 0x060837d2, player, _r, _s); 
}

/**
 * 
 */
export function networkPlayerIsBadsport(): boolean {
	return _in(0x19d8da0e, 0x5a68045a, _r); 
}

/**
 * 
 * @param player
 */
export function networkPlayerHasHeadset(player: number): boolean {
	return _in(0x3fb99a8b, 0x08d18fd6, player, _r); 
}

/**
 * ```
 * Checks if a specific value (BYTE) in CPlayerInfo is nonzero.
 * Returns always false in Singleplayer.
 * No longer used for dev checks since first mods were released on PS3 & 360.
 * R* now checks with the is_dlc_present native for the dlc hash 2532323046,
 * if that is present it will unlock dev stuff.
 * ```
 * @param player
 */
export function networkPlayerIsRockstarDev(player: number): boolean {
	return _in(0x544abdda, 0x3b409b6d, player, _r); 
}

/**
 * 
 * @param player
 */
export function networkPlayerIndexIsCheater(player: number): boolean {
	return _in(0x565e430d, 0xb3b05bec, player, _r); 
}

/**
 * 
 * @param p0
 */
export function networkQueueGamerForStatus(): boolean {
	return _in(0x85a0ef54, 0xa500882c, _i, _r); 
}

/**
 * 
 */
export function networkPlayerIsCheater(): boolean {
	return _in(0x655b91f1, 0x495a9090, _r); 
}

/**
 * 
 * @param entity
 */
export function networkRegisterEntityAsNetworked(entity: number): void {
	return _in(0x06faacd6, 0x25d80caa, entity); 
}

/**
 * 
 * @param vars
 * @param numVars
 */
export function networkRegisterHostBroadcastVariables(numVars: number): void {
	return _in(0x3e9b2f01, 0xc50df595, _i, numVars); 
}

/**
 * 
 * @param p0
 */
export function networkQueryRespawnResults(): any {
	return _in(0x3c891a25, 0x1567dfce, _i, _r, _ri); 
}

/**
 * 
 * @param vars
 * @param numVars
 */
export function networkRegisterPlayerBroadcastVariables(numVars: number): void {
	return _in(0x3364aa97, 0x340ca215, _i, numVars); 
}

/**
 * 
 * @param contextHash
 * @param nameHash
 * @param value
 */
export function NetworkRegisterTunableBoolHash(contextHash: number, nameHash: number): boolean {
	return _in(0x697f5088, 0x61875b42, _ch(contextHash), _ch(nameHash), _i, _r); 
}

/**
 * 
 */
export function networkRemoveAllTransitionInvite(): void {
	return _in(0x726e0375, 0xc7a26368); 
}

/**
 * 
 * @param contextHash
 * @param nameHash
 * @param value
 */
export function NetworkRegisterTunableFloatHash(contextHash: number, nameHash: number): boolean {
	return _in(0x1950dae9, 0x848a4739, _ch(contextHash), _ch(nameHash), _fi(value), _r); 
}

/**
 * 
 * @param p0
 */
export function networkRemovePresenceInvite(p0: any): boolean {
	return _in(0xf0210268, 0xdb0974b1, p0, _r); 
}

/**
 * 
 * @param contextHash
 * @param nameHash
 * @param value
 */
export function NetworkRegisterTunableIntHash(contextHash: number, nameHash: number): boolean {
	return _in(0x3a8b55fd, 0xa4c8ddef, _ch(contextHash), _ch(nameHash), _ii(value), _r); 
}

/**
 * 
 * @param p0
 */
export function networkRemoveEntityArea(p0: any): boolean {
	return _in(0x93cf869b, 0xaa0c4874, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function networkRemoveTransitionInvite(): void {
	return _in(0x7524b431, 0xb2e6f7ee, _i); 
}

/**
 * 
 */
export function networkRequestCloudBackgroundScripts(): boolean {
	return _in(0x924426bf, 0xfd82e915, _r); 
}

/**
 * 
 */
export function NetworkReportMyself(): void {
	return _in(0x5626d9d6, 0x810730d5); 
}

/**
 * 
 */
export function networkRequestCloudTunables(): void {
	return _in(0x42fb3b53, 0x2d526e6c); 
}

/**
 * 
 * @param entity
 */
export function networkRequestControlOfEntity(entity: number): boolean {
	return _in(0xb69317bf, 0x5e782347, entity, _r); 
}

/**
 * 
 * @param doorID
 */
export function networkRequestControlOfDoor(doorID: number): boolean {
	return _in(0x870ddfd5, 0xa4a796e4, doorID, _r); 
}

/**
 * 
 */
export function networkResetBodyTracker(): void {
	return _in(0x72433699, 0xb4e6dd64); 
}

/**
 * ```
 * p4 and p5 are always 0 in scripts
 * ```
 * @param player
 * @param x
 * @param y
 * @param z
 * @param p4
 * @param p5
 */
export function NetworkRespawnCoords(player: number, x: number, y: number, z: number, p4: boolean, p5: boolean): void {
	return _in(0x9769f811, 0xd1785b03, player, _fv(x), _fv(y), _fv(z), p4, p5); 
}

/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param unk
 * @param changetime
 */
export function networkResurrectLocalPlayer(x: number, y: number, z: number, heading: number, unk: boolean, changetime: boolean): void {
	return _in(0xea23c49e, 0xaa83acfb, _fv(x), _fv(y), _fv(z), _fv(heading), unk, changetime); 
}

/**
 * 
 * @param netId
 */
export function networkRequestControlOfNetworkId(netId: number): boolean {
	return _in(0xa670b366, 0x2faffbd0, netId, _r); 
}

/**
 * 
 * @param seed
 */
export function networkSeedRandomNumberGenerator(seed: number): void {
	return _in(0xf1b84178, 0xf8674195, seed); 
}

/**
 * ```
 * String "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" is contained in the function in ida so this one is correct.
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function NetworkSendPresenceTransitionInvite(p2: any, p3: any): boolean {
	return _in(0xc116ff9b, 0x4d488291, _i, _i, p2, p3, _r); 
}

/**
 * 
 * @param networkHandle
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSendInviteViaPresence(p2: any, p3: any): boolean {
	return _in(0xc3c7a6af, 0xdb244624, _i, _i, p2, p3, _r); 
}

/**
 * ```
 * Message is limited to 64 characters.
 * ```
 * @param message
 * @param networkHandle
 */
export function networkSendTextMessage(message: string): boolean {
	return _in(0x3a214f2e, 0xc889b100, _ts(message), _ii(networkHandle), _r); 
}

/**
 * ```
 * the first arg seems to be the network player handle (&handle) and the second var is pretty much always "" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1
 * does this send an invite to a player?
 * ```
 * @param networkHandle
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function networkSendTransitionGamerInstruction(p1: string, p2: number, p3: number, p4: boolean): boolean {
	return _in(0x31d1d2b8, 0x58d25e6b, _i, _ts(p1), p2, p3, p4, _r); 
}

/**
 * 
 * @param groupId
 */
export function networkSessionAddActiveMatchmakingGroup(groupId: number): void {
	return _in(0xcae55f48, 0xd3d7875c, groupId); 
}

/**
 * 
 * @param toggle
 */
export function networkSessionBlockJoinRequests(toggle: boolean): void {
	return _in(0xa7366748, 0x4d7037c3, toggle); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSessionActivityQuickmatch(p0: any, p1: any, p2: any, p3: any): boolean {
	return _in(0xbe3e347a, 0x87aceb82, p0, p1, p2, p3, _r); 
}

/**
 * 
 */
export function networkSessionCancelInvite(): void {
	return _in(0x2fbf47b1, 0xb36d36f9); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param maxPlayers
 * @param p4
 */
export function networkSessionCrewMatchmaking(p0: number, p1: number, p2: number, maxPlayers: number, p4: boolean): boolean {
	return _in(0x94bc51e9, 0x449d917f, p0, p1, p2, maxPlayers, p4, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkSessionChangeSlots(p0: number, p1: boolean): void {
	return _in(0xb4ab419e, 0x0d86acae, p0, p1); 
}

/**
 * ```
 * p0 is always false and p1 varies.
 * NETWORK_SESSION_END(0, 1)
 * NETWORK_SESSION_END(0, 0)
 * Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
 * ```
 * @param p0
 * @param p1
 */
export function networkSessionEnd(p0: boolean, p1: boolean): boolean {
	return _in(0xa02e5956, 0x2d711006, p0, p1, _r); 
}

/**
 * ```
 * unknown params
 * p0 = 0, 2, or 999 (The global is 999 by default.)
 * p1 = 0 (Always in every script it's found in atleast.)
 * p2 = 0, 3, or 4 (Based on a var that is determined by a function.)
 * p3 = maxPlayers (It's obvious in x360 scripts it's always 18)
 * p4 = 0 (Always in every script it's found in atleast.)
 * p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)
 * p5 is reset to 0 if,
 * Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param maxPlayers
 * @param p4
 * @param p5
 */
export function networkSessionEnter(p0: any, p1: any, p2: any, maxPlayers: number, p4: any, p5: any): any {
	return _in(0x330ed4d0, 0x5491934f, p0, p1, p2, maxPlayers, p4, p5, _r, _ri); 
}

/**
 * 
 * @param networkHandle
 */
export function networkSessionGetInviter(): void {
	return _in(0xe57397b4, 0xa3429dd0, _ii(networkHandle)); 
}

/**
 * 
 * @param p0
 */
export function networkSessionGetMatchmakingGroupFree(p0: number): number {
	return _in(0x56ce8208, 0x30ef040b, p0, _r, _ri); 
}

/**
 * 
 */
export function networkSessionForceCancelInvite(): void {
	return _in(0xa29177f7, 0x703b5644); 
}

/**
 * ```
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * ```
 * @param p0
 * @param maxPlayers
 * @param p2
 */
export function networkSessionHost(p0: number, maxPlayers: number, p2: boolean): boolean {
	return _in(0x6f3d4ed9, 0xbee4e61d, p0, maxPlayers, p2, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param maxPlayers
 * @param p3
 */
export function networkSessionFriendMatchmaking(p0: number, p1: number, maxPlayers: number, p3: boolean): boolean {
	return _in(0x2cfc76e0, 0xd087c994, p0, p1, maxPlayers, p3, _r); 
}

/**
 * 
 * @param p0
 * @param maxPlayers
 */
export function networkSessionHostClosed(p0: number, maxPlayers: number): boolean {
	return _in(0xed34c0c0, 0x2c098bb7, p0, maxPlayers, _r); 
}

/**
 * 
 * @param player
 */
export function networkSessionGetKickVote(player: number): boolean {
	return _in(0xd6d09a6f, 0x32f49ef1, player, _r); 
}

/**
 * 
 */
export function networkSessionIsClosedCrew(): boolean {
	return _in(0x74732c6c, 0xa90da2b4, _r); 
}

/**
 * 
 */
export function networkSessionGetPrivateSlots(): number {
	return _in(0x53afd64c, 0x6758f2f9, _r, _ri); 
}

/**
 * ```
 * Loads up the map that is loaded when beeing in mission creator
 * Player gets placed in a mix between online/offline mode
 * p0 is always 2 in R* scripts.
 * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
 * ```
 * @param p0
 */
export function networkSessionHostSinglePlayer(p0: number): void {
	return _in(0xc74c33fc, 0xa52856d5, p0); 
}

/**
 * ```
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * ```
 * @param p0
 * @param maxPlayers
 */
export function networkSessionHostFriendsOnly(p0: number, maxPlayers: number): boolean {
	return _in(0xb9cfd27a, 0x5d578d83, p0, maxPlayers, _r); 
}

/**
 * 
 */
export function networkSessionIsClosedFriends(): boolean {
	return _in(0xfbcfa2ea, 0x2e206890, _r); 
}

/**
 * 
 */
export function networkSessionIsSolo(): boolean {
	return _in(0xf3929c23, 0x79b60cce, _r); 
}

/**
 * 
 */
export function networkSessionIsVisible(): boolean {
	return _in(0xba416d68, 0xc631496a, _r); 
}

/**
 * 
 */
export function networkSessionJoinInvite(): void {
	return _in(0xc6f8ab8a, 0x4189cf3a); 
}

/**
 * 
 */
export function networkSessionIsInVoiceSession(): boolean {
	return _in(0x855bc388, 0x18f6f684, _r); 
}

/**
 * ```
 * Only works as host.
 * ```
 * @param player
 */
export function networkSessionKickPlayer(player: number): void {
	return _in(0xfa8904dc, 0x5f304220, player); 
}

/**
 * 
 */
export function networkSessionIsPrivate(): boolean {
	return _in(0xcef70aa5, 0xb3f89ba1, _r); 
}

/**
 * 
 */
export function networkSessionIsVoiceSessionBusy(): boolean {
	return _in(0xef0912dd, 0xf7c4cb4b, _r); 
}

/**
 * 
 */
export function networkSessionLeaveSinglePlayer(): void {
	return _in(0x34427754, 0x28fd2daa); 
}

/**
 * 
 * @param toggle
 */
export function networkSessionMarkVisible(toggle: boolean): void {
	return _in(0x271cc6ab, 0x59ebf9a5, toggle); 
}

/**
 * ```
 * playerTypes:
 * 0 = regular joiner
 * 4 = spectator
 * 8 = unknown
 * ```
 * @param playerType
 * @param playerCount
 */
export function networkSessionSetMatchmakingGroupMax(playerType: number, playerCount: number): void {
	return _in(0x8b6a4dd0, 0xaf9ce215, playerType, playerCount); 
}

/**
 * 
 * @param matchmakingGroup
 */
export function networkSessionSetMatchmakingGroup(matchmakingGroup: number): void {
	return _in(0x49ec8030, 0xf5015f8b, matchmakingGroup); 
}

/**
 * 
 * @param p0
 */
export function networkSessionSetMatchmakingPropertyId(p0: boolean): void {
	return _in(0x3f52e880, 0xaaf6c8ca, p0); 
}

/**
 * 
 * @param p0
 */
export function networkSessionSetMatchmakingMentalState(p0: any): void {
	return _in(0xf1eea2dd, 0xa9ffa69d, p0); 
}

/**
 * ```
 * Only one occurence in the scripts:
 * auto sub_cb43(auto a_0, auto a_1) {
 * if (g_2594CB._f1) {
 * if (NETWORK::_855BC38818F6F684()) {
 * NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);
 * g_2594CB._f14 -- [[{13}]]  = a_0._fB93;
 * g_2594CB._f4 -- [["64"]]  = a_1;
 * return 1;
 * }
 * }
 * return 0;
 * }
 * other:
 * looks like it passes a player in the paramater
 * Contains string "NETWORK_VOICE_CONNECT_TO_PLAYER" in ida
 * ```
 * @param globalPtr
 */
export function networkSessionVoiceConnectToPlayer(): void {
	return _in(0xabd5e88b, 0x8a2d3db2, _i); 
}

/**
 * 
 * @param p0
 */
export function networkSessionValidateJoin(p0: boolean): void {
	return _in(0xc19f6c8e, 0x7865a6ff, p0); 
}

/**
 * 
 */
export function networkSessionVoiceLeave(): void {
	return _in(0x6793e42b, 0xe02b575d); 
}

/**
 * 
 */
export function networkSessionVoiceHost(): void {
	return _in(0x9c155670, 0x5f864230); 
}

/**
 * 
 * @param timeout
 */
export function networkSessionVoiceSetTimeout(timeout: number): void {
	return _in(0x5b8ed3db, 0x018927b1, timeout); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkSessionVoiceRespondToRequest(p0: boolean, p1: number): void {
	return _in(0x7f8413b7, 0xfc2aa6b9, p0, p1); 
}

/**
 * 
 * @param playerCount
 */
export function networkSetActivityPlayerMax(playerCount: number): void {
	return _in(0x0e4f77f7, 0xb9d74d84, playerCount); 
}

/**
 * 
 */
export function networkSessionWasInvited(): boolean {
	return _in(0x23dfb504, 0x655d0ce4, _r); 
}

/**
 * 
 * @param toggle
 * @param player
 */
export function networkSetChoiceMigrateOptions(toggle: boolean, player: number): void {
	return _in(0x5c707a66, 0x7df8b9fa, toggle, player); 
}

/**
 * 
 * @param toggle
 */
export function networkSetActivitySpectator(toggle: boolean): void {
	return _in(0x75138790, 0xb4359a74, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param missionId
 */
export function NetworkSetCurrentMissionId(missionId: string): void {
	return _in(0x2c863acd, 0xcd12b3db, _ts(missionId)); 
}

/**
 * 
 * @param maxSpectators
 */
export function networkSetActivitySpectatorMax(maxSpectators: number): void {
	return _in(0x9d277b76, 0xd1d12222, maxSpectators); 
}

/**
 * 
 * @param p0
 */
export function NetworkSetCurrentDataManagerHandle(): boolean {
	return _in(0x796a87b3, 0xb68d1f3d, _i, _r); 
}

/**
 * ```
 * mpSettingSpawn:
 * 
 * enum eMpSettingSpawn
 * {
 * MP_SETTING_SPAWN_NULL,
 * MP_SETTING_SPAWN_PROPERTY,
 * MP_SETTING_SPAWN_LAST_POSITION,
 * MP_SETTING_SPAWN_GARAGE,
 * MP_SETTING_SPAWN_RANDOM,
 * MP_SETTING_SPAWN_PRIVATE_YACHT,
 * MP_SETTING_SPAWN_OFFICE,
 * MP_SETTING_SPAWN_CLUBHOUSE,
 * MP_SETTING_SPAWN_IE_WAREHOUSE,
 * MP_SETTING_SPAWN_BUNKER,
 * MP_SETTING_SPAWN_HANGAR,
 * MP_SETTING_SPAWN_DEFUNCT_BASE,
 * MP_SETTING_SPAWN_NIGHTCLUB,
 * MP_SETTING_SPAWN_ARENA_GARAGE,
 * MP_SETTING_SPAWN_CASINO_APARTMENT,
 * MP_SETTING_SPAWN_ARCADE,
 * MP_SETTING_SPAWN_SUBMARINE,
 * MP_SETTING_SPAWN_CAR_MEET,
 * MP_SETTING_SPAWN_AUTO_SHOP,
 * MP_SETTING_SPAWN_FIXER_HQ,
 * MP_SETTING_SPAWN_MAX,
 * };
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param mpSettingSpawn
 */
export function NetworkSetCurrentSpawnSetting(mpSettingSpawn: number): void {
	return _in(0xaa6d5451, 0xdc3448b6, _ch(mpSettingSpawn)); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function networkSetEntityCanBlend(entity: number, toggle: boolean): void {
	return _in(0xd830567d, 0x88a1e873, entity, toggle); 
}

/**
 * ```
 * if set to true other network players can't see it
 * if set to false other network player can see it
 * =========================================
 * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
 * pc or last gen?
 * ^^ last-gen
 * ```
 * @param entity
 * @param toggle
 */
export function NetworkSetEntityInvisibleToNetwork(entity: number, toggle: boolean): void {
	return _in(0xf1ca12b1, 0x8aef5298, entity, toggle); 
}

/**
 * 
 * @param p0
 */
export function networkSetCurrentlySelectedGamerHandleFromInviteMenu(): boolean {
	return _in(0x7206f674, 0xf2a3b1bb, _i, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function networkSetGamerInvitedToTransition(): void {
	return _in(0xca2c8073, 0x411ecdb6, _ii(networkHandle)); 
}

/**
 * 
 * @param entity
 * @param p1
 */
export function NetworkSetEntityGhostedWithOwner(entity: number, p1: boolean): void {
	return _in(0x4ba16607, 0x9d658ed4, entity, p1); 
}

/**
 * 
 * @param toggle
 */
export function networkSetFriendlyFireOption(toggle: boolean): void {
	return _in(0xf808475f, 0xa571d823, toggle); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkSetInMpCutscene(p0: boolean, p1: boolean): void {
	return _in(0x9ca5de65, 0x5269fec4, p0, p1); 
}

/**
 * 
 * @param toggle
 * @param playerPed
 * @param p2
 */
export function networkSetInSpectatorModeExtended(toggle: boolean, playerPed: number, p2: boolean): void {
	return _in(0x419594e1, 0x37637120, toggle, playerPed, p2); 
}

/**
 * 
 * @param toggle
 */
export function networkSetInFreeCamMode(toggle: boolean): void {
	return _in(0xfc18db55, 0xae19e046, toggle); 
}

/**
 * 
 * @param toggle
 * @param playerPed
 */
export function networkSetInSpectatorMode(toggle: boolean, playerPed: number): void {
	return _in(0x423de385, 0x4bb50894, toggle, playerPed); 
}

/**
 * 
 * @param time
 */
export function networkSetLocalPlayerInvincibleTime(time: number): void {
	return _in(0x2d95c7e2, 0xd7e07307, time); 
}

/**
 * 
 * @param networkHandle
 */
export function networkSetInviteOnCallForInviteMenu(): void {
	return _in(0x66f010a4, 0xb031a331, _ii(networkHandle)); 
}

/**
 * 
 * @param toggle
 */
export function networkSetNoSpectatorChat(toggle: boolean): void {
	return _in(0xf46a1e03, 0xe8755980, toggle); 
}

/**
 * 
 */
export function networkSetMissionFinished(): void {
	return _in(0x3b3d11cd, 0x9ffcdfc9); 
}

/**
 * Sets whether or not an object (created using `CREATE_OBJECT`, or similar) should have its position/rotation synchronized,
 * even if it is a 'static' object (for example, having flag 32 - Static - set in its archetype definition).
 * 
 * This has to be called during the same frame the object is created/registered for network, as otherwise it may already
 * have a remote clone created.
 * 
 * Once a remote clone is created, changing this value will not have any effect on said clone.
 * @param object
 * @param enabled
 */
export function NetworkSetObjectForceStaticBlend(object: number, enabled: boolean): void {
	return _in(0x0379daf8, 0x9ba09aa5, object, enabled); 
}

/**
 * 
 * @param toggle
 */
export function networkSetLocalPlayerSyncLookAt(toggle: boolean): void {
	return _in(0x524ff0ae, 0xff9c3973, toggle); 
}

/**
 * 
 * @param toggle
 */
export function networkSetPlayerIsPassive(toggle: boolean): void {
	return _in(0x1b857666, 0x604b1a74, toggle); 
}

/**
 * 
 * @param toggle
 */
export function networkSetOverrideSpectatorMode(toggle: boolean): void {
	return _in(0x70da3bf8, 0xdacd3210, toggle); 
}

/**
 * ```
 * value must be < 255
 * ```
 * @param id
 */
export function networkSetPropertyId(id: number): void {
	return _in(0x1775961c, 0x2fbbcb5c, id); 
}

/**
 * ```
 * On PC it's a nullsub which means it does absolutely nothing.
 * Now that Discord supports Rich Presence, R* might finally implement this for PC. Or maybe in future games like RDR2, GTA VI...
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSetRichPresence(p0: number, p1: any, p2: any, p3: any): void {
	return _in(0x1dccacdc, 0xfc569362, p0, p1, p2, p3); 
}

/**
 * 
 * @param value
 */
export function networkSetTalkerProximity(value: number): void {
	return _in(0xcbf12d65, 0xf95ad686, _fv(value)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param textLabel
 */
export function networkSetRichPresenceString(p0: number, textLabel: string): void {
	return _in(0x3e200c2b, 0xcf4164eb, p0, _ts(textLabel)); 
}

/**
 * 
 * @param maxNumMissionParticipants
 * @param p1
 * @param instanceId
 */
export function networkSetThisScriptIsNetworkScript(maxNumMissionParticipants: number, p1: boolean, instanceId: number): void {
	return _in(0x1ca59e30, 0x6ecb80a5, maxNumMissionParticipants, p1, instanceId); 
}

/**
 * 
 * @param toggle
 */
export function networkSetScriptReadyForEvents(toggle: boolean): void {
	return _in(0x7ac75210, 0x3856fb20, toggle); 
}

/**
 * 
 * @param p0
 */
export function networkSetTransitionActivityId(p0: any): void {
	return _in(0x30de938b, 0x516f0ad2, p0); 
}

/**
 * 
 * @param toggle
 */
export function networkSetTeamOnlyChat(toggle: boolean): void {
	return _in(0xd5b4883a, 0xc32f24c3, toggle); 
}

/**
 * ```
 * Used by Metric VEHICLE_DIST_DRIVEN
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param toggle
 */
export function NetworkSetVehicleTestDrive(toggle: boolean): void {
	return _in(0x8c70252f, 0xc40f320b, toggle); 
}

/**
 * 
 * @param p0
 */
export function networkSetTransitionCreatorHandle(): void {
	return _in(0xef26739b, 0xcd9907d5, _i); 
}

/**
 * ```
 * Allow vehicle wheels to be destructible even when the Vehicle entity is invincible.
 * ```
 * 
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param toggle
 */
export function NetworkSetVehicleWheelsDestructible(vehicle: number, toggle: boolean): void {
	return _in(0x890e2c5a, 0xbed7236d, vehicle, toggle); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function networkSetTransitionVisibilityLock(p0: boolean, p1: boolean): void {
	return _in(0x0c978fda, 0x19692c2c, p0, p1); 
}

/**
 * 
 * @param channel
 */
export function networkSetVoiceChannel(channel: number): void {
	return _in(0xef6212c2, 0xefef1a23, channel); 
}

/**
 * 
 * @param toggle
 */
export function networkSetVoiceActive(toggle: boolean): void {
	return _in(0xbabec9e6, 0x9a91c57b, toggle); 
}

/**
 * ```
 * Example:
 * int playerHandle;
 * NETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);
 * NETWORK_SHOW_PROFILE_UI(&playerHandle);
 * ```
 * @param networkHandle
 */
export function networkShowProfileUi(): void {
	return _in(0x859ed1ce, 0xa343fca8, _ii(networkHandle)); 
}

/**
 * ```
 * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
 * ```
 */
export function NetworkShouldShowConnectivityTroubleshooting(): boolean {
	return _in(0x82a2b386, 0x716608f1, _r); 
}

/**
 * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS` in the decompiled scripts.
 * @param player
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p8
 * @param p9
 * @param p10
 * @param flags
 */
export function networkStartRespawnSearchInAngledAreaForPlayer(player: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p8: number, p9: number, p10: number, flags: number): boolean {
	return _in(0x4ba92a18, 0x502bca61, player, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _fv(p8), _fv(p9), _fv(p10), flags, _r); 
}

/**
 * 
 * @param netScene
 */
export function networkStartSynchronisedScene(netScene: number): void {
	return _in(0x9a1b3fcd, 0xb36c8697, netScene); 
}

/**
 * ```
 * One of the first things it does is get the players ped.
 * Then it calls a function that is used in some tasks and ped based functions.
 * ```
 * 
 * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS`, in the decompiled scripts.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 * @param p6
 * @param p7
 * @param flags
 */
export function networkStartRespawnSearchForPlayer(player: number, x: number, y: number, z: number, radius: number, p5: number, p6: number, p7: number, flags: number): boolean {
	return _in(0x5a6ffa24, 0x33e2f14c, player, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p5), _fv(p6), _fv(p7), flags, _r); 
}

/**
 * 
 */
export function networkStartSoloTutorialSession(): void {
	return _in(0x17e0198b, 0x3882c2cb); 
}

/**
 * ```
 * Always returns -1. Seems to be XB1 specific.
 * ```
 * @param netHandle
 */
export function NetworkStartUserContentPermissionsCheck(netHandle: any): number {
	return _in(0xdeb2b99a, 0x1af1a2a6, netHandle, _r, _ri); 
}

/**
 * 
 * @param netScene
 */
export function networkStopSynchronisedScene(netScene: number): void {
	return _in(0xc254481a, 0x4574cb2f, netScene); 
}

/**
 * 
 * @param hash
 * @param p1
 * @param p2
 * @param state
 * @param p4
 */
export function NetworkTransitionTrack(hash: number, p1: number, p2: number, state: number, p4: number): void {
	return _in(0xc3bfed92, 0x026a2aad, _ch(hash), p1, p2, state, p4); 
}

/**
 * 
 * @param toggle
 */
export function networkSuppressInvite(toggle: boolean): void {
	return _in(0xa0682d67, 0xef1fba3d, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 */
export function NetworkUgcNav(p0: any, p1: any): void {
	return _in(0xc1447451, 0xddb512f0, p0, p1); 
}

/**
 * ```
 * Returns defaultValue if the tunable doesn't exist.
 * ```
 * @param tunableContext
 * @param tunableName
 * @param defaultValue
 */
export function networkTryAccessTunableBoolHash(tunableContext: number, tunableName: number, defaultValue: boolean): boolean {
	return _in(0xc7420099, 0x936ce286, _ch(tunableContext), _ch(tunableName), defaultValue, _r); 
}

/**
 * 
 * @param entity
 */
export function networkUnregisterNetworkedEntity(entity: number): void {
	return _in(0x7368e683, 0xbb9038d6, entity); 
}

/**
 * 
 */
export function NetworkUpdatePlayerScars(): void {
	return _in(0xb7c7f6ad, 0x6424304b); 
}

/**
 * 
 * @param entity
 */
export function networkUseLogarithmicBlendingThisFrame(entity: number): void {
	return _in(0xcd71a4ec, 0xab22709e, entity); 
}

/**
 * ```
 * Old name: _NETWORK_SET_NETWORK_ID_DYNAMIC
 * ```
 * @param netID
 * @param toggle
 */
export function networkUseHighPrecisionBlending(netID: number, toggle: boolean): void {
	return _in(0x2b1813ab, 0xa29016c5, netID, toggle); 
}

/**
 * ```
 * Has a 3rd param (int) since patch [???].
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * @param p0
 * @param p1
 */
export function openCommerceStore(p0: string, p1: string): void {
	return _in(0x58c21165, 0xf6545892, _ts(p0), _ts(p1)); 
}

/**
 * ```
 * Lets objects spawn online simply do it like this:
 * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
 * ```
 * @param object
 */
export function objToNet(object: number): number {
	return _in(0x99bfdc94, 0xa603e541, object, _r, _ri); 
}

/**
 * ```
 * Return the local Participant ID.
 * This native is exactly the same as 'PARTICIPANT_ID' native.
 * ```
 */
export function participantIdToInt(): number {
	return _in(0x57a3bdda, 0xd8e5aa0a, _r, _ri); 
}

/**
 * ```
 * Return the local Participant ID
 * ```
 */
export function participantId(): number {
	return _in(0x90986e88, 0x76ce0a83, _r); 
}

/**
 * 
 * @param p0
 */
export function refreshPlayerListStats(p0: number): boolean {
	return _in(0xe26ccff8, 0x094d8c74, p0, _r); 
}

/**
 * ```
 * gets the network id of a ped
 * ```
 * @param ped
 */
export function pedToNet(ped: number): number {
	return _in(0x0edec3c2, 0x76198689, ped, _r, _ri); 
}

/**
 * 
 */
export function releaseAllCommerceItemImages(): void {
	return _in(0x72d0706c, 0xd6ccdb58); 
}

/**
 * ```
 * NativeDB Added Parameter 1: Player player
 * NativeDB Added Parameter 2: int a
 * NativeDB Added Parameter 3: int b
 * ```
 */
export function RemoteCheatDetected(): boolean {
	return _in(0x472841a0, 0x26d26d8b, _r); 
}

/**
 * 
 * @param index
 */
export function requestCommerceItemImage(index: number): boolean {
	return _in(0xa2f95210, 0x4fc6dd4b, index, _r); 
}

/**
 * ```
 * Used in am_mp_property_ext and am_mp_property_int
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: Ped ped
 * ```
 * @param entity
 */
export function removeAllStickyBombsFromEntity(entity: number): void {
	return _in(0x715135f4, 0xb82ac90d, entity); 
}

/**
 * ```
 * Internal logging string: SCRIPT_RESERVING_LOCAL_OBJECTS
 * ```
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param amount
 */
export function ReserveNetworkLocalObjects(amount: number): void {
	return _in(0x797f9c5e, 0x661d920e, amount); 
}

/**
 * ```
 * Internal logging string: SCRIPT_RESERVING_LOCAL_PEDS
 * ```
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param amount
 */
export function ReserveNetworkLocalPeds(amount: number): void {
	return _in(0x2c8df5d1, 0x29595281, amount); 
}

/**
 * 
 * @param amount
 */
export function reserveNetworkMissionObjects(amount: number): void {
	return _in(0x4e5c93bd, 0x0c32fbf8, amount); 
}

/**
 * 
 * @param amount
 */
export function ReserveNetworkLocalVehicles(amount: number): void {
	return _in(0x42613035, 0x157e4208, amount); 
}

/**
 * 
 * @param amount
 */
export function reserveNetworkMissionVehicles(amount: number): void {
	return _in(0x76b02e21, 0xed27a469, amount); 
}

/**
 * 
 * @param amount
 */
export function reserveNetworkMissionPeds(amount: number): void {
	return _in(0xb60feba4, 0x5333d36f, amount); 
}

/**
 * Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\_0x4BA166079D658ED4).
 */
export function ResetGhostedEntityAlpha(): void {
	return _in(0x17330ebf, 0x2f2124a8); 
}

/**
 * 
 * @param contentId
 * @param contentTypeName
 */
export function setBalanceAddMachine(contentId: string, contentTypeName: string): boolean {
	return _in(0x815e5e30, 0x73da1d67, _ts(contentId), _ts(contentTypeName), _r); 
}

/**
 * Sets the provided entity not visible for yourself for the current frame.
 * @param entity
 */
export function setEntityLocallyInvisible(entity: number): void {
	return _in(0xe135a9ff, 0x3f5d05d8, entity); 
}

/**
 * 
 * @param data
 * @param dataCount
 * @param contentTypeName
 */
export function setBalanceAddMachines(dataCount: number, contentTypeName: string): boolean {
	return _in(0xb8322eeb, 0x38be7c26, _i, dataCount, _ts(contentTypeName), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function setEntityVisibleInCutscene(p0: any, p1: boolean, p2: boolean): void {
	return _in(0xe0031d3c, 0x8f36ab82, p0, p1, p2); 
}

/**
 * Sets the provided entity visible for yourself for the current frame.
 * @param entity
 */
export function setEntityLocallyVisible(entity: number): void {
	return _in(0x241e289b, 0x5c059edc, entity); 
}

/**
 * Formerly incorrectly named `USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR` due to incorrect treatment of console vs. PC native registration.
 * 
 * Native name guessed through ordering.
 * 
 * ```
 * NativeDB Added Parameter 2: BOOL p1
 * ```
 * @param toggle
 */
export function SetLocalPlayerAsGhost(toggle: boolean): void {
	return _in(0x5ffe9b41, 0x44f9712f, toggle); 
}

/**
 * Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\_0x4BA166079D658ED4).
 * 
 * 'Solidness' cannot be achieved using 255 - this will have the opposite effect of it defaulting to 128 it seems (or just having no effect at all).
 * @param alpha
 */
export function SetGhostedEntityAlpha(alpha: number): void {
	return _in(0x658500ae, 0x6d723a7e, alpha); 
}

/**
 * 
 * @param p0
 */
export function setLocalPlayerInvisibleLocally(p0: boolean): void {
	return _in(0xe5f773c1, 0xa1d9d168, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setLocalPlayerVisibleInCutscene(p0: boolean, p1: boolean): void {
	return _in(0xd1065d68, 0x947e7b6e, p0, p1); 
}

/**
 * 
 * @param toggle
 */
export function setNetworkCutsceneEntities(toggle: boolean): void {
	return _in(0xaaa553e7, 0xdd28a457, toggle); 
}

/**
 * 
 * @param netId
 * @param player
 * @param toggle
 */
export function setNetworkIdAlwaysExistsForPlayer(netId: number, player: number, toggle: boolean): void {
	return _in(0xa8a02458, 0x7329f36a, netId, player, toggle); 
}

/**
 * 
 * @param p0
 */
export function setLocalPlayerVisibleLocally(p0: boolean): void {
	return _in(0x7619364c, 0x82d3bf14, p0); 
}

/**
 * 
 * @param netId
 * @param toggle
 */
export function setNetworkIdExistsOnAllMachines(netId: number, toggle: boolean): void {
	return _in(0xe05e81a8, 0x88fa63c8, netId, toggle); 
}

/**
 * ```
 * Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetNetworkEnableVehiclePositionCorrection(vehicle: number, toggle: boolean): void {
	return _in(0x838da093, 0x6a24ed4d, vehicle, toggle); 
}

/**
 * ```
 * Whether or not another player is allowed to take control of the entity
 * ```
 * @param netId
 * @param toggle
 */
export function setNetworkIdCanMigrate(netId: number, toggle: boolean): void {
	return _in(0x299eeb23, 0x175895fc, netId, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setNetworkVehicleAsGhost(vehicle: number, toggle: boolean): void {
	return _in(0x6274c471, 0x2850841e, vehicle, toggle); 
}

/**
 * 
 * @param netId
 * @param p1
 * @param p2
 */
export function setNetworkIdVisibleInCutscene(netId: number, p1: boolean, p2: boolean): void {
	return _in(0xa6928482, 0x543022b4, netId, p1, p2); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param netId
 * @param time
 */
export function setNetworkVehicleRespotTimer(netId: number, time: number): void {
	return _in(0xec51713a, 0xb6ec36e8, netId, time); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerInvisibleLocally(player: number, toggle: boolean): void {
	return _in(0x12b37d54, 0x667db0b8, player, toggle); 
}

/**
 * ```
 * rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
 * ```
 * @param vehicle
 * @param multiplier
 */
export function SetNetworkVehiclePositionUpdateMultiplier(vehicle: number, multiplier: number): void {
	return _in(0xa2a70797, 0x9fe754dc, vehicle, _fv(multiplier)); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerVisibleLocally(player: number, toggle: boolean): void {
	return _in(0xfaa10f1f, 0xafb11af2, player, toggle); 
}

/**
 * ```
 * Access to the store for shark cards etc...
 * ```
 * @param toggle
 */
export function setStoreEnabled(toggle: boolean): void {
	return _in(0x9641a9ff, 0x718e9c5e, toggle); 
}

/**
 * Disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
 * 
 * If you're already in SP then it'll re-load singleplayer.
 * 
 * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
 * 
 * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
 * @return always seems to be 1
 */
export function ShutdownAndLoadMostRecentSave(): boolean {
	return _in(0x9eca15ad, 0xfe141431, _r); 
}

/**
 * Enables ghosting between specific players. Name is between `_SET_RELATIONSHIP_GROUP_DONT_AFFECT_WANTED_LEVEL` and `SET_ROADS_BACK_TO_ORIGINAL`.
 * @param player
 * @param p1
 */
export function SetRelationshipToPlayer(player: number, p1: boolean): void {
	return _in(0xa7c511fa, 0x1c5bda38, player, p1); 
}

/**
 * ```
 * Starts a new singleplayer game (at the prologue).
 * ```
 */
export function shutdownAndLaunchSinglePlayerGame(): void {
	return _in(0x593850c1, 0x6a36b692); 
}

/**
 * 
 * @param p0
 */
export function textureDownloadHasFailed(p0: number): boolean {
	return _in(0x5776ed56, 0x2c134687, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function textureDownloadGetName(p0: number): string {
	return _in(0x3448505b, 0x6e35262d, p0, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function textureDownloadRelease(p0: number): void {
	return _in(0x487eb90b, 0x98e9fb19, p0); 
}

/**
 * 
 * @param PlayerHandle
 * @param FilePath
 * @param Name
 * @param p3
 */
export function textureDownloadRequest(FilePath: string, Name: string, p3: boolean): number {
	return _in(0x16160da7, 0x4a8e74a2, _i, _ts(FilePath), _ts(Name), p3, _r, _ri); 
}

/**
 * 
 */
export function ugcCancelQuery(): void {
	return _in(0xe9b99b68, 0x53181409); 
}

/**
 * 
 */
export function ugcClearModifyResult(): void {
	return _in(0xa1e5e020, 0x4a6fcc70); 
}

/**
 * 
 * @param FilePath
 * @param Name
 * @param p2
 */
export function titleTextureDownloadRequest(FilePath: string, Name: string, p2: boolean): number {
	return _in(0x0b203b4a, 0xfde53a4f, _ts(FilePath), _ts(Name), p2, _r, _ri); 
}

/**
 * 
 */
export function ugcClearOfflineQuery(): void {
	return _in(0x61a885d3, 0xf7cfee9a); 
}

/**
 * ```
 * p1 = 6
 * ```
 * @param player
 * @param p1
 * @param scriptHash
 */
export function TriggerScriptCrcCheckOnPlayer(player: number, p1: number, scriptHash: number): boolean {
	return _in(0x46fb3ed4, 0x15c7641c, player, p1, _ch(scriptHash), _r); 
}

/**
 * 
 */
export function ugcClearCreateResult(): void {
	return _in(0x17440aa1, 0x5d1d3739); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcCopyContent(): boolean {
	return _in(0x152d90e4, 0xc1b4738a, _i, _i, _r); 
}

/**
 * 
 */
export function ugcClearQueryResults(): void {
	return _in(0xba96394a, 0x0eecfa65); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetCachedDescription(p0: any, p1: any): any {
	return _in(0x40f7e664, 0x72df3e5c, p0, p1, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function ugcGetBookmarkedContent(p0: any, p1: any): boolean {
	return _in(0xd5a4b599, 0x80401588, p0, p1, _i, _i, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentCategory(p0: number): number {
	return _in(0xa7bab11e, 0x7c9c6c5a, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentHasPlayerBookmarked(p0: any): boolean {
	return _in(0x993cbe59, 0xd350d225, p0, _r); 
}

/**
 * 
 */
export function ugcDidGetSucceed(): any {
	return _in(0x941e5306, 0xbcd7c2c7, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentHasPlayerRecord(p0: any): boolean {
	return _in(0x70ea8da5, 0x7840f9be, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentDescriptionHash(p0: any): number {
	return _in(0x7cf04487, 0x87b23758, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentFileVersion(p0: any, p1: any): any {
	return _in(0x37025b27, 0xd9b658b1, p0, p1, _r, _ri); 
}

/**
 * ```
 * Return the mission id of a job.
 * ```
 * @param p0
 */
export function ugcGetContentId(p0: number): string {
	return _in(0x55aa95f4, 0x81d694d2, p0, _r, _s); 
}

/**
 * 
 */
export function ugcGetContentHash(): number {
	return _in(0x3a17a27d, 0x75c74887, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentIsVerified(p0: any): boolean {
	return _in(0xa9240a96, 0xc74cca13, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentIsPublished(p0: any): boolean {
	return _in(0x3054f114, 0x121c21ea, p0, _r); 
}

/**
 * 
 */
export function ugcGetContentNum(): any {
	return _in(0xe0a61384, 0x01bcb837, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentPath(p0: number, p1: number): string {
	return _in(0xbaf6babf, 0x9e7ccc13, p0, p1, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentLanguage(p0: any): any {
	return _in(0x32dd916f, 0x3f7c9672, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentRatingCount(p0: any, p1: any): any {
	return _in(0x759299c5, 0xbb31d2a9, p0, p1, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentName(p0: any): any {
	return _in(0xbf09786a, 0x7fcab582, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentRating(p0: any, p1: any): any {
	return _in(0x1accfba3, 0xd8dab2ee, p0, p1, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentRatingPositiveCount(p0: any, p1: any): any {
	return _in(0x87e5c46c, 0x187fe0ae, p0, p1, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentRatingNegativeCount(p0: any, p1: any): any {
	return _in(0x4e548c0d, 0x7ae39ff9, p0, p1, _r, _ri); 
}

/**
 * 
 */
export function ugcGetContentTotal(): any {
	return _in(0x769951e2, 0x455e2eb5, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcGetContentUpdatedDate(p0: any): void {
	return _in(0xcfd115b3, 0x73c0df63, p0, _i); 
}

/**
 * 
 */
export function ugcGetCreateContentId(): any {
	return _in(0xc55a0b40, 0xffb1ed23, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentUserId(p0: number): string {
	return _in(0xcd67ad04, 0x1a394c9c, p0, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function ugcGetContentUserName(p0: any): any {
	return _in(0x703f1242, 0x5eca8bf5, p0, _r, _ri); 
}

/**
 * 
 */
export function ugcGetCreatorNum(): any {
	return _in(0x597f8dba, 0x9b206fc7, _r, _ri); 
}

/**
 * 
 */
export function ugcGetCreateResult(): any {
	return _in(0xfbc5e768, 0xc7a77a6a, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function ugcGetCrewContent(p0: any, p1: any, p2: any): boolean {
	return _in(0x9f6e2821, 0x885caee2, p0, p1, p2, _i, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function ugcGetFriendContent(p0: any, p1: any): boolean {
	return _in(0xf9e1ccae, 0x8ba4c281, p0, p1, _i, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function ugcGetGetByCategory(p0: any, p1: any, p2: any): boolean {
	return _in(0x678bb03c, 0x1a3bd51e, p0, p1, p2, _i, _i, _r); 
}

/**
 * 
 */
export function ugcGetModifyResult(): any {
	return _in(0x5a0a3d1a, 0x186a5508, _r, _ri); 
}

/**
 * 
 */
export function ugcGetQueryResult(): any {
	return _in(0xedf7f927, 0x136c224b, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function ugcGetMyContent(p0: any, p1: any): boolean {
	return _in(0x3195f8dd, 0x0d531052, p0, p1, _i, _i, _r); 
}

/**
 * ```
 * Return the root content id of a job.
 * ```
 * @param p0
 */
export function ugcGetRootContentId(p0: number): string {
	return _in(0xc0173d6b, 0xff4e0348, p0, _r, _s); 
}

/**
 * 
 */
export function ugcHasCreateFinished(): boolean {
	return _in(0x5e24341a, 0x7f92a74b, _r); 
}

/**
 * 
 */
export function ugcHasGetFinished(): boolean {
	return _in(0x02ada21e, 0xa2f6918f, _r); 
}

/**
 * 
 */
export function ugcIsGetting(): boolean {
	return _in(0xd53acdbe, 0xf24a46e8, _r); 
}

/**
 * 
 */
export function ugcHasModifyFinished(): boolean {
	return _in(0x299ef3c5, 0x76773506, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcPoliciesMakePrivate(p0: any): boolean {
	return _in(0x5cae833b, 0x0ee0c500, p0, _r); 
}

/**
 * 
 * @param contentId
 * @param baseContentId
 * @param contentTypeName
 */
export function ugcPublish(contentId: string, baseContentId: string, contentTypeName: string): boolean {
	return _in(0x1de0f5f5, 0x0d723caa, _ts(contentId), _ts(baseContentId), _ts(contentTypeName), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function ugcQueryMyContent(p0: any, p1: any, p3: any, p4: any, p5: any): boolean {
	return _in(0x9bf43881, 0x5f5d96ea, p0, p1, _i, p3, p4, p5, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcIsLanguageSupported(p0: any): boolean {
	return _in(0xf53e4846, 0x1b71eecb, p0, _r); 
}

/**
 * 
 * @param offset
 * @param count
 * @param contentTypeName
 * @param p3
 */
export function UgcQueryRecentlyCreatedContent(offset: number, count: number, contentTypeName: string, p3: number): boolean {
	return _in(0x6d4cb481, 0xfac835e8, offset, count, _ts(contentTypeName), p3, _r); 
}

/**
 * 
 * @param contentId
 * @param latestVersion
 * @param contentTypeName
 */
export function ugcQueryByContentId(contentId: string, latestVersion: boolean, contentTypeName: string): boolean {
	return _in(0x158ec424, 0xf35ec469, _ts(contentId), latestVersion, _ts(contentTypeName), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ugcRequestContentDataFromIndex(p0: number, p1: number): number {
	return _in(0x171df6a0, 0xc07fb3dc, p0, p1, _r, _ri); 
}

/**
 * 
 * @param data
 * @param count
 * @param latestVersion
 * @param contentTypeName
 */
export function ugcQueryByContentIds(count: number, latestVersion: boolean, contentTypeName: string): boolean {
	return _in(0xc7397a83, 0xf7a2a462, _i, count, latestVersion, _ts(contentTypeName), _r); 
}

/**
 * 
 * @param contentId
 * @param bookmarked
 * @param contentTypeName
 */
export function ugcSetBookmarked(contentId: string, bookmarked: boolean, contentTypeName: string): boolean {
	return _in(0x274a1519, 0xdfc1094f, _ts(contentId), bookmarked, _ts(contentTypeName), _r); 
}

/**
 * 
 * @param p0
 */
export function ugcRequestCachedDescription(p0: number): number {
	return _in(0x5e016527, 0x8f6339ee, p0, _r, _ri); 
}

/**
 * 
 * @param contentTypeName
 * @param contentId
 * @param p2
 * @param p3
 * @param p4
 */
export function ugcRequestContentDataFromParams(contentTypeName: string, contentId: string, p2: number, p3: number, p4: number): number {
	return _in(0x7fd2990a, 0xf016795e, _ts(contentTypeName), _ts(contentId), p2, p3, p4, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function ugcSetDeleted(p1: boolean): boolean {
	return _in(0xd05d1a6c, 0x74da3498, _i, p1, _i, _r); 
}

/**
 * 
 * @param p0
 */
export function ugcSetQueryDataFromOffline(p0: boolean): void {
	return _in(0xf98dde0a, 0x8ed09323, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function ugcTextureDownloadRequest(p1: any, p2: any, p3: any, p5: boolean): any {
	return _in(0x308f9645, 0x8b7087cc, _i, p1, p2, p3, _i, p5, _r, _ri); 
}

/**
 * ```
 * calls from vehicle to net.
 * ```
 * @param vehicle
 */
export function vehToNet(vehicle: number): number {
	return _in(0xb4c94523, 0xf023419c, vehicle, _r, _ri); 
}

/**
 * 
 * @param toggle
 */
export function usePlayerColourInsteadOfTeamColour(toggle: boolean): void {
	return _in(0x77758139, 0xec9b66c7, toggle); 
}

/**
 * p5 only set to true in single player native scripts. Door hashes normally look like `PROP_[int]_DOOR_[int]` for interior doors and `PROP_BUILDING_[int]_DOOR_[int]` exterior doors but you can just make up your own hash if you want.
 * 
 * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
 * 
 * A simple "localized" door-system (with hundreds/thousands of doors) can be created by setting p5, p6, and p7 to false and using EventHandlers to synchronize the states to: [DOOR_SYSTEM_SET_DOOR_STATE](#\_0x6BAB9442830C7F53), [DOOR_SYSTEM_SET_OPEN_RATIO](#\_0xB6E6FBA95C7324AC), [DOOR_SYSTEM_SET_HOLD_OPEN](#\_0xD9B71952F78A2640), etc.
 * @param doorHash
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param scriptDoor
 * @param isLocal
 */
export function addDoorToSystem(doorHash: number, modelHash: number, x: number, y: number, z: number, p5: boolean, scriptDoor: boolean, isLocal: boolean): void {
	return _in(0x6f8838d0, 0x3d1dc226, _ch(doorHash), _ch(modelHash), _fv(x), _fv(y), _fv(z), p5, scriptDoor, isLocal); 
}

/**
 * 
 * @param garageHash
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function areEntitiesEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean {
	return _in(0x85b6c850, 0x546fdde2, _ch(garageHash), p1, p2, p3, p4, _r); 
}

/**
 * 
 * @param pickupObject
 * @param ped
 */
export function attachPortablePickupToPed(pickupObject: number, ped: number): void {
	return _in(0x8dc39368, 0xbdd57755, pickupObject, ped); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function breakObjectFragmentChild(p0: number, p1: any, p2: boolean): void {
	return _in(0xe7e4c198, 0xb0185900, p0, p1, p2); 
}

/**
 * 
 * @param garageHash
 * @param isNetwork
 */
export function ClearGarageArea(garageHash: number, isNetwork: boolean): void {
	return _in(0xda051942, 0x60cdcdf9, _ch(garageHash), isNetwork); 
}

/**
 * ```
 * Spawns one or more money pickups.
 * x: The X-component of the world position to spawn the money pickups at.
 * y: The Y-component of the world position to spawn the money pickups at.
 * z: The Z-component of the world position to spawn the money pickups at.
 * value: The combined value of the pickups (in dollars).
 * amount: The number of pickups to spawn.
 * model: The model to use, or 0 for default money model.
 * Example:
 * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
 * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
 * ==============================================
 * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
 * ```
 * @param x
 * @param y
 * @param z
 * @param value
 * @param amount
 * @param model
 */
export function createMoneyPickups(x: number, y: number, z: number, value: number, amount: number, model: number): void {
	return _in(0x0589b5e7, 0x91ce9b2b, _fv(x), _fv(y), _fv(z), value, amount, _ch(model)); 
}

/**
 * 
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
export function createNonNetworkedPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number {
	return _in(0x125494b9, 0x8a21aaf7, _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ro); 
}

/**
 * 
 * @param garageHash
 * @param vehicles
 * @param peds
 * @param objects
 * @param isNetwork
 */
export function clearObjectsInsideGarage(garageHash: number, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void {
	return _in(0x19042851, 0x2b240692, _ch(garageHash), vehicles, peds, objects, isNetwork); 
}

/**
 * Creates an ambient pickup given the hash. Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param flags
 * @param value
 * @param modelHash
 * @param returnHandle
 * @param p8
 */
export function createAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, returnHandle: boolean, p8: boolean): number {
	return _in(0x673966a0, 0xc0fd7171, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), flags, value, _ch(modelHash), returnHandle, p8, _r); 
}

/**
 * Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.
 * This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param netMissionEntity
 * @param doorFlag
 * @return A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created.
 */
export function createObject(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, netMissionEntity: boolean, doorFlag: boolean): number {
	return _in(0x509d5878, 0xeb39e842, _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, netMissionEntity, doorFlag, _r, _ro); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param flags
 * @param value
 * @param modelHash
 * @param p7
 * @param p8
 */
export function CreateNonNetworkedAmbientPickup(pickupHash: any, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: any, p7: boolean, p8: boolean): any {
	return _in(0x9c937642, 0x23e29c50, pickupHash, _fv(posX), _fv(posY), _fv(posZ), flags, value, modelHash, p7, p8, _r, _ri); 
}

/**
 * ```
 * Pickup hashes: pastebin.com/8EuSv2r1
 * flags:
 * 8 (1 << 3): place on ground
 * 512 (1 << 9): spin around
 * ```
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param flag
 * @param amount
 * @param p9
 * @param p10
 * @param modelHash
 */
export function createPickupRotate(pickupHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, flag: number, amount: number, p9: any, p10: boolean, modelHash: number): number {
	return _in(0x89180472, 0x7e0a98b7, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), flag, amount, p9, p10, _ch(modelHash), _r); 
}

/**
 * Creates an object (prop) with the specified model centered at the specified position.
 * This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param netMissionEntity
 * @param doorFlag
 * @return A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created.
 */
export function createObjectNoOffset(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, netMissionEntity: boolean, doorFlag: boolean): number {
	return _in(0x9a294b21, 0x38abb884, _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, netMissionEntity, doorFlag, _r, _ro); 
}

/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
export function createPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number {
	return _in(0x2eaf1fdb, 0x2fb55698, _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ro); 
}

/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param value
 * @param p6
 * @param modelHash
 */
export function createPickup(pickupHash: number, posX: number, posY: number, posZ: number, p4: number, value: number, p6: boolean, modelHash: number): number {
	return _in(0xfba08c50, 0x3dd5fa58, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), p4, value, p6, _ch(modelHash), _r); 
}

/**
 * ```
 * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
 * ```
 * @param object
 */
export function deleteObject(): void {
	return _in(0x539e0ae3, 0xe6634b9f, _i); 
}

/**
 * 
 * @param pickupObject
 */
export function doesPickupObjectExist(pickupObject: number): boolean {
	return _in(0xd9efb6db, 0xf7daaea3, pickupObject, _r); 
}

/**
 * 
 * @param pickupObject
 */
export function detachPortablePickupFromPed(pickupObject: number): void {
	return _in(0xcf463d1e, 0x9a0aecb1, pickupObject); 
}

/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function doesPickupOfTypeExistInArea(pickupHash: number, x: number, y: number, z: number, radius: number): boolean {
	return _in(0xf9c36251, 0xf6e48e33, _ch(pickupHash), _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * ```
 * Returns true if a destructible object with this handle exists, false otherwise.
 * ```
 * @param object
 */
export function doesRayfireMapObjectExist(object: number): boolean {
	return _in(0x52af537a, 0x0c5b8aad, object, _r); 
}

/**
 * ```
 * p5 is usually 0.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param hash
 * @param p5
 */
export function doesObjectOfTypeExistAtCoords(x: number, y: number, z: number, radius: number, hash: number, p5: boolean): boolean {
	return _in(0xbfa48e2f, 0xf417213f, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(hash), p5, _r); 
}

/**
 * 
 * @param pickup
 */
export function doesPickupExist(pickup: number): boolean {
	return _in(0xafc1ca75, 0xad4074d1, pickup, _r); 
}

/**
 * Hardcoded not to work in multiplayer environments.
 * Native name between `SET_LOCAL_PLAYER_VISIBLE_LOCALLY` & `SET_MAX_WANTED_LEVEL`.
 * 
 * ```
 * OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door unlocked
 * OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door locked
 * ```
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param xRotMult
 * @param yRotMult
 * @param zRotMult
 */
export function DoorControl(modelHash: number, x: number, y: number, z: number, locked: boolean, xRotMult: number, yRotMult: number, zRotMult: number): void {
	return _in(0x9b12f9a2, 0x4fabedb0, _ch(modelHash), _fv(x), _fv(y), _fv(z), locked, _fv(xRotMult), _fv(yRotMult), _fv(zRotMult)); 
}

/**
 * Search radius: 0.5
 * @param x
 * @param y
 * @param z
 * @param modelHash
 * @param doorOutPointer
 */
export function doorSystemFindExistingDoor(x: number, y: number, z: number, modelHash: number): boolean {
	return _in(0x589f80b3, 0x25cc82c5, _fv(x), _fv(y), _fv(z), _ch(modelHash), _i, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param doorHash
 */
export function DoorSystemGetAutomaticDistance(doorHash: number): number {
	return _in(0xe851471a, 0xefc3374f, _ch(doorHash), _r, _rf); 
}

/**
 * 
 * @param doorHash
 */
export function doorSystemGetDoorPendingState(doorHash: number): number {
	return _in(0x4bc28544, 0x78f3a749, _ch(doorHash), _r, _ri); 
}

/**
 * 
 * @param doorHash
 */
export function doorSystemGetIsPhysicsLoaded(doorHash: number): boolean {
	return _in(0xdf97cdd4, 0xfc08fd34, _ch(doorHash), _r); 
}

/**
 * 
 * @param doorHash
 */
export function doorSystemGetDoorState(doorHash: number): number {
	return _in(0x160aa1b3, 0x2f6139b8, _ch(doorHash), _r, _ri); 
}

/**
 * 
 * @param doorHash
 */
export function doorSystemGetOpenRatio(doorHash: number): number {
	return _in(0x65499865, 0xfca6e5ec, _ch(doorHash), _r, _rf); 
}

/**
 * 
 * @param doorHash
 * @param distance
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetAutomaticDistance(doorHash: number, distance: number, requestDoor: boolean, forceUpdate: boolean): void {
	return _in(0x9ba001cb, 0x45cbf627, _ch(doorHash), _fv(distance), requestDoor, forceUpdate); 
}

/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * @param doorHash
 * @param rate
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetAutomaticRate(doorHash: number, rate: number, requestDoor: boolean, forceUpdate: boolean): void {
	return _in(0x03c27e13, 0xb42a0e82, _ch(doorHash), _fv(rate), requestDoor, forceUpdate); 
}

/**
 * Lockstates not applied and CNetObjDoor's not created until [DOOR_SYSTEM_GET_IS_PHYSICS_LOADED](#\_0xDF97CDD4FC08FD34) returns true.
 * 
 * ### Door lock states: (v323)
 * 
 * *   **0**: UNLOCKED
 * *   **1**: LOCKED
 * *   **2**: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
 * *   **3**: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
 * *   **4**: DOORSTATE_FORCE_LOCKED_THIS_FRAME
 * *   **5**: DOORSTATE_FORCE_OPEN_THIS_FRAME
 * *   **6**: DOORSTATE_FORCE_CLOSED_THIS_FRAME
 * @param doorHash
 * @param state
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetDoorState(doorHash: number, state: number, requestDoor: boolean, forceUpdate: boolean): void {
	return _in(0x6bab9442, 0x830c7f53, _ch(doorHash), state, requestDoor, forceUpdate); 
}

/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * @param doorHash
 * @param toggle
 */
export function doorSystemSetHoldOpen(doorHash: number, toggle: boolean): void {
	return _in(0xd9b71952, 0xf78a2640, _ch(doorHash), toggle); 
}

/**
 * ```
 * Sets the ajar angle of a door.
 * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
 * ```
 * @param doorHash
 * @param ajar
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetOpenRatio(doorHash: number, ajar: number, requestDoor: boolean, forceUpdate: boolean): void {
	return _in(0xb6e6fba9, 0x5c7324ac, _ch(doorHash), _fv(ajar), requestDoor, forceUpdate); 
}

/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * @param doorHash
 * @param removed
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetSpringRemoved(doorHash: number, removed: boolean, requestDoor: boolean, forceUpdate: boolean): void {
	return _in(0xc485e07e, 0x4f0b7958, _ch(doorHash), removed, requestDoor, forceUpdate); 
}

/**
 * 
 * @param garageHash
 * @param toggle
 */
export function enableSavingInGarage(garageHash: number, toggle: boolean): void {
	return _in(0xf2e1a713, 0x3dd356a6, _ch(garageHash), toggle); 
}

/**
 * 
 * @param p0
 */
export function ForcePickupRegenerate(p0: any): void {
	return _in(0x758a5c1b, 0x3b1e1990, p0); 
}

/**
 * ```
 * Has 8 params in the latest patches.
 * isMission - if true doesn't return mission objects
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param isMission
 * @param p6
 * @param p7
 */
export function getClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, isMission: boolean, p6: boolean, p7: boolean): number {
	return _in(0xe143fa22, 0x49364369, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), isMission, p6, p7, _r, _ro); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function getObjectFragmentDamageHealth(p0: any, p1: boolean): number {
	return _in(0xb6fbfd07, 0x9b8d0596, p0, p1, _r, _rf); 
}

/**
 * 
 * @param object
 */
export function GetObjectTextureVariation(object: number): number {
	return _in(0xe84eb937, 0x29c5f36a, object, _r, _ri); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param outPosition
 * @param outRotation
 * @param rotationOrder
 */
export function getCoordsAndRotationOfClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, rotationOrder: number): any {
	return _in(0x163f8b58, 0x6bc95f2a, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), _v(outPosition), _v(outRotation), rotationOrder, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param entity
 * @param p1
 */
export function GetIsArenaPropPhysicsDisabled(entity: number, p1: any): boolean {
	return _in(0x43c677f1, 0xe1158005, entity, p1, _r); 
}

/**
 * 
 * @param pickup
 */
export function getPickupCoords(pickup: number): Vector3 {
	return _in(0x225b8b35, 0xc88029b3, pickup, _r, _rv); 
}

/**
 * 
 * @param xPos
 * @param yPos
 * @param zPos
 * @param heading
 * @param xOffset
 * @param yOffset
 * @param zOffset
 */
export function GetObjectOffsetFromCoords(xPos: number, yPos: number, zPos: number, heading: number, xOffset: number, yOffset: number, zOffset: number): Vector3 {
	return _in(0x163e252d, 0xe035a133, _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), _fv(xOffset), _fv(yOffset), _fv(zOffset), _r, _rv); 
}

/**
 * 
 */
export function GetPickupGenerationRangeMultiplier(): number {
	return _in(0xb3eca65c, 0x7317f174, _r, _rf); 
}

/**
 * ```
 * returns pickup hash.
 * ```
 * @param pickupHash
 */
export function GetPickupHash(pickupHash: number): number {
	return _in(0x5eaad83f, 0x8cfb4575, _ch(pickupHash), _r); 
}

/**
 * 
 * @param pickup
 */
export function getPickupObject(pickup: number): number {
	return _in(0x5099bc55, 0x630b25ae, pickup, _r, _ro); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param weapon
 */
export function GetPickupHashFromWeapon(weapon: number): number {
	return _in(0xd6429a01, 0x6084f1a5, _ch(weapon), _r); 
}

/**
 * ```
 * `object`: The des-object handle to get the animation progress from.
 * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
 * ```
 * @param object
 * @return A float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
 */
export function getRayfireMapObjectAnimPhase(object: number): number {
	return _in(0x260ee4fd, 0xbdf4db01, object, _r, _rf); 
}

/**
 * ```
 * Example:
 * OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param name
 */
export function getRayfireMapObject(x: number, y: number, z: number, radius: number, name: string): number {
	return _in(0xb48fced8, 0x98292e52, _fv(x), _fv(y), _fv(z), _fv(radius), _ts(name), _r, _ro); 
}

/**
 * ```
 * locked is 0 if no door is found
 * locked is 0 if door is unlocked
 * locked is 1 if door is found and unlocked.
 * -------------
 * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
 * ```
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 */
export function getStateOfClosestDoorOfType(type: number, x: number, y: number, z: number): void {
	return _in(0xedc1a5b8, 0x4aef33ff, _ch(type), _fv(x), _fv(y), _fv(z), _i, _f); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export function getSafePickupCoords(x: number, y: number, z: number, p3: number, p4: number): Vector3 {
	return _in(0x6e16bc25, 0x03ff1ff0, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(p4), _r, _rv); 
}

/**
 * 
 * @param pickupHash
 */
export function getWeaponTypeFromPickupType(pickupHash: number): number {
	return _in(0x08f96ca6, 0xc551ad51, _ch(pickupHash), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param modelHash
 * @param p5
 */
export function hasClosestObjectOfTypeBeenBroken(p0: number, p1: number, p2: number, p3: number, modelHash: number, p5: any): boolean {
	return _in(0x761b0e69, 0xac4d007e, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _ch(modelHash), p5, _r); 
}

/**
 * See [`SET_STATE_OF_RAYFIRE_MAP_OBJECT`](#\_0x5C29F698D404C5E1) to see the different states
 * 
 * Get a destructible object's state. Substract 1 to get the real state. For example, if the object just spawned (state 2), the native will return 3.
 * @param object
 */
export function getStateOfRayfireMapObject(object: number): number {
	return _in(0x899ba936, 0x634a322e, object, _r, _ri); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
export function hasClosestObjectOfTypeBeenCompletelyDestroyed(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): boolean {
	return _in(0x46494a24, 0x75701343, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param object
 */
export function hasObjectBeenBroken(object: number): boolean {
	return _in(0x8abfb70c, 0x49cc43e2, object, _r); 
}

/**
 * 
 * @param pickup
 */
export function hasPickupBeenCollected(pickup: number): boolean {
	return _in(0x80ec48e6, 0x679313f9, pickup, _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param range
 * @param p4
 */
export function isAnyObjectNearPoint(x: number, y: number, z: number, range: number, p4: boolean): boolean {
	return _in(0x397dc58f, 0xf00298d1, _fv(x), _fv(y), _fv(z), _fv(range), p4, _r); 
}

/**
 * 
 * @param doorHash
 */
export function isDoorClosed(doorHash: number): boolean {
	return _in(0xc531ee8a, 0x1145a149, _ch(doorHash), _r); 
}

/**
 * 
 * @param pickup
 * @param toggle
 */
export function hidePortablePickupWhenDetached(pickup: number, toggle: boolean): void {
	return _in(0x86745825, 0x1d47ccb2, pickup, toggle); 
}

/**
 * 
 * @param garageHash
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function isAnyEntityEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean {
	return _in(0x673ed815, 0xd6e323b7, _ch(garageHash), p1, p2, p3, p4, _r); 
}

/**
 * 
 * @param garageHash
 * @param p1
 * @param p2
 */
export function isGarageEmpty(garageHash: number, p1: boolean, p2: number): boolean {
	return _in(0x90e47239, 0xea1980b8, _ch(garageHash), p1, p2, _r); 
}

/**
 * ```
 * if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))
 * {
 * OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
 * }
 * ```
 * @param doorHash
 */
export function isDoorRegisteredWithSystem(doorHash: number): boolean {
	return _in(0xc153c43e, 0xa202c8c1, _ch(doorHash), _r); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param object
 */
export function isObjectAPortablePickup(object: number): boolean {
	return _in(0x0378c085, 0x04160d0d, object, _r); 
}

/**
 * 
 * @param object
 */
export function isObjectAPickup(object: number): boolean {
	return _in(0xfc481c64, 0x1ebbd27d, object, _r); 
}

/**
 * 
 * @param objectHash
 * @param x
 * @param y
 * @param z
 * @param range
 */
export function isObjectNearPoint(objectHash: number, x: number, y: number, z: number, range: number): boolean {
	return _in(0x8c90fe4b, 0x381ba60a, _ch(objectHash), _fv(x), _fv(y), _fv(z), _fv(range), _r); 
}

/**
 * 
 * @param garageHash
 * @param entity
 * @param p2
 * @param p3
 */
export function isObjectEntirelyInsideGarage(garageHash: number, entity: number, p2: number, p3: number): boolean {
	return _in(0x372ef669, 0x9146a1e4, _ch(garageHash), entity, _fv(p2), p3, _r); 
}

/**
 * 
 * @param garageHash
 * @param entity
 * @param p2
 */
export function isObjectPartiallyInsideGarage(garageHash: number, entity: number, p2: number): boolean {
	return _in(0xf0eed5a6, 0xbc7b237a, _ch(garageHash), entity, p2, _r); 
}

/**
 * 
 * @param object
 */
export function isObjectVisible(object: number): boolean {
	return _in(0x8b32ace6, 0x326a7546, object, _r); 
}

/**
 * 
 * @param object
 */
export function isPickupWeaponObjectValid(object: number): boolean {
	return _in(0x11d1e53a, 0x726891fe, object, _r); 
}

/**
 * 
 * @param garageHash
 * @param player
 * @param p2
 * @param p3
 */
export function isPlayerEntirelyInsideGarage(garageHash: number, player: number, p2: number, p3: number): boolean {
	return _in(0x024a60de, 0xb0ea69f0, _ch(garageHash), player, _fv(p2), p3, _r); 
}

/**
 * 
 * @param garageHash
 * @param player
 * @param p2
 */
export function isPlayerPartiallyInsideGarage(garageHash: number, player: number, p2: number): boolean {
	return _in(0x1761dc5d, 0x8471cbaa, _ch(garageHash), player, p2, _r); 
}

/**
 * ```
 * is this like setting is as no longer needed?
 * ```
 * @param object
 */
export function MarkObjectForDeletion(object: number): void {
	return _in(0xadbe4809, 0xf19f927a, object); 
}

/**
 * An **angled area** is an X-Z oriented rectangle with three parameters:
 * 
 * 1.  **origin**: the mid-point along a base edge of the rectangle;
 * 2.  **extent**: the mid-point of opposite base edge on the other Z;
 * 3.  **width**: the length of the base edge; (named derived from logging strings `CNetworkRoadNodeWorldStateData`).
 * 
 * The oriented rectangle can then be derived from the direction of the two points (`norm(origin - extent)`), its orthonormal, and the width, e.g:
 * 
 * 1.  [golf_mp](https://i.imgur.com/JhsQAK9.png)
 * 2.  [am_taxi](https://i.imgur.com/TJWCZaT.jpg)
 * @param xPos
 * @param yPos
 * @param zPos
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p10
 * @param includez
 */
export function isPointInAngledArea(xPos: number, yPos: number, zPos: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p10: boolean, includez: boolean): boolean {
	return _in(0x2a70bae8, 0x883e4c81, _fv(xPos), _fv(yPos), _fv(zPos), _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p10, includez, _r); 
}

/**
 * 
 * @param object
 */
export function placeObjectOnGroundProperly(object: number): boolean {
	return _in(0x58a850ea, 0xee20faa3, object, _r); 
}

/**
 * 
 * @param object
 * @param p1
 * @param p2
 */
export function preventCollectionOfPortablePickup(object: number, p1: boolean, p2: boolean): void {
	return _in(0x92aefb5f, 0x6e294023, object, p1, p2); 
}

/**
 * 
 * @param object
 */
export function PlaceObjectOnGroundProperly2(object: number): boolean {
	return _in(0xd76eeef7, 0x46057fd6, object, _r); 
}

/**
 * 
 * @param object
 */
export function removeObjectHighDetailModel(object: number): void {
	return _in(0x4a39db43, 0xe47cf3aa, object); 
}

/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * @param pickupHash
 */
export function removeAllPickupsOfType(pickupHash: number): void {
	return _in(0x27f9d613, 0x092159cf, _ch(pickupHash)); 
}

/**
 * 
 * @param pickup
 */
export function removePickup(pickup: number): void {
	return _in(0x3288d8ac, 0xaecd2ab2, pickup); 
}

/**
 * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
 * 
 * Only its NetObj removed and flag `*(v2 + 192) |= 8u` (1604 retail) toggled.
 * @param doorHash
 */
export function removeDoorFromSystem(doorHash: number): void {
	return _in(0x464d8e14, 0x27156fe4, _ch(doorHash)); 
}

/**
 * ```
 * draws circular marker at pos
 * -1 = none
 * 0 = red
 * 1 = green
 * 2 = blue
 * 3 = green larger
 * 4 = nothing
 * 5 = green small
 * ```
 * @param x
 * @param y
 * @param z
 * @param colorIndex
 */
export function renderFakePickupGlow(x: number, y: number, z: number, colorIndex: number): void {
	return _in(0x3430676b, 0x11cdf21d, _fv(x), _fv(y), _fv(z), colorIndex); 
}

/**
 * 
 * @param object
 * @param toggle
 */
export function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object: number, toggle: boolean): void {
	return _in(0x406137f8, 0xef90eaf5, object, toggle); 
}

/**
 * ```
 * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
 * ```
 * 
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param entity
 * @param toggle
 * @param p2
 */
export function SetEnableArenaPropPhysics(entity: number, toggle: boolean, p2: number): void {
	return _in(0x91102444, 0x2f4898f0, entity, toggle, p2); 
}

/**
 * ```
 * Requires a component_at_*_flsh to be attached to the weapon object
 * ```
 * @param object
 * @param toggle
 */
export function SetCreateWeaponObjectLightSource(object: number, toggle: boolean): void {
	return _in(0xbce59537, 0x1a5fbaaf, object, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param entity
 * @param toggle
 * @param p2
 * @param ped
 */
export function SetEnableArenaPropPhysicsOnPed(entity: number, toggle: boolean, p2: number, ped: number): void {
	return _in(0xb20834a7, 0xdd3d8896, entity, toggle, p2, ped); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param p3
 */
export function setForceObjectThisFrame(x: number, y: number, z: number, p3: number): void {
	return _in(0xf5380819, 0x86e49e9d, _fv(x), _fv(y), _fv(z), _fv(p3)); 
}

/**
 * 
 * @param p0
 */
export function setLocalPlayerCanCollectPortablePickups(p0: boolean): void {
	return _in(0x78857fc6, 0x5cadb909, p0); 
}

/**
 * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task: CTaskVehicleGoToPointWithAvoidanceAutomobile.
 * Tested on vehicles that were created by the vehicle generators.
 * @param object
 * @param toggle
 */
export function setObjectForceVehiclesToAvoid(object: number, toggle: boolean): void {
	return _in(0x77f33f2c, 0xcf64b3aa, object, toggle); 
}

/**
 * ```
 * Maximum amount of pickup models that can be disallowed is 30.
 * SET_LOCAL_PLAYER_*
 * ```
 * @param modelHash
 * @param toggle
 */
export function SetLocalPlayerCanUsePickupsWithThisModel(modelHash: number, toggle: boolean): void {
	return _in(0x88eaec61, 0x7cd26926, _ch(modelHash), toggle); 
}

/**
 * 
 * @param modelHash
 * @param p1
 */
export function setMaxNumPortablePickupsCarriedByPlayer(modelHash: number, p1: number): void {
	return _in(0x0bf3b3bd, 0x47d79c08, _ch(modelHash), p1); 
}

/**
 * Sets color of embedded light source.
 * Only appears in am_mp_nightclub.c for the nightclub dancefloor.
 * 
 * Not sure what p1 does, seems to only ever be '1' in scripts.
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param object
 * @param p1
 * @param r
 * @param g
 * @param b
 */
export function SetObjectLightColor(object: number, p1: boolean, r: number, g: number, b: number): any {
	return _in(0x5f048334, 0xb4a4e774, object, p1, r, g, b, _r, _ri); 
}

/**
 * 
 * @param object
 * @param duration
 */
export function SetObjectStuntPropDuration(object: number, duration: number): void {
	return _in(0xdf6ca033, 0x0f2e737b, object, _fv(duration)); 
}

/**
 * ```
 * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
 * ```
 * @param object
 * @param toggle
 */
export function setObjectAllowLowLodBuoyancy(object: number, toggle: boolean): void {
	return _in(0x4d89d607, 0xcb3dd1d2, object, toggle); 
}

/**
 * 
 * @param object
 * @param targettable
 */
export function setObjectTargettable(object: number, targettable: boolean): void {
	return _in(0x8a739169, 0x0f5afd81, object, targettable); 
}

/**
 * ```
 * rage::phArchetypeDamp
 * p9: Some phBoundGeometry margin value, limited to (0.0, 0.1) exclusive.
 * ```
 * @param object
 * @param mass
 * @param gravityFactor
 * @param linearC
 * @param linearV
 * @param linearV2
 * @param angularC
 * @param angularV
 * @param angularV2
 * @param p9
 * @param maxAngSpeed
 * @param buoyancyFactor
 */
export function setObjectPhysicsParams(object: number, mass: number, gravityFactor: number, linearC: number, linearV: number, linearV2: number, angularC: number, angularV: number, angularV2: number, p9: number, maxAngSpeed: number, buoyancyFactor: number): void {
	return _in(0xf6df6e90, 0xde7df90f, object, _fv(mass), _fv(gravityFactor), _fv(linearC), _fv(linearV), _fv(linearV2), _fv(angularC), _fv(angularV), _fv(angularV2), _fv(p9), _fv(maxAngSpeed), _fv(buoyancyFactor)); 
}

/**
 * ```
 * enum ObjectPaintVariants
 * {
 * Pacific = 0,
 * Azure = 1,
 * Nautical = 2,
 * Continental = 3,
 * Battleship = 4,
 * Intrepid = 5,
 * Uniform = 6,
 * Classico = 7,
 * Mediterranean = 8,
 * Command = 9,
 * Mariner = 10,
 * Ruby = 11,
 * Vintage = 12,
 * Pristine = 13,
 * Merchant = 14,
 * Voyager = 15
 * };
 * ```
 * @param object
 * @param textureVariation
 */
export function SetObjectTextureVariation(object: number, textureVariation: number): void {
	return _in(0x971da005, 0x5324d033, object, textureVariation); 
}

/**
 * 
 * @param pickup
 * @param duration
 */
export function setPickupRegenerationTime(pickup: number, duration: number): void {
	return _in(0x78015c9b, 0x4b3ecc9d, pickup, duration); 
}

/**
 * Sets the intensity of Speed Boost and Slow Down props.
 * 
 * The corresponding values for Speed Boosts in the Creator are:\
 * Weak: `15`\
 * Normal: `25`\
 * Strong: `35`\
 * Extra Strong: `45`\
 * Ultra Strong: `100`
 * 
 * For Slow Downs:\
 * Weak: `44`\
 * Normal: `30`\
 * Strong: `16`
 * @param object
 * @param intensity
 */
export function SetObjectStuntPropSpeedup(object: number, intensity: number): void {
	return _in(0x96ee0eba, 0x0163df80, object, intensity); 
}

/**
 * 
 * @param multiplier
 */
export function setPickupGenerationRangeMultiplier(multiplier: number): void {
	return _in(0x318516e0, 0x2de3ece2, _fv(multiplier)); 
}

/**
 * ```
 * Hardcoded to not work in multiplayer.
 * Used to lock/unlock doors to interior areas of the game.
 * (Possible) Door Types:
 * pastebin.com/9S2m3qA4
 * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
 * Locked means that the heading is locked.
 * p6 is always 0.
 * 225 door types, model names and coords found in stripclub.c4:
 * pastebin.com/gywnbzsH
 * get door info: pastebin.com/i14rbekD
 * ```
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 * @param p6
 */
export function setStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked: boolean, heading: number, p6: boolean): void {
	return _in(0xf82d8f19, 0x26a02c3d, _ch(type), _fv(x), _fv(y), _fv(z), locked, _fv(heading), p6); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function SetPickupHiddenWhenUncollectable(p0: any, p1: any): void {
	return _in(0x3ed2b83a, 0xb2e82799, p0, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function SetPickupUncollectable(p0: any, p1: any): void {
	return _in(0x1c1b69fa, 0xe509ba97, p0, p1); 
}

/**
 * 
 * @param object
 * @param p1
 * @param p2
 */
export function setTeamPickupObject(object: number, p1: any, p2: boolean): void {
	return _in(0x53e0df1a, 0x2a3cf0ca, object, p1, p2); 
}

/**
 * ```
 * Defines the state of a destructible object.
 * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
 * State 2 == object just spawned
 * State 4 == Beginning of the animation
 * State 6 == Start animation
 * State 9 == End of the animation
 * ```
 * @param object
 * @param state
 */
export function setStateOfRayfireMapObject(object: number, state: number): void {
	return _in(0x5c29f698, 0xd404c5e1, object, state); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param textureVariation
 */
export function SetTextureVariationOfClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, textureVariation: number): boolean {
	return _in(0xf12e3303, 0x4d887f66, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), textureVariation, _r); 
}

/**
 * ```
 * Disabling/enabling a player from getting pickups. From the scripts:
 * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
 * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
 * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
 * SET_PLAYER_*
 * ```
 * @param player
 * @param pickupHash
 * @param toggle
 */
export function ToggleUsePickupsForPlayer(player: number, pickupHash: number, toggle: boolean): void {
	return _in(0x616093ec, 0x6b139dd9, player, _ch(pickupHash), toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param value
 */
export function SetUnkGlobalBoolRelatedToDamage(value: boolean): void {
	return _in(0xabdabf4e, 0x1edecbfa, value); 
}

/**
 * 
 * @param object
 */
export function trackObjectVisibility(object: number): void {
	return _in(0xb252bc03, 0x6b525623, object); 
}

/**
 * ```
 * Returns true if the object has finished moving.
 * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
 * See also: https://gtagmodding.com/opcode-database/opcode/034E/
 * Has to be looped until it returns true.
 * ```
 * @param object
 * @param toX
 * @param toY
 * @param toZ
 * @param speedX
 * @param speedY
 * @param speedZ
 * @param collision
 */
export function slideObject(object: number, toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean {
	return _in(0x2fdff410, 0x7b8c1147, object, _fv(toX), _fv(toY), _fv(toZ), _fv(speedX), _fv(speedY), _fv(speedZ), collision, _r); 
}

/**
 * 
 * @param padIndex
 */
export function disableAllControlActions(padIndex: number): void {
	return _in(0x5f4b6931, 0x816e599b, padIndex); 
}

/**
 * ```
 * padIndex:
 * 0 - PLAYER_CONTROL
 * 1 - Unknown
 * 2 - FRONTEND_CONTROL
 * ```
 * @param padIndex
 */
export function enableAllControlActions(padIndex: number): void {
	return _in(0xa5ffe9b0, 0x5f199de7, padIndex); 
}

/**
 * [Control values and meaning](https://docs.fivem.net/docs/game-references/controls/#controls)
 * 
 * Example: `CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true)` disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame.
 * Control group 1 and 0 gives the same results as 2. Same results for all players.
 * @param padIndex
 * @param control
 * @param disable
 */
export function disableControlAction(padIndex: number, control: number, disable: boolean): void {
	return _in(0xfe99b66d, 0x079cf6bc, padIndex, control, disable); 
}

/**
 * ```
 * Returns profile setting 17.
 * ```
 */
export function getAllowMovementWhileZoomed(): boolean {
	return _in(0xfc859e23, 0x74407556, _r); 
}

/**
 * 
 * @param padIndex
 * @param control
 * @return Returns the value of [`GET_CONTROL_VALUE`](#\_0xD95E79E8686D2C27) normalized, i.e. a real number value between -1.0 and 1.0
 */
export function getControlNormal(padIndex: number, control: number): number {
	return _in(0xec3c9b8d, 0x5327b563, padIndex, control, _r, _rf); 
}

/**
 * 
 * @param padIndex
 */
export function DisableInputGroup(padIndex: number): void {
	return _in(0x7f472403, 0x5fdca1dd, padIndex); 
}

/**
 * ```
 * control values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Control.cs
 * and
 * https://docs.fivem.net/game-references/controls/
 * 0, 1 and 2 used in the scripts.
 * Control values from the decompiled scripts:
 * 0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,
 * 37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100
 * ,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19
 * 0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2
 * 20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,
 * 261,262,263,264,286,287,288,289,337,338,339,340,341,342,343
 * INPUTGROUP_MOVE
 * INPUTGROUP_LOOK
 * INPUTGROUP_WHEEL
 * INPUTGROUP_CELLPHONE_NAVIGATE
 * INPUTGROUP_CELLPHONE_NAVIGATE_UD
 * INPUTGROUP_CELLPHONE_NAVIGATE_LR
 * INPUTGROUP_FRONTEND_DPAD_ALL
 * INPUTGROUP_FRONTEND_DPAD_UD
 * INPUTGROUP_FRONTEND_DPAD_LR
 * INPUTGROUP_FRONTEND_LSTICK_ALL
 * INPUTGROUP_FRONTEND_RSTICK_ALL
 * INPUTGROUP_FRONTEND_GENERIC_UD
 * INPUTGROUP_FRONTEND_GENERIC_LR
 * INPUTGROUP_FRONTEND_GENERIC_ALL
 * INPUTGROUP_FRONTEND_BUMPERS
 * INPUTGROUP_FRONTEND_TRIGGERS
 * INPUTGROUP_FRONTEND_STICKS
 * INPUTGROUP_SCRIPT_DPAD_ALL
 * INPUTGROUP_SCRIPT_DPAD_UD
 * INPUTGROUP_SCRIPT_DPAD_LR
 * INPUTGROUP_SCRIPT_LSTICK_ALL
 * INPUTGROUP_SCRIPT_RSTICK_ALL
 * INPUTGROUP_SCRIPT_BUMPERS
 * INPUTGROUP_SCRIPT_TRIGGERS
 * INPUTGROUP_WEAPON_WHEEL_CYCLE
 * INPUTGROUP_FLY
 * INPUTGROUP_SUB
 * INPUTGROUP_VEH_MOVE_ALL
 * INPUTGROUP_CURSOR
 * INPUTGROUP_CURSOR_SCROLL
 * INPUTGROUP_SNIPER_ZOOM_SECONDARY
 * INPUTGROUP_VEH_HYDRAULICS_CONTROL
 * Took those in IDA Pro.Not sure in which order they go
 * ```
 * @param padIndex
 * @param control
 * @param enable
 */
export function enableControlAction(padIndex: number, control: number, enable: boolean): void {
	return _in(0x35122025, 0x5d64c155, padIndex, control, enable); 
}

/**
 * ```
 * Seems to return values between -1 and 1 for controls like gas and steering.
 * ```
 * @param padIndex
 * @param control
 */
export function getControlUnboundNormal(padIndex: number, control: number): number {
	return _in(0x5b84d09c, 0xec5209c5, padIndex, control, _r, _rf); 
}

/**
 * ```
 * formerly called _GET_CONTROL_ACTION_NAME incorrectly
 * p2 appears to always be true.
 * p2 is unused variable in function.
 * EG:
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1)  -- [[INPUT_FRONTEND_ACCEPT (e.g. Enter button)]] 
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1)  -- [[INPUT_FRONTEND_CANCEL (e.g. ESC button)]] 
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1)  -- [[INPUT_CONTEXT (e.g. E button)]] 
 * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
 * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
 * ```
 * @param padIndex
 * @param control
 * @param p2
 */
export function getControlInstructionalButton(padIndex: number, control: number, p2: boolean): string {
	return _in(0x0499d7b0, 0x9fc9b407, padIndex, control, p2, _r, _s); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function getDisabledControlNormal(padIndex: number, control: number): number {
	return _in(0x11e65974, 0xa982637c, padIndex, control, _r, _rf); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function getDisabledControlUnboundNormal(padIndex: number, control: number): number {
	return _in(0x4f8a26a8, 0x90fd62fb, padIndex, control, _r, _rf); 
}

/**
 * 
 * @param padIndex
 * @param controlGroup
 * @param p2
 */
export function getControlGroupInstructionalButton(padIndex: number, controlGroup: number, p2: boolean): string {
	return _in(0x80c2fd58, 0xd720c801, padIndex, controlGroup, p2, _r, _s); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function getControlValue(padIndex: number, control: number): number {
	return _in(0xd95e79e8, 0x686d2c27, padIndex, control, _r, _ri); 
}

/**
 * ```
 * Returns profile setting 225.
 * ```
 */
export function getIsUsingAlternateDriveby(): boolean {
	return _in(0x0f70731b, 0xaccfbb96, _r); 
}

/**
 * Returns the local player's targeting mode. See [`SET_PLAYER_TARGETING_MODE`](#\_0xB1906895227793F3).
 */
export function getLocalPlayerAimState(): number {
	return _in(0xbb41afbb, 0xbc0a0287, _r, _ri); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function isControlEnabled(padIndex: number, control: number): boolean {
	return _in(0x1cea6bfd, 0xf248e5d9, padIndex, control, _r); 
}

/**
 * Returns whether a control was newly pressed since the last check.
 * @param padIndex
 * @param control
 * @return True if the control was pressed.
 */
export function isControlJustPressed(padIndex: number, control: number): boolean {
	return _in(0x58041710, 0x1ddb492f, padIndex, control, _r); 
}

/**
 * ```
 * Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.
 * ```
 */
export function GetLocalPlayerAimState2(): number {
	return _in(0x59b9a7af, 0x4c95133c, _r, _ri); 
}

/**
 * Returns whether a control is currently *not* pressed.
 * @param padIndex
 * @param control
 * @return True if the control is not pressed.
 */
export function isControlReleased(padIndex: number, control: number): boolean {
	return _in(0x648ee3e7, 0xf38877dd, padIndex, control, _r); 
}

/**
 * ```
 * The number of milliseconds since last padIndex registered pressed
 * ```
 * @param padIndex
 */
export function GetTimeSinceLastInput(padIndex: number): number {
	return _in(0xd7d22f55, 0x92aed8ba, padIndex, _r, _ri); 
}

/**
 * Returns whether a control was newly released since the last check.
 * @param padIndex
 * @param control
 * @return True if the control was recently released.
 */
export function isControlJustReleased(padIndex: number, control: number): boolean {
	return _in(0x50f94025, 0x9d3841e6, padIndex, control, _r); 
}

/**
 * Returns whether a control is currently pressed.
 * @param padIndex
 * @param control
 * @return True if the control was pressed.
 */
export function isControlPressed(padIndex: number, control: number): boolean {
	return _in(0xf3a21bcd, 0x95725a4a, padIndex, control, _r); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function isDisabledControlJustPressed(padIndex: number, control: number): boolean {
	return _in(0x91aef906, 0xbca88877, padIndex, control, _r); 
}

/**
 * 
 */
export function isLookInverted(): boolean {
	return _in(0x77b61253, 0x1280010d, _r); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function isDisabledControlJustReleased(padIndex: number, control: number): boolean {
	return _in(0x305c8dcd, 0x79da8b0f, padIndex, control, _r); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function IsDisabledControlReleased(padIndex: number, control: number): boolean {
	return _in(0xfb6c4072, 0xe9a32e92, padIndex, control, _r); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function isDisabledControlPressed(padIndex: number, control: number): boolean {
	return _in(0xe2587f8c, 0xbbd87b1d, padIndex, control, _r); 
}

/**
 * 
 * @param padIndex
 */
export function IsUsingKeyboard2(padIndex: number): boolean {
	return _in(0x13337b38, 0xdb572509, padIndex, _r); 
}

/**
 * 
 * @param padIndex
 */
export function IsUsingKeyboard(padIndex: number): boolean {
	return _in(0xa571d467, 0x27e2b718, padIndex, _r); 
}

/**
 * 
 * @param padIndex
 * @param red
 * @param green
 * @param blue
 */
export function SetControlLightEffectColor(padIndex: number, red: number, green: number, blue: number): void {
	return _in(0x8290252f, 0xff36acb5, padIndex, red, green, blue); 
}

/**
 * ```
 * S*
 * ```
 */
export function ResetInputMappingScheme(): void {
	return _in(0x643ed62d, 0x5ea3bebd); 
}

/**
 * 
 * @param padIndex
 * @param control
 */
export function setInputExclusive(padIndex: number, control: number): void {
	return _in(0xede476e5, 0xee29edb1, padIndex, control); 
}

/**
 * This is for simulating player input.
 * @param padIndex
 * @param control
 * @param amount
 */
export function SetControlNormal(padIndex: number, control: number, amount: number): boolean {
	return _in(0xe8a25867, 0xfba3b05e, padIndex, control, _fv(amount), _r); 
}

/**
 * 
 * @param toggle
 */
export function setPlayerpadShakesWhenControllerDisabled(toggle: boolean): void {
	return _in(0x798fdeb5, 0xb1575088, toggle); 
}

/**
 * 
 * @param x
 * @param y
 */
export function SetCursorLocation(x: number, y: number): boolean {
	return _in(0xfc695459, 0xd4d0e219, _fv(x), _fv(y), _r); 
}

/**
 * 
 * @param padIndex
 */
export function stopPadShake(padIndex: number): void {
	return _in(0x38c16a30, 0x5e8cdc8d, padIndex); 
}

/**
 * ```
 * p0 always seems to be 0
 * duration in milliseconds
 * frequency should range from about 10 (slow vibration) to 255 (very fast)
 * example:
 * SET_PAD_SHAKE(0, 100, 200);
 * ```
 * @param padIndex
 * @param duration
 * @param frequency
 */
export function setPadShake(padIndex: number, duration: number, frequency: number): void {
	return _in(0x48b3886c, 0x1358d0d5, padIndex, duration, frequency); 
}

/**
 * ```
 * Used in carsteal3 script with p0 = "Carsteal4_spycar".
 * S*
 * ```
 * @param name
 */
export function SwitchToInputMappingScheme(name: string): boolean {
	return _in(0x3d42b925, 0x63939375, _ts(name), _r); 
}

/**
 * ```
 * Same as 0x3D42B92563939375
 * 
 * S*
 * ```
 * @param name
 */
export function SwitchToInputMappingScheme2(name: string): boolean {
	return _in(0x4683149e, 0xd1dde7a1, _ts(name), _r); 
}

/**
 * Creates a navmesh blocking object, vehicles will avoid driving through this area.
 * 
 * Only 32 blocking objects may exist at a given time and must be manually managed. See [`REMOVE_NAVMESH_BLOCKING_OBJECT`](#\_0x46399A7895957C0E) and [onResourceStop](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/)
 * @param x
 * @param y
 * @param z
 * @param width
 * @param length
 * @param height
 * @param heading
 * @param p7
 * @param p8
 */
export function addNavmeshBlockingObject(x: number, y: number, z: number, width: number, length: number, height: number, heading: number, p7: boolean, p8: any): any {
	return _in(0xfcd5c8e0, 0x6e502f5a, _fv(x), _fv(y), _fv(z), _fv(width), _fv(length), _fv(height), _fv(heading), p7, p8, _r, _ri); 
}

/**
 * 
 */
export function areAllNavmeshRegionsLoaded(): boolean {
	return _in(0x8415d95b, 0x194a3aea, _r); 
}

/**
 * Calculates the travel distance between a set of points.
 * Doesn't seem to correlate with distance on gps sometimes.
 * 
 * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
	return _in(0xadd95c70, 0x05c4a197, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf); 
}

/**
 * 
 * @param x
 * @param y
 * @param radius
 */
export function addNavmeshRequiredRegion(x: number, y: number, radius: number): void {
	return _in(0x387ead7e, 0xe42f6685, _fv(x), _fv(y), _fv(radius)); 
}

/**
 * Clears a disabled GPS route area from a certain index previously set using [`SET_GPS_DISABLED_ZONE_AT_INDEX`](#\_0xD0BC1C6FB18EE154).
 * @param index
 */
export function clearGpsDisabledZoneAtIndex(index: number): void {
	return _in(0x2801d001, 0x2266df07, index); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function areNodesLoadedForArea(x1: number, y1: number, x2: number, y2: number): boolean {
	return _in(0xf7b79a50, 0xb905a30d, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r); 
}

/**
 * ```
 * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
 * distToNxJunction seems to be the distance in metres * 10.0f
 * direction:
 * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
 * 1 = Route is being calculated or the player is going in the wrong direction
 * 2 = Please Proceed the Highlighted Route
 * 3 = In (distToNxJunction) Turn Left
 * 4 = In (distToNxJunction) Turn Right
 * 5 = In (distToNxJunction) Keep Straight
 * 6 = In (distToNxJunction) Turn Sharply To The Left
 * 7 = In (distToNxJunction) Turn Sharply To The Right
 * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
 * return value set to 0 always
 * ```
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param direction
 * @param vehicle
 * @param distToNxJunction
 */
export function generateDirectionsToCoord(x: number, y: number, z: number, p3: boolean): number {
	return _in(0xf90125f1, 0xf79ecdf8, _fv(x), _fv(y), _fv(z), p3, _i, _f, _f, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function disableNavmeshInArea(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void {
	return _in(0x4c8872d8, 0xcdbe1b8b, p0, p1, p2, p3, p4, p5, p6); 
}

/**
 * ```
 * p1 seems to be always 1.0f in the scripts
 * ```
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function getClosestRoad(x: number, y: number, z: number, p3: number, p4: number, p10: boolean): any {
	return _in(0x132f52bb, 0xa570fe92, _fv(x), _fv(y), _fv(z), _fv(p3), p4, _v(p5), _v(p6), _i, _i, _f, p10, _r, _ri); 
}

/**
 * ```
 * FYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.
 * ----------
 * Vector3 nodePos;
 * GET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...)
 * p4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road.
 * p5, p6 are always the same:
 * 0x40400000 (3.0), 0
 * p5 can also be 100.0 and p6 can be 2.5:
 * PATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5)
 * Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.
 * The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.
 * Starting at 2, every fourth node is under the map, always same coords.
 * Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).
 * gtaforums.com/topic/843561-pathfind-node-types
 * ```
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param nodeType
 * @param p5
 * @param p6
 */
export function getClosestVehicleNode(x: number, y: number, z: number, nodeType: number, p5: number, p6: number): boolean {
	return _in(0x240a1869, 0x0ae96513, _fv(x), _fv(y), _fv(z), _v(outPosition), nodeType, _fv(p5), _fv(p6), _r); 
}

/**
 * 
 * @param p0
 */
export function doesNavmeshBlockingObjectExist(p0: any): boolean {
	return _in(0x0eaeb0db, 0x4b132399, p0, _r); 
}

/**
 * ```
 * Get the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0
 * ```
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param unknown1
 * @param unknown2
 */
export function getClosestMajorVehicleNode(x: number, y: number, z: number, unknown1: number, unknown2: number): boolean {
	return _in(0x2eabe3b0, 0x6f58c1be, _fv(x), _fv(y), _fv(z), _v(outPosition), _fv(unknown1), unknown2, _r); 
}

/**
 * 
 */
export function getGpsBlipRouteFound(): boolean {
	return _in(0x869daacb, 0xbe9fa006, _r); 
}

/**
 * p3 can be 0, 1 or 2.
 * @param result
 * @param p1
 * @param p2
 * @param p3
 */
export function getGpsWaypointRouteEnd(p1: boolean, p2: number, p3: number): boolean {
	return _in(0xf3162836, 0xc28f9da5, _v(result), p1, _fv(p2), p3, _r); 
}

/**
 * ```
 * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
 * p5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road.
 * p6 is always 3.0
 * p7 is always 0.
 * Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.
 * The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.
 * Starting at 2, every fourth node is under the map, always same coords.
 * Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).
 * gtaforums.com/topic/843561-pathfind-node-types
 * Example of usage, moving vehicle to closest path/road:
 * Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
 * Vector3 closestVehicleNodeCoords;
 * float roadHeading;
 * PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);
 * ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
 * ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
 * VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
 * ------------------------------------------------------------------
 * C# Example (ins1de) : pastebin.com/fxtMWAHD
 * ```
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param outHeading
 * @param nodeType
 * @param p6
 * @param p7
 */
export function getClosestVehicleNodeWithHeading(x: number, y: number, z: number, nodeType: number, p6: number, p7: number): boolean {
	return _in(0xff071fb7, 0x98b803b0, _fv(x), _fv(y), _fv(z), _v(outPosition), _f, nodeType, _fv(p6), p7, _r); 
}

/**
 * ```
 * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
 * ```
 * @param x
 * @param y
 */
export function GetHeightmapBottomZForPosition(x: number, y: number): number {
	return _in(0x336511a3, 0x4f2e5185, _fv(x), _fv(y), _r, _rf); 
}

/**
 * 
 */
export function getGpsBlipRouteLength(): number {
	return _in(0xbbb45c3c, 0xf5c8aa85, _r, _ri); 
}

/**
 * ```
 * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
 * ```
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function GetHeightmapBottomZForArea(x1: number, y1: number, x2: number, y2: number): number {
	return _in(0x3599d741, 0xc9ac6310, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf); 
}

/**
 * ```
 * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
 * ```
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function GetHeightmapTopZForArea(x1: number, y1: number, x2: number, y2: number): number {
	return _in(0x8abe8608, 0x576d9ce3, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf); 
}

/**
 * ```
 * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
 * ```
 * @param x
 * @param y
 */
export function GetHeightmapTopZForPosition(x: number, y: number): number {
	return _in(0x29c24bfb, 0xed8ab8fb, _fv(x), _fv(y), _r, _rf); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param nthClosest
 * @param outPosition
 * @param unknown1
 * @param unknown2
 * @param unknown3
 */
export function getNthClosestVehicleNode(x: number, y: number, z: number, nthClosest: number, unknown1: any, unknown2: any, unknown3: any): boolean {
	return _in(0xe50e5241, 0x6ccf948b, _fv(x), _fv(y), _fv(z), nthClosest, _v(outPosition), unknown1, unknown2, unknown3, _r); 
}

/**
 * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
 * 
 * ```
 * NativeDB Removed Parameter 1: int index
 * ```
 * @param index
 * @return The disabled zone index
 */
export function getNextGpsDisabledZoneIndex(index: number): number {
	return _in(0xd3a6a0ef, 0x48823a8c, index, _r, _ri); 
}

/**
 * ```
 * Returns the id.
 * ```
 * @param x
 * @param y
 * @param z
 * @param nth
 * @param nodetype
 * @param p5
 * @param p6
 */
export function getNthClosestVehicleNodeId(x: number, y: number, z: number, nth: number, nodetype: number, p5: number, p6: number): number {
	return _in(0x22d7275a, 0x79fe8215, _fv(x), _fv(y), _fv(z), nth, nodetype, _fv(p5), _fv(p6), _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function getNumNavmeshesExistingInArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number {
	return _in(0x01708e8d, 0xd3ff8c65, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _r, _ri); 
}

/**
 * ```
 * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
 * p10 always equal 0x40400000
 * p11 always equal 0
 * ```
 * @param x
 * @param y
 * @param z
 * @param desiredX
 * @param desiredY
 * @param desiredZ
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param nodetype
 * @param p10
 * @param p11
 */
export function getNthClosestVehicleNodeFavourDirection(x: number, y: number, z: number, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, nodetype: number, p10: number, p11: any): boolean {
	return _in(0x45905be8, 0x654ae067, _fv(x), _fv(y), _fv(z), _fv(desiredX), _fv(desiredY), _fv(desiredZ), nthClosest, _v(outPosition), _f, nodetype, _fv(p10), p11, _r); 
}

/**
 * ```
 * Get the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)
 * ```
 * @param x
 * @param y
 * @param z
 * @param nthClosest
 * @param outPosition
 * @param heading
 * @param unknown1
 * @param unknown2
 * @param unknown3
 * @param unknown4
 */
export function getNthClosestVehicleNodeWithHeading(x: number, y: number, z: number, nthClosest: number, unknown2: number, unknown3: number, unknown4: number): boolean {
	return _in(0x80ca6a8b, 0x6c094cc4, _fv(x), _fv(y), _fv(z), nthClosest, _v(outPosition), _f, _i, unknown2, _fv(unknown3), _fv(unknown4), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param outPosition
 */
export function GetPointOnRoadSide(x: number, y: number, z: number, p3: number): boolean {
	return _in(0x16f46fb1, 0x8c8009e4, _fv(x), _fv(y), _fv(z), p3, _v(outPosition), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param p6
 * @param p7
 * @param p8
 */
export function getNthClosestVehicleNodeIdWithHeading(x: number, y: number, z: number, nthClosest: number, p6: any, p7: number, p8: number): number {
	return _in(0x6448050e, 0x9c2a7207, _fv(x), _fv(y), _fv(z), nthClosest, _v(outPosition), _f, p6, _fv(p7), _fv(p8), _r, _ri); 
}

/**
 * ```
 * Flags are:
 * 1 = 1 = B02_IsFootpath
 * 2 = 4 = !B15_InteractionUnk
 * 4 = 0x20 = !B14_IsInterior
 * 8 = 0x40 = !B07_IsWater
 * 16 = 0x200 = B17_IsFlatGround
 * When onGround == true outPosition is a position located on the nearest pavement.
 * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
 * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
 * 16 works for me, 0 crashed the script.
 * ```
 * @param x
 * @param y
 * @param z
 * @param onGround
 * @param outPosition
 * @param flags
 */
export function getSafeCoordForPed(x: number, y: number, z: number, onGround: boolean, flags: number): boolean {
	return _in(0xb61c8e87, 0x8a4199ca, _fv(x), _fv(y), _fv(z), onGround, _v(outPosition), flags, _r); 
}

/**
 * ```
 * Determines the name of the street which is the closest to the given coordinates.
 * x,y,z - the coordinates of the street
 * streetName - returns a hash to the name of the street the coords are on
 * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
 * Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
 * ```
 * @param x
 * @param y
 * @param z
 * @param streetName
 * @param crossingRoad
 */
export function getStreetNameAtCoord(x: number, y: number, z: number): void {
	return _in(0x2eb41072, 0xb4c1e4c0, _fv(x), _fv(y), _fv(z), _i, _i); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param outPosition
 * @param nodeId
 */
export function getRandomVehicleNode(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean): boolean {
	return _in(0x93e0db84, 0x40b73a7d, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, _v(outPosition), _i, _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param outPosition
 */
export function getRoadBoundaryUsingHeading(x: number, y: number, z: number, heading: number): boolean {
	return _in(0xa0f8a751, 0x7a273c05, _fv(x), _fv(y), _fv(z), _fv(heading), _v(outPosition), _r); 
}

/**
 * ```
 * Gets the density and flags of the closest node to the specified position.
 * Density is a value between 0 and 15, indicating how busy the road is.
 * Flags is a bit field.
 * ```
 * @param x
 * @param y
 * @param z
 * @param density
 * @param flags
 */
export function getVehicleNodeProperties(x: number, y: number, z: number): boolean {
	return _in(0x0568566a, 0xcbb5dedc, _fv(x), _fv(y), _fv(z), _i, _i, _r); 
}

/**
 * ```
 * Returns false for nodes that aren't used for GPS routes.
 * Example:
 * Nodes in Fort Zancudo and LSIA are false
 * ```
 * @param nodeID
 */
export function getVehicleNodeIsGpsAllowed(nodeID: number): boolean {
	return _in(0xa2ae5c47, 0x8b96e3b6, nodeID, _r); 
}

/**
 * ```
 * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
 * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0xf813c7e6, 0x3f9062a5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * ```
 * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
 * Normal roads where plenty of Peds spawn will return false
 * ```
 * @param nodeID
 */
export function getVehicleNodeIsSwitchedOff(nodeID: number): boolean {
	return _in(0x4f5070aa, 0x58f69279, nodeID, _r); 
}

/**
 * ```
 * IS_*
 * ```
 */
export function IsNavmeshRequiredRegionOwnedByAnyThread(): boolean {
	return _in(0x705a8440, 0x02b39dc0, _r); 
}

/**
 * ```
 * Calling this with an invalid node id, will crash the game.
 * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
 * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
 * ```
 * @param nodeId
 * @param outPosition
 */
export function getVehicleNodePosition(nodeId: number): void {
	return _in(0x703123e5, 0xe7d429c2, nodeId, _v(outPosition)); 
}

/**
 * ```
 * Returns true if the id is non zero.
 * ```
 * @param vehicleNodeId
 */
export function isVehicleNodeIdValid(vehicleNodeId: number): boolean {
	return _in(0x1eaf30fc, 0xfbf5af74, vehicleNodeId, _r); 
}

/**
 * ```
 * Gets a value indicating whether the specified position is on a road.
 * The vehicle parameter is not implemented (ignored).
 * ```
 * @param x
 * @param y
 * @param z
 * @param vehicle
 */
export function isPointOnRoad(x: number, y: number, z: number, vehicle: number): boolean {
	return _in(0x125bf4ab, 0xfc536b09, _fv(x), _fv(y), _fv(z), vehicle, _r); 
}

/**
 * ```
 * This native has been removed in v1180.
 * ```
 * @param keepInMemory
 */
export function loadAllPathNodes(keepInMemory: boolean): boolean {
	return _in(0x80e4a6ed, 0xdb0be8d9, keepInMemory, _r); 
}

/**
 * ```
 * Used internally for long range tasks
 * ```
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function RequestPathsPreferAccurateBoundingstruct(x1: number, y1: number, x2: number, y2: number): boolean {
	return _in(0x07fb139b, 0x592fa687, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r); 
}

/**
 * ```
 * Toggles a global boolean, name is probably a hash collision but describes its functionality.
 * ```
 * @param toggle
 */
export function SetAllPathsCacheBoundingstruct(toggle: boolean): void {
	return _in(0x228e5c6a, 0xd4d74bfd, toggle); 
}

/**
 * 
 * @param p0
 */
export function removeNavmeshBlockingObject(p0: any): void {
	return _in(0x46399a78, 0x95957c0e, p0); 
}

/**
 * 
 */
export function removeNavmeshRequiredRegions(): void {
	return _in(0x916f0a3c, 0xdec3445e); 
}

/**
 * 
 * @param multiplier
 */
export function setAmbientPedRangeMultiplierThisFrame(multiplier: number): void {
	return _in(0x0b919e1f, 0xb47cc4e0, _fv(multiplier)); 
}

/**
 * 
 * @param toggle
 */
export function setIgnoreNoGpsFlag(toggle: boolean): void {
	return _in(0x72751156, 0xe7678833, toggle); 
}

/**
 * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
 * 
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param type
 */
export function SetAiGlobalPathNodesType(type: number): void {
	return _in(0xf74b1ffa, 0x4a15fbea, type); 
}

/**
 * ```
 * See: SET_BLIP_ROUTE
 * ```
 * @param toggle
 */
export function SetIgnoreSecondaryRouteNodes(toggle: boolean): void {
	return _in(0x1fc289a0, 0xc3ff470f, toggle); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function setGpsDisabledZone(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
	return _in(0xdc20483c, 0xd3dd5201, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2)); 
}

/**
 * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
 * 
 * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
 * 
 * **Setting a waypoint at the same coordinate:**
 * 
 * Disabled Zone: <https://i.imgur.com/P9VUuxM.png>
 * 
 * Enabled Zone (normal): <https://i.imgur.com/BPi24aw.png>
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param index
 */
export function setGpsDisabledZoneAtIndex(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, index: number): void {
	return _in(0xd0bc1c6f, 0xb18ee154, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), index); 
}

/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function setPedPathsBackToOriginal(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0xe04b48f2, 0xcc926253, p0, p1, p2, p3, p4, p5); 
}

/**
 * ```
 * missing a last parameter int p6
 * ```
 * 
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function setRoadsBackToOriginal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void {
	return _in(0x1ee7063b, 0x80ffc77c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5)); 
}

/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param unknown
 */
export function setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unknown: boolean): void {
	return _in(0x34f060f4, 0xbf92e018, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), unknown); 
}

/**
 * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
 * 
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param unknown1
 * @param unknown2
 * @param unknown3
 */
export function setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void {
	return _in(0x1a5aa120, 0x8af5db59, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), unknown1, unknown2, unknown3); 
}

/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * 
 * ```
 * NativeDB Added Parameter 8: Any p7
 * 
 * bool p7 - always 1
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): void {
	return _in(0x0027501b, 0x9f3b407e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function updateNavmeshBlockingObject(p0: any, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: any): void {
	return _in(0x109e9937, 0x3f290687, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8); 
}

/**
 * When this is set to false, all nodes in the area get disabled.
 * 
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
 * 
 * If it's true,
 * 
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param nodeEnabled
 * @param unknown2
 */
export function setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, nodeEnabled: boolean, unknown2: boolean): void {
	return _in(0xbf1a602b, 0x5ba52fee, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), nodeEnabled, unknown2); 
}

/**
 * 
 * @param ped
 * @param collection
 * @param overlay
 */
export function addPedDecorationFromHashesInCorona(ped: number, collection: number, overlay: number): void {
	return _in(0x5619bfa0, 0x7cfd7833, ped, _ch(collection), _ch(overlay)); 
}

/**
 * ```
 * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
 * ```
 * @param ped
 * @param amount
 */
export function addArmourToPed(ped: number, amount: number): void {
	return _in(0x5ba652a0, 0xcd14df2f, ped, amount); 
}

/**
 * ```
 * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
 * ```
 * @param name
 * @param groupHash
 */
export function addRelationshipGroup(name: string): any {
	return _in(0xf372bc22, 0xfcb88606, _ts(name), _i, _r, _ri); 
}

/**
 * ```
 * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
 * collection - PedDecorationCollection filename hash
 * overlay - Item name hash
 * Example:
 * Entry inside "mpbeach_overlays.xml" -
 * <Item>
 * <uvPos x="0.500000" y="0.500000" />
 * <scale x="0.600000" y="0.500000" />
 * <rotation value="0.000000" />
 * <nameHash>FM_Hair_Fuzz</nameHash>
 * <txdHash>mp_hair_fuzz</txdHash>
 * <txtHash>mp_hair_fuzz</txtHash>
 * <zone>ZONE_HEAD</zone>
 * <type>TYPE_TATTOO</type>
 * <faction>FM</faction>
 * <garment>All</garment>
 * <gender>GENDER_DONTCARE</gender>
 * <award />
 * <awardLevel />
 * </Item>
 * Code:
 * PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
 * ```
 * @param ped
 * @param collection
 * @param overlay
 */
export function addPedDecorationFromHashes(ped: number, collection: number, overlay: number): void {
	return _in(0x5f5d1665, 0xe352a839, ped, _ch(collection), _ch(overlay)); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function addScenarioBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean): number {
	return _in(0x1b5c85c6, 0x12e5256e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, p8, p9, _r, _ri); 
}

/**
 * ```
 * damages a ped with the given amount
 * ----
 * armorFirst means it will damage/lower the armor first before damaging the player.
 * setting damageAmount to a negative amount will cause the player or the armor (depending on armorFirst) to be healed by damageAmount instead.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param ped
 * @param damageAmount
 * @param armorFirst
 */
export function applyDamageToPed(ped: number, damageAmount: number, armorFirst: boolean): void {
	return _in(0x697157ce, 0xd63f18d4, ped, damageAmount, armorFirst); 
}

/**
 * ```
 * Found one occurence in re_crashrescue.c4
 * PED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, "wound_sheet");
 * ```
 * @param ped
 * @param boneIndex
 * @param xRot
 * @param yRot
 * @param zRot
 * @param woundType
 */
export function applyPedBlood(ped: number, boneIndex: number, xRot: number, yRot: number, zRot: number, woundType: string): void {
	return _in(0x83f7e01c, 0x7b769a26, ped, boneIndex, _fv(xRot), _fv(yRot), _fv(zRot), _ts(woundType)); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function applyPedBloodByZone(ped: number, p1: any, p2: number, p3: number): void {
	return _in(0x3311e47b, 0x91edcbbc, ped, p1, _fv(p2), _fv(p3), _i); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function applyPedBloodDamageByZone(ped: number, p1: any, p2: number, p3: number, p4: any): void {
	return _in(0x816f6981, 0xc60bf53b, ped, p1, _fv(p2), _fv(p3), p4); 
}

/**
 * ```
 * Damage Packs:
 * "SCR_TrevorTreeBang"
 * "HOSPITAL_0"
 * "HOSPITAL_1"
 * "HOSPITAL_2"
 * "HOSPITAL_3"
 * "HOSPITAL_4"
 * "HOSPITAL_5"
 * "HOSPITAL_6"
 * "HOSPITAL_7"
 * "HOSPITAL_8"
 * "HOSPITAL_9"
 * "SCR_Dumpster"
 * "BigHitByVehicle"
 * "SCR_Finale_Michael_Face"
 * "SCR_Franklin_finb"
 * "SCR_Finale_Michael"
 * "SCR_Franklin_finb2"
 * "Explosion_Med"
 * "SCR_Torture"
 * "SCR_TracySplash"
 * "Skin_Melee_0"
 * Additional damage packs:
 * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
 * ```
 * @param ped
 * @param damagePack
 * @param damage
 * @param mult
 */
export function applyPedDamagePack(ped: number, damagePack: string, damage: number, mult: number): void {
	return _in(0x46df9187, 0x88cb093f, ped, _ts(damagePack), _fv(damage), _fv(mult)); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function applyPedBloodSpecific(ped: number, p1: any, p2: number, p3: number, p4: number, p5: number, p6: any, p7: number): void {
	return _in(0xef0d582c, 0xbf2d9b0f, ped, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7), _i); 
}

/**
 * ```
 * enum eDamageZone
 * {
 * DZ_Torso = 0,
 * DZ_Head,
 * DZ_LeftArm,
 * DZ_RightArm,
 * DZ_LeftLeg,
 * DZ_RightLeg,
 * };
 * Decal Names:
 * scar
 * blushing
 * cs_flush_anger
 * cs_flush_anger_face
 * bruise
 * bruise_large
 * herpes
 * ArmorBullet
 * basic_dirt_cloth
 * basic_dirt_skin
 * cs_trev1_dirt
 * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
 * ```
 * @param ped
 * @param damageZone
 * @param xOffset
 * @param yOffset
 * @param heading
 * @param scale
 * @param alpha
 * @param variation
 * @param fadeIn
 * @param decalName
 */
export function applyPedDamageDecal(ped: number, damageZone: number, xOffset: number, yOffset: number, heading: number, scale: number, alpha: number, variation: number, fadeIn: boolean, decalName: string): void {
	return _in(0x397c38aa, 0x7b4a5f83, ped, damageZone, _fv(xOffset), _fv(yOffset), _fv(heading), _fv(scale), _fv(alpha), variation, fadeIn, _ts(decalName)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function BlockPedDeadBodyShockingEvents(ped: number, toggle: boolean): void {
	return _in(0xe43a13c9, 0xe4cccbcf, ped, toggle); 
}

/**
 * 
 * @param sceneID
 * @param entity
 * @param boneIndex
 */
export function attachSynchronizedSceneToEntity(sceneID: number, entity: number, boneIndex: number): void {
	return _in(0x272e4723, 0xb56a3b96, sceneID, entity, boneIndex); 
}

/**
 * 
 */
export function canCreateRandomCops(): boolean {
	return _in(0x5ee2caff, 0x7f17770d, _r); 
}

/**
 * 
 */
export function canCreateRandomDriver(): boolean {
	return _in(0xb8eb95e5, 0xb4e56978, _r); 
}

/**
 * 
 * @param ped
 */
export function canKnockPedOffVehicle(ped: number): boolean {
	return _in(0x51ac07a4, 0x4d4f5b8a, ped, _r); 
}

/**
 * 
 * @param ped
 * @param target
 */
export function canPedInCombatSeeTarget(ped: number, target: number): boolean {
	return _in(0xead42de3, 0x610d0721, ped, target, _r); 
}

/**
 * 
 */
export function canCreateRandomBikeRider(): boolean {
	return _in(0xeaceeda8, 0x1751915c, _r); 
}

/**
 * 
 * @param unk
 */
export function canCreateRandomPed(unk: boolean): boolean {
	return _in(0x3e8349c0, 0x8e4b82e4, unk, _r); 
}

/**
 * 
 * @param ped
 */
export function clearAllPedProps(ped: number): void {
	return _in(0xcd8a7537, 0xa9b52f06, ped); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 */
export function ClearFacialClipsetOverride(ped: number): void {
	return _in(0x637822dc, 0x2afeebf8, ped); 
}

/**
 * ```
 * Prevents the ped from going limp.
 * [Example: Can prevent peds from falling when standing on moving vehicles.]
 * ```
 * @param ped
 */
export function canPedRagdoll(ped: number): boolean {
	return _in(0x128f79ed, 0xcece4fd5, ped, _r); 
}

/**
 * 
 * @param ped1
 * @param ped2
 */
export function canPedSeeHatedPed(ped1: number, ped2: number): boolean {
	return _in(0x6cd5a433, 0x374d4cfb, ped1, ped2, _r); 
}

/**
 * 
 * @param ped
 */
export function clearAllPedVehicleForcedSeatUsage(ped: number): void {
	return _in(0xe6ca85e7, 0x259ce16b, ped); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function clearPedAlternateWalkAnim(ped: number, p1: number): void {
	return _in(0x8844bbfc, 0xe30aa9e9, ped, _fv(p1)); 
}

/**
 * 
 * @param ped
 */
export function clearFacialIdleAnimOverride(ped: number): void {
	return _in(0x726256cc, 0x1eeb182f, ped); 
}

/**
 * Clears the blood on a ped.
 * @param ped
 */
export function clearPedBloodDamage(ped: number): void {
	return _in(0x8fe22675, 0xa5a45817, ped); 
}

/**
 * ```
 * Somehow related to changing ped's clothes.
 * ```
 * @param ped
 * @param p1
 */
export function clearPedBloodDamageByZone(ped: number, p1: number): void {
	return _in(0x56e3b78c, 0x5408d9f4, ped, p1); 
}

/**
 * 
 * @param ped
 * @param stance
 * @param p2
 */
export function clearPedAlternateMovementAnim(ped: number, stance: number, p2: number): void {
	return _in(0xd8d19675, 0xed5fbdce, ped, stance, _fv(p2)); 
}

/**
 * 
 * @param ped
 */
export function clearPedDecorations(ped: number): void {
	return _in(0x0e5173c1, 0x63976e38, ped); 
}

/**
 * ```
 * CLEAR_PED_*
 * ```
 * @param ped
 */
export function ClearPedCoverClipsetOverride(ped: number): void {
	return _in(0xc79196dc, 0xb36f6121, ped); 
}

/**
 * 
 * @param ped
 */
export function clearPedDriveByClipsetOverride(ped: number): void {
	return _in(0x4afe3690, 0xd7e0b5ac, ped); 
}

/**
 * 
 * @param ped
 */
export function clearPedLastDamageBone(ped: number): void {
	return _in(0x8ef6b7ac, 0x68e2f01b, ped); 
}

/**
 * ```
 * p1: from 0 to 5 in the b617d scripts.
 * p2: "blushing" and "ALL" found in the b617d scripts.
 * ```
 * @param ped
 * @param p1
 * @param p2
 */
export function clearPedDamageDecalByZone(ped: number, p1: number, p2: string): void {
	return _in(0x523c79ae, 0xefcc4a2a, ped, p1, _ts(p2)); 
}

/**
 * 
 * @param ped
 */
export function clearPedDecorationsLeaveScars(ped: number): void {
	return _in(0xe3b27e70, 0xceab9f0c, ped); 
}

/**
 * 
 * @param ped
 */
export function clearPedEnvDirt(ped: number): void {
	return _in(0x6585d955, 0xa68452a5, ped); 
}

/**
 * 
 * @param ped
 */
export function clearPedParachutePackVariation(ped: number): void {
	return _in(0x1280804f, 0x7cfd2d6c, ped); 
}

/**
 * 
 */
export function clearPedNonCreationArea(): void {
	return _in(0x2e052080, 0x86ba0651); 
}

/**
 * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
 * @param ped
 */
export function clearPedScubaGearVariation(ped: number): void {
	return _in(0xb50eb4cc, 0xb29704ac, ped); 
}

/**
 * 
 * @param ped
 * @param propId
 */
export function clearPedProp(ped: number, propId: number): void {
	return _in(0x0943e5b8, 0xe078e76e, ped, propId); 
}

/**
 * ```
 * There seem to be 26 flags
 * ```
 * @param ped
 * @param flags
 */
export function clearRagdollBlockingFlags(ped: number, flags: number): void {
	return _in(0xd86d101f, 0xcfd00a4b, ped, flags); 
}

/**
 * ```
 * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
 * ```
 * @param ped
 */
export function clearPedWetness(ped: number): void {
	return _in(0x9c720776, 0xdaa43e7e, ped); 
}

/**
 * 
 * @param ped
 */
export function clearPedStoredHatProp(ped: number): void {
	return _in(0x687c0b59, 0x4907d2e8, ped); 
}

/**
 * ```
 * Clears the relationship between two groups. This should be called twice (once for each group).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 * Example:
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * ```
 * @param relationship
 * @param group1
 * @param group2
 */
export function clearRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void {
	return _in(0x5e29243f, 0xb56fc6d4, relationship, _ch(group1), _ch(group2)); 
}

/**
 * Creates a copy of the passed ped, optionally setting it as local and/or shallow-copying the head blend data.
 * @param ped
 * @param isNetwork
 * @param bScriptHostPed
 * @param copyHeadBlendFlag
 * @return A new ped handle representing the ped's copy.
 */
export function clonePed(ped: number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): number {
	return _in(0xef29a163, 0x37facadb, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, _r); 
}

/**
 * Used one time in fmmc_launcher.c instead of CLONE_PED because ?
 * @param ped
 * @param heading
 * @param isNetwork
 * @param bScriptHostPed
 * @param p4
 */
export function ClonePedEx(ped: number, heading: number, isNetwork: boolean, bScriptHostPed: boolean, p4: any): number {
	return _in(0x668fd40b, 0xcba5de48, ped, _fv(heading), isNetwork, bScriptHostPed, p4, _r); 
}

/**
 * ```
 * Copies ped's components and props to targetPed.
 * ```
 * @param ped
 * @param targetPed
 */
export function clonePedToTarget(ped: number, targetPed: number): void {
	return _in(0xe952d643, 0x1689ad9a, ped, targetPed); 
}

/**
 * ```
 * Creates a new ped group.
 * Groups can contain up to 8 peds.
 * The parameter is unused.
 * Returns a handle to the created group, or 0 if a group couldn't be created.
 * ```
 * @param unused
 */
export function createGroup(unused: number): number {
	return _in(0x90370ebe, 0x0fee1a3d, unused, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param targetPed
 * @param p2
 */
export function ClonePedToTargetEx(ped: number, targetPed: number, p2: any): void {
	return _in(0x148b08c2, 0xd2acb884, ped, targetPed, p2); 
}

/**
 * ```
 * Creates a new NaturalMotion message.
 * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
 * messageId: The ID of the NaturalMotion message.
 * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
 * ```
 * @param startImmediately
 * @param messageId
 */
export function createNmMessage(startImmediately: boolean, messageId: number): void {
	return _in(0x418ef2a1, 0xbce56685, startImmediately, messageId); 
}

/**
 * Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.
 * This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already
 * (e.g. using REQUEST_MODEL).
 * @param pedType
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostPed
 * @return A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created.
 */
export function createPed(pedType: number, modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostPed: boolean): number {
	return _in(0xd49f9b09, 0x55c367de, pedType, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostPed, _r); 
}

/**
 * 
 * @param vehicle
 * @param pedType
 * @param modelHash
 * @param seat
 * @param isNetwork
 * @param bScriptHostPed
 */
export function createPedInsideVehicle(vehicle: number, pedType: number, modelHash: number, seat: number, isNetwork: boolean, bScriptHostPed: boolean): number {
	return _in(0x7dd95987, 0x4c1fd534, vehicle, pedType, _ch(modelHash), seat, isNetwork, bScriptHostPed, _r); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 */
export function createParachuteBagObject(ped: number, p1: boolean, p2: boolean): number {
	return _in(0x8c4f3bf2, 0x3b6237db, ped, p1, p2, _r, _ro); 
}

/**
 * ```
 * vb.net
 * Dim ped_handle As Integer
 * With Game.Player.Character
 * Dim pos As Vector3 = .Position + .ForwardVector * 3
 * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
 * End With
 * Creates a Ped at the specified location, returns the Ped Handle.
 * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
 * ```
 * @param posX
 * @param posY
 * @param posZ
 */
export function createRandomPed(posX: number, posY: number, posZ: number): number {
	return _in(0xb4ac7d0c, 0xf06bfe8f, _fv(posX), _fv(posY), _fv(posZ), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param object
 */
export function CreateSynchronizedScene2(x: number, y: number, z: number, radius: number, object: number): number {
	return _in(0x62ec273d, 0x00187dca, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(object), _r, _ri); 
}

/**
 * ```
 * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
 * ```
 * @param ped
 */
export function deletePed(): void {
	return _in(0x9614299d, 0xcb53e54b, _i); 
}

/**
 * ```
 * p6 always 2 (but it doesnt seem to matter...)
 * roll and pitch 0
 * yaw to Ped.rotation
 * ```
 * @param x
 * @param y
 * @param z
 * @param roll
 * @param pitch
 * @param yaw
 * @param p6
 */
export function createSynchronizedScene(x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p6: number): number {
	return _in(0x8c18e0f9, 0x080add73, _fv(x), _fv(y), _fv(z), _fv(roll), _fv(pitch), _fv(yaw), p6, _r, _ri); 
}

/**
 * 
 * @param sceneID
 */
export function detachSynchronizedScene(sceneID: number): void {
	return _in(0x6d38f1f0, 0x4cbb37ea, sceneID); 
}

/**
 * 
 * @param ped
 */
export function disablePedHeatscaleOverride(ped: number): void {
	return _in(0x600048c6, 0x0d5c2c51, ped); 
}

/**
 * 
 * @param vehicle
 * @param returnHandle
 */
export function createRandomPedAsDriver(vehicle: number, returnHandle: boolean): number {
	return _in(0x9b62392b, 0x474f44a0, vehicle, returnHandle, _r); 
}

/**
 * 
 * @param ped
 */
export function disableHeadBlendPaletteColor(ped: number): void {
	return _in(0xa21c1185, 0x53bbdf02, ped); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function DoesScenarioBlockingAreaExist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0x8a24b067, 0xd175a7bd, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * 
 * @param scene
 */
export function DisposeSynchronizedScene(scene: number): void {
	return _in(0xcd9cc7e2, 0x00a52a6f, scene); 
}

/**
 * Applies lethal damage (FLT_MAX) to the `SKEL_Head` bone of the specified ped using the weapon passed, leading to the
 * ped's untimely demise.
 * 
 * The naming of the native is a legacy leftover (formerly EXPLODE_CHAR_HEAD in GTA3) as in the early 3D GTA games, lethal
 * damage to a ped head would 'explode' it.
 * @param ped
 * @param weaponHash
 */
export function explodePedHead(ped: number, weaponHash: number): void {
	return _in(0x2d05ced3, 0xa38d0f3a, ped, _ch(weaponHash)); 
}

/**
 * 
 * @param groupId
 */
export function doesGroupExist(groupId: number): boolean {
	return _in(0x7c6b0c22, 0xf9f40bbe, groupId, _r); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 */
export function forcePedAiAndAnimationUpdate(ped: number, p1: boolean, p2: boolean): void {
	return _in(0x22084380, 0x12482a1a, ped, p1, p2); 
}

/**
 * 
 * @param groupHash
 */
export function DoesRelationshipGroupExist(groupHash: number): boolean {
	return _in(0xcc6e3b6b, 0xb69501f1, _ch(groupHash), _r); 
}

/**
 * 
 * @param ped
 */
export function dropAmbientProp(ped: number): void {
	return _in(0xaff4710e, 0x2a0a6c12, ped); 
}

/**
 * ```
 * Some motionstate hashes are
 * 0xec17e58 (standing idle), 0xbac0f10b (nothing?), 0x3f67c6af (aiming with pistol 2-h), 0x422d7a25 (stealth), 0xbd8817db, 0x916e828c
 * and those for the strings
 * "motionstate_idle", "motionstate_walk", "motionstate_run", "motionstate_actionmode_idle", and "motionstate_actionmode_walk".
 * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.
 * [31/03/2017] ins1de :
 * enum MotionState
 * {
 * StopRunning = -530524,
 * StopWalking = -668482597,
 * Idle = 247561816, // 1, 1, 0
 * Idl2 = -1871534317,
 * SkyDive =-1161760501, // 0, 1, 0
 * Stealth = 1110276645,
 * Sprint = -1115154469,
 * Swim = -1855028596,
 * Unknown1 = 1063765679,
 * Unknown2 = -633298724,
 * }
 * ```
 * @param ped
 * @param motionStateHash
 * @param p2
 * @param p3
 * @param p4
 */
export function forcePedMotionState(ped: number, motionStateHash: number, p2: boolean, p3: number, p4: boolean): boolean {
	return _in(0xf28965d0, 0x4f570dca, ped, _ch(motionStateHash), p2, p3, p4, _r); 
}

/**
 * 
 * @param ped
 */
export function finalizeHeadBlend(ped: number): void {
	return _in(0x4668d804, 0x30d6c299, ped); 
}

/**
 * 
 * @param ped
 */
export function forcePedToOpenParachute(ped: number): void {
	return _in(0x16e42e80, 0x0b472221, ped); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
export function getAnimInitialOffsetPosition(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3 {
	return _in(0xbe22b26d, 0xd764c040, _ts(animDict), _ts(animName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv); 
}

/**
 * ```
 * Gets the closest ped in a radius.
 * Ped Types:
 * Any ped = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * ------------------
 * P4 P5 P7 P8
 * 1  0  x  x  = return nearest walking Ped
 * 1  x  0  x  = return nearest walking Ped
 * x  1  1  x  = return Ped you are using
 * 0  0  x  x  = no effect
 * 0  x  0  x  = no effect
 * x = can be 1 or 0. Does not have any obvious changes.
 * This function does not return ped who is:
 * 1. Standing still
 * 2. Driving
 * 3. Fleeing
 * 4. Attacking
 * This function only work if the ped is:
 * 1. walking normally.
 * 2. waiting to cross a road.
 * Note: PED::GET_PED_NEARBY_PEDS works for more peds.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param outPed
 * @param p7
 * @param p8
 * @param pedType
 */
export function getClosestPed(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p7: boolean, p8: boolean, pedType: number): boolean {
	return _in(0xc33ab876, 0xa77f8164, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, _i, p7, p8, pedType, _r); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
export function getAnimInitialOffsetRotation(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3 {
	return _in(0x4b805e60, 0x46ee9e47, _ts(animDict), _ts(animName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv); 
}

/**
 * ```
 * p0: Ped Handle
 * p1: int i | 0 <= i <= 27
 * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
 * <BlindFireChance value="0.1"/>
 * <WeaponShootRateModifier value="1.0"/>
 * <TimeBetweenBurstsInCover value="1.25"/>
 * <BurstDurationInCover value="2.0"/>
 * <TimeBetweenPeeks value="10.0"/>
 * <WeaponAccuracy value="0.18"/>
 * <FightProficiency value="0.8"/>
 * <StrafeWhenMovingChance value="1.0"/>
 * <WalkWhenStrafingChance value="0.0"/>
 * <AttackWindowDistanceForCover value="55.0"/>
 * <TimeToInvalidateInjuredTarget value="9.0"/>
 * <TriggerChargeTime_Near value="4.0"/>
 * <TriggerChargeTime_Far value="10.0"/>
 * -------------Confirmed by editing combatbehavior.meta:
 * p1:
 * 0=BlindFireChance
 * 1=BurstDurationInCover
 * 3=TimeBetweenBurstsInCover
 * 4=TimeBetweenPeeks
 * 5=StrafeWhenMovingChance
 * 8=WalkWhenStrafingChance
 * 11=AttackWindowDistanceForCover
 * 12=TimeToInvalidateInjuredTarget
 * 16=OptimalCoverDistance
 * ```
 * @param ped
 * @param p1
 */
export function getCombatFloat(ped: number, p1: number): number {
	return _in(0x52dff8a1, 0x0508090a, ped, p1, _r, _rf); 
}

/**
 * 
 * @param ped
 */
export function FreezePedCameraRotation(ped: number): void {
	return _in(0xff287323, 0xb0e2c69a, ped); 
}

/**
 * ```
 * p1 may be a BOOL representing whether or not the group even exists
 * ```
 * @param groupID
 * @param unknown
 * @param sizeInMembers
 */
export function getGroupSize(groupID: number): void {
	return _in(0x8de69fe3, 0x5ca09a45, groupID, _i, _i); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 */
export function getDeadPedPickupCoords(ped: number, p1: number, p2: number): Vector3 {
	return _in(0xcd5003b0, 0x97200f36, ped, _fv(p1), _fv(p2), _r, _rv); 
}

/**
 * 
 * @param ped
 */
export function getJackTarget(ped: number): number {
	return _in(0x5486a79d, 0x9fbd342d, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function getMeleeTargetForPed(ped: number): number {
	return _in(0x18a3e9ee, 0x1297fd39, ped, _r); 
}

/**
 * ```
 * Function just returns 0
 * void __fastcall ped__get_mount(NativeContext *a1)
 * {
 * NativeContext *v1; // rbx@1
 * v1 = a1;
 * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
 * v1->Returns->Item1= 0;
 * }
 * ```
 * @param ped
 */
export function getMount(ped: number): number {
	return _in(0xe7e11b8d, 0xcbed1058, ped, _r); 
}

/**
 * ```
 * Used for freemode (online) characters.
 * ```
 */
export function GetNumHairColors(): number {
	return _in(0xe5c0cf87, 0x2c2ad150, _r, _ri); 
}

/**
 * 
 */
export function GetNumMakeupColors(): number {
	return _in(0xd1f7ca15, 0x35d22818, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param componentId
 */
export function getNumberOfPedDrawableVariations(ped: number, componentId: number): number {
	return _in(0x27561561, 0x732a7842, ped, componentId, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param propId
 */
export function getNumberOfPedPropDrawableVariations(ped: number, propId: number): number {
	return _in(0x5faf9754, 0xe789fb47, ped, propId, _r, _ri); 
}

/**
 * ```
 * Need to check behavior when drawableId = -1
 * ```
 * @param ped
 * @param propId
 * @param drawableId
 */
export function getNumberOfPedPropTextureVariations(ped: number, propId: number, drawableId: number): number {
	return _in(0xa6e7f1ce, 0xb523e171, ped, propId, drawableId, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param componentId
 * @param drawableId
 */
export function getNumberOfPedTextureVariations(ped: number, componentId: number, drawableId: number): number {
	return _in(0x8f7156a3, 0x142a6bad, ped, componentId, drawableId, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedAccuracy(ped: number): number {
	return _in(0x37f4ad56, 0xecbc0cd6, ped, _r, _ri); 
}

/**
 * ```
 * Returns the ped's alertness (0-3).
 * Values :
 * 0 : Neutral
 * 1 : Heard something (gun shot, hit, etc)
 * 2 : Knows (the origin of the event)
 * 3 : Fully alerted (is facing the event?)
 * If the Ped does not exist, returns -1.
 * ```
 * @param ped
 */
export function getPedAlertness(ped: number): number {
	return _in(0xf6aa1185, 0x30443fd2, ped, _r, _ri); 
}

/**
 * 
 * @param groupID
 */
export function getPedAsGroupLeader(groupID: number): number {
	return _in(0x5cce68db, 0xd5fe93ec, groupID, _r); 
}

/**
 * 
 * @param ped
 */
export function getPedArmour(ped: number): number {
	return _in(0x9483af82, 0x1605b1d8, ped, _r, _ri); 
}

/**
 * ```
 * from fm_mission_controller.c4 (variable names changed for clarity):
 * int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
 * PED::GET_GROUP_SIZE(group, &unused, &groupSize);
 * if (groupSize >= 1) {
 * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
 * . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
 * . . . . . . . . //and so on
 * ```
 * @param groupID
 * @param memberNumber
 */
export function getPedAsGroupMember(groupID: number, memberNumber: number): number {
	return _in(0x51455483, 0xcf23ed97, groupID, memberNumber, _r); 
}

/**
 * ```
 * Gets the position of the specified bone of the specified ped.
 * ped: The ped to get the position of a bone from.
 * boneId: The ID of the bone to get the position from. This is NOT the index.
 * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
 * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
 * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
 * ```
 * @param ped
 * @param boneId
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function getPedBoneCoords(ped: number, boneId: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 {
	return _in(0x17c07fc6, 0x40e86b4e, ped, boneId, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv); 
}

/**
 * ```
 * Returns the hash of the weapon/model/object that killed the ped.
 * ```
 * @param ped
 */
export function getPedCauseOfDeath(ped: number): number {
	return _in(0x16ffe42a, 0xb2d2dc59, ped, _r); 
}

/**
 * ```
 * enum ePedBoneId : uint16_t
 * {
 * SKEL_ROOT = 0x0,
 * SKEL_Pelvis = 0x2E28,
 * SKEL_L_Thigh = 0xE39F,
 * SKEL_L_Calf = 0xF9BB,
 * SKEL_L_Foot = 0x3779,
 * SKEL_L_Toe0 = 0x83C,
 * EO_L_Foot = 0x84C5,
 * EO_L_Toe = 0x68BD,
 * IK_L_Foot = 0xFEDD,
 * PH_L_Foot = 0xE175,
 * MH_L_Knee = 0xB3FE,
 * SKEL_R_Thigh = 0xCA72,
 * SKEL_R_Calf = 0x9000,
 * SKEL_R_Foot = 0xCC4D,
 * SKEL_R_Toe0 = 0x512D,
 * EO_R_Foot = 0x1096,
 * EO_R_Toe = 0x7163,
 * IK_R_Foot = 0x8AAE,
 * PH_R_Foot = 0x60E6,
 * MH_R_Knee = 0x3FCF,
 * RB_L_ThighRoll = 0x5C57,
 * RB_R_ThighRoll = 0x192A,
 * SKEL_Spine_Root = 0xE0FD,
 * SKEL_Spine0 = 0x5C01,
 * SKEL_Spine1 = 0x60F0,
 * SKEL_Spine2 = 0x60F1,
 * SKEL_Spine3 = 0x60F2,
 * SKEL_L_Clavicle = 0xFCD9,
 * SKEL_L_UpperArm = 0xB1C5,
 * SKEL_L_Forearm = 0xEEEB,
 * SKEL_L_Hand = 0x49D9,
 * SKEL_L_Finger00 = 0x67F2,
 * SKEL_L_Finger01 = 0xFF9,
 * SKEL_L_Finger02 = 0xFFA,
 * SKEL_L_Finger10 = 0x67F3,
 * SKEL_L_Finger11 = 0x1049,
 * SKEL_L_Finger12 = 0x104A,
 * SKEL_L_Finger20 = 0x67F4,
 * SKEL_L_Finger21 = 0x1059,
 * SKEL_L_Finger22 = 0x105A,
 * SKEL_L_Finger30 = 0x67F5,
 * SKEL_L_Finger31 = 0x1029,
 * SKEL_L_Finger32 = 0x102A,
 * SKEL_L_Finger40 = 0x67F6,
 * SKEL_L_Finger41 = 0x1039,
 * SKEL_L_Finger42 = 0x103A,
 * PH_L_Hand = 0xEB95,
 * IK_L_Hand = 0x8CBD,
 * RB_L_ForeArmRoll = 0xEE4F,
 * RB_L_ArmRoll = 0x1470,
 * MH_L_Elbow = 0x58B7,
 * SKEL_R_Clavicle = 0x29D2,
 * SKEL_R_UpperArm = 0x9D4D,
 * SKEL_R_Forearm = 0x6E5C,
 * SKEL_R_Hand = 0xDEAD,
 * SKEL_R_Finger00 = 0xE5F2,
 * SKEL_R_Finger01 = 0xFA10,
 * SKEL_R_Finger02 = 0xFA11,
 * SKEL_R_Finger10 = 0xE5F3,
 * SKEL_R_Finger11 = 0xFA60,
 * SKEL_R_Finger12 = 0xFA61,
 * SKEL_R_Finger20 = 0xE5F4,
 * SKEL_R_Finger21 = 0xFA70,
 * SKEL_R_Finger22 = 0xFA71,
 * SKEL_R_Finger30 = 0xE5F5,
 * SKEL_R_Finger31 = 0xFA40,
 * SKEL_R_Finger32 = 0xFA41,
 * SKEL_R_Finger40 = 0xE5F6,
 * SKEL_R_Finger41 = 0xFA50,
 * SKEL_R_Finger42 = 0xFA51,
 * PH_R_Hand = 0x6F06,
 * IK_R_Hand = 0x188E,
 * RB_R_ForeArmRoll = 0xAB22,
 * RB_R_ArmRoll = 0x90FF,
 * MH_R_Elbow = 0xBB0,
 * SKEL_Neck_1 = 0x9995,
 * SKEL_Head = 0x796E,
 * IK_Head = 0x322C,
 * FACIAL_facialRoot = 0xFE2C,
 * FB_L_Brow_Out_000 = 0xE3DB,
 * FB_L_Lid_Upper_000 = 0xB2B6,
 * FB_L_Eye_000 = 0x62AC,
 * FB_L_CheekBone_000 = 0x542E,
 * FB_L_Lip_Corner_000 = 0x74AC,
 * FB_R_Lid_Upper_000 = 0xAA10,
 * FB_R_Eye_000 = 0x6B52,
 * FB_R_CheekBone_000 = 0x4B88,
 * FB_R_Brow_Out_000 = 0x54C,
 * FB_R_Lip_Corner_000 = 0x2BA6,
 * FB_Brow_Centre_000 = 0x9149,
 * FB_UpperLipRoot_000 = 0x4ED2,
 * FB_UpperLip_000 = 0xF18F,
 * FB_L_Lip_Top_000 = 0x4F37,
 * FB_R_Lip_Top_000 = 0x4537,
 * FB_Jaw_000 = 0xB4A0,
 * FB_LowerLipRoot_000 = 0x4324,
 * FB_LowerLip_000 = 0x508F,
 * FB_L_Lip_Bot_000 = 0xB93B,
 * FB_R_Lip_Bot_000 = 0xC33B,
 * FB_Tongue_000 = 0xB987,
 * RB_Neck_1 = 0x8B93,
 * SPR_L_Breast = 0xFC8E,
 * SPR_R_Breast = 0x885F,
 * IK_Root = 0xDD1C,
 * SKEL_Neck_2 = 0x5FD4,
 * SKEL_Pelvis1 = 0xD003,
 * SKEL_PelvisRoot = 0x45FC,
 * SKEL_SADDLE = 0x9524,
 * MH_L_CalfBack = 0x1013,
 * MH_L_ThighBack = 0x600D,
 * SM_L_Skirt = 0xC419,
 * MH_R_CalfBack = 0xB013,
 * MH_R_ThighBack = 0x51A3,
 * SM_R_Skirt = 0x7712,
 * SM_M_BackSkirtRoll = 0xDBB,
 * SM_L_BackSkirtRoll = 0x40B2,
 * SM_R_BackSkirtRoll = 0xC141,
 * SM_M_FrontSkirtRoll = 0xCDBB,
 * SM_L_FrontSkirtRoll = 0x9B69,
 * SM_R_FrontSkirtRoll = 0x86F1,
 * SM_CockNBalls_ROOT = 0xC67D,
 * SM_CockNBalls = 0x9D34,
 * MH_L_Finger00 = 0x8C63,
 * MH_L_FingerBulge00 = 0x5FB8,
 * MH_L_Finger10 = 0x8C53,
 * MH_L_FingerTop00 = 0xA244,
 * MH_L_HandSide = 0xC78A,
 * MH_Watch = 0x2738,
 * MH_L_Sleeve = 0x933C,
 * MH_R_Finger00 = 0x2C63,
 * MH_R_FingerBulge00 = 0x69B8,
 * MH_R_Finger10 = 0x2C53,
 * MH_R_FingerTop00 = 0xEF4B,
 * MH_R_HandSide = 0x68FB,
 * MH_R_Sleeve = 0x92DC,
 * FACIAL_jaw = 0xB21,
 * FACIAL_underChin = 0x8A95,
 * FACIAL_L_underChin = 0x234E,
 * FACIAL_chin = 0xB578,
 * FACIAL_chinSkinBottom = 0x98BC,
 * FACIAL_L_chinSkinBottom = 0x3E8F,
 * FACIAL_R_chinSkinBottom = 0x9E8F,
 * FACIAL_tongueA = 0x4A7C,
 * FACIAL_tongueB = 0x4A7D,
 * FACIAL_tongueC = 0x4A7E,
 * FACIAL_tongueD = 0x4A7F,
 * FACIAL_tongueE = 0x4A80,
 * FACIAL_L_tongueE = 0x35F2,
 * FACIAL_R_tongueE = 0x2FF2,
 * FACIAL_L_tongueD = 0x35F1,
 * FACIAL_R_tongueD = 0x2FF1,
 * FACIAL_L_tongueC = 0x35F0,
 * FACIAL_R_tongueC = 0x2FF0,
 * FACIAL_L_tongueB = 0x35EF,
 * FACIAL_R_tongueB = 0x2FEF,
 * FACIAL_L_tongueA = 0x35EE,
 * FACIAL_R_tongueA = 0x2FEE,
 * FACIAL_chinSkinTop = 0x7226,
 * FACIAL_L_chinSkinTop = 0x3EB3,
 * FACIAL_chinSkinMid = 0x899A,
 * FACIAL_L_chinSkinMid = 0x4427,
 * FACIAL_L_chinSide = 0x4A5E,
 * FACIAL_R_chinSkinMid = 0xF5AF,
 * FACIAL_R_chinSkinTop = 0xF03B,
 * FACIAL_R_chinSide = 0xAA5E,
 * FACIAL_R_underChin = 0x2BF4,
 * FACIAL_L_lipLowerSDK = 0xB9E1,
 * FACIAL_L_lipLowerAnalog = 0x244A,
 * FACIAL_L_lipLowerThicknessV = 0xC749,
 * FACIAL_L_lipLowerThicknessH = 0xC67B,
 * FACIAL_lipLowerSDK = 0x7285,
 * FACIAL_lipLowerAnalog = 0xD97B,
 * FACIAL_lipLowerThicknessV = 0xC5BB,
 * FACIAL_lipLowerThicknessH = 0xC5ED,
 * FACIAL_R_lipLowerSDK = 0xA034,
 * FACIAL_R_lipLowerAnalog = 0xC2D9,
 * FACIAL_R_lipLowerThicknessV = 0xC6E9,
 * FACIAL_R_lipLowerThicknessH = 0xC6DB,
 * FACIAL_nose = 0x20F1,
 * FACIAL_L_nostril = 0x7322,
 * FACIAL_L_nostrilThickness = 0xC15F,
 * FACIAL_noseLower = 0xE05A,
 * FACIAL_L_noseLowerThickness = 0x79D5,
 * FACIAL_R_noseLowerThickness = 0x7975,
 * FACIAL_noseTip = 0x6A60,
 * FACIAL_R_nostril = 0x7922,
 * FACIAL_R_nostrilThickness = 0x36FF,
 * FACIAL_noseUpper = 0xA04F,
 * FACIAL_L_noseUpper = 0x1FB8,
 * FACIAL_noseBridge = 0x9BA3,
 * FACIAL_L_nasolabialFurrow = 0x5ACA,
 * FACIAL_L_nasolabialBulge = 0xCD78,
 * FACIAL_L_cheekLower = 0x6907,
 * FACIAL_L_cheekLowerBulge1 = 0xE3FB,
 * FACIAL_L_cheekLowerBulge2 = 0xE3FC,
 * FACIAL_L_cheekInner = 0xE7AB,
 * FACIAL_L_cheekOuter = 0x8161,
 * FACIAL_L_eyesackLower = 0x771B,
 * FACIAL_L_eyeball = 0x1744,
 * FACIAL_L_eyelidLower = 0x998C,
 * FACIAL_L_eyelidLowerOuterSDK = 0xFE4C,
 * FACIAL_L_eyelidLowerOuterAnalog = 0xB9AA,
 * FACIAL_L_eyelashLowerOuter = 0xD7F6,
 * FACIAL_L_eyelidLowerInnerSDK = 0xF151,
 * FACIAL_L_eyelidLowerInnerAnalog = 0x8242,
 * FACIAL_L_eyelashLowerInner = 0x4CCF,
 * FACIAL_L_eyelidUpper = 0x97C1,
 * FACIAL_L_eyelidUpperOuterSDK = 0xAF15,
 * FACIAL_L_eyelidUpperOuterAnalog = 0x67FA,
 * FACIAL_L_eyelashUpperOuter = 0x27B7,
 * FACIAL_L_eyelidUpperInnerSDK = 0xD341,
 * FACIAL_L_eyelidUpperInnerAnalog = 0xF092,
 * FACIAL_L_eyelashUpperInner = 0x9B1F,
 * FACIAL_L_eyesackUpperOuterBulge = 0xA559,
 * FACIAL_L_eyesackUpperInnerBulge = 0x2F2A,
 * FACIAL_L_eyesackUpperOuterFurrow = 0xC597,
 * FACIAL_L_eyesackUpperInnerFurrow = 0x52A7,
 * FACIAL_forehead = 0x9218,
 * FACIAL_L_foreheadInner = 0x843,
 * FACIAL_L_foreheadInnerBulge = 0x767C,
 * FACIAL_L_foreheadOuter = 0x8DCB,
 * FACIAL_skull = 0x4221,
 * FACIAL_foreheadUpper = 0xF7D6,
 * FACIAL_L_foreheadUpperInner = 0xCF13,
 * FACIAL_L_foreheadUpperOuter = 0x509B,
 * FACIAL_R_foreheadUpperInner = 0xCEF3,
 * FACIAL_R_foreheadUpperOuter = 0x507B,
 * FACIAL_L_temple = 0xAF79,
 * FACIAL_L_ear = 0x19DD,
 * FACIAL_L_earLower = 0x6031,
 * FACIAL_L_masseter = 0x2810,
 * FACIAL_L_jawRecess = 0x9C7A,
 * FACIAL_L_cheekOuterSkin = 0x14A5,
 * FACIAL_R_cheekLower = 0xF367,
 * FACIAL_R_cheekLowerBulge1 = 0x599B,
 * FACIAL_R_cheekLowerBulge2 = 0x599C,
 * FACIAL_R_masseter = 0x810,
 * FACIAL_R_jawRecess = 0x93D4,
 * FACIAL_R_ear = 0x1137,
 * FACIAL_R_earLower = 0x8031,
 * FACIAL_R_eyesackLower = 0x777B,
 * FACIAL_R_nasolabialBulge = 0xD61E,
 * FACIAL_R_cheekOuter = 0xD32,
 * FACIAL_R_cheekInner = 0x737C,
 * FACIAL_R_noseUpper = 0x1CD6,
 * FACIAL_R_foreheadInner = 0xE43,
 * FACIAL_R_foreheadInnerBulge = 0x769C,
 * FACIAL_R_foreheadOuter = 0x8FCB,
 * FACIAL_R_cheekOuterSkin = 0xB334,
 * FACIAL_R_eyesackUpperInnerFurrow = 0x9FAE,
 * FACIAL_R_eyesackUpperOuterFurrow = 0x140F,
 * FACIAL_R_eyesackUpperInnerBulge = 0xA359,
 * FACIAL_R_eyesackUpperOuterBulge = 0x1AF9,
 * FACIAL_R_nasolabialFurrow = 0x2CAA,
 * FACIAL_R_temple = 0xAF19,
 * FACIAL_R_eyeball = 0x1944,
 * FACIAL_R_eyelidUpper = 0x7E14,
 * FACIAL_R_eyelidUpperOuterSDK = 0xB115,
 * FACIAL_R_eyelidUpperOuterAnalog = 0xF25A,
 * FACIAL_R_eyelashUpperOuter = 0xE0A,
 * FACIAL_R_eyelidUpperInnerSDK = 0xD541,
 * FACIAL_R_eyelidUpperInnerAnalog = 0x7C63,
 * FACIAL_R_eyelashUpperInner = 0x8172,
 * FACIAL_R_eyelidLower = 0x7FDF,
 * FACIAL_R_eyelidLowerOuterSDK = 0x1BD,
 * FACIAL_R_eyelidLowerOuterAnalog = 0x457B,
 * FACIAL_R_eyelashLowerOuter = 0xBE49,
 * FACIAL_R_eyelidLowerInnerSDK = 0xF351,
 * FACIAL_R_eyelidLowerInnerAnalog = 0xE13,
 * FACIAL_R_eyelashLowerInner = 0x3322,
 * FACIAL_L_lipUpperSDK = 0x8F30,
 * FACIAL_L_lipUpperAnalog = 0xB1CF,
 * FACIAL_L_lipUpperThicknessH = 0x37CE,
 * FACIAL_L_lipUpperThicknessV = 0x38BC,
 * FACIAL_lipUpperSDK = 0x1774,
 * FACIAL_lipUpperAnalog = 0xE064,
 * FACIAL_lipUpperThicknessH = 0x7993,
 * FACIAL_lipUpperThicknessV = 0x7981,
 * FACIAL_L_lipCornerSDK = 0xB1C,
 * FACIAL_L_lipCornerAnalog = 0xE568,
 * FACIAL_L_lipCornerThicknessUpper = 0x7BC,
 * FACIAL_L_lipCornerThicknessLower = 0xDD42,
 * FACIAL_R_lipUpperSDK = 0x7583,
 * FACIAL_R_lipUpperAnalog = 0x51CF,
 * FACIAL_R_lipUpperThicknessH = 0x382E,
 * FACIAL_R_lipUpperThicknessV = 0x385C,
 * FACIAL_R_lipCornerSDK = 0xB3C,
 * FACIAL_R_lipCornerAnalog = 0xEE0E,
 * FACIAL_R_lipCornerThicknessUpper = 0x54C3,
 * FACIAL_R_lipCornerThicknessLower = 0x2BBA,
 * MH_MulletRoot = 0x3E73,
 * MH_MulletScaler = 0xA1C2,
 * MH_Hair_Scale = 0xC664,
 * MH_Hair_Crown = 0x1675,
 * SM_Torch = 0x8D6,
 * FX_Light = 0x8959,
 * FX_Light_Scale = 0x5038,
 * FX_Light_Switch = 0xE18E,
 * BagRoot = 0xAD09,
 * BagPivotROOT = 0xB836,
 * BagPivot = 0x4D11,
 * BagBody = 0xAB6D,
 * BagBone_R = 0x937,
 * BagBone_L = 0x991,
 * SM_LifeSaver_Front = 0x9420,
 * SM_R_Pouches_ROOT = 0x2962,
 * SM_R_Pouches = 0x4141,
 * SM_L_Pouches_ROOT = 0x2A02,
 * SM_L_Pouches = 0x4B41,
 * SM_Suit_Back_Flapper = 0xDA2D,
 * SPR_CopRadio = 0x8245,
 * SM_LifeSaver_Back = 0x2127,
 * MH_BlushSlider = 0xA0CE,
 * SKEL_Tail_01 = 0x347,
 * SKEL_Tail_02 = 0x348,
 * MH_L_Concertina_B = 0xC988,
 * MH_L_Concertina_A = 0xC987,
 * MH_R_Concertina_B = 0xC8E8,
 * MH_R_Concertina_A = 0xC8E7,
 * MH_L_ShoulderBladeRoot = 0x8711,
 * MH_L_ShoulderBlade = 0x4EAF,
 * MH_R_ShoulderBladeRoot = 0x3A0A,
 * MH_R_ShoulderBlade = 0x54AF,
 * FB_R_Ear_000 = 0x6CDF,
 * SPR_R_Ear = 0x63B6,
 * FB_L_Ear_000 = 0x6439,
 * SPR_L_Ear = 0x5B10,
 * FB_TongueA_000 = 0x4206,
 * FB_TongueB_000 = 0x4207,
 * FB_TongueC_000 = 0x4208,
 * SKEL_L_Toe1 = 0x1D6B,
 * SKEL_R_Toe1 = 0xB23F,
 * SKEL_Tail_03 = 0x349,
 * SKEL_Tail_04 = 0x34A,
 * SKEL_Tail_05 = 0x34B,
 * SPR_Gonads_ROOT = 0xBFDE,
 * SPR_Gonads = 0x1C00,
 * FB_L_Brow_Out_001 = 0xE3DB,
 * FB_L_Lid_Upper_001 = 0xB2B6,
 * FB_L_Eye_001 = 0x62AC,
 * FB_L_CheekBone_001 = 0x542E,
 * FB_L_Lip_Corner_001 = 0x74AC,
 * FB_R_Lid_Upper_001 = 0xAA10,
 * FB_R_Eye_001 = 0x6B52,
 * FB_R_CheekBone_001 = 0x4B88,
 * FB_R_Brow_Out_001 = 0x54C,
 * FB_R_Lip_Corner_001 = 0x2BA6,
 * FB_Brow_Centre_001 = 0x9149,
 * FB_UpperLipRoot_001 = 0x4ED2,
 * FB_UpperLip_001 = 0xF18F,
 * FB_L_Lip_Top_001 = 0x4F37,
 * FB_R_Lip_Top_001 = 0x4537,
 * FB_Jaw_001 = 0xB4A0,
 * FB_LowerLipRoot_001 = 0x4324,
 * FB_LowerLip_001 = 0x508F,
 * FB_L_Lip_Bot_001 = 0xB93B,
 * FB_R_Lip_Bot_001 = 0xC33B,
 * FB_Tongue_001 = 0xB987
 * };
 * ```
 * @param ped
 * @param boneId
 */
export function getPedBoneIndex(ped: number, boneId: number): number {
	return _in(0x3f428d08, 0xbe5aae31, ped, boneId, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedCombatRange(ped: number): number {
	return _in(0xf9d9f7f2, 0xdb8e2fa0, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedCombatMovement(ped: number): number {
	return _in(0xdea92412, 0xfcaeb3f5, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param speedX
 * @param speedY
 */
export function GetPedCurrentMovementSpeed(ped: number): boolean {
	return _in(0xf60165e1, 0xd2c5370b, ped, _f, _f, _r); 
}

/**
 * See [`SET_PED_CONFIG_FLAG`](#\_0x1913FE4CBF41C463).
 * @param ped
 * @param flagId
 * @param p2
 */
export function getPedConfigFlag(ped: number, flagId: number, p2: boolean): boolean {
	return _in(0x7ee53118, 0xc892b513, ped, flagId, p2, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param ped
 */
export function GetPedDiesInWater(ped: number): boolean {
	return _in(0x65671a4f, 0xb8218930, ped, _r); 
}

/**
 * ```
 * Ids
 * 0 - Head
 * 1 - Beard
 * 2 - Hair
 * 3 - Torso
 * 4 - Legs
 * 5 - Hands
 * 6 - Foot
 * 7 - Scarfs/Neck Accessories
 * 8 - Accessories 1
 * 9 - Accessories 2
 * 10- Decals
 * 11 - Auxiliary parts for torso
 * ```
 * @param ped
 * @param componentId
 */
export function getPedDrawableVariation(ped: number, componentId: number): number {
	return _in(0x67f3780d, 0xd425d4fc, ped, componentId, _r, _ri); 
}

/**
 * ```
 * Returns the zoneID for the overlay if it is a member of collection.
 * enum ePedDecorationZone
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_UNKNOWN = 6,
 * ZONE_NONE = 7
 * };
 * ```
 * @param collection
 * @param overlay
 */
export function getPedDecorationZoneFromHashes(collection: number, overlay: number): number {
	return _in(0x9fd452bf, 0xbe7a7a8b, _ch(collection), _ch(overlay), _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedEnveffScale(ped: number): number {
	return _in(0x9c14d303, 0x95a51a3c, ped, _r, _rf); 
}

/**
 * 
 * @param ped
 */
export function getPedDecorationsState(ped: number): number {
	return _in(0x71eab450, 0xd86954a1, ped, _r, _ri); 
}

/**
 * A getter for [`_SET_PED_EYE_COLOR`](#\_0x50B56988B170AFDF).
 * @param ped
 * @return Returns ped's eye colour, or -1 if fails to get.
 */
export function GetPedEyeColor(ped: number): number {
	return _in(0x76bba2ce, 0xe66d47e9, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function getPedDefensiveAreaPosition(ped: number, p1: boolean): Vector3 {
	return _in(0x3c06b878, 0x6dd94cd1, ped, p1, _r, _rv); 
}

/**
 * Use [`SetPedIlluminatedClothingGlowIntensity`](#\_0x4E90D746056E273D) to set the illuminated clothing glow intensity for a specific ped.
 * @param ped
 * @return A float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
 */
export function GetPedEmissiveIntensity(ped: number): number {
	return _in(0x1461b28a, 0x06717d68, ped, _r, _rf); 
}

/**
 * ```
 * Returns the group id of which the specified ped is a member of.
 * ```
 * @param ped
 */
export function getPedGroupIndex(ped: number): number {
	return _in(0xf162e133, 0xb4e7a675, ped, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param ped
 * @param eventType
 * @param outData
 */
export function GetPedEventData(ped: number, eventType: number): boolean {
	return _in(0xba656a3b, 0xb01bdea3, ped, eventType, _i, _r); 
}

/**
 * ```
 * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
 * pass this struct in the second parameter
 * typedef struct
 * {
 * int shapeFirst, shapeSecond, shapeThird;
 * int skinFirst, skinSecond, skinThird;
 * float shapeMix, skinMix, thirdMix;
 * } headBlendData;
 * ```
 * @param ped
 * @param headBlendData
 */
export function getPedHeadBlendData(ped: number): boolean {
	return _in(0x2746bd9d, 0x88c5c5d0, ped, _i, _r); 
}

/**
 * ```
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * Used when calling SET_PED_HEAD_BLEND_DATA.
 * ```
 * @param type
 */
export function getPedHeadBlendFirstIndex(type: number): number {
	return _in(0x68d353ab, 0x88b97e0c, type, _r, _ri); 
}

/**
 * ```
 * Gets the offset the specified ped has moved since the previous tick.
 * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
 * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
 * ```
 * @param ped
 * @param worldSpace
 */
export function getPedExtractedDisplacement(ped: number, worldSpace: boolean): Vector3 {
	return _in(0xe0af4140, 0x1adf87e3, ped, worldSpace, _r, _rv); 
}

/**
 * ```
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * ```
 * @param type
 */
export function getPedHeadBlendNumHeads(type: number): number {
	return _in(0x5ef37013, 0xa6539c9d, type, _r, _ri); 
}

/**
 * Input: Haircolor index, value between 0 and 63 (inclusive).
 * Output: RGB values for the haircolor specified in the input.
 * 
 * This is used with the hair color swatches scaleform.
 * 
 * Use [`_0x013E5CFC38CD5387`](#\_0x013E5CFC38CD5387) to get the makeup colors.
 * @param hairColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
export function GetPedHairRgbColor(hairColorIndex: number): void {
	return _in(0x4852fc38, 0x6e2e1bb5, hairColorIndex, _i, _i, _i); 
}

/**
 * 
 * @param ped
 */
export function getPedHelmetStoredHatPropIndex(ped: number): number {
	return _in(0x451294e8, 0x59ecc018, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedHelmetStoredHatTexIndex(ped: number): number {
	return _in(0x9d728c1e, 0x12bf5518, ped, _r, _ri); 
}

/**
 * ```
 * Used with freemode (online) characters.
 * ```
 * @param overlayID
 */
export function getPedHeadOverlayNum(overlayID: number): number {
	return _in(0xcf1ce768, 0xbb43480e, overlayID, _r, _ri); 
}

/**
 * Input: Makeup color index, value between 0 and 63 (inclusive).
 * Output: RGB values for the makeup color specified in the input.
 * 
 * This is used with the makeup color swatches scaleform.
 * 
 * Use [`_0x4852FC386E2E1BB5`](#\_0x4852FC386E2E1BB5) to get the hair colors.
 * @param makeupColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
export function GetPedMakeupRgbColor(makeupColorIndex: number): void {
	return _in(0x013e5cfc, 0x38cd5387, makeupColorIndex, _i, _i, _i); 
}

/**
 * ```
 * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
 * This might be the once removed native GET_PED_HEAD_OVERLAY.
 * ```
 * @param ped
 * @param overlayID
 */
export function GetPedHeadOverlayValue(ped: number, overlayID: number): number {
	return _in(0xa60ef3b6, 0x461a4d43, ped, overlayID, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedMaxHealth(ped: number): number {
	return _in(0x4700a416, 0xe8324ef3, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param outBone
 */
export function getPedLastDamageBone(ped: number): boolean {
	return _in(0xd75960f6, 0xbd9ea49c, ped, _ii(outBone), _r); 
}

/**
 * Console/PC structure definitions and example: pastebin.com/SsFej963
 * 
 * For FiveM/Cfx.Re use-cases refer to: [`GET_GAME_POOL`](#\_0x2B9D4F50).
 * @param ped
 * @param sizeAndPeds
 * @param ignore
 */
export function getPedNearbyPeds(ped: number, ignore: number): number {
	return _in(0x23f8f5fc, 0x7e8c4a6b, ped, _i, ignore, _r, _ri); 
}

/**
 * ```
 * -1: no landing
 * 0: landing on both feet
 * 1: stumbling
 * 2: rolling
 * 3: ragdoll
 * ```
 * @param ped
 */
export function getPedParachuteLandingType(ped: number): number {
	return _in(0x8b9f1fc6, 0xae8166c0, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedMoney(ped: number): number {
	return _in(0x3f69145b, 0xba87bae7, ped, _r, _ri); 
}

/**
 * ```
 * Returns size of array, passed into the second variable.
 * See below for usage information.
 * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
 * //Setup the array
 * const int numElements = 10;
 * const int arrSize = numElements * 2 + 2;
 * Any veh[arrSize];
 * //0 index is the size of the array
 * veh[0] = numElements;
 * int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
 * if (veh != NULL)
 * {
 * //Simple loop to go through results
 * for (int i = 0; i < count; i++)
 * {
 * int offsettedID = i * 2 + 2;
 * //Make sure it exists
 * if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
 * {
 * //Do something
 * }
 * }
 * }
 * Here's the right way to do it (console and pc):
 * pastebin.com/SsFej963
 * ```
 * @param ped
 * @param sizeAndVehs
 */
export function getPedNearbyVehicles(ped: number): number {
	return _in(0xcff869cb, 0xfa210d82, ped, _ii(sizeAndVehs), _r, _ri); 
}

/**
 * 
 * @param ped
 * @param outTintIndex
 */
export function getPedParachuteTintIndex(ped: number): void {
	return _in(0xeaf5f7e5, 0xae7c6c9d, ped, _ii(outTintIndex)); 
}

/**
 * 
 * @param ped
 * @param componentId
 */
export function getPedPaletteVariation(ped: number, componentId: number): number {
	return _in(0xe3dd5f2a, 0x84b42281, ped, componentId, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param componentId
 */
export function getPedPropTextureIndex(ped: number, componentId: number): number {
	return _in(0xe131a286, 0x26f81ab2, ped, componentId, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param bone
 */
export function getPedRagdollBoneIndex(ped: number, bone: number): number {
	return _in(0x2057ef81, 0x3397a772, ped, bone, _r, _ri); 
}

/**
 * ```
 * Returns:
 * -1: Normal
 * 0: Wearing parachute on back
 * 1: Parachute opening
 * 2: Parachute open
 * 3: Falling to doom (e.g. after exiting parachute)
 * Normal means no parachute?
 * ```
 * @param ped
 */
export function getPedParachuteState(ped: number): number {
	return _in(0x79cfd982, 0x7cc979b6, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedRelationshipGroupHash(ped: number): number {
	return _in(0x7dbdd048, 0x62d95f04, ped, _r); 
}

/**
 * 
 * @param ped
 * @param componentId
 */
export function getPedPropIndex(ped: number, componentId: number): number {
	return _in(0x898cc20e, 0xa75bacd8, ped, componentId, _r, _ri); 
}

/**
 * ```
 * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
 * Is best to check if the Ped is dead before asking for its killer.
 * ```
 * @param ped
 */
export function getPedSourceOfDeath(ped: number): number {
	return _in(0x93c8b64d, 0xeb84728c, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function getPedRelationshipGroupDefaultHash(ped: number): number {
	return _in(0x42fdd0f0, 0x17b1e38e, ped, _r); 
}

/**
 * ```
 * Returns whether the entity is in stealth mode
 * ```
 * @param ped
 */
export function getPedStealthMovement(ped: number): boolean {
	return _in(0x7c2ac9ca, 0x66575fbf, ped, _r); 
}

/**
 * 
 * @param ped
 * @param flagId
 */
export function getPedResetFlag(ped: number, flagId: number): boolean {
	return _in(0xaf9e59b1, 0xb1fbf2a0, ped, flagId, _r); 
}

/**
 * 
 * @param ped
 * @param componentId
 */
export function getPedTextureVariation(ped: number, componentId: number): number {
	return _in(0x04a355e0, 0x41e004e6, ped, componentId, _r, _ri); 
}

/**
 * Ped types:
 * 
 * ```cpp
 * enum ePedType
 * {
 * PED_TYPE_PLAYER_0,
 * PED_TYPE_PLAYER_1,
 * PED_TYPE_NETWORK_PLAYER,
 * PED_TYPE_PLAYER_2,
 * PED_TYPE_CIVMALE,
 * PED_TYPE_CIVFEMALE,
 * PED_TYPE_COP,
 * PED_TYPE_GANG_ALBANIAN,
 * PED_TYPE_GANG_BIKER_1,
 * PED_TYPE_GANG_BIKER_2,
 * PED_TYPE_GANG_ITALIAN,
 * PED_TYPE_GANG_RUSSIAN,
 * PED_TYPE_GANG_RUSSIAN_2,
 * PED_TYPE_GANG_IRISH,
 * PED_TYPE_GANG_JAMAICAN,
 * PED_TYPE_GANG_AFRICAN_AMERICAN,
 * PED_TYPE_GANG_KOREAN,
 * PED_TYPE_GANG_CHINESE_JAPANESE,
 * PED_TYPE_GANG_PUERTO_RICAN,
 * PED_TYPE_DEALER,
 * PED_TYPE_MEDIC,
 * PED_TYPE_FIREMAN,
 * PED_TYPE_CRIMINAL,
 * PED_TYPE_BUM,
 * PED_TYPE_PROSTITUTE,
 * PED_TYPE_SPECIAL,
 * PED_TYPE_MISSION,
 * PED_TYPE_SWAT,
 * PED_TYPE_ANIMAL,
 * PED_TYPE_ARMY
 * };
 * ```
 * @param ped
 */
export function getPedType(ped: number): number {
	return _in(0xff059e1e, 0x4c01e63c, ped, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param ped
 * @param p1
 */
export function GetPedTaskCombatTarget(ped: number, p1: any): number {
	return _in(0x32c27a11, 0x307b01cc, ped, p1, _r); 
}

/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * @param id
 */
export function getPedheadshotTxdString(id: number): string {
	return _in(0xdb4eacd4, 0xad0a5d6b, id, _r, _s); 
}

/**
 * 
 * @param ped
 */
export function getPedTimeOfDeath(ped: number): number {
	return _in(0x1e98817b, 0x311ae98a, ped, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 */
export function GetPedVisualFieldCenterAngle(ped: number): number {
	return _in(0xef2c71a3, 0x2cad5fbd, ped, _r, _rf); 
}

/**
 * 
 * @param ped
 */
export function getPedsJacker(ped: number): number {
	return _in(0x9b128dc3, 0x6c1e04cf, ped, _r); 
}

/**
 * ```
 * Gets the relationship between two peds. This should be called twice (once for each ped).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
 * ```
 * @param ped1
 * @param ped2
 */
export function getRelationshipBetweenPeds(ped1: number, ped2: number): number {
	return _in(0xeba5ad3a, 0x0eaf7121, ped1, ped2, _r, _ri); 
}

/**
 * ```
 * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
 * Ped Types:
 * Any = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * ```
 * @param x
 * @param y
 * @param z
 * @param xRadius
 * @param yRadius
 * @param zRadius
 * @param pedType
 */
export function getRandomPedAtCoord(x: number, y: number, z: number, xRadius: number, yRadius: number, zRadius: number, pedType: number): number {
	return _in(0x876046a8, 0xe3a4b71c, _fv(x), _fv(y), _fv(z), _fv(xRadius), _fv(yRadius), _fv(zRadius), pedType, _r); 
}

/**
 * 
 * @param ped
 */
export function getSeatPedIsTryingToEnter(ped: number): number {
	return _in(0x6f4c85ac, 0xd641bcd2, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPlayerPedIsFollowing(ped: number): number {
	return _in(0x6a3975de, 0xa89f9a17, ped, _r); 
}

/**
 * 
 * @param sceneID
 */
export function getSynchronizedScenePhase(sceneID: number): number {
	return _in(0xe4a310b1, 0xd7fa73cc, sceneID, _r, _rf); 
}

/**
 * ```
 * Gets the relationship between two groups. This should be called twice (once for each group).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
 * ```
 * @param group1
 * @param group2
 */
export function getRelationshipBetweenGroups(group1: number, group2: number): number {
	return _in(0x9e6b7006, 0x1662ae5c, _ch(group1), _ch(group2), _r, _ri); 
}

/**
 * ```
 * GET_TIME_*
 * ```
 * @param ped
 * @param weaponHash
 */
export function GetTimeOfLastPedWeaponDamage(ped: number, weaponHash: number): number {
	return _in(0x36b77bb8, 0x4687c318, ped, _ch(weaponHash), _r, _ri); 
}

/**
 * 
 * @param sceneID
 */
export function getSynchronizedSceneRate(sceneID: number): number {
	return _in(0xd80932d5, 0x77274d40, sceneID, _r, _rf); 
}

/**
 * Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
 * If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
 * @param ped
 * @param lastVehicle
 * @return The vehicle id. Returns 0 if the ped is/was not in a vehicle.
 */
export function getVehiclePedIsIn(ped: number, lastVehicle: boolean): number {
	return _in(0x9a9112a0, 0xfe9a4713, ped, lastVehicle, _r); 
}

/**
 * 
 * @param ped
 */
export function getVehiclePedIsEntering(ped: number): number {
	return _in(0xf92691ae, 0xd837a5fc, ped, _r); 
}

/**
 * ```
 * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
 * ```
 * @param ped
 */
export function getVehiclePedIsUsing(ped: number): number {
	return _in(0x6094ad01, 0x1a2ea87d, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function getVehiclePedIsTryingToEnter(ped: number): number {
	return _in(0x814fa8be, 0x5449445d, ped, _r); 
}

/**
 * ```
 * PoliceMotorcycleHelmet   1024
 * RegularMotorcycleHelmet   4096
 * FiremanHelmet 16384
 * PilotHeadset  32768
 * PilotHelmet   65536
 * --
 * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
 * ```
 * @param ped
 * @param cannotRemove
 * @param helmetFlag
 * @param textureIndex
 */
export function givePedHelmet(ped: number, cannotRemove: boolean, helmetFlag: number, textureIndex: number): void {
	return _in(0x54c7c4a9, 0x4367717e, ped, cannotRemove, helmetFlag, textureIndex); 
}

/**
 * ```
 * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
 * If a message hasn't been created already, this function does nothing.
 * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
 * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * Call order:
 * SET_PED_TO_RAGDOLL
 * CREATE_NM_MESSAGE
 * GIVE_PED_NM_MESSAGE
 * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
 * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * ```
 * @param ped
 */
export function givePedNmMessage(ped: number): void {
	return _in(0xb158dfcc, 0xc56e5c5b, ped); 
}

/**
 * 
 * @param asset
 */
export function hasActionModeAssetLoaded(asset: string): boolean {
	return _in(0xe4b5f4bf, 0x2cb24e65, _ts(asset), _r); 
}

/**
 * 
 * @param ped
 */
export function hasPedHeadBlendFinished(ped: number): boolean {
	return _in(0x654cd0a8, 0x25161131, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function hasPedPreloadPropDataFinished(ped: number): boolean {
	return _in(0x784002a6, 0x32822099, ped, _r); 
}

/**
 * 
 */
export function hasPedheadshotImgUploadSucceeded(): boolean {
	return _in(0xe8a169e6, 0x66cbc541, _r); 
}

/**
 * 
 * @param ped
 */
export function hasPedPreloadVariationDataFinished(ped: number): boolean {
	return _in(0x66680a92, 0x700f43df, ped, _r); 
}

/**
 * 
 * @param ped
 * @param eventId
 */
export function hasPedReceivedEvent(ped: number, eventId: number): boolean {
	return _in(0x8507bcb7, 0x10fa6dc0, ped, eventId, _r); 
}

/**
 * 
 * @param asset
 */
export function hasStealthModeAssetLoaded(asset: string): boolean {
	return _in(0xe977fc5b, 0x08af3441, _ts(asset), _r); 
}

/**
 * 
 */
export function hasPedheadshotImgUploadFailed(): boolean {
	return _in(0x876928dd, 0xdfccc9cd, _r); 
}

/**
 * 
 * @param ped
 */
export function haveAllStreamingRequestsCompleted(ped: number): boolean {
	return _in(0x73508234, 0x73013c02, ped, _r); 
}

/**
 * 
 */
export function instantlyFillPedPopulation(): void {
	return _in(0x4759cc73, 0x0f947c81); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 */
export function hidePedBloodDamageByZone(ped: number, p1: any, p2: boolean): void {
	return _in(0x62ab7931, 0x44de75dc, ped, p1, p2); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isAnyPedNearPoint(x: number, y: number, z: number, radius: number): boolean {
	return _in(0x08396149, 0x8679dc9f, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isAnyHostilePedNearPoint(ped: number, x: number, y: number, z: number, radius: number): boolean {
	return _in(0x68772db2, 0xb2526f9f, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 */
export function isAnyPedShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): boolean {
	return _in(0xa0d3d71e, 0xa1086c55, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, _r); 
}

/**
 * 
 * @param ped
 */
export function isConversationPedDead(ped: number): boolean {
	return _in(0xe0a0aec2, 0x14b1faba, ped, _r); 
}

/**
 * ```
 * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
 * ```
 * @param ped
 */
export function isPedAPlayer(ped: number): boolean {
	return _in(0x12534c34, 0x8c6cb68b, ped, _r); 
}

/**
 * ```
 * xyz - relative to the world origin.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isCopPedInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0x16ec4839, 0x969f9f5e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * 
 * @param ped
 */
export function isPedAimingFromCover(ped: number): boolean {
	return _in(0x3998b127, 0x6a3300e5, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedBeingJacked(ped: number): boolean {
	return _in(0x9a497fe2, 0xdf198913, ped, _r); 
}

/**
 * ```
 * p1 is always 0
 * ```
 * @param ped
 * @param p1
 */
export function isPedBeingStunned(ped: number, p1: number): boolean {
	return _in(0x4fbacce3, 0xb4138ee8, ped, p1, _r); 
}

/**
 * 
 * @param colorID
 */
export function IsPedBlushColorValid(colorID: number): boolean {
	return _in(0x604e8101, 0x89ee3a59, colorID, _r); 
}

/**
 * 
 * @param colorId
 */
export function IsPedBlushColorValid2(colorId: number): boolean {
	return _in(0xf41b5d29, 0x0c99a3d6, colorId, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param colorID
 */
export function IsPedBodyBlemishValid(colorID: number): boolean {
	return _in(0x09e7eca9, 0x81d9b210, colorID, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedBeingStealthKilled(ped: number): boolean {
	return _in(0x863b23ef, 0xde9c5df2, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedClimbing(ped: number): boolean {
	return _in(0x53e8cb4f, 0x48bfe623, ped, _r); 
}

/**
 * Checks if the component variation is valid, this works great for randomizing components using loops.
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 */
export function isPedComponentVariationValid(ped: number, componentId: number, drawableId: number, textureId: number): boolean {
	return _in(0xe825f6b6, 0xcea7671d, ped, componentId, drawableId, textureId, _r); 
}

/**
 * Seems to consistently return true if the ped is dead, however, it does not detect the dying phase.
 * @param ped
 * @param p1
 * @return Whether the ped is dead or dying.
 */
export function isPedDeadOrDying(ped: number, p1: boolean): boolean {
	return _in(0x3317dedb, 0x88c95038, ped, p1, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedDiving(ped: number): boolean {
	return _in(0x5527b824, 0x6fef9b11, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function IsPedDoingBeastJump(ped: number): boolean {
	return _in(0x451d0501, 0x2ccec234, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedDucking(ped: number): boolean {
	return _in(0xd125ae74, 0x8725c6bc, ped, _r); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function isPedDefensiveAreaActive(ped: number, p1: boolean): boolean {
	return _in(0xba63d9fe, 0x45412247, ped, p1, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedDoingDriveby(ped: number): boolean {
	return _in(0xb2c086cc, 0x1bf8f2bf, ped, _r); 
}

/**
 * ```
 * angle is ped's view cone
 * ```
 * @param ped
 * @param otherPed
 * @param angle
 */
export function isPedFacingPed(ped: number, otherPed: number, angle: number): boolean {
	return _in(0xd71649db, 0x0a545aa3, ped, otherPed, _fv(angle), _r); 
}

/**
 * ```
 * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
 * If the handle is invalid, the function returns true.
 * ```
 * @param ped
 */
export function isPedFatallyInjured(ped: number): boolean {
	return _in(0xd8394507, 0x56ed5a80, ped, _r); 
}

/**
 * ```
 * Presumably returns the Entity that the Ped is currently diving out of the way of.
 * var num3;
 * if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
 * if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
 * ```
 * @param ped
 * @param evadingEntity
 */
export function isPedEvasiveDiving(ped: number): boolean {
	return _in(0x414641c2, 0x6e105898, ped, _i, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedFalling(ped: number): boolean {
	return _in(0xfb92a102, 0xf1c4dfa3, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedFleeing(ped: number): boolean {
	return _in(0xbbcce00b, 0x381f8482, ped, _r); 
}

/**
 * 
 * @param ped
 * @param groupId
 */
export function isPedGroupMember(ped: number, groupId: number): boolean {
	return _in(0x9bb01e38, 0x34671191, ped, groupId, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedGettingIntoAVehicle(ped: number): boolean {
	return _in(0xbb062b2b, 0x5722478e, ped, _r); 
}

/**
 * 
 * @param colorID
 */
export function IsPedHairColorValid(colorID: number): boolean {
	return _in(0xe0d36e5d, 0x9e99cc21, colorID, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedGoingIntoCover(ped: number): boolean {
	return _in(0x9f65dbc5, 0x37e59ad5, ped, _r); 
}

/**
 * 
 * @param colorId
 */
export function IsPedHairColorValid2(colorId: number): boolean {
	return _in(0xed6d8e27, 0xa43b8cde, colorId, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedHangingOnToVehicle(ped: number): boolean {
	return _in(0x1c86d8ae, 0xf8254b78, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function IsPedHelmetUnk(ped: number): boolean {
	return _in(0xb9496ce4, 0x7546db2c, ped, _r); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param p4
 */
export function isPedHeadingTowardsPosition(ped: number, x: number, y: number, z: number, p4: number): boolean {
	return _in(0xfcf37a45, 0x7cb96dc0, ped, _fv(x), _fv(y), _fv(z), _fv(p4), _r); 
}

/**
 * ```
 * Returns true/false if the ped is/isn't humanoid.
 * ```
 * @param ped
 */
export function isPedHuman(ped: number): boolean {
	return _in(0xb980061d, 0xa992779d, ped, _r); 
}

/**
 * 
 * @param ped
 * @param entity
 */
export function isPedHeadtrackingEntity(ped: number, entity: number): boolean {
	return _in(0x813a0a7c, 0x9d2e831f, ped, entity, _r); 
}

/**
 * 
 * @param ped1
 * @param ped2
 */
export function isPedHeadtrackingPed(ped1: number, ped2: number): boolean {
	return _in(0x5cd3cb88, 0xa7f8850d, ped1, ped2, _r); 
}

/**
 * ```
 * Returns whether the specified ped is hurt.
 * ```
 * @param ped
 */
export function isPedHurt(ped: number): boolean {
	return _in(0x5983bb44, 0x9d7fdb12, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnyHeli(ped: number): boolean {
	return _in(0x298b91ae, 0x825e5705, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnyBoat(ped: number): boolean {
	return _in(0x2e0e1c2b, 0x4f6cb339, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnyPoliceVehicle(ped: number): boolean {
	return _in(0x0bd04e29, 0x640c9c12, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnyPlane(ped: number): boolean {
	return _in(0x5fff4cfc, 0x74d8fb80, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnyTaxi(ped: number): boolean {
	return _in(0x6e575d6a, 0x898ab852, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnySub(ped: number): boolean {
	return _in(0xfbfc01cc, 0xfb35d99e, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInAnyTrain(ped: number): boolean {
	return _in(0x6f972c1a, 0xb75a1ed0, ped, _r); 
}

/**
 * Returns whether the specified ped is in any vehicle. If `atGetIn` is set to true, also returns true if the ped is
 * currently in the process of entering a vehicle (a specific stage check for `CTaskEnterVehicle`).
 * @param ped
 * @param atGetIn
 * @return Whether or not the ped is currently involved in any vehicle.
 */
export function isPedInAnyVehicle(ped: number, atGetIn: boolean): boolean {
	return _in(0x997abd67, 0x1d25ca0b, ped, atGetIn, _r); 
}

/**
 * ```
 * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
 * p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4 -- [[14]] ], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
 * ```
 * @param ped
 * @param target
 */
export function isPedInCombat(ped: number, target: number): boolean {
	return _in(0x4859f1fc, 0x66a6278e, ped, target, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInCoverFacingLeft(ped: number): boolean {
	return _in(0x845333b3, 0x150583ab, ped, _r); 
}

/**
 * ```
 * p1 is nearly always 0 in the scripts.
 * ```
 * @param ped
 * @param exceptUseWeapon
 */
export function isPedInCover(ped: number, exceptUseWeapon: boolean): boolean {
	return _in(0x60dfd069, 0x1a170b88, ped, exceptUseWeapon, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInGroup(ped: number): boolean {
	return _in(0x5891cac5, 0xd4acff74, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInFlyingVehicle(ped: number): boolean {
	return _in(0x91348735, 0x37fa419c, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInHighCover(ped: number): boolean {
	return _in(0x6a03bf94, 0x3d767c93, ped, _r); 
}

/**
 * 
 * @param ped
 * @param modelHash
 */
export function isPedInModel(ped: number, modelHash: number): boolean {
	return _in(0x796d90ef, 0xb19aa332, ped, _ch(modelHash), _r); 
}

/**
 * ```
 * Notes: The function only returns true while the ped is:
 * A.) Swinging a random melee attack (including pistol-whipping)
 * B.) Reacting to being hit by a melee attack (including pistol-whipping)
 * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
 * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
 * ```
 * @param ped
 */
export function isPedInMeleeCombat(ped: number): boolean {
	return _in(0x4e209b2c, 0x1ead5159, ped, _r); 
}

/**
 * ```
 * Gets a value indicating whether the specified ped is in the specified vehicle.
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * ```
 * @param ped
 * @param vehicle
 * @param atGetIn
 */
export function isPedInVehicle(ped: number, vehicle: number, atGetIn: boolean): boolean {
	return _in(0xa3ee4a07, 0x279bb9db, ped, vehicle, atGetIn, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedInParachuteFreeFall(ped: number): boolean {
	return _in(0x7dce8bda, 0x0f1c1200, ped, _r); 
}

/**
 * ```
 * Gets a value indicating whether this ped's health is below its injured threshold.
 * The default threshold is 100.
 * ```
 * @param ped
 */
export function isPedInjured(ped: number): boolean {
	return _in(0x84a2dd9a, 0xc37c35c1, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedJacking(ped: number): boolean {
	return _in(0x4ae4ff91, 0x1dfb61da, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedJumping(ped: number): boolean {
	return _in(0xcedabc59, 0x00a0bf97, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedJumpingOutOfVehicle(ped: number): boolean {
	return _in(0x433ddffe, 0x2044b636, ped, _r); 
}

/**
 * 
 * @param colorID
 */
export function IsPedLipstickColorValid(colorID: number): boolean {
	return _in(0x0525a2c2, 0x562f3cd4, colorID, _r); 
}

/**
 * 
 * @param colorId
 */
export function IsPedLipstickColorValid2(colorId: number): boolean {
	return _in(0x3e802f11, 0xfbe27674, colorId, _r); 
}

/**
 * ```
 * Returns true/false if the ped is/isn't male.
 * ```
 * @param ped
 */
export function isPedMale(ped: number): boolean {
	return _in(0x6d9f5faa, 0x7488ba46, ped, _r); 
}

/**
 * 
 * @param ped
 * @param modelHash
 */
export function isPedModel(ped: number, modelHash: number): boolean {
	return _in(0xc9d55b1a, 0x358a5bf7, ped, _ch(modelHash), _r); 
}

/**
 * 
 * @param ped
 */
export function isPedOnAnyBike(ped: number): boolean {
	return _in(0x94495889, 0xe22c6479, ped, _r); 
}

/**
 * ```
 * Same function call as PED::GET_MOUNT, aka just returns 0
 * ```
 * @param ped
 */
export function isPedOnMount(ped: number): boolean {
	return _in(0x460bc76a, 0x0e10655e, ped, _r); 
}

/**
 * 
 * @param ped
 * @param vehicle
 */
export function isPedOnSpecificVehicle(ped: number, vehicle: number): boolean {
	return _in(0xec5f66e4, 0x59af3bb2, ped, vehicle, _r); 
}

/**
 * ```
 * Gets a value indicating whether the specified ped is on top of any vehicle.
 * Return 1 when ped is on vehicle.
 * Return 0 when ped is not on a vehicle.
 * ```
 * @param ped
 */
export function isPedOnVehicle(ped: number): boolean {
	return _in(0x67722aeb, 0x798e5fab, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedOnFoot(ped: number): boolean {
	return _in(0x01fee67d, 0xb37f59b2, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedPerformingDependentComboLimit(ped: number): boolean {
	return _in(0xebd0edba, 0x5be957cf, ped, _r); 
}

/**
 * ```
 * IS_PED_*
 * 
 * Returns true if the ped is currently opening a door (CTaskOpenDoor).
 * ```
 * @param ped
 */
export function IsPedOpeningADoor(ped: number): boolean {
	return _in(0x26af0e8e, 0x30bd2a2c, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedPerformingMeleeAction(ped: number): boolean {
	return _in(0xdcca191d, 0xf9980fd7, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedPerformingStealthKill(ped: number): boolean {
	return _in(0xfd4ccdbc, 0xc59941b7, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedPlantingBomb(ped: number): boolean {
	return _in(0xc70b5fae, 0x151982d8, ped, _r); 
}

/**
 * ```
 * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
 * ```
 * @param ped
 */
export function isPedRagdoll(ped: number): boolean {
	return _in(0x47e4e977, 0x581c5b55, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedProne(ped: number): boolean {
	return _in(0xd6a86331, 0xa537a7b9, ped, _r); 
}

/**
 * 
 * @param ped
 * @param event
 */
export function isPedRespondingToEvent(ped: number, event: any): boolean {
	return _in(0x625b774d, 0x75c87068, ped, event, _r); 
}

/**
 * ```
 * Returns whether the specified ped is reloading.
 * ```
 * @param ped
 */
export function isPedReloading(ped: number): boolean {
	return _in(0x24b100c6, 0x8c645951, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedRunningMeleeTask(ped: number): boolean {
	return _in(0xd1871251, 0xf3b5acd7, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedRunningRagdollTask(ped: number): boolean {
	return _in(0xe3b6097c, 0xc25aa69e, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function IsPedShaderEffectValid(ped: number): boolean {
	return _in(0x81aa517f, 0xbba05d39, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedRunningMobilePhoneTask(ped: number): boolean {
	return _in(0x2afe52f7, 0x82f25775, ped, _r); 
}

/**
 * ```
 * Detect if ped is in any vehicle
 * [True/False]
 * ```
 * @param ped
 */
export function isPedSittingInAnyVehicle(ped: number): boolean {
	return _in(0x826aa586, 0xedb9fef8, ped, _r); 
}

/**
 * 
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p7
 * @param p8
 */
export function isPedShootingInArea(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean): boolean {
	return _in(0x7e9dfe24, 0xac1e58ef, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, _r); 
}

/**
 * ```
 * Returns whether the specified ped is shooting.
 * ```
 * @param ped
 */
export function isPedShooting(ped: number): boolean {
	return _in(0x34616828, 0xcd07f1a1, ped, _r); 
}

/**
 * ```
 * Detect if ped is sitting in the specified vehicle
 * [True/False]
 * ```
 * @param ped
 * @param vehicle
 */
export function isPedSittingInVehicle(ped: number, vehicle: number): boolean {
	return _in(0xa808aa1d, 0x79230fc2, ped, vehicle, _r); 
}

/**
 * 
 * @param Ped
 */
export function IsPedSwappingWeapon(Ped: number): boolean {
	return _in(0x3795688a, 0x307e1eb6, Ped, _r); 
}

/**
 * ```
 * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
 * ```
 * @param ped
 */
export function isPedStopped(ped: number): boolean {
	return _in(0x530944f6, 0xf4b8a214, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedSwimmingUnderWater(ped: number): boolean {
	return _in(0xc024869a, 0x53992f34, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedSwimming(ped: number): boolean {
	return _in(0x9de32763, 0x1295b4c2, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedTakingOffHelmet(ped: number): boolean {
	return _in(0x14590ddb, 0xedb1ec85, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedTracked(ped: number): boolean {
	return _in(0x4c5e1f08, 0x7cd10bb7, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedUsingActionMode(ped: number): boolean {
	return _in(0x00e73468, 0xd085f745, ped, _r); 
}

/**
 * 
 * @param ped
 * @param scenario
 */
export function isPedUsingScenario(ped: number, scenario: string): boolean {
	return _in(0x1bf09473, 0x6dd62c2e, ped, _ts(scenario), _r); 
}

/**
 * 
 * @param ped
 */
export function isPedVaulting(ped: number): boolean {
	return _in(0x117c70d1, 0xf5730b5e, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedTryingToEnterALockedVehicle(ped: number): boolean {
	return _in(0x44d28d5d, 0xdfe5f68c, ped, _r); 
}

/**
 * 
 */
export function isPedheadshotImgUploadAvailable(): boolean {
	return _in(0xebb37677, 0x9a760aa8, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedUsingAnyScenario(ped: number): boolean {
	return _in(0x57ab4a30, 0x80f85143, ped, _r); 
}

/**
 * ```
 * Returns true if the ped passed through the parenthesis is wearing a helmet.
 * ```
 * @param ped
 */
export function isPedWearingHelmet(ped: number): boolean {
	return _in(0xf33bdfe1, 0x9b309b19, ped, _r); 
}

/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * @param id
 */
export function isPedheadshotReady(id: number): boolean {
	return _in(0x70852288, 0x42b13a67, id, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 */
export function IsScubaGearLightEnabled(ped: number): boolean {
	return _in(0x88274c11, 0xcf0d866d, ped, _r); 
}

/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * @param id
 */
export function isPedheadshotValid(id: number): boolean {
	return _in(0xa0a9668f, 0x158129a2, id, _r); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param ped
 * @param animDict
 * @param anim
 */
export function isScriptedScenarioPedUsingConditionalAnim(ped: number, animDict: string, anim: string): boolean {
	return _in(0x6ec47a34, 0x4923e1ed, ped, _ts(animDict), _ts(anim), _r); 
}

/**
 * ```
 * Returns true if a synchronized scene is running
 * ```
 * @param sceneId
 */
export function isSynchronizedSceneRunning(sceneId: number): boolean {
	return _in(0x25d39b93, 0x5a038a26, sceneId, _r); 
}

/**
 * 
 * @param sceneID
 */
export function isSynchronizedSceneHoldLastFrame(sceneID: number): boolean {
	return _in(0x7f2f4f13, 0xac5257ef, sceneID, _r); 
}

/**
 * 
 * @param sceneID
 */
export function isSynchronizedSceneLooped(sceneID: number): boolean {
	return _in(0x62522002, 0xe0c391ba, sceneID, _r); 
}

/**
 * ```
 * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
 * Target needs to be tracked.. won't work otherwise.
 * ```
 * @param ped
 */
export function isTrackedPedVisible(ped: number): boolean {
	return _in(0x91c8e617, 0xf64188ac, ped, _r); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function knockOffPedProp(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean): void {
	return _in(0x6fd7816a, 0x36615f48, ped, p1, p2, p3, p4); 
}

/**
 * 
 * @param ped
 */
export function knockPedOffVehicle(ped: number): void {
	return _in(0x45bbcba7, 0x7c29a841, ped); 
}

/**
 * ```
 * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
 * ```
 * @param ped
 * @param radius
 */
export function registerHatedTargetsAroundPed(ped: number, radius: number): void {
	return _in(0x9222f300, 0xbf8354fe, ped, _fv(radius)); 
}

/**
 * 
 * @param ped
 * @param animName
 * @param animDict
 */
export function playFacialAnim(ped: number, animName: string, animDict: string): void {
	return _in(0xe1e65ca8, 0xac9c00ed, ped, _ts(animName), _ts(animDict)); 
}

/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * @param ped
 * @return The Pedheadshot handle.
 */
export function registerPedheadshot(ped: number): number {
	return _in(0x44626587, 0x88425076, ped, _r, _ri); 
}

/**
 * ```
 * PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
 * l_216 = RECSBRobber1
 * ```
 * @param ped
 * @param target
 */
export function registerTarget(ped: number, target: number): void {
	return _in(0x2f25d9ae, 0xfa34fba2, ped, target); 
}

/**
 * 
 * @param ped
 */
export function RegisterPedheadshot3(ped: number): number {
	return _in(0xba8805a1, 0x108a2515, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function releasePedPreloadPropData(ped: number): void {
	return _in(0xf79f9def, 0x0aade61a, ped); 
}

/**
 * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black.
 * 
 * **Result of the example code:**
 * <https://i.imgur.com/iHz8ztn.png>
 * @param ped
 * @return The Pedheadshot handle.
 */
export function registerPedheadshotTransparent(ped: number): number {
	return _in(0x953563ce, 0x563143af, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function releasePedPreloadVariationData(ped: number): void {
	return _in(0x5aab586f, 0xfec0fd96, ped); 
}

/**
 * 
 * @param asset
 */
export function removeActionModeAsset(asset: string): void {
	return _in(0x13e940f8, 0x8470fa51, _ts(asset)); 
}

/**
 * 
 * @param id
 */
export function releasePedheadshotImgUpload(id: number): void {
	return _in(0x5d517b27, 0xcf6ecd04, id); 
}

/**
 * 
 * @param groupId
 */
export function removeGroup(groupId: number): void {
	return _in(0x8eb2f690, 0x76af7053, groupId); 
}

/**
 * ```
 * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed.
 * ```
 * @param ped
 */
export function removePedElegantly(): void {
	return _in(0xac6d445b, 0x994df95e, _i); 
}

/**
 * ```
 * Ped will no longer get angry when you stay near him.
 * ```
 * @param ped
 * @param toggle
 */
export function removePedDefensiveArea(ped: number, toggle: boolean): void {
	return _in(0x74d4e028, 0x107450a9, ped, toggle); 
}

/**
 * 
 * @param ped
 */
export function removePedFromGroup(ped: number): void {
	return _in(0xed74007f, 0xfb146bc2, ped); 
}

/**
 * 
 * @param ped
 * @param instantly
 */
export function removePedHelmet(ped: number, instantly: boolean): void {
	return _in(0xa7b2458d, 0x0ad6ded8, ped, instantly); 
}

/**
 * 
 * @param ped
 */
export function removePedPreferredCoverSet(ped: number): void {
	return _in(0xfddb234c, 0xf74073d9, ped); 
}

/**
 * 
 * @param groupHash
 */
export function removeRelationshipGroup(groupHash: number): void {
	return _in(0xb6ba2444, 0xab393da2, _ch(groupHash)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function removeScenarioBlockingArea(p0: any, p1: boolean): void {
	return _in(0x31d16b74, 0xc6e29d66, p0, p1); 
}

/**
 * 
 * @param asset
 */
export function requestActionModeAsset(asset: string): void {
	return _in(0x290e2780, 0xbb7aa598, _ts(asset)); 
}

/**
 * 
 */
export function removeScenarioBlockingAreas(): void {
	return _in(0xd37401d7, 0x8a929a49); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function requestPedVehicleVisibilityTracking(ped: number, p1: boolean): void {
	return _in(0x2bc338a7, 0xb21f4608, ped, p1); 
}

/**
 * 
 * @param asset
 */
export function removeStealthModeAsset(asset: string): void {
	return _in(0x9219857d, 0x21f0e842, _ts(asset)); 
}

/**
 * 
 * @param ped
 */
export function requestPedVisibilityTracking(ped: number): void {
	return _in(0x7d7a2e43, 0xe74e2eb8, ped); 
}

/**
 * 
 * @param id
 */
export function requestPedheadshotImgUpload(id: number): boolean {
	return _in(0xf0daef2f, 0x545bee25, id, _r); 
}

/**
 * 
 */
export function resetAiMeleeWeaponDamageModifier(): void {
	return _in(0x46e56a7c, 0xd1d63c3f); 
}

/**
 * 
 * @param asset
 */
export function requestStealthModeAsset(asset: string): void {
	return _in(0x2a0a62fc, 0xdee16d4f, _ts(asset)); 
}

/**
 * 
 * @param groupHandle
 */
export function resetGroupFormationDefaultSpacing(groupHandle: number): void {
	return _in(0x63dab4cc, 0xb3273205, groupHandle); 
}

/**
 * 
 */
export function resetAiWeaponDamageModifier(): void {
	return _in(0xea16670e, 0x7ba4743c); 
}

/**
 * ```
 * Resets the value for the last vehicle driven by the Ped.
 * ```
 * @param ped
 */
export function resetPedLastVehicle(ped: number): void {
	return _in(0xbb8de8cf, 0x6a8dd8bb, ped); 
}

/**
 * 
 * @param ped
 */
export function resetPedInVehicleContext(ped: number): void {
	return _in(0x22ef8ff8, 0x778030eb, ped); 
}

/**
 * 
 * @param ped
 * @param transitionSpeed
 */
export function resetPedMovementClipset(ped: number, transitionSpeed: number): void {
	return _in(0xaa74ec0c, 0xb0aaea2c, ped, _fv(transitionSpeed)); 
}

/**
 * 
 * @param ped
 */
export function resetPedStrafeClipset(ped: number): void {
	return _in(0x20510814, 0x175ea477, ped); 
}

/**
 * 
 * @param ped
 */
export function resetPedVisibleDamage(ped: number): void {
	return _in(0x3ac1f7b8, 0x98f30c05, ped); 
}

/**
 * 
 * @param ped
 */
export function resetPedRagdollTimer(ped: number): void {
	return _in(0x9fa4664c, 0xf62e47e8, ped); 
}

/**
 * 
 * @param ped
 */
export function resetPedWeaponMovementClipset(ped: number): void {
	return _in(0x97b0db5b, 0x4aa74e77, ped); 
}

/**
 * ```
 * It will revive/cure the injured ped. The condition is ped must not be dead.
 * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
 * This function is well suited there.
 * ```
 * @param ped
 */
export function reviveInjuredPed(ped: number): void {
	return _in(0x8d8acd83, 0x88cd99ce, ped); 
}

/**
 * ```
 * This function will simply bring the dead person back to life.
 * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
 * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
 * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
 * ```
 * @param ped
 */
export function resurrectPed(ped: number): void {
	return _in(0x71bc8e83, 0x8b9c6035, ped); 
}

/**
 * 
 * @param value
 */
export function setAiWeaponDamageModifier(value: number): void {
	return _in(0x1b1e2a40, 0xa65b8521, _fv(value)); 
}

/**
 * ```
 * works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
 * ```
 * @param ped
 * @param toggle
 */
export function setBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void {
	return _in(0x9f8aa94d, 0x6d97dbf4, ped, toggle); 
}

/**
 * ```
 * Setting ped to true allows the ped to shoot "friendlies".
 * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
 * p1 = false & p2 = false for unable to aim at.
 * p1 = true & p2 = false for able to aim at.
 * ```
 * @param ped
 * @param toggle
 * @param p2
 */
export function setCanAttackFriendly(ped: number, toggle: boolean, p2: boolean): void {
	return _in(0xb3b1cb34, 0x9ff9c75d, ped, toggle, p2); 
}

/**
 * 
 * @param modifier
 */
export function setAiMeleeWeaponDamageModifier(modifier: number): void {
	return _in(0x66460ded, 0xdd417254, _fv(modifier)); 
}

/**
 * 
 * @param ped
 * @param combatType
 * @param p2
 */
export function setCombatFloat(ped: number, combatType: number, p2: number): void {
	return _in(0xff41b4b1, 0x41ed981c, ped, combatType, _fv(p2)); 
}

/**
 * 
 * @param toggle
 */
export function setCreateRandomCops(toggle: boolean): void {
	return _in(0x102e68b2, 0x024d536d, toggle); 
}

/**
 * 
 * @param p0
 */
export function setAmbientPedsDropMoney(p0: boolean): void {
	return _in(0x6b0e6172, 0xc9a4d902, p0); 
}

/**
 * 
 * @param toggle
 */
export function setCreateRandomCopsNotOnScenarios(toggle: boolean): void {
	return _in(0x8a498685, 0x1c4ef6e7, toggle); 
}

/**
 * ```
 * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
 * ```
 * @param driver
 * @param ability
 */
export function setDriverAbility(driver: number, ability: number): void {
	return _in(0xb195ffa8, 0x042fc5c3, driver, _fv(ability)); 
}

/**
 * ```
 * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
 * ```
 * @param driver
 * @param modifier
 */
export function setDriverRacingModifier(driver: number, modifier: number): void {
	return _in(0xded5af5a, 0x0ea4b297, driver, _fv(modifier)); 
}

/**
 * Used with [SET_ENABLE_HANDCUFFS](#\_0xDF1AF8B5D56542FA) in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
 * @param ped
 * @param toggle
 */
export function setEnableBoundAnkles(ped: number, toggle: boolean): void {
	return _in(0xc52e0f85, 0x5c58fc2e, ped, toggle); 
}

/**
 * ```
 * range 0.0f - 1.0f
 * ```
 * @param driver
 * @param aggressiveness
 */
export function setDriverAggressiveness(driver: number, aggressiveness: number): void {
	return _in(0xa731f608, 0xca104e3c, driver, _fv(aggressiveness)); 
}

/**
 * ```
 * ped can not pull out a weapon when true
 * ```
 * @param ped
 * @param toggle
 */
export function setEnableHandcuffs(ped: number, toggle: boolean): void {
	return _in(0xdf1af8b5, 0xd56542fa, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setEnablePedEnveffScale(ped: number, toggle: boolean): void {
	return _in(0xd2c5aa0c, 0x0e8d0f1e, ped, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setCreateRandomCopsOnScenarios(toggle: boolean): void {
	return _in(0x444cb7d7, 0xdbe6973d, toggle); 
}

/**
 * ```
 * Enables diving motion when underwater.
 * ```
 * @param ped
 * @param toggle
 */
export function setEnableScuba(ped: number, toggle: boolean): void {
	return _in(0xf99f6200, 0x4024d506, ped, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param toggle
 */
export function SetEnableScubaGearLight(ped: number, toggle: boolean): void {
	return _in(0xee2476b9, 0xee4a094f, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param animName
 * @param animDict
 */
export function setFacialIdleAnimOverride(ped: number, animName: string, animDict: string): void {
	return _in(0xffc24b98, 0x8b938b38, ped, _ts(animName), _ts(animDict)); 
}

/**
 * Clipsets:
 * "facials@gen_female@base"
 * "facials@gen_male@base"
 * "facials@p_m_zero@base"
 * 
 * Typically followed with [SET_FACIAL_IDLE_ANIM_OVERRIDE](#\_0xFFC24B988B938B38):
 * "mood_drunk\_1"
 * "mood_stressed\_1"
 * "mood_happy\_1"
 * "mood_talking\_1"
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param animDict
 */
export function SetFacialClipsetOverride(ped: number, animDict: string): void {
	return _in(0x5687c7f0, 0x5b39e401, ped, _ts(animDict)); 
}

/**
 * ```
 * 0: Freedom to move
 * 1: Circle Around Leader
 * 2: Alternative Circle Around Leader
 * 3: Line, with Leader at center
 * 4: Arrow Formation
 * 5: "V" Formation
 * 6: Line Follow Formation
 * 7: Single Formation
 * 8: Pairwise
 * ```
 * @param groupId
 * @param formationType
 */
export function setGroupFormation(groupId: number, formationType: number): void {
	return _in(0xce2f5fc3, 0xaf7e8c1e, groupId, formationType); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setForceFootstepUpdate(ped: number, toggle: boolean): void {
	return _in(0x129466ed, 0x55140f8d, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param type
 * @param p3
 */
export function setForceStepType(ped: number, p1: boolean, type: number, p3: number): void {
	return _in(0xcb968b53, 0xfc7f916d, ped, p1, type, p3); 
}

/**
 * Preview: https://gfycat.com/MaleRareAmazonparrot
 * @param ped
 * @param r
 * @param g
 * @param b
 * @param id
 */
export function setHeadBlendPaletteColor(ped: number, r: number, g: number, b: number, id: number): void {
	return _in(0xcc9682b8, 0x951c5229, ped, r, g, b, id); 
}

/**
 * 
 * @param groupId
 * @param p1
 * @param p2
 * @param p3
 */
export function setGroupFormationSpacing(groupId: number, p1: number, p2: number, p3: number): void {
	return _in(0x1d9d4500, 0x4c28c916, groupId, _fv(p1), _fv(p2), _fv(p3)); 
}

/**
 * 
 * @param ped
 * @param ikIndex
 * @param entityLookAt
 * @param boneLookAt
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param p7
 * @param blendInDuration
 * @param blendOutDuration
 */
export function setIkTarget(ped: number, ikIndex: number, entityLookAt: number, boneLookAt: number, offsetX: number, offsetY: number, offsetZ: number, p7: any, blendInDuration: number, blendOutDuration: number): void {
	return _in(0xc32779c1, 0x6fceecd9, ped, ikIndex, entityLookAt, boneLookAt, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p7, blendInDuration, blendOutDuration); 
}

/**
 * ```
 * Sets the range at which members will automatically leave the group.
 * ```
 * @param groupHandle
 * @param separationRange
 */
export function setGroupSeparationRange(groupHandle: number, separationRange: number): void {
	return _in(0x4102c785, 0x8cfee4e4, groupHandle, _fv(separationRange)); 
}

/**
 * ```
 * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
 * ```
 * @param ped
 * @param name
 */
export function setMovementModeOverride(ped: number, name: string): void {
	return _in(0x781de8fa, 0x214e87d2, ped, _ts(name)); 
}

/**
 * ```
 * accuracy = 0-100, 100 being perfectly accurate
 * ```
 * @param ped
 * @param accuracy
 */
export function setPedAccuracy(ped: number, accuracy: number): void {
	return _in(0x7aefb85c, 0x1d49deb6, ped, accuracy); 
}

/**
 * ```
 * value ranges from 0 to 3.
 * ```
 * @param ped
 * @param value
 */
export function setPedAlertness(ped: number, value: number): void {
	return _in(0xdba71115, 0xed9941a6, ped, value); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedAllowedToDuck(ped: number, toggle: boolean): void {
	return _in(0xda1f1b7b, 0xe1a8766f, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedAllowVehiclesOverride(ped: number, toggle: boolean): void {
	return _in(0x3c028c63, 0x6a414ed9, ped, toggle); 
}

/**
 * ```
 * stance:
 * 0 = idle
 * 1 = walk
 * 2 = running
 * p5 = usually set to true
 * ```
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param ped
 * @param stance
 * @param animDictionary
 * @param animationName
 * @param p4
 * @param p5
 */
export function setPedAlternateMovementAnim(ped: number, stance: number, animDictionary: string, animationName: string, p4: number, p5: boolean): void {
	return _in(0x90a43cc2, 0x81ffab46, ped, stance, _ts(animDictionary), _ts(animationName), _fv(p4), p5); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 */
export function setPedAlternateWalkAnim(ped: number, animDict: string, animName: string, p3: number, p4: boolean): void {
	return _in(0x6c60394c, 0xb4f75e9a, ped, _ts(animDict), _ts(animName), _fv(p3), p4); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function setPedAngledDefensiveArea(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: boolean): void {
	return _in(0xc7f76df2, 0x7a5045a1, ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8, p9); 
}

/**
 * ```
 * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
 * ```
 * @param ped
 * @param toggle
 */
export function setPedAoBlobRendering(ped: number, toggle: boolean): void {
	return _in(0x2b5aa717, 0xa181fb4c, ped, toggle); 
}

/**
 * ```
 * Sets the armor of the specified ped.
 * ped: The Ped to set the armor of.
 * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
 * ```
 * @param ped
 * @param amount
 */
export function setPedArmour(ped: number, amount: number): void {
	return _in(0xcea04d83, 0x135264cc, ped, amount); 
}

/**
 * ```
 * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
 * ```
 * @param ped
 * @param toggle
 */
export function setPedAsCop(ped: number, toggle: boolean): void {
	return _in(0xbb03c38d, 0xd3fb7ffd, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param groupId
 */
export function setPedAsGroupLeader(ped: number, groupId: number): void {
	return _in(0x2a781960, 0x5465fbce, ped, groupId); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedAsEnemy(ped: number, toggle: boolean): void {
	return _in(0x02a0c972, 0x0b854bfa, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param groupId
 */
export function setPedAsGroupMember(ped: number, groupId: number): void {
	return _in(0x9f3480fe, 0x65db31b5, ped, groupId); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedBlocksPathingWhenDead(ped: number, toggle: boolean): void {
	return _in(0x576594e8, 0xd64375e2, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanArmIk(ped: number, toggle: boolean): void {
	return _in(0x6c3b4d6d, 0x13b4c841, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param father
 * @param mother
 * @param fathersSide
 * @param mothersSide
 */
export function setPedBlendFromParents(ped: number, father: number, mother: number, fathersSide: number, mothersSide: number): void {
	return _in(0x137bbd05, 0x230db22d, ped, father, mother, _fv(fathersSide), _fv(mothersSide)); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function setPedBoundsOrientation(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number): void {
	return _in(0x4f5f651a, 0xccc9c4cf, ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanBeDraggedOut(ped: number, toggle: boolean): void {
	return _in(0xc1670e95, 0x8eee24e5, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanBeShotInVehicle(ped: number, toggle: boolean): void {
	return _in(0xc7ef1ba8, 0x3230ba07, ped, toggle); 
}

/**
 * ```
 * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
 * ```
 * @param ped
 * @param state
 */
export function setPedCanBeKnockedOffVehicle(ped: number, state: number): void {
	return _in(0x7a653569, 0x1b477c48, ped, state); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanBeTargetedWhenInjured(ped: number, toggle: boolean): void {
	return _in(0x638c03b0, 0xf9878f57, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanBeTargetted(ped: number, toggle: boolean): void {
	return _in(0x63f58f7c, 0x80513aad, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param player
 * @param toggle
 */
export function setPedCanBeTargettedByPlayer(ped: number, player: number, toggle: boolean): void {
	return _in(0x66b57b72, 0xe0836a76, ped, player, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanBeTargetedWithoutLos(ped: number, toggle: boolean): void {
	return _in(0x4328652a, 0xe5769c71, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param team
 * @param toggle
 */
export function setPedCanBeTargettedByTeam(ped: number, team: number, toggle: boolean): void {
	return _in(0xbf1ca778, 0x33e58f2c, ped, team, toggle); 
}

/**
 * ```
 * It simply makes the said ped to cower behind cover object(wall, desk, car)
 * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
 * ```
 * @param ped
 * @param toggle
 */
export function setPedCanCowerInCover(ped: number, toggle: boolean): void {
	return _in(0xcb7553cd, 0xcef4a735, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanEvasiveDive(ped: number, toggle: boolean): void {
	return _in(0x6b7a646c, 0x242a7059, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanHeadIk(ped: number, toggle: boolean): void {
	return _in(0xc11c1809, 0x2c5530dc, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanLegIk(ped: number, toggle: boolean): void {
	return _in(0x73518ece, 0x2485412b, ped, toggle); 
}

/**
 * It makes the ped lose (or not lose) their props (like glasses or helmets/hat) when someone punches or pushes the ped.
 * This is probably what's being used in GTA:O to keep players from knocking other player's hats/glasses off when in combat.
 * @param ped
 * @param loseProps
 * @param p2
 */
export function setPedCanLosePropsOnDamage(ped: number, loseProps: boolean, p2: number): void {
	return _in(0xe861d0b0, 0x5c7662b8, ped, loseProps, p2); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanPlayAmbientAnims(ped: number, toggle: boolean): void {
	return _in(0x6373d134, 0x9925a70e, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanPeekInCover(ped: number, toggle: boolean): void {
	return _in(0xc514825c, 0x507e3736, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanPlayAmbientBaseAnims(ped: number, toggle: boolean): void {
	return _in(0x0eb0585d, 0x15254740, ped, toggle); 
}

/**
 * ```
 * p2 usually 0
 * ```
 * @param ped
 * @param toggle
 * @param p2
 */
export function setPedCanPlayVisemeAnims(ped: number, toggle: boolean, p2: boolean): void {
	return _in(0xf833ddba, 0x3b104d43, ped, toggle, p2); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanPlayGestureAnims(ped: number, toggle: boolean): void {
	return _in(0xbaf20c54, 0x32058024, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanRagdollFromPlayerImpact(ped: number, toggle: boolean): void {
	return _in(0xdf993ee5, 0xe90aba25, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function SetPedCanPlayInjuredAnims(ped: number, p1: boolean): void {
	return _in(0x33a60d8b, 0xdd6e508c, ped, p1); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanRagdoll(ped: number, toggle: boolean): void {
	return _in(0xb1283770, 0x56a54e2a, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 */
export function setPedCanSmashGlass(ped: number, p1: boolean, p2: boolean): void {
	return _in(0x1cce1414, 0x67ff42a2, ped, p1, p2); 
}

/**
 * ```
 * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
 * Only works in singleplayer
 * ```
 * @param pedHandle
 * @param groupHandle
 * @param toggle
 */
export function setPedCanTeleportToGroupLeader(pedHandle: number, groupHandle: number, toggle: boolean): void {
	return _in(0x2e2f4240, 0xb3f24647, pedHandle, groupHandle, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanSwitchWeapon(ped: number, toggle: boolean): void {
	return _in(0xed7f7efe, 0x9fabf340, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanTorsoIk(ped: number, toggle: boolean): void {
	return _in(0xf2b7106d, 0x37947ce0, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function setPedCanTorsoReactIk(ped: number, p1: boolean): void {
	return _in(0xf5846edb, 0x26a98a24, ped, p1); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function setPedCanTorsoVehicleIk(ped: number, p1: boolean): void {
	return _in(0x6647c5f6, 0xf5792496, ped, p1); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedCanUseAutoConversationLookat(ped: number, toggle: boolean): void {
	return _in(0xec4686ec, 0x06434678, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function setPedClothPackageIndex(ped: number, p1: number): void {
	return _in(0x78c4e996, 0x1db3eb5b, ped, p1); 
}

/**
 * ```
 * Overrides the ped's collision capsule radius for the current tick.
 * Must be called every tick to be effective.
 * Setting this to 0.001 will allow warping through some objects.
 * ```
 * @param ped
 * @param value
 */
export function setPedCapsule(ped: number, value: number): void {
	return _in(0x364df566, 0xec833de2, ped, _fv(value)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setPedClothProne(p0: any, p1: any): void {
	return _in(0x82a3d6d9, 0xcc2cb8e3, p0, p1); 
}

/**
 * ```
 * 100 would equal attack
 * less then 50ish would mean run away
 * Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:
 * 0: CA_Poor
 * 1: CA_Average
 * 2: CA_Professional
 * Tested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.
 * ```
 * @param ped
 * @param p1
 */
export function setPedCombatAbility(ped: number, p1: number): void {
	return _in(0xc7622c0d, 0x36b2fda8, ped, p1); 
}

/**
 * These combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.
 * So far, these are the equivalents found:
 * 
 * ```
 * enum CombatAttributes
 * {
 * BF_CanUseCover = 0,
 * BF_CanUseVehicles = 1,
 * BF_CanDoDrivebys = 2,
 * BF_CanLeaveVehicle = 3,
 * BF_CanFightArmedPedsWhenNotArmed = 5,
 * BF_CanTauntInVehicle = 20,
 * BF_AlwaysFight = 46,
 * BF_IgnoreTrafficWhenDriving = 52,
 * BF_FleesFromInvincibleOpponents = 63,
 * BF_FreezeMovement = 292,
 * BF_PlayerCanUseFiringWeapons = 1424
 * };
 * ```
 * 
 * 8 = ?\
 * 9 = ?\
 * 13 = ?\
 * 14 ?\
 * Research thread: gtaforums.com/topic/833391-researchguide-combat-behaviour-flags/
 * @param ped
 * @param attributeIndex
 * @param enabled
 */
export function setPedCombatAttributes(ped: number, attributeIndex: number, enabled: boolean): void {
	return _in(0x9f779473, 0x0795e019, ped, attributeIndex, enabled); 
}

/**
 * ```
 * 0 - Stationary (Will just stand in place)
 * 1 - Defensive (Will try to find cover and very likely to blind fire)
 * 2 - Offensive (Will attempt to charge at enemy but take cover as well)
 * 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
 * ```
 * @param ped
 * @param combatMovement
 */
export function setPedCombatMovement(ped: number, combatMovement: number): void {
	return _in(0x4d9ca100, 0x9afbd057, ped, combatMovement); 
}

/**
 * ```
 * Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described as AttackRange in combatbehaviour.meta:
 * 0: CR_Near
 * 1: CR_Medium
 * 2: CR_Far
 * ```
 * @param ped
 * @param p1
 */
export function setPedCombatRange(ped: number, p1: number): void {
	return _in(0x3c606747, 0xb23e497b, ped, p1); 
}

/**
 * This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.
 * 
 * ### MP Freemode list of components
 * 
 * **0**: Face
 * **1**: Mask
 * **2**: Hair
 * **3**: Torso
 * **4**: Leg
 * **5**: Parachute / bag
 * **6**: Shoes
 * **7**: Accessory
 * **8**: Undershirt
 * **9**: Kevlar
 * **10**: Badge
 * **11**: Torso 2
 * 
 * List of Component IDs
 * 
 * ```cpp
 * // Components
 * enum ePedVarComp
 * {
 * PV_COMP_INVALID = 0xFFFFFFFF,
 * PV_COMP_HEAD = 0, // "HEAD"
 * PV_COMP_BERD = 1, // "BEARD"
 * PV_COMP_HAIR = 2, // "HAIR"
 * PV_COMP_UPPR = 3, // "UPPER"
 * PV_COMP_LOWR = 4, // "LOWER"
 * PV_COMP_HAND = 5, // "HAND"
 * PV_COMP_FEET = 6, // "FEET"
 * PV_COMP_TEEF = 7, // "TEETH"
 * PV_COMP_ACCS = 8, // "ACCESSORIES"
 * PV_COMP_TASK = 9, // "TASK"
 * PV_COMP_DECL = 10, // "DECL"
 * PV_COMP_JBIB = 11, // "JBIB"
 * PV_COMP_MAX = 12,
 * };
 * ```
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param paletteId
 */
export function setPedComponentVariation(ped: number, componentId: number, drawableId: number, textureId: number, paletteId: number): void {
	return _in(0x262b14f4, 0x8d29de80, ped, componentId, drawableId, textureId, paletteId); 
}

/**
 * ```
 * teleports ped to coords along with the vehicle ped is in
 * ```
 * @param ped
 * @param posX
 * @param posY
 * @param posZ
 */
export function setPedCoordsKeepVehicle(ped: number, posX: number, posY: number, posZ: number): void {
	return _in(0x9afeff48, 0x1a85ab2e, ped, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * ```cpp
 * // Potential names and hash collisions included as comments
 * enum ePedConfigFlags {
 * _0x67D1A445 = 0,
 * _0xC63DE95E = 1,
 * CPED_CONFIG_FLAG_NoCriticalHits = 2,
 * CPED_CONFIG_FLAG_DrownsInWater = 3,
 * CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
 * _0x37D196F4 = 5,
 * _0xE2462399 = 6,
 * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
 * _0xEDDEB838 = 8,
 * _0xB398B6FD = 9,
 * _0xF6664E68 = 10,
 * _0xA05E7CA3 = 11,
 * _0xCE394045 = 12,
 * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
 * _0xCD8D1411 = 14,
 * _0xB031F1A9 = 15,
 * _0xFE65BEE3 = 16,
 * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
 * _0x380165BD = 18,
 * _0x07C045C7 = 19,
 * _0x583B5E2D = 20,
 * _0x475EDA58 = 21,
 * _0x8629D05B = 22,
 * _0x1522968B = 23,
 * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
 * _0x4CC09C4B = 25,
 * _0x034F3053 = 26,
 * _0xD91BA7CC = 27,
 * _0x5C8DC66E = 28,
 * _0x8902EAA0 = 29,
 * _0x6580B9D2 = 30,
 * _0x0EF7A297 = 31,
 * _0x6BF86E5B = 32,
 * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
 * CPED_CONFIG_FLAG_HasHelmet = 34,
 * CPED_CONFIG_FLAG_UseHelmet = 35,
 * _0xEEB3D630 = 36,
 * _0xB130D17B = 37,
 * _0x5F071200 = 38,
 * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
 * _0xC287AAFF = 40,
 * _0x203328CC = 41,
 * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
 * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
 * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
 * _0xEC4A8ACF = 45,
 * _0xDB115BFA = 46,
 * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
 * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
 * _0xF8E99565 = 49,
 * _0xDD17FEE6 = 50,
 * _0x7ED9B2C9 = 51,
 * _0x655E8618 = 52,
 * _0x5A6C1F6E = 53,
 * _0xD749FC41 = 54,
 * _0x357F63F3 = 55,
 * _0xC5E60961 = 56,
 * _0x29275C3E = 57,
 * CPED_CONFIG_FLAG_IsFiring = 58,
 * CPED_CONFIG_FLAG_WasFiring = 59,
 * CPED_CONFIG_FLAG_IsStanding = 60,
 * CPED_CONFIG_FLAG_WasStanding = 61,
 * CPED_CONFIG_FLAG_InVehicle = 62,
 * CPED_CONFIG_FLAG_OnMount = 63,
 * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
 * CPED_CONFIG_FLAG_IsSwimming = 65,
 * CPED_CONFIG_FLAG_WasSwimming = 66,
 * CPED_CONFIG_FLAG_IsSkiing = 67,
 * CPED_CONFIG_FLAG_IsSitting = 68,
 * CPED_CONFIG_FLAG_KilledByStealth = 69,
 * CPED_CONFIG_FLAG_KilledByTakedown = 70,
 * CPED_CONFIG_FLAG_Knockedout = 71,
 * _0x3E3C4560 = 72,
 * _0x2994C7B7 = 73,
 * _0x6D59D275 = 74,
 * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
 * CPED_CONFIG_FLAG_IsInTheAir = 76,
 * _0x2D493FB7 = 77,
 * CPED_CONFIG_FLAG_IsAimingGun = 78,
 * _0x14D69875 = 79,
 * _0x40B05311 = 80,
 * _0x8B230BC5 = 81,
 * _0xC74E5842 = 82,
 * _0x9EA86147 = 83,
 * _0x674C746C = 84,
 * _0x3E56A8C2 = 85,
 * _0xC144A1EF = 86,
 * _0x0548512D = 87,
 * _0x31C93909 = 88,
 * _0xA0269315 = 89,
 * _0xD4D59D4D = 90,
 * _0x411D4420 = 91,
 * _0xDF4AEF0D = 92,
 * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
 * _0x300E4CD3 = 94,
 * _0xF1C5BF04 = 95,
 * _0x89C2EF13 = 96,
 * CPED_CONFIG_FLAG_VaultFromCover = 97,
 * _0x02A852C8 = 98,
 * _0x3D9407F1 = 99,
 * _0x319B4558 = 100,
 * CPED_CONFIG_FLAG_ForcedAim = 101,
 * _0xB942D71A = 102,
 * _0xD26C55A8 = 103,
 * _0xB89E703B = 104,
 * CPED_CONFIG_FLAG_ForceReload = 105,
 * _0xD9E73DA2 = 106,
 * _0xFF71DC2C = 107,
 * _0x1E27E8D8 = 108,
 * _0xF2C53966 = 109,
 * _0xC4DBE247 = 110,
 * _0x83C0A4BF = 111,
 * _0x0E0FAF8C = 112,
 * _0x26616660 = 113,
 * _0x43B80B79 = 114,
 * _0x0D2A9309 = 115,
 * _0x12C1C983 = 116,
 * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
 * _0xE586D504 = 118,
 * _0x52374204 = 119,
 * CPED_CONFIG_FLAG_IsHandCuffed = 120,
 * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
 * CPED_CONFIG_FLAG_DisableMelee = 122,
 * _0xFE714397 = 123,
 * _0xB3E660BD = 124,
 * _0x5FED6BFD = 125,
 * _0xC9D6F66F = 126,
 * _0x519BC986 = 127,
 * CPED_CONFIG_FLAG_CanBeAgitated = 128,
 * _0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult
 * _0xDAB70E9F = 130,
 * _0xE569438A = 131,
 * _0xBBC77D6D = 132,
 * _0xCB59EF0F = 133,
 * _0x8C5EA971 = 134,
 * CPED_CONFIG_FLAG_IsScuba = 135,
 * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
 * _0xDCE59B58 = 137,
 * CPED_CONFIG_FLAG_RidingTrain = 138,
 * CPED_CONFIG_FLAG_ArrestResult = 139,
 * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
 * _0x98A4BE43 = 141,
 * _0x6901E731 = 142,
 * _0x9EC9BF6C = 143,
 * _0x42841A8F = 144,
 * CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
 * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
 * CPED_CONFIG_FLAG_StairsDetected = 147,
 * CPED_CONFIG_FLAG_SlopeDetected = 148,
 * _0x1A15670B = 149,
 * _0x61786EE5 = 150,
 * _0xCB9186BD = 151,
 * _0xF0710152 = 152,
 * _0x43DFE310 = 153,
 * _0xC43C624E = 154,
 * CPED_CONFIG_FLAG_CanPerformArrest = 155,
 * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
 * CPED_CONFIG_FLAG_CanBeArrested = 157,
 * _0xF7960FF5 = 158,
 * _0x59564113 = 159,
 * _0x0C6C3099 = 160,
 * _0x645F927A = 161,
 * _0xA86549B9 = 162,
 * _0x8AAF337A = 163,
 * _0x13BAA6E7 = 164,
 * _0x5FB9D1F5 = 165,
 * CPED_CONFIG_FLAG_IsInjured = 166,
 * _0x6398A20B = 167,
 * _0xD8072639 = 168,
 * _0xA05B1845 = 169,
 * _0x83F6D220 = 170,
 * _0xD8430331 = 171,
 * _0x4B547520 = 172,
 * _0xE66E1406 = 173,
 * _0x1C4BFE0C = 174,
 * _0x90008BFA = 175,
 * _0x07C7A910 = 176,
 * _0xF15F8191 = 177,
 * _0xCE4E8BE2 = 178,
 * _0x1D46E4F2 = 179,
 * CPED_CONFIG_FLAG_IsInCustody = 180,
 * _0xE4FD9B3A = 181,
 * _0x67AE0812 = 182,
 * CPED_CONFIG_FLAG_IsAgitated = 183,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
 * _0x7B2D325E = 185,
 * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
 * CPED_CONFIG_FLAG_HasHurtStarted = 187,
 * CPED_CONFIG_FLAG_DisableHurt = 188,
 * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
 * _0x32FC208B = 190,
 * _0x0C296E5A = 191,
 * _0xE63B73EC = 192,
 * _0x04E9CC80 = 193,
 * CPED_CONFIG_FLAG_UsingScenario = 194,
 * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
 * _0xD88C58A1 = 196,
 * _0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide
 * _0xEA02B420 = 198,
 * _0x3F559CFF = 199,
 * _0x8C55D029 = 200,
 * _0x5E6466F6 = 201,
 * _0xEB5AD706 = 202,
 * _0x0EDDDDE7 = 203,
 * _0xA64F7B1D = 204,
 * _0x48532CBA = 205,
 * _0xAA25A9E7 = 206,
 * _0x415B26B9 = 207,
 * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
 * CPED_CONFIG_FLAG_DodgedPlayer = 209,
 * _0x67405504 = 210,
 * _0x75DDD68C = 211,
 * _0x2AD879B4 = 212,
 * _0x51486F91 = 213,
 * _0x32F79E21 = 214,
 * _0xBF099213 = 215,
 * _0x054AC8E2 = 216,
 * _0x14E495CC = 217,
 * _0x3C7DF9DF = 218,
 * _0x848FFEF2 = 219,
 * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
 * _0x2618E1CF = 221,
 * _0x84F722FA = 222,
 * _0xD1B87B1F = 223,
 * _0x728AA918 = 224,
 * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
 * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
 * _0x59E91185 = 227,
 * _0x1EA7225F = 228,
 * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
 * _0x6DCA7D88 = 230,
 * _0xFC3E572D = 231,
 * _0x08E9F9CF = 232,
 * _0x2D3BA52D = 233,
 * _0xFD2F53EA = 234,
 * _0x31A1B03B = 235,
 * CPED_CONFIG_FLAG_IsHoldingProp = 236,
 * _0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead
 * _0xCE57C9A3 = 238,
 * _0x26149198 = 239,
 * _0x1B33B598 = 240,
 * _0x719B6E87 = 241,
 * _0x13E8E8E8 = 242,
 * _0xF29739AE = 243,
 * _0xABEA8A74 = 244,
 * _0xB60EA2BA = 245,
 * _0x536B0950 = 246,
 * _0x0C754ACA = 247,
 * CPED_CONFIG_FLAG_DisableVehicleSeatRandomAnimations = 248,
 * _0x12659168 = 249,
 * _0x1BDF2F04 = 250,
 * _0x7728FAA3 = 251,
 * _0x6A807ED8 = 252,
 * CPED_CONFIG_FLAG_OnStairs = 253,
 * _0xE1A2F73F = 254,
 * _0x5B3697C8 = 255,
 * _0xF1EB20A9 = 256,
 * _0x8B7DF407 = 257,
 * _0x329DCF1A = 258,
 * _0x8D90DD1B = 259,
 * _0xB8A292B7 = 260,
 * _0x8374B087 = 261,
 * _0x2AF558F0 = 262,
 * _0x82251455 = 263,
 * _0x30CF498B = 264,
 * _0xE1CD50AF = 265,
 * _0x72E4AE48 = 266,
 * _0xC2657EA1 = 267,
 * _0x29FF6030 = 268,
 * _0x8248A5EC = 269,
 * CPED_CONFIG_FLAG_OnStairSlope = 270,
 * _0xA0897933 = 271,
 * CPED_CONFIG_FLAG_DontBlipCop = 272,
 * CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
 * _0xF7823618 = 274,
 * _0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped
 * CPED_CONFIG_FLAG_EdgeDetected = 276,
 * _0x92B67896 = 277,
 * _0xCAD677C9 = 278,
 * CPED_CONFIG_FLAG_AvoidTearGas = 279,
 * _0x5276AC7B = 280,
 * _0x1032692A = 281,
 * _0xDA23E7F1 = 282,
 * _0x9139724D = 283,
 * _0xA1457461 = 284,
 * _0x4186E095 = 285,
 * _0xAC68E2EB = 286,
 * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
 * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
 * _0x1B9EE8A1 = 289,
 * _0xF3F5758C = 290,
 * _0x2A9307F1 = 291,
 * _0x7403D216 = 292,
 * _0xA06A3C6C = 293,
 * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
 * _0xF8DA25A5 = 295,
 * _0x7EF55802 = 296,
 * _0xB31F1187 = 297,
 * _0x84315402 = 298,
 * _0x0FD69867 = 299,
 * _0xC7829B67 = 300,
 * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
 * _0x6D23CF25 = 302,
 * _0x2ADA871B = 303,
 * _0x47BC8A58 = 304,
 * _0xEB692FA5 = 305,
 * _0x4A133C50 = 306,
 * _0xC58099C3 = 307,
 * _0xF3D76D41 = 308,
 * _0xB0EEE9F2 = 309,
 * CPED_CONFIG_FLAG_IsInCluster = 310,
 * _0x0FA153EF = 311,
 * _0xD73F5CD3 = 312,
 * _0xD4136C22 = 313,
 * _0xE404CA6B = 314,
 * _0xB9597446 = 315,
 * _0xD5C98277 = 316,
 * _0xD5060A9C = 317,
 * _0x3E5F1CBB = 318,
 * _0xD8BE1D54 = 319,
 * _0x0B1F191F = 320,
 * _0xC995167A = 321,
 * CPED_CONFIG_FLAG_HasHighHeels = 322,
 * _0x86B01E54 = 323,
 * _0x3A56FE15 = 324,
 * _0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario
 * _0xBBF47729 = 326,
 * _0x22B668A8 = 327,
 * _0x2624D4D4 = 328,
 * CPED_CONFIG_FLAG_DisableTalkTo = 329,
 * CPED_CONFIG_FLAG_DontBlip = 330,
 * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
 * _0x630F55F3 = 332,
 * _0x150468FD = 333,
 * _0x914EBD6B = 334,
 * _0x79AF3B6D = 335,
 * _0x75C7A632 = 336,
 * _0x52D530E2 = 337,
 * _0xDB2A90E0 = 338,
 * _0x5922763D = 339,
 * _0x12ADB567 = 340,
 * _0x105C8518 = 341,
 * _0x106F703D = 342,
 * _0xED152C3E = 343,
 * _0xA0EFE6A8 = 344,
 * _0xBF348C82 = 345,
 * _0xCDDFE830 = 346,
 * _0x7B59BD9B = 347,
 * _0x0124C788 = 348,
 * CPED_CONFIG_FLAG_EquipJetpack = 349,
 * _0x08D361A5 = 350,
 * _0xE13D1F7C = 351,
 * _0x40E25FB9 = 352,
 * _0x930629D9 = 353,
 * _0xECCF0C7F = 354,
 * _0xB6E9613B = 355,
 * _0x490C0478 = 356,
 * _0xE8865BEA = 357,
 * _0xF3C34A29 = 358,
 * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
 * _0xF660E115 = 360,
 * _0xAB0E6DED = 361,
 * CPED_CONFIG_FLAG_HasReserveParachute = 362,
 * CPED_CONFIG_FLAG_UseReserveParachute = 363,
 * _0x5C5D9CD3 = 364,
 * _0x8F7701F3 = 365,
 * _0xBC4436AD = 366,
 * _0xD7E07D37 = 367,
 * _0x03C4FD24 = 368,
 * _0x7675789A = 369,
 * _0xB7288A88 = 370,
 * _0xC06B6291 = 371,
 * _0x95A4A805 = 372,
 * _0xA8E9A042 = 373,
 * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
 * _0xBAC674B3 = 375,
 * _0x147F1FFB = 376,
 * _0x4376DD79 = 377,
 * _0xCD3DB518 = 378,
 * _0xFE4BA4B6 = 379,
 * _0x5DF03A55 = 380,
 * _0xBCD816CD = 381,
 * _0xCF02DD69 = 382,
 * _0xF73AFA2E = 383,
 * _0x80B9A9D0 = 384,
 * _0xF601F7EE = 385,
 * _0xA91350FC = 386,
 * _0x3AB23B96 = 387,
 * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
 * CPED_CONFIG_FLAG_HasBareFeet = 389,
 * _0xB4B1CD4C = 390,
 * _0x5459AFB8 = 391,
 * _0x54F27667 = 392,
 * _0xC11D3E8F = 393,
 * _0x5419EB3E = 394,
 * _0x82D8DBB4 = 395,
 * _0x33B02D2F = 396,
 * _0xAE66176D = 397,
 * _0xA2692593 = 398,
 * _0x714C7E31 = 399,
 * _0xEC488AC7 = 400,
 * _0xAE398504 = 401,
 * _0xABC58D72 = 402,
 * _0x5E5B9591 = 403,
 * _0x6BA1091E = 404,
 * _0x77840177 = 405,
 * _0x1C7ACAC4 = 406,
 * _0x124420E9 = 407,
 * _0x75A65587 = 408,
 * _0xDFD2D55B = 409,
 * _0xBDD39919 = 410,
 * _0x43DEC267 = 411,
 * _0xE42B7797 = 412,
 * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
 * _0x4F8149F5 = 414,
 * _0xDD9ECA7A = 415,
 * _0x9E7EF9D2 = 416,
 * _0x2C6ED942 = 417,
 * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
 * _0xA488727D = 419,
 * _0xCFF5F6DE = 420,
 * _0x6D614599 = 421,
 * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
 * _0xFE401D26 = 423,
 * CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
 * _0x2B42AE82 = 425,
 * _0x7A95734F = 426,
 * _0xDF4D8617 = 427,
 * _0x578F1F14 = 428,
 * CPED_CONFIG_FLAG_DisableStartEngine = 429,
 * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
 * _0x153C9500 = 431,
 * _0xCB7A632E = 432,
 * _0xDE727981 = 433,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
 * _0x12BBB935 = 435,
 * _0xAD0A1277 = 436,
 * _0xEA6AA46A = 437,
 * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
 * _0xCB7F3A1E = 439,
 * _0x50178878 = 440,
 * _0x051B4F0D = 441,
 * _0x2FC3DECC = 442,
 * _0xC0030B0B = 443,
 * _0xBBDAF1E9 = 444,
 * _0x944FE59C = 445,
 * _0x506FBA39 = 446,
 * _0xDD45FE84 = 447,
 * _0xE698AE75 = 448,
 * _0x199633F8 = 449,
 * CPED_CONFIG_FLAG_PedIsArresting = 450,
 * CPED_CONFIG_FLAG_IsDecoyPed = 451,
 * _0x3A251D83 = 452,
 * _0xA56F6986 = 453,
 * _0x1D19C622 = 454,
 * _0xB68D3EAB = 455,
 * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
 * _0x4BD5EBAD = 457,
 * }
 * ```
 * @param ped
 * @param flagId
 * @param value
 */
export function setPedConfigFlag(ped: number, flagId: number, value: boolean): void {
	return _in(0x1913fe4c, 0xbf41c463, ped, flagId, value); 
}

/**
 * 
 * @param ped
 * @param posX
 * @param posY
 * @param posZ
 */
export function setPedCoordsNoGang(ped: number, posX: number, posY: number, posZ: number): void {
	return _in(0x87052fe4, 0x46e07247, ped, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * ```
 * Found in the b617d scripts:
 * PED::_9DBA107B4937F809(v_7, "trevor_heist_cover_2h");
 * SET_PED_MO*
 * ```
 * @param ped
 * @param p1
 */
export function SetPedCoverClipsetOverride(ped: number, p1: string): void {
	return _in(0x9dba107b, 0x4937f809, ped, _ts(p1)); 
}

/**
 * ```
 * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
 * ```
 * @param ped
 * @param p1
 */
export function setPedCowerHash(ped: number, p1: string): void {
	return _in(0xa5491311, 0x66868ed3, ped, _ts(p1)); 
}

/**
 * ```
 * Sets Ped Default Clothes
 * ```
 * @param ped
 */
export function setPedDefaultComponentVariation(ped: number): void {
	return _in(0x45eee615, 0x80806d63, ped); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function setPedDefensiveAreaDirection(ped: number, p1: number, p2: number, p3: number, p4: boolean): void {
	return _in(0x413c6c76, 0x3a4affad, ped, _fv(p1), _fv(p2), _fv(p3), p4); 
}

/**
 * 
 * @param ped
 * @param attachPed
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function setPedDefensiveAreaAttachedToPed(ped: number, attachPed: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: boolean): void {
	return _in(0x4ef47fe2, 0x1698a8b6, ped, attachPed, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10); 
}

/**
 * 
 * @param ped
 * @param target
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param radius
 * @param p6
 */
export function setPedDefensiveSphereAttachedToPed(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void {
	return _in(0xf9b8f91a, 0xad3b953e, ped, target, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(radius), p6); 
}

/**
 * 
 * @param ped
 * @param target
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param radius
 * @param p6
 */
export function setPedDefensiveSphereAttachedToVehicle(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void {
	return _in(0xe4723db6, 0xe736ccff, ped, target, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(radius), p6); 
}

/**
 * 
 * @param ped
 * @param heading
 */
export function setPedDesiredHeading(ped: number, heading: number): void {
	return _in(0xaa5a7ece, 0x2aa8fe70, ped, _fv(heading)); 
}

/**
 * 
 * @param multiplier
 */
export function setPedDensityMultiplierThisFrame(multiplier: number): void {
	return _in(0x95e3d625, 0x7b166cf2, _fv(multiplier)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedDiesInVehicle(ped: number, toggle: boolean): void {
	return _in(0x2a30922c, 0x90c9b42c, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedDiesInSinkingVehicle(ped: number, toggle: boolean): void {
	return _in(0xd718a229, 0x95e2b4bc, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedDiesInWater(ped: number, toggle: boolean): void {
	return _in(0x56cef0ac, 0x79073bde, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedDiesInstantlyInWater(ped: number, toggle: boolean): void {
	return _in(0xeeb64139, 0xba29a7cf, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedDiesWhenInjured(ped: number, toggle: boolean): void {
	return _in(0x5ba7919b, 0xed300023, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param clipset
 */
export function setPedDriveByClipsetOverride(ped: number, clipset: string): void {
	return _in(0xed34ab6c, 0x5cb36520, ped, _ts(clipset)); 
}

/**
 * This native sets the glow intensity of illuminated clothing items.
 * 
 * This native does **NOT** need to be executed every tick.
 * This native is **NOT** synced with other connected players, you will have to set the opacity on the ped on all clients individually.
 * 
 * Glow intensity is a value between `0.0` and `1.0`.
 * 
 * In some older decompiled scripts this is known as `_SET_PED_REFLECTION_INTENSITY`.
 * Since there's no joaat hash for this, I find `_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY` more descriptive than `_SET_PED_REFLECTION_INTENSITY`.
 * 
 * Use [`GetPedIlluminatedClothingGlowIntensity`](#\_0x1461B28A06717D68) to get the illuminated clothing glow intensity of a specific ped.
 * 
 * Intensity: `1.0`:
 * ![](https://www.vespura.com/hi/i/2018-11-13\_17-03\_c2e23\_229.png)
 * 
 * Intensity: `0.0`:
 * ![](https://www.vespura.com/hi/i/2018-11-13\_17-03\_35c33\_230.png)
 * 
 * **Examples code result**:
 * ![](https://www.vespura.com/hi/i/2018-11-13\_17-11\_10199\_232.gif)
 * 
 * (Direct link if embed doesn't work: [here](https://www.vespura.com/hi/i/2018-11-13\_17-11\_10199\_232.gif))
 * @param ped
 * @param intensity
 */
export function SetPedEmissiveIntensity(ped: number, intensity: number): void {
	return _in(0x4e90d746, 0x056e273d, ped, _fv(intensity)); 
}

/**
 * ```
 * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
 * ```
 * @param ped
 * @param toggle
 */
export function setPedDucking(ped: number, toggle: boolean): void {
	return _in(0x030983ca, 0x930b692d, ped, toggle); 
}

/**
 * ```
 * Something related to the environmental effects natives.
 * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
 * ```
 * @param ped
 * @param r
 * @param g
 * @param b
 */
export function setPedEnveffColorModulator(ped: number, r: number, g: number, b: number): void {
	return _in(0xd69411aa, 0x0cebf9e9, ped, r, g, b); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedEnableWeaponBlocking(ped: number, toggle: boolean): void {
	return _in(0x97a79031, 0x5d3831fd, ped, toggle); 
}

/**
 * ```
 * Values look to be between 0.0 and 1.0
 * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
 * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
 * ```
 * @param ped
 * @param value
 */
export function setPedEnveffScale(ped: number, value: number): void {
	return _in(0xbf295168, 0x33893561, ped, _fv(value)); 
}

/**
 * Used for freemode (online) characters.
 * 
 * Indices:
 * 
 * 1.  black
 * 2.  very light blue/green
 * 3.  dark blue
 * 4.  brown
 * 5.  darker brown
 * 6.  light brown
 * 7.  blue
 * 8.  light blue
 * 9.  pink
 * 10. yellow
 * 11. purple
 * 12. black
 * 13. dark green
 * 14. light brown
 * 15. yellow/black pattern
 * 16. light colored spiral pattern
 * 17. shiny red
 * 18. shiny half blue/half red
 * 19. half black/half light blue
 * 20. white/red perimter
 * 21. green snake
 * 22. red snake
 * 23. dark blue snake
 * 24. dark yellow
 * 25. bright yellow
 * 26. all black
 * 27. red small pupil
 * 28. devil blue/black
 * 29. white small pupil
 * 30. glossed over
 * @param ped
 * @param index
 */
export function SetPedEyeColor(ped: number, index: number): void {
	return _in(0x50b56988, 0xb170afdf, ped, index); 
}

/**
 * Sets the various freemode face features, e.g. nose length, chin shape.
 * 
 * **Indexes (From 0 to 19):**
 * 
 * Parentheses indicate morph scale/direction as in (-1.0 to 1.0)
 * 
 * *   **0**: Nose Width (Thin/Wide)
 * *   **1**: Nose Peak (Up/Down)
 * *   **2**: Nose Length (Long/Short)
 * *   **3**: Nose Bone Curveness (Crooked/Curved)
 * *   **4**: Nose Tip (Up/Down)
 * *   **5**: Nose Bone Twist (Left/Right)
 * *   **6**: Eyebrow (Up/Down)
 * *   **7**: Eyebrow (In/Out)
 * *   **8**: Cheek Bones (Up/Down)
 * *   **9**: Cheek Sideways Bone Size (In/Out)
 * *   **10**: Cheek Bones Width (Puffed/Gaunt)
 * *   **11**: Eye Opening (Both) (Wide/Squinted)
 * *   **12**: Lip Thickness (Both) (Fat/Thin)
 * *   **13**: Jaw Bone Width (Narrow/Wide)
 * *   **14**: Jaw Bone Shape (Round/Square)
 * *   **15**: Chin Bone (Up/Down)
 * *   **16**: Chin Bone Length (In/Out or Backward/Forward)
 * *   **17**: Chin Bone Shape (Pointed/Square)
 * *   **18**: Chin Hole (Chin Bum)
 * *   **19**: Neck Thickness (Thin/Thick)
 * 
 * **Note:**
 * 
 * You may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.
 * @param ped
 * @param index
 * @param scale
 */
export function SetPedFaceFeature(ped: number, index: number, scale: number): void {
	return _in(0x71a5c1db, 0xa060049e, ped, index, _fv(scale)); 
}

/**
 * ```
 * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
 * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
 * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
 * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
 * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
 * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
 * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
 * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
 * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
 * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
 * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
 * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
 * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
 * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
 * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
 * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
 * if anyone is interested firing pattern info: pastebin.com/Px036isB
 * ```
 * @param ped
 * @param patternHash
 */
export function setPedFiringPattern(ped: number, patternHash: number): void {
	return _in(0x9ac577f5, 0xa12ad8a9, ped, _ch(patternHash)); 
}

/**
 * ```
 * bit 15 (0x8000) = force cower
 * ```
 * @param ped
 * @param attributeFlags
 * @param enable
 */
export function setPedFleeAttributes(ped: number, attributeFlags: number, enable: boolean): void {
	return _in(0x70a2d113, 0x7c8ed7c9, ped, attributeFlags, enable); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedGeneratesDeadBodyEvents(ped: number, toggle: boolean): void {
	return _in(0x7fb17ba2, 0xe7deca5b, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedGetOutUpsideDownVehicle(ped: number, toggle: boolean): void {
	return _in(0xbc0ed941, 0x65a48bc2, ped, toggle); 
}

/**
 * ```
 * From the scripts:
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_FRA0");
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
 * ```
 * @param ped
 * @param animGroupGesture
 */
export function setPedGestureGroup(ped: number, animGroupGesture: string): void {
	return _in(0xddf80337, 0x7f94aaa8, ped, _ts(animGroupGesture)); 
}

/**
 * 
 * @param ped
 * @param index
 */
export function setPedGroupMemberPassengerIndex(ped: number, index: number): void {
	return _in(0x0bddb8d9, 0xec6bcf3c, ped, index); 
}

/**
 * ```
 * enable or disable the gravity of a ped
 * Examples:
 * PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
 * PED::SET_PED_GRAVITY(Local_289[iVar0  -- [[20]] ], 0x00000001);
 * ```
 * @param ped
 * @param toggle
 */
export function setPedGravity(ped: number, toggle: boolean): void {
	return _in(0x9ff447b6, 0xb6ad960a, ped, toggle); 
}

/**
 * ```
 * Used for freemode (online) characters.
 * ```
 * @param ped
 * @param colorID
 * @param highlightColorID
 */
export function SetPedHairColor(ped: number, colorID: number, highlightColorID: number): void {
	return _in(0x4cffc654, 0x54c93a49, ped, colorID, highlightColorID); 
}

/**
 * For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.
 * 
 * **Other information:**
 * 
 * IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>
 * 
 * This native function is often called prior to calling natives such as:
 * 
 * *   [`SetPedHairColor`](#0xBB43F090)
 * *   [`SetPedHeadOverlayColor`](#0x78935A27)
 * *   [`SetPedHeadOverlay`](#0xD28DBA90)
 * *   [`SetPedFaceFeature`](#0x6C8D4458)
 * @param ped
 * @param shapeFirstID
 * @param shapeSecondID
 * @param shapeThirdID
 * @param skinFirstID
 * @param skinSecondID
 * @param skinThirdID
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 * @param isParent
 */
export function setPedHeadBlendData(ped: number, shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void {
	return _in(0x9414e18b, 0x9434c2fe, ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, _fv(shapeMix), _fv(skinMix), _fv(thirdMix), isParent); 
}

/**
 * ```
 * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
 * overlayID       Part                  Index, to disable
 * 0               Blemishes             0 - 23, 255
 * 1               Facial Hair           0 - 28, 255
 * 2               Eyebrows              0 - 33, 255
 * 3               Ageing                0 - 14, 255
 * 4               Makeup                0 - 74, 255
 * 5               Blush                 0 - 6, 255
 * 6               Complexion            0 - 11, 255
 * 7               Sun Damage            0 - 10, 255
 * 8               Lipstick              0 - 9, 255
 * 9               Moles/Freckles        0 - 17, 255
 * 10              Chest Hair            0 - 16, 255
 * 11              Body Blemishes        0 - 11, 255
 * 12              Add Body Blemishes    0 - 1, 255
 * ```
 * 
 * **Note:**
 * 
 * You may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.
 * @param ped
 * @param overlayID
 * @param index
 * @param opacity
 */
export function setPedHeadOverlay(ped: number, overlayID: number, index: number, opacity: number): void {
	return _in(0x48f44967, 0xfa05cc1e, ped, overlayID, index, _fv(opacity)); 
}

/**
 * ```
 * Used for freemode (online) characters.
 * Called after SET_PED_HEAD_OVERLAY().
 * ```
 * 
 * **Note:**
 * 
 * You may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.
 * @param ped
 * @param overlayID
 * @param colorType
 * @param colorID
 * @param secondColorID
 */
export function SetPedHeadOverlayColor(ped: number, overlayID: number, colorType: number, colorID: number, secondColorID: number): void {
	return _in(0x497bf74a, 0x7b9cb952, ped, overlayID, colorType, colorID, secondColorID); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedHearingRange(ped: number, value: number): void {
	return _in(0x33a8f7f7, 0xd5f7f33c, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 * @param canWearHelmet
 */
export function setPedHelmet(ped: number, canWearHelmet: boolean): void {
	return _in(0x560a4313, 0x6eb58105, ped, canWearHelmet); 
}

/**
 * 
 * @param ped
 * @param heatScale
 */
export function setPedHeatscaleOverride(ped: number, heatScale: number): void {
	return _in(0xc1f6ebf9, 0xa3d55538, ped, _fv(heatScale)); 
}

/**
 * 
 * @param ped
 * @param helmetFlag
 */
export function setPedHelmetFlag(ped: number, helmetFlag: number): void {
	return _in(0xc0e78d5c, 0x2ce3eb25, ped, helmetFlag); 
}

/**
 * 
 * @param ped
 * @param textureIndex
 */
export function setPedHelmetTextureIndex(ped: number, textureIndex: number): void {
	return _in(0xf1550c4b, 0xd22582e2, ped, textureIndex); 
}

/**
 * ```
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * @param ped
 * @param propIndex
 */
export function setPedHelmetPropIndex(ped: number, propIndex: number): void {
	return _in(0x26d83693, 0xed99291c, ped, propIndex); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 */
export function SetPedHelmetUnk(ped: number, p1: boolean, p2: number, p3: number): void {
	return _in(0x3f732557, 0x4e41b44d, ped, p1, p2, p3); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedHighlyPerceptive(ped: number, toggle: boolean): void {
	return _in(0x52d59ab6, 0x1ddc05dd, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedIdRange(ped: number, value: number): void {
	return _in(0xf107e836, 0xa70dce05, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 */
export function setPedIncreasedAvoidanceRadius(ped: number): void {
	return _in(0x570389d1, 0xc3de3c6b, ped); 
}

/**
 * ```
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
 * ```
 * @param ped
 * @param context
 */
export function setPedInVehicleContext(ped: number, context: number): void {
	return _in(0x53007129, 0x5899a8c6, ped, _ch(context)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedKeepTask(ped: number, toggle: boolean): void {
	return _in(0x971d3876, 0x0fbc02ef, ped, toggle); 
}

/**
 * ```
 * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
 * ```
 * @param ped
 * @param mode
 */
export function setPedLegIkMode(ped: number, mode: number): void {
	return _in(0xc396f5b8, 0x6ff9febd, ped, mode); 
}

/**
 * 
 * @param ped
 * @param vehicle
 * @param seatIndex
 */
export function setPedIntoVehicle(ped: number, vehicle: number, seatIndex: number): void {
	return _in(0xf75b0d62, 0x9e1c063d, ped, vehicle, seatIndex); 
}

/**
 * 
 * @param ped
 * @param multiplier
 */
export function setPedLodMultiplier(ped: number, multiplier: number): void {
	return _in(0xdc2c5c24, 0x2aac342b, ped, _fv(multiplier)); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedMaxMoveBlendRatio(ped: number, value: number): void {
	return _in(0x43308375, 0x0c5e064a, ped, _fv(value)); 
}

/**
 * ```
 * sets the maximum health of a ped
 * I think it's never been used in any script
 * ```
 * @param ped
 * @param value
 */
export function setPedMaxHealth(ped: number, value: number): void {
	return _in(0xf5f6378c, 0x4f3419d3, ped, value); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedMaxTimeInWater(ped: number, value: number): void {
	return _in(0x43c85169, 0x0662113d, ped, _fv(value)); 
}

/**
 * ```
 * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
 * ```
 * @param ped
 * @param ms
 */
export function setPedMinGroundTimeForStungun(ped: number, ms: number): void {
	return _in(0xfa0675ab, 0x151073fa, ped, ms); 
}

/**
 * Set the maximum time a ped can stay underwater. Maximum seems to be 50 seconds.
 * @param ped
 * @param value
 */
export function setPedMaxTimeUnderwater(ped: number, value: number): void {
	return _in(0x6ba428c5, 0x28d9e522, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedMinMoveBlendRatio(ped: number, value: number): void {
	return _in(0x01a898d2, 0x6e2333dd, ped, _fv(value)); 
}

/**
 * 
 * @param model
 * @param toggle
 */
export function setPedModelIsSuppressed(model: number, toggle: boolean): void {
	return _in(0xe163a4bc, 0xe4de6f11, _ch(model), toggle); 
}

/**
 * ```
 * Maximum possible amount of money on MP is 2000. ~JX
 * -----------------------------------------------------------------------------
 * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
 * ```
 * @param ped
 * @param amount
 */
export function setPedMoney(ped: number, amount: number): void {
	return _in(0xa9c8960e, 0x8684c1b5, ped, amount); 
}

/**
 * ```
 * Min: 0.00
 * Max: 10.00
 * Can be used in combo with fast run cheat.
 * When value is set to 10.00:
 * Sprinting without fast run cheat: 66 m/s
 * Sprinting with fast run cheat: 77 m/s
 * Needs to be looped!
 * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
 * ```
 * @param ped
 * @param value
 */
export function setPedMoveRateOverride(ped: number, value: number): void {
	return _in(0x085bf80f, 0xa50a39d1, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedMotionBlur(ped: number, toggle: boolean): void {
	return _in(0x0a986918, 0xb102b448, ped, toggle); 
}

/**
 * ```
 * List of movement clipsets:
 * Thanks to elsewhat for list.
 * "ANIM_GROUP_MOVE_BALLISTIC"
 * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 * "clipset@move@trash_fast_turn"
 * "FEMALE_FAST_RUNNER"
 * "missfbi4prepp1_garbageman"
 * "move_characters@franklin@fire"
 * "move_characters@Jimmy@slow@"
 * "move_characters@michael@fire"
 * "move_f@flee@a"
 * "move_f@scared"
 * "move_f@sexy@a"
 * "move_heist_lester"
 * "move_injured_generic"
 * "move_lester_CaneUp"
 * "move_m@bag"
 * "MOVE_M@BAIL_BOND_NOT_TAZERED"
 * "MOVE_M@BAIL_BOND_TAZERED"
 * "move_m@brave"
 * "move_m@casual@d"
 * "move_m@drunk@moderatedrunk"
 * "MOVE_M@DRUNK@MODERATEDRUNK"
 * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 * "MOVE_M@DRUNK@VERYDRUNK"
 * "move_m@fire"
 * "move_m@gangster@var_e"
 * "move_m@gangster@var_f"
 * "move_m@gangster@var_i"
 * "move_m@JOG@"
 * "MOVE_M@PRISON_GAURD"
 * "MOVE_P_M_ONE"
 * "MOVE_P_M_ONE_BRIEFCASE"
 * "move_p_m_zero_janitor"
 * "move_p_m_zero_slow"
 * "move_ped_bucket"
 * "move_ped_crouched"
 * "move_ped_mop"
 * "MOVE_M@FEMME@"
 * "MOVE_F@FEMME@"
 * "MOVE_M@GANGSTER@NG"
 * "MOVE_F@GANGSTER@NG"
 * "MOVE_M@POSH@"
 * "MOVE_F@POSH@"
 * "MOVE_M@TOUGH_GUY@"
 * "MOVE_F@TOUGH_GUY@"
 * ~ NotCrunchyTaco
 * ```
 * @param ped
 * @param clipSet
 * @param transitionSpeed
 */
export function setPedMovementClipset(ped: number, clipSet: string, transitionSpeed: number): void {
	return _in(0xaf8a94ed, 0xe7712bef, ped, _ts(clipSet), _fv(transitionSpeed)); 
}

/**
 * 
 * @param ped
 */
export function setPedMoveAnimsBlendOut(ped: number): void {
	return _in(0x9e8c908f, 0x41584ecd, ped); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedNeverLeavesGroup(ped: number, toggle: boolean): void {
	return _in(0x3dbfc55d, 0x5c9bb447, ped, toggle); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * *untested but char *name could also be a hash for a localized string
 * ```
 * @param ped
 * @param name
 */
export function setPedNameDebug(ped: number, name: string): void {
	return _in(0x98efa132, 0xa4117be1, ped, _ts(name)); 
}

/**
 * ```
 * The distance between these points, is the diagonal of a box (remember it's 3D).
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function setPedNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
	return _in(0xee01041d, 0x559983ea, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function setPedPanicExitScenario(ped: number, x: number, y: number, z: number): any {
	return _in(0xfe07ff64, 0x95d52e2a, ped, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * 
 * ```
 * Points to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.
 * ```
 * @param ped
 * @param toggle
 */
export function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped: number, toggle: boolean): void {
	return _in(0x94d94bf1, 0xa75aed3d, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param tintIndex
 */
export function setPedParachuteTintIndex(ped: number, tintIndex: number): void {
	return _in(0x333fc8db, 0x079b7186, ped, tintIndex); 
}

/**
 * ```
 * i could be time. Only example in the decompiled scripts uses it as -1.
 * ```
 * @param ped
 * @param pinned
 * @param i
 */
export function setPedPinnedDown(ped: number, pinned: boolean, i: number): any {
	return _in(0xaad6d1ac, 0xf08f4612, ped, pinned, i, _r, _ri); 
}

/**
 * 
 * @param ped
 * @param itemSet
 */
export function setPedPreferredCoverSet(ped: number, itemSet: any): void {
	return _in(0x8421eb4d, 0xa7e391b9, ped, itemSet); 
}

/**
 * 
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 */
export function setPedPreloadPropData(ped: number, componentId: number, drawableId: number, textureId: number): boolean {
	return _in(0x2b16a3bf, 0xf1fbce49, ped, componentId, drawableId, textureId, _r); 
}

/**
 * ```
 * from extreme3.c4
 * PED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
 * p1 is probably componentId
 * ```
 * @param ped
 * @param slot
 * @param drawableId
 * @param textureId
 */
export function setPedPreloadVariationData(ped: number, slot: number, drawableId: number, textureId: number): any {
	return _in(0x39d55a62, 0x0fcb6a3a, ped, slot, drawableId, textureId, _r, _ri); 
}

/**
 * ```
 * This is only called once in the scripts.
 * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
 * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
 * PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
 * ```
 * @param ped
 * @param lookAt
 */
export function setPedPrimaryLookat(ped: number, lookAt: number): void {
	return _in(0xcd17b554, 0x996a8d9e, ped, lookAt); 
}

/**
 * 
 * @param ped
 */
export function setPedRagdollForceFall(ped: number): void {
	return _in(0x01f6594b, 0x923b9251, ped); 
}

/**
 * This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.
 * 
 * ### MP Freemode list of props
 * 
 * **0**: Hats
 * **1**: Glasses
 * **2**: Ears
 * **6**: Watches
 * **7**: Bracelets
 * 
 * List of Prop IDs
 * 
 * ```cpp
 * // Props
 * enum eAnchorPoints
 * {
 * ANCHOR_HEAD = 0, // "p_head"
 * ANCHOR_EYES = 1, // "p_eyes"
 * ANCHOR_EARS = 2, // "p_ears"
 * ANCHOR_MOUTH = 3, // "p_mouth"
 * ANCHOR_LEFT_HAND = 4, // "p_lhand"
 * ANCHOR_RIGHT_HAND = 5, // "p_rhand"
 * ANCHOR_LEFT_WRIST = 6, // "p_lwrist"
 * ANCHOR_RIGHT_WRIST = 7, // "p_rwrist"
 * ANCHOR_HIP = 8, // "p_lhip"
 * ANCHOR_LEFT_FOOT = 9, // "p_lfoot"
 * ANCHOR_RIGHT_FOOT = 10, // "p_rfoot"
 * ANCHOR_PH_L_HAND = 11, // "ph_lhand"
 * ANCHOR_PH_R_HAND = 12, // "ph_rhand"
 * NUM_ANCHORS = 13,
 * };
 * ```
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param attach
 */
export function setPedPropIndex(ped: number, componentId: number, drawableId: number, textureId: number, attach: boolean): void {
	return _in(0x93376b65, 0xa266eb5f, ped, componentId, drawableId, textureId, attach); 
}

/**
 * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
 * Needs to be recalled after each ragdoll from a Collision.
 * @param ped
 * @param toggle
 */
export function setPedRagdollOnCollision(ped: number, toggle: boolean): void {
	return _in(0xf0a4f1bb, 0xf4fa7497, ped, toggle); 
}

/**
 * ```
 * p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.
 * ```
 * @param ped
 * @param p1
 */
export function setPedRandomComponentVariation(ped: number, p1: number): void {
	return _in(0xc8a9481a, 0x01e63c28, ped, p1); 
}

/**
 * 
 * @param ped
 */
export function setPedRandomProps(ped: number): void {
	return _in(0xc44aa053, 0x45c992c6, ped); 
}

/**
 * 
 * @param ped
 * @param hash
 */
export function setPedRelationshipGroupHash(ped: number, hash: number): void {
	return _in(0xc80a74ac, 0x829ddd92, ped, _ch(hash)); 
}

/**
 * PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
 * Known values:
 * @param ped
 * @param flagId
 * @param doReset
 */
export function setPedResetFlag(ped: number, flagId: number, doReset: boolean): void {
	return _in(0xc1e8a365, 0xbf3b29f2, ped, flagId, doReset); 
}

/**
 * 
 * @param ped
 * @param hash
 */
export function setPedRelationshipGroupDefaultHash(ped: number, hash: number): void {
	return _in(0xadb3f206, 0x518799e8, ped, _ch(hash)); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedSeeingRange(ped: number, value: number): void {
	return _in(0xf29cf591, 0xc4bf6cee, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function setPedReserveParachuteTintIndex(ped: number, p1: any): void {
	return _in(0xe88da075, 0x1c22a2ad, ped, p1); 
}

/**
 * This native sets a scuba mask for freemode models and an oxygen bottle for player_\* models. It works on freemode and player_\* models.
 * @param ped
 */
export function SetPedScubaGearVariation(ped: number): void {
	return _in(0x36c6984c, 0x3ed0c911, ped); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param toggle
 */
export function setPedShootsAtCoord(ped: number, x: number, y: number, z: number, toggle: boolean): void {
	return _in(0x96a05e4f, 0xb321b1ba, ped, _fv(x), _fv(y), _fv(z), toggle); 
}

/**
 * ```
 * shootRate 0-1000
 * ```
 * @param ped
 * @param shootRate
 */
export function setPedShootRate(ped: number, shootRate: number): void {
	return _in(0x614da022, 0x990752dc, ped, shootRate); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 */
export function setPedShouldPlayFleeScenarioExit(ped: number, p1: any, p2: any, p3: any): any {
	return _in(0xeeed8faf, 0xec331a70, ped, p1, p2, p3, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function SetPedShouldPlayDirectedScenarioExit(p0: any, p1: any, p2: any, p3: any): any {
	return _in(0xec6935eb, 0xe0847b90, p0, p1, p2, p3, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function setPedShouldPlayImmediateScenarioExit(ped: number): void {
	return _in(0xf1c03a53, 0x52243a30, ped); 
}

/**
 * 
 * @param ped
 */
export function setPedShouldPlayNormalScenarioExit(ped: number): void {
	return _in(0xa3a9299c, 0x4f2adb98, ped); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 * @param p6
 */
export function setPedSphereDefensiveArea(ped: number, x: number, y: number, z: number, radius: number, p5: boolean, p6: boolean): void {
	return _in(0x9d3151a3, 0x73974804, ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5, p6); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedStayInVehicleWhenJacked(ped: number, toggle: boolean): void {
	return _in(0xedf4079f, 0x9d54c9a1, ped, toggle); 
}

/**
 * ```
 * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
 * ```
 * @param ped
 * @param p1
 * @param action
 */
export function setPedStealthMovement(ped: number, p1: boolean, action: string): void {
	return _in(0x88cbb5ce, 0xb96b7bd2, ped, p1, _ts(action)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedSteersAroundObjects(ped: number, toggle: boolean): void {
	return _in(0x1509c089, 0xadc208bf, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedSteersAroundPeds(ped: number, toggle: boolean): void {
	return _in(0x46f2193b, 0x3ad1d891, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedSteersAroundVehicles(ped: number, toggle: boolean): void {
	return _in(0xeb6fb9d4, 0x8dde23ec, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param clipSet
 */
export function setPedStrafeClipset(ped: number, clipSet: string): void {
	return _in(0x29a28f3f, 0x8cf6d854, ped, _ts(clipSet)); 
}

/**
 * Ped no longer takes critical damage modifiers if set to FALSE.
 * 
 * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
 * @param ped
 * @param toggle
 */
export function setPedSuffersCriticalHits(ped: number, toggle: boolean): void {
	return _in(0xebd76f23, 0x59f190ac, ped, toggle); 
}

/**
 * ```
 * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
 * ```
 * @param ped
 * @param sweat
 */
export function setPedSweat(ped: number, sweat: number): void {
	return _in(0x27b0405f, 0x59637d1f, ped, _fv(sweat)); 
}

/**
 * 
 * @param ped
 * @param radius
 * @param maxFriends
 */
export function setPedToInformRespectedFriends(ped: number, radius: number, maxFriends: number): void {
	return _in(0x112942c6, 0xe708f70b, ped, _fv(radius), maxFriends); 
}

/**
 * ```
 * Only 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.
 * ```
 * @param ped
 * @param responseType
 */
export function setPedTargetLossResponse(ped: number, responseType: number): void {
	return _in(0x0703b907, 0x9823da4a, ped, responseType); 
}

/**
 * p4/p5: Unusued in TU27
 * 
 * ### Ragdoll Types
 * 
 * **0**: CTaskNMRelax
 * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
 * **Else**: CTaskNMBalance
 * @param ped
 * @param time1
 * @param time2
 * @param ragdollType
 * @param p4
 * @param p5
 * @param p6
 */
export function setPedToRagdoll(ped: number, time1: number, time2: number, ragdollType: number, p4: boolean, p5: boolean, p6: boolean): boolean {
	return _in(0xae99fb95, 0x5581844a, ped, time1, time2, ragdollType, p4, p5, p6, _r); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedToLoadCover(ped: number, toggle: boolean): void {
	return _in(0x332b562e, 0xeda62399, ped, toggle); 
}

/**
 * ```
 * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
 * ```
 * @param ped
 * @param p1
 * @param p2
 * @param action
 */
export function setPedUsingActionMode(ped: number, p1: boolean, p2: number, action: string): void {
	return _in(0xd75accf5, 0xe0fb5367, ped, p1, p2, _ts(action)); 
}

/**
 * ```
 * Return variable is never used in R*'s scripts.
 * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
 * x, y, and z are coordinates, most likely to where the ped will fall.
 * p7 is probably the force of the fall, but untested, so I left the variable name the same.
 * p8 to p13 are always 0f in R*'s scripts.
 * (Simplified) Example of the usage of the function from R*'s scripts:
 * ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
 * ```
 * @param ped
 * @param time
 * @param p2
 * @param ragdollType
 * @param x
 * @param y
 * @param z
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
export function setPedToRagdollWithFall(ped: number, time: number, p2: number, ragdollType: number, x: number, y: number, z: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean {
	return _in(0xd76632d9, 0x9e4966c8, ped, time, p2, ragdollType, _fv(x), _fv(y), _fv(z), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13), _r); 
}

/**
 * ```
 * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
 * ```
 * @param ped
 * @param angle
 */
export function setPedVisualFieldMaxElevationAngle(ped: number, angle: number): void {
	return _in(0x78d0b676, 0x29d75856, ped, _fv(angle)); 
}

/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * ```
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param flags
 */
export function setPedVehicleForcedSeatUsage(ped: number, vehicle: number, seatIndex: number, flags: number): void {
	return _in(0x952f06be, 0xecd775cc, ped, vehicle, seatIndex, flags); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedVisualFieldMaxAngle(ped: number, value: number): void {
	return _in(0x70793bdc, 0xa1e854d4, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 * @param value
 */
export function setPedVisualFieldMinAngle(ped: number, value: number): void {
	return _in(0x2db49222, 0x2fb21e26, ped, _fv(value)); 
}

/**
 * 
 * @param ped
 * @param angle
 */
export function setPedVisualFieldCenterAngle(ped: number, angle: number): void {
	return _in(0x3b6405e8, 0xab34a907, ped, _fv(angle)); 
}

/**
 * ```
 * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
 * ```
 * @param ped
 * @param angle
 */
export function setPedVisualFieldMinElevationAngle(ped: number, angle: number): void {
	return _in(0x7a276eb2, 0xc224d70f, ped, _fv(angle)); 
}

/**
 * 
 * @param ped
 * @param clipSet
 */
export function setPedWeaponMovementClipset(ped: number, clipSet: string): void {
	return _in(0x2622e35b, 0x77d3aca2, ped, _ts(clipSet)); 
}

/**
 * 
 * @param ped
 * @param range
 */
export function setPedVisualFieldPeripheralRange(ped: number, range: number): void {
	return _in(0x9c74b0bc, 0x831b753a, ped, _fv(range)); 
}

/**
 * ```
 * combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
 * ```
 * @param ped
 */
export function setPedWetnessEnabledThisFrame(ped: number): void {
	return _in(0xb5485e49, 0x07b53019, ped); 
}

/**
 * ```
 * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
 * ```
 * @param ped
 * @param height
 */
export function setPedWetnessHeight(ped: number, height: number): void {
	return _in(0x44cb6447, 0xd2571aa0, ped, _fv(height)); 
}

/**
 * ```
 * Min and max are usually 100.0 and 200.0
 * ```
 * @param x
 * @param y
 * @param z
 * @param min
 * @param max
 */
export function setPopControlSphereThisFrame(x: number, y: number, z: number, min: number, max: number): void {
	return _in(0xd8c3be3e, 0xe94caf2d, _fv(x), _fv(y), _fv(z), _fv(min), _fv(max)); 
}

/**
 * ```
 * Sets the relationship between two groups. This should be called twice (once for each group).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * Example:
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * ```
 * @param relationship
 * @param group1
 * @param group2
 */
export function setRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void {
	return _in(0xbf25eb89, 0x375a37ad, relationship, _ch(group1), _ch(group2)); 
}

/**
 * ```
 * Works for both player and peds, but some flags don't seem to work for the player (1, for example)
 * 1 - Blocks ragdolling when shot.
 * 2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
 * 4 - Blocks ragdolling when set on fire.
 * -----------------------------------------------------------------------
 * There seem to be 26 flags
 * ```
 * @param ped
 * @param flags
 */
export function setRagdollBlockingFlags(ped: number, flags: number): void {
	return _in(0x26695ec7, 0x67728d84, ped, flags); 
}

/**
 * 
 * @param group
 * @param p1
 */
export function SetRelationshipGroupDontAffectWantedLevel(group: number, p1: boolean): void {
	return _in(0x5615e0c5, 0xeb2bc6e2, _ch(group), p1); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param range
 * @param p4
 */
export function setScenarioPedsSpawnInSphereArea(x: number, y: number, z: number, range: number, p4: number): void {
	return _in(0x28157d43, 0xcf600981, _fv(x), _fv(y), _fv(z), _fv(range), p4); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setScenarioPedDensityMultiplierThisFrame(p0: number, p1: number): void {
	return _in(0x7a556143, 0xa1c03898, _fv(p0), _fv(p1)); 
}

/**
 * ```
 * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
 * ```
 * @param value
 */
export function setScenarioPedsToBeReturnedByNextCommand(value: boolean): void {
	return _in(0x14f19a87, 0x82c8071e, value); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function setScriptedAnimSeatOffset(ped: number, p1: number): void {
	return _in(0x5917bba3, 0x2d06c230, ped, _fv(p1)); 
}

/**
 * 
 * @param sceneID
 * @param toggle
 */
export function setSynchronizedSceneHoldLastFrame(sceneID: number, toggle: boolean): void {
	return _in(0x394b9cd1, 0x2435c981, sceneID, toggle); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function setScriptedConversionCoordThisFrame(x: number, y: number, z: number): void {
	return _in(0x5086c784, 0x3552cf85, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param sceneID
 * @param x
 * @param y
 * @param z
 * @param roll
 * @param pitch
 * @param yaw
 * @param p7
 */
export function setSynchronizedSceneOrigin(sceneID: number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p7: boolean): void {
	return _in(0x6acf6b72, 0x25801cd7, sceneID, _fv(x), _fv(y), _fv(z), _fv(roll), _fv(pitch), _fv(yaw), p7); 
}

/**
 * 
 * @param sceneID
 * @param toggle
 */
export function setSynchronizedSceneLooped(sceneID: number, toggle: boolean): void {
	return _in(0xd9a897a4, 0xc6c2974f, sceneID, toggle); 
}

/**
 * 
 * @param sceneID
 * @param phase
 */
export function setSynchronizedScenePhase(sceneID: number, phase: number): void {
	return _in(0x734292f4, 0xf0abf6d0, sceneID, _fv(phase)); 
}

/**
 * 
 * @param sceneID
 * @param rate
 */
export function setSynchronizedSceneRate(sceneID: number, rate: number): void {
	return _in(0xb6c49f8a, 0x5e295a5d, sceneID, _fv(rate)); 
}

/**
 * 
 */
export function spawnpointsCancelSearch(): void {
	return _in(0xfee4a545, 0x9472a9f8); 
}

/**
 * 
 */
export function spawnpointsGetNumSearchResults(): number {
	return _in(0xa635c11b, 0x8c44afc2, _r, _ri); 
}

/**
 * 
 * @param randomInt
 * @param x
 * @param y
 * @param z
 */
export function spawnpointsGetSearchResult(randomInt: number): void {
	return _in(0x280c7e3a, 0xc7f56e90, randomInt, _f, _f, _f); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function spawnpointsGetSearchResultFlags(p0: any): void {
	return _in(0xb782f823, 0x8512bad5, p0, _i); 
}

/**
 * 
 */
export function spawnpointsIsSearchActive(): boolean {
	return _in(0x3c675069, 0x96001f5e, _r); 
}

/**
 * 
 */
export function spawnpointsIsSearchComplete(): boolean {
	return _in(0xa586fbeb, 0x32a53dbb, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param interiorFlags
 * @param scale
 * @param duration
 */
export function spawnpointsStartSearch(p0: number, p1: number, p2: number, p3: number, p4: number, interiorFlags: number, scale: number, duration: number): void {
	return _in(0x2df9038c, 0x90ad5264, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), interiorFlags, _fv(scale), duration); 
}

/**
 * 
 */
export function spawnpointsIsSearchFailed(): boolean {
	return _in(0xf445de8d, 0xa80a1792, _r); 
}

/**
 * 
 */
export function stopAnyPedModelBeingSuppressed(): void {
	return _in(0xb47bd05f, 0xa66b40cf); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param interiorFlags
 * @param scale
 * @param duration
 */
export function spawnpointsStartSearchInAngledArea(x: number, y: number, z: number, p3: number, p4: number, p5: number, p6: number, interiorFlags: number, scale: number, duration: number): void {
	return _in(0xb2aff102, 0x16defa2f, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(p4), _fv(p5), _fv(p6), interiorFlags, _fv(scale), duration); 
}

/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * @param id
 */
export function unregisterPedheadshot(id: number): void {
	return _in(0x96b1361d, 0x9b24c2ff, id); 
}

/**
 * 
 * @param ped
 */
export function stopPedWeaponFiringWhenDropped(ped: number): void {
	return _in(0xc158d281, 0x42a34608, ped); 
}

/**
 * 
 * @param ped
 */
export function wasPedKilledByStealth(ped: number): boolean {
	return _in(0xf9800aa1, 0xa771b000, ped, _r); 
}

/**
 * See [`SET_PED_HEAD_BLEND_DATA`](#\_0x9414E18B9434C2FE)
 * @param ped
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 */
export function updatePedHeadBlendData(ped: number, shapeMix: number, skinMix: number, thirdMix: number): void {
	return _in(0x723538f6, 0x1c647c5a, ped, _fv(shapeMix), _fv(skinMix), _fv(thirdMix)); 
}

/**
 * 
 * @param ped
 */
export function wasPedKilledByTakedown(ped: number): boolean {
	return _in(0x7f08e260, 0x39c7347c, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function wasPedKnockedOut(ped: number): boolean {
	return _in(0x61767f73, 0xeaceed21, ped, _r); 
}

/**
 * ```
 * Despite this function's name, it simply returns whether the specified handle is a Ped.
 * ```
 * @param ped
 */
export function wasPedSkeletonUpdated(ped: number): boolean {
	return _in(0x11b499c1, 0xe0ff8559, ped, _r); 
}

/**
 * 
 * @param entity
 */
export function activatePhysics(entity: number): void {
	return _in(0x710311ad, 0xf0e20730, entity); 
}

/**
 * 
 * @param posX
 * @param posY
 * @param posZ
 * @param vecX
 * @param vecY
 * @param vecZ
 * @param impulse
 */
export function applyImpulseToCloth(posX: number, posY: number, posZ: number, vecX: number, vecY: number, vecZ: number, impulse: number): void {
	return _in(0xe37f7218, 0x24571784, _fv(posX), _fv(posY), _fv(posZ), _fv(vecX), _fv(vecY), _fv(vecZ), _fv(impulse)); 
}

/**
 * ```
 * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
 * __
 * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
 * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
 * ```
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param maxLength
 * @param ropeType
 * @param initLength
 * @param minLength
 * @param lengthChangeRate
 * @param onlyPPU
 * @param collisionOn
 * @param lockFromFront
 * @param timeMultiplier
 * @param breakable
 * @param unkPtr
 * @return A script handle for the rope
 */
export function addRope(x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, maxLength: number, ropeType: number, initLength: number, minLength: number, lengthChangeRate: number, onlyPPU: boolean, collisionOn: boolean, lockFromFront: boolean, timeMultiplier: number, breakable: boolean): number {
	return _in(0xe832d760, 0x399eb220, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(maxLength), ropeType, _fv(initLength), _fv(minLength), _fv(lengthChangeRate), onlyPPU, collisionOn, lockFromFront, _fv(timeMultiplier), breakable, _i, _r, _ri); 
}

/**
 * ```
 * Attaches entity 1 to entity 2.
 * ```
 * @param ropeId
 * @param ent1
 * @param ent2
 * @param ent1_x
 * @param ent1_y
 * @param ent1_z
 * @param ent2_x
 * @param ent2_y
 * @param ent2_z
 * @param length
 * @param p10
 * @param p11
 * @param boneName1
 * @param boneName2
 */
export function attachEntitiesToRope(ropeId: number, ent1: number, ent2: number, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number, p10: boolean, p11: boolean, boneName1: string, boneName2: string): void {
	return _in(0x3d95ec8b, 0x6d940ac3, ropeId, ent1, ent2, _fv(ent1_x), _fv(ent1_y), _fv(ent1_z), _fv(ent2_x), _fv(ent2_y), _fv(ent2_z), _fv(length), p10, p11, _ts(boneName1), _ts(boneName2)); 
}

/**
 * ```
 * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
 * ```
 * @param ropeId
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param p5
 */
export function attachRopeToEntity(ropeId: number, entity: number, x: number, y: number, z: number, p5: boolean): void {
	return _in(0x4b490a68, 0x32559a65, ropeId, entity, _fv(x), _fv(y), _fv(z), p5); 
}

/**
 * 
 * @param ropeId
 */
export function deleteChildRope(ropeId: number): void {
	return _in(0xaa5d6b18, 0x88e4db20, ropeId); 
}

/**
 * 
 * @param entity
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function breakEntityGlass(entity: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: any, p10: boolean): void {
	return _in(0x2e648d16, 0xf6e308f3, entity, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10); 
}

/**
 * 
 * @param ropeId
 */
export function deleteRope(): void {
	return _in(0x52b48292, 0x81364649, _ii(ropeId)); 
}

/**
 * 
 * @param ropeId
 * @param entity
 */
export function detachRopeFromEntity(ropeId: number, entity: number): void {
	return _in(0xbcf30269, 0x12a8647d, ropeId, entity); 
}

/**
 * 
 * @param ropeId
 */
export function doesRopeExist(): boolean {
	return _in(0xfd5448be, 0x3111ed96, _ii(ropeId), _r); 
}

/**
 * Return if the rope was generated or not by the script where the native is called.
 * @param ropeId
 */
export function DoesRopeBelongToThisScript(ropeId: number): boolean {
	return _in(0x271c9d3a, 0xca5d6409, ropeId, _r); 
}

/**
 * ```
 * GET_*
 * ```
 * @param object
 */
export function GetHasObjectFragInst(object: number): boolean {
	return _in(0x0c112765, 0x300c7e1e, object, _r); 
}

/**
 * 
 * @param entity
 */
export function getCgoffset(entity: number): Vector3 {
	return _in(0x8214a4b5, 0xa7a33612, entity, _r, _rv); 
}

/**
 * 
 * @param ropeId
 */
export function getRopeLastVertexCoord(ropeId: number): Vector3 {
	return _in(0x21bb0fbd, 0x3e217c2d, ropeId, _r, _rv); 
}

/**
 * 
 * @param ropeId
 * @param vertex
 */
export function getRopeVertexCoord(ropeId: number, vertex: number): Vector3 {
	return _in(0xea61ca8e, 0x80f09e4d, ropeId, vertex, _r, _rv); 
}

/**
 * ```
 * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
 * ```
 * @param ropeId
 * @param rope_preset
 */
export function loadRopeData(ropeId: number, rope_preset: string): void {
	return _in(0xcbb203c0, 0x4d1abd27, ropeId, _ts(rope_preset)); 
}

/**
 * 
 * @param ropeId
 */
export function getRopeVertexCount(ropeId: number): number {
	return _in(0x3655f544, 0xcd30f0b5, ropeId, _r, _ri); 
}

/**
 * 
 * @param ropeId
 * @param vertex
 * @param x
 * @param y
 * @param z
 */
export function pinRopeVertex(ropeId: number, vertex: number, x: number, y: number, z: number): void {
	return _in(0x2b320cf1, 0x4146b69a, ropeId, vertex, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param ropeId
 */
export function ropeConvertToSimple(ropeId: number): void {
	return _in(0x5389d48e, 0xfa2f079a, ropeId); 
}

/**
 * 
 */
export function ropeAreTexturesLoaded(): boolean {
	return _in(0xf2d0e6a7, 0x5cc05597, _r); 
}

/**
 * 
 * @param ropeId
 * @param toggle
 */
export function ropeDrawShadowEnabled(toggle: boolean): void {
	return _in(0xf159a638, 0x06bb5ba8, _i, toggle); 
}

/**
 * 
 * @param ropeId
 */
export function ropeGetDistanceBetweenEnds(ropeId: number): number {
	return _in(0x73040398, 0xdff9a4a6, ropeId, _r, _rf); 
}

/**
 * ```
 * Forces a rope to a certain length.
 * ```
 * @param ropeId
 * @param length
 */
export function ropeForceLength(ropeId: number, length: number): void {
	return _in(0xd009f759, 0xa723db1b, ropeId, _fv(length)); 
}

/**
 * ```
 * Reset a rope to a certain length.
 * ```
 * @param ropeId
 * @param length
 */
export function ropeResetLength(ropeId: number, length: number): void {
	return _in(0xc16de94d, 0x9bea14a0, ropeId, _fv(length)); 
}

/**
 * ```
 * Loads rope textures for all ropes in the current scene.
 * ```
 */
export function ropeLoadTextures(): void {
	return _in(0x9b9039db, 0xf2d258c1); 
}

/**
 * 
 * @param ropeId
 * @param p1
 */
export function ropeSetUpdateOrder(ropeId: number, p1: any): void {
	return _in(0xdc57a637, 0xa20006ed, ropeId, p1); 
}

/**
 * 
 * @param ropeId
 */
export function ropeSetUpdatePinverts(ropeId: number): void {
	return _in(0xc8d667ee, 0x52114aba, ropeId); 
}

/**
 * ```
 * Unloads rope textures for all ropes in the current scene.
 * ```
 */
export function ropeUnloadTextures(): void {
	return _in(0x6ce36c35, 0xc1ac8163); 
}

/**
 * 
 * @param entity
 */
export function setCgAtBoundcenter(entity: number): void {
	return _in(0xbe520d97, 0x61ff811f, entity); 
}

/**
 * 
 * @param entity
 * @param x
 * @param y
 * @param z
 */
export function setCgoffset(entity: number, x: number, y: number, z: number): void {
	return _in(0xd8fa3908, 0xd7b86904, entity, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param entity
 * @param vertex
 * @param value
 */
export function setDamping(entity: number, vertex: number, value: number): void {
	return _in(0xeea3b200, 0xa6feb65b, entity, vertex, _fv(value)); 
}

/**
 * 
 * @param object
 * @param toggle
 */
export function setDisableBreaking(object: number, toggle: boolean): void {
	return _in(0x5cec1a84, 0x620e7d5b, object, toggle); 
}

/**
 * 
 * @param object
 * @param toggle
 */
export function setDisableFragDamage(object: number, toggle: boolean): void {
	return _in(0x01ba3aed, 0x21c16cfb, object, toggle); 
}

/**
 * 
 * @param entity
 * @param toggle
 */
export function SetEntityProofUnk(entity: number, toggle: boolean): void {
	return _in(0x15f94473, 0x0c832252, entity, toggle); 
}

/**
 * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
 * 
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param toggle
 */
export function SetLaunchControlEnabled(toggle: boolean): void {
	return _in(0xaa6a6098, 0x851c396f, toggle); 
}

/**
 * 
 * @param ropeId
 */
export function startRopeUnwindingFront(ropeId: number): void {
	return _in(0x538d1179, 0xec1aa9a9, ropeId); 
}

/**
 * 
 * @param ropeId
 */
export function stopRopeUnwindingFront(ropeId: number): void {
	return _in(0xfff3a507, 0x79efbbb3, ropeId); 
}

/**
 * 
 * @param ropeId
 */
export function stopRopeWinding(ropeId: number): void {
	return _in(0xcb2d4ab8, 0x4a19aa7c, ropeId); 
}

/**
 * 
 * @param ropeId
 */
export function startRopeWinding(ropeId: number): void {
	return _in(0x1461c72c, 0x889e343e, ropeId); 
}

/**
 * 
 * @param ropeId
 * @param vertex
 */
export function unpinRopeVertex(ropeId: number, vertex: number): void {
	return _in(0x4b5ae2ee, 0xe4a8f180, ropeId, vertex); 
}

/**
 * ```
 * This will disable the ability to make camera changes in R* Editor.
 * 
 * RE*
 * ```
 */
export function DisableRockstarEditorCameraChanges(): void {
	return _in(0xaf66dcee, 0x6609b148); 
}

/**
 * ```
 * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
 * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
 * retn
 * ```
 */
export function IsRecording(): boolean {
	return _in(0x1897ca71, 0x995a90b4, _r); 
}

/**
 * 
 */
export function SaveRecordingClip(): boolean {
	return _in(0x644546ec, 0x5287471b, _r); 
}

/**
 * ```
 * Starts recording a replay.
 * If mode is 0, turns on action replay.
 * If mode is 1, starts recording.
 * If already recording a replay, does nothing.
 * ```
 * @param mode
 */
export function StartRecording(mode: number): void {
	return _in(0xc3ac2fff, 0x9612ac81, mode); 
}

/**
 * ```
 * Stops recording and discards the recorded clip.
 * ```
 */
export function StopRecordingAndDiscardClip(): void {
	return _in(0x88bb3507, 0xed41a240); 
}

/**
 * ```
 * Stops recording and saves the recorded clip.
 * ```
 */
export function StopRecordingAndSaveClip(): void {
	return _in(0x071a5197, 0xd6afc8b3); 
}

/**
 * This disable the recording feature and has to be called every frame.
 */
export function StopRecordingThisFrame(): void {
	return _in(0xeb2d525b, 0x57f42b40); 
}

/**
 * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
 * 
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 */
export function ActivateRockstarEditor(): void {
	return _in(0x49da8145, 0x672b2725); 
}

/**
 * ```
 * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
 * ```
 */
export function IsInteriorRenderingDisabled(): boolean {
	return _in(0x95ab8b5c, 0x992c7b58, _r); 
}

/**
 * ```
 * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
 * ```
 */
export function ResetEditorValues(): void {
	return _in(0x3353d13f, 0x09307691); 
}

/**
 * ```
 * Deletes the given context from the background scripts context map.
 * 
 * NativeDB Introduced: v323
 * ```
 * @param contextName
 */
export function bgEndContext(contextName: string): void {
	return _in(0xdc2bacd9, 0x20d0a0dd, _ts(contextName)); 
}

/**
 * ```
 * Inserts the given context into the background scripts context map.
 * 
 * NativeDB Introduced: v323
 * ```
 * @param contextName
 */
export function bgStartContext(contextName: string): void {
	return _in(0x9d5a25ba, 0xdb742acd, _ts(contextName)); 
}

/**
 * ```
 * Hashed version of 0xDC2BACD920D0A0DD.
 * 
 * NativeDB Introduced: v323
 * ```
 * @param contextHash
 */
export function bgEndContextHash(contextHash: number): void {
	return _in(0x107e5cc7, 0xca942bc1, _ch(contextHash)); 
}

/**
 * 
 * @param scriptName
 */
export function doesScriptExist(scriptName: string): boolean {
	return _in(0xfc04745f, 0xbe67c19a, _ts(scriptName), _r); 
}

/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * ```
 * @param eventGroup
 * @param eventIndex
 */
export function getEventAtIndex(eventGroup: number, eventIndex: number): number {
	return _in(0xd8f66a3a, 0x60c62153, eventGroup, eventIndex, _r, _ri); 
}

/**
 * ```
 * Hashed version of 0x9D5A25BADB742ACD.
 * 
 * NativeDB Introduced: v323
 * ```
 * @param contextHash
 */
export function bgStartContextHash(contextHash: number): void {
	return _in(0x75b18e49, 0x607874c7, _ch(contextHash)); 
}

/**
 * 
 * @param scriptHash
 */
export function doesScriptWithNameHashExist(scriptHash: number): boolean {
	return _in(0xf86aa3c5, 0x6ba31381, _ch(scriptHash), _r); 
}

/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * ```
 * @param eventGroup
 * @param eventIndex
 * @param eventData
 * @param eventDataSize
 */
export function getEventData(eventGroup: number, eventIndex: number, eventDataSize: number): boolean {
	return _in(0x2902843f, 0xcd2b2d79, eventGroup, eventIndex, _i, eventDataSize, _r); 
}

/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * ```
 * @param eventGroup
 * @param eventIndex
 */
export function getEventExists(eventGroup: number, eventIndex: number): boolean {
	return _in(0x936e6168, 0xa9bcedb5, eventGroup, eventIndex, _r); 
}

/**
 * 
 */
export function getHashOfThisScriptName(): number {
	return _in(0x8a1c8b17, 0x38ffe87e, _r); 
}

/**
 * 
 */
export function getIdOfThisThread(): number {
	return _in(0xc30338e8, 0x088e2e21, _r, _ri); 
}

/**
 * 
 */
export function getNoLoadingScreen(): boolean {
	return _in(0x18c1270e, 0xa7f199bc, _r); 
}

/**
 * 
 * @param threadId
 */
export function GetNameOfThread(threadId: number): string {
	return _in(0x05a42ba9, 0xfc8da96b, threadId, _r, _s); 
}

/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * ```
 * @param eventGroup
 */
export function getNumberOfEvents(eventGroup: number): number {
	return _in(0x5f92a689, 0xa06620aa, eventGroup, _r, _ri); 
}

/**
 * ```
 * Gets the number of instances of the specified script is currently running.
 * Actually returns numRefs - 1.
 * if (program)
 * v3 = rage::scrProgram::GetNumRefs(program) - 1;
 * return v3;
 * ```
 * @param scriptHash
 */
export function GetNumberOfReferencesOfScriptWithNameHash(scriptHash: number): number {
	return _in(0x2c83a9da, 0x6bffc4f9, _ch(scriptHash), _r, _ri); 
}

/**
 * 
 */
export function getThisScriptName(): string {
	return _in(0x442e0a7e, 0xde4a738a, _r, _s); 
}

/**
 * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
 * @param scriptName
 */
export function hasScriptLoaded(scriptName: string): boolean {
	return _in(0xe6cc9f3b, 0xa0fb9ef1, _ts(scriptName), _r); 
}

/**
 * 
 * @param scriptHash
 */
export function hasScriptWithNameHashLoaded(scriptHash: number): boolean {
	return _in(0x5f0f0c78, 0x3eb16c04, _ch(scriptHash), _r); 
}

/**
 * 
 * @param threadId
 */
export function isThreadActive(threadId: number): boolean {
	return _in(0x46e9ae36, 0xd8fa6417, threadId, _r); 
}

/**
 * Updates the display of the MP/SP loading buttons, and locks the state so that other options are not displayed or changed. This can only be done once.
 */
export function LockLoadingScreenButtons(): void {
	return _in(0xb1577667, 0xc3708f9b); 
}

/**
 * 
 * @param scriptName
 */
export function requestScript(scriptName: string): void {
	return _in(0x6eb5f71a, 0xa68f2e8e, _ts(scriptName)); 
}

/**
 * ```
 * formerly _REQUEST_STREAMED_SCRIPT
 * ```
 * @param scriptHash
 */
export function requestScriptWithNameHash(scriptHash: number): void {
	return _in(0xd62a67d2, 0x6d9653e6, _ch(scriptHash)); 
}

/**
 * ```
 * If the function returns 0, the end of the iteration has been reached.
 * ```
 */
export function scriptThreadIteratorGetNextThreadId(): number {
	return _in(0x30b4fa1c, 0x82dd4b9f, _r, _ri); 
}

/**
 * Starts a new iteration of the current threads.
 * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
 */
export function scriptThreadIteratorReset(): void {
	return _in(0xdadfada5, 0xa20143a8); 
}

/**
 * 
 * @param toggle
 */
export function setNoLoadingScreen(toggle: boolean): void {
	return _in(0x5262cc19, 0x95d07e09, toggle); 
}

/**
 * 
 * @param scriptName
 */
export function setScriptAsNoLongerNeeded(scriptName: string): void {
	return _in(0xc90d2dca, 0xcd56184c, _ts(scriptName)); 
}

/**
 * 
 */
export function shutdownLoadingScreen(): void {
	return _in(0x078ebe98, 0x09ccd637); 
}

/**
 * 
 * @param scriptHash
 */
export function setScriptWithNameHashAsNoLongerNeeded(scriptHash: number): void {
	return _in(0xc5bc0389, 0x60e9db27, _ch(scriptHash)); 
}

/**
 * 
 */
export function terminateThisThread(): void {
	return _in(0x1090044a, 0xd1da76fa); 
}

/**
 * 
 * @param threadId
 */
export function terminateThread(threadId: number): void {
	return _in(0xc8b189ed, 0x9138bcd4, threadId); 
}

/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
 * ```
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
export function triggerScriptEvent(eventGroup: number, eventDataSize: number, playerBits: number): void {
	return _in(0x5ae99c57, 0x1d5bbe5d, eventGroup, _i, eventDataSize, playerBits); 
}

/**
 * ```
 * See TRIGGER_SCRIPT_EVENT
 * ```
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
export function TriggerScriptEvent2(eventGroup: number, eventDataSize: number, playerBits: number): void {
	return _in(0xa40cc53d, 0xf8e50837, eventGroup, _i, eventDataSize, playerBits); 
}

/**
 * Returns the result of a shape test.
 * 
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * 
 * Unless the return value is 2, the other return values are undefined.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param entityHit
 * @return `0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated.
 */
export function getShapeTestResult(shapeTestHandle: number): number {
	return _in(0x3d87450e, 0x15d98694, shapeTestHandle, _i, _v(endCoords), _v(surfaceNormal), _i, _r, _ri); 
}

/**
 * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an
 * ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
 * @param entity
 */
export function releaseScriptGuidFromEntity(entity: number): void {
	return _in(0x2b3334bc, 0xa57cd799, entity); 
}

/**
 * Returns the result of a shape test, also returning the material of any touched surface.
 * 
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * 
 * Unless the return value is 2, the other return values are undefined.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param materialHash
 * @param entityHit
 * @return `0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated.
 */
export function getShapeTestResultIncludingMaterial(shapeTestHandle: number): number {
	return _in(0x65287525, 0xd951f6be, shapeTestHandle, _i, _v(endCoords), _v(surfaceNormal), _i, _i, _r, _ri); 
}

/**
 * See [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E) for flags.
 * @param entity
 * @param flags1
 * @param flags2
 */
export function startShapeTestBound(entity: number, flags1: number, flags2: number): number {
	return _in(0x37181417, 0xce7c8900, entity, flags1, flags2, _r, _ri); 
}

/**
 * Does the same as [START_SHAPE_TEST_LOS_PROBE](#\_0x7EE9F5D83DD4F90E), except blocking until the shape test completes.
 * 
 * Use [START_SHAPE_TEST_LOS_PROBE](#\_0x7EE9F5D83DD4F90E) instead. Literally. Rockstar named this correctly: it's expensive, and it's synchronous.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 * @return A shape test handle.
 */
export function startExpensiveSynchronousShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number {
	return _in(0x377906d8, 0xa31e5586, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri); 
}

/**
 * For more information, see [`START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE`](#\_0x377906D8A31E5586) and [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E).
 * @param x
 * @param y
 * @param z
 * @param x1
 * @param y1
 * @param z1
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p9
 * @param flags
 * @param entity
 * @param p12
 */
export function startShapeTestBox(x: number, y: number, z: number, x1: number, y1: number, z1: number, rotX: number, rotY: number, rotZ: number, p9: number, flags: number, entity: number, p12: number): number {
	return _in(0xfe466162, 0xc4401d18, _fv(x), _fv(y), _fv(z), _fv(x1), _fv(y1), _fv(z1), _fv(rotX), _fv(rotY), _fv(rotZ), p9, flags, entity, p12, _r, _ri); 
}

/**
 * Asynchronously starts a line-of-sight (raycast) world probe shape test.
 * 
 * ```cpp
 * enum TraceFlags
 * {
 * None = 0,
 * IntersectWorld = 1,
 * IntersectVehicles = 2,
 * IntersectPedsSimpleCollision = 4,
 * IntersectPeds = 8,
 * IntersectObjects = 16,
 * IntersectWater = 32,
 * Unknown = 128,
 * IntersectFoliage = 256,
 * IntersectEverything = 4294967295
 * }
 * ```
 * 
 * NOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.
 * 
 * Use the handle with [GET_SHAPE_TEST_RESULT](#\_0x3D87450E15D98694) or [GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL](#\_0x65287525D951F6BE) until it returns 0 or 2.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 * @return A shape test handle.
 */
export function startShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number {
	return _in(0x7ee9f5d8, 0x3dd4f90e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri); 
}

/**
 * See [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E) for flags.
 * @param entity
 * @param flags1
 * @param flags2
 */
export function startShapeTestBoundingBox(entity: number, flags1: number, flags2: number): number {
	return _in(0x05283772, 0x1a854ec7, entity, flags1, flags2, _r, _ri); 
}

/**
 * Raycast from point to point, where the ray has a radius.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 * @param flags
 * @param entity
 * @param p9
 */
export function startShapeTestCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number {
	return _in(0x28579d1b, 0x8f8aac80, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri); 
}

/**
 * Since it is only used in the PC version, likely some mouse-friendly shape test. Uses **in** vector arguments.
 * 
 * Asynchronous.
 * 
 * ```
 * it returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
 * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
 * ```
 * 
 * See [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E) for flags.
 * @param pVec1
 * @param pVec2
 * @param flag
 * @param entity
 * @param flag2
 */
export function StartShapeTestSurroundingCoords(flag: number, entity: number, flag2: number): number {
	return _in(0xff6be494, 0xc7987f34, _v(pVec1), _v(pVec2), flag, entity, flag2, _r, _ri); 
}

/**
 * Performs the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 * @param flags
 * @param entity
 * @param p9
 */
export function startShapeTestSweptSphere(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number {
	return _in(0xe6ac6c45, 0xfbe83004, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri); 
}

/**
 * 
 */
export function IsRockstarMessageReadyForScript(): boolean {
	return _in(0xbc1cc912, 0x05ec8d6e, _r); 
}

/**
 * 
 */
export function RockstarMessageGetString(): string {
	return _in(0xdf649c4e, 0x9afdd788, _r, _s); 
}

/**
 * 
 */
export function scEmailMessageClearRecipList(): void {
	return _in(0x55df6db4, 0x5179236e); 
}

/**
 * ```
 * Same as HAS_ACHIEVEMENT_BEEN_PASSED
 * ```
 * @param achievement
 */
export function ScGetHasAchievementBeenPassed(achievement: number): boolean {
	return _in(0x418dc16f, 0xae452c1c, achievement, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function scEmailMessagePushGamerToRecipList(): void {
	return _in(0x2330c12a, 0x7a605d16, _ii(networkHandle)); 
}

/**
 * ```
 * Returns the nickname of the logged-in Rockstar Social Club account.
 * ```
 */
export function ScGetNickname(): string {
	return _in(0x198d161f, 0x458ecc7f, _r, _s); 
}

/**
 * ```
 * sfink: from scripts:
 * func_720(socialclub::_0x8416FE4E4629D7D7("bIgnoreCheaterOverride"));
 * func_719(socialclub::_0x8416FE4E4629D7D7("bIgnoreBadSportOverride"));
 * ```
 * @param name
 */
export function scGamerdataGetBool(name: string): boolean {
	return _in(0x8416fe4e, 0x4629d7d7, _ts(name), _r); 
}

/**
 * 
 * @param offset
 * @param limit
 */
export function ScInboxGetEmails(offset: number, limit: number): void {
	return _in(0x040addcb, 0xafa1018a, offset, limit); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param name
 * @param outValue
 */
export function scGamerdataGetFloat(name: string): boolean {
	return _in(0xa770c8ee, 0xc6fb2ac5, _ts(name), _fi(outValue), _r); 
}

/**
 * 
 * @param msgIndex
 */
export function scInboxGetMessageIsReadAtIndex(msgIndex: number): boolean {
	return _in(0x93028f1d, 0xb42bfd08, msgIndex, _r); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * @param name
 * @param outValue
 */
export function scGamerdataGetInt(name: string): boolean {
	return _in(0xc85a7127, 0xe7ad02aa, _ts(name), _ii(outValue), _r); 
}

/**
 * 
 * @param msgIndex
 */
export function scInboxGetMessageTypeAtIndex(msgIndex: number): number {
	return _in(0xbb8ea16e, 0xcbc976c4, msgIndex, _r); 
}

/**
 * 
 * @param p0
 */
export function scInboxMessageDoApply(p0: number): boolean {
	return _in(0x9a2c8064, 0xb6c1e41a, p0, _r); 
}

/**
 * 
 */
export function scInboxGetTotalNumMessages(): number {
	return _in(0x03a93ff1, 0xa2ca0864, _r, _ri); 
}

/**
 * 
 * @param index
 * @param outData
 */
export function ScInboxMessageGetBountyData(index: number): boolean {
	return _in(0x87e0052f, 0x08bd64e6, index, _ii(outData), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function ScInboxMessageGetDataBool(p0: number, p1: string): boolean {
	return _in(0xffe5c16f, 0x402d851d, p0, _ts(p1), _r); 
}

/**
 * 
 * @param p0
 * @param context
 * @param out
 */
export function scInboxMessageGetDataInt(p0: number, context: string): boolean {
	return _in(0xa00efe40, 0x82c4056e, p0, _ts(context), _ii(out), _r); 
}

/**
 * 
 * @param p0
 * @param context
 * @param out
 */
export function scInboxMessageGetDataString(p0: number, context: string, out: string): boolean {
	return _in(0x7572ef42, 0xfc6a9b6d, p0, _ts(context), _ts(out), _r); 
}

/**
 * 
 * @param p0
 */
export function ScInboxMessageGetString(p0: number): string {
	return _in(0xf3e31d16, 0xcbdcb304, p0, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function ScInboxMessagePop(p0: number): boolean {
	return _in(0x2c015348, 0xcf19ca1d, p0, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function scInboxMessageGetUgcdata(p0: any): boolean {
	return _in(0x69d82604, 0xa1a5a254, p0, _i, _r); 
}

/**
 * 
 * @param networkHandle
 */
export function ScInboxMessagePushGamerToEventRecipList(): void {
	return _in(0xda024bdb, 0xd600f44a, _ii(networkHandle)); 
}

/**
 * 
 * @param data
 */
export function ScInboxMessageSendBountyPresenceEvent(data: string): boolean {
	return _in(0x6afd2cd7, 0x53feef83, _ts(data), _r); 
}

/**
 * 
 * @param data
 */
export function ScInboxMessageSendUgcStatUpdateEvent(data: string): void {
	return _in(0xa68d3d22, 0x9f4f3b06, _ts(data)); 
}

/**
 * Returns true if the add license plate text request is still pending.
 * @param token
 */
export function scLicenseplateGetAddIsPending(token: number): boolean {
	return _in(0x07c61676, 0xe5bb52cd, token, _r); 
}

/**
 * Social Club native to add license plate for the user
 * @param plateText
 * @param plateData
 * @param tokenOut
 */
export function scLicenseplateAdd(plateText: string, plateData: string): boolean {
	return _in(0x1989c6e6, 0xf67e76a8, _ts(plateText), _ts(plateData), _ii(tokenOut), _r); 
}

/**
 * Gets number of plates in the response of the get license plates request.
 * Range: \[0, count) can be used as second argument to \_0x1D4446A62D35B0D0 and \_0x2E89990DDFF670C3
 * @param token
 */
export function scLicenseplateGetCount(token: number): number {
	return _in(0x700569db, 0xa175a77c, token, _r, _ri); 
}

/**
 * Returns a status for adding the license plate
 * @param token
 */
export function scLicenseplateGetAddStatus(token: number): number {
	return _in(0x8147fff6, 0xa718e1ad, token, _r, _ri); 
}

/**
 * Gets the status of the is valid license plate request
 * @param token
 */
export function scLicenseplateGetIsvalidStatus(token: number): number {
	return _in(0x5c4ebffa, 0x98bdb41c, token, _r, _ri); 
}

/**
 * Checks if the "is valid license plate" request is still pending.
 * @param token
 */
export function scLicenseplateGetIsvalidIsPending(token: number): boolean {
	return _in(0xd302e99e, 0xdf0449cf, token, _r); 
}

/**
 * Gets license plate data related to the get license plate info request
 * @param token
 * @param plateIndex
 */
export function scLicenseplateGetPlateData(token: number, plateIndex: number): string {
	return _in(0x2e89990d, 0xdff670c3, token, plateIndex, _r, _s); 
}

/**
 * Gets license plate text related to the get license plate info request
 * @param token
 * @param plateIndex
 */
export function scLicenseplateGetPlate(token: number, plateIndex: number): string {
	return _in(0x1d4446a6, 0x2d35b0d0, token, plateIndex, _r, _s); 
}

/**
 * SC native to start a request for if license plate text is valid
 * @param plateText
 * @param tokenOut
 */
export function scLicenseplateIsvalid(plateText: string): boolean {
	return _in(0x0f73393b, 0xac7e6730, _ts(plateText), _ii(tokenOut), _r); 
}

/**
 * 
 * @param attrHash
 * @param value
 */
export function scPresenceAttrSetInt(attrHash: number, value: number): boolean {
	return _in(0x1f1e9682, 0x483697c7, _ch(attrHash), value, _r); 
}

/**
 * 
 * @param attrHash
 * @param value
 */
export function scPresenceAttrSetString(attrHash: number, value: string): boolean {
	return _in(0x287f1f75, 0xd2803595, _ch(attrHash), _ts(value), _r); 
}

/**
 * Changes the license plate for the user (no insert).
 * @param oldPlateText
 * @param newPlateText
 * @param plateData
 */
export function scLicenseplateSetPlateData(oldPlateText: string, newPlateText: string, plateData: string): boolean {
	return _in(0xd0ee05fe, 0x193646ea, _ts(oldPlateText), _ts(newPlateText), _ts(plateData), _r); 
}

/**
 * 
 * @param string
 * @param token
 */
export function ScProfanityCheckUgcString(string: string): boolean {
	return _in(0xeb2bf817, 0x463dfa28, _ts(string), _ii(token), _r); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * NativeDB Added Parameter 1: Hash attrHash
 * NativeDB Added Parameter 2: float value
 * ```
 */
export function scPresenceAttrSetFloat(): boolean {
	return _in(0xc4c4575f, 0x62534a24, _r); 
}

/**
 * 
 * @param token
 */
export function scProfanityGetCheckIsValid(token: number): boolean {
	return _in(0x1753344c, 0x770358ae, token, _r); 
}

/**
 * Starts a task to check an entered string for profanity on the ROS/Social Club services.
 * 
 * See also: [`SC_PROFANITY_GET_CHECK_IS_VALID`](#\_0x1753344C770358AE) and [`SC_PROFANITY_GET_CHECK_IS_PENDING`](#\_0x82E4A58BABC15AE7).
 * @param string
 * @param token
 */
export function scProfanityCheckString(string: string): boolean {
	return _in(0x75632c5e, 0xcd7ed843, _ts(string), _ii(token), _r); 
}

/**
 * 
 * @param token
 */
export function scProfanityGetCheckIsPending(token: number): boolean {
	return _in(0x82e4a58b, 0xabc15ae7, token, _r); 
}

/**
 * 
 * @param token
 */
export function scProfanityGetStringPassed(token: number): boolean {
	return _in(0x85535acf, 0x97fc0969, token, _r); 
}

/**
 * 
 * @param toggle
 */
export function SetHandleRockstarMessageViaScript(toggle: boolean): void {
	return _in(0xbfa0a56a, 0x817c6c7d, toggle); 
}

/**
 * 
 * @param token
 */
export function scProfanityGetStringStatus(token: number): number {
	return _in(0x930de22f, 0x07b1cce3, token, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function arePlayerStarsGreyedOut(player: number): boolean {
	return _in(0x0a6eb355, 0xee14a2db, player, _r); 
}

/**
 * 
 * @param player
 */
export function arePlayerFlashingStarsAboutToDrop(player: number): boolean {
	return _in(0xafaf8604, 0x3e5874e9, player, _r); 
}

/**
 * 
 */
export function assistedMovementCloseRoute(): void {
	return _in(0xaebf081f, 0xfc0a0e5e); 
}

/**
 * 
 * @param player
 * @param ped
 */
export function canPedHearPlayer(player: number, ped: number): boolean {
	return _in(0xf297383a, 0xa91dca29, player, ped, _r); 
}

/**
 * 
 */
export function assistedMovementFlushRoute(): void {
	return _in(0x8621390f, 0x0cdcfe1f); 
}

/**
 * 
 * @param player
 */
export function canPlayerStartMission(player: number): boolean {
	return _in(0xde7465a2, 0x7d403c06, player, _r); 
}

/**
 * 
 * @param player
 * @param ped
 * @param b2
 * @param resetDamage
 */
export function changePlayerPed(player: number, ped: number, b2: boolean, resetDamage: boolean): void {
	return _in(0x048189fa, 0xc643deee, player, ped, b2, resetDamage); 
}

/**
 * 
 * @param player
 */
export function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player: number): void {
	return _in(0x4aacb962, 0x03d11a31, player); 
}

/**
 * 
 * @param player
 */
export function clearPlayerHasDamagedAtLeastOnePed(player: number): void {
	return _in(0xf0b67a4d, 0xe6ab5f98, player); 
}

/**
 * 
 * @param player
 */
export function clearPlayerParachuteModelOverride(player: number): void {
	return _in(0x8753997e, 0xb5f6ee3f, player); 
}

/**
 * 
 * @param player
 */
export function clearPlayerParachutePackModelOverride(player: number): void {
	return _in(0x10c54e43, 0x89c12b42, player); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param player
 */
export function ClearPlayerReserveParachuteModelOverride(player: number): void {
	return _in(0x290d248e, 0x25815ae8, player); 
}

/**
 * 
 * @param player
 */
export function clearPlayerParachuteVariationOverride(player: number): void {
	return _in(0x0f4cc924, 0xcf8c7b21, player); 
}

/**
 * ```
 * This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
 * PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
 * ```
 * @param player
 */
export function clearPlayerWantedLevel(player: number): void {
	return _in(0xb3025405, 0x97885499, player); 
}

/**
 * ```
 * Inhibits the player from using any method of combat including melee and firearms.
 * NOTE: Only disables the firing for one frame
 * ```
 * @param player
 * @param toggle
 */
export function disablePlayerFiring(player: number, toggle: boolean): void {
	return _in(0x5e6cc076, 0x46bbeab8, player, toggle); 
}

/**
 * Disables vehicle rewards for the current frame.
 * @param player
 */
export function disablePlayerVehicleRewards(player: number): void {
	return _in(0xc142be3b, 0xb9ce125f, player); 
}

/**
 * ```
 * Purpose of the BOOL currently unknown.
 * Both, true and false, work
 * ```
 * @param unk
 */
export function displaySystemSigninUi(unk: boolean): void {
	return _in(0x94dd7888, 0xc10a979e, unk); 
}

/**
 * ```
 * Appears only 3 times in the scripts, more specifically in michael1.ysc
 * -
 * This can be used to prevent dying if you are "out of the world"
 * ```
 * @param x
 * @param y
 * @param z
 */
export function extendWorldBoundaryForPlayer(x: number, y: number, z: number): void {
	return _in(0x5006d96c, 0x995a5827, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
 * ```
 * @param name
 * @param cleanupFlags
 */
export function forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void {
	return _in(0x4c68dddd, 0xf0097317, _ts(name), cleanupFlags); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param player
 * @param toggle
 */
export function enableSpecialAbility(player: number, toggle: boolean): void {
	return _in(0x181ec197, 0xdaefe121, player, toggle); 
}

/**
 * ```
 * For Steam.
 * Always returns 0 in retail version of the game.
 * ```
 * @param achievement
 * @return Returns the progression of an achievement; 0 if the achievement cannot be progressed.
 */
export function GetAchievementProgress(achievement: number): number {
	return _in(0x1c186837, 0xd0619335, achievement, _r, _ri); 
}

/**
 * ```
 * used with 1,2,8,64,128 in the scripts
 * ```
 * @param cleanupFlags
 */
export function forceCleanup(cleanupFlags: number): void {
	return _in(0xbc8983f3, 0x8f78ed51, cleanupFlags); 
}

/**
 * 
 */
export function getCauseOfMostRecentForceCleanup(): number {
	return _in(0x9a41cf46, 0x74a12272, _r, _ri); 
}

/**
 * 
 * @param id
 * @param cleanupFlags
 */
export function forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void {
	return _in(0xf745b376, 0x30df176b, id, cleanupFlags); 
}

/**
 * ```
 * Gets the number of players in the current session.
 * If not multiplayer, always returns 1.
 * ```
 */
export function getNumberOfPlayers(): number {
	return _in(0x407c7f91, 0xddb46c16, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getPlayerFakeWantedLevel(player: number): number {
	return _in(0x56105e59, 0x9cab0efa, player, _r, _ri); 
}

/**
 * ```
 * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
 * Returns false if no entity found.
 * ```
 * @param player
 * @param entity
 */
export function getEntityPlayerIsFreeAimingAt(player: number): boolean {
	return _in(0x2975c866, 0xe6713290, player, _i, _r); 
}

/**
 * ```
 * Gets the maximum wanted level the player can get.
 * Ranges from 0 to 5.
 * ```
 */
export function getMaxWantedLevel(): number {
	return _in(0x462e0db9, 0xb137dc5f, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getPlayerCurrentStealthNoise(player: number): number {
	return _in(0x2f395d61, 0xf3a1f877, player, _r, _rf); 
}

/**
 * ```
 * Returns the group ID the player is member of.
 * ```
 * @param player
 */
export function getPlayerGroup(player: number): number {
	return _in(0x0d127585, 0xf77030af, player, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param team
 */
export function GetNumberOfPlayersInTeam(team: number): number {
	return _in(0x1fc20040, 0x9f10e6f1, team, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getPlayerHasReserveParachute(player: number): boolean {
	return _in(0x5ddfe2ff, 0x727f3ca3, player, _r); 
}

/**
 * ```
 * Returns the Player's Invincible status.
 * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
 * bool IsPlayerInvincible(Player player)
 * {
 * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 * return false;
 * }
 * ============================================================
 * This has bothered me for too long, whoever may come across this, where did anyone ever come up with this made up hash? 0x733A643B5B0C53C1 I've looked all over old hash list, and this nativedb I can not find that PC hash anywhere. What native name is it now or was it?
 * ```
 * @param player
 */
export function getPlayerInvincible(player: number): boolean {
	return _in(0xb721981b, 0x2b939e07, player, _r); 
}

/**
 * 
 * @param player
 */
export function GetPlayerHealthRechargeLimit(player: number): number {
	return _in(0x8bc515ba, 0xe4aaf8ff, player, _r, _rf); 
}

/**
 * ```
 * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
 * ```
 */
export function getPlayerIndex(): number {
	return _in(0xa5edc40e, 0xf369b48d, _r); 
}

/**
 * 
 * @param player
 */
export function getPlayerMaxArmour(player: number): number {
	return _in(0x92659b4c, 0xe1863cb3, player, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param player
 */
export function GetPlayerParachuteModelOverride(player: number): number {
	return _in(0xc219887c, 0xa3e65c41, player, _r); 
}

/**
 * 
 * @param player
 * @param tintIndex
 */
export function getPlayerParachutePackTintIndex(player: number): void {
	return _in(0x6e9c742f, 0x340ce5a2, player, _ii(tintIndex)); 
}

/**
 * Returns the players name from a specified player index
 * @param player
 * @return The name of the queried player. "**Invalid**" if the player does not exist.
 */
export function getPlayerName(player: number): string {
	return _in(0x6d0de6a7, 0xb5da71f8, player, _r, _s); 
}

/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * @param player
 * @param tintIndex
 */
export function getPlayerParachuteTintIndex(player: number): void {
	return _in(0x75d3f7a1, 0xb0d9b145, player, _ii(tintIndex)); 
}

/**
 * ```
 * Does the same like PLAYER::GET_PLAYER_PED
 * ```
 * @param player
 */
export function getPlayerPedScriptIndex(player: number): number {
	return _in(0x50fac3a3, 0xe030a6e1, player, _r); 
}

/**
 * 
 * @param player
 * @param r
 * @param g
 * @param b
 */
export function getPlayerParachuteSmokeTrailColor(player: number): void {
	return _in(0xef56dbab, 0xd3cd4887, player, _i, _i, _i); 
}

/**
 * Gets the ped for a specified player index.
 * @param playerId
 * @return The specified player's ped, or 0 if invalid.
 */
export function getPlayerPed(playerId: number): number {
	return _in(0x43a66c31, 0xc68491c0, playerId, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param player
 */
export function GetPlayerReserveParachuteModelOverride(player: number): number {
	return _in(0x37faaa68, 0xdca9d08d, player, _r); 
}

/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * @param player
 * @param index
 */
export function getPlayerReserveParachuteTintIndex(player: number): void {
	return _in(0xd5a016bc, 0x3c09cf40, player, _ii(index)); 
}

/**
 * 
 * @param player
 */
export function getPlayerSprintStaminaRemaining(player: number): number {
	return _in(0x3f9f16f8, 0xe65a7ed7, player, _r, _rf); 
}

/**
 * 
 * @param player
 * @param r
 * @param g
 * @param b
 */
export function getPlayerRgbColour(player: number): void {
	return _in(0xe902ef95, 0x1dce178f, player, _i, _i, _i); 
}

/**
 * 
 * @param player
 */
export function getPlayerSprintTimeRemaining(player: number): number {
	return _in(0x1885bc9b, 0x108b4c99, player, _r, _rf); 
}

/**
 * ```
 * Assigns the handle of locked-on melee target to *entity that you pass it.
 * Returns false if no entity found.
 * ```
 * @param player
 * @param entity
 */
export function getPlayerTargetEntity(player: number): boolean {
	return _in(0x13ede1a5, 0xdbf797c9, player, _i, _r); 
}

/**
 * ```
 * Gets the player's team.
 * Does nothing in singleplayer.
 * ```
 * @param player
 */
export function getPlayerTeam(player: number): number {
	return _in(0x37039302, 0xf4e0a008, player, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getPlayerUnderwaterTimeRemaining(player: number): number {
	return _in(0xa1fcf8e6, 0xaf40b731, player, _r, _rf); 
}

/**
 * 
 * @param player
 */
export function getPlayerWantedCentrePosition(player: number): Vector3 {
	return _in(0x0c92ba89, 0xf1af26f8, player, _r, _rv); 
}

/**
 * 
 * @param player
 */
export function getPlayerWantedLevel(player: number): number {
	return _in(0xe28e5478, 0x8ce8f12d, player, _r, _ri); 
}

/**
 * ### Warning
 * 
 * This native will return `0` if the last vehicle the player was in was destroyed.
 * 
 * ### Alternative
 * 
 * You can use [GET_VEHICLE_PED_IS_IN](#\_0x9A9112A0FE9A4713), which will actually get the last vehicle, even if it was destroyed.
 * @return A vehicle handle containing the last player's vehicle.
 */
export function getPlayersLastVehicle(): number {
	return _in(0xb6997a7e, 0xb3f5c8c0, _r); 
}

/**
 * ```
 * Returns the time since the character was arrested in (ms) milliseconds.
 * example
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
 * UI.DrawSubtitle(time.ToString());
 * if player has not been arrested, the int returned will be -1.
 * ```
 */
export function getTimeSinceLastArrest(): number {
	return _in(0x5063f92f, 0x07c2a316, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getTimeSincePlayerDroveAgainstTraffic(player: number): number {
	return _in(0xdb89591e, 0x290d9182, player, _r, _ri); 
}

/**
 * ```
 * Returns the time since the character died in (ms) milliseconds.
 * example
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
 * UI.DrawSubtitle(time.ToString());
 * if player has not died, the int returned will be -1.
 * ```
 */
export function getTimeSinceLastDeath(): number {
	return _in(0xc7034807, 0x558ddfca, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getTimeSincePlayerHitPed(player: number): number {
	return _in(0xe36a2532, 0x2dc35f42, player, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getTimeSincePlayerDroveOnPavement(player: number): number {
	return _in(0xd559d2be, 0x9e37853b, player, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function getTimeSincePlayerHitVehicle(player: number): number {
	return _in(0x5d35ecf3, 0xa81a0ee0, player, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 */
export function GetWantedLevelParoleDuration(): number {
	return _in(0xa72200f5, 0x1875fea4, _r, _ri); 
}

/**
 * ```
 * Remnant from GTA IV. Does nothing in GTA V.
 * ```
 * @param player
 */
export function getWantedLevelRadius(player: number): number {
	return _in(0x085deb49, 0x3be80812, player, _r, _rf); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function givePlayerRagdollControl(player: number, toggle: boolean): void {
	return _in(0x3c49c870, 0xe66f0a28, player, toggle); 
}

/**
 * ```
 * Drft
 * ```
 * @param wantedLevel
 */
export function getWantedLevelThreshold(wantedLevel: number): number {
	return _in(0xfdd179ea, 0xf45b556c, wantedLevel, _r, _ri); 
}

/**
 * 
 * @param cleanupFlags
 */
export function hasForceCleanupOccurred(cleanupFlags: number): boolean {
	return _in(0xc968670b, 0xface42d9, cleanupFlags, _r); 
}

/**
 * 
 * @param player
 */
export function hasPlayerBeenSpottedInStolenVehicle(player: number): boolean {
	return _in(0xd705740b, 0xb0a1cf4c, player, _r); 
}

/**
 * ```
 * Achievements from 0-57
 * more achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.
 * ```
 * @param achievement
 */
export function giveAchievementToPlayer(achievement: number): boolean {
	return _in(0xbec7076d, 0x64130195, achievement, _r); 
}

/**
 * 
 * @param player
 */
export function hasPlayerDamagedAtLeastOneNonAnimalPed(player: number): boolean {
	return _in(0xe4b90f36, 0x7bd81752, player, _r); 
}

/**
 * 
 * @param achievement
 */
export function hasAchievementBeenPassed(achievement: number): boolean {
	return _in(0x867365e1, 0x11a3b6eb, achievement, _r); 
}

/**
 * 
 * @param player
 */
export function hasPlayerLeftTheWorld(player: number): boolean {
	return _in(0xd55ddfb4, 0x7991a294, player, _r); 
}

/**
 * 
 * @param player
 * @param ms
 * @param p2
 */
export function HasPlayerBeenShotByCop(player: number, ms: number, p2: boolean): boolean {
	return _in(0xbc0753c9, 0xca14b506, player, ms, p2, _r); 
}

/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * --------------------------------------------------------
 * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
 * ```
 * @param value
 */
export function intToParticipantindex(value: number): number {
	return _in(0x9ec66038, 0x12c24710, value, _r, _ri); 
}

/**
 * 
 * @param player
 */
export function hasPlayerDamagedAtLeastOnePed(player: number): boolean {
	return _in(0x20ce80b0, 0xc2bf4acc, player, _r); 
}

/**
 * ```
 * Return true while player is being arrested / busted.
 * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
 * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
 * ```
 * @param player
 * @param atArresting
 */
export function isPlayerBeingArrested(player: number, atArresting: boolean): boolean {
	return _in(0x388a47c5, 0x1abdac8e, player, atArresting, _r); 
}

/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * @param value
 */
export function intToPlayerindex(value: number): number {
	return _in(0x41bd2a6b, 0x006af756, value, _r); 
}

/**
 * ```
 * Returns TRUE if the player ('s ped) is climbing at the moment.
 * ```
 * @param player
 */
export function isPlayerClimbing(player: number): boolean {
	return _in(0x95e8f73d, 0xc65efb9c, player, _r); 
}

/**
 * ```
 * Can the player control himself, used to disable controls for player for things like a cutscene.
 * ---
 * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
 * ```
 * @param player
 */
export function isPlayerControlOn(player: number): boolean {
	return _in(0x49c32d60, 0x007afa47, player, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerDead(player: number): boolean {
	return _in(0x424d4687, 0xfa1e5652, player, _r); 
}

/**
 * ```
 * Returns true if an unk value is greater than 0.0f
 * ```
 * @param player
 */
export function isPlayerBattleAware(player: number): boolean {
	return _in(0x38d28da8, 0x1e4e9bf9, player, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerBluetoothEnable(player: number): boolean {
	return _in(0x65faee42, 0x5de637b0, player, _r); 
}

/**
 * ```
 * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
 * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
 * ```
 */
export function IsPlayerCamControlDisabled(): boolean {
	return _in(0x7c814d2f, 0xb49f40c0, _r); 
}

/**
 * ```
 * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
 * ```
 * @param player
 * @param entity
 */
export function isPlayerFreeAimingAtEntity(player: number, entity: number): boolean {
	return _in(0x3c06b5c8, 0x39b38f7b, player, entity, _r); 
}

/**
 * ```
 * Gets a value indicating whether the specified player is currently aiming freely.
 * ```
 * @param player
 */
export function isPlayerFreeAiming(player: number): boolean {
	return _in(0x2e397fd2, 0xecd37c87, player, _r); 
}

/**
 * ```
 * this function is hard-coded to always return 0.
 * ```
 */
export function isPlayerLoggingInNp(): boolean {
	return _in(0x74556e14, 0x20867eca, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerFreeForAmbientTask(player: number): boolean {
	return _in(0xdccfd3f1, 0x06c36ab4, player, _r); 
}

/**
 * ```
 * Returns TRUE if the game is in online mode and FALSE if in offline mode.
 * This is an alias for NETWORK_IS_SIGNED_ONLINE.
 * ```
 */
export function isPlayerOnline(): boolean {
	return _in(0xf25d331d, 0xc2627bbc, _r); 
}

/**
 * ```
 * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
 * ```
 * @param player
 */
export function isPlayerPlaying(player: number): boolean {
	return _in(0x5e9564d8, 0x246b909a, player, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerPressingHorn(player: number): boolean {
	return _in(0xfa1e2bf8, 0xb10598f9, player, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerReadyForCutscene(player: number): boolean {
	return _in(0x908cbecc, 0x2caa3690, player, _r); 
}

/**
 * ```
 * Returns true if the player is riding a train.
 * ```
 * @param player
 */
export function isPlayerRidingTrain(player: number): boolean {
	return _in(0x4ec12697, 0x209f2196, player, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerTargettingAnything(player: number): boolean {
	return _in(0x78cfe518, 0x96b6b8a4, player, _r); 
}

/**
 * 
 * @param player
 */
export function isPlayerScriptControlOn(player: number): boolean {
	return _in(0x8a876a65, 0x283dd7d7, player, _r); 
}

/**
 * 
 * @param player
 * @param entity
 */
export function isPlayerTargettingEntity(player: number, entity: number): boolean {
	return _in(0x7912f7fc, 0x4f6264b6, player, entity, _r); 
}

/**
 * 
 */
export function isPlayerTeleportActive(): boolean {
	return _in(0x02b15662, 0xd7f8886f, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function isSpecialAbilityEnabled(player: number): boolean {
	return _in(0xb1d200fe, 0x26aef3cb, player, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function isSpecialAbilityActive(player: number): boolean {
	return _in(0x3e5f7fc8, 0x5d854e15, player, _r); 
}

/**
 * 
 * @param playerModel
 */
export function isSpecialAbilityUnlocked(playerModel: number): boolean {
	return _in(0xc6017f6a, 0x6cdfa694, _ch(playerModel), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function isSpecialAbilityMeterFull(player: number): boolean {
	return _in(0x05a1fe50, 0x4b7f2587, player, _r); 
}

/**
 * 
 */
export function isSystemUiBeingDisplayed(): boolean {
	return _in(0x5d511e38, 0x67c87139, _r); 
}

/**
 * ```
 * Does exactly the same thing as PLAYER_ID()
 * ```
 */
export function networkPlayerIdToInt(): number {
	return _in(0xee68096f, 0x9f37341e, _r, _ri); 
}

/**
 * ```
 * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 * ```
 */
export function playerDetachVirtualBound(): void {
	return _in(0x1dd5897e, 0x2fa6e7c9); 
}

/**
 * ```
 * Only 1 match. ob_sofa_michael.
 * PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void {
	return _in(0xed51733d, 0xc73aed51, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7)); 
}

/**
 * Returns the entity handle for the local player ped. Note that this entity handle will change after using commands such as SET_PLAYER_MODEL.
 * @return The local player ped's entity handle.
 */
export function playerPedId(): number {
	return _in(0xd80958fc, 0x74e988a6, _r); 
}

/**
 * Returns the player index for the local player.
 * @return The local player's player index.
 */
export function playerId(): number {
	return _in(0x4f8644af, 0x03d0e0d6, _r); 
}

/**
 * 
 * @param player
 */
export function reportPoliceSpottedPlayer(player: number): void {
	return _in(0xdc64d2c5, 0x3493ed12, player); 
}

/**
 * 
 * @param player
 * @param p2
 */
export function removePlayerHelmet(player: number, p2: boolean): void {
	return _in(0xf3ac26d3, 0xcc576528, player, p2); 
}

/**
 * 
 * @param player
 */
export function resetPlayerInputGait(player: number): void {
	return _in(0x19531c47, 0xa2abd691, player); 
}

/**
 * 
 * @param player
 */
export function resetWantedLevelDifficulty(player: number): void {
	return _in(0xb9d0dd99, 0x0dc141dd, player); 
}

/**
 * ```
 * NativeDB Introduced: v323
 * ```
 */
export function resetWorldBoundaryForPlayer(): void {
	return _in(0xda1df03d, 0x5a315f4e); 
}

/**
 * ```
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
 * From am_armybase.ysc.c4:
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
 * -----
 * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7
 * -----
 * crimeType:
 * 1: Firearms possession
 * 2: Person running a red light ("5-0-5")
 * 3: Reckless driver
 * 4: Speeding vehicle (a "5-10")
 * 5: Traffic violation (a "5-0-5")
 * 6: Motorcycle rider without a helmet
 * 7: Vehicle theft (a "5-0-3")
 * 8: Grand Theft Auto
 * 9: ???
 * 10: ???
 * 11: Assault on a civilian (a "2-40")
 * 12: Assault on an officer
 * 13: Assault with a deadly weapon (a "2-45")
 * 14: Officer shot (a "2-45")
 * 15: Pedestrian struck by a vehicle
 * 16: Officer struck by a vehicle
 * 17: Helicopter down (an "AC"?)
 * 18: Civilian on fire (a "2-40")
 * 19: Officer set on fire (a "10-99")
 * 20: Car on fire
 * 21: Air unit down (an "AC"?)
 * 22: An explosion (a "9-96")
 * 23: A stabbing (a "2-45") (also something else I couldn't understand)
 * 24: Officer stabbed (also something else I couldn't understand)
 * 25: Attack on a vehicle ("MDV"?)
 * 26: Damage to property
 * 27: Suspect threatening officer with a firearm
 * 28: Shots fired
 * 29: ???
 * 30: ???
 * 31: ???
 * 32: ???
 * 33: ???
 * 34: A "2-45"
 * 35: ???
 * 36: A "9-25"
 * 37: ???
 * 38: ???
 * 39: ???
 * 40: ???
 * 41: ???
 * 42: ???
 * 43: Possible disturbance
 * 44: Civilian in need of assistance
 * 45: ???
 * 46: ???
 * ```
 * @param player
 * @param crimeType
 * @param wantedLvlThresh
 */
export function reportCrime(player: number, crimeType: number, wantedLvlThresh: number): void {
	return _in(0xe9b09589, 0x827545e7, player, crimeType, wantedLvlThresh); 
}

/**
 * 
 * @param player
 */
export function resetPlayerArrestState(player: number): void {
	return _in(0x2d03e13c, 0x460760d6, player); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setAllRandomPedsFlee(player: number, toggle: boolean): void {
	return _in(0x056e0fe8, 0x534c2949, player, toggle); 
}

/**
 * 
 * @param player
 */
export function resetPlayerStamina(player: number): void {
	return _in(0xa6f312fc, 0xce9c1dfe, player); 
}

/**
 * Adds a percentage to a players stamina
 * @param player
 * @param percentage
 */
export function restorePlayerStamina(player: number, percentage: number): void {
	return _in(0xa352c1b8, 0x64cafd33, player, _fv(percentage)); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setAutoGiveParachuteWhenEnterPlane(player: number, toggle: boolean): void {
	return _in(0x9f343285, 0xa00b4bb6, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setAutoGiveScubaGearWhenExitVehicle(player: number, toggle: boolean): void {
	return _in(0xd2b315b6, 0x689d537d, player, toggle); 
}

/**
 * For Steam.
 * Does nothing and always returns false in the retail version of the game.
 * @param achievement
 * @param progress
 */
export function SetAchievementProgress(achievement: number, progress: number): boolean {
	return _in(0xc2afffda, 0xbbdc2c5c, achievement, progress, _r); 
}

/**
 * ```
 * This can be between 1.0f - 14.9f
 * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
 * On PC the multiplier can be between 0.0f and 50.0f (inclusive).
 * ```
 * @param player
 * @param multiplier
 */
export function setAirDragMultiplierForPlayersVehicle(player: number, multiplier: number): void {
	return _in(0xca7dc832, 0x9f0a1e9e, player, _fv(multiplier)); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setDisableAmbientMeleeMove(player: number, toggle: boolean): void {
	return _in(0x2e8aabfa, 0x40a84f8c, player, toggle); 
}

/**
 * 
 * @param player
 */
export function setAllRandomPedsFleeThisFrame(player: number): void {
	return _in(0x471d2ff4, 0x2a94b4f2, player); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setDispatchCopsForPlayer(player: number, toggle: boolean): void {
	return _in(0xdb172424, 0x876553f4, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setIgnoreLowPriorityShockingEvents(player: number, toggle: boolean): void {
	return _in(0x596976b0, 0x2b6b5700, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setEveryoneIgnorePlayer(player: number, toggle: boolean): void {
	return _in(0x8eeda153, 0xad141ba4, player, toggle); 
}

/**
 * 
 * @param player
 * @param state
 */
export function setPlayerBluetoothState(player: number, state: boolean): void {
	return _in(0x5dc40a88, 0x69c22141, player, state); 
}

/**
 * Sets whether the player is able to do drive-bys in vehicle (shooting & aiming in vehicles), this also includes middle finger taunts.
 * 
 * This is a toggle, it does not have to be ran every frame.
 * 
 * Example:
 * 
 * ```lua
 * SetPlayerCanDoDriveBy(PlayerId(), false)
 * ```
 * @param player
 * @param toggle
 */
export function setPlayerCanDoDriveBy(player: number, toggle: boolean): void {
	return _in(0x6e8834b5, 0x2ec20c77, player, toggle); 
}

/**
 * 
 * @param maxWantedLevel
 */
export function setMaxWantedLevel(maxWantedLevel: number): void {
	return _in(0xaa5f02db, 0x48d704b9, maxWantedLevel); 
}

/**
 * ```
 * Sets whether this player can be hassled by gangs.
 * ```
 * @param player
 * @param toggle
 */
export function setPlayerCanBeHassledByGangs(player: number, toggle: boolean): void {
	return _in(0xd5e460ad, 0x7020a246, player, toggle); 
}

/**
 * 
 * @param player
 * @param enabled
 */
export function setPlayerCanLeaveParachuteSmokeTrail(player: number, enabled: boolean): void {
	return _in(0xf401b182, 0xdba8af53, player, enabled); 
}

/**
 * ```
 * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
 * ```
 * @param value
 */
export function setPlayerClothLockCounter(value: number): void {
	return _in(0x14d913b7, 0x77dff5da, value); 
}

/**
 * ```
 * Sets whether this player can take cover.
 * ```
 * @param player
 * @param toggle
 */
export function setPlayerCanUseCover(player: number, toggle: boolean): void {
	return _in(0xd465a859, 0x9dff6814, player, toggle); 
}

/**
 * ```
 * Every occurrence was either 0 or 2.
 * ```
 * @param index
 */
export function setPlayerClothPackageIndex(index: number): void {
	return _in(0x9f7bba2e, 0xa6372500, index); 
}

/**
 * ```
 * Flags:
 * SPC_AMBIENT_SCRIPT = (1 << 1),
 * SPC_CLEAR_TASKS = (1 << 2),
 * SPC_REMOVE_FIRES = (1 << 3),
 * SPC_REMOVE_EXPLOSIONS = (1 << 4),
 * SPC_REMOVE_PROJECTILES = (1 << 5),
 * SPC_DEACTIVATE_GADGETS = (1 << 6),
 * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
 * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
 * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
 * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
 * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
 * SPC_ALLOW_PAD_SHAKE = (1 << 12)
 * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
 * ```
 * @param player
 * @param bHasControl
 * @param flags
 */
export function setPlayerControl(player: number, bHasControl: boolean, flags: number): void {
	return _in(0x8d32347d, 0x6d4c40a2, player, bHasControl, flags); 
}

/**
 * 
 * @param player
 * @param p1
 */
export function setPlayerClothPinFrames(player: number, p1: number): void {
	return _in(0x749faddf, 0x97dfe930, player, p1); 
}

/**
 * 
 * @param player
 * @param distance
 */
export function SetPlayerFallDistance(player: number, distance: number): void {
	return _in(0xefd79fa8, 0x1dfba9cb, player, _fv(distance)); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerForceSkipAimIntro(player: number, toggle: boolean): void {
	return _in(0x7651bc64, 0xae59e128, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerForcedZoom(player: number, toggle: boolean): void {
	return _in(0x75e7d505, 0xf2b15902, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerForcedAim(player: number, toggle: boolean): void {
	return _in(0x0fee4f80, 0xac44a726, player, toggle); 
}

/**
 * 
 * @param player
 */
export function setPlayerHasReserveParachute(player: number): void {
	return _in(0x7ddab28d, 0x31fac363, player); 
}

/**
 * 
 * @param player
 * @param limit
 */
export function SetPlayerHealthRechargeLimit(player: number, limit: number): void {
	return _in(0xc388a0f0, 0x65f5bc34, player, _fv(limit)); 
}

/**
 * 
 * @param player
 * @param regenRate
 */
export function setPlayerHealthRechargeMultiplier(player: number, regenRate: number): void {
	return _in(0x5db660b3, 0x8dd98a31, player, _fv(regenRate)); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param player
 * @param p1
 */
export function SetPlayerHomingRocketDisabled(player: number, p1: boolean): void {
	return _in(0xee4ebdd2, 0x593ba844, player, p1); 
}

/**
 * ```
 * Simply sets you as invincible (Health will not deplete).
 * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
 * *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
 * ```
 * @param player
 * @param toggle
 */
export function setPlayerInvincible(player: number, toggle: boolean): void {
	return _in(0x239528ea, 0xcdc3e7de, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerLeavePedBehind(player: number, toggle: boolean): void {
	return _in(0xff300c76, 0x49724a0b, player, toggle); 
}

/**
 * ```
 * Used to toggle the square up aim.
 * ```
 * @param player
 * @param toggle
 */
export function setPlayerLockon(player: number, toggle: boolean): void {
	return _in(0x5c8b2f45, 0x0ee4328e, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function SetPlayerInvincibleKeepRagdollEnabled(player: number, toggle: boolean): void {
	return _in(0x6bc97f4f, 0x4bb3c04b, player, toggle); 
}

/**
 * 
 * @param player
 */
export function setPlayerMayNotEnterAnyVehicle(player: number): void {
	return _in(0x1de37bbf, 0x9e9cc14a, player); 
}

/**
 * ```
 * Affects the range of auto aim target.
 * ```
 * @param player
 * @param range
 */
export function setPlayerLockonRangeOverride(player: number, range: number): void {
	return _in(0x29961d49, 0x0e5814fd, player, _fv(range)); 
}

/**
 * ```
 * Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
 * ```
 * @param player
 * @param value
 */
export function setPlayerMaxArmour(player: number, value: number): void {
	return _in(0x77dfccf5, 0x948b8c71, player, value); 
}

/**
 * 
 * @param player
 * @param vehicle
 */
export function setPlayerMayOnlyEnterThisVehicle(player: number, vehicle: number): void {
	return _in(0x8026ff78, 0xf208978a, player, vehicle); 
}

/**
 * ```
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * @param player
 * @param modifier
 */
export function setPlayerMeleeWeaponDamageModifier(player: number, modifier: number): void {
	return _in(0x4a3dc7ec, 0xcc321032, player, _fv(modifier)); 
}

/**
 * ```
 * modifier's min value is 0.1
 * ```
 * @param player
 * @param modifier
 */
export function setPlayerMeleeWeaponDefenseModifier(player: number, modifier: number): void {
	return _in(0xae540335, 0xb4abc4e2, player, _fv(modifier)); 
}

/**
 * 
 * @param player
 * @param multiplier
 */
export function setPlayerNoiseMultiplier(player: number, multiplier: number): void {
	return _in(0xdb89ef50, 0xff25fce9, player, _fv(multiplier)); 
}

/**
 * Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.
 * 
 * As per usual, make sure to request the model first and wait until it has loaded.
 * @param player
 * @param model
 */
export function setPlayerModel(player: number, model: number): void {
	return _in(0x00a1cadd, 0x00108836, player, _ch(model)); 
}

/**
 * 
 * @param player
 * @param model
 */
export function setPlayerParachutePackModelOverride(player: number, model: number): void {
	return _in(0xdc80a4c2, 0xf18a2b64, player, _ch(model)); 
}

/**
 * 
 * @param player
 * @param r
 * @param g
 * @param b
 */
export function setPlayerParachuteSmokeTrailColor(player: number, r: number, g: number, b: number): void {
	return _in(0x8217fd37, 0x1a4625cf, player, r, g, b); 
}

/**
 * ```
 * example:
 * PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);
 * ```
 * @param player
 * @param model
 */
export function setPlayerParachuteModelOverride(player: number, model: number): void {
	return _in(0x977db464, 0x1f6fc3db, player, _ch(model)); 
}

/**
 * ```
 * tints 0- 13
 * 0 - unkown
 * 1 - unkown
 * 2 - unkown
 * 3 - unkown
 * 4 - unkown
 * ```
 * @param player
 * @param tintIndex
 */
export function setPlayerParachutePackTintIndex(player: number, tintIndex: number): void {
	return _in(0x93b0fb27, 0xc9a04060, player, tintIndex); 
}

/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * @param player
 * @param tintIndex
 */
export function setPlayerParachuteTintIndex(player: number, tintIndex: number): void {
	return _in(0xa3d0e545, 0x41d9a5e5, player, tintIndex); 
}

/**
 * ```
 * p1 was always 5.
 * p4 was always false.
 * ```
 * @param player
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function setPlayerParachuteVariationOverride(player: number, p1: number, p2: any, p3: any, p4: boolean): void {
	return _in(0xd9284a8c, 0x0d48352c, player, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param player
 * @param model
 */
export function SetPlayerReserveParachuteModelOverride(player: number, model: number): void {
	return _in(0x0764486a, 0xede748db, player, _ch(model)); 
}

/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * @param player
 * @param index
 */
export function setPlayerReserveParachuteTintIndex(player: number, index: number): void {
	return _in(0xaf04c87f, 0x5dc1df38, player, index); 
}

/**
 * ```
 * example:
 * flags: 0-6
 * PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
 * wouldnt the flag be the seatIndex?
 * ```
 * @param player
 * @param flags
 */
export function setPlayerResetFlagPreferRearSeats(player: number, flags: number): void {
	return _in(0x11d5f725, 0xf0e780e0, player, flags); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerSprint(player: number, toggle: boolean): void {
	return _in(0xa01b8075, 0xd8b92df4, player, toggle); 
}

/**
 * 
 * @param player
 * @param toggle
 */
export function setPlayerSimulateAiming(player: number, toggle: boolean): void {
	return _in(0xc54c95da, 0x968ec5b5, player, toggle); 
}

/**
 * ```
 * Values around 1.0f to 2.0f used in game scripts.
 * ```
 * @param player
 * @param multiplier
 */
export function setPlayerSneakingNoiseMultiplier(player: number, multiplier: number): void {
	return _in(0xb2c1a295, 0x88a9f47c, player, _fv(multiplier)); 
}

/**
 * 
 * @param targetLevel
 */
export function setPlayerTargetLevel(targetLevel: number): void {
	return _in(0x5702b917, 0xb99db1cd, targetLevel); 
}

/**
 * 
 * @param player
 * @param value
 */
export function setPlayerStealthPerceptionModifier(player: number, value: number): void {
	return _in(0x4e9021c1, 0xfcdd507a, player, _fv(value)); 
}

/**
 * ```
 * Sets your targeting mode.
 * 0 = Assisted Aim - Full
 * 1 = Assisted Aim - Partial
 * 2 = Free Aim - Assisted
 * 3 = Free Aim
 * ```
 * @param targetMode
 */
export function setPlayerTargetingMode(targetMode: number): void {
	return _in(0xb1906895, 0x227793f3, targetMode); 
}

/**
 * ```
 * Set player team on deathmatch and last team standing..
 * ```
 * @param player
 * @param team
 */
export function setPlayerTeam(player: number, team: number): void {
	return _in(0x0299fa38, 0x396a4940, player, team); 
}

/**
 * Seems to lock the underwater timer of the specified player. Set `percentage` to `50.0` will reduce the value of [GET_PLAYER_UNDERWATER_TIME_REMAINING](#\_0xA1FCF8E6AF40B731) to 5.0.
 * 
 * If you want to increase the underwater time for ped, use [SET_PED_MAX_TIME_UNDERWATER](#\_0x6BA428C528D9E522) instead.
 * 
 * Using this native after [SET_PED_MAX_TIME_UNDERWATER](#\_0x6BA428C528D9E522) **WILL NOT** get what you want. For example, if you set the max time underwater to `100.0` seconds using [SET_PED_MAX_TIME_UNDERWATER](#\_0x6BA428C528D9E522) and then call this native and set the `percentage` to 50.0, you will not get `50.0`, instead `2.0`.
 * @param player
 * @param percentage
 */
export function SetPlayerUnderwaterTimeRemaining(player: number, percentage: number): any {
	return _in(0xa0d3e4f7, 0xaafb7e78, player, _fv(percentage), _r, _ri); 
}

/**
 * ```
 * modifier's min value is 0.1
 * ```
 * @param player
 * @param modifier
 */
export function setPlayerVehicleDamageModifier(player: number, modifier: number): void {
	return _in(0xa50e117c, 0xddf82f0c, player, _fv(modifier)); 
}

/**
 * ```
 * modifier's min value is 0.1
 * ```
 * @param player
 * @param modifier
 */
export function setPlayerVehicleDefenseModifier(player: number, modifier: number): void {
	return _in(0x4c60e6ef, 0xdaff2462, player, _fv(modifier)); 
}

/**
 * ```
 * # Predominant call signatures
 * PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
 * # Parameter value ranges
 * P0: PLAYER::PLAYER_ID()
 * P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
 * P2: Not set by any call
 * ```
 * @param player
 * @param position
 * @param p2
 * @param p3
 */
export function setPlayerWantedCentrePosition(player: number, p2: boolean, p3: boolean): void {
	return _in(0x520e541a, 0x97a13354, player, _v(position), p2, p3); 
}

/**
 * ```
 * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
 * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
 * disableNoMission-  Disables When Off Mission- appears to always be false
 * ```
 * @param player
 * @param wantedLevel
 * @param disableNoMission
 */
export function setPlayerWantedLevel(player: number, wantedLevel: number, disableNoMission: boolean): void {
	return _in(0x39ff19c6, 0x4ef7da5b, player, wantedLevel, disableNoMission); 
}

/**
 * ```
 * p2 is always false in R* scripts
 * ```
 * @param player
 * @param wantedLevel
 * @param p2
 */
export function setPlayerWantedLevelNoDrop(player: number, wantedLevel: number, p2: boolean): void {
	return _in(0x340e61de, 0x7f471565, player, wantedLevel, p2); 
}

/**
 * ```
 * Forces any pending wanted level to be applied to the specified player immediately.
 * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
 * Second parameter is unknown (always false).
 * ```
 * @param player
 * @param p1
 */
export function setPlayerWantedLevelNow(player: number, p1: boolean): void {
	return _in(0xe0a7d1e4, 0x97ffcd6f, player, p1); 
}

/**
 * 
 * @param player
 * @param modifier
 */
export function SetPlayerWeaponDefenseModifier2(player: number, modifier: number): void {
	return _in(0xbcfde9ed, 0xe4cf27dc, player, _fv(modifier)); 
}

/**
 * The native ensures the 'modifier' parameter is 0.1 or greater.
 * @param player
 * @param modifier
 */
export function setPlayerWeaponDamageModifier(player: number, modifier: number): void {
	return _in(0xce07b9f7, 0x817aada3, player, _fv(modifier)); 
}

/**
 * 
 * @param player
 * @param modifier
 */
export function setPlayerWeaponDefenseModifier(player: number, modifier: number): void {
	return _in(0x2d83bc01, 0x1ca14a3c, player, _fv(modifier)); 
}

/**
 * ```
 * If toggle is set to false:
 * The police won't be shown on the (mini)map
 * If toggle is set to true:
 * The police will be shown on the (mini)map
 * ```
 * @param toggle
 */
export function setPoliceRadarBlips(toggle: boolean): void {
	return _in(0x43286d56, 0x1b72b8bf, toggle); 
}

/**
 * ```
 * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
 * Just call it one time, it is not required to be called once every tick.
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * It is not possible to "decrease" speed. Anything below 1 will be ignored.
 * ```
 * @param player
 * @param multiplier
 */
export function setRunSprintMultiplierForPlayer(player: number, multiplier: number): void {
	return _in(0x6db47aa7, 0x7fd94e09, player, _fv(multiplier)); 
}

/**
 * ```
 * The player will be ignored by the police if toggle is set to true
 * ```
 * @param player
 * @param toggle
 */
export function setPoliceIgnorePlayer(player: number, toggle: boolean): void {
	return _in(0x32c62aa9, 0x29c2da6a, player, toggle); 
}

/**
 * 
 * @param multiplier
 */
export function setSpecialAbilityMultiplier(multiplier: number): void {
	return _in(0xa49c426e, 0xd0ca4ab7, _fv(multiplier)); 
}

/**
 * ```
 * Swim speed multiplier.
 * Multiplier goes up to 1.49
 * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * ```
 * @param player
 * @param multiplier
 */
export function setSwimMultiplierForPlayer(player: number, multiplier: number): void {
	return _in(0xa91c6f0f, 0xf7d16a13, player, _fv(multiplier)); 
}

/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param player
 * @param p1
 */
export function SetSpecialAbility(player: number, p1: number): void {
	return _in(0xb214d570, 0xead7f81a, player, p1); 
}

/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param player
 * @param wantedLevel
 * @param lossTime
 */
export function SetWantedLevelHiddenEvasionTime(player: number, wantedLevel: number, lossTime: number): void {
	return _in(0x49b856b1, 0x360c47c7, player, wantedLevel, lossTime); 
}

/**
 * ```
 * Max value is 1.0
 * ```
 * @param player
 * @param difficulty
 */
export function setWantedLevelDifficulty(player: number, difficulty: number): void {
	return _in(0x9b0bb33b, 0x04405e7a, player, _fv(difficulty)); 
}

/**
 * 
 * @param multiplier
 */
export function setWantedLevelMultiplier(multiplier: number): void {
	return _in(0x020e5f00, 0xcda207ba, _fv(multiplier)); 
}

/**
 * This is to make the player walk without accepting input.
 * 
 * Call this native every frame so you can control the direction of your ped.
 * @param player
 * @param amount
 * @param gaitType
 * @param rotationSpeed
 * @param p4
 * @param p5
 */
export function simulatePlayerInputGait(player: number, amount: number, gaitType: number, rotationSpeed: number, p4: boolean, p5: boolean): void {
	return _in(0x477d5d63, 0xe63eca5d, player, _fv(amount), gaitType, _fv(rotationSpeed), p4, p5); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function SpecialAbilityActivate(player: any): void {
	return _in(0x821fdc82, 0x7d6f4090, player); 
}

/**
 * ```
 * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityChargeAbsolute(player: number, p1: number, p2: boolean): void {
	return _in(0xb7b0870e, 0xb531d08d, player, p1, p2); 
}

/**
 * ```
 * p1 appears to always be 1 (only comes up twice)
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param player
 * @param p2
 */
export function specialAbilityChargeContinuous(player: number, p2: number): void {
	return _in(0xed481732, 0xdff7e997, player, p2); 
}

/**
 * ```
 * Only 1 match. Both p1 & p2 were true.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityChargeMedium(player: number, p1: boolean, p2: boolean): void {
	return _in(0xf113e3aa, 0x9bc54613, player, p1, p2); 
}

/**
 * ```
 * 2 matches. p1 was always true.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityChargeLarge(player: number, p1: boolean, p2: boolean): void {
	return _in(0xf733f45f, 0xa4497d93, player, p1, p2); 
}

/**
 * ```
 * normalizedValue is from 0.0 - 1.0
 * p2 is always 1
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param player
 * @param normalizedValue
 * @param p2
 */
export function specialAbilityChargeNormalized(player: number, normalizedValue: number, p2: boolean): void {
	return _in(0xa0696a65, 0xf009ee18, player, _fv(normalizedValue), p2); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function specialAbilityChargeOnMissionFailed(player: number): void {
	return _in(0xc9a763d8, 0xfe87436a, player); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function specialAbilityDeactivate(player: number): void {
	return _in(0xd6a953c6, 0xd1492057, player); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param p0
 */
export function SpecialAbilityDeplete(p0: any): void {
	return _in(0x17f7471e, 0xaca78290, p0); 
}

/**
 * ```
 * p1 was always true.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param player
 * @param p1
 */
export function specialAbilityDepleteMeter(player: number, p1: boolean): void {
	return _in(0x1d506dbb, 0xbc51e64b, player, p1); 
}

/**
 * ```
 * Every occurrence of p1 & p2 were both true.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityChargeSmall(player: number, p1: boolean, p2: boolean): void {
	return _in(0x2e7b9b68, 0x3481687d, player, p1, p2); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function specialAbilityDeactivateFast(player: number): void {
	return _in(0x9cb5ce07, 0xa3968d5a, player); 
}

/**
 * ```
 * Also known as _RECHARGE_SPECIAL_ABILITY
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param player
 * @param p1
 */
export function specialAbilityFillMeter(player: number, p1: boolean): void {
	return _in(0x3daca8dd, 0xc6fd4980, player, p1); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param playerModel
 */
export function specialAbilityUnlock(playerModel: number): void {
	return _in(0xf145f3be, 0x2efa9a3b, _ch(playerModel)); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param playerModel
 */
export function specialAbilityLock(playerModel: number): void {
	return _in(0x6a09d0d5, 0x90a47d13, _ch(playerModel)); 
}

/**
 * Teleports the player to the given coordinates.
 * 
 * If findCollisionLand is true it will try to find the Z value for you, this however has a timeout of 100 frames.
 * 
 * When trying to find the Z value the native will take longer the higher the difference from the given Z to the ground, this combined with the timeout can cause the teleport to just teleport to the given Z value, so try to estimate the z value, so don't just pass in 1000.0.
 * 
 * Also if you're in a vehicle and teleportWithVehicle is true it will not find the Z value for you.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param teleportWithVehicle
 * @param findCollisionLand
 * @param p7
 */
export function startPlayerTeleport(player: number, x: number, y: number, z: number, heading: number, teleportWithVehicle: boolean, findCollisionLand: boolean, p7: boolean): void {
	return _in(0xad15f075, 0xa4da0fde, player, _fv(x), _fv(y), _fv(z), _fv(heading), teleportWithVehicle, findCollisionLand, p7); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param player
 */
export function specialAbilityReset(player: number): void {
	return _in(0x375f0e73, 0x8f861a94, player); 
}

/**
 * ```
 * Disables the player's teleportation
 * ```
 */
export function stopPlayerTeleport(): void {
	return _in(0xc449eded, 0x9d73009c); 
}

/**
 * 
 * @param duration
 */
export function startFiringAmnesty(duration: number): void {
	return _in(0xbf9bd716, 0x91857e48, duration); 
}

/**
 * 
 * @param player
 */
export function UpdatePlayerTeleport(player: number): boolean {
	return _in(0xe23d5873, 0xc2394c61, player, _r); 
}

/**
 * ```
 * This was previously named as "RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO"
 * which is obviously incorrect.
 * Seems to only appear in scripts used in Singleplayer. p1 ranges from 2 - 46.
 * I assume this switches the crime type
 * ```
 * @param player
 * @param p1
 */
export function SwitchCrimeType(player: number, p1: number): void {
	return _in(0x9a987297, 0xed8bd838, player, p1); 
}

/**
 * 
 * @param player
 * @param wantedLevel
 */
export function isPlayerWantedLevelGreater(player: number, wantedLevel: number): boolean {
	return _in(0x238db2a2, 0xc23ee9ef, player, wantedLevel, _r); 
}

/**
 * 
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 */
export function getPackedBoolStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number {
	return _in(0x80c75307, 0xb1c42837, index, spStat, charStat, character, _r); 
}

/**
 * ```
 * Needs more research. Gets the stat name of a masked bool?
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_BOOL"
 * "_NGTATPSTAT_BOOL"
 * "_NGDLCPSTAT_BOOL"
 * "_DLCBIKEPSTAT_BOOL"
 * "_DLCGUNPSTAT_BOOL"
 * "_GUNTATPSTAT_BOOL"
 * "_DLCSMUGCHARPSTAT_BOOL"
 * "_GANGOPSPSTAT_BOOL"
 * "_BUSINESSBATPSTAT_BOOL"
 * "_ARENAWARSPSTAT_BOOL"
 * "_CASINOPSTAT_BOOL"
 * "_CASINOHSTPSTAT_BOOL"
 * "_HEIST3TATTOOSTAT_BOOL"
 * ```
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 * @param section
 */
export function GetNgstatBoolHash(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number {
	return _in(0xba52ff53, 0x8ed2bc71, index, spStat, charStat, character, _ts(section), _r); 
}

/**
 * 
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 */
export function getPackedTuBoolStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number {
	return _in(0xc4bb08ee, 0x7907471e, index, spStat, charStat, character, _r); 
}

/**
 * 
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 */
export function getPackedTuIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number {
	return _in(0xd16c2ad6, 0xb8e32854, index, spStat, charStat, character, _r); 
}

/**
 * ```
 * Needs more research. Gets the stat name of a masked int?
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_INT"
 * "_MP_NGPSTAT_INT"
 * "_MP_LRPSTAT_INT"
 * "_MP_APAPSTAT_INT"
 * "_MP_LR2PSTAT_INT"
 * "_MP_BIKEPSTAT_INT"
 * "_MP_IMPEXPPSTAT_INT"
 * "_MP_GUNRPSTAT_INT"
 * "_NGDLCPSTAT_INT"
 * "_MP_NGDLCPSTAT_INT"
 * "_DLCSMUGCHARPSTAT_INT"
 * "_GANGOPSPSTAT_INT"
 * "_BUSINESSBATPSTAT_INT"
 * "_ARENAWARSPSTAT_INT"
 * "_CASINOPSTAT_INT"
 * "_CASINOHSTPSTAT_INT"
 * ```
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 * @param section
 */
export function GetNgstatIntHash(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number {
	return _in(0x2b4cdca6, 0xf07ff3da, index, spStat, charStat, character, _ts(section), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function HiredLimo(p0: any, p1: any): void {
	return _in(0x792271ab, 0x35c356a4, p0, p1); 
}

/**
 * 
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 */
export function getPackedIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number {
	return _in(0x61e111e3, 0x23419e07, index, spStat, charStat, character, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function leaderboards2ReadByHandle(): boolean {
	return _in(0xc30713a3, 0x83bfbf0e, _i, _i, _r); 
}

/**
 * 
 * @param p0
 * @param gamerHandleCsv
 * @param platformName
 */
export function Leaderboards2ReadByPlatform(gamerHandleCsv: string, platformName: string): boolean {
	return _in(0xf1ae5dcd, 0xbfca2721, _i, _ts(gamerHandleCsv), _ts(platformName), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboards2ReadByRadius(p1: any): boolean {
	return _in(0x5ce587fb, 0x5a42c8c4, _i, p1, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboards2ReadByRank(p1: any, p2: any): boolean {
	return _in(0xba2c7db0, 0xc129449a, _i, p1, p2, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboards2ReadByScoreFloat(p1: number, p2: any): boolean {
	return _in(0xe662c8b7, 0x59d08f3c, _i, _fv(p1), p2, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function leaderboards2ReadByRow(p2: any, p4: any, p6: any): boolean {
	return _in(0xa9cdb1e3, 0xf0a49883, _i, _i, p2, _i, p4, _i, p6, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function leaderboards2ReadFriendsByRow(p2: any, p3: boolean, p4: any, p5: any): boolean {
	return _in(0x918b1016, 0x66f9cb83, _i, _i, p2, p3, p4, p5, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboards2ReadByScoreInt(p1: any, p2: any): boolean {
	return _in(0x7eec7e4f, 0x6984a16a, _i, p1, p2, _r); 
}

/**
 * 
 * @param p0
 */
export function leaderboards2WriteData(): boolean {
	return _in(0xae220654, 0x5888ae49, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboards2ReadRankPrediction(): boolean {
	return _in(0xc38dc1e9, 0x0d22547c, _i, _i, _i, _r); 
}

/**
 * 
 * @param p0
 */
export function leaderboardsCacheDataRow(): boolean {
	return _in(0xb9bb18e2, 0xc40142ed, _i, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function leaderboards2WriteDataForEventType(): boolean {
	return _in(0xc980e62e, 0x33df1d5c, _i, _i, _r); 
}

/**
 * 
 */
export function leaderboardsClearCacheData(): void {
	return _in(0xd4b02a6b, 0x476e1fdc); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsGetCacheDataRow(p0: any, p1: any): boolean {
	return _in(0x9120e8db, 0xa3d69273, p0, p1, _i, _r); 
}

/**
 * 
 * @param statName
 * @param value
 */
export function LeaderboardsDeaths(statName: number, value: number): void {
	return _in(0x428eaf89, 0xe24f6c36, _ch(statName), _fv(value)); 
}

/**
 * 
 * @param p0
 */
export function leaderboardsGetCacheExists(p0: any): boolean {
	return _in(0x9c51349b, 0xe6cdfe2c, p0, _r); 
}

/**
 * 
 * @param p0
 */
export function leaderboardsGetCacheTime(p0: any): any {
	return _in(0xf04c1c27, 0xda35f6c8, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 */
export function leaderboardsGetCacheNumberOfRows(p0: any): number {
	return _in(0x58a651cd, 0x201d89ad, p0, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsGetColumnType(p0: any, p1: any, p2: any): any {
	return _in(0xbf4fef46, 0xdb7894d3, p0, p1, p2, _r, _ri); 
}

/**
 * 
 */
export function leaderboardsReadAnyPending(): boolean {
	return _in(0xa31fd151, 0x97b192bd, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsGetColumnId(p0: any, p1: any, p2: any): any {
	return _in(0xc4b5467a, 0x1886ea7e, p0, p1, p2, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function leaderboardsGetNumberOfColumns(p0: any, p1: any): any {
	return _in(0x117b4515, 0x6d7eff2e, p0, p1, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsReadClear(p0: any, p1: any, p2: any): any {
	return _in(0x7cce5c73, 0x7a665701, p0, p1, p2, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsReadSuccessful(p0: any, p1: any, p2: any): boolean {
	return _in(0x2fb19228, 0x983e832c, p0, p1, p2, _r); 
}

/**
 * 
 */
export function leaderboardsReadClearAll(): any {
	return _in(0xa34cb6e6, 0xf0df4a0b, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsWriteAddColumnLong(p0: any, p1: any, p2: any): void {
	return _in(0x2e652486, 0x09523599, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsReadPending(p0: any, p1: any, p2: any): boolean {
	return _in(0xac392c84, 0x83342ac2, p0, p1, p2, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function leaderboardsWriteAddColumn(p0: any, p1: any, p2: number): void {
	return _in(0x0bca1d2c, 0x47b0d269, p0, p1, _fv(p2)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param vehicleHash
 */
export function OrderedBossVehicle(p0: any, p1: any, vehicleHash: number): void {
	return _in(0xcea553e3, 0x5c2246e1, p0, p1, _ch(vehicleHash)); 
}

/**
 * 
 * @param p0
 */
export function playstatsAcquiredHiddenPackage(p0: any): void {
	return _in(0x79ab33f0, 0xfbfac40c, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function playstatsActivityDone(p0: any, p1: any): void {
	return _in(0xa071e0ed, 0x98f91286, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function PlaystatsArcadegame(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0x533a7d1e, 0xa58df958, p0, p1, p2, p3, p4, p5); 
}

/**
 * 
 * @param id
 */
export function PlaystatsAwardBadsport(id: number): void {
	return _in(0x47b32f56, 0x11e6e483, id); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function PlaystatsArenaWarSpectator(p0: number, p1: number, p2: number, p3: number, p4: number): void {
	return _in(0x6f4f5997, 0x53f8200a, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param action
 * @param value
 */
export function playstatsBackgroundScriptAction(action: string, value: number): void {
	return _in(0x5009dfd7, 0x41329729, _ts(action), value); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param data
 */
export function PlaystatsArenaWarsEnded(): void {
	return _in(0xb479d9f0, 0xd48a1bc5, _i); 
}

/**
 * 
 * @param data
 */
export function PlaystatsBuyContraband(): void {
	return _in(0xd6781e42, 0x755531f7, _i); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function PlaystatsCarclubChallenge(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x1187cb58, 0xd7f3bed7, p0, p1, p2, p3); 
}

/**
 * 
 * @param amount
 * @param type
 * @param category
 */
export function playstatsAwardXp(amount: number, type: number, category: number): void {
	return _in(0x46f917f6, 0xb4128fe4, amount, _ch(type), _ch(category)); 
}

/**
 * 
 * @param p0
 */
export function PlaystatsBanAlert(p0: number): void {
	return _in(0x516fc96e, 0xb88eefe5, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoBlackjack(p0: any): void {
	return _in(0x3eae9730, 0x9727e7ad, p0); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function PlaystatsCarclubPoints(p0: any): void {
	return _in(0xff14d6fe, 0xec507bbe, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoBlackjackLight(p0: any): void {
	return _in(0xd5451c7b, 0xf151eb6f, p0); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 * @param p1
 */
export function PlaystatsCarclubPrize(p0: any, p1: any): void {
	return _in(0x69c922b6, 0x77621428, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoInsidetrack(p0: any): void {
	return _in(0x049f0596, 0x25058a86, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoChip(p0: any): void {
	return _in(0x0999f3f0, 0x90ec5012, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoInsidetrackLight(p0: any): void {
	return _in(0x23a3cbcd, 0x50d54e47, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoLuckyseven(p0: any): void {
	return _in(0x0c432c14, 0x35f5e4fa, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoRouletteLight(p0: any): void {
	return _in(0x6572aba3, 0xde1197fc, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param data
 */
export function PlaystatsCasinoMissionEnded(): void {
	return _in(0x1a0d4a6c, 0x336b7bc5, _i); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoRoulette(p0: any): void {
	return _in(0x95101c44, 0x3a84e7f1, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoSlotmachine(p0: any): void {
	return _in(0xef5ec67d, 0x392b830a, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoSlotmachineLight(p0: any): void {
	return _in(0xe60054a0, 0xfae8227f, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 * @param p1
 */
export function PlaystatsCasinoStoryMissionEnded(p0: any, p1: any): void {
	return _in(0xfcccac2b, 0xd3c1f180, p0, p1); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoThreecardpokerLight(p0: any): void {
	return _in(0xc9001364, 0xb4388f22, p0); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 */
export function PlaystatsCasinoThreecardpoker(p0: any): void {
	return _in(0xf740fb33, 0x9d471c35, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function PlaystatsChangeMcEmblem(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x0a50d260, 0x4e05cb94, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function playstatsClothChange(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x34b97304, 0x7a2268b9, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param cheat
 */
export function playstatsCheatApplied(cheat: string): void {
	return _in(0x6058665d, 0x72302d3f, _ts(cheat)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function PlaystatsCopyRankIntoNewSlot(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void {
	return _in(0xb7257ba2, 0x550ea10a, p0, p1, p2, p3, p4, p5, p6); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function playstatsCrateCreated(p0: number, p1: number, p2: number): void {
	return _in(0xafc7e5e0, 0x75a96f46, _fv(p0), _fv(p1), _fv(p2)); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function PlaystatsCollectible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void {
	return _in(0xcd0a8a93, 0x38681cf2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param data
 */
export function PlaystatsDarMissionEnd(): void {
	return _in(0x0bc254ff, 0x3a911501, _i); 
}

/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * NativeDB Added Parameter 8: Any p7
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function playstatsCrateDropMissionDone(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0x1cae5d2e, 0x3f9a07f0, p0, p1, p2, p3, p4, p5); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function PlaystatsDroneUsage(p0: number, p1: number, p2: number): void {
	return _in(0x66c7bb24, 0x16ed3fce, p0, p1, p2); 
}

/**
 * 
 * @param data
 */
export function PlaystatsDefendContraband(): void {
	return _in(0x2605663b, 0xd4f23b5d, _i); 
}

/**
 * 
 * @param p0
 */
export function PlaystatsDirectorMode(): void {
	return _in(0x46326e13, 0xda4e0546, _i); 
}

/**
 * 
 * @param data
 */
export function PlaystatsDupeDetection(): void {
	return _in(0x848b6610, 0x0ee33b05, _i); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param data
 */
export function PlaystatsEnterSessionPack(): void {
	return _in(0x878ff156, 0xd36e9956, _i); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function playstatsFriendActivity(p0: any, p1: any): void {
	return _in(0x0f71de29, 0xab2258f1, p0, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function PlaystatsEarnedMcPoints(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void {
	return _in(0x50147885, 0x5a6074ce, p0, p1, p2, p3, p4, p5); 
}

/**
 * 
 * @param data
 */
export function PlaystatsGunrunMissionEnded(): void {
	return _in(0x0eacdf84, 0x87d5155a, _i); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param data
 */
export function PlaystatsH2FmprepEnd(): void {
	return _in(0xd8afb345, 0xa9c5ccbb, _i); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function PlaystatsExtraEvent(p0: any): void {
	return _in(0xfa5b74ba, 0xb8a7ef99, p0); 
}

/**
 * 
 * @param hash
 * @param p1
 */
export function playstatsHeistSaveCheat(hash: number, p1: number): void {
	return _in(0xf4ff020a, 0x08bc8863, _ch(hash), p1); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param data
 * @param p1
 * @param p2
 * @param p3
 */
export function PlaystatsH2InstanceEnd(p1: any, p2: any, p3: any): void {
	return _in(0x1e1497d0, 0xd2108115, _i, p1, p2, p3); 
}

/**
 * ```
 * longest time being ilde?
 * ```
 * @param time
 */
export function playstatsIdleKick(time: number): void {
	return _in(0x5da3a8de, 0x8cb6226f, time); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsImportExportMissionDone(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x2b69f507, 0x4c894811, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param p0
 */
export function PlaystatsInventory(p0: any): void {
	return _in(0x887dad63, 0xcf5b7908, p0); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsJobBend(): void {
	return _in(0xf5bb8dac, 0x426a52c0, _i, _i, _i, _i); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsHoldUpMissionDone(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xcb00196b, 0x31c39eb1, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function playstatsLeaveJobChain(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0xc5be134e, 0xc7ba96a0, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsMissionCheckpoint(p1: any, p2: any, p3: any): void {
	return _in(0xc900596a, 0x63978c1d, _i, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Removed Parameter 4: Any p3
 * NativeDB Removed Parameter 5: Any p4
 * NativeDB Removed Parameter 6: Any p5
 * NativeDB Removed Parameter 7: Any p6
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function playstatsMatchStarted(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void {
	return _in(0xbc80e22d, 0xed931e3d, p0, p1, p2, p3, p4, p5, p6); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function playstatsMissionOver(p1: any, p2: any, p3: boolean, p4: boolean, p5: boolean): void {
	return _in(0x7c4bb33a, 0x8ced7324, _i, p1, p2, p3, p4, p5); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsMissionStarted(p1: any, p2: any, p3: boolean): void {
	return _in(0xc19a2925, 0xc34d2231, _i, p1, p2, p3); 
}

/**
 * 
 * @param p0
 */
export function playstatsNpcInvite(): void {
	return _in(0x93054c88, 0xe6aa7c44, _i); 
}

/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function PlaystatsPassiveMode(p0: boolean, p1: number, p2: number, p3: number): void {
	return _in(0x35eec6c2, 0xbc821a71, p0, p1, p2, p3); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * @param p0
 * @param p1
 * @param p2
 */
export function playstatsOddjobDone(p0: any, p1: any, p2: any): void {
	return _in(0x69dea3e9, 0xdb727b4c, p0, p1, p2); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param modelHash
 */
export function PlaystatsPegasaircraft(modelHash: number): void {
	return _in(0x9572bd4d, 0xd6b72122, _ch(modelHash)); 
}

/**
 * 
 * @param data
 */
export function PlaystatsPiMenuHideSettings(): void {
	return _in(0x203b3811, 0x33817079, _i); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsPropChange(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0xba739d6d, 0x5a05d6e7, p0, p1, p2, p3); 
}

/**
 * 
 * @param element
 * @param item
 */
export function playstatsQuickfixTool(element: number, item: string): void {
	return _in(0x90d06228, 0x66e80445, element, _ts(item)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function playstatsRaceCheckpoint(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x9c375c31, 0x5099dde4, p0, p1, p2, p3, p4); 
}

/**
 * ```
 * NativeDB Removed Parameter 5: Any p4
 * NativeDB Removed Parameter 6: Any p5
 * NativeDB Removed Parameter 7: Any p6
 * NativeDB Removed Parameter 8: Any p7
 * NativeDB Removed Parameter 9: Any p8
 * NativeDB Removed Parameter 10: Any p9
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function playstatsRaceToPointMissionDone(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void {
	return _in(0xaddd1c75, 0x4e2e2914, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); 
}

/**
 * 
 * @param name
 * @param p1
 * @param p2
 * @param p3
 */
export function playstatsRandomMissionDone(name: string, p1: any, p2: any, p3: any): void {
	return _in(0x71862b1d, 0x855f32e1, _ts(name), p1, p2, p3); 
}

/**
 * 
 * @param data
 */
export function PlaystatsRecoverContraband(): void {
	return _in(0x04d90ba8, 0x207ada2d, _i); 
}

/**
 * 
 * @param rank
 */
export function playstatsRankUp(rank: number): void {
	return _in(0xc7f2de41, 0xd102bfb4, rank); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function PlaystatsRobberyFinale(p0: any): void {
	return _in(0xbba55be9, 0xaaaabf44, p0); 
}

/**
 * 
 * @param amount
 * @param act
 * @param player
 * @param cm
 */
export function playstatsRosBet(amount: number, act: number, player: number, cm: number): void {
	return _in(0x121fb4dd, 0xdc2d5291, amount, act, player, _fv(cm)); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param p0
 */
export function PlaystatsRobberyPrep(p0: any): void {
	return _in(0x1a67dfbf, 0x1f5c3835, p0); 
}

/**
 * 
 * @param data
 */
export function PlaystatsSellContraband(): void {
	return _in(0xc729991a, 0x9065376e, _i); 
}

/**
 * Sets a byte that is then used in session_host and session_join metrics when hosting or joining a session
 * @param joinType
 */
export function playstatsSetJoinType(joinType: number): void {
	return _in(0xd1032e48, 0x2629049e, joinType); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param data
 */
export function PlaystatsSmugMissionEnded(): void {
	return _in(0x320c3514, 0x7d5b5ddd, _i); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function playstatsShopItem(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x176852ac, 0xaac173d1, p0, p1, p2, p3, p4); 
}

/**
 * 
 * @param amount
 */
export function PlaystatsSpentPiCustomLoadout(amount: number): void {
	return _in(0xbe509b0a, 0x3693de8b, amount); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function PlaystatsSpectatorWheelSpin(p0: number, p1: number, p2: number, p3: number): void {
	return _in(0x6731de84, 0xa38bfad0, p0, p1, p2, p3); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param data
 */
export function PlaystatsStoneHatchetEnd(): void {
	return _in(0x35e39e55, 0x70358630, _i); 
}

/**
 * ```
 * Allows CEventNetworkStuntPerformed to be triggered.
 * ```
 */
export function PlaystatsStuntPerformedEventAllowTrigger(): void {
	return _in(0x928dbfb8, 0x92638ef3); 
}

/**
 * ```
 * PLAYSTATS_START_INVITE_DESPAWNING?
 * ```
 */
export function PlaystatsStartOfflineMode(): void {
	return _in(0x098760c7, 0x461724cd); 
}

/**
 * ```
 * Disallows CEventNetworkStuntPerformed to be triggered.
 * ```
 */
export function PlaystatsStuntPerformedEventDisallowTrigger(): void {
	return _in(0x8a800dac, 0xcc0da55d); 
}

/**
 * 
 * @param weaponHash
 * @param componentHashTo
 * @param componentHashFrom
 */
export function playstatsWeaponModeChange(weaponHash: number, componentHashTo: number, componentHashFrom: number): void {
	return _in(0xe95c8a18, 0x75a02ca4, _ch(weaponHash), _ch(componentHashTo), _ch(componentHashFrom)); 
}

/**
 * 
 * @param scaleformHash
 * @param p1
 */
export function playstatsWebsiteVisited(scaleformHash: number, p1: number): void {
	return _in(0xddf24d53, 0x5060f811, _ch(scaleformHash), p1); 
}

/**
 * 
 * @param statHash
 * @param value
 * @param p2
 */
export function presenceEventUpdatestatFloat(statHash: number, value: number, p2: number): void {
	return _in(0x30a6614c, 0x1f7799b8, _ch(statHash), _fv(value), p2); 
}

/**
 * ```
 * Sets profile setting 866
 * SET_*
 * ```
 * @param value
 */
export function SetHasContentUnlocksFlags(value: number): void {
	return _in(0xdac073c7, 0x901f9e15, value); 
}

/**
 * 
 */
export function setProfileSettingPrologueComplete(): void {
	return _in(0xb475f27c, 0x6a994d65); 
}

/**
 * 
 * @param p0
 */
export function statDeleteSlot(p0: any): any {
	return _in(0x49a49bed, 0x12794d70, p0, _r, _ri); 
}

/**
 * 
 * @param statHash
 * @param value
 * @param p2
 */
export function presenceEventUpdatestatInt(statHash: number, value: number, p2: number): void {
	return _in(0x11ff1c80, 0x276097ed, _ch(statHash), value, p2); 
}

/**
 * ```
 * Sets profile setting 501
 * ```
 * @param transactionId
 */
export function SetSaveMigrationTransactionId(transactionId: number): void {
	return _in(0xf6792800, 0xac95350d, transactionId); 
}

/**
 * ```
 * Example:
 * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
 * STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
 * }
 * ```
 * @param statSlot
 */
export function statClearSlotForReload(statSlot: number): any {
	return _in(0xeb0a7218, 0x1d4aa4ad, statSlot, _r, _ri); 
}

/**
 * ```
 * p2 - Default value? Seems to be -1 most of the time.
 * ```
 * @param statName
 * @param mask
 * @param p2
 */
export function statGetBoolMasked(statName: number, mask: number, p2: number): boolean {
	return _in(0x10fe3f1b, 0x79f9b071, _ch(statName), mask, p2, _r); 
}

/**
 * 
 * @param statHash
 * @param outValue
 * @param p2
 */
export function statGetBool(statHash: number, p2: any): boolean {
	return _in(0x11b5e6d2, 0xae73f48e, _ch(statHash), _i, p2, _r); 
}

/**
 * 
 */
export function StatGetCancelSaveMigrationStatus(): number {
	return _in(0x567384df, 0xa67029e6, _r, _ri); 
}

/**
 * 
 * @param statHash
 * @param outValue
 * @param p2
 */
export function statGetFloat(statHash: number, p2: any): boolean {
	return _in(0xd7ae6c9c, 0x9c6ac54c, _ch(statHash), _f, p2, _r); 
}

/**
 * ```
 * p2 appears to always be -1
 * ```
 * @param statHash
 * @param outValue
 * @param p2
 */
export function statGetInt(statHash: number, p2: number): boolean {
	return _in(0x767fbc2a, 0xc802ef3d, _ch(statHash), _i, p2, _r); 
}

/**
 * 
 * @param statHash
 * @param p1
 * @param p2
 * @param p3
 */
export function statGetDate(statHash: number, p2: any, p3: any): boolean {
	return _in(0x8b0facef, 0xc36c824b, _ch(statHash), _i, p2, p3, _r); 
}

/**
 * 
 * @param statName
 */
export function statGetLicensePlate(statName: number): string {
	return _in(0x5473d419, 0x5058b2e4, _ch(statName), _r, _s); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function statGetMaskedInt(p0: any, p2: any, p3: any, p4: any): boolean {
	return _in(0x655185a0, 0x6d9eeaab, p0, _i, p2, p3, p4, _r); 
}

/**
 * 
 * @param statName
 */
export function statGetNumberOfDays(statName: number): number {
	return _in(0xe0e854f5, 0x280fb769, _ch(statName), _r, _ri); 
}

/**
 * 
 * @param statName
 */
export function statGetNumberOfHours(statName: number): number {
	return _in(0xf2d4b2fe, 0x415aafc3, _ch(statName), _r, _ri); 
}

/**
 * 
 * @param statName
 */
export function statGetNumberOfMinutes(statName: number): number {
	return _in(0x7583b4be, 0x4c5a41b5, _ch(statName), _r, _ri); 
}

/**
 * 
 * @param statName
 */
export function statGetNumberOfSeconds(statName: number): number {
	return _in(0x2ce056ff, 0x3723f00b, _ch(statName), _r, _ri); 
}

/**
 * ```
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_BOOL_MASKED"?
 * ```
 * @param p0
 */
export function StatGetPackedBoolMask(p0: number): number {
	return _in(0xf4d8e7ac, 0x2a27758c, p0, _r, _ri); 
}

/**
 * ```
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
 * ```
 * @param p0
 */
export function StatGetPackedIntMask(p0: number): number {
	return _in(0x94f12abf, 0x9c79e339, p0, _r, _ri); 
}

/**
 * 
 * @param data
 */
export function statGetSaveMigrationStatus(): number {
	return _in(0x886913bb, 0xeaca68c1, _i, _r, _ri); 
}

/**
 * ```
 * Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists.
 * ```
 * @param p0
 */
export function statGetUserId(p0: any): string {
	return _in(0x2365c388, 0xe393bbe2, p0, _r, _s); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function statGetPos(p0: any, p4: any): boolean {
	return _in(0x350f82cc, 0xb186aa1b, p0, _i, _i, _i, p4, _r); 
}

/**
 * 
 * @param p0
 */
export function StatGetSaveMigrationConsumeContentUnlockStatus(): number {
	return _in(0xce5aa445, 0xaba8dee0, _ii(p0), _r, _ri); 
}

/**
 * 
 * @param statName
 * @param value
 */
export function statIncrement(statName: number, value: number): void {
	return _in(0x9b5a68c6, 0x489e9909, _ch(statName), _fv(value)); 
}

/**
 * ```
 * p1 is always -1 in the script files
 * ```
 * @param statHash
 * @param p1
 */
export function statGetString(statHash: number, p1: number): string {
	return _in(0xe50384ac, 0xc2c3db74, _ch(statHash), p1, _r, _s); 
}

/**
 * 
 * @param p0
 */
export function statLoad(p0: number): boolean {
	return _in(0xa651443f, 0x437b1ce6, p0, _r); 
}

/**
 * ```
 * platformName must be one of the following: ps3, xbox360, ps4, xboxone
 * ```
 * @param platformName
 */
export function StatMigrateSave(platformName: string): boolean {
	return _in(0xa5c80d8e, 0x768a9e66, _ts(platformName), _r); 
}

/**
 * 
 * @param p0
 */
export function statLoadPending(p0: any): boolean {
	return _in(0xa1750ffa, 0xfa181661, p0, _r); 
}

/**
 * 
 * @param contentId
 * @param srcPlatform
 * @param srcGamerHandle
 */
export function StatSaveMigrationConsumeContentUnlock(contentId: number, srcPlatform: string, srcGamerHandle: string): boolean {
	return _in(0x3270f67e, 0xed31fbc1, _ch(contentId), _ts(srcPlatform), _ts(srcGamerHandle), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param p0
 * @param p1
 * @param p2
 */
export function statSave(p0: number, p1: boolean, p2: number): boolean {
	return _in(0xe07bca30, 0x5b82d2fd, p0, p1, p2, _r); 
}

/**
 * 
 */
export function statSaveMigrationStatusStart(): boolean {
	return _in(0xc70ddce5, 0x6d0d3a99, _r); 
}

/**
 * 
 */
export function StatSaveMigrationCancel(): boolean {
	return _in(0x4fef5318, 0x3c3c6414, _r); 
}

/**
 * 
 */
export function statSavePending(): boolean {
	return _in(0x7d3a5838, 0x56f2c5ac, _r); 
}

/**
 * 
 */
export function statSavePendingOrRequested(): boolean {
	return _in(0xbbb6ad00, 0x6f1bbea3, _r); 
}

/**
 * ```
 * Example:
 * STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
 * ```
 * @param statName
 * @param value
 * @param save
 */
export function statSetBool(statName: number, value: boolean, save: boolean): boolean {
	return _in(0x4b33c424, 0x3de0c432, _ch(statName), value, save, _r); 
}

/**
 * 
 * @param toggle
 */
export function statSetBlockSaves(toggle: boolean): void {
	return _in(0xf434a10b, 0xa01c37d0, toggle); 
}

/**
 * 
 * @param statName
 * @param value
 * @param mask
 * @param save
 */
export function statSetBoolMasked(statName: number, value: boolean, mask: number, save: boolean): boolean {
	return _in(0x5bc62ec1, 0x937b9e5b, _ch(statName), value, mask, save, _r); 
}

/**
 * 
 */
export function statSetCheatIsActive(): void {
	return _in(0x047cbed6, 0xf6f8b63c); 
}

/**
 * ```
 * p1 always true.
 * ```
 * @param statName
 * @param p1
 */
export function statSetCurrentPosixTime(statName: number, p1: boolean): boolean {
	return _in(0xc2f84b7f, 0x9c4d0c61, _ch(statName), p1, _r); 
}

/**
 * ```
 * Example:
 * STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
 * ```
 * @param statName
 * @param value
 * @param save
 */
export function statSetFloat(statName: number, value: number, save: boolean): boolean {
	return _in(0x4851997f, 0x37fe9b3c, _ch(statName), _fv(value), save, _r); 
}

/**
 * ```
 * The following values have been found in the decompiled scripts:
 * "RC_ABI1"
 * "RC_ABI2"
 * "RC_BA1"
 * "RC_BA2"
 * "RC_BA3"
 * "RC_BA3A"
 * "RC_BA3C"
 * "RC_BA4"
 * "RC_DRE1"
 * "RC_EPS1"
 * "RC_EPS2"
 * "RC_EPS3"
 * "RC_EPS4"
 * "RC_EPS5"
 * "RC_EPS6"
 * "RC_EPS7"
 * "RC_EPS8"
 * "RC_EXT1"
 * "RC_EXT2"
 * "RC_EXT3"
 * "RC_EXT4"
 * "RC_FAN1"
 * "RC_FAN2"
 * "RC_FAN3"
 * "RC_HAO1"
 * "RC_HUN1"
 * "RC_HUN2"
 * "RC_JOS1"
 * "RC_JOS2"
 * "RC_JOS3"
 * "RC_JOS4"
 * "RC_MAU1"
 * "RC_MIN1"
 * "RC_MIN2"
 * "RC_MIN3"
 * "RC_MRS1"
 * "RC_MRS2"
 * "RC_NI1"
 * "RC_NI1A"
 * "RC_NI1B"
 * "RC_NI1C"
 * "RC_NI1D"
 * "RC_NI2"
 * "RC_NI3"
 * "RC_OME1"
 * "RC_OME2"
 * "RC_PA1"
 * "RC_PA2"
 * "RC_PA3"
 * "RC_PA3A"
 * "RC_PA3B"
 * "RC_PA4"
 * "RC_RAM1"
 * "RC_RAM2"
 * "RC_RAM3"
 * "RC_RAM4"
 * "RC_RAM5"
 * "RC_SAS1"
 * "RC_TON1"
 * "RC_TON2"
 * "RC_TON3"
 * "RC_TON4"
 * "RC_TON5"
 * ```
 * @param statName
 * @param value
 * @param save
 */
export function statSetGxtLabel(statName: number, value: string, save: boolean): boolean {
	return _in(0x17695002, 0xfd8b2ae0, _ch(statName), _ts(value), save, _r); 
}

/**
 * 
 * @param statName
 * @param value
 * @param save
 */
export function statSetInt(statName: number, value: number, save: boolean): boolean {
	return _in(0xb3271d7a, 0xb655b441, _ch(statName), value, save, _r); 
}

/**
 * ```
 * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
 * The structure looks like this:
 * int year
 * int month
 * int day
 * int hour
 * int minute
 * int second
 * int millisecond
 * The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
 * ```
 * @param statName
 * @param value
 * @param numFields
 * @param save
 */
export function statSetDate(statName: number, numFields: number, save: boolean): boolean {
	return _in(0x2c29bfb6, 0x4f4fcbe4, _ch(statName), _i, numFields, save, _r); 
}

/**
 * 
 * @param statName
 * @param str
 */
export function statSetLicensePlate(statName: number, str: string): boolean {
	return _in(0x69ff1326, 0x6d7296da, _ch(statName), _ts(str), _r); 
}

/**
 * 
 * @param statName
 * @param x
 * @param y
 * @param z
 * @param save
 */
export function statSetPos(statName: number, x: number, y: number, z: number, save: boolean): boolean {
	return _in(0xdb283fde, 0x680fe72e, _ch(statName), _fv(x), _fv(y), _fv(z), save, _r); 
}

/**
 * 
 * @param statName
 * @param p1
 * @param p2
 * @param p3
 * @param save
 */
export function statSetMaskedInt(statName: number, p1: any, p2: any, p3: number, save: boolean): boolean {
	return _in(0x7bbb1b54, 0x583ed410, _ch(statName), p1, p2, p3, save, _r); 
}

/**
 * ```
 * Does not take effect immediately, unfortunately.
 * profileSetting seems to only be 936, 937 and 938 in scripts
 * ```
 * @param profileSetting
 * @param value
 */
export function statSetProfileSettingValue(profileSetting: number, value: number): void {
	return _in(0x68f01422, 0xbe1d838f, profileSetting, value); 
}

/**
 * 
 * @param statName
 * @param value
 * @param save
 */
export function statSetUserId(statName: number, value: string, save: boolean): boolean {
	return _in(0x8cddf1e4, 0x52babe11, _ch(statName), _ts(value), save, _r); 
}

/**
 * 
 * @param statName
 * @param value
 * @param save
 */
export function statSetString(statName: number, value: string, save: boolean): boolean {
	return _in(0xa87b2335, 0xd12531d7, _ch(statName), _ts(value), save, _r); 
}

/**
 * 
 * @param p0
 */
export function statSlotIsLoaded(p0: any): boolean {
	return _in(0x0d0a9f0e, 0x7bd91e3c, p0, _r); 
}

/**
 * 
 * @param modelHash
 */
export function addModelToCreatorBudget(modelHash: number): boolean {
	return _in(0x0bc3144d, 0xeb678666, _ch(modelHash), _r); 
}

/**
 * 
 */
export function allowPlayerSwitchAscent(): void {
	return _in(0x8e2a065a, 0xbdae6994); 
}

/**
 * 
 */
export function allowPlayerSwitchDescent(): void {
	return _in(0xad5fdf34, 0xb81bfe79); 
}

/**
 * 
 */
export function allowPlayerSwitchOutro(): void {
	return _in(0x74de2e87, 0x39086740); 
}

/**
 * 
 */
export function allowPlayerSwitchPan(): void {
	return _in(0x43d1680c, 0x6d19a8e9); 
}

/**
 * 
 */
export function clearFocus(): void {
	return _in(0x31b73d1e, 0xa9f01da2); 
}

/**
 * 
 */
export function beginSrl(): void {
	return _in(0x9baddc94, 0xef83b823); 
}

/**
 * 
 */
export function clearHdArea(): void {
	return _in(0xce58b1cf, 0xb9290813); 
}

/**
 * 
 */
export function disableSwitchOutroFx(): void {
	return _in(0xbd605b8e, 0x0e18b3bb); 
}

/**
 * 
 * @param animDict
 */
export function doesAnimDictExist(animDict: string): boolean {
	return _in(0x2da49c3b, 0x79856961, _ts(animDict), _r); 
}

/**
 * 
 */
export function enableSwitchPauseBeforeDescent(): void {
	return _in(0xd4793dff, 0x3af2abcd); 
}

/**
 * ```
 * x1, y1, z1 -- Coords of your ped model
 * x2, y2, z2 -- Coords of the ped you want to switch to
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
	return _in(0xb5d7b26b, 0x45720e05, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri); 
}

/**
 * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
 */
export function endSrl(): void {
	return _in(0x0a41540e, 0x63c9ee17); 
}

/**
 * 
 */
export function getPlayerShortSwitchState(): number {
	return _in(0x20f898a5, 0xd9782800, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 */
export function GetGlobalWaterType(): number {
	return _in(0xf741bd85, 0x3611592d, _r, _ri); 
}

/**
 * 
 */
export function getLodscale(): number {
	return _in(0x0c15b0e4, 0x43b2349d, _r, _rf); 
}

/**
 * 
 */
export function getPlayerSwitchInterpOutCurrentTime(): any {
	return _in(0x5b48a06d, 0xd0e792a5, _r, _ri); 
}

/**
 * 
 */
export function getNumberOfStreamingRequests(): number {
	return _in(0x40600572, 0x71cebc89, _r, _ri); 
}

/**
 * 
 */
export function getPlayerSwitchJumpCutIndex(): number {
	return _in(0x78c0d932, 0x53149435, _r, _ri); 
}

/**
 * 
 */
export function getPlayerSwitchState(): number {
	return _in(0x47055530, 0x0d10b2a5, _r, _ri); 
}

/**
 * 
 */
export function getPlayerSwitchInterpOutDuration(): number {
	return _in(0x08c2d6c5, 0x2a3104bb, _r, _ri); 
}

/**
 * 
 */
export function getPlayerSwitchType(): number {
	return _in(0xb3c94a90, 0xd9fc9e62, _r, _ri); 
}

/**
 * ```
 * 0.0 = no memory used
 * 1.0 = all memory used
 * 
 * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
 * 
 * GET_*
 * ```
 */
export function GetUsedCreatorModelMemoryPercentage(): number {
	return _in(0x3d3d8b3b, 0xe5a83d35, _r, _rf); 
}

/**
 * 
 * @param animDict
 */
export function hasAnimDictLoaded(animDict: string): boolean {
	return _in(0xd031a916, 0x2d01088c, _ts(animDict), _r); 
}

/**
 * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped.
 * 
 * Animation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\_0xAF8A94EDE7712BEF).
 * @param animSet
 */
export function hasAnimSetLoaded(animSet: string): boolean {
	return _in(0xc4ea073d, 0x86fb29b0, _ts(animSet), _r); 
}

/**
 * ```
 * Alias for HAS_ANIM_SET_LOADED.
 * ```
 * @param clipSet
 */
export function hasClipSetLoaded(clipSet: string): boolean {
	return _in(0x318234f4, 0xf3738af3, _ts(clipSet), _r); 
}

/**
 * Returns whether the specified model (archetype) is currently loaded.
 * 
 * Note that this will return 'true' even if the model has been requested and loaded by something other than the current script, if you're intending to actually use the model in a later frame, you should call REQUEST_MODEL anyway.
 * @param model
 * @return A boolean indicating whether the archetype is loaded (true) or not (false).
 */
export function hasModelLoaded(model: number): boolean {
	return _in(0x98a4eb5d, 0x89a0c952, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function hasCollisionForModelLoaded(model: number): boolean {
	return _in(0x22cca434, 0xe368f03a, _ch(model), _r); 
}

/**
 * 
 * @param fxName
 */
export function hasNamedPtfxAssetLoaded(fxName: string): boolean {
	return _in(0x8702416e, 0x512ec454, _ts(fxName), _r); 
}

/**
 * 
 */
export function initCreatorBudget(): void {
	return _in(0xb5a4db34, 0xfe89b88a); 
}

/**
 * 
 */
export function hasPtfxAssetLoaded(): boolean {
	return _in(0xca7d9b86, 0xeca7481b, _r); 
}

/**
 * 
 * @param entity
 */
export function isEntityFocus(entity: number): boolean {
	return _in(0x2ddff3fb, 0x9075d747, entity, _r); 
}

/**
 * 
 * @param iplName
 */
export function isIplActive(iplName: string): boolean {
	return _in(0x88a741e4, 0x4a2b3495, _ts(iplName), _r); 
}

/**
 * ```
 * Returns whether the specified model represents a vehicle.
 * ```
 * @param model
 */
export function isModelAVehicle(model: number): boolean {
	return _in(0x19aac8f0, 0x7bfec53e, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function IsModelAPed(model: number): boolean {
	return _in(0x75816577, 0xfea6dad5, _ch(model), _r); 
}

/**
 * ```
 * Check if model is in cdimage(rpf)
 * ```
 * @param model
 */
export function isModelInCdimage(model: number): boolean {
	return _in(0x35b9e080, 0x3292b641, _ch(model), _r); 
}

/**
 * 
 */
export function isNetworkLoadingScene(): boolean {
	return _in(0x41ca5a33, 0x160ea4ab, _r); 
}

/**
 * ```
 * Returns whether the specified model exists in the game.
 * ```
 * @param model
 */
export function isModelValid(model: number): boolean {
	return _in(0xc0296a2e, 0xdf545e92, _ch(model), _r); 
}

/**
 * ```
 * Returns true if the player is currently switching, false otherwise.
 * (When the camera is in the sky moving from Trevor to Franklin for example)
 * ```
 */
export function isPlayerSwitchInProgress(): boolean {
	return _in(0xd9d2cfff, 0x49fab35f, _r); 
}

/**
 * 
 */
export function isNewLoadSceneLoaded(): boolean {
	return _in(0x01b8247a, 0x7a8b9ad1, _r); 
}

/**
 * 
 */
export function isNewLoadSceneActive(): boolean {
	return _in(0xa41a05b6, 0xcb741b85, _r); 
}

/**
 * Returns true when the srl from BEGIN_SRL is loaded.
 * @return *   A boolean once BeginSrl srl is loaded.
 */
export function isSrlLoaded(): boolean {
	return _in(0xd0263801, 0xa4c5b0bb, _r); 
}

/**
 * 
 */
export function isSwitchReadyForDescent(): boolean {
	return _in(0xdfa80cb2, 0x5d0a19b3, _r); 
}

/**
 * 
 */
export function isStreamvolActive(): boolean {
	return _in(0xbc9823ab, 0x80a3dcac, _r); 
}

/**
 * 
 */
export function isSwitchSkippingDescent(): boolean {
	return _in(0x5b74ea8c, 0xfd5e3e7e, _r); 
}

/**
 * 
 */
export function loadAllObjectsNow(): void {
	return _in(0xbd6e8463, 0x2dd4cb3f); 
}

/**
 * 0 - default
 * 1 - HeistIsland
 * 
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param waterType
 */
export function LoadGlobalWaterType(waterType: number): void {
	return _in(0x7e3f55ed, 0x251b76d3, waterType); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function loadScene(x: number, y: number, z: number): void {
	return _in(0x4448eb75, 0xb4904bdb, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 */
export function networkUpdateLoadScene(): boolean {
	return _in(0xc4582015, 0x556d1c46, _r); 
}

/**
 * 
 */
export function networkStopLoadScene(): void {
	return _in(0x64e630fa, 0xf5f60f44); 
}

/**
 * ```
 * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
 * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
 * Returns True if success, used only 7 times in decompiled scripts of 1868
 * ```
 * @param posX
 * @param posY
 * @param posZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param radius
 * @param p7
 * @return True if success, used only 7 times in decompiled scripts of 1868 (https://github.com/root-cause/v-decompiled-scripts).
 */
export function newLoadSceneStart(posX: number, posY: number, posZ: number, offsetX: number, offsetY: number, offsetZ: number, radius: number, p7: number): boolean {
	return _in(0x212a8d0d, 0x2babfac2, _fv(posX), _fv(posY), _fv(posZ), _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(radius), p7, _r); 
}

/**
 * 
 */
export function newLoadSceneStop(): void {
	return _in(0xc197616d, 0x221ff4a4); 
}

/**
 * ```
 * if (!sub_8f12("START LOAD SCENE SAFE")) {
 * if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {
 * STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);
 * sub_8e9e("START LOAD SCENE SAFE", 1);
 * }
 * }
 * (Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 */
export function newLoadSceneStartSphere(x: number, y: number, z: number, radius: number, p4: any): boolean {
	return _in(0xaccfb4ac, 0xf53551b0, _fv(x), _fv(y), _fv(z), _fv(radius), p4, _r); 
}

/**
 * 
 * @param animDict
 */
export function removeAnimDict(animDict: string): void {
	return _in(0xf66a602f, 0x829e2a06, _ts(animDict)); 
}

/**
 * ```
 * Alias for REMOVE_ANIM_SET.
 * ```
 * @param clipSet
 */
export function removeClipSet(clipSet: string): void {
	return _in(0x01f73a13, 0x1c18cd94, _ts(clipSet)); 
}

/**
 * ```
 * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
 * Max scaling seems to be 200.0, normal is 1.0
 * See https://gfycat.com/DetailedHauntingIncatern
 * ```
 * @param scaling
 */
export function overrideLodscaleThisFrame(scaling: number): void {
	return _in(0xa76359fc, 0x80b2438e, _fv(scaling)); 
}

/**
 * 
 * @param modelHash
 */
export function removeModelFromCreatorBudget(modelHash: number): void {
	return _in(0xf086ad93, 0x54fac3a3, _ch(modelHash)); 
}

/**
 * This native is used to attribute the SRL that BeginSrl is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SetFocusArea because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
 * For instance, GTA:O opening cutscene.
 * 
 * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
 * https://pastebin.com/zd9XYUWY : here is the content of a SRL file opened with codewalker.
 * @param srl
 */
export function prefetchSrl(srl: string): void {
	return _in(0x3d245789, 0xce12982c, _ts(srl)); 
}

/**
 * Unloads the specified animation set. An animation set provides movement animations for a ped.
 * 
 * Animation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\_0xAF8A94EDE7712BEF).
 * @param animSet
 */
export function removeAnimSet(animSet: string): void {
	return _in(0x16350528, 0xf93024b3, _ts(animSet)); 
}

/**
 * 
 */
export function removePtfxAsset(): void {
	return _in(0x88c68140, 0x73dd4a73); 
}

/**
 * IPL list can be found [here](https://gist.github.com/4mmonium/4c8a076b5f712a7cc64666003009a2e7).
 * @param iplName
 */
export function removeIpl(iplName: string): void {
	return _in(0xee6c5ad3, 0xece0a82d, _ts(iplName)); 
}

/**
 * 
 * @param animDict
 */
export function requestAnimDict(animDict: string): void {
	return _in(0xd3bd4095, 0x1412fef6, _ts(animDict)); 
}

/**
 * 
 * @param fxName
 */
export function removeNamedPtfxAsset(fxName: string): void {
	return _in(0x5f61ebbe, 0x1a00f96d, _ts(fxName)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function requestAdditionalCollisionAtCoord(x: number, y: number, z: number): void {
	return _in(0xc9156dc1, 0x1411a9ea, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param clipSet
 */
export function requestClipSet(clipSet: string): void {
	return _in(0xd2a71e1a, 0x77418a49, _ts(clipSet)); 
}

/**
 * Starts loading the specified animation set. An animation set provides movement animations for a ped. See [`SET_PED_MOVEMENT_CLIPSET`](#\_0xAF8A94EDE7712BEF).
 * @param animSet
 */
export function requestAnimSet(animSet: string): void {
	return _in(0x6ea47dae, 0x7fad0eed, _ts(animSet)); 
}

/**
 * ```
 * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
 * ```
 * @param iplName
 */
export function requestIpl(iplName: string): void {
	return _in(0x41b48938, 0x43bbdb74, _ts(iplName)); 
}

/**
 * 
 * @param model
 */
export function requestMenuPedModel(model: number): void {
	return _in(0xa0261aef, 0x7acfc51e, _ch(model)); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function requestCollisionAtCoord(x: number, y: number, z: number): void {
	return _in(0x07503f79, 0x48f491a7, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param model
 */
export function requestCollisionForModel(model: number): void {
	return _in(0x923cb32a, 0x3b874fcb, _ch(model)); 
}

/**
 * Request a model (archetype) to be loaded for use by the current script. Use SET_MODEL_AS_NO_LONGER_NEEDED when done using the model in script.
 * @param model
 */
export function requestModel(model: number): void {
	return _in(0x963d27a5, 0x8df860ac, _ch(model)); 
}

/**
 * ```
 * From the b678d decompiled scripts:
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
 * ```
 * @param fxName
 */
export function requestNamedPtfxAsset(fxName: string): void {
	return _in(0xb80d8756, 0xb4668ab6, _ts(fxName)); 
}

/**
 * ```
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * ```
 * @param interior
 * @param roomName
 */
export function requestModelsInRoom(interior: number, roomName: string): void {
	return _in(0x8a7a4010, 0x0edfec58, interior, _ts(roomName)); 
}

/**
 * ```
 * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
 * ```
 * @param entity
 */
export function setFocusEntity(entity: number): void {
	return _in(0x198f7770, 0x5fa0931d, entity); 
}

/**
 * ```
 * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
 * ```
 */
export function requestPtfxAsset(): void {
	return _in(0x944955fb, 0x2a3935c8); 
}

/**
 * ```
 * Override the area where the camera will render the terrain.
 * p3, p4 and p5 are usually set to 0.0
 * ```
 * @param x
 * @param y
 * @param z
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function setFocusPosAndVel(x: number, y: number, z: number, offsetX: number, offsetY: number, offsetZ: number): void {
	return _in(0xbb7454ba, 0xff08fe25, _fv(x), _fv(y), _fv(z), _fv(offsetX), _fv(offsetY), _fv(offsetZ)); 
}

/**
 * 
 * @param toggle
 */
export function setGamePausesForStreaming(toggle: boolean): void {
	return _in(0x717cd6e6, 0xfaebbedc, toggle); 
}

/**
 * ```
 * This is a NOP function. It does nothing at all.
 * ```
 * @param toggle
 */
export function setDitchPoliceModels(toggle: boolean): void {
	return _in(0x42cbe544, 0x62d92634, toggle); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function setHdArea(x: number, y: number, z: number, radius: number): void {
	return _in(0xb85f2661, 0x9073e775, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * ```
 * Possible p0 values:
 * "prologue"
 * "Prologue_Main"
 * ```
 * @param name
 * @param toggle
 */
export function setMapdatacullboxEnabled(name: string, toggle: boolean): void {
	return _in(0xaf12610c, 0x644a35c9, _ts(name), toggle); 
}

/**
 * 
 * @param interiorID
 * @param toggle
 */
export function setInteriorActive(interiorID: number, toggle: boolean): void {
	return _in(0xe37b76c3, 0x87be28ed, interiorID, toggle); 
}

/**
 * Enables the specified island. For more information, see islandhopper.meta
 * 
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param name
 * @param toggle
 */
export function SetIslandHopperEnabled(name: string, toggle: boolean): void {
	return _in(0x9a9d1ba6, 0x39675cf1, _ts(name), toggle); 
}

/**
 * Releases the script ownership assigned by REQUEST_MODEL. This command should be used when done using a specific model hash in script.
 * @param model
 */
export function setModelAsNoLongerNeeded(model: number): void {
	return _in(0xe532f5d7, 0x8798daab, _ch(model)); 
}

/**
 * Control how many new (ambient?) peds will spawn in the game world.
 * Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
 * @param p0
 */
export function setPedPopulationBudget(p0: number): void {
	return _in(0x8c95333c, 0xfc3340f3, p0); 
}

/**
 * 
 * @param style
 */
export function setPlayerShortSwitchStyle(style: number): void {
	return _in(0x5f2013f8, 0xbc24ee69, style); 
}

/**
 * 
 * @param cameraCoordX
 * @param cameraCoordY
 * @param cameraCoordZ
 * @param camRotationX
 * @param camRotationY
 * @param camRotationZ
 * @param camFov
 * @param camFarClip
 * @param rotationOrder
 */
export function setPlayerSwitchOutro(cameraCoordX: number, cameraCoordY: number, cameraCoordZ: number, camRotationX: number, camRotationY: number, camRotationZ: number, camFov: number, camFarClip: number, rotationOrder: number): void {
	return _in(0xc208b673, 0xce446b61, _fv(cameraCoordX), _fv(cameraCoordY), _fv(cameraCoordZ), _fv(camRotationX), _fv(camRotationY), _fv(camRotationZ), _fv(camFov), _fv(camFarClip), rotationOrder); 
}

/**
 * ```
 * All names can be found in playerswitchestablishingshots.meta
 * ```
 * @param name
 */
export function setPlayerSwitchEstablishingShot(name: string): void {
	return _in(0x0fde9dbf, 0xc0a6bc65, _ts(name)); 
}

/**
 * 
 * @param toggle
 */
export function setReduceVehicleModelBudget(toggle: boolean): void {
	return _in(0x80c52789, 0x3080ccf3, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setReducePedModelBudget(toggle: boolean): void {
	return _in(0x77b5f9a3, 0x6bf96710, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setRenderHdOnly(toggle: boolean): void {
	return _in(0x40aefd1a, 0x244741f2, toggle); 
}

/**
 * 
 * @param p0
 */
export function setSrlTime(p0: number): void {
	return _in(0xa74a541c, 0x6884e7b8, _fv(p0)); 
}

/**
 * 
 * @param toggle
 */
export function setStreaming(toggle: boolean): void {
	return _in(0x6e0c6926, 0x77008888, toggle); 
}

/**
 * 
 */
export function shutdownCreatorBudget(): void {
	return _in(0xcce26000, 0xe9a6fad7); 
}

/**
 * ```
 * // this enum comes directly from R* so don't edit this
 * enum ePlayerSwitchType
 * {
 * SWITCH_TYPE_AUTO,
 * SWITCH_TYPE_LONG,
 * SWITCH_TYPE_MEDIUM,
 * SWITCH_TYPE_SHORT
 * };
 * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type. Or just auto, because it calls the same function in executable.
 * ----------------------------------------------------
 * Examples from the decompiled scripts:
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
 * STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
 * STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
 * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
 * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
 * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
 * ```
 * @param from
 * @param to
 * @param flags
 * @param switchType
 */
export function startPlayerSwitch(from: number, to: number, flags: number, switchType: number): void {
	return _in(0xfaa23f2c, 0xba159d67, from, to, flags, switchType); 
}

/**
 * 
 * @param p0
 */
export function setVehiclePopulationBudget(p0: number): void {
	return _in(0xcb9e1eb3, 0xbe2af4e9, p0); 
}

/**
 * 
 */
export function stopPlayerSwitch(): void {
	return _in(0x95c0a5bb, 0xdc189aa1); 
}

/**
 * ```
 * Always returns zero.
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function streamvolCreateFrustum(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: any, p8: any): any {
	return _in(0x1f3f018b, 0xc3afa77c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri); 
}

/**
 * 
 * @param unused
 */
export function streamvolDelete(unused: any): void {
	return _in(0x1ee7d8df, 0x4425f053, unused); 
}

/**
 * ```
 * Always returns zero.
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function streamvolCreateLine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any): any {
	return _in(0x0ad9710c, 0xee2f590f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r, _ri); 
}

/**
 * 
 * @param unused
 */
export function streamvolHasLoaded(unused: any): boolean {
	return _in(0x7d41e9d2, 0xd17c5b2d, unused, _r); 
}

/**
 * ```
 * Always returns zero.
 * ```
 * @param x
 * @param y
 * @param z
 * @param rad
 * @param p4
 * @param p5
 */
export function streamvolCreateSphere(x: number, y: number, z: number, rad: number, p4: any, p5: any): any {
	return _in(0x219c7b8d, 0x53e429fd, _fv(x), _fv(y), _fv(z), _fv(rad), p4, p5, _r, _ri); 
}

/**
 * ```
 * doesn't act normally when used on mount chilliad
 * 
 * flags:
 * 
 * 0: normal
 * 1: no transition
 * 255: switch IN
 * 
 * switchType: 0 - 3
 * 
 * 0: 1 step towards ped
 * 1: 3 steps out from ped
 * 2: 1 step out from ped
 * 3: 1 step towards ped
 * ```
 * @param ped
 * @param flags
 * @param switchType
 */
export function SwitchOutPlayer(ped: number, flags: number, switchType: number): void {
	return _in(0xaab3200e, 0xd59016bc, ped, flags, switchType); 
}

/**
 * 
 * @param unused
 */
export function streamvolIsValid(unused: any): boolean {
	return _in(0x07c313f9, 0x4746702c, unused, _r); 
}

/**
 * Use after using \_SWITCH_OUT_PLAYER to swoop the camera back down to the player's ped.
 * @param ped
 */
export function SwitchInPlayer(ped: number): void {
	return _in(0xd8295af6, 0x39fd9cb8, ped); 
}

/**
 * ```
 * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
 * ```
 * @param value
 */
export function ceil(value: number): number {
	return _in(0x11e019c8, 0xf43acc8a, _fv(value), _r, _ri); 
}

/**
 * 
 * @param value
 */
export function floor(value: number): number {
	return _in(0xf34ee736, 0xcf047844, _fv(value), _r, _ri); 
}

/**
 * Returns the cosine of the given number.
 * @param value
 * @return The cosine of the given number
 */
export function cos(value: number): number {
	return _in(0xd0ffb162, 0xf40a139c, _fv(value), _r, _rf); 
}

/**
 * 
 * @param value
 */
export function round(value: number): number {
	return _in(0xf2db717a, 0x73826179, _fv(value), _r, _ri); 
}

/**
 * 
 * @param base
 * @param exponent
 */
export function pow(base: number, exponent: number): number {
	return _in(0xe3621cc4, 0x0f31fe2e, _fv(base), _fv(exponent), _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param value
 */
export function Log10(value: number): number {
	return _in(0xe816e655, 0xde37fe20, _fv(value), _r, _rf); 
}

/**
 * ```
 * 0 = high
 * 1 = normal
 * 2 = low
 * ```
 * @param priority
 */
export function SetThreadPriority(priority: number): void {
	return _in(0x42b65dee, 0xf2edf2a1, priority); 
}

/**
 * 
 * @param value
 */
export function settimera(value: number): void {
	return _in(0xc1b1e9a0, 0x34a63a62, value); 
}

/**
 * 
 * @param value
 */
export function settimerb(value: number): void {
	return _in(0x5ae11bc3, 0x6633de4e, value); 
}

/**
 * 
 * @param value
 * @param bitShift
 */
export function shiftRight(value: number, bitShift: number): number {
	return _in(0x97ef1e5b, 0xce9dc075, value, bitShift, _r, _ri); 
}

/**
 * 
 * @param value
 * @param bitShift
 */
export function shiftLeft(value: number, bitShift: number): number {
	return _in(0xedd95a39, 0xe5544de8, value, bitShift, _r, _ri); 
}

/**
 * Returns the sine of the given number.
 * @param value
 * @return The sine of the given number
 */
export function sin(value: number): number {
	return _in(0x0badbfa3, 0xb172435f, _fv(value), _r, _rf); 
}

/**
 * ```
 * return : script thread id, 0 if failed
 * Pass pointer to struct of args in p1, size of struct goes into p2
 * ```
 * @param scriptName
 * @param args
 * @param argCount
 * @param stackSize
 */
export function startNewScriptWithArgs(scriptName: string, argCount: number, stackSize: number): number {
	return _in(0xb8ba7f44, 0xdf1575e1, _ts(scriptName), _i, argCount, stackSize, _r, _ri); 
}

/**
 * 
 * @param value
 */
export function sqrt(value: number): number {
	return _in(0x71d93b57, 0xd07f9804, _fv(value), _r, _rf); 
}

/**
 * ```
 * Examples:
 * g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
 * l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
 * SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
 * SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
 * SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
 * SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
 * Decompiled examples of usage when starting a script:
 * 
 * SCRIPT::REQUEST_SCRIPT(a_0);
 * if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
 * SYSTEM::START_NEW_SCRIPT(a_0, v_3);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
 * return 1;
 * }
 * 
 * or:
 * v_2 = "MrsPhilips2";
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * SYSTEM::WAIT(0);
 * }
 * sub_8792(36);
 * SYSTEM::START_NEW_SCRIPT(v_2, 17000);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
 * All native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi
 * ```
 * @param scriptName
 * @param stackSize
 */
export function startNewScript(scriptName: string, stackSize: number): number {
	return _in(0xe81651ad, 0x79516e48, _ts(scriptName), stackSize, _r, _ri); 
}

/**
 * 
 * @param scriptHash
 * @param stackSize
 */
export function startNewScriptWithNameHash(scriptHash: number, stackSize: number): number {
	return _in(0xeb1c67c3, 0xa5333a92, _ch(scriptHash), stackSize, _r, _ri); 
}

/**
 * 
 * @param scriptHash
 * @param args
 * @param argCount
 * @param stackSize
 */
export function startNewScriptWithNameHashAndArgs(scriptHash: number, argCount: number, stackSize: number): number {
	return _in(0xc4bb298b, 0xd441be78, _ch(scriptHash), _i, argCount, stackSize, _r, _ri); 
}

/**
 * 
 */
export function timerb(): number {
	return _in(0xc9d94441, 0x86b5a374, _r, _ri); 
}

/**
 * ```
 * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
 * ```
 */
export function timera(): number {
	return _in(0x83666f9f, 0xb8febd4b, _r, _ri); 
}

/**
 * 
 * @param value
 */
export function toFloat(value: number): number {
	return _in(0xbbda7924, 0x48db5a89, value, _r, _rf); 
}

/**
 * ```
 * Gets the current frame time.
 * ```
 */
export function timestep(): number {
	return _in(0x00000000, 0x50597ee2, _r, _rf); 
}

/**
 * ```
 * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function vdist2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
	return _in(0xb7a62832, 0x0eff8e47, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf); 
}

/**
 * ```
 * Calculates the magnitude of a vector.
 * ```
 * @param x
 * @param y
 * @param z
 */
export function vmag(x: number, y: number, z: number): number {
	return _in(0x652d2eee, 0xf1d3e62c, _fv(x), _fv(y), _fv(z), _r, _rf); 
}

/**
 * ```
 * Calculates distance between vectors.
 * ```
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function vdist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
	return _in(0x2a488c17, 0x6d52cca5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf); 
}

/**
 * ```
 * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
 * ```
 * @param x
 * @param y
 * @param z
 */
export function vmag2(x: number, y: number, z: number): number {
	return _in(0xa8ceacb4, 0xf35ae058, _fv(x), _fv(y), _fv(z), _r, _rf); 
}

/**
 * ```
 * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
 * ```
 * @param ms
 */
export function wait(ms: number): void {
	return _in(0x4ede34fb, 0xadd967a6, ms); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function addPatrolRouteLink(p0: any, p1: any): void {
	return _in(0x23083260, 0xdec3a551, p0, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function addCoverPoint(p0: number, p1: number, p2: number, p3: number, p4: any, p5: any, p6: any, p7: boolean): number {
	return _in(0xd5c12a75, 0xc7b9497f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, p7, _r); 
}

/**
 * 
 * @param playerX
 * @param playerY
 * @param playerZ
 * @param radiusX
 * @param radiusY
 * @param radiusZ
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function addCoverBlockingArea(playerX: number, playerY: number, playerZ: number, radiusX: number, radiusY: number, radiusZ: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean): void {
	return _in(0x45c59709, 0x7dd7cb81, _fv(playerX), _fv(playerY), _fv(playerZ), _fv(radiusX), _fv(radiusY), _fv(radiusZ), p6, p7, p8, p9); 
}

/**
 * 
 * @param ped
 * @param ped2
 */
export function addVehicleSubtaskAttackPed(ped: number, ped2: number): void {
	return _in(0x85f462ba, 0xdc7da47f, ped, ped2); 
}

/**
 * ```
 * Example:
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
 * p0 is between 0 and 4 in the scripts.
 * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
 * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
 * Examples:
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7 -- [[3]] ], 0.0, 0.0, 0.0, 0);
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17 -- [[44]] ]._f3, l_B0[17 -- [[44]] ]._f3, 2000);
 * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
 * p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
 * ```
 * @param p0
 * @param p1
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p8
 */
export function addPatrolRouteNode(p0: number, p1: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p8: number): void {
	return _in(0x8edf9501, 0x67586b7c, p0, _ts(p1), _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p8); 
}

/**
 * ```
 * x, y, z: offset in world coords from some entity.
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function addVehicleSubtaskAttackCoord(ped: number, x: number, y: number, z: number): void {
	return _in(0x5cf0d8f9, 0xbba0dd75, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param route
 */
export function assistedMovementIsRouteLoaded(route: string): boolean {
	return _in(0x60f9a439, 0x3a21f741, _ts(route), _r); 
}

/**
 * ```
 * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
 * ```
 * @param route
 */
export function assistedMovementRequestRoute(route: string): void {
	return _in(0x81726896, 0x8605947a, _ts(route)); 
}

/**
 * 
 * @param dist
 */
export function assistedMovementOverrideLoadDistanceThisFrame(dist: number): void {
	return _in(0x13945951, 0xe16ef912, _fv(dist)); 
}

/**
 * 
 * @param route
 */
export function assistedMovementRemoveRoute(route: string): void {
	return _in(0x35485364, 0x85dd792b, _ts(route)); 
}

/**
 * 
 * @param ped
 */
export function clearDrivebyTaskUnderneathDrivingTask(ped: number): void {
	return _in(0xc35b5cdb, 0x2824cf69, ped); 
}

/**
 * 
 * @param ped
 */
export function clearPedSecondaryTask(ped: number): void {
	return _in(0x176cecf6, 0xf920d707, ped); 
}

/**
 * 
 * @param route
 * @param props
 */
export function assistedMovementSetRouteProperties(route: string, props: number): void {
	return _in(0xd5002d78, 0xb7162e1b, _ts(route), props); 
}

/**
 * Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.
 * @param ped
 */
export function clearPedTasksImmediately(ped: number): void {
	return _in(0xaaa34f8a, 0x7cb32098, ped); 
}

/**
 * Clear a ped's tasks. Stop animations and other tasks created by scripts.
 * @param ped
 */
export function clearPedTasks(ped: number): void {
	return _in(0xe1ef3c12, 0x16aff2cd, ped); 
}

/**
 * 
 * @param taskSequenceId
 */
export function clearSequenceTask(): void {
	return _in(0x3841422e, 0x9c488d8c, _ii(taskSequenceId)); 
}

/**
 * ```
 * CLEAR_*
 * 
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 */
export function ClearVehicleTasks(vehicle: number): void {
	return _in(0xdbbc7a24, 0x32524127, vehicle); 
}

/**
 * 
 */
export function closePatrolRoute(): void {
	return _in(0xb043eca8, 0x01b8cbc1); 
}

/**
 * 
 * @param taskSequenceId
 */
export function closeSequenceTask(taskSequenceId: number): void {
	return _in(0x39e72bc9, 0x9e6360cb, taskSequenceId); 
}

/**
 * 
 */
export function createPatrolRoute(): void {
	return _in(0xaf8a443c, 0xcc8018dc); 
}

/**
 * ```
 * Forces the ped to use the mounted weapon.
 * Returns false if task is not possible.
 * ```
 * @param ped
 */
export function controlMountedWeapon(ped: number): boolean {
	return _in(0xdcfe4206, 0x8fe0135a, ped, _r); 
}

/**
 * ```
 * From the b617d scripts:
 * TASK::DELETE_PATROL_ROUTE("miss_merc0");
 * TASK::DELETE_PATROL_ROUTE("miss_merc1");
 * TASK::DELETE_PATROL_ROUTE("miss_merc2");
 * TASK::DELETE_PATROL_ROUTE("miss_dock");
 * ```
 * @param patrolRoute
 */
export function deletePatrolRoute(patrolRoute: string): void {
	return _in(0x7767dd9d, 0x65e91319, _ts(patrolRoute)); 
}

/**
 * ```
 * Occurrences in the b617d scripts:
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "GRAPESEED_PLANES",
 * "KORTZ_SECURITY",
 * "LOST_BIKERS",
 * "LSA_Planes",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5"
 * "QUARRY",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE",
 * "Triathlon_1_Start",
 * "Triathlon_2_Start",
 * "Triathlon_3_Start"
 * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 * ```
 * @param scenarioGroup
 */
export function doesScenarioGroupExist(scenarioGroup: string): boolean {
	return _in(0xf9034c13, 0x6c9e00d3, _ts(scenarioGroup), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param b
 */
export function doesScenarioExistInArea(x: number, y: number, z: number, radius: number, b: boolean): boolean {
	return _in(0x5a59271f, 0xfadd33c1, _fv(x), _fv(y), _fv(z), _fv(radius), b, _r); 
}

/**
 * ```
 * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * ```
 * @param vehicle
 */
export function getActiveVehicleMissionType(vehicle: number): number {
	return _in(0x534aeba6, 0xe5ed4cab, vehicle, _r, _ri); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function doesScenarioOfTypeExistInArea(p0: number, p1: number, p2: number, p3: string, p4: number, p5: boolean): boolean {
	return _in(0x0a9d0c2a, 0x3bbc86c1, _fv(p0), _fv(p1), _fv(p2), _ts(p3), _fv(p4), p5, _r); 
}

/**
 * ```
 * Checks if there is a cover point at position
 * ```
 * @param x
 * @param y
 * @param z
 */
export function doesScriptedCoverPointExistAtCoords(x: number, y: number, z: number): boolean {
	return _in(0xa98b8e3c, 0x088e5a31, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * 
 * @param p0
 */
export function getClipSetForScriptedGunTask(p0: number): string {
	return _in(0x3a8cadc7, 0xd37aacc5, p0, _r, _s); 
}

/**
 * See [`GET_NAVMESH_ROUTE_DISTANCE_REMAINING`](#\_0xC6F5C0BCDC74D62D) for more details.
 * @param ped
 */
export function getNavmeshRouteResult(ped: number): number {
	return _in(0x632e831f, 0x382a0fa8, ped, _r, _ri); 
}

/**
 * ```
 * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
 * ```
 * @param ped
 * @param taskIndex
 */
export function getIsTaskActive(ped: number, taskIndex: number): boolean {
	return _in(0xb0760331, 0xc7aa4155, ped, taskIndex, _r); 
}

/**
 * 
 * @param name
 */
export function getIsWaypointRecordingLoaded(name: string): boolean {
	return _in(0xcb4e8be8, 0xa0063c5d, _ts(name), _r); 
}

/**
 * ```
 * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
 * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
 * Looks like the native returns an int for the path's state:
 * 1 - ???
 * 2 - ???
 * 3 - Finished Generating
 * ```
 * @param ped
 * @param distanceRemaining
 * @param isPathReady
 */
export function getNavmeshRouteDistanceRemaining(ped: number): number {
	return _in(0xc6f5c0bc, 0xdc74d62d, ped, _f, _i, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPedDesiredMoveBlendRatio(ped: number): number {
	return _in(0x8517d4a6, 0xca8513ed, ped, _r, _rf); 
}

/**
 * 
 * @param p0
 */
export function getPedWaypointDistance(p0: any): number {
	return _in(0xe6a877c6, 0x4caf1bc5, p0, _r, _rf); 
}

/**
 * 
 * @param ped
 */
export function getPhoneGestureAnimCurrentTime(ped: number): number {
	return _in(0x47619abe, 0x8b268c60, ped, _r, _rf); 
}

/**
 * 
 * @param ped
 */
export function getPedWaypointProgress(ped: number): number {
	return _in(0x2720aaa7, 0x5001e094, ped, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getPhoneGestureAnimTotalTime(ped: number): number {
	return _in(0x1ee0f68a, 0x7c25dec6, ped, _r, _rf); 
}

/**
 * ```
 * returned values:
 * 0 to 7 = task that's currently in progress, 0 meaning the first one.
 * -1 no task sequence in progress.
 * ```
 * @param ped
 */
export function getSequenceProgress(ped: number): number {
	return _in(0x00a9010c, 0xfe1e3533, ped, _r, _ri); 
}

/**
 * Gets the status of a spesifed script-assigned task on the given ped. The return value is always an int between 0-7.
 * 
 * You can set taskHash to `SCRIPT_TASK_ANY` to check if any task is active, it will return 1 for active, 3 for no active.
 * `SCRIPT_TASK_INVALID` can be similarly used, it returns 7 if there are any active task, and 3 if there are no active tasks.
 * 
 * taskHash list: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
 * 
 * Returns:
 * 
 * ```
 * 0 = WAITING_TO_START_TASK
 * 1 = PERFORMING_TASK
 * 2 = DORMANT_TASK
 * 3 = VACANT_STAGE
 * 7 = TASK_FINISHED_OR_NOT_FOUND
 * ```
 * @param ped
 * @param taskHash
 * @return The status of the script-assigned task.
 */
export function getScriptTaskStatus(ped: number, taskHash: number): number {
	return _in(0x77f1beb8, 0x863288d5, ped, _ch(taskHash), _r, _ri); 
}

/**
 * 
 * @param ped
 * @param signalName
 */
export function getTaskMoveNetworkSignalBool(ped: number, signalName: string): boolean {
	return _in(0xa7ffba49, 0x8e4aaf67, ped, _ts(signalName), _r); 
}

/**
 * 
 * @param coverpoint
 */
export function getScriptedCoverPointCoords(coverpoint: number): Vector3 {
	return _in(0x594a1028, 0xfc2a3e85, coverpoint, _r, _rv); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param signalName
 */
export function GetTaskMoveNetworkSignalFloat(ped: number, signalName: string): number {
	return _in(0x44ab0b3a, 0xfecce242, ped, _ts(signalName), _r, _rf); 
}

/**
 * 
 * @param ped
 * @param eventName
 */
export function getTaskMoveNetworkEvent(ped: number, eventName: string): boolean {
	return _in(0xb4f47213, 0xdf45a64c, ped, _ts(eventName), _r); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleWaypointProgress(vehicle: number): number {
	return _in(0x9824cff8, 0xfc66e159, vehicle, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getTaskMoveNetworkState(ped: number): string {
	return _in(0x717e4d1f, 0x2048376d, ped, _r, _s); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleWaypointTargetPoint(vehicle: number): number {
	return _in(0x416b62ac, 0x8b9e5bbd, vehicle, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function isDrivebyTaskUnderneathDrivingTask(ped: number): boolean {
	return _in(0x8785e6e4, 0x0c7a8818, ped, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function getWaypointDistanceAlongRoute(p0: string, p1: number): number {
	return _in(0xa5b76905, 0x8763e497, _ts(p0), p1, _r, _rf); 
}

/**
 * 
 * @param ped
 */
export function isMountedWeaponTaskUnderneathDrivingTask(ped: number): boolean {
	return _in(0xa320ef04, 0x6186fa3b, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isMoveBlendRatioRunning(ped: number): boolean {
	return _in(0xd4d8636c, 0x0199a939, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isMoveBlendRatioSprinting(ped: number): boolean {
	return _in(0x24a2ad74, 0xfa9814e2, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isMoveBlendRatioStill(ped: number): boolean {
	return _in(0x349ce7b5, 0x6dafd95c, ped, _r); 
}

/**
 * When passing a ped parameter, the function returns true if the ped is currently in any scenario.
 * @param ped
 */
export function isPedActiveInScenario(ped: number): boolean {
	return _in(0xaa135f94, 0x82c82cc3, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isMoveBlendRatioWalking(ped: number): boolean {
	return _in(0xf133bbbe, 0x91e1691f, ped, _r); 
}

/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * @param ped
 */
export function isPedBeingArrested(ped: number): boolean {
	return _in(0x90a09f3a, 0x45fed688, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedCuffed(ped: number): boolean {
	return _in(0x74e559b3, 0xbc910685, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedGettingUp(ped: number): boolean {
	return _in(0x2a74e1d5, 0xf2f00eec, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedPlayingBaseClipInScenario(ped: number): boolean {
	return _in(0x621c6e47, 0x29388e41, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedRunningArrestTask(ped: number): boolean {
	return _in(0x3dc52677, 0x769b4ae0, ped, _r); 
}

/**
 * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
 * @param ped
 * @return Returns `true` if the ped is in [writhe](https://dictionary.cambridge.org/dictionary/english/writhe), `false` otherwise.
 */
export function isPedInWrithe(ped: number): boolean {
	return _in(0xdeb6d521, 0x26e7d640, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedStill(ped: number): boolean {
	return _in(0xac29253e, 0xef8f0180, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedRunning(ped: number): boolean {
	return _in(0xc5286ffc, 0x176f28a2, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedWalking(ped: number): boolean {
	return _in(0xde4c184b, 0x2b9b071a, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPedSprinting(ped: number): boolean {
	return _in(0x57e457cd, 0x2c0fc168, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function isPlayingPhoneGestureAnim(ped: number): boolean {
	return _in(0xb8ebb1e9, 0xd3588c10, ped, _r); 
}

/**
 * ```
 * What's strafing?
 * ```
 * @param ped
 */
export function isPedStrafing(ped: number): boolean {
	return _in(0xe45b7f22, 0x2de47e09, ped, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function isScenarioOccupied(p0: number, p1: number, p2: number, p3: number, p4: boolean): boolean {
	return _in(0x788756d7, 0x3ac2e07c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _r); 
}

/**
 * ```
 * Occurrences in the b617d scripts:
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "BLIMP",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "KORTZ_SECURITY",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5",
 * "Rampage1",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE"
 * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 * ```
 * @param scenarioGroup
 */
export function isScenarioGroupEnabled(scenarioGroup: string): boolean {
	return _in(0x367a09de, 0xd4e05b99, _ts(scenarioGroup), _r); 
}

/**
 * ```
 * Occurrences in the b617d scripts:
 * "PROP_HUMAN_SEAT_CHAIR",
 * "WORLD_HUMAN_DRINKING",
 * "WORLD_HUMAN_HANG_OUT_STREET",
 * "WORLD_HUMAN_SMOKING",
 * "WORLD_MOUNTAIN_LION_WANDER",
 * "WORLD_HUMAN_DRINKING"
 * Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 * ```
 * @param scenarioType
 */
export function isScenarioTypeEnabled(scenarioType: string): boolean {
	return _in(0x3a815db3, 0xea088722, _ts(scenarioType), _r); 
}

/**
 * 
 * @param ped
 */
export function isTaskMoveNetworkActive(ped: number): boolean {
	return _in(0x921ce12c, 0x489c4c41, ped, _r); 
}

/**
 * 
 * @param p0
 */
export function isWaypointPlaybackGoingOnForPed(p0: any): boolean {
	return _in(0xe03b3f2d, 0x3dc59b64, p0, _r); 
}

/**
 * 
 * @param ped
 */
export function isTaskMoveNetworkReadyForTransition(ped: number): boolean {
	return _in(0x30ed88d5, 0xe0c56a37, ped, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isWaypointPlaybackGoingOnForVehicle(vehicle: number): boolean {
	return _in(0xf5134943, 0xea29868c, vehicle, _r); 
}

/**
 * ```
 * The patrol route name must starts with "miss_" to be properly created.
 * 
 * patrolRoutes found in the b617d scripts:
 * "miss_Ass0",
 * "miss_Ass1",
 * "miss_Ass2",
 * "miss_Ass3",
 * "miss_Ass4",
 * "miss_Ass5",
 * "miss_Ass6",
 * "MISS_PATROL_6",
 * "MISS_PATROL_7",
 * "MISS_PATROL_8",
 * "MISS_PATROL_9",
 * "miss_Tower_01",
 * "miss_Tower_02",
 * "miss_Tower_03",
 * "miss_Tower_04",
 * "miss_Tower_05",
 * "miss_Tower_06",
 * "miss_Tower_07",
 * "miss_Tower_08",
 * "miss_Tower_10"
 * ```
 * @param patrolRoute
 */
export function openPatrolRoute(patrolRoute: string): void {
	return _in(0xa36bfb5e, 0xe89f3d82, _ts(patrolRoute)); 
}

/**
 * 
 * @param ped
 */
export function pedHasUseScenarioTask(ped: number): boolean {
	return _in(0x295e3cce, 0xc879ccd7, ped, _r); 
}

/**
 * 
 * @param taskSequenceId
 */
export function openSequenceTask(): void {
	return _in(0xe8854a43, 0x26b9e12b, _ii(taskSequenceId)); 
}

/**
 * 
 */
export function removeAllCoverBlockingAreas(): void {
	return _in(0xdb6708c0, 0xb46f56d8); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param ped
 * @param animDict
 * @param animName
 */
export function playAnimOnRunningScenario(ped: number, animDict: string, animName: string): void {
	return _in(0x74804046, 0x0f8df5dc, ped, _ts(animDict), _ts(animName)); 
}

/**
 * 
 * @param name
 */
export function removeWaypointRecording(name: string): void {
	return _in(0xff1b8b4a, 0xa1c25dc8, _ts(name)); 
}

/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * Max number of loaded recordings is 32.
 * ```
 * @param name
 */
export function requestWaypointRecording(name: string): void {
	return _in(0x9eefb62e, 0xb27b5792, _ts(name)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function playEntityScriptedAnim(p0: any, p4: number, p5: number): void {
	return _in(0x77a1eec5, 0x47e7fcf1, p0, _i, _i, _i, _fv(p4), _fv(p5)); 
}

/**
 * 
 */
export function resetExclusiveScenarioGroup(): void {
	return _in(0x4202bbcb, 0x8684563d); 
}

/**
 * 
 * @param coverpoint
 */
export function removeCoverPoint(coverpoint: number): void {
	return _in(0xae287c92, 0x3d891715, coverpoint); 
}

/**
 * 
 * @param ped
 * @param name
 * @return Technically a `void`. Scripts treat this as a boolean, but the game never sets the result, so it will return the ped handle instead.
 */
export function requestTaskMoveNetworkStateTransition(ped: number, name: string): boolean {
	return _in(0xd01015c7, 0x316ae176, ped, _ts(name), _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setAnimLooped(p0: any, p1: boolean, p2: any, p3: boolean): void {
	return _in(0x70033c3c, 0xc29a1ff4, p0, p1, p2, p3); 
}

/**
 * 
 */
export function resetScenarioGroupsEnabled(): void {
	return _in(0xdd902d03, 0x49afad3a); 
}

/**
 * 
 */
export function resetScenarioTypesEnabled(): void {
	return _in(0x0d40ee2a, 0x7f2b2d6d); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param entity
 * @param p1
 * @param p2
 * @param p3
 */
export function setAnimPhase(entity: number, p1: number, p2: any, p3: boolean): void {
	return _in(0xddf3cb5a, 0x0a4c0b49, entity, _fv(p1), p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setAnimRate(p0: any, p1: number, p2: any, p3: boolean): void {
	return _in(0x032d49c5, 0xe359c847, p0, _fv(p1), p2, p3); 
}

/**
 * 
 * @param driver
 * @param cruiseSpeed
 */
export function setDriveTaskCruiseSpeed(driver: number, cruiseSpeed: number): void {
	return _in(0x5c9b84bd, 0x7d31d908, driver, _fv(cruiseSpeed)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function setAnimWeight(p0: any, p1: number, p2: any, p3: any, p4: boolean): void {
	return _in(0x207f1a47, 0xc0342f48, p0, _fv(p1), p2, p3, p4); 
}

/**
 * ```
 * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
 * ```
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 */
export function setDrivebyTaskTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number): void {
	return _in(0xe5b30211, 0x4d8162ee, shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * Groups found in the scripts used with this native:
 * "AMMUNATION",
 * "QUARRY",
 * "Triathlon_1",
 * "Triathlon_2",
 * "Triathlon_3"
 * ```
 * @param scenarioGroup
 */
export function setExclusiveScenarioGroup(scenarioGroup: string): void {
	return _in(0x535e97e1, 0xf7fc0c6a, _ts(scenarioGroup)); 
}

/**
 * ```
 * This native is used to set the driving style for specific ped.
 * Driving styles id seems to be:
 * 786468
 * 262144
 * 786469
 * http://gtaforums.com/topic/822314-guide-driving-styles/
 * ```
 * @param ped
 * @param drivingStyle
 */
export function setDriveTaskDrivingStyle(ped: number, drivingStyle: number): void {
	return _in(0xdace1be3, 0x7d88af67, ped, drivingStyle); 
}

/**
 * ```
 * Birds will try to reach the given height.
 * ```
 * @param height
 */
export function setGlobalMinBirdFlightHeight(height: number): void {
	return _in(0x6c6b1485, 0x86f934f7, _fv(height)); 
}

/**
 * 
 * @param p0
 * @param p1
 */
export function setDriveTaskMaxCruiseSpeed(p0: any, p1: number): void {
	return _in(0x404a5aa9, 0xb9f0b746, p0, _fv(p1)); 
}

/**
 * **This native does absolutely nothing, just a nullsub**
 * @param p0
 */
export function setNextDesiredMoveState(p0: number): void {
	return _in(0xf1b9f16e, 0x89e2c93a, _fv(p0)); 
}

/**
 * 
 * @param ped
 * @param duration
 * @param p2
 * @param p3
 */
export function setHighFallTask(ped: number, duration: any, p2: any, p3: any): void {
	return _in(0x8c825bdc, 0x7741d37c, ped, duration, p2, p3); 
}

/**
 * 
 * @param ped
 * @param thrust
 */
export function setParachuteTaskThrust(ped: number, thrust: number): void {
	return _in(0x0729bac1, 0xb8c64317, ped, _fv(thrust)); 
}

/**
 * ```
 * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 7: Any p6
 * NativeDB Added Parameter 8: Any p7
 * ```
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 */
export function setMountedWeaponTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number): void {
	return _in(0xccd89219, 0x2c6d2bb9, shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * Appears only in fm_mission_controller and used only 3 times.
 * ped was always PLAYER_PED_ID()
 * p1 was always true
 * p2 was always true
 * ```
 * @param ped
 * @param p1
 * @param p2
 */
export function setPedCanPlayAmbientIdles(ped: number, p1: boolean, p2: boolean): void {
	return _in(0x8fd89a62, 0x40813fd0, ped, p1, p2); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function setParachuteTaskTarget(ped: number, x: number, y: number, z: number): void {
	return _in(0xc313379a, 0xf0fceda7, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param ped
 * @param avoidFire
 */
export function setPedPathAvoidFire(ped: number, avoidFire: boolean): void {
	return _in(0x4455517b, 0x28441e60, ped, avoidFire); 
}

/**
 * 
 * @param ped
 * @param Toggle
 */
export function setPedPathCanDropFromHeight(ped: number, Toggle: boolean): void {
	return _in(0xe361c5c7, 0x1c431a4f, ped, Toggle); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function setPedDesiredMoveBlendRatio(ped: number, p1: number): void {
	return _in(0x1e982ac8, 0x716912c5, ped, _fv(p1)); 
}

/**
 * 
 * @param ped
 * @param mayEnterWater
 */
export function setPedPathMayEnterWater(ped: number, mayEnterWater: boolean): void {
	return _in(0xf35425a4, 0x204367ec, ped, mayEnterWater); 
}

/**
 * 
 * @param ped
 * @param Toggle
 */
export function setPedPathCanUseClimbovers(ped: number, Toggle: boolean): void {
	return _in(0x8e06a6fe, 0x76c9eff4, ped, Toggle); 
}

/**
 * 
 * @param ped
 * @param avoidWater
 */
export function setPedPathPreferToAvoidWater(ped: number, avoidWater: boolean): void {
	return _in(0x38fe1ec7, 0x3743793c, ped, avoidWater); 
}

/**
 * ```
 * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
 * ```
 * @param ped
 * @param modifier
 */
export function setPedPathClimbCostModifier(ped: number, modifier: number): void {
	return _in(0x88e32db8, 0xc1a4aa4b, ped, _fv(modifier)); 
}

/**
 * 
 * @param ped
 * @param Toggle
 */
export function setPedPathCanUseLadders(ped: number, Toggle: boolean): void {
	return _in(0x77a5b103, 0xc87f476e, ped, Toggle); 
}

/**
 * ```
 * Occurrences in the b617d scripts: pastebin.com/Tvg2PRHU
 * ```
 * @param scenarioGroup
 * @param p1
 */
export function setScenarioGroupEnabled(scenarioGroup: string, p1: boolean): void {
	return _in(0x02c8e5b4, 0x9848664e, _ts(scenarioGroup), p1); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setPedWaypointRouteOffset(p0: any, p1: any, p2: any, p3: any): any {
	return _in(0xed98e10b, 0x0afce4b4, p0, p1, p2, p3, _r, _ri); 
}

/**
 * ```
 * seems to enable/disable specific scenario-types from happening in the game world.
 * Here are some scenario types from the scripts:
 * "WORLD_MOUNTAIN_LION_REST"
 * "WORLD_MOUNTAIN_LION_WANDER"
 * "DRIVE"
 * "WORLD_VEHICLE_POLICE_BIKE"
 * "WORLD_VEHICLE_POLICE_CAR"
 * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
 * "WORLD_VEHICLE_DRIVE_SOLO"
 * "WORLD_VEHICLE_BIKER"
 * "WORLD_VEHICLE_DRIVE_PASSENGERS"
 * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
 * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
 * "PROP_HUMAN_SEAT_CHAIR"
 * "WORLD_VEHICLE_ATTRACTOR"
 * "WORLD_HUMAN_LEANING"
 * "WORLD_HUMAN_HANG_OUT_STREET"
 * "WORLD_HUMAN_DRINKING"
 * "WORLD_HUMAN_SMOKING"
 * "WORLD_HUMAN_GUARD_STAND"
 * "WORLD_HUMAN_CLIPBOARD"
 * "WORLD_HUMAN_HIKER"
 * "WORLD_VEHICLE_EMPTY"
 * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
 * "WORLD_HUMAN_PAPARAZZI"
 * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
 * "WORLD_VEHICLE_PARK_PARALLEL"
 * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
 * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
 * "WORLD_VEHICLE_TRUCK_LOGS"
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 * ```
 * @param scenarioType
 * @param toggle
 */
export function setScenarioTypeEnabled(scenarioType: string, toggle: boolean): void {
	return _in(0xeb47ec4e, 0x34fb7ee1, _ts(scenarioType), toggle); 
}

/**
 * 
 * @param ped
 * @param signalName
 * @param value
 */
export function setTaskMoveNetworkSignalBool(ped: number, signalName: string, value: boolean): void {
	return _in(0xb0a6cfd2, 0xc69c1088, ped, _ts(signalName), value); 
}

/**
 * ```
 * p0 - PLAYER::PLAYER_PED_ID();
 * p1 - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
 * p2 - From what i can see it goes up to 1f (maybe).
 * -LcGamingHD
 * Example: TASK::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
 * ```
 * @param ped
 * @param signalName
 * @param value
 */
export function setTaskMoveNetworkSignalFloat(ped: number, signalName: string, value: number): void {
	return _in(0xd5bb4025, 0xae449a4e, ped, _ts(signalName), _fv(value)); 
}

/**
 * 
 * @param taskSequenceId
 * @param repeat
 */
export function setSequenceToRepeat(taskSequenceId: number, repeat: boolean): void {
	return _in(0x58c70cf3, 0xa41e4ae7, taskSequenceId, repeat); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param signalName
 * @param value
 */
export function SetTaskMoveNetworkSignalFloat2(ped: number, signalName: string, value: number): void {
	return _in(0x373ef409, 0xb82697a3, ped, _ts(signalName), _fv(value)); 
}

/**
 * 
 * @param ped
 * @param distance
 */
export function setTaskVehicleChaseIdealPursuitDistance(ped: number, distance: number): void {
	return _in(0x639b642f, 0xacbe4edd, ped, _fv(distance)); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param ped
 * @param animDictionary
 * @param animationName
 * @param animExitSpeed
 */
export function stopAnimTask(ped: number, animDictionary: string, animationName: string, animExitSpeed: number): void {
	return _in(0x97ff36a1, 0xd40ea00a, ped, _ts(animDictionary), _ts(animationName), _fv(animExitSpeed)); 
}

/**
 * ```
 * * Flag 1: Aggressive ramming of suspect
 * * Flag 2: Ram attempts
 * * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
 * * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
 * * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
 * ```
 * @param ped
 * @param flag
 * @param set
 */
export function setTaskVehicleChaseBehaviorFlag(ped: number, flag: number, set: boolean): void {
	return _in(0xcc665aac, 0x360d31e7, ped, flag, set); 
}

/**
 * ```
 * Looks like p1 may be a flag, still need to do some research, though.
 * ```
 * @param ped
 * @param p1
 * @param p2
 */
export function stopAnimPlayback(ped: number, p1: number, p2: boolean): void {
	return _in(0xee08c992, 0xd238c5d1, ped, p1, p2); 
}

/**
 * 
 * @param ped
 * @param ped2
 */
export function TaskAgitatedAction(ped: number, ped2: number): void {
	return _in(0x19d1b791, 0xcb3670fe, ped, ped2); 
}

/**
 * ```
 * Makes the specified ped achieve the specified heading.
 * pedHandle: The handle of the ped to assign the task to.
 * heading: The desired heading.
 * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
 * ```
 * @param ped
 * @param heading
 * @param timeout
 */
export function taskAchieveHeading(ped: number, heading: number, timeout: number): void {
	return _in(0x93b93a37, 0x987f1f3d, ped, _fv(heading), timeout); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param time
 * @param p5
 * @param p6
 */
export function taskAimGunAtCoord(ped: number, x: number, y: number, z: number, time: number, p5: boolean, p6: boolean): void {
	return _in(0x6671f3ee, 0xc681bda1, ped, _fv(x), _fv(y), _fv(z), time, p5, p6); 
}

/**
 * 
 * @param ped
 * @param scriptTask
 * @param p2
 * @param p3
 */
export function taskAimGunScripted(ped: number, scriptTask: number, p2: boolean, p3: boolean): void {
	return _in(0x7a192be1, 0x6d373d00, ped, _ch(scriptTask), p2, p3); 
}

/**
 * ```
 * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * ```
 * @param ped
 * @param entity
 * @param duration
 * @param p3
 */
export function taskAimGunAtEntity(ped: number, entity: number, duration: number, p3: boolean): void {
	return _in(0x9b53bb6e, 0x8943af53, ped, entity, duration, p3); 
}

/**
 * ```
 * Example from "me_amanda1.ysc.c4":
 * TASK::TASK_ARREST_PED(l_19F  -- [[ This is a Ped ]]  , PLAYER::PLAYER_PED_ID());
 * Example from "armenian1.ysc.c4":
 * if (!PED::IS_PED_INJURED(l_B18[0 -- [[1]] ])) {
 * TASK::TASK_ARREST_PED(l_B18[0 -- [[1]] ], PLAYER::PLAYER_PED_ID());
 * }
 * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
 * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
 * ```
 * @param ped
 * @param target
 */
export function taskArrestPed(ped: number, target: number): void {
	return _in(0xf3b9a78a, 0x178572b1, ped, target); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function taskAimGunScriptedWithTarget(p0: any, p1: any, p2: number, p3: number, p4: number, p5: any, p6: boolean, p7: boolean): void {
	return _in(0x8605af0d, 0xe8b3a5ac, p0, p1, _fv(p2), _fv(p3), _fv(p4), p5, p6, p7); 
}

/**
 * ```
 * You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
 * Working example
 * float vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
 * TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
 * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
 * ```
 * @param pedDriver
 * @param boat
 * @param p2
 * @param p3
 * @param x
 * @param y
 * @param z
 * @param p7
 * @param maxSpeed
 * @param drivingStyle
 * @param p10
 * @param p11
 */
export function taskBoatMission(pedDriver: number, boat: number, p2: any, p3: any, x: number, y: number, z: number, p7: any, maxSpeed: number, drivingStyle: number, p10: number, p11: any): void {
	return _in(0x15c86013, 0x127ce63f, pedDriver, boat, p2, p3, _fv(x), _fv(y), _fv(z), p7, _fv(maxSpeed), drivingStyle, _fv(p10), p11); 
}

/**
 * ```
 * p2 tend to be 16, 17 or 1
 * p3 to p7 tend to be 0.0
 * ```
 * @param ped
 * @param target
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function taskChatToPed(ped: number, target: number, p2: any, p3: number, p4: number, p5: number, p6: number, p7: number): void {
	return _in(0x8c338e02, 0x63e4fd19, ped, target, p2, _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7)); 
}

/**
 * 
 * @param p0
 */
export function taskClearDefensiveArea(p0: any): void {
	return _in(0x95a6c46a, 0x31d1917d, p0); 
}

/**
 * ```
 * Climbs or vaults the nearest thing.
 * ```
 * @param ped
 * @param unused
 */
export function taskClimb(ped: number, unused: boolean): void {
	return _in(0x89d9fcc2, 0x435112f1, ped, unused); 
}

/**
 * ```
 * Despite its name, it only attacks ONE hated target. The one closest hated target.
 * p2 seems to be always 0
 * ```
 * @param ped
 * @param radius
 * @param p2
 */
export function taskCombatHatedTargetsAroundPed(ped: number, radius: number, p2: number): void {
	return _in(0x7bf835bb, 0x9e2698c8, ped, _fv(radius), p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function taskCombatHatedTargetsAroundPedTimed(p0: any, p1: number, p2: any, p3: any): void {
	return _in(0x2bba30b8, 0x54534a0c, p0, _fv(p1), p2, p3); 
}

/**
 * ```
 * Not clear what it actually does, but here's how script uses it -
 * if (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)
 * {
 * if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))
 * {
 * TASK::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());
 * }
 * ...
 * }
 * Another one where it doesn't "look" at current player -
 * TASK::TASK_PLAY_ANIM(l_3ED, "missheist_agency2aig_2", "look_at_phone_a", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);
 * PED::_2208438012482A1A(l_3ED, 0, 0);
 * TASK::TASK_CLEAR_LOOK_AT(l_3ED);
 * ```
 * @param ped
 */
export function taskClearLookAt(ped: number): void {
	return _in(0x0f804f1d, 0xb19b9689, ped); 
}

/**
 * ```
 * Makes the specified ped attack the target ped.
 * p2 should be 0
 * p3 should be 16
 * ```
 * @param ped
 * @param targetPed
 * @param p2
 * @param p3
 */
export function taskCombatPed(ped: number, targetPed: number, p2: number, p3: number): void {
	return _in(0xf166e484, 0x07bac484, ped, targetPed, p2, p3); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function taskClimbLadder(ped: number, p1: number): void {
	return _in(0xb6c987f9, 0x285a3814, ped, p1); 
}

/**
 * 
 * @param p0
 * @param ped
 * @param p2
 * @param p3
 */
export function taskCombatPedTimed(p0: any, ped: number, p2: number, p3: any): void {
	return _in(0x944f30dc, 0xb7096bde, p0, ped, p2, p3); 
}

/**
 * ```
 * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 */
export function taskCombatHatedTargetsInArea(ped: number, x: number, y: number, z: number, radius: number, p5: any): void {
	return _in(0x4cf5f55d, 0xac3280a0, ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5); 
}

/**
 * The ped will act like NPC's involved in a gunfight. The ped will squat down with their heads held in place and look around.
 * @param ped
 * @param duration
 */
export function taskCower(ped: number, duration: number): void {
	return _in(0x3eb1fe9e, 0x8e908e15, ped, duration); 
}

/**
 * ```
 * Example:
 * TASK::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
 * Needs working example. Doesn't seem to do anything.
 * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
 * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
 * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
 * ```
 * @param driverPed
 * @param targetPed
 * @param targetVehicle
 * @param targetX
 * @param targetY
 * @param targetZ
 * @param distanceToShoot
 * @param pedAccuracy
 * @param p8
 * @param firingPattern
 */
export function taskDriveBy(driverPed: number, targetPed: number, targetVehicle: number, targetX: number, targetY: number, targetZ: number, distanceToShoot: number, pedAccuracy: number, p8: boolean, firingPattern: number): void {
	return _in(0x2f8af0e8, 0x2773a171, driverPed, targetPed, targetVehicle, _fv(targetX), _fv(targetY), _fv(targetZ), _fv(distanceToShoot), pedAccuracy, p8, _ch(firingPattern)); 
}

/**
 * 
 * @param vehicle
 */
export function taskEveryoneLeaveVehicle(vehicle: number): void {
	return _in(0x7f93691a, 0xb4b92272, vehicle); 
}

/**
 * ```
 * speed 1.0 = walk, 2.0 = run
 * p5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle
 * p6 is always 0
 * ```
 * @param ped
 * @param vehicle
 * @param timeout
 * @param seatIndex
 * @param speed
 * @param flag
 * @param p6
 */
export function taskEnterVehicle(ped: number, vehicle: number, timeout: number, seatIndex: number, speed: number, flag: number, p6: any): void {
	return _in(0xc20e50aa, 0x46d09ca8, ped, vehicle, timeout, seatIndex, _fv(speed), flag, p6); 
}

/**
 * Adds a new point to the current point route; a maximum of 8 points can be added.
 * 
 * Call [TASK_FLUSH_ROUTE](#\_0x841142A1376E9006) before the first call to this. Call [TASK_FOLLOW_POINT_ROUTE](#\_0x595583281858626E) to make the Ped go the route.
 * @param x
 * @param y
 * @param z
 */
export function taskExtendRoute(x: number, y: number, z: number): void {
	return _in(0x1e788977, 0x8264843a, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function taskExitCover(p0: any, p1: any, p2: number, p3: number, p4: number): void {
	return _in(0x79b258e3, 0x97854d29, p0, p1, _fv(p2), _fv(p3), _fv(p4)); 
}

/**
 * ```
 * If no timeout, set timeout to -1.
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param timeout
 * @param stoppingRange
 * @param persistFollowing
 * @param unk
 */
export function taskFollowNavMeshToCoord(ped: number, x: number, y: number, z: number, speed: number, timeout: number, stoppingRange: number, persistFollowing: boolean, unk: number): void {
	return _in(0x15d3a79d, 0x4e44b913, ped, _fv(x), _fv(y), _fv(z), _fv(speed), timeout, _fv(stoppingRange), persistFollowing, _fv(unk)); 
}

/**
 * Clears the current point route. Call this before [TASK_EXTEND_ROUTE](#\_0x1E7889778264843A) and [TASK_FOLLOW_POINT_ROUTE](#\_0x595583281858626E).
 */
export function taskFlushRoute(): void {
	return _in(0x841142a1, 0x376e9006); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param timeout
 * @param unkFloat
 * @param unkInt
 * @param unkX
 * @param unkY
 * @param unkZ
 * @param unk_40000f
 */
export function taskFollowNavMeshToCoordAdvanced(ped: number, x: number, y: number, z: number, speed: number, timeout: number, unkFloat: number, unkInt: number, unkX: number, unkY: number, unkZ: number, unk_40000f: number): void {
	return _in(0x17f58b88, 0xd085dbac, ped, _fv(x), _fv(y), _fv(z), _fv(speed), timeout, _fv(unkFloat), unkInt, _fv(unkX), _fv(unkY), _fv(unkZ), _fv(unk_40000f)); 
}

/**
 * ```
 * p6 always -1
 * p7 always 10.0
 * p8 always 1
 * ```
 * @param ped
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param movementSpeed
 * @param timeout
 * @param stoppingRange
 * @param persistFollowing
 */
export function taskFollowToOffsetOfEntity(ped: number, entity: number, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void {
	return _in(0x304ae42e, 0x357b8c7e, ped, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(movementSpeed), timeout, _fv(stoppingRange), persistFollowing); 
}

/**
 * ```
 * MulleKD19: Makes the ped go on the created point route.
 * ped: The ped to give the task to.
 * speed: The speed to move at in m/s.
 * int: Unknown. Can be 0, 1, 2 or 3.
 * Example:
 * TASK_FLUSH_ROUTE();
 * TASK_EXTEND_ROUTE(0f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 10f, 70f);
 * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
 * ```
 * @param ped
 * @param speed
 * @param unknown
 */
export function taskFollowPointRoute(ped: number, speed: number, unknown: number): void {
	return _in(0x59558328, 0x1858626e, ped, _fv(speed), unknown); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function taskFollowWaypointRecording(p0: any, p1: any, p2: any, p3: any, p4: any): void {
	return _in(0x07595918, 0x19534f7b, p0, p1, p2, p3, p4); 
}

/**
 * See [`FORCE_PED_MOTION_STATE`](#\_0xF28965D04F570DCA)
 * @param ped
 * @param state
 * @param p2
 */
export function taskForceMotionState(ped: number, state: number, p2: boolean): void {
	return _in(0x4f056e1a, 0xffef17ab, ped, _ch(state), p2); 
}

/**
 * 
 * @param entity1
 * @param entity2
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function taskGoStraightToCoordRelativeToEntity(entity1: number, entity2: number, p2: number, p3: number, p4: number, p5: number, p6: any): void {
	return _in(0x61e360b7, 0xe040d12e, entity1, entity2, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6); 
}

/**
 * 
 * @param ped
 * @param boat
 */
export function taskGetOffBoat(ped: number, boat: number): void {
	return _in(0x9c00e77a, 0xf14b2dff, ped, boat); 
}

/**
 * ```
 * example from fm_mission_controller
 * TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p5
 * @param p6
 * @param walkingStyle
 * @param p8
 */
export function taskGoToCoordAnyMeans(ped: number, x: number, y: number, z: number, speed: number, p5: any, p6: boolean, walkingStyle: number, p8: number): void {
	return _in(0x5bc448cb, 0x78fa3e88, ped, _fv(x), _fv(y), _fv(z), _fv(speed), p5, p6, walkingStyle, _fv(p8)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param timeout
 * @param targetHeading
 * @param distanceToSlide
 */
export function taskGoStraightToCoord(ped: number, x: number, y: number, z: number, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void {
	return _in(0xd76b57b4, 0x4f1e6f8b, ped, _fv(x), _fv(y), _fv(z), _fv(speed), timeout, _fv(targetHeading), _fv(distanceToSlide)); 
}

/**
 * ```
 * NativeDB Added Parameter 13: Any p12
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p5
 * @param p6
 * @param walkingStyle
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export function taskGoToCoordAnyMeansExtraParams(ped: number, x: number, y: number, z: number, speed: number, p5: any, p6: boolean, walkingStyle: number, p8: number, p9: any, p10: any, p11: any): void {
	return _in(0x1dd45f9e, 0xcfdb1bc9, ped, _fv(x), _fv(y), _fv(z), _fv(speed), p5, p6, walkingStyle, _fv(p8), p9, p10, p11); 
}

/**
 * ```
 * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
 * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
 * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
 * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
 * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
 * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
 * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
 * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
 * Example:
 * enum AimFlag
 * {
 * AimAtFocusLocation,
 * AimAtGoToLocation
 * };
 * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
 * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
 * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
 * // 1st example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f  -- [[run]] , true  -- [[shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtGoToLocation, -957453492  -- [[FullAuto pattern]] );
 * // 2nd example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f  -- [[walk]] , false  -- [[don't shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtFocusLocation, -957453492  -- [[FullAuto pattern]] );
 * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
 * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
 * ```
 * @param pedHandle
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param focusLocationX
 * @param focusLocationY
 * @param focusLocationZ
 * @param speed
 * @param shootAtEnemies
 * @param distanceToStopAt
 * @param noRoadsDistance
 * @param unkTrue
 * @param unkFlag
 * @param aimingFlag
 * @param firingPattern
 */
export function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, focusLocationX: number, focusLocationY: number, focusLocationZ: number, speed: number, shootAtEnemies: boolean, distanceToStopAt: number, noRoadsDistance: number, unkTrue: boolean, unkFlag: number, aimingFlag: number, firingPattern: number): void {
	return _in(0xa5554780, 0x1eb331fc, pedHandle, _fv(goToLocationX), _fv(goToLocationY), _fv(goToLocationZ), _fv(focusLocationX), _fv(focusLocationY), _fv(focusLocationZ), _fv(speed), shootAtEnemies, _fv(distanceToStopAt), _fv(noRoadsDistance), unkTrue, unkFlag, aimingFlag, _ch(firingPattern)); 
}

/**
 * ```
 * NativeDB Added Parameter 14: Any p13
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p5
 * @param p6
 * @param walkingStyle
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 */
export function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: number, x: number, y: number, z: number, speed: number, p5: any, p6: boolean, walkingStyle: number, p8: number, p9: any, p10: any, p11: any, p12: any): void {
	return _in(0xb8ecd61f, 0x531a7b02, ped, _fv(x), _fv(y), _fv(z), _fv(speed), p5, p6, walkingStyle, _fv(p8), p9, p10, p11, p12); 
}

/**
 * Will make the ped move to a coordinate while aiming (and optionally shooting) at given coordinates.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param aimAtX
 * @param aimAtY
 * @param aimAtZ
 * @param moveSpeed
 * @param shoot
 * @param p9
 * @param p10
 * @param p11
 * @param flags
 * @param p13
 * @param firingPattern
 */
export function taskGoToCoordWhileAimingAtCoord(ped: number, x: number, y: number, z: number, aimAtX: number, aimAtY: number, aimAtZ: number, moveSpeed: number, shoot: boolean, p9: number, p10: number, p11: boolean, flags: any, p13: boolean, firingPattern: number): void {
	return _in(0x11315ab3, 0x385b8ac0, ped, _fv(x), _fv(y), _fv(z), _fv(aimAtX), _fv(aimAtY), _fv(aimAtZ), _fv(moveSpeed), shoot, _fv(p9), _fv(p10), p11, flags, p13, _ch(firingPattern)); 
}

/**
 * ```
 * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
 * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
 * Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
 * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
 * ```
 * @param entity
 * @param target
 * @param duration
 * @param distance
 * @param speed
 * @param p5
 * @param p6
 */
export function taskGoToEntity(entity: number, target: number, duration: number, distance: number, speed: number, p5: number, p6: number): void {
	return _in(0x6a071245, 0xeb0d1882, entity, target, duration, _fv(distance), _fv(speed), _fv(p5), p6); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
export function taskGoToCoordWhileAimingAtEntity(p0: any, p1: number, p2: number, p3: number, p4: any, p5: number, p6: boolean, p7: number, p8: number, p9: boolean, p10: any, p11: boolean, p12: any, p13: any): void {
	return _in(0xb2a16444, 0xead9ae47, p0, _fv(p1), _fv(p2), _fv(p3), p4, _fv(p5), p6, _fv(p7), _fv(p8), p9, p10, p11, p12, p13); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export function taskGoToEntityWhileAimingAtCoord(p0: any, p1: any, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number, p8: number, p9: boolean, p10: boolean, p11: any): void {
	return _in(0x04701832, 0xb739dce5, p0, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7), _fv(p8), p9, p10, p11); 
}

/**
 * ```
 * eg
 * TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
 * ped = Ped you want to perform this task.
 * target = the Entity they should aim at.
 * distanceToStopAt = distance from the target, where the ped should stop to aim.
 * StartAimingDist = distance where the ped should start to aim.
 * ```
 * @param ped
 * @param target
 * @param distanceToStopAt
 * @param StartAimingDist
 */
export function taskGotoEntityAiming(ped: number, target: number, distanceToStopAt: number, StartAimingDist: number): void {
	return _in(0xa9da48fa, 0xb8a76c12, ped, target, _fv(distanceToStopAt), _fv(StartAimingDist)); 
}

/**
 * 
 * @param ped
 * @param p1
 * @param p2
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export function taskGotoEntityOffset(ped: number, p1: any, p2: any, x: number, y: number, z: number, duration: number): void {
	return _in(0xe39b4ff4, 0xfdebde27, ped, p1, p2, _fv(x), _fv(y), _fv(z), duration); 
}

/**
 * ```
 * shootatEntity:
 * If true, peds will shoot at Entity till it is dead.
 * If false, peds will just walk till they reach the entity and will cease shooting.
 * ```
 * @param ped
 * @param entityToWalkTo
 * @param entityToAimAt
 * @param speed
 * @param shootatEntity
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param firingPattern
 */
export function taskGoToEntityWhileAimingAtEntity(ped: number, entityToWalkTo: number, entityToAimAt: number, speed: number, shootatEntity: boolean, p5: number, p6: number, p7: boolean, p8: boolean, firingPattern: number): void {
	return _in(0x97465886, 0xd35210e9, ped, entityToWalkTo, entityToAimAt, _fv(speed), shootatEntity, _fv(p5), _fv(p6), p7, p8, _ch(firingPattern)); 
}

/**
 * 
 * @param ped
 * @param entity
 * @param duration
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param moveBlendRatio
 * @param useNavmesh
 */
export function taskGotoEntityOffsetXy(ped: number, entity: number, duration: number, xOffset: number, yOffset: number, zOffset: number, moveBlendRatio: number, useNavmesh: boolean): void {
	return _in(0x338e7ef5, 0x2b6095a9, ped, entity, duration, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(moveBlendRatio), useNavmesh); 
}

/**
 * ```
 * p0 - Guessing PedID
 * p1, p2, p3 - XYZ?
 * p4 - ???
 * p5 - Maybe the size of sphere from XYZ?
 * p6 - ???
 * p7, p8, p9 - XYZ again?
 * p10 - Maybe the size of sphere from second XYZ?
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function taskGuardSphereDefensiveArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any, p7: number, p8: number, p9: number, p10: number): void {
	return _in(0xc946fe14, 0xbe0eb5e2, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7), _fv(p8), _fv(p9), _fv(p10)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function taskGuardAssignedDefensiveArea(p0: any, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any): void {
	return _in(0xd2a207ee, 0xbdf9889b, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6); 
}

/**
 * ```
 * Ped pilot should be in a heli.
 * EntityToFollow can be a vehicle or Ped.
 * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
 * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
 * ```
 * @param pilot
 * @param entityToFollow
 * @param x
 * @param y
 * @param z
 */
export function taskHeliChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void {
	return _in(0xac83b1db, 0x38d0ada0, pilot, entityToFollow, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * In the scripts, p3 was always -1.
 * p3 seems to be duration or timeout of turn animation.
 * Also facingPed can be 0 or -1 so ped will just raise hands up.
 * ```
 * @param ped
 * @param duration
 * @param facingPed
 * @param p3
 * @param p4
 */
export function taskHandsUp(ped: number, duration: number, facingPed: number, p3: number, p4: boolean): void {
	return _in(0xf2eab319, 0x79a7f910, ped, duration, facingPed, p3, p4); 
}

/**
 * ```
 * From re_prisonvanbreak:
 * TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function taskGuardCurrentPosition(p0: number, p1: number, p2: number, p3: boolean): void {
	return _in(0x4a58a47a, 0x72e3fcb4, p0, _fv(p1), _fv(p2), p3); 
}

/**
 * ```
 * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
 * v350: Ped ped, bool unused
 * v678: Ped ped, bool unused, bool flag1, bool flag2
 * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * NativeDB Added Parameter 4: Any p3
 * ```
 * @param ped
 * @param unused
 */
export function taskJump(ped: number, unused: boolean): void {
	return _in(0x0ae40861, 0x04e067b1, ped, unused); 
}

/**
 * ```
 * Needs more research.
 * Default value of p13 is -1.0 or 0xBF800000.
 * Default value of p14 is 0.
 * Modified examples from "fm_mission_controller.ysc", line ~203551:
 * TASK::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 10, 10, 5.0, 0);
 * TASK::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 0, ?, 5.0, 4096);
 * int mode seams to set mission type 4 = coords target, 23 = ped target.
 * int 14 set to 32 = ped will land at destination.
 * My findings:
 * mode 4 or 7 forces heli to snap to the heading set
 * 8 makes the heli flee from the ped.
 * 9 circles around ped with angle set
 * 10, 11 normal + imitate ped heading
 * 20 makes the heli land when he's near the ped. It won't resume chasing.
 * 21 emulates an helicopter crash
 * 23 makes the heli circle erratically around ped
 * I change p2 to 'vehicleToFollow' as it seems to work like the task natives to set targets. In the heli_taxi script where as the merryweather heli takes you to your waypoint it has no need to follow a vehicle or a ped, so of course both have 0 set.
 * ```
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param maxSpeed
 * @param landingRadius
 * @param targetHeading
 * @param unk1
 * @param unk2
 * @param unk3
 * @param landingFlags
 */
export function taskHeliMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, maxSpeed: number, landingRadius: number, targetHeading: number, unk1: number, unk2: number, unk3: number, landingFlags: number): void {
	return _in(0xdad029e1, 0x87a2beb4, pilot, aircraft, targetVehicle, targetPed, _fv(destinationX), _fv(destinationY), _fv(destinationZ), missionFlag, _fv(maxSpeed), _fv(landingRadius), _fv(targetHeading), unk1, unk2, _fv(unk3), landingFlags); 
}

/**
 * 
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param p5
 * @param p6
 */
export function taskLookAtCoord(entity: number, x: number, y: number, z: number, duration: number, p5: any, p6: any): void {
	return _in(0x6fa46612, 0x594f7973, entity, _fv(x), _fv(y), _fv(z), duration, p5, p6); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param pilot
 * @param heli1
 * @param heli2
 * @param p3
 * @param p4
 * @param p5
 */
export function TaskHeliEscortHeli(pilot: number, heli1: number, heli2: number, p3: number, p4: number, p5: number): void {
	return _in(0xb3855233, 0x25077210, pilot, heli1, heli2, _fv(p3), _fv(p4), _fv(p5)); 
}

/**
 * ```
 * param3: duration in ms, use -1 to look forever
 * param4: using 2048 is fine
 * param5: using 3 is fine
 * ```
 * @param ped
 * @param lookAt
 * @param duration
 * @param unknown1
 * @param unknown2
 */
export function taskLookAtEntity(ped: number, lookAt: number, duration: number, unknown1: number, unknown2: number): void {
	return _in(0x69f4be8c, 0x8cc4796c, ped, lookAt, duration, unknown1, unknown2); 
}

/**
 * Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\_0xD3DBCE61A490BE02)
 * @param ped
 * @param p1
 * @param flags
 */
export function taskLeaveAnyVehicle(ped: number, p1: number, flags: number): void {
	return _in(0x504d54df, 0x3f6f2247, ped, p1, flags); 
}

/**
 * ```
 * Flags from decompiled scripts:
 * 0 = normal exit and closes door.
 * 1 = normal exit and closes door.
 * 16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)
 * 64 = normal exit and closes door, maybe a bit slower animation than 0.
 * 256 = normal exit but does not close the door.
 * 4160 = ped is throwing himself out, even when the vehicle is still.
 * 262144 = ped moves to passenger seat first, then exits normally
 * Others to be tried out: 320, 512, 131072.
 * ```
 * @param ped
 * @param vehicle
 * @param flags
 */
export function taskLeaveVehicle(ped: number, vehicle: number, flags: number): void {
	return _in(0xd3dbce61, 0xa490be02, ped, vehicle, flags); 
}

/**
 * ```
 * Example:
 * TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
 * ```
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param animDict
 * @param flags
 */
export function taskMoveNetworkAdvancedByName(ped: number, p1: string, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: any, p9: number, p10: boolean, animDict: string, flags: number): void {
	return _in(0xd5b35bea, 0x41919acb, ped, _ts(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8, _fv(p9), p10, _ts(animDict), flags); 
}

/**
 * The given ped will try to open the nearest door to 'seat'.
 * 
 * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
 * @param ped
 * @param vehicle
 * @param timeOut
 * @param seat
 * @param speed
 */
export function taskOpenVehicleDoor(ped: number, vehicle: number, timeOut: number, seat: number, speed: number): void {
	return _in(0x965791a9, 0xa488a062, ped, vehicle, timeOut, seat, _fv(speed)); 
}

/**
 * ```
 * Example:
 * TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
 * ```
 * @param ped
 * @param task
 * @param multiplier
 * @param p3
 * @param animDict
 * @param flags
 */
export function taskMoveNetworkByName(ped: number, task: string, multiplier: number, p3: boolean, animDict: string, flags: number): void {
	return _in(0x2d537ba1, 0x94896636, ped, _ts(task), _fv(multiplier), p3, _ts(animDict), flags); 
}

/**
 * ```
 * This function has a third parameter as well (bool).
 * Second parameter is unused.
 * seconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * @param ped
 * @param p1
 */
export function taskParachute(ped: number, p1: boolean): void {
	return _in(0xd2f1c53c, 0x97ee81ab, ped, p1); 
}

/**
 * ```
 * Used only once in the scripts (am_mp_nightclub)
 * ```
 * 
 * ```
 * Used only once in the scripts (am_mp_nightclub)
 * 
 * NativeDB Introduced: v1493
 * ```
 * @param ped
 * @param p1
 * @param data
 * @param p3
 * @param p4
 * @param animDict
 * @param flags
 */
export function TaskMoveNetworkByNameWithInitParams(ped: number, p1: string, p3: number, p4: boolean, animDict: string, flags: number): void {
	return _in(0x3d45b0b3, 0x55c5e0c9, ped, _ts(p1), _i, _fv(p3), p4, _ts(animDict), flags); 
}

/**
 * This tasks the ped to do nothing for the specified amount of miliseconds.
 * This is useful if you want to add a delay between tasks when using a sequence task.
 * @param ped
 * @param ms
 */
export function taskPause(ped: number, ms: number): void {
	return _in(0xe73a266d, 0xb0ca9042, ped, ms); 
}

/**
 * ```
 * makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function taskParachuteToTarget(ped: number, x: number, y: number, z: number): void {
	return _in(0xb33e291a, 0xfa6bd03a, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
 * "miss_Tower_01" (this went from 01 - 10)
 * "miss_Ass0" (0, 4, 6, 3)
 * "MISS_PATROL_8"
 * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
 * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
 * From the scripts
 * TASK::OPEN_PATROL_ROUTE("miss_Ass0");
 * TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0 -- [[3]] ], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1 -- [[3]] ], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2 -- [[3]] ], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_LINK(0, 1);
 * TASK::ADD_PATROL_ROUTE_LINK(1, 2);
 * TASK::ADD_PATROL_ROUTE_LINK(2, 0);
 * TASK::CLOSE_PATROL_ROUTE();
 * TASK::CREATE_PATROL_ROUTE();
 * ```
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function taskPatrol(ped: number, p1: string, p2: any, p3: boolean, p4: boolean): void {
	return _in(0xbda5df49, 0xd080fe4e, ped, _ts(p1), p2, p3, p4); 
}

/**
 * 
 * @param ped
 * @param taskSequenceId
 */
export function taskPerformSequence(ped: number, taskSequenceId: number): void {
	return _in(0x5aba3986, 0xd90d8a3b, ped, taskSequenceId); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param duration
 */
export function taskPedSlideToCoord(ped: number, x: number, y: number, z: number, heading: number, duration: number): void {
	return _in(0xd04fe676, 0x5d990a06, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(duration)); 
}

/**
 * 
 * @param pilot
 * @param entityToFollow
 * @param x
 * @param y
 * @param z
 */
export function taskPlaneChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void {
	return _in(0x2d2386f2, 0x73ff7a25, pilot, entityToFollow, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p5
 * @param p6
 */
export function taskPedSlideToCoordHdgRate(ped: number, x: number, y: number, z: number, heading: number, p5: number, p6: number): void {
	return _in(0x5a4a6a6d, 0x3dc64f52, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(p5), _fv(p6)); 
}

/**
 * 
 * @param ped
 * @param taskSequenceId
 */
export function TaskPerformSequenceLocally(ped: number, taskSequenceId: number): void {
	return _in(0x8c33220c, 0x8d78ca0d, ped, taskSequenceId); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function taskPerformSequenceFromProgress(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x89221b16, 0x730234f0, p0, p1, p2, p3); 
}

/**
 * ```
 * EDITED (7/13/2017)
 * NOTE: If you want air combat, AI::TASK_COMBAT_PED (while your pilot is in an aircraft) also does the same thing as this native.
 * DESCRIPTION:
 * Ever wish your buddy could shoot down one of your enemies for you? Ever wanted an auto-pilot? Well look no further! This is the native for you! (Ped intelligence may vary)
 * USAGE:
 * -- REQUIRED --
 * • pilot = The ped flying the aircraft.
 * • aircraft = The aircraft the pilot is flying
 * -- OPTIONAL -- [atleast 1 must be assigned]
 * • targetVehicle = The vehicle the pilot will target.
 * • targetPed = The ped the pilot will target.
 * • destinationX, destinationY, destinationZ = The location the pilot will target.
 * -- LOGIC --
 * • missionFlag = The type of mission. pastebin.com/R8x73dbv
 * • angularDrag = The higher the value, the slower the plane will rotate. Value ranges from 0 - Infinity.
 * • unk = Set to 0, and you'll be fine.
 * • targetHeading = The target angle (from world space north) that the pilot will try to acheive before executing an attack/landing.
 * • maxZ = Maximum Z coordinate height for flying.
 * • minZ = Minimum Z coordinate height for flying.
 * Z: 2,700 is the default max height a pilot will be able to fly. Anything greater and he will fly downward until reaching 2,700 again.
 * Mission Types (incase you don't like links..):
 * 0 = None
 * 1 = Unk
 * 2 = CTaskVehicleRam
 * 3 = CTaskVehicleBlock
 * 4 = CTaskVehicleGoToPlane
 * 5 = CTaskVehicleStop
 * 6 = CTaskVehicleAttack
 * 7 = CTaskVehicleFollow
 * 8 = CTaskVehicleFleeAirborne
 * 9 = CTaskVehicleCircle
 * 10 = CTaskVehicleEscort
 * 15 = CTaskVehicleFollowRecording
 * 16 = CTaskVehiclePoliceBehaviour
 * 17 = CTaskVehicleCrash
 * Example C#:
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, vehicle, 0, Game.Player.Character, 0, 0, 0, 6, 0f, 0f, 0f, 2500.0f, -1500f);
 * Example C++
 * AI::TASK_PLANE_MISSION(pilot, vehicle, 0, PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_INDEX()), 0, 0, 0, 6, 0.0, 0.0, 0.0, 2500.0, -1500.0);
 * [DEPRECATED] EXAMPLE USAGE:
 * pastebin.com/gx7Finsk
 * ```
 * 
 * ```
 * NativeDB Added Parameter 14: Any p13
 * ```
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param angularDrag
 * @param unk
 * @param targetHeading
 * @param maxZ
 * @param minZ
 */
export function taskPlaneMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, angularDrag: number, unk: number, targetHeading: number, maxZ: number, minZ: number): void {
	return _in(0x23703cd1, 0x54e83b88, pilot, aircraft, targetVehicle, targetPed, _fv(destinationX), _fv(destinationY), _fv(destinationZ), missionFlag, _fv(angularDrag), _fv(unk), _fv(targetHeading), _fv(maxZ), _fv(minZ)); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param ped
 * @param vehicle
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function TaskPlaneGotoPreciseVtol(ped: number, vehicle: number, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void {
	return _in(0xf7f9dcca, 0x89e7505b, ped, vehicle, p2, p3, p4, p5, p6, p7, p8, p9); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 */
export function taskPlantBomb(ped: number, x: number, y: number, z: number, heading: number): void {
	return _in(0x965fec69, 0x1d55e9bf, ped, _fv(x), _fv(y), _fv(z), _fv(heading)); 
}

/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * 
 * ```
 * float blendInSpeed > normal speed is 8.0f
 * ----------------------
 * float blendOutSpeed > normal speed is 8.0f
 * ----------------------
 * int duration: time in millisecond
 * ----------------------
 * -1 _ _ _ _ _ _ _> Default (see flag)
 * 0 _ _ _ _ _ _ _ > Not play at all
 * Small value _ _ > Slow down animation speed
 * Other _ _ _ _ _ > freeze player control until specific time (ms) has
 * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
 * _ _ _ _ _ _ _ _ _ controllable.)
 * int flag:
 * ----------------------
 * enum eAnimationFlags
 * {
 * ANIM_FLAG_NORMAL = 0,
 * ANIM_FLAG_REPEAT = 1,
 * ANIM_FLAG_STOP_LAST_FRAME = 2,
 * ANIM_FLAG_UPPERBODY = 16,
 * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
 * ANIM_FLAG_CANCELABLE = 120,
 * };
 * Odd number : loop infinitely
 * Even number : Freeze at last frame
 * Multiple of 4: Freeze at last frame but controllable
 * 01 to 15 > Full body
 * 10 to 31 > Upper body
 * 32 to 47 > Full body > Controllable
 * 48 to 63 > Upper body > Controllable
 * ...
 * 001 to 255 > Normal
 * 256 to 511 > Garbled
 * ...
 * playbackRate:
 * values are between 0.0 and 1.0
 * lockX:
 * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
 * > 1 for mini@sprunk
 * lockY:
 * 0 in most cases
 * 1 for missfam5_yoga, missfra1mcs_2_crew_react
 * lockZ:
 * 0 for single player
 * Can be 1 but only for MP
 * ```
 * @param ped
 * @param animDictionary
 * @param animationName
 * @param blendInSpeed
 * @param blendOutSpeed
 * @param duration
 * @param flag
 * @param playbackRate
 * @param lockX
 * @param lockY
 * @param lockZ
 */
export function taskPlayAnim(ped: number, animDictionary: string, animationName: string, blendInSpeed: number, blendOutSpeed: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void {
	return _in(0xea47fe37, 0x19165b94, ped, _ts(animDictionary), _ts(animationName), _fv(blendInSpeed), _fv(blendOutSpeed), duration, flag, _fv(playbackRate), lockX, lockY, lockZ); 
}

/**
 * 
 * @param pilot
 * @param plane
 * @param runwayStartX
 * @param runwayStartY
 * @param runwayStartZ
 * @param runwayEndX
 * @param runwayEndY
 * @param runwayEndZ
 */
export function taskPlaneLand(pilot: number, plane: number, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void {
	return _in(0xbf19721f, 0xa34d32c0, pilot, plane, _fv(runwayStartX), _fv(runwayStartY), _fv(runwayStartZ), _fv(runwayEndX), _fv(runwayEndY), _fv(runwayEndZ)); 
}

/**
 * 
 * @param pilot
 * @param aircraft
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function TaskPlaneTaxi(pilot: number, aircraft: number, p2: any, p3: any, p4: any, p5: any, p6: any): void {
	return _in(0x92c360b5, 0xf15d2302, pilot, aircraft, p2, p3, p4, p5, p6); 
}

/**
 * ```
 * Example from the scripts:
 * TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
 * =========================================================
 * ^^ No offense, but Idk how that would really help anyone.
 * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
 * Known boneMaskTypes'
 * "BONEMASK_HEADONLY"
 * "BONEMASK_HEAD_NECK_AND_ARMS"
 * "BONEMASK_HEAD_NECK_AND_L_ARM"
 * "BONEMASK_HEAD_NECK_AND_R_ARM"
 * p4 known args - 0.0f, 0.5f, 0.25f
 * p5 known args - 0.0f, 0.25f
 * p6 known args - 1 if a global if check is passed.
 * p7 known args - 1 if a global if check is passed.
 * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
 * =========================================================
 * ```
 * @param ped
 * @param animDict
 * @param animation
 * @param boneMaskType
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function taskPlayPhoneGestureAnimation(ped: number, animDict: string, animation: string, boneMaskType: string, p4: number, p5: number, p6: boolean, p7: boolean): void {
	return _in(0x8fbb6758, 0xb3b3e9ec, ped, _ts(animDict), _ts(animation), _ts(boneMaskType), _fv(p4), _fv(p5), p6, p7); 
}

/**
 * ```
 * from armenian3.c4
 * TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
 * ```
 * @param ped
 * @param meleeTarget
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function taskPutPedDirectlyIntoMelee(ped: number, meleeTarget: number, p2: number, p3: number, p4: number, p5: boolean): void {
	return _in(0x1c6cd14a, 0x876ffe39, ped, meleeTarget, _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param timeout
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function taskPutPedDirectlyIntoCover(ped: number, x: number, y: number, z: number, timeout: any, p5: boolean, p6: number, p7: boolean, p8: boolean, p9: any, p10: boolean): void {
	return _in(0x4172393e, 0x6be1fece, ped, _fv(x), _fv(y), _fv(z), timeout, p5, _fv(p6), p7, p8, p9, p10); 
}

/**
 * It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
 * 
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * @param ped
 * @param animDict
 * @param animName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param animEnterSpeed
 * @param animExitSpeed
 * @param duration
 * @param flag
 * @param animTime
 * @param p14
 * @param p15
 */
export function taskPlayAnimAdvanced(ped: number, animDict: string, animName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, animEnterSpeed: number, animExitSpeed: number, duration: number, flag: any, animTime: number, p14: any, p15: any): void {
	return _in(0x83cdb10e, 0xa29b370b, ped, _ts(animDict), _ts(animName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(animEnterSpeed), _fv(animExitSpeed), duration, flag, _fv(animTime), p14, p15); 
}

/**
 * Attaches a ped to a rope and allows player control to rappel down a wall.
 * Disables all collisions while on the rope.
 * 
 * NativeDB Introduced: v1868
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param minZ
 * @param ropeId
 * @param clipset
 * @param p10
 */
export function TaskRappelDownWall(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, minZ: number, ropeId: number, clipset: string, p10: any): void {
	return _in(0xeaf66acd, 0xdc794793, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(minZ), ropeId, _ts(clipset), p10); 
}

/**
 * 
 * @param ped
 * @param fleeTarget
 */
export function taskReactAndFleePed(ped: number, fleeTarget: number): void {
	return _in(0x72c89646, 0x4915d1b1, ped, fleeTarget); 
}

/**
 * ```
 * Only appears twice in the scripts.
 * TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);
 * TASK::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);
 * ```
 * @param ped
 * @param unused
 */
export function taskRappelFromHeli(ped: number, unused: number): void {
	return _in(0x09693b03, 0x12f91649, ped, _fv(unused)); 
}

/**
 * ```
 * The 2nd param (unused) is not implemented.
 * -----------------------------------------------------------------------
 * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
 * if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
 * TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
 * }
 * ```
 * @param ped
 * @param unused
 */
export function taskReloadWeapon(ped: number, unused: boolean): void {
	return _in(0x62d2916f, 0x56b9cd2d, ped, unused); 
}

/**
 * 
 * @param ped
 * @param target
 * @param duration
 * @param p3
 */
export function taskSeekCoverFromPed(ped: number, target: number, duration: number, p3: boolean): void {
	return _in(0x84d32b3b, 0xec531324, ped, target, duration, p3); 
}

/**
 * ```
 * From fm_mission_controller.c:
 * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
 * vVar28 = {0.094f, 0.02f, -0.005f};
 * vVar29 = {-92.24f, 63.64f, 150.24f};
 * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
 * set_entity_lod_dist(net_to_ent(uVar30), 500);
 * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
 * Var31.imm_4 = 1065353216;
 * Var31.imm_5 = 1065353216;
 * Var31.imm_9 = 1065353216;
 * Var31.imm_10 = 1065353216;
 * Var31.imm_14 = 1065353216;
 * Var31.imm_15 = 1065353216;
 * Var31.imm_17 = 1040187392;
 * Var31.imm_18 = 1040187392;
 * Var31.imm_19 = -1;
 * Var32.imm_4 = 1065353216;
 * Var32.imm_5 = 1065353216;
 * Var32.imm_9 = 1065353216;
 * Var32.imm_10 = 1065353216;
 * Var32.imm_14 = 1065353216;
 * Var32.imm_15 = 1065353216;
 * Var32.imm_17 = 1040187392;
 * Var32.imm_18 = 1040187392;
 * Var32.imm_19 = -1;
 * Var31 = 1;
 * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
 * Var31.imm_2 = "idle";
 * Var31.imm_20 = 1048633;
 * Var31.imm_4 = 0.5f;
 * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
 * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
 * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
 * remove_anim_dict("anim@heists@biolab@");
 * ```
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function taskScriptedAnimation(ped: number, p4: number, p5: number): void {
	return _in(0x126ef75f, 0x1e17abe5, ped, _i, _i, _i, _fv(p4), _fv(p5)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param p5
 */
export function taskSeekCoverFromPos(ped: number, x: number, y: number, z: number, duration: number, p5: boolean): void {
	return _in(0x75ac2b60, 0x386d89f2, ped, _fv(x), _fv(y), _fv(z), duration, p5); 
}

/**
 * ```
 * from michael2:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
 * appears to be shorter variation
 * from michael3:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
 * ```
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p7
 * @param p8
 */
export function taskSeekCoverToCoords(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: any, p8: boolean): void {
	return _in(0x39246a69, 0x58ef072c, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function taskSeekCoverToCoverPoint(p0: any, p1: any, p2: number, p3: number, p4: number, p5: any, p6: boolean): void {
	return _in(0xd43d95c7, 0xa869447f, p0, p1, _fv(p2), _fv(p3), _fv(p4), p5, p6); 
}

/**
 * ```
 * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
 * ```
 * @param ped
 * @param p1
 */
export function taskSetDecisionMaker(ped: number, p1: number): void {
	return _in(0xeb8517dd, 0xa73720da, ped, _ch(p1)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function taskSetSphereDefensiveArea(p0: any, p1: number, p2: number, p3: number, p4: number): void {
	return _in(0x933c0651, 0x8b52a9a4, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4)); 
}

/**
 * 
 * @param ped
 * @param eventHandle
 */
export function taskShockingEventReact(ped: number, eventHandle: number): void {
	return _in(0x452419cb, 0xd838065b, ped, eventHandle); 
}

/**
 * ```
 * I cant believe I have to define this, this is one of the best natives.
 * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
 * Since it is a task, every time the native is called the ped will stop for a moment.
 * ```
 * @param ped
 * @param toggle
 */
export function taskSetBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void {
	return _in(0x90d21561, 0x98831d69, ped, toggle); 
}

/**
 * ```
 * Makes the specified ped shuffle to the next vehicle seat.
 * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param ped
 * @param vehicle
 */
export function taskShuffleToNextVehicleSeat(ped: number, vehicle: number): void {
	return _in(0x7aa80209, 0xbda643eb, ped, vehicle); 
}

/**
 * ```
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param firingPattern
 */
export function taskShootAtCoord(ped: number, x: number, y: number, z: number, duration: number, firingPattern: number): void {
	return _in(0x46a6cc01, 0xe0826106, ped, _fv(x), _fv(y), _fv(z), duration, _ch(firingPattern)); 
}

/**
 * ```
 * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
 * Entity aimedentity;
 * Player player = PLAYER::PLAYER_ID();
 * PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
 * //bg is an array of peds
 * TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
 * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * ```
 * @param entity
 * @param target
 * @param duration
 * @param firingPattern
 */
export function taskShootAtEntity(entity: number, target: number, duration: number, firingPattern: number): void {
	return _in(0x08da95e8, 0x298ae772, entity, target, duration, _ch(firingPattern)); 
}

/**
 * ```
 * NativeDB Added Parameter 2: BOOL p1
 * ```
 * @param ped
 */
export function taskSkyDive(ped: number): void {
	return _in(0x601736cf, 0xe536b0a0, ped); 
}

/**
 * ```
 * Makes a ped run away from another ped (fleeTarget).
 * distance = ped will flee this distance.
 * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
 * ```
 * @param ped
 * @param fleeTarget
 * @param distance
 * @param fleeTime
 * @param p4
 * @param p5
 */
export function taskSmartFleePed(ped: number, fleeTarget: number, distance: number, fleeTime: any, p4: boolean, p5: boolean): void {
	return _in(0x22b0d0e3, 0x7ccb840d, ped, fleeTarget, _fv(distance), fleeTime, p4, p5); 
}

/**
 * ```
 * Makes the specified ped flee the specified distance from the specified position.
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param time
 * @param p6
 * @param p7
 */
export function taskSmartFleeCoord(ped: number, x: number, y: number, z: number, distance: number, time: number, p6: boolean, p7: boolean): void {
	return _in(0x94587f17, 0xe9c365d5, ped, _fv(x), _fv(y), _fv(z), _fv(distance), time, p6, p7); 
}

/**
 * ```
 * Makes the specified ped stand still for (time) milliseconds.
 * ```
 * @param ped
 * @param time
 */
export function taskStandStill(ped: number, time: number): void {
	return _in(0x919be13e, 0xed931959, ped, time); 
}

/**
 * ```
 * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param scenarioName
 */
export function taskStandGuard(ped: number, x: number, y: number, z: number, heading: number, scenarioName: string): void {
	return _in(0xae032f8b, 0xba959e90, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _ts(scenarioName)); 
}

/**
 * ```
 * Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
 * ---------------
 * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
 * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
 * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
 * I have no idea what the last 3 parameters are, but I'll try to find out.
 * -going on the last 3 parameters, they appear to always be "0, 0, 1"
 * p6 -1 also used in scrips
 * p7 used for sitting scenarios
 * p8 teleports ped to position
 * ```
 * @param ped
 * @param scenarioName
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param duration
 * @param sittingScenario
 * @param teleport
 */
export function taskStartScenarioAtPosition(ped: number, scenarioName: string, x: number, y: number, z: number, heading: number, duration: number, sittingScenario: boolean, teleport: boolean): void {
	return _in(0xfa4efc79, 0xf69d4f07, ped, _ts(scenarioName), _fv(x), _fv(y), _fv(z), _fv(heading), duration, sittingScenario, teleport); 
}

/**
 * ```
 * Plays a scenario on a Ped at their current location.
 * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
 * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
 * 
 * List of scenarioNames: pastebin.com/6mrYTdQv
 * 
 * Also these:
 * WORLD_FISH_FLEE
 * DRIVE
 * WORLD_HUMAN_HIKER
 * WORLD_VEHICLE_ATTRACTOR
 * WORLD_VEHICLE_BICYCLE_MOUNTAIN
 * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
 * WORLD_VEHICLE_BIKER
 * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
 * WORLD_VEHICLE_CONSTRUCTION_SOLO
 * WORLD_VEHICLE_DRIVE_PASSENGERS
 * WORLD_VEHICLE_DRIVE_SOLO
 * WORLD_VEHICLE_EMPTY
 * WORLD_VEHICLE_PARK_PARALLEL
 * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
 * WORLD_VEHICLE_POLICE_BIKE
 * WORLD_VEHICLE_POLICE_CAR
 * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
 * WORLD_VEHICLE_SALTON_DIRT_BIKE
 * WORLD_VEHICLE_TRUCK_LOGS
 * ```
 * @param ped
 * @param scenarioName
 * @param unkDelay
 * @param playEnterAnim
 */
export function taskStartScenarioInPlace(ped: number, scenarioName: string, unkDelay: number, playEnterAnim: boolean): void {
	return _in(0x142a0242, 0x5ff02bd9, ped, _ts(scenarioName), unkDelay, playEnterAnim); 
}

/**
 * ```
 * Makes the ped run to take cover
 * ```
 * @param ped
 */
export function taskStayInCover(ped: number): void {
	return _in(0xe5da8615, 0xa6180789, ped); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param ped
 */
export function taskStopPhoneGestureAnimation(ped: number): void {
	return _in(0x3fa00d4f, 0x4641bfae, ped); 
}

/**
 * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
 * p0 is always 0, p5 is always 1
 * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
 * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
 * 
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param p0
 * @param submarine
 * @param x
 * @param y
 * @param z
 * @param p5
 */
export function TaskSubmarineGotoAndStop(p0: any, submarine: number, x: number, y: number, z: number, p5: any): void {
	return _in(0xc22b4057, 0x9a498ca4, p0, submarine, _fv(x), _fv(y), _fv(z), p5); 
}

/**
 * ```
 * Stealth kill action name hashes:
 * stealth kills can be found here: Grand Theft Auto V\common.rpf\data\action\stealth_kills.meta
 * ...
 * {
 * "ACT_stealth_kill_a",
 * "ACT_stealth_kill_weapon",
 * "ACT_stealth_kill_b",
 * "ACT_stealth_kill_c",
 * "ACT_stealth_kill_d",
 * "ACT_stealth_kill_a_gardener"
 * }
 * Only known script using this native: fbi4_prep2
 * EXAMPLE:
 * ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key("AR_stealth_kill_a"), 1f, 0);ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key("AR_stealth_kill_knife"), 1f, 0);
 * Also it may be important to note, that each time this task is called, it's followed by AI::CLEAR_PED_TASKS on the target
 * ```
 * @param killer
 * @param target
 * @param actionType
 * @param p3
 * @param p4
 */
export function taskStealthKill(killer: number, target: number, actionType: number, p3: number, p4: any): void {
	return _in(0xaa5dc055, 0x79d60bd9, killer, target, _ch(actionType), _fv(p3), p4); 
}

/**
 * 
 * @param ped
 * @param p1
 */
export function taskSwapWeapon(ped: number, p1: boolean): void {
	return _in(0xa21c5125, 0x5b205245, ped, p1); 
}

/**
 * ```
 * This function is called on peds in vehicles.
 * anim: animation name
 * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
 * p5: no idea what it does but is usually -1
 * ```
 * @param ped
 * @param anim
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param vehicle
 * @param p7
 * @param p8
 */
export function taskSweepAimEntity(ped: number, anim: string, p2: string, p3: string, p4: string, p5: number, vehicle: number, p7: number, p8: number): void {
	return _in(0x2047c021, 0x58d6405a, ped, _ts(anim), _ts(p2), _ts(p3), _ts(p4), p5, vehicle, _fv(p7), _fv(p8)); 
}

/**
 * ```
 * used in sequence task
 * both parameters seems to be always 0
 * ```
 * @param p0
 * @param p1
 */
export function taskToggleDuck(p0: boolean, p1: boolean): void {
	return _in(0xac96609b, 0x9995edf8, p0, p1); 
}

/**
 * ```
 * Actually has 3 params, not 2.
 * p0: Ped
 * p1: int (or bool?)
 * p2: int
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * @param ped
 * @param p1
 */
export function taskUseMobilePhone(ped: number, p1: number): void {
	return _in(0xbd2a8ec3, 0xaf4de7db, ped, p1); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function taskSweepAimPosition(p0: any, p5: any, p6: number, p7: number, p8: number, p9: number, p10: number): void {
	return _in(0x7afe8fdc, 0x10bc07d2, p0, _i, _i, _i, _i, p5, _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(p10)); 
}

/**
 * ```
 * duration in milliseconds
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export function taskTurnPedToFaceCoord(ped: number, x: number, y: number, z: number, duration: number): void {
	return _in(0x1dda930a, 0x0ac38571, ped, _fv(x), _fv(y), _fv(z), duration); 
}

/**
 * 
 * @param ped
 * @param duration
 */
export function taskUseMobilePhoneTimed(ped: number, duration: number): void {
	return _in(0x5ee02954, 0xa14c69db, ped, duration); 
}

/**
 * ```
 * TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
 * ```
 * @param ped
 * @param scene
 * @param animDictionary
 * @param animationName
 * @param speed
 * @param speedMultiplier
 * @param duration
 * @param flag
 * @param playbackRate
 * @param p9
 */
export function taskSynchronizedScene(ped: number, scene: number, animDictionary: string, animationName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: any): void {
	return _in(0xeea92914, 0x1f699854, ped, scene, _ts(animDictionary), _ts(animationName), _fv(speed), _fv(speedMultiplier), duration, flag, _fv(playbackRate), p9); 
}

/**
 * ```
 * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
 * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
 * ---
 * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
 * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
 * ----------------------------------------------------
 * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function taskThrowProjectile(ped: number, x: number, y: number, z: number): void {
	return _in(0x7285951d, 0xbf6b5a51, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * ```
 * @param ped
 * @param entity
 * @param duration
 */
export function taskTurnPedToFaceEntity(ped: number, entity: number, duration: number): void {
	return _in(0x5ad23d40, 0x115353ac, ped, entity, duration); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function taskUseNearestScenarioChainToCoordWarp(p0: any, p1: number, p2: number, p3: number, p4: number, p5: any): void {
	return _in(0x97a28e63, 0xf0ba5631, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 */
export function taskUseNearestScenarioToCoordWarp(ped: number, x: number, y: number, z: number, radius: number, p5: any): void {
	return _in(0x58e2e0f2, 0x3f6b76c3, ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5); 
}

/**
 * 
 * @param ped
 * @param target
 */
export function taskVehicleAimAtPed(ped: number, target: number): void {
	return _in(0xe4188559, 0x2b08b097, ped, target); 
}

/**
 * ```
 * chases targetEnt fast and aggressively
 * --
 * Makes ped (needs to be in vehicle) chase targetEnt.
 * ```
 * @param driver
 * @param targetEnt
 */
export function taskVehicleChase(driver: number, targetEnt: number): void {
	return _in(0x3c08a8e3, 0x0363b353, driver, targetEnt); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function taskUseNearestScenarioChainToCoord(p0: any, p1: number, p2: number, p3: number, p4: number, p5: any): void {
	return _in(0x9fda1b3d, 0x7e7028b3, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * ```
 * Updated variables
 * An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
 * ```
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param duration
 */
export function taskUseNearestScenarioToCoord(ped: number, x: number, y: number, z: number, distance: number, duration: number): void {
	return _in(0x277f471b, 0xa9db000b, ped, _fv(x), _fv(y), _fv(z), _fv(distance), duration); 
}

/**
 * ```
 * info about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/
 * ---------------------------------------------------------------
 * Passing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.
 * P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.
 * Here the e.g. code I used
 * Function.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);
 * ```
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p6
 * @param vehicleModel
 * @param drivingMode
 * @param stopRange
 * @param p10
 */
export function taskVehicleDriveToCoord(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, p6: any, vehicleModel: number, drivingMode: number, stopRange: number, p10: number): void {
	return _in(0xe2a2aa2f, 0x659d77a7, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), p6, _ch(vehicleModel), drivingMode, _fv(stopRange), _fv(p10)); 
}

/**
 * You can let your character drive to the destination at the speed and driving style you set. You can use map marks to set the destination.
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param driveMode
 * @param stopRange
 */
export function taskVehicleDriveToCoordLongrange(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, driveMode: number, stopRange: number): void {
	return _in(0x158bb33f, 0x920d360c, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), driveMode, _fv(stopRange)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function taskVehicleAimAtCoord(ped: number, x: number, y: number, z: number): void {
	return _in(0x447c1e9e, 0xf844bc0f, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Drive randomly with no destination set.
 * @param ped
 * @param vehicle
 * @param speed
 * @param drivingStyle
 */
export function taskVehicleDriveWander(ped: number, vehicle: number, speed: number, drivingStyle: number): void {
	return _in(0x48014295, 0x9d337d00, ped, vehicle, _fv(speed), drivingStyle); 
}

/**
 * ```
 * Makes a ped follow the targetVehicle with <minDistance> in between.
 * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
 * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
 * -1 = behind
 * 0 = ahead
 * 1 = left
 * 2 = right
 * 3 = back left
 * 4 = back right
 * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
 * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
 * ```
 * @param ped
 * @param vehicle
 * @param targetVehicle
 * @param mode
 * @param speed
 * @param drivingStyle
 * @param minDistance
 * @param p7
 * @param noRoadsDistance
 */
export function taskVehicleEscort(ped: number, vehicle: number, targetVehicle: number, mode: number, speed: number, drivingStyle: number, minDistance: number, p7: number, noRoadsDistance: number): void {
	return _in(0x0fa6e4b7, 0x5f302400, ped, vehicle, targetVehicle, mode, _fv(speed), drivingStyle, _fv(minDistance), p7, _fv(noRoadsDistance)); 
}

/**
 * ```
 * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
 * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
 * ```
 * @param driver
 * @param vehicle
 * @param targetEntity
 * @param speed
 * @param drivingStyle
 * @param minDistance
 */
export function taskVehicleFollow(driver: number, vehicle: number, targetEntity: number, speed: number, drivingStyle: number, minDistance: number): void {
	return _in(0xfc545a9f, 0x0626e3b6, driver, vehicle, targetEntity, _fv(speed), drivingStyle, minDistance); 
}

/**
 * ```
 * task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)
 * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
 * p3 = 786468
 * p4 = 0
 * p5 = 16
 * p6 = -1 (angle?)
 * p7/8/9 = usually v3.zero
 * p10 = bool (repeat?)
 * p11 = 1073741824
 * -khorio
 * ```
 * @param ped
 * @param vehicle
 * @param WPRecording
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function taskVehicleFollowWaypointRecording(ped: number, vehicle: number, WPRecording: string, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: number): void {
	return _in(0x3123faa6, 0xdb1cf7ed, ped, vehicle, _ts(WPRecording), p3, p4, p5, p6, _fv(p7), p8, _fv(p9)); 
}

/**
 * ```
 * missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * ```
 * @param driver
 * @param vehicle
 * @param vehicleTarget
 * @param missionType
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param DriveAgainstTraffic
 */
export function taskVehicleMission(driver: number, vehicle: number, vehicleTarget: number, missionType: number, p4: number, p5: any, p6: number, p7: number, DriveAgainstTraffic: boolean): void {
	return _in(0x659427e0, 0xef36bcde, driver, vehicle, vehicleTarget, missionType, _fv(p4), p5, _fv(p6), _fv(p7), DriveAgainstTraffic); 
}

/**
 * ```
 * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
 * WARNING:
 * A behaviorFlag value of 0 will result in a clunky, stupid driver!
 * Recommended settings:
 * speed = 30.0f,
 * behaviorFlag = 156,
 * stoppingRange = 5.0f;
 * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
 * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
 * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
 * ```
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param behaviorFlag
 * @param stoppingRange
 */
export function taskVehicleGotoNavmesh(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, behaviorFlag: number, stoppingRange: number): void {
	return _in(0x195aeeb1, 0x3cefe2ee, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), behaviorFlag, _fv(stoppingRange)); 
}

/**
 * See [`TASK_VEHICLE_MISSION`](#\_0x659427E0EF36BCDE).
 * @param ped
 * @param vehicle
 * @param pedTarget
 * @param missionType
 * @param maxSpeed
 * @param drivingStyle
 * @param minDistance
 * @param p7
 * @param DriveAgainstTraffic
 */
export function taskVehicleMissionPedTarget(ped: number, vehicle: number, pedTarget: number, missionType: number, maxSpeed: number, drivingStyle: number, minDistance: number, p7: number, DriveAgainstTraffic: boolean): void {
	return _in(0x9454528d, 0xf15d657a, ped, vehicle, pedTarget, missionType, _fv(maxSpeed), drivingStyle, _fv(minDistance), _fv(p7), DriveAgainstTraffic); 
}

/**
 * ```
 * pilot, vehicle and altitude are rather self-explanatory.
 * p4: is unused variable in the function.
 * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
 * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
 * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
 * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
 * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
 * ```
 * @param pilot
 * @param vehicle
 * @param entityToFollow
 * @param targetSpeed
 * @param p4
 * @param radius
 * @param altitude
 * @param p7
 */
export function taskVehicleHeliProtect(pilot: number, vehicle: number, entityToFollow: number, targetSpeed: number, p4: number, radius: number, altitude: number, p7: number): void {
	return _in(0x1e09c320, 0x48fefd1c, pilot, vehicle, entityToFollow, _fv(targetSpeed), p4, _fv(radius), altitude, p7); 
}

/**
 * ```
 * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
 * Here's how its used -
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0 -- [[1]] ], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
 * FYI : Speedo is the name of van in which chop was put in the mission.
 * ```
 * @param vehicle
 * @param animationSet
 * @param animationName
 */
export function taskVehiclePlayAnim(vehicle: number, animationSet: string, animationName: string): void {
	return _in(0x69f5c3bd, 0x0f3ebd89, vehicle, _ts(animationSet), _ts(animationName)); 
}

/**
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param p4
 */
export function taskVehicleShootAtCoord(ped: number, x: number, y: number, z: number, p4: number): void {
	return _in(0x5190796e, 0xd39c9b6d, ped, _fv(x), _fv(y), _fv(z), _fv(p4)); 
}

/**
 * See [`TASK_VEHICLE_MISSION`](#\_0x659427E0EF36BCDE).
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param DriveAgainstTraffic
 */
export function taskVehicleMissionCoorsTarget(ped: number, vehicle: number, x: number, y: number, z: number, p5: number, p6: number, p7: number, p8: number, p9: number, DriveAgainstTraffic: boolean): void {
	return _in(0xf0af20aa, 0x7731f8c3, ped, vehicle, _fv(x), _fv(y), _fv(z), p5, p6, p7, _fv(p8), _fv(p9), DriveAgainstTraffic); 
}

/**
 * ```
 * Modes:
 * 0 - ignore heading
 * 1 - park forward
 * 2 - park backwards
 * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
 * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
 * ```
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param mode
 * @param radius
 * @param keepEngineOn
 */
export function taskVehiclePark(ped: number, vehicle: number, x: number, y: number, z: number, heading: number, mode: number, radius: number, keepEngineOn: boolean): void {
	return _in(0x0f3e34e9, 0x68ea374e, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(heading), mode, _fv(radius), keepEngineOn); 
}

/**
 * ```
 * '1 - brake
 * '3 - brake + reverse
 * '4 - turn left 90 + braking
 * '5 - turn right 90 + braking
 * '6 - brake strong (handbrake?) until time ends
 * '7 - turn left + accelerate
 * '7 - turn right + accelerate
 * '9 - weak acceleration
 * '10 - turn left + restore wheel pos to center in the end
 * '11 - turn right + restore wheel pos to center in the end
 * '13 - turn left + go reverse
 * '14 - turn left + go reverse
 * '16 - crash the game after like 2 seconds :)
 * '17 - keep actual state, game crashed after few tries
 * '18 - game crash
 * '19 - strong brake + turn left/right
 * '20 - weak brake + turn left then turn right
 * '21 - weak brake + turn right then turn left
 * '22 - brake + reverse
 * '23 - accelerate fast
 * '24 - brake
 * '25 - brake turning left then when almost stopping it turns left more
 * '26 - brake turning right then when almost stopping it turns right more
 * '27 - brake until car stop or until time ends
 * '28 - brake + strong reverse acceleration
 * '30 - performs a burnout (brake until stop + brake and accelerate)
 * '31 - accelerate + handbrake
 * '32 - accelerate very strong
 * Seems to be this:
 * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
 * ```
 * @param driver
 * @param vehicle
 * @param action
 * @param time
 */
export function taskVehicleTempAction(driver: number, vehicle: number, action: number, time: number): void {
	return _in(0xc429dcee, 0xb339e129, driver, vehicle, action, time); 
}

/**
 * 
 * @param ped
 * @param target
 * @param p2
 */
export function taskVehicleShootAtPed(ped: number, target: number, p2: number): void {
	return _in(0x10ab107b, 0x887214d8, ped, target, _fv(p2)); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function TaskWanderSpecific(p0: any, p1: any, p2: any, p3: any): void {
	return _in(0x6919a2f1, 0x36426098, p0, p1, p2, p3); 
}

/**
 * ```
 * Makes ped walk around the area.
 * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
 * ```
 * @param ped
 * @param p1
 * @param p2
 */
export function taskWanderStandard(ped: number, p1: number, p2: number): void {
	return _in(0xbb9ce077, 0x274f6a1b, ped, _fv(p1), p2); 
}

/**
 * Makes a ped wander/patrol around the specified area.
 * 
 * The ped will continue to wander after getting distracted, but only if this additional task is temporary, ie. killing a target, after killing the target it will continue to wander around.
 * 
 * Use `GetIsTaskActive(ped, 222)` to check if the ped is still wandering the area.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param minimalLength
 * @param timeBetweenWalks
 */
export function taskWanderInArea(ped: number, x: number, y: number, z: number, radius: number, minimalLength: number, timeBetweenWalks: number): void {
	return _in(0xe054346c, 0xa3a0f315, ped, _fv(x), _fv(y), _fv(z), _fv(radius), minimalLength, _fv(timeBetweenWalks)); 
}

/**
 * 
 * @param ped
 */
export function uncuffPed(ped: number): void {
	return _in(0x67406f2c, 0x8f87fc4f, ped); 
}

/**
 * 
 * @param ped
 * @param vehicle
 * @param seatIndex
 */
export function taskWarpPedIntoVehicle(ped: number, vehicle: number, seatIndex: number): void {
	return _in(0x9a7d0914, 0x11c5f684, ped, vehicle, seatIndex); 
}

/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * @param ped
 * @param target
 * @param time
 * @param p3
 */
export function taskWrithe(ped: number, target: number, time: number, p3: number): void {
	return _in(0xcddc2b77, 0xce54ac6e, ped, target, time, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function updateTaskAimGunScriptedTarget(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void {
	return _in(0x9724fb59, 0xa3e72ad0, p0, p1, _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * 
 * @param ped
 * @param entity
 */
export function updateTaskSweepAimEntity(ped: number, entity: number): void {
	return _in(0xe4973dbd, 0xbe6e44b3, ped, entity); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function updateTaskSweepAimPosition(p0: any, p1: number, p2: number, p3: number): void {
	return _in(0xbb106883, 0xf5201fc4, p0, _fv(p1), _fv(p2), _fv(p3)); 
}

/**
 * 
 * @param ped
 * @param duration
 */
export function updateTaskHandsUpDuration(ped: number, duration: number): void {
	return _in(0xa98fcafd, 0x7893c834, ped, duration); 
}

/**
 * 
 * @param vehicle
 * @param speed
 */
export function vehicleWaypointPlaybackOverrideSpeed(vehicle: number, speed: number): void {
	return _in(0x121f0593, 0xe0a431d7, vehicle, _fv(speed)); 
}

/**
 * 
 * @param name
 * @param p1
 * @param p2
 * @param p3
 */
export function useWaypointRecordingAsAssistedMovementRoute(name: string, p1: boolean, p2: number, p3: number): void {
	return _in(0x5a353b8e, 0x6b1095b5, _ts(name), p1, _fv(p2), _fv(p3)); 
}

/**
 * 
 * @param vehicle
 */
export function vehicleWaypointPlaybackResume(vehicle: number): void {
	return _in(0xdc04fcaa, 0x7839d492, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function vehicleWaypointPlaybackPause(vehicle: number): void {
	return _in(0x8a4e6ac3, 0x73666bc5, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function vehicleWaypointPlaybackUseDefaultSpeed(vehicle: number): void {
	return _in(0x5ceb25a7, 0xd2848963, vehicle); 
}

/**
 * 
 * @param p0
 */
export function waypointPlaybackGetIsPaused(p0: any): boolean {
	return _in(0x701375a7, 0xd43f01cb, p0, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function waypointPlaybackOverrideSpeed(p0: any, p1: number, p2: boolean): void {
	return _in(0x7d7d2b47, 0xfa788e85, p0, _fv(p1), p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function waypointPlaybackPause(p0: any, p1: boolean, p2: boolean): void {
	return _in(0x0f342546, 0xaa06fed5, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function waypointPlaybackResume(p0: any, p1: boolean, p2: any, p3: any): void {
	return _in(0x244f70c8, 0x4c547d2d, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 */
export function waypointPlaybackStartAimingAtPed(p0: any, p1: any, p2: boolean): void {
	return _in(0x20e33093, 0x7c399d29, p0, p1, p2); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function waypointPlaybackStartAimingAtCoord(p0: any, p1: number, p2: number, p3: number, p4: boolean): void {
	return _in(0x8968400d, 0x900ed8b3, p0, _fv(p1), _fv(p2), _fv(p3), p4); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function waypointPlaybackStartShootingAtCoord(p0: any, p1: number, p2: number, p3: number, p4: boolean, p5: any): void {
	return _in(0x057a25cf, 0xcc9db671, p0, _fv(p1), _fv(p2), _fv(p3), p4, p5); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function waypointPlaybackStartShootingAtPed(p0: any, p1: any, p2: boolean, p3: any): void {
	return _in(0xe70ba7b9, 0x0f8390dc, p0, p1, p2, p3); 
}

/**
 * 
 * @param p0
 */
export function waypointPlaybackStopAimingOrShooting(p0: any): void {
	return _in(0x47efa040, 0xebb8e2ea, p0); 
}

/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * ```
 * @param name
 * @param point
 * @param coord
 */
export function waypointRecordingGetCoord(name: string, point: number): boolean {
	return _in(0x2fb89740, 0x5c90b361, _ts(name), point, _v(coord), _r); 
}

/**
 * 
 * @param p0
 */
export function waypointPlaybackUseDefaultSpeed(p0: any): void {
	return _in(0x6599d834, 0xb12d0800, p0); 
}

/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * ```
 * @param name
 * @param x
 * @param y
 * @param z
 * @param point
 */
export function waypointRecordingGetClosestWaypoint(name: string, x: number, y: number, z: number): boolean {
	return _in(0xb629a298, 0x081f876f, _ts(name), _fv(x), _fv(y), _fv(z), _ii(point), _r); 
}

/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * ```
 * @param name
 * @param points
 */
export function waypointRecordingGetNumPoints(name: string): boolean {
	return _in(0x5343532c, 0x01a07234, _ts(name), _ii(points), _r); 
}

/**
 * 
 * @param name
 * @param point
 */
export function waypointRecordingGetSpeedAtPoint(name: string, point: number): number {
	return _in(0x005622ae, 0xbc33aca9, _ts(name), point, _r, _rf); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param speed
 * @param p5
 */
export function addRoadNodeSpeedZone(x: number, y: number, z: number, radius: number, speed: number, p5: boolean): number {
	return _in(0x2ce544c6, 0x8fb812a0, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(speed), p5, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function addVehiclePhoneExplosiveDevice(vehicle: number): void {
	return _in(0x99ad4ccc, 0xb128cbc9, vehicle); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function addVehicleCombatAngledAvoidanceArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): any {
	return _in(0x54b0f614, 0x960f4a5f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function addVehicleUpsidedownCheck(vehicle: number): void {
	return _in(0xb72e26d8, 0x1006005b, vehicle); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function addVehicleStuckCheckWithWarp(p0: any, p1: number, p2: any, p3: boolean, p4: boolean, p5: boolean, p6: any): void {
	return _in(0x2fa99230, 0x62dd396c, p0, _fv(p1), p2, p3, p4, p5, p6); 
}

/**
 * ```
 * Appears to return false if any window is broken.
 * ```
 * @param vehicle
 */
export function areAllVehicleWindowsIntact(vehicle: number): boolean {
	return _in(0x11d862a3, 0xe977a9ef, vehicle, _r); 
}

/**
 * Returns true when the bomb bay doors of this plane are open. False if they're closed.
 * @param aircraft
 * @return A bool indicating the state of the doors (true = open, false = closed).
 */
export function AreBombBayDoorsOpen(aircraft: number): boolean {
	return _in(0xd0917a42, 0x3314bba8, aircraft, _r); 
}

/**
 * Only used with the "akula" in the decompiled native scripts.
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 */
export function AreHeliStubWingsDeployed(vehicle: number): boolean {
	return _in(0xaef12960, 0xfa943792, vehicle, _r); 
}

/**
 * ```
 * Returns false if every seat is occupied.
 * ```
 * @param vehicle
 */
export function areAnyVehicleSeatsFree(vehicle: number): boolean {
	return _in(0x2d34fc3b, 0xc4adb780, vehicle, _r); 
}

/**
 * Returns whether the outrigger legs are deployed for the vehicle.
 * The Chernobog is one of the few vehicles with outrigger legs.
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @return The deployment state of the vehicle's outrigger legs
 */
export function AreOutriggerLegsDeployed(vehicle: number): boolean {
	return _in(0x3a912835, 0x2eac9e85, vehicle, _r); 
}

/**
 * 
 * @param plane
 */
export function ArePlaneWingsIntact(plane: number): boolean {
	return _in(0x5991a014, 0x34ce9677, plane, _r); 
}

/**
 * 
 * @param vehicle
 * @param entity
 * @param p2
 * @param x
 * @param y
 * @param z
 */
export function attachEntityToCargobob(vehicle: number, entity: number, p2: number, x: number, y: number, z: number): void {
	return _in(0xa1dd82f3, 0xccf9a01e, vehicle, entity, p2, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param plane
 */
export function arePlanePropellersIntact(plane: number): boolean {
	return _in(0x755d6d52, 0x67cbbd7e, plane, _r); 
}

/**
 * ```
 * HookOffset defines where the hook is attached. leave at 0 for default attachment.
 * ```
 * @param towTruck
 * @param vehicle
 * @param rear
 * @param hookOffsetX
 * @param hookOffsetY
 * @param hookOffsetZ
 */
export function attachVehicleToTowTruck(towTruck: number, vehicle: number, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void {
	return _in(0x29a16f8d, 0x621c4508, towTruck, vehicle, rear, _fv(hookOffsetX), _fv(hookOffsetY), _fv(hookOffsetZ)); 
}

/**
 * 
 * @param handler
 * @param container
 */
export function AttachContainerToHandlerFrame(handler: number, container: number): void {
	return _in(0x6a98c2ec, 0xf57fa5d4, handler, container); 
}

/**
 * 
 * @param vehicle
 * @param trailer
 * @param radius
 */
export function attachVehicleToTrailer(vehicle: number, trailer: number, radius: number): void {
	return _in(0x3c7d42d5, 0x8f770b54, vehicle, trailer, _fv(radius)); 
}

/**
 * 
 * @param vehicle
 * @param trailer
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param coordsX
 * @param coordsY
 * @param coordsZ
 * @param rotationX
 * @param rotationY
 * @param rotationZ
 * @param disableColls
 */
export function attachVehicleOnToTrailer(vehicle: number, trailer: number, offsetX: number, offsetY: number, offsetZ: number, coordsX: number, coordsY: number, coordsZ: number, rotationX: number, rotationY: number, rotationZ: number, disableColls: number): void {
	return _in(0x16b5e274, 0xbde402f8, vehicle, trailer, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(coordsX), _fv(coordsY), _fv(coordsZ), _fv(rotationX), _fv(rotationY), _fv(rotationZ), _fv(disableColls)); 
}

/**
 * ```
 * p2 is unknown and is always -1 in the script natives.
 * ```
 * @param vehicle
 * @param cargobob
 * @param p2
 * @param x
 * @param y
 * @param z
 */
export function attachVehicleToCargobob(vehicle: number, cargobob: number, p2: number, x: number, y: number, z: number): void {
	return _in(0x4127f1d8, 0x4e347769, vehicle, cargobob, p2, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param vehicle
 * @param seatIndex
 */
export function canShuffleSeat(vehicle: number, seatIndex: number): boolean {
	return _in(0x30785d90, 0xc956bf35, vehicle, seatIndex, _r); 
}

/**
 * 
 */
export function clearLastDrivenVehicle(): void {
	return _in(0xe01903c4, 0x7c7ac89e); 
}

/**
 * ```
 * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
 * . distance defines how far it will travel until stopping. Garage doors use 3.0.
 * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
 * ```
 * @param vehicle
 * @param distance
 * @param duration
 * @param unknown
 */
export function bringVehicleToHalt(vehicle: number, distance: number, duration: number, unknown: boolean): void {
	return _in(0x260be8f0, 0x9e326a20, vehicle, _fv(distance), duration, unknown); 
}

/**
 * 
 * @param vehicle
 */
export function clearVehicleCustomSecondaryColour(vehicle: number): void {
	return _in(0x5ffbdeec, 0x3e8e2009, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function clearVehicleRouteHistory(vehicle: number): void {
	return _in(0x6d6af961, 0xb72728ae, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function canAnchorBoatHere(vehicle: number): boolean {
	return _in(0x26c10ecb, 0xda5d043b, vehicle, _r); 
}

/**
 * ```
 * Differs from 0x26C10ECBDA5D043B in that 0x140EFCC10 (1604 retail) is called with a2 = true.
 * 
 * NativeDB Introduced: v678
 * ```
 * @param vehicle
 */
export function CanAnchorBoatHere2(vehicle: number): boolean {
	return _in(0x24f4121d, 0x07579880, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function clearVehicleCustomPrimaryColour(vehicle: number): void {
	return _in(0x55e1d275, 0x8f34e437, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function closeBombBayDoors(vehicle: number): void {
	return _in(0x35560417, 0x42a0dc74, vehicle); 
}

/**
 * 
 */
export function ClearVehiclePhoneExplosiveDevice(): void {
	return _in(0xaa3f739a, 0xbddcf21f); 
}

/**
 * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
 * @param sourceVehicle
 * @param targetVehicle
 */
export function copyVehicleDamages(sourceVehicle: number, targetVehicle: number): void {
	return _in(0xe44a9823, 0x68a4af23, sourceVehicle, targetVehicle); 
}

/**
 * ```
 * Works for vehicles with a retractable landing gear
 * landing gear states:
 * 0: Deployed
 * 1: Closing
 * 2: Opening
 * 3: Retracted
 * ```
 * @param vehicle
 * @param state
 */
export function controlLandingGear(vehicle: number, state: number): void {
	return _in(0xcfc8be9a, 0x5e1fe575, vehicle, state); 
}

/**
 * Train models must be [requested](#\_0x963D27A58DF860AC) before use. See trains.xml (located in `Grand Theft Auto V\update\update.rpf\common\data\levels\gta5\trains.xml`) for freight and metro variations.
 * 
 * Model names to request can be found by searching `model_name` in the file.
 * 
 * The `Lua` usage example provided down below has been provided in such way so users can test each and every train variation.
 * 
 * ### Newly added parameters (seen in 2372 build)
 * 
 * ```
 * NativeDB Added Parameter 6: BOOL isNetwork
 * NativeDB Added Parameter 7: BOOL netMissionEntity
 * ```
 * 
 * *   **isNetwork**: Whether to create a network object for the train. If false, the train exists only locally.
 * *   **netMissionEntity**: Whether to register the train as pinned to the script host in the R\* network model.
 * 
 * ### Train Models:
 * 
 * *   freight
 * 
 * ### Carriage Models:
 * 
 * *   freightcar
 * *   freightcar2 (Added v2372)
 * *   freightcont1
 * *   freightcont2
 * *   freightgrain
 * *   metrotrain
 * *   tankercar
 * 
 * ### Some train variations (default from trains.xml as of build 2372)
 * 
 * *   17. Very long train and freight variation.
 * *   18. Freight train only.
 * *   25. Double metro train (with both models flipped opposite to each other). This used to be `24` before the 2372 build.
 * @param variation
 * @param x
 * @param y
 * @param z
 * @param direction
 * @return A script handle (fwScriptGuid index) for the train, or 0 if the train failed to be created.
 */
export function createMissionTrain(variation: number, x: number, y: number, z: number, direction: boolean): number {
	return _in(0x63c6cca8, 0xe68ae8c8, variation, _fv(x), _fv(y), _fv(z), direction, _r); 
}

/**
 * ```
 * Drops the Hook/Magnet on a cargobob
 * state
 * enum eCargobobHook
 * {
 * CARGOBOB_HOOK = 0,
 * CARGOBOB_MAGNET = 1,
 * };
 * ```
 * @param cargobob
 * @param state
 */
export function createPickUpRopeForCargobob(cargobob: number, state: number): void {
	return _in(0x7beb0c7a, 0x235f6f3b, cargobob, state); 
}

/**
 * ```
 * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
 * Parameters:
 * a/w/s - Generator position
 * heading - Generator heading
 * p4 - Unknown (always 5.0)
 * p5 - Unknown (always 3.0)
 * modelHash - Vehicle model hash
 * p7/8/9/10 - Unknown (always -1)
 * p11 - Unknown (usually TRUE, only one instance of FALSE)
 * p12/13 - Unknown (always FALSE)
 * p14 - Unknown (usally FALSE, only two instances of TRUE)
 * p15 - Unknown (always TRUE)
 * p16 - Unknown (always -1)
 * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);	CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
 * ```
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p4
 * @param p5
 * @param modelHash
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 * @param p14
 * @param p15
 * @param p16
 */
export function createScriptVehicleGenerator(x: number, y: number, z: number, heading: number, p4: number, p5: number, modelHash: number, p7: number, p8: number, p9: number, p10: number, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: number): number {
	return _in(0x9def8831, 0x14668116, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(p4), _fv(p5), _ch(modelHash), p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, _r, _ri); 
}

/**
 * Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating
 * script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
 * 
 * ```
 * NativeDB Added Parameter 8: BOOL p7
 * ```
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param netMissionEntity
 * @return A script handle (fwScriptGuid index) for the vehicle, or `0` if the vehicle failed to be created.
 */
export function createVehicle(modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, netMissionEntity: boolean): number {
	return _in(0xaf35d0d2, 0x583051b0, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, netMissionEntity, _r); 
}

/**
 * 
 */
export function deleteAllTrains(): void {
	return _in(0x736a7185, 0x77f39c7d); 
}

/**
 * 
 * @param vehicleGenerator
 */
export function deleteScriptVehicleGenerator(vehicleGenerator: number): void {
	return _in(0x22102c9a, 0xbfcf125d, vehicleGenerator); 
}

/**
 * Used to delete mission trains created with [`CREATE_MISSION_TRAIN`](#\_0x63C6CCA8E68AE8C8).
 * @param train
 */
export function deleteMissionTrain(): void {
	return _in(0x5b76b14a, 0xe875c795, _i); 
}

/**
 * ```
 * Deletes a vehicle.
 * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * eg how to use:
 * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * DELETE_VEHICLE(&vehicle);
 * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
 * ```
 * @param vehicle
 */
export function deleteVehicle(): void {
	return _in(0xea386986, 0xe786a54f, _i); 
}

/**
 * 
 * @param vehicle
 */
export function detachVehicleFromAnyTowTruck(vehicle: number): boolean {
	return _in(0xd0e9ce05, 0xa1e68cd8, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function detachContainerFromHandlerFrame(vehicle: number): void {
	return _in(0x7c0043fd, 0xff6436bc, vehicle); 
}

/**
 * ```
 * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
 * ```
 * @param towTruck
 * @param vehicle
 */
export function detachVehicleFromTowTruck(towTruck: number, vehicle: number): void {
	return _in(0xc2db6b67, 0x08350ed8, towTruck, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param entity
 */
export function DetachEntityFromCargobob(vehicle: number, entity: number): any {
	return _in(0xaf030117, 0x01811146, vehicle, entity, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function detachVehicleFromAnyCargobob(vehicle: number): boolean {
	return _in(0xadf7be45, 0x0512c12f, vehicle, _r); 
}

/**
 * 
 */
export function detonateVehiclePhoneExplosiveDevice(): void {
	return _in(0xef49cf02, 0x70307cbe); 
}

/**
 * 
 * @param vehicle
 */
export function detachVehicleFromTrailer(vehicle: number): void {
	return _in(0x90532edf, 0x0d2bdd86, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param cargobob
 */
export function detachVehicleFromCargobob(vehicle: number, cargobob: number): void {
	return _in(0x0e21d3df, 0x1051399d, vehicle, cargobob); 
}

/**
 * 
 * @param vehicle
 * @param p1
 * @param p2
 */
export function disablePlaneAileron(vehicle: number, p1: boolean, p2: boolean): void {
	return _in(0x23428fc5, 0x3c60919c, vehicle, p1, p2); 
}

/**
 * 
 * @param vehicle
 * @param propeller
 */
export function disableIndividualPlanePropeller(vehicle: number, propeller: number): void {
	return _in(0x500873a4, 0x5724c863, vehicle, propeller); 
}

/**
 * 
 * @param vehicle
 */
export function DisableVehicleTurretMovementThisFrame(vehicle: number): void {
	return _in(0x32caedf2, 0x4a583345, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function DisableVehicleNeonLights(vehicle: number, toggle: boolean): void {
	return _in(0x83f81357, 0x0ff519de, vehicle, toggle); 
}

/**
 * ```
 * how does this work?
 * ```
 * @param disabled
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
export function disableVehicleWeapon(disabled: boolean, weaponHash: number, vehicle: number, owner: number): void {
	return _in(0xf4fc6a6f, 0x67d8d856, disabled, _ch(weaponHash), vehicle, owner); 
}

/**
 * ```
 * Returns true only when the hook is active, will return false if the magnet is active
 * ```
 * @param cargobob
 */
export function doesCargobobHavePickUpRope(cargobob: number): boolean {
	return _in(0x1821d91a, 0xd4b56108, cargobob, _r); 
}

/**
 * ```
 * Returns true only when the magnet is active, will return false if the hook is active
 * ```
 * @param cargobob
 */
export function doesCargobobHavePickupMagnet(cargobob: number): boolean {
	return _in(0x6e08bf5b, 0x3722bac9, cargobob, _r); 
}

/**
 * Disables collision for this vehicle (maybe it also supports other entities, not sure).
 * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
 * 
 * [Example video](https://streamable.com/6n45d5)
 * 
 * Not sure if there is a native (and if so, which one) that resets the collisions.
 * @param vehicle
 */
export function DisableVehicleWorldCollision(vehicle: number): void {
	return _in(0x75627043, 0xc6aa90ad, vehicle); 
}

/**
 * ```
 * Checks via CVehicleModelInfo
 * ```
 * @param vehicle
 * @param extraId
 */
export function doesExtraExist(vehicle: number, extraId: number): boolean {
	return _in(0x1262d557, 0x92428154, vehicle, extraId, _r); 
}

/**
 * 
 * @param vehicleGenerator
 */
export function doesScriptVehicleGeneratorExist(vehicleGenerator: number): boolean {
	return _in(0xf6086bc8, 0x36400876, vehicleGenerator, _r); 
}

/**
 * ```
 * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
 * ```
 * @param vehicle
 */
export function DoesVehicleAllowRappel(vehicle: number): boolean {
	return _in(0x4e417c54, 0x7182c84d, vehicle, _r); 
}

/**
 * 
 * @param decorator
 */
export function doesVehicleExistWithDecorator(decorator: string): boolean {
	return _in(0x956b409b, 0x984d9bf7, _ts(decorator), _r); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param vehicle
 */
export function DoesVehicleHaveSearchlight(vehicle: number): boolean {
	return _in(0x99015ed7, 0xdbea5113, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function doesVehicleHaveRoof(vehicle: number): boolean {
	return _in(0x8ac862b0, 0xb32c5b80, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function doesVehicleHaveWeapons(vehicle: number): boolean {
	return _in(0x25ecb9f8, 0x017d98e0, vehicle, _r); 
}

/**
 * ```
 * Maximum amount of vehicles with vehicle stuck check appears to be 16.
 * ```
 * @param vehicle
 */
export function doesVehicleHaveStuckVehicleCheck(vehicle: number): boolean {
	return _in(0x57e4c39d, 0xe5ee8470, vehicle, _r); 
}

/**
 * ```
 * Checks if vehicle tyre at index exists. Also returns false if tyre was removed.
 * ```
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param vehicle
 * @param tyreIndex
 */
export function DoesVehicleTyreExist(vehicle: number, tyreIndex: number): boolean {
	return _in(0x534e36d4, 0xdb9ecc5d, vehicle, tyreIndex, _r); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function explodeVehicleInCutscene(vehicle: number, p1: boolean): void {
	return _in(0x786a4eb6, 0x7b01bf0b, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param x
 * @param y
 * @param z
 */
export function EjectJb700Roof(vehicle: number, x: number, y: number, z: number): void {
	return _in(0xe38cb9d7, 0xd39fdbcc, vehicle, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * Explodes a selected vehicle.
 * Vehicle vehicle = Vehicle you want to explode.
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
 * ```
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 */
export function explodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean): void {
	return _in(0xba71116a, 0xdf5b514c, vehicle, isAudible, isInvisible); 
}

/**
 * Native is significantly more complicated than simply generating a random vector & length.
 * 
 * The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport\_\__IsSphereVisible.
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param ped
 */
export function FindRandomPointInSpace(ped: number): Vector3 {
	return _in(0x8dc96757, 0x97123522, ped, _r, _rv); 
}

/**
 * ```
 * Finds the vehicle that is carrying this entity with a handler frame.
 * The model of the entity must be prop_contr_03b_ld or the function will return 0.
 * ```
 * @param entity
 */
export function FindVehicleCarryingThisEntity(entity: number): number {
	return _in(0x375e7fc4, 0x4f21c8ab, entity, _r); 
}

/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * 
 * This function is coded to not work on vehicles of type: `CBike`, `Bmx`, `CBoat`, `CTrain`, and `CSubmarine`.
 * @param vehicle
 * @param windowIndex
 */
export function fixVehicleWindow(vehicle: number, windowIndex: number): void {
	return _in(0x772282eb, 0xeb95e682, vehicle, windowIndex); 
}

/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param vehicle
 */
export function DoesVehicleHaveLandingGear(vehicle: number): boolean {
	return _in(0xe43701c3, 0x6caff1a4, vehicle, _r); 
}

/**
 * ```
 * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
 * ```
 * @param vehicle
 * @param p1
 */
export function forcePlaybackRecordedVehicleUpdate(vehicle: number, p1: boolean): void {
	return _in(0x1f2e4e06, 0xdea8992b, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function forceSubmarineSurfaceMode(vehicle: number, toggle: boolean): void {
	return _in(0x33506883, 0x545ac0df, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 */
export function getBoatBoomPositionRatio(vehicle: number): number {
	return _in(0x6636c535, 0xf6cc2725, vehicle, _r, _rf); 
}

/**
 * 
 * @param vehArray
 */
export function GetAllVehicles(): number {
	return _in(0x9b8e1bf0, 0x4b51f2e8, _ii(vehArray), _r, _ri); 
}

/**
 * ```
 * Same call as VEHICLE::_0x0F3B4D4E43177236
 * ```
 * @param vehicle
 * @param p1
 */
export function GetBoatBoomPositionRatio2(vehicle: number, p1: boolean): void {
	return _in(0xc1f981a6, 0xf74f0c23, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function GetBoatBoomPositionRatio3(vehicle: number, p1: boolean): void {
	return _in(0x0f3b4d4e, 0x43177236, vehicle, p1); 
}

/**
 * ```
 * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
 * ```
 * @param vehicle
 */
export function GetCanVehicleJump(vehicle: number): boolean {
	return _in(0x9078c0c5, 0xef8c19e9, vehicle, _r); 
}

/**
 * Gets the position of the cargobob hook, in world coords.
 * @param cargobob
 */
export function GetCargobobHookPosition(cargobob: number): Vector3 {
	return _in(0xcbdb9b92, 0x3cacc92d, cargobob, _r, _rv); 
}

/**
 * Returns the convertible state of the specified vehicle.
 * 
 * ```cpp
 * enum RoofState
 * {
 * ROOFSTATE_UP = 0,
 * ROOFSTATE_LOWERING = 1,
 * ROOFSTATE_DOWN = 2,
 * ROOFSTATE_RAISING = 3
 * };
 * ```
 * @param vehicle
 * @return *   0 when closed/up, the vehicle is not a convertible or the vehicle is null/not provided
*   1 when closing
*   2 when open/down
*   3 when opening
*   6 unknown/unverified -- possibly stopped but not full open
 */
export function getConvertibleRoofState(vehicle: number): number {
	return _in(0xf8c39792, 0x2fc03f41, vehicle, _r, _ri); 
}

/**
 * ```
 * Example usage
 * VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)
 * x, y, z: Position to get closest vehicle to.
 * radius: Max radius to get a vehicle.
 * modelHash: Limit to vehicles with this model. 0 for any.
 * flags: The bitwise flags altering the function's behaviour.
 * Does not return police cars or helicopters.
 * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
 * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
 * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
 * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
 * Conversion of found flags to binary: pastebin.com/kghNFkRi
 * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
 * It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
 * -------------------------------------------------------------------------
 * Conclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h
 * Use flag 127 to return police cars
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
export function getClosestVehicle(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number {
	return _in(0xf73eb622, 0xc4f1689b, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r); 
}

/**
 * Returns the display name/text label (`gameName` in `vehicles.meta`) for the specified vehicle model.
 * @param modelHash
 * @return The display name for the vehicle, or `'CARNOTFOUND'` if invalid.
 */
export function getDisplayNameFromVehicleModel(modelHash: number): string {
	return _in(0xb215aac3, 0x2d25d019, _ch(modelHash), _r, _s); 
}

/**
 * 
 * @param vehicle
 */
export function getCurrentPlaybackForVehicle(vehicle: number): number {
	return _in(0x42bc05c2, 0x7a946054, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function GetEntityAttachedToCargobob(vehicle: number): number {
	return _in(0x99093f60, 0x746708ca, vehicle, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 */
export function GetDoesVehicleHaveTombstone(vehicle: number): boolean {
	return _in(0x71afb258, 0xcced3a27, vehicle, _r); 
}

/**
 * 
 * @param towTruck
 */
export function getEntityAttachedToTowTruck(towTruck: number): number {
	return _in(0xefea18dc, 0xf10f8f75, towTruck, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 */
export function GetDriftTyresEnabled(vehicle: number): boolean {
	return _in(0x2f5a7243, 0x0e78c8d3, vehicle, _r); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 */
export function GetEntryPositionOfDoor(vehicle: number, doorIndex: number): Vector3 {
	return _in(0xc0572928, 0xc0abfda3, vehicle, doorIndex, _r, _rv); 
}

/**
 * 
 * @param vehicle
 */
export function GetHasRetractableWheels(vehicle: number): boolean {
	return _in(0xdca174a4, 0x2133f08c, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function GetHasRocketBoost(vehicle: number): boolean {
	return _in(0x36d782f6, 0x8b309bda, vehicle, _r); 
}

/**
 * ```
 * Max 1000.
 * At -100 both helicopter rotors will stall.
 * ```
 * @param vehicle
 */
export function getHeliTailBoomHealth(vehicle: number): number {
	return _in(0xac51915d, 0x27e4a5f7, vehicle, _r, _rf); 
}

/**
 * ```
 * Max 1000.
 * At 0 the main rotor will stall.
 * ```
 * @param vehicle
 */
export function getHeliMainRotorHealth(vehicle: number): number {
	return _in(0xe4cb7541, 0xf413d2c5, vehicle, _r, _rf); 
}

/**
 * ```
 * Max 1000.
 * At 0 the tail rotor will stall.
 * ```
 * @param vehicle
 */
export function getHeliTailRotorHealth(vehicle: number): number {
	return _in(0xae8ce82a, 0x4219ac8c, vehicle, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 * @param wheelId
 */
export function GetHydraulicWheelValue(vehicle: number, wheelId: number): number {
	return _in(0x0bb5cbdd, 0xd0f25ae3, vehicle, wheelId, _r, _rf); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 */
export function GetIsDoorValid(vehicle: number, doorIndex: number): boolean {
	return _in(0x645f4b6e, 0x8499f632, vehicle, doorIndex, _r); 
}

/**
 * ```
 * From the driver's perspective, is the left headlight broken.
 * ```
 * @param vehicle
 */
export function getIsLeftVehicleHeadlightDamaged(vehicle: number): boolean {
	return _in(0x5ef77c9a, 0xdd3b11a3, vehicle, _r); 
}

/**
 * ```
 * Returns true when in a vehicle, false whilst entering/exiting.
 * ```
 * @param vehicle
 */
export function getIsVehicleEngineRunning(vehicle: number): boolean {
	return _in(0xae31e7df, 0x9b5b132e, vehicle, _r); 
}

/**
 * ```
 * From the driver's perspective, is the right headlight broken.
 * ```
 * @param vehicle
 */
export function getIsRightVehicleHeadlightDamaged(vehicle: number): boolean {
	return _in(0xa7ecb733, 0x55eb2f20, vehicle, _r); 
}

/**
 * ```
 * Returns whether this vehicle is currently disabled by an EMP mine.
 * 
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 */
export function GetIsVehicleEmpDisabled(vehicle: number): boolean {
	return _in(0x0506ed94, 0x363ad905, vehicle, _r); 
}

/**
 * ```
 * Check if Vehicle Secondary is avaliable for customize
 * ```
 * @param vehicle
 */
export function getIsVehicleSecondaryColourCustom(vehicle: number): boolean {
	return _in(0x910a32e7, 0xaad2656c, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function getIsVehiclePrimaryColourCustom(vehicle: number): boolean {
	return _in(0xf095c040, 0x5307b21b, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function GetIsWheelsLoweredStateActive(vehicle: number): boolean {
	return _in(0x1da0da9c, 0xb3f0c8bf, vehicle, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 */
export function GetIsVehicleShuntBoostActive(vehicle: number): boolean {
	return _in(0xa2459f72, 0xc14e2e8d, vehicle, _r); 
}

/**
 * 
 */
export function getLastDrivenVehicle(): number {
	return _in(0xb2d06fae, 0xde65b577, _r); 
}

/**
 * ```
 * Second Param = LiveryIndex
 * example
 * int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
 * for (int i = 0; i < count; i++)
 * {
 * char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
 * }
 * this example will work fine to fetch all names
 * for example for Sanchez we get
 * SANC_LV1
 * SANC_LV2
 * SANC_LV3
 * SANC_LV4
 * SANC_LV5
 * Use _GET_LABEL_TEXT, to get the localized livery name.
 * -----------
 * NOTE: You may need to set the vehicle's modKit to 0 by using this function: SET_VEHICLE_MOD_KIT() before getting the name, otherwise this native may return NULL.
 * dev-c.com/nativedb/func/info/1f2aa07f00b3217a
 * ```
 * @param vehicle
 * @param liveryIndex
 */
export function getLiveryName(vehicle: number, liveryIndex: number): string {
	return _in(0xb4c7a938, 0x37c91a1f, vehicle, liveryIndex, _r, _s); 
}

/**
 * ```
 * Landing gear states:
 * 0: Deployed
 * 1: Closing (Retracting)
 * 3: Opening (Deploying)
 * 4: Retracted
 * 5: Broken
 * ```
 * 
 * Landing gear state 2 is never used.
 * @param vehicle
 * @return The current state of the vehicles landing gear.
 */
export function getLandingGearState(vehicle: number): number {
	return _in(0x9b0f3dca, 0x3db0f4cd, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param seatIndex
 */
export function getLastPedInVehicleSeat(vehicle: number, seatIndex: number): number {
	return _in(0x83f969aa, 0x1ee2a664, vehicle, seatIndex, _r); 
}

/**
 * ```
 * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
 * 
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 */
export function GetLastRammedVehicle(vehicle: number): number {
	return _in(0x04f2fa6e, 0x234162f7, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param modType
 */
export function getModSlotName(vehicle: number, modType: number): string {
	return _in(0x51f0feb9, 0xf6ae98c0, vehicle, modType, _r, _s); 
}

/**
 * Will return a vehicle's manufacturer display label.
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 * 
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param modelHash
 */
export function GetMakeNameFromVehicleModel(modelHash: number): string {
	return _in(0xf7af4f15, 0x9ff99f97, _ch(modelHash), _r, _s); 
}

/**
 * ```
 * Returns the text label of a mod type for a given vehicle
 * Use _GET_LABEL_TEXT to get the part name in the game's language
 * ```
 * @param vehicle
 * @param modType
 * @param modValue
 */
export function getModTextLabel(vehicle: number, modType: number, modValue: number): string {
	return _in(0x8935624f, 0x8c5592cc, vehicle, modType, modValue, _r, _s); 
}

/**
 * ```
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * ```
 * @param paintType
 * @param p1
 */
export function getNumModColors(paintType: number, p1: boolean): number {
	return _in(0xa551be18, 0xc11a476d, paintType, p1, _r, _ri); 
}

/**
 * ```
 * Returns how many possible mods a vehicle has for a given mod type
 * ```
 * @param vehicle
 * @param modType
 */
export function getNumVehicleMods(vehicle: number, modType: number): number {
	return _in(0xe38e9162, 0xa2500646, vehicle, modType, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function getNumModKits(vehicle: number): number {
	return _in(0x33f2e3fe, 0x70eaae1d, vehicle, _r, _ri); 
}

/**
 * 
 */
export function getNumVehicleWindowTints(): number {
	return _in(0x9d122400, 0x4b3a6707, _r, _ri); 
}

/**
 * ```
 * Actually number of color combinations
 * ```
 * @param vehicle
 */
export function getNumberOfVehicleColours(vehicle: number): number {
	return _in(0x3b963160, 0xcd65d41e, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function GetNumberOfVehicleDoors(vehicle: number): number {
	return _in(0x92922a60, 0x7497b14d, vehicle, _r, _ri); 
}

/**
 * ```
 * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
 * ```
 */
export function getNumberOfVehicleNumberPlates(): number {
	return _in(0x4c4d6b26, 0x44f458cb, _r, _ri); 
}

/**
 * Gets the ped in the specified seat of the passed vehicle.
 * 
 * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
 * 
 * **NativeDB Added Parameter 3**: BOOL p2 (uses a different GetOccupant function)
 * @param vehicle
 * @param seatIndex
 * @return A handle to a ped in the specified vehicle seat, or 0 if no such ped existed.
 */
export function getPedInVehicleSeat(vehicle: number, seatIndex: number): number {
	return _in(0xbb40dd22, 0x70b65366, vehicle, seatIndex, _r); 
}

/**
 * ```
 * Distance traveled in the vehicles current recording.
 * ```
 * @param vehicle
 */
export function getPositionInRecording(vehicle: number): number {
	return _in(0x2dacd605, 0xfc681475, vehicle, _r, _rf); 
}

/**
 * 
 * @param id
 * @param time
 */
export function getPositionOfVehicleRecordingIdAtTime(id: number, time: number): Vector3 {
	return _in(0x92523b76, 0x657a517d, id, _fv(time), _r, _rv); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 */
export function getPedUsingVehicleDoor(vehicle: number, doorIndex: number): number {
	return _in(0x218297bf, 0x0cfd853b, vehicle, doorIndex, _r); 
}

/**
 * ```
 * Gets a random vehicle in a sphere at the specified position, of the specified radius.
 * x: The X-component of the position of the sphere.
 * y: The Y-component of the position of the sphere.
 * z: The Z-component of the position of the sphere.
 * radius: The radius of the sphere. Max is 9999.9004.
 * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
 * flags: The bitwise flags that modifies the behaviour of this function.
 * ```
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
export function getRandomVehicleInSphere(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number {
	return _in(0x386f6ce5, 0xbaf6091c, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r); 
}

/**
 * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
 * 
 * See [`REQUEST_VEHICLE_RECORDING`](#\_0xAF514CABE74CBF15).
 * @param recording
 * @param time
 * @param script
 */
export function getPositionOfVehicleRecordingAtTime(recording: number, time: number, script: string): Vector3 {
	return _in(0xd242728a, 0xa6f0fba2, recording, _fv(time), _ts(script), _r, _rv); 
}

/**
 * ```
 * Not present in the retail version! It's just a nullsub.
 * p0 always true (except in one case)
 * p1 a random vehicle hash loaded in memory
 * successIndicator: 0 if success, -1 if failed
 * ```
 * @param p0
 * @param modelHash
 * @param successIndicator
 */
export function getRandomVehicleModelInMemory(p0: boolean): void {
	return _in(0x055bf0ac, 0x0c34f4fd, p0, _i, _i); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function getRandomVehicleBackBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number {
	return _in(0xb50807ea, 0xbe20a8dc, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, _r); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function getRandomVehicleFrontBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number {
	return _in(0xc5574e0a, 0xeb86ba68, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, _r); 
}

/**
 * 
 * @param recording
 * @param time
 * @param script
 */
export function getRotationOfVehicleRecordingAtTime(recording: number, time: number, script: string): Vector3 {
	return _in(0x2058206f, 0xbe79a8ad, recording, _fv(time), _ts(script), _r, _rv); 
}

/**
 * 
 * @param id
 * @param time
 */
export function getRotationOfVehicleRecordingIdAtTime(id: number, time: number): Vector3 {
	return _in(0xf0f2103e, 0xfaf8cba7, id, _fv(time), _r, _rv); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param submarine
 */
export function GetSubmarineCrushDepthWarningState(submarine: number): number {
	return _in(0x093d6ddc, 0xa5b8fbae, submarine, _r, _ri); 
}

/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * @param submarine
 */
export function GetSubmarineIsBelowFirstCrushDepth(submarine: number): boolean {
	return _in(0x3e71d0b3, 0x00b7aa79, submarine, _r); 
}

/**
 * ```
 * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
 * ```
 * @param vehicle
 */
export function getTimePositionInRecording(vehicle: number): number {
	return _in(0x5746f3a7, 0xab7fe544, vehicle, _r, _rf); 
}

/**
 * 
 * @param id
 */
export function getTotalDurationOfVehicleRecordingId(id: number): number {
	return _in(0x102d1254, 0x11a7b6e6, id, _r, _rf); 
}

/**
 * ```
 * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
 * ```
 * @param train
 * @param trailerNumber
 */
export function getTrainCarriage(train: number, trailerNumber: number): number {
	return _in(0x08aafd08, 0x14722bc3, train, trailerNumber, _r); 
}

/**
 * 
 * @param recording
 * @param script
 */
export function getTotalDurationOfVehicleRecording(recording: number, script: string): number {
	return _in(0x0e48d1c2, 0x62390950, recording, _ts(script), _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param vehicle
 * @param wheelIndex
 */
export function GetTyreHealth(vehicle: number, wheelIndex: number): number {
	return _in(0x55eab010, 0xfaee9380, vehicle, wheelIndex, _r, _rf); 
}

/**
 * ```
 * static - max acceleration
 * ```
 * @param vehicle
 */
export function getVehicleAcceleration(vehicle: number): number {
	return _in(0x5dd35c8d, 0x074e57ae, vehicle, _r, _rf); 
}

/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param vehicle
 * @param wheelIndex
 */
export function GetTyreWearMultiplier(vehicle: number, wheelIndex: number): number {
	return _in(0x6e387895, 0x952f4f71, vehicle, wheelIndex, _r, _rf); 
}

/**
 * ```
 * Returns attached vehicle (Vehicle in parameter must be cargobob)
 * ```
 * @param cargobob
 */
export function getVehicleAttachedToCargobob(cargobob: number): number {
	return _in(0x873b82d4, 0x2ac2b9e5, cargobob, _r); 
}

/**
 * 
 * @param vehicle
 */
export function GetVehicleCanActivateParachute(vehicle: number): boolean {
	return _in(0xa916396d, 0xf4154ee3, vehicle, _r); 
}

/**
 * ```
 * Returns an int
 * Vehicle Classes:
 * 0: Compacts
 * 1: Sedans
 * 2: SUVs
 * 3: Coupes
 * 4: Muscle
 * 5: Sports Classics
 * 6: Sports
 * 7: Super
 * 8: Motorcycles
 * 9: Off-road
 * 10: Industrial
 * 11: Utility
 * 12: Vans
 * 13: Cycles
 * 14: Boats
 * 15: Helicopters
 * 16: Planes
 * 17: Service
 * 18: Emergency
 * 19: Military
 * 20: Commercial
 * 21: Trains
 * 22: Open Wheel
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
 * char* className = UI::_GET_LABEL_TEXT(buffer);
 * ```
 * @param vehicle
 */
export function getVehicleClass(vehicle: number): number {
	return _in(0x29439776, 0xaaa00a62, vehicle, _r, _ri); 
}

/**
 * ```
 * Seems related to vehicle health, like the one in IV.
 * Max 1000, min 0.
 * Vehicle does not necessarily explode or become undrivable at 0.
 * ```
 * @param vehicle
 */
export function getVehicleBodyHealth(vehicle: number): number {
	return _in(0xf271147e, 0xb7b40f12, vehicle, _r, _rf); 
}

/**
 * ```
 * For a full enum, see here : pastebin.com/i2GGAjY0
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
 * const char* className = HUD::_GET_LABEL_TEXT(buffer);
 * ```
 * @param modelHash
 */
export function getVehicleClassFromName(modelHash: number): number {
	return _in(0xdedf1c8b, 0xd47c2200, _ch(modelHash), _r, _ri); 
}

/**
 * Gets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * 
 * In decompiled scripts this is used to check if the vehicle has enough bombs before a bomb can be dropped (bombs are dropped by using [`_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS`](#\_0xBFE5756E7407064A)).
 * 
 * Use [`_SET_AIRCRAFT_BOMB_COUNT`](#\_0xF4B2ED59DEB5D774) to set the amount of bombs on that vehicle.
 * @param aircraft
 * @return An int indicating the amount of bombs remaining on that plane.
 */
export function GetVehicleBombCount(aircraft: number): number {
	return _in(0xea12bd13, 0x0d7569a1, aircraft, _r, _ri); 
}

/**
 * 
 * @param vehicleClass
 */
export function getVehicleClassMaxAcceleration(vehicleClass: number): number {
	return _in(0x2f83e7e4, 0x5d9ea7ae, vehicleClass, _r, _rf); 
}

/**
 * 
 * @param vehicle
 * @return A hash representing the destruction cause. These can be weapon hashes.
 */
export function getVehicleCauseOfDestruction(vehicle: number): number {
	return _in(0xe495d1ef, 0x4c91fd20, vehicle, _r); 
}

/**
 * 
 * @param vehicleClass
 */
export function getVehicleClassEstimatedMaxSpeed(vehicleClass: number): number {
	return _in(0x00c09f24, 0x6abedd82, vehicleClass, _r, _rf); 
}

/**
 * 
 * @param vehicleClass
 */
export function getVehicleClassMaxAgility(vehicleClass: number): number {
	return _in(0x4f930ad0, 0x22d6de3b, vehicleClass, _r, _rf); 
}

/**
 * 
 * @param vehicleClass
 */
export function getVehicleClassMaxTraction(vehicleClass: number): number {
	return _in(0xdbc86d85, 0xc5059461, vehicleClass, _r, _rf); 
}

/**
 * 
 * @param vehicleClass
 */
export function getVehicleClassMaxBraking(vehicleClass: number): number {
	return _in(0x4bf54c16, 0xec8fec03, vehicleClass, _r, _rf); 
}

/**
 * See [`SET_VEHICLE_CUSTOM_PRIMARY_COLOUR`](#\_0x7141766F91D15BEA) and [`SET_VEHICLE_CUSTOM_SECONDARY_COLOUR`](#\_0x36CED73BFED89754).
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function getVehicleColor(vehicle: number): void {
	return _in(0xf3cc740d, 0x36221548, vehicle, _i, _i, _i); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleColourCombination(vehicle: number): number {
	return _in(0x6a842d19, 0x7f845d56, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param colorPrimary
 * @param colorSecondary
 */
export function getVehicleColours(vehicle: number): void {
	return _in(0xa19435f1, 0x93e081ac, vehicle, _i, _i); 
}

/**
 * ```
 * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
 * GET_VEHICLE_*
 * ```
 * @param vehicle
 */
export function GetVehicleCurrentSlipstreamDraft(vehicle: number): number {
	return _in(0x36492c2f, 0x0d134c56, vehicle, _r, _rf); 
}

/**
 * Similar to [`_GET_AIRCRAFT_BOMB_COUNT`](#\_0xEA12BD130D7569A1), this gets the amount of countermeasures that are present on this vehicle.
 * 
 * Use [`_SET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\_0x9BDA23BF666F0855) to set the current amount.
 * @param aircraft
 * @return An int indicating the amount of countermeasures remaining on that plane.
 */
export function GetVehicleCountermeasureCount(aircraft: number): number {
	return _in(0xf846aa63, 0xdf56b804, aircraft, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function getVehicleCustomSecondaryColour(vehicle: number): void {
	return _in(0x8389cd56, 0xca8072dc, vehicle, _i, _i, _i); 
}

/**
 * 
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function getVehicleCustomPrimaryColour(vehicle: number): void {
	return _in(0xb64cf2cc, 0xa9d95f52, vehicle, _i, _i, _i); 
}

/**
 * 
 * @param vehicle
 * @param color
 */
export function GetVehicleDashboardColor(vehicle: number): void {
	return _in(0xb7635e80, 0xa5c31bff, vehicle, _ii(color)); 
}

/**
 * ```
 * The only example I can find of this function in the scripts, is this:
 * struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * PC scripts:
 * v_5 -- [[{3}]]  = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
 * ```
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function getVehicleDeformationAtPos(vehicle: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 {
	return _in(0x4ec6cfbc, 0x7b2e9536, vehicle, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv); 
}

/**
 * A getter for [`SET_VEHICLE_DIRT_LEVEL`](#\_0x79D3B596FE44EE8B).
 * @param vehicle
 * @return A number between 0.0 and 15.0 representing the vehicles dirt level.
 */
export function getVehicleDirtLevel(vehicle: number): number {
	return _in(0x8f17bc8b, 0xa08da62b, vehicle, _r, _rf); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * 
 * Returns vehicle door destroy type previously set with \_SET_VEHICLE_DOOR_DESTROY_TYPE
 * @param vehicle
 * @param doorIndex
 */
export function GetVehicleDoorDestroyType(vehicle: number, doorIndex: number): number {
	return _in(0xca4ac3ea, 0xae46ec7b, vehicle, doorIndex, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param player
 */
export function getVehicleDoorsLockedForPlayer(vehicle: number, player: number): boolean {
	return _in(0xf6af6cb3, 0x41349015, vehicle, player, _r); 
}

/**
 * Checks the angle of the door mapped from 0.0 - 1.0 where 0.0 is fully closed and 1.0 is fully open.
 * 
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 * @return A float representing angle of door mapped from 0.0 to 1.0
 */
export function getVehicleDoorAngleRatio(vehicle: number, doorIndex: number): number {
	return _in(0xfe3f9c29, 0xf7b32bd5, vehicle, doorIndex, _r, _rf); 
}

/**
 * ```
 * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
 * Minimum: -4000
 * Maximum: 1000
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * ```
 * @param vehicle
 */
export function getVehicleEngineHealth(vehicle: number): number {
	return _in(0xc45d23ba, 0xf168aab8, vehicle, _r, _rf); 
}

/**
 * ```
 * formerly known as _GET_VEHICLE_PAINT_FADE
 * The result is a value from 0-1, where 0 is fresh paint.
 * ```
 * @param vehicle
 */
export function getVehicleEnveffScale(vehicle: number): number {
	return _in(0xa82819ca, 0xc9c4c403, vehicle, _r, _rf); 
}

/**
 * ```
 * enum VehicleLockStatus = {
 * None = 0,
 * Unlocked = 1,
 * Locked = 2,
 * LockedForPlayer = 3,
 * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
 * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
 * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
 * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
 * }
 * ```
 * @param vehicle
 */
export function getVehicleDoorLockStatus(vehicle: number): number {
	return _in(0x25bc98a5, 0x9c2ea962, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleEstimatedMaxSpeed(vehicle: number): number {
	return _in(0x53af99ba, 0xa671ca47, vehicle, _r, _rf); 
}

/**
 * 
 * @param vehicle
 * @param pearlescentColor
 * @param wheelColor
 */
export function getVehicleExtraColours(vehicle: number): void {
	return _in(0x3bc42459, 0x33a166f7, vehicle, _i, _i); 
}

/**
 * 
 * @param aircraft
 * @return A float indicating the percentage of the hover mode. 1.0 = in VTOL mode, 0.0 = in normal flying mode.
 */
export function getVehicleFlightNozzlePosition(aircraft: number): number {
	return _in(0xda62027c, 0x8bdb326e, aircraft, _r, _rf); 
}

/**
 * 
 * @param vehicle
 */
export function GetVehicleHasParachute(vehicle: number): boolean {
	return _in(0xbc9cff38, 0x1338cb4f, vehicle, _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: float maxEngineHealth
 * NativeDB Added Parameter 3: float maxPetrolTankHealth
 * NativeDB Added Parameter 4: float maxBodyHealth
 * NativeDB Added Parameter 5: float maxMainRotorHealth
 * NativeDB Added Parameter 6: float maxTailRotorHealth
 * NativeDB Added Parameter 7: float maxUnkHealth
 * ```
 * @param vehicle
 */
export function getVehicleHealthPercentage(vehicle: number): number {
	return _in(0xb8ef6120, 0x7c2393a9, vehicle, _r, _rf); 
}

/**
 * 
 * @param vehicle
 * @return Returns true if the vehicle has a kers boost (for instance the lectro or the vindicator)
 */
export function getVehicleHasKers(vehicle: number): boolean {
	return _in(0x50634e34, 0x8c8d44ef, vehicle, _r); 
}

/**
 * ```
 * Returns a value depending on the lock-on state of vehicle weapons.
 * 0: not locked on
 * 1: locking on
 * 2: locked on
 * ```
 * @param vehicle
 */
export function getVehicleHomingLockonState(vehicle: number): number {
	return _in(0xe6b0e8cf, 0xc3633bf0, vehicle, _r, _ri); 
}

/**
 * ```
 * Only used like this:
 * if (VEHICLE::GET_VEHICLE_IS_MERCENARY(ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(v_3))) {                                                        sub_157e9c(g_40001._f1868, 0);
 * }
 * ```
 * @param vehicle
 */
export function getVehicleIsMercenary(vehicle: number): boolean {
	return _in(0xd4c4642c, 0xb7f50b5d, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param color
 */
export function GetVehicleInteriorColor(vehicle: number): void {
	return _in(0x7d1464d4, 0x72d32136, vehicle, _ii(color)); 
}

/**
 * 
 * @param vehicle
 * @param lightsOn
 * @param highbeamsOn
 */
export function getVehicleLightsState(vehicle: number): boolean {
	return _in(0xb91b4c20, 0x085bd12f, vehicle, _i, _i, _r); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleLayoutHash(vehicle: number): number {
	return _in(0x28d37d4f, 0x71ac5c58, vehicle, _r); 
}

/**
 * ```
 * -1 = no livery
 * ```
 * @param vehicle
 */
export function getVehicleLivery(vehicle: number): number {
	return _in(0x2bb92305, 0x90da5e8a, vehicle, _r, _ri); 
}

/**
 * ```
 * Returns -1 if the vehicle has no livery
 * ```
 * @param vehicle
 */
export function getVehicleLiveryCount(vehicle: number): number {
	return _in(0x87b63e25, 0xa529d526, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param entity
 */
export function getVehicleLockOnTarget(vehicle: number): boolean {
	return _in(0x8f5ebab1, 0xf260cfce, vehicle, _i, _r); 
}

/**
 * ```
 * Returns -1 if the vehicle mod is stock
 * ```
 * @param vehicle
 * @param modType
 */
export function getVehicleMod(vehicle: number, modType: number): number {
	return _in(0x77296029, 0x8da26fdb, vehicle, modType, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleMaxBraking(vehicle: number): number {
	return _in(0xad7e85fc, 0x227197c4, vehicle, _r, _rf); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleMaxTraction(vehicle: number): number {
	return _in(0xa132fb53, 0x70554db0, vehicle, _r, _rf); 
}

/**
 * ```
 * returns a string which is the codename of the vehicle's currently selected primary color
 * p1 is always 0
 * ```
 * @param vehicle
 * @param p1
 */
export function getVehicleModColor1Name(vehicle: number, p1: boolean): string {
	return _in(0xb45085b7, 0x21efd38c, vehicle, p1, _r, _s); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleMaxNumberOfPassengers(vehicle: number): number {
	return _in(0xa7c4f2c6, 0xe744a550, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param paintType
 * @param color
 * @param pearlescentColor
 */
export function getVehicleModColor1(vehicle: number): void {
	return _in(0xe8d65ca7, 0x00c9a693, vehicle, _i, _i, _i); 
}

/**
 * ```
 * Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
 * ```
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export function getVehicleModIdentifierHash(vehicle: number, modType: number, modIndex: number): number {
	return _in(0x4593cf82, 0xaa179706, vehicle, modType, modIndex, _r); 
}

/**
 * 
 * @param vehicle
 * @param paintType
 * @param color
 */
export function getVehicleModColor2(vehicle: number): void {
	return _in(0x81592be4, 0xe3878728, vehicle, _i, _i); 
}

/**
 * ```
 * returns a string which is the codename of the vehicle's currently selected secondary color
 * ```
 * @param vehicle
 */
export function getVehicleModColor2Name(vehicle: number): string {
	return _in(0x4967a516, 0xed23a5a1, vehicle, _r, _s); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleModKitType(vehicle: number): number {
	return _in(0xfc058f51, 0x21e54c32, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleModKit(vehicle: number): number {
	return _in(0x6325d1a0, 0x44ae510d, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export function getVehicleModModifierValue(vehicle: number, modType: number, modIndex: number): number {
	return _in(0x90a38e98, 0x38e0a8c1, vehicle, modType, modIndex, _r, _ri); 
}

/**
 * ```
 * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
 * ```
 * @param vehicle
 * @param modType
 */
export function getVehicleModVariation(vehicle: number, modType: number): boolean {
	return _in(0xb3924ecd, 0x70e095dc, vehicle, modType, _r); 
}

/**
 * Returns the acceleration of the specified model.
 * @param modelHash
 */
export function getVehicleModelAcceleration(modelHash: number): number {
	return _in(0x8c044c5c, 0x84505b6a, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * Returns max braking of the specified vehicle model.
 * ```
 * @param modelHash
 */
export function getVehicleModelMaxBraking(modelHash: number): number {
	return _in(0xdc53fd41, 0xb4ed944c, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * GET_VEHICLE_MODEL_*
 * 9.8 * thrust if air vehicle, else 0.38 + drive force?
 * ```
 * @param modelHash
 */
export function GetVehicleModelEstimatedAgility(modelHash: number): number {
	return _in(0x53409b51, 0x63d5b846, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * Returns max speed (without mods) of the specified vehicle model in m/s.
 * ```
 * @param modelHash
 */
export function getVehicleModelEstimatedMaxSpeed(modelHash: number): number {
	return _in(0xf417c250, 0x2fffed43, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * Returns max traction of the specified vehicle model.
 * ```
 * @param modelHash
 */
export function getVehicleModelMaxTraction(modelHash: number): number {
	return _in(0x539de94d, 0x44fdfd0d, _ch(modelHash), _r, _rf); 
}

/**
 * 
 * @param modelHash
 */
export function getVehicleModelMaxBrakingMaxMods(modelHash: number): number {
	return _in(0xbfba3ba7, 0x9cff7ebf, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * GET_VEHICLE_MODEL_*
 * called if the vehicle is a boat -- returns vecMoveResistanceX?
 * ```
 * @param modelHash
 */
export function GetVehicleModelMoveResistance(modelHash: number): number {
	return _in(0x5aa3f878, 0xa178c4fc, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * GET_VEHICLE_MODEL_*
 * Function pertains only to aviation vehicles.
 * ```
 * @param modelHash
 */
export function GetVehicleModelMaxKnots(modelHash: number): number {
	return _in(0xc6ad107d, 0xdc9054cc, _ch(modelHash), _r, _rf); 
}

/**
 * ```
 * Returns `nMonetaryValue` from handling.meta for specific model, which is the vehicle's monetary value.
 * ```
 * @param vehicleModel
 */
export function getVehicleModelValue(vehicleModel: number): number {
	return _in(0x5873c14a, 0x52d74236, _ch(vehicleModel), _r, _ri); 
}

/**
 * ```
 * Returns max number of passengers (including the driver) for the specified vehicle model.
 * ```
 * @param modelHash
 */
export function getVehicleModelNumberOfSeats(modelHash: number): number {
	return _in(0x2ad93716, 0xf184eda4, _ch(modelHash), _r, _ri); 
}

/**
 * Gets the color of the neon lights of the specified vehicle.
 * 
 * See [`_SET_VEHICLE_NEON_LIGHTS_COLOUR`](#\_0x8E0A582209A62695) for more information
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function GetVehicleNeonLightsColour(vehicle: number): void {
	return _in(0x7619eee8, 0xc886757f, vehicle, _i, _i, _i); 
}

/**
 * 
 * @param vehicle
 */
export function GetVehicleNumberOfBrokenBones(vehicle: number): number {
	return _in(0x2c8cbfe1, 0xea5fc631, vehicle, _r, _ri); 
}

/**
 * ```
 * Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
 * ```
 * @param vehicle
 */
export function getVehicleNumberOfPassengers(vehicle: number): number {
	return _in(0x24cb2137, 0x731ffe89, vehicle, _r, _ri); 
}

/**
 * ```
 * Also includes some "turnOffBones" when vehicle mods are installed.
 * ```
 * @param vehicle
 */
export function GetVehicleNumberOfBrokenOffBones(vehicle: number): number {
	return _in(0x42a4beb3, 0x5d372407, vehicle, _r, _ri); 
}

/**
 * ```
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * ```
 * @param vehicle
 */
export function getVehiclePetrolTankHealth(vehicle: number): number {
	return _in(0x7d5dabe8, 0x88d2d074, vehicle, _r, _rf); 
}

/**
 * ```
 * Returns the license plate text from a vehicle.  8 chars maximum.
 * ```
 * @param vehicle
 */
export function getVehicleNumberPlateText(vehicle: number): string {
	return _in(0x7ce1ccb9, 0xb293020e, vehicle, _r, _s); 
}

/**
 * ```
 * Returns the PlateType of a vehicle
 * Blue_on_White_1 = 3,
 * Blue_on_White_2 = 0,
 * Blue_on_White_3 = 4,
 * Yellow_on_Blue = 2,
 * Yellow_on_Black = 1,
 * North_Yankton = 5,
 * ```
 * @param vehicle
 */
export function getVehicleNumberPlateTextIndex(vehicle: number): number {
	return _in(0xf11bc2dd, 0x9a3e7195, vehicle, _r, _ri); 
}

/**
 * See [`REQUEST_VEHICLE_RECORDING`](#\_0xAF514CABE74CBF15).
 * @param recording
 * @param script
 */
export function getVehicleRecordingId(recording: number, script: string): number {
	return _in(0x21543c61, 0x2379db3c, recording, _ts(script), _r, _ri); 
}

/**
 * Returns the plates a vehicle has.
 * 
 * ```
 * enum eVehiclePlateType
 * {
 * VPT_FRONT_AND_BACK_PLATES = 0,
 * VPT_FRONT_PLATES = 1,
 * VPT_BACK_PLATES = 2,
 * VPT_NONE = 3,
 * };
 * ```
 * 
 * Motorcycles with no visible plates will sometimes return a 2 for unknown reasons.
 * @param vehicle
 */
export function getVehiclePlateType(vehicle: number): number {
	return _in(0x9ccc9525, 0xbf2408e0, vehicle, _r, _ri); 
}

/**
 * Returns index of the current vehicle's rooftop livery.
 * A getter for [\_SET_VEHICLE_ROOF_LIVERY](#\_0xA6D3A8750DC73270).
 * @param vehicle
 * @return An index of the current vehicle's rooftop livery.
 */
export function GetVehicleRoofLivery(vehicle: number): number {
	return _in(0x60190048, 0xc0764a26, vehicle, _r, _ri); 
}

/**
 * Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.
 * @param vehicle
 * @return A number of available rooftop liveries for vehicle.
 */
export function GetVehicleRoofLiveryCount(vehicle: number): number {
	return _in(0x5ecb4026, 0x9053c0d4, vehicle, _r, _ri); 
}

/**
 * ```
 * Outputs 2 Vector3's.
 * Scripts check if out2.x - out1.x > something.x
 * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
 * ```
 * @param vehicle
 * @param out1
 * @param out2
 */
export function GetVehicleSuspensionBounds(vehicle: number): void {
	return _in(0xdf7e3eeb, 0x29642c38, vehicle, _v(out1), _v(out2)); 
}

/**
 * ```
 * Gets the height of the vehicle's suspension.
 * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
 * 0.000 is the stock suspension.
 * 0.008 is Ultra Suspension.
 * ```
 * @param vehicle
 */
export function GetVehicleSuspensionHeight(vehicle: number): number {
	return _in(0x53952fd2, 0xbaa19f17, vehicle, _r, _rf); 
}

/**
 * ```
 * Gets the trailer of a vehicle and puts it into the trailer parameter.
 * ```
 * @param vehicle
 * @param trailer
 */
export function getVehicleTrailerVehicle(vehicle: number): boolean {
	return _in(0x1cdd6bad, 0xc297830d, vehicle, _i, _r); 
}

/**
 * 
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function getVehicleTyreSmokeColor(vehicle: number): void {
	return _in(0xb635392a, 0x4938b3c3, vehicle, _i, _i, _i); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleTyresCanBurst(vehicle: number): boolean {
	return _in(0x678b9bb8, 0xc3f58feb, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param weaponIndex
 */
export function GetVehicleWeaponCapacity(vehicle: number, weaponIndex: number): number {
	return _in(0x8181ce2f, 0x25cb9bb7, vehicle, weaponIndex, _r, _ri); 
}

/**
 * ```cpp
 * enum eVehicleWheelType
 * {
 * VWT_SPORT = 0,
 * VWT_MUSCLE = 1,
 * VWT_LOWRIDER = 2,
 * VWT_SUV = 3,
 * VWT_OFFROAD = 4,
 * VWT_TUNER = 5,
 * VWT_BIKE = 6,
 * VWT_HIEND = 7,
 * VWT_SUPERMOD1 = 8, // Benny's Original
 * VWT_SUPERMOD2 = 9, // Benny's Bespoke
 * VWT_SUPERMOD3 = 10, // Open Wheel
 * VWT_SUPERMOD4 = 11, // Street
 * VWT_SUPERMOD5 = 12, // Track
 * };
 * ```
 * @param vehicle
 * @return Returns an eVehicleWheelType integer value.
 */
export function getVehicleWheelType(vehicle: number): number {
	return _in(0xb3ed1bfb, 0x4be636dc, vehicle, _r, _ri); 
}

/**
 * Returns the headlight color index from the vehicle. Value between 0, 12.
 * Use [\_SET_VEHICLE_HEADLIGHTS_COLOUR](#\_0xE41033B25D003A07) to set the headlights color for the vehicle.
 * Must enable xenon headlights before it'll take affect.
 * 
 * List of colors and ids:
 * 
 * ```
 * enum headlightColors {
 * Default = -1,
 * White = 0,
 * Blue = 1,
 * Electric_Blue = 2,
 * Mint_Green = 3,
 * Lime_Green = 4,
 * Yellow = 5,
 * Golden_Shower = 6,
 * Orange = 7,
 * Red = 8,
 * Pony_Pink = 9,
 * Hot_Pink = 10,
 * Purple = 11,
 * Blacklight = 12
 * }
 * ```
 * @param vehicle
 * @return Returns an int, value between 0-12 or 255 if no color is set.
 */
export function GetVehicleXenonLightsColor(vehicle: number): number {
	return _in(0x3dff319a, 0x831e0cdb, vehicle, _r, _ri); 
}

/**
 * 
 * @param vehicle
 */
export function getVehicleWindowTint(vehicle: number): number {
	return _in(0x0ee21293, 0xdad47c95, vehicle, _r, _ri); 
}

/**
 * ```
 * HAS_*
 * ```
 */
export function HasFilledVehiclePopulation(): boolean {
	return _in(0x91d6dd29, 0x0888cbab, _r); 
}

/**
 * 
 * @param vehicleAsset
 */
export function hasVehicleAssetLoaded(vehicleAsset: number): boolean {
	return _in(0x1bbe0523, 0xb8db9a21, vehicleAsset, _r); 
}

/**
 * 
 */
export function hasVehiclePhoneExplosiveDevice(): boolean {
	return _in(0x6adaabd3, 0x068c5235, _r); 
}

/**
 * 
 * @param p0
 */
export function hasPreloadModsFinished(p0: any): boolean {
	return _in(0x06f43e51, 0x75eb6d96, p0, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 * @param toggle
 */
export function HideVehicleTombstone(vehicle: number, toggle: boolean): void {
	return _in(0xae71fb65, 0x6c600587, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 */
export function haveVehicleModsStreamedIn(vehicle: number): boolean {
	return _in(0x9a83f5f9, 0x963775ef, vehicle, _r); 
}

/**
 * 
 * @param recording
 * @param script
 */
export function hasVehicleRecordingBeenLoaded(recording: number, script: string): boolean {
	return _in(0x300d614a, 0x4c785fc4, recording, _ts(script), _r); 
}

/**
 * 
 */
export function instantlyFillVehiclePopulation(): void {
	return _in(0x48adc8a7, 0x73564670); 
}

/**
 * 
 * @param vehicle
 */
export function isAnyEntityAttachedToHandlerFrame(vehicle: number): boolean {
	return _in(0x62ca17b7, 0x4c435651, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isAnyPedRappellingFromHeli(vehicle: number): boolean {
	return _in(0x291e373d, 0x483e7ee7, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isBigVehicle(vehicle: number): boolean {
	return _in(0x9f243d39, 0x19f442fe, vehicle, _r); 
}

/**
 * ```
 * Usage:
 * public bool isCopInRange(Vector3 Location, float Range)
 * {
 * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
 * }
 * ```
 * @param x1
 * @param x2
 * @param y1
 * @param y2
 * @param z1
 * @param z2
 */
export function isCopVehicleInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean {
	return _in(0x7eef65d5, 0xf153e26a, _fv(x1), _fv(x2), _fv(y1), _fv(y2), _fv(z1), _fv(z2), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isAnyVehicleNearPoint(x: number, y: number, z: number, radius: number): boolean {
	return _in(0x61e1dd61, 0x25a3eee6, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * ```
 * IS_*
 * ```
 * @param vehicle
 */
export function IsBoatAnchoredAndFrozen(vehicle: number): boolean {
	return _in(0xb0ad1238, 0xa709b1a2, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isHeliLandingAreaBlocked(vehicle: number): boolean {
	return _in(0x63414874, 0x4f385576, vehicle, _r); 
}

/**
 * 
 * @param handler
 * @param container
 */
export function IsHandlerFrameAboveContainer(handler: number, container: number): boolean {
	return _in(0x89d630cf, 0x5ea96d23, handler, container, _r); 
}

/**
 * 
 * @param vehicle
 * @param entity
 */
export function isEntityAttachedToHandlerFrame(vehicle: number, entity: number): boolean {
	return _in(0x57715966, 0x069157ad, vehicle, entity, _r); 
}

/**
 * 
 * @param vehicle
 * @param p1
 * @param p2
 * @param p3
 */
export function isHeliPartBroken(vehicle: number, p1: boolean, p2: boolean, p3: boolean): boolean {
	return _in(0xbc74b4be, 0x25eb6c8a, vehicle, p1, p2, p3, _r); 
}

/**
 * 
 * @param ped
 * @param vehicle
 * @param outIndex
 */
export function IsPedExclusiveDriverOfVehicle(ped: number, vehicle: number, outIndex: number): boolean {
	return _in(0xb09d25e7, 0x7c33eb3f, ped, vehicle, outIndex, _r); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 */
export function IsMissionTrain(vehicle: number): boolean {
	return _in(0xad464f2e, 0x18836bfc, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isPlaybackGoingOnForVehicle(vehicle: number): boolean {
	return _in(0x1c8a4c2c, 0x19e68eec, vehicle, _r); 
}

/**
 * 
 * @param plane
 */
export function isPlaneLandingGearIntact(plane: number): boolean {
	return _in(0x4198ab00, 0x22b15f87, plane, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isPlaybackUsingAiGoingOnForVehicle(vehicle: number): boolean {
	return _in(0xaea8fd59, 0x1fad4106, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param seatIndex
 */
export function isSeatWarpOnly(vehicle: number, seatIndex: number): boolean {
	return _in(0xf7f203e3, 0x1f96f6a1, vehicle, seatIndex, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isTaxiLightOn(vehicle: number): boolean {
	return _in(0x7504c0f1, 0x13ab50fc, vehicle, _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelABike(model: number): boolean {
	return _in(0xb50c0b0c, 0xedc6ce84, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelABicycle(model: number): boolean {
	return _in(0xbf94dd42, 0xf63bded2, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelABoat(model: number): boolean {
	return _in(0x45a91879, 0x28f4b9e3, _ch(model), _r); 
}

/**
 * ```
 * To check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)
 * ```
 * @param model
 */
export function isThisModelACar(model: number): boolean {
	return _in(0x7f6db52e, 0xefc96df8, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelAHeli(model: number): boolean {
	return _in(0xdce43347, 0x88af94ea, _ch(model), _r); 
}

/**
 * ```
 * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
 * ```
 * @param model
 */
export function IsThisModelAJetski(model: number): boolean {
	return _in(0x95370974, 0x12cf75fe, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelAPlane(model: number): boolean {
	return _in(0xa0948ab4, 0x2d7ba0de, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelAQuadbike(model: number): boolean {
	return _in(0x39dac362, 0xee65fa28, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function IsThisModelAnAmphibiousCar(model: number): boolean {
	return _in(0x633f6f44, 0xa537ebb6, _ch(model), _r); 
}

/**
 * 
 * @param model
 */
export function isThisModelATrain(model: number): boolean {
	return _in(0xab935175, 0xb22e822b, _ch(model), _r); 
}

/**
 * 
 * @param vehicle
 * @param modType
 */
export function isToggleModOn(vehicle: number, modType: number): boolean {
	return _in(0x84b233a8, 0xc8fc8ae7, vehicle, modType, _r); 
}

/**
 * 
 * @param model
 */
export function IsThisModelAnAmphibiousQuadbike(model: number): boolean {
	return _in(0xa1a9fc1c, 0x76a6730d, _ch(model), _r); 
}

/**
 * ```
 * p1 is false almost always.
 * However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF
 * ```
 * @param vehicle
 * @param p1
 */
export function isVehicleAConvertible(vehicle: number, p1: boolean): boolean {
	return _in(0x52f357a3, 0x0698bcce, vehicle, p1, _r); 
}

/**
 * 
 * @param vehicle
 * @param seatIndex
 */
export function isTurretSeat(vehicle: number, seatIndex: number): boolean {
	return _in(0xe33ffa90, 0x6ce74880, vehicle, seatIndex, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleAlarmActivated(vehicle: number): boolean {
	return _in(0x4319e335, 0xb71fff34, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleAttachedToTrailer(vehicle: number): boolean {
	return _in(0xe7cf3c4f, 0x9f489f0c, vehicle, _r); 
}

/**
 * 
 * @param cargobob
 * @param vehicleAttached
 */
export function isVehicleAttachedToCargobob(cargobob: number, vehicleAttached: number): boolean {
	return _in(0xd40148f2, 0x2e81a1d9, cargobob, vehicleAttached, _r); 
}

/**
 * ```
 * Scripts verify that towTruck is the first parameter, not the second.
 * ```
 * @param towTruck
 * @param vehicle
 */
export function isVehicleAttachedToTowTruck(towTruck: number, vehicle: number): boolean {
	return _in(0x146df9ec, 0x4c4b9fd4, towTruck, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param frontBumper
 */
export function isVehicleBumperBouncing(vehicle: number, frontBumper: boolean): boolean {
	return _in(0x27b92677, 0x9deb502d, vehicle, frontBumper, _r); 
}

/**
 * ```
 * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
 * _IS_VEHICLE_*
 * ```
 * 
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param vehicle
 */
export function IsVehicleBeingHalted(vehicle: number): boolean {
	return _in(0xc69bb1d8, 0x32a710ef, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param front
 */
export function isVehicleBumperBrokenOff(vehicle: number, front: boolean): boolean {
	return _in(0x468056a6, 0xbb6f3846, vehicle, front, _r); 
}

/**
 * ```
 * Appears to return true if the vehicle has any damage, including cosmetically.
 * GET_*
 * ```
 * @param vehicle
 */
export function IsVehicleDamaged(vehicle: number): boolean {
	return _in(0xbcdc5017, 0xd3ce1e9e, vehicle, _r); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param veh
 * @param doorID
 */
export function isVehicleDoorDamaged(veh: number, doorID: number): boolean {
	return _in(0xb8e181e5, 0x59464527, veh, doorID, _r); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 * @return A bool indiciating if the specified door is fully open on the specified vehicle.
 */
export function isVehicleDoorFullyOpen(vehicle: number, doorIndex: number): boolean {
	return _in(0x3e933cff, 0x7b111c22, vehicle, doorIndex, _r); 
}

/**
 * ```
 * p1 is always 0 in the scripts.
 * p1 = check if vehicle is on fire
 * ```
 * @param vehicle
 * @param isOnFireCheck
 */
export function isVehicleDriveable(vehicle: number, isOnFireCheck: boolean): boolean {
	return _in(0x4c241e39, 0xb23df959, vehicle, isOnFireCheck, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleHighDetail(vehicle: number): boolean {
	return _in(0x1f25887f, 0x3c104278, vehicle, _r); 
}

/**
 * Only ever used once in decompiled scripts: **am_pi_menu**:
 * Returns true if the engine is on fire, or if the vehicle engine health is < 0 and it **has been** on fire.
 * 
 * It sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are.
 * 
 * This usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true.
 * @param vehicle
 * @return Returns true when the engine of your vehicle is on fire. Returns false if it's not on fire.
 */
export function IsVehicleEngineOnFire(vehicle: number): boolean {
	return _in(0xec69adf9, 0x31aae0c3, vehicle, _r); 
}

/**
 * ```
 * Returns whether the specified vehicle is currently in a burnout.
 * vb.net
 * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
 * End Function
 * ```
 * @param vehicle
 */
export function isVehicleInBurnout(vehicle: number): boolean {
	return _in(0x1297a88e, 0x081430eb, vehicle, _r); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 */
export function isVehicleInSubmarineMode(vehicle: number): boolean {
	return _in(0xa77dc70b, 0xd689a1e5, vehicle, _r); 
}

/**
 * ```
 * garageName example "Michael - Beverly Hills"
 * ```
 * @param garageName
 * @param vehicle
 */
export function isVehicleInGarageArea(garageName: string, vehicle: number): boolean {
	return _in(0xcee4490c, 0xd57bb3c2, _ts(garageName), vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param extraId
 */
export function isVehicleExtraTurnedOn(vehicle: number, extraId: number): boolean {
	return _in(0xd2e6822d, 0xbfd6c8bd, vehicle, extraId, _r); 
}

/**
 * ```
 * indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * ```
 * @param vehicle
 * @param index
 */
export function IsVehicleNeonLightEnabled(vehicle: number, index: number): boolean {
	return _in(0x8c4b9255, 0x3e4766a5, vehicle, index, _r); 
}

/**
 * ```
 * mpsum2_g9ec
 * ```
 * 
 * ```
 * NativeDB Introduced: v2699
 * ```
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export function IsVehicleModHswExclusive(vehicle: number, modType: number, modIndex: number): boolean {
	return _in(0x00834eac, 0x4a96e010, vehicle, modType, modIndex, _r); 
}

/**
 * Does not work for vehicle of type: CBike, CBmx, CBoat, CTrain, CSubmarine.
 * @param vehicle
 */
export function IsVehicleParachuteActive(vehicle: number): boolean {
	return _in(0x3de51e9c, 0x80b116cf, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param model
 */
export function isVehicleModel(vehicle: number, model: number): boolean {
	return _in(0x423e8de3, 0x7d934d89, vehicle, _ch(model), _r); 
}

/**
 * ```
 * Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
 * side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
 * onEnter = check if you can enter (true) or exit (false) a vehicle.
 * ```
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param side
 * @param onEnter
 */
export function IsVehicleSeatAccessible(ped: number, vehicle: number, seatIndex: number, side: boolean, onEnter: boolean): boolean {
	return _in(0x639431e8, 0x95b9aa57, ped, vehicle, seatIndex, side, onEnter, _r); 
}

/**
 * ```
 * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
 * End Function
 * ```
 * @param vehicle
 */
export function isVehicleOnAllWheels(vehicle: number): boolean {
	return _in(0xb104cd1b, 0xabf302e2, vehicle, _r); 
}

/**
 * ```
 * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
 * ```
 * @param vehicle
 */
export function isVehicleSearchlightOn(vehicle: number): boolean {
	return _in(0xc0f97fce, 0x55094987, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function IsVehicleRocketBoostActive(vehicle: number): boolean {
	return _in(0x3d34e80e, 0xed4ae3be, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleSirenAudioOn(vehicle: number): boolean {
	return _in(0xb5cc40fb, 0xcb586380, vehicle, _r); 
}

/**
 * Seat indices range from -1 to [`GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS`](#\_0xA7C4F2C6E744A550) minus one.
 * 
 * ```cpp
 * // CTaskExitVehicleSeat::eSeatPosition - 1
 * enum eSeatPosition
 * {
 * SF_FrontDriverSide = -1,
 * SF_FrontPassengerSide = 0,
 * SF_BackDriverSide = 1,
 * SF_BackPassengerSide = 2,
 * SF_AltFrontDriverSide = 3,
 * SF_AltFrontPassengerSide = 4,
 * SF_AltBackDriverSide = 5,
 * SF_AltBackPassengerSide = 6,
 * };
 * ```
 * 
 * ```
 * NativeDB Added Parameter 3: BOOL isTaskRunning
 * 
 * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
 * ```
 * @param vehicle
 * @param seatIndex
 */
export function isVehicleSeatFree(vehicle: number, seatIndex: number): boolean {
	return _in(0x22ac59a8, 0x70e6a669, vehicle, seatIndex, _r); 
}

/**
 * 
 * @param vehicle
 * @return True if the vehicle is being slipstreamed by another vehicle
 */
export function IsVehicleSlipstreamLeader(vehicle: number): boolean {
	return _in(0x48c633e9, 0x4a8142a7, vehicle, _r); 
}

/**
 * Returns whether the vehicle's lights and sirens are on.
 * @param vehicle
 * @return Returns false if siren and lights are disabled or true if they are enabled.
 */
export function isVehicleSirenOn(vehicle: number): boolean {
	return _in(0x4c9bf537, 0xbe2634b2, vehicle, _r); 
}

/**
 * ```
 * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
 * ```
 * @param vehicle
 */
export function isVehicleSprayable(vehicle: number): boolean {
	return _in(0x8d474c8f, 0xaeff6cde, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleStolen(vehicle: number): boolean {
	return _in(0x4af9bd80, 0xeebeb453, vehicle, _r); 
}

/**
 * ```
 * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
 * For some vehicles it returns true if the current speed is <= 0.00039999999.
 * ```
 * @param vehicle
 * @return True if the vehicle's speed is equal to, or less than 0.02 meters per second, or 0.05 meters per second, if the vehicle's handbrake is engaged.
 */
export function isVehicleStopped(vehicle: number): boolean {
	return _in(0x5721b434, 0xad84d57a, vehicle, _r); 
}

/**
 * ```
 * Is this for red lights only?  more testing required.
 * ```
 * @param vehicle
 */
export function isVehicleStoppedAtTrafficLights(vehicle: number): boolean {
	return _in(0x2959f696, 0xae390a99, vehicle, _r); 
}

/**
 * ```
 * p1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.
 * ```
 * @param vehicle
 * @param p1
 * @param p2
 */
export function isVehicleStuckTimerUp(vehicle: number, p1: number, p2: number): boolean {
	return _in(0x679be1da, 0xf71da874, vehicle, p1, p2, _r); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleStuckOnRoof(vehicle: number): boolean {
	return _in(0xb497f06b, 0x288dcfdf, vehicle, _r); 
}

/**
 * ```
 * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
 * completely - is to check if tire completely gone from rim.
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * ```
 * @param vehicle
 * @param wheelID
 * @param completely
 */
export function isVehicleTyreBurst(vehicle: number, wheelID: number, completely: boolean): boolean {
	return _in(0xba291848, 0xa0815ca9, vehicle, wheelID, completely, _r); 
}

/**
 * 
 * @param vehicle
 * @param instantlyLower
 */
export function lowerConvertibleRoof(vehicle: number, instantlyLower: boolean): void {
	return _in(0xded51f70, 0x3d0fa83d, vehicle, instantlyLower); 
}

/**
 * 
 * @param vehicle
 */
export function LowerRetractableWheels(vehicle: number): void {
	return _in(0x5335be58, 0xc083e74e, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function isVehicleVisible(vehicle: number): boolean {
	return _in(0xaa0a52d2, 0x4fb98293, vehicle, _r); 
}

/**
 * 
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
export function IsVehicleWeaponDisabled(weaponHash: number, vehicle: number, owner: number): boolean {
	return _in(0x563b65a6, 0x43ed072e, _ch(weaponHash), vehicle, owner, _r); 
}

/**
 * ```cpp
 * enum eWindowId {
 * VEH_EXT_WINDOW_LF = 0,
 * VEH_EXT_WINDOW_RF = 1,
 * VEH_EXT_WINDOW_LR = 2,
 * VEH_EXT_WINDOW_RR = 3,
 * VEH_EXT_WINDOW_LM = 4,
 * VEH_EXT_WINDOW_RM = 5,
 * VEH_EXT_WINDSCREEN = 6,
 * VEH_EXT_WINDSCREEN_R = 7,
 * }
 * ```
 * @param vehicle
 * @param windowIndex
 */
export function isVehicleWindowIntact(vehicle: number, windowIndex: number): boolean {
	return _in(0x46e571a0, 0xe20d01f1, vehicle, windowIndex, _r); 
}

/**
 * 
 * @param vehicle
 * @param value
 */
export function modifyVehicleTopSpeed(vehicle: number, value: number): void {
	return _in(0x93a39963, 0x68c94158, vehicle, _fv(value)); 
}

/**
 * Will disable a plane or a helicopter's need to swerve around object in its heightmap when using TASK_PLANE_MISSION or other AI / Pilot behavior.  Will ensure plane flys directly to it's destination or die trying! This native does NOT need to be called every frame, but instead, just called once on the vehicle (NOT THE PED) you're trying to disable avoidance for!
 * @param vehicle
 * @param avoidObstacles
 */
export function EnableAircraftObstacleAvoidance(vehicle: number, avoidObstacles: boolean): void {
	return _in(0x8aa9180d, 0xe2fedd45, vehicle, avoidObstacles); 
}

/**
 * ```
 * Implemented only for Trains.
 * ```
 * 
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 * @param toggle
 */
export function NetworkUseHighPrecisionVehicleBlending(vehicle: number, toggle: boolean): void {
	return _in(0xec0c1d49, 0x22af9754, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 */
export function openBombBayDoors(vehicle: number): void {
	return _in(0x87e7f242, 0x70732cb1, vehicle); 
}

/**
 * Detaches the vehicle's windscreen.
 * @param vehicle
 */
export function popOutVehicleWindscreen(vehicle: number): void {
	return _in(0x6d645d59, 0xfb5f5ad3, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param instantlyRaise
 */
export function raiseConvertibleRoof(vehicle: number, instantlyRaise: boolean): void {
	return _in(0x8f5fb35d, 0x7e88fc70, vehicle, instantlyRaise); 
}

/**
 * 
 * @param vehicle
 */
export function pausePlaybackRecordedVehicle(vehicle: number): void {
	return _in(0x632a689b, 0xf42301b1, vehicle); 
}

/**
 * 
 * @param p0
 * @param modType
 * @param p2
 */
export function preloadVehicleMod(p0: any, modType: number, p2: any): void {
	return _in(0x758f49c2, 0x4925568a, p0, modType, p2); 
}

/**
 * 
 * @param vehicle
 */
export function RaiseRetractableWheels(vehicle: number): void {
	return _in(0xf6606025, 0x46d27ba8, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function releasePreloadMods(vehicle: number): void {
	return _in(0x445d79f9, 0x95508307, vehicle); 
}

/**
 * ```
 * Retracts the hook on the cargobob.
 * Note: after you retract it the natives for dropping the hook no longer work
 * ```
 * @param cargobob
 */
export function removePickUpRopeForCargobob(cargobob: number): void {
	return _in(0x9768cf64, 0x8f54c804, cargobob); 
}

/**
 * 
 * @param vehicleAsset
 */
export function removeVehicleAsset(vehicleAsset: number): void {
	return _in(0xace699c7, 0x1ab9deb5, vehicleAsset); 
}

/**
 * 
 * @param speedzone
 */
export function removeRoadNodeSpeedZone(speedzone: number): boolean {
	return _in(0x1033371f, 0xc8e842a7, speedzone, _r); 
}

/**
 * 
 * @param vehicle
 */
export function removeVehicleHighDetailModel(vehicle: number): void {
	return _in(0x00689cde, 0x5f7c6787, vehicle); 
}

/**
 * 
 * @param p0
 */
export function removeVehicleCombatAvoidanceArea(p0: any): void {
	return _in(0xe30524e1, 0x871f481d, p0); 
}

/**
 * Remove the weird shadow applied by [\_SET_VEHICLE_SHADOW_EFFECT](#\_0x2A70BAE8883E4C81)
 * @param vehicle
 */
export function RemoveVehicleShadowEffect(vehicle: number): void {
	return _in(0xf87d9f23, 0x01f7d206, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function removeVehicleStuckCheck(vehicle: number): void {
	return _in(0x8386bfb6, 0x14d06749, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param modType
 */
export function removeVehicleMod(vehicle: number, modType: number): void {
	return _in(0x92d619e4, 0x20858204, vehicle, modType); 
}

/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * @param vehicle
 * @param windowIndex
 */
export function removeVehicleWindow(vehicle: number, windowIndex: number): void {
	return _in(0xa711568e, 0xedb43069, vehicle, windowIndex); 
}

/**
 * See [REQUEST_VEHICLE_RECORDING](#\_0xAF514CABE74CBF15)
 * @param recording
 * @param script
 */
export function removeVehicleRecording(recording: number, script: string): void {
	return _in(0xf1160acc, 0xf98a3fc8, recording, _ts(script)); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param unk
 */
export function removeVehiclesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unk: any): void {
	return _in(0x46a1e1a2, 0x99ec4bba, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), unk); 
}

/**
 * 
 * @param vehicle
 */
export function removeVehicleUpsidedownCheck(vehicle: number): void {
	return _in(0xc53eb42a, 0x499a7e90, vehicle); 
}

/**
 * ```
 * REQUEST_VEHICLE_*
 * ```
 * @param vehicle
 */
export function RequestVehicleDashboardScaleformMovie(vehicle: number): void {
	return _in(0xdba3c090, 0xe3d74690, vehicle); 
}

/**
 * ```
 * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
 * vehicle found that have asset's:
 * cargobob3
 * submersible
 * blazer
 * ```
 * @param vehicleHash
 * @param vehicleAsset
 */
export function requestVehicleAsset(vehicleHash: number, vehicleAsset: number): void {
	return _in(0x81a15811, 0x460fab3a, _ch(vehicleHash), vehicleAsset); 
}

/**
 * 
 * @param vehicle
 */
export function requestVehicleHighDetailModel(vehicle: number): void {
	return _in(0xa6e9fdcb, 0x2c76785e, vehicle); 
}

/**
 * ```
 * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
 * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
 * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
 * ```
 * @param recording
 * @param script
 */
export function requestVehicleRecording(recording: number, script: string): void {
	return _in(0xaf514cab, 0xe74cbf15, recording, _ts(script)); 
}

/**
 * ```
 * The inner function has a switch on the second parameter. It's the stuck timer index.
 * Here's some pseudo code I wrote for the inner function:
 * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
 * {
 * switch (timerIndex)
 * {
 * case 0:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * case 1:
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * case 2:
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * case 3:
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * case 4:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * break;
 * };
 * }
 * ```
 * @param vehicle
 * @param nullAttributes
 */
export function resetVehicleStuckTimer(vehicle: number, nullAttributes: number): void {
	return _in(0xd7591b00, 0x65afaa7a, vehicle, nullAttributes); 
}

/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * @param vehicle
 * @param windowIndex
 */
export function rollDownWindow(vehicle: number, windowIndex: number): void {
	return _in(0x7ad9e6ce, 0x657d69e3, vehicle, windowIndex); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function resetVehicleWheels(vehicle: number, toggle: boolean): void {
	return _in(0x21d2e566, 0x2c1f6fed, vehicle, toggle); 
}

/**
 * ```
 * Roll down all the windows of the vehicle passed through the first parameter.
 * ```
 * @param vehicle
 */
export function rollDownWindows(vehicle: number): void {
	return _in(0x85796b05, 0x49dde156, vehicle); 
}

/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * @param vehicle
 * @param windowIndex
 */
export function rollUpWindow(vehicle: number, windowIndex: number): void {
	return _in(0x602e548f, 0x46e24d59, vehicle, windowIndex); 
}

/**
 * 
 * @param active
 */
export function setAllLowPriorityVehicleGeneratorsActive(active: boolean): void {
	return _in(0x608207e7, 0xa8fb787c, active); 
}

/**
 * 
 * @param range
 */
export function setAmbientVehicleRangeMultiplierThisFrame(range: number): void {
	return _in(0x90b6da73, 0x8a9a25da, _fv(range)); 
}

/**
 * 
 */
export function setAllVehicleGeneratorsActive(): void {
	return _in(0x34ad8907, 0x8831a4bc); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 */
export function setAllVehicleGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): void {
	return _in(0xc1232182, 0x7687fe4d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7); 
}

/**
 * Sets the boat boom position for the `TR3` trailer.
 * 
 * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
 * 
 * To get the current boom position ratio, use [GET_BOAT_BOOM_POSITION_RATIO](#\_0x6636C535F6CC2725).
 * @param vehicle
 * @param ratio
 */
export function SetBoatBoomPositionRatio(vehicle: number, ratio: number): void {
	return _in(0xf488c566, 0x413b4232, vehicle, _fv(ratio)); 
}

/**
 * ```
 * Only works on bikes, both X and Y work in the -1 - 1 range.
 * X forces the bike to turn left or right (-1, 1)
 * Y forces the bike to lean to the left or to the right (-1, 1)
 * Example with X -1/Y 1
 * http://i.imgur.com/TgIuAPJ.jpg
 * ```
 * @param vehicle
 * @param x
 * @param y
 */
export function setBikeOnStand(vehicle: number, x: number, y: number): void {
	return _in(0x9cfa4896, 0xc3a53cbb, vehicle, _fv(x), _fv(y)); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setBoatDisableAvoidance(vehicle: number, p1: boolean): void {
	return _in(0x0a6a279f, 0x3aa4fd70, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setBoatAnchor(vehicle: number, toggle: boolean): void {
	return _in(0x75dbec17, 0x4aeead10, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetBoatFrozenWhenAnchored(vehicle: number, toggle: boolean): void {
	return _in(0xe3ebaae4, 0x84798530, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 */
export function SetBoatIsSinking(vehicle: number): void {
	return _in(0xbd32e46a, 0xa95c1dd2, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param value
 */
export function SetBoatMovementResistance(vehicle: number, value: number): void {
	return _in(0xe842a939, 0x8079bd82, vehicle, _fv(value)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetCamberedWheelsDisabled(vehicle: number, toggle: boolean): void {
	return _in(0x1201e8a3, 0x290a3b98, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 */
export function setCarBootOpen(vehicle: number): void {
	return _in(0xfc40cbf7, 0xb90ca77c, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setBoatSinksWhenWrecked(vehicle: number, toggle: boolean): void {
	return _in(0x8f719973, 0xe1445ba2, vehicle, toggle); 
}

/**
 * ```
 * Hardcoded to not work in multiplayer.
 * ```
 * @param vehicle
 * @param state
 */
export function setCanResprayVehicle(vehicle: number, state: boolean): void {
	return _in(0x52bba29d, 0x5ec69356, vehicle, state); 
}

/**
 * ```
 * Something to do with "high speed bump severity"?
 * if (!sub_87a46("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER")) {
 * VEHICLE::_84FD40F56075E816(0.0);
 * sub_8795b("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER", 1);
 * }
 * ```
 * @param multiplier
 */
export function SetCarHighSpeedBumpSeverityMultiplier(multiplier: number): void {
	return _in(0x84fd40f5, 0x6075e816, _fv(multiplier)); 
}

/**
 * ```
 * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
 * ```
 * @param cargobob
 * @param isActive
 */
export function setCargobobPickupMagnetActive(cargobob: number, isActive: boolean): void {
	return _in(0x9a665550, 0xf8da349b, cargobob, isActive); 
}

/**
 * Stops cargobob from being able to detach the attached vehicle.
 * @param cargobob
 * @param toggle
 */
export function setCargobobForceDontDetachVehicle(cargobob: number, toggle: boolean): void {
	return _in(0x571feb38, 0x3f629926, cargobob, toggle); 
}

/**
 * ```
 * Stops the cargobob from being able to attach any vehicle
 * ```
 * 
 * ```
 * NativeDB Introduced: v1180
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetCargobobHookCanAttach(vehicle: number, toggle: boolean): void {
	return _in(0x94a68da4, 0x12c4007d, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setCargobobPickupMagnetEffectRadius(vehicle: number, p1: number): void {
	return _in(0xa17bad15, 0x3b51547e, vehicle, _fv(p1)); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setCargobobPickupMagnetFalloff(vehicle: number, p1: number): void {
	return _in(0x685d5561, 0x680d088b, vehicle, _fv(p1)); 
}

/**
 * 
 * @param cargobob
 * @param p1
 */
export function setCargobobPickupMagnetPullStrength(cargobob: number, p1: number): void {
	return _in(0xed8286f7, 0x1a819baa, cargobob, _fv(p1)); 
}

/**
 * 
 * @param cargobob
 * @param p1
 */
export function setCargobobPickupMagnetReducedFalloff(cargobob: number, p1: number): void {
	return _in(0x66979acf, 0x5102fd2f, cargobob, _fv(p1)); 
}

/**
 * 
 * @param cargobob
 * @param strength
 */
export function setCargobobPickupMagnetStrength(cargobob: number, strength: number): void {
	return _in(0xbcbfcd9d, 0x1dac19e2, cargobob, _fv(strength)); 
}

/**
 * 
 * @param cargobob
 * @param p1
 */
export function setCargobobPickupMagnetPullRopeLength(cargobob: number, p1: number): void {
	return _in(0x6d8eac07, 0x506291fb, cargobob, _fv(p1)); 
}

/**
 * 
 * @param cargobob
 * @param p1
 */
export function setCargobobPickupRopeDampingMultiplier(cargobob: number, p1: number): void {
	return _in(0xcf1182f6, 0x82f65307, cargobob, _fv(p1)); 
}

/**
 * 
 * @param cargobob
 * @param vehicle
 */
export function setCargobobPickupMagnetReducedStrength(cargobob: number, vehicle: number): void {
	return _in(0xe301bd63, 0xe9e13cf0, cargobob, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param state
 */
export function setConvertibleRoofLatchState(vehicle: number, state: boolean): void {
	return _in(0x1a78ad3d, 0x8240536f, vehicle, state); 
}

/**
 * 
 * @param vehicle
 * @param state
 */
export function setCargobobPickupRopeType(vehicle: number, state: number): void {
	return _in(0x0d5f65a8, 0xf4ebdab5, vehicle, state); 
}

/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @param deploy
 * @param p2
 */
export function SetDeployHeliStubWings(vehicle: number, deploy: boolean, p2: boolean): void {
	return _in(0xb251e0b3, 0x3e58b424, vehicle, deploy, p2); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setConvertibleRoof(vehicle: number, p1: boolean): void {
	return _in(0xf39c4f53, 0x8b5124c2, vehicle, p1); 
}

/**
 * 
 * @param toggle
 */
export function setDisableRandomTrainsThisFrame(toggle: boolean): void {
	return _in(0xd4b8e3d1, 0x917bc86b, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setDisablePretendOccupants(vehicle: number, toggle: boolean): void {
	return _in(0x25367de4, 0x9d64cf16, vehicle, toggle); 
}

/**
 * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
 * 
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param turretIdx
 */
export function SetDisableTurretMovementThisFrame(vehicle: number, turretIdx: number): void {
	return _in(0xe615bb7a, 0x7752c76a, vehicle, turretIdx); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function SetDisableSuperdummyMode(vehicle: number, p1: boolean): void {
	return _in(0xb088e9a4, 0x7ae6edd5, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setDisableVehicleEngineFires(vehicle: number, toggle: boolean): void {
	return _in(0x91a0bd63, 0x5321f145, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setDisableVehiclePetrolTankDamage(vehicle: number, toggle: boolean): void {
	return _in(0x37c8252a, 0x7c92d017, vehicle, toggle); 
}

/**
 * ```
 * True stops vtols from switching modes. Doesn't stop the sound though.
 * ```
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @param direction
 */
export function SetDisableVehicleFlightNozzlePosition(vehicle: number, direction: boolean): void {
	return _in(0xce2b4377, 0x0b655f8f, vehicle, direction); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setDisableVehiclePetrolTankFires(vehicle: number, toggle: boolean): void {
	return _in(0x465bf26a, 0xb9684352, vehicle, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param toggle
 */
export function SetDisableVehicleUnk(toggle: boolean): void {
	return _in(0x143921e4, 0x5ec44d62, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param toggle
 */
export function SetDisableVehicleUnk2(toggle: boolean): void {
	return _in(0x211e95ce, 0x9903940c, toggle); 
}

/**
 * R\* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
 * @param vehicle
 * @param toggle
 */
export function SetDisableVehicleWindowCollisions(vehicle: number, toggle: boolean): void {
	return _in(0x1087bc8e, 0xc540daeb, vehicle, toggle); 
}

/**
 * ```
 * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
 * ```
 * @param toggle
 */
export function setDistantCarsEnabled(toggle: boolean): void {
	return _in(0xf796359a, 0x959df65d, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetDriftTyresEnabled(vehicle: number, toggle: boolean): void {
	return _in(0x5ac79c98, 0xc5c17f05, vehicle, toggle); 
}

/**
 * Enable/Disables global slipstream physics
 * @param toggle
 */
export function setEnableVehicleSlipstreaming(toggle: boolean): void {
	return _in(0xe6c0c80b, 0x8c867537, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setFarDrawVehicles(toggle: boolean): void {
	return _in(0x26324f33, 0x423f3cc3, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setForceHdVehicle(vehicle: number, toggle: boolean): void {
	return _in(0x97ce68cb, 0x032583f0, vehicle, toggle); 
}

/**
 * 
 * @param toggle
 */
export function setGarbageTrucks(toggle: boolean): void {
	return _in(0x2afd795e, 0xeac8d30d, toggle); 
}

/**
 * ```
 * X,Y position of boat is frozen in place when anchored and its engine disabled, only the Z value changes. Requires 0xE3EBAAE484798530 to be set to true.
 * SET_FORCED_ZENITH_QUADTREE?
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetForcedBoatLocationWhenAnchored(vehicle: number, toggle: boolean): void {
	return _in(0xb28b1fe5, 0xbfadd7f5, vehicle, toggle); 
}

/**
 * ```
 * Sets the speed of the helicopter blades in percentage of the full speed.
 * vehicleHandle: The helicopter.
 * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
 * ```
 * @param vehicle
 * @param speed
 */
export function setHeliBladesSpeed(vehicle: number, speed: number): void {
	return _in(0xfd280b4d, 0x7f3abc4d, vehicle, _fv(speed)); 
}

/**
 * 
 * @param vehicle
 * @param health
 */
export function SetHeliMainRotorHealth(vehicle: number, health: number): void {
	return _in(0x4056ea11, 0x05f5abd7, vehicle, _fv(health)); 
}

/**
 * 
 * @param vehicle
 * @param health
 */
export function SetHeliTailRotorHealth(vehicle: number, health: number): void {
	return _in(0xfe205f38, 0xaaa58e5b, vehicle, _fv(health)); 
}

/**
 * ```
 * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
 * ```
 * @param vehicle
 * @param height
 */
export function setForkliftForkHeight(vehicle: number, height: number): void {
	return _in(0x37ebbf31, 0x17bd6a25, vehicle, _fv(height)); 
}

/**
 * ```
 * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
 * this native works on planes to?
 * ```
 * @param vehicle
 */
export function setHeliBladesFullSpeed(vehicle: number): void {
	return _in(0xa178472e, 0xbb8ae60d, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setHeliTailExplodeThrowDashboard(vehicle: number, p1: boolean): void {
	return _in(0x3ec8bf18, 0xaa453fe9, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setHeliTurbulenceScalar(vehicle: number, p1: number): void {
	return _in(0xe6f13851, 0x780394da, vehicle, _fv(p1)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetHydraulicRaised(vehicle: number, toggle: boolean): void {
	return _in(0x28b18377, 0xeb6e25f6, vehicle, toggle); 
}

/**
 * ```
 * value between 0.0 and 1.0
 * ```
 * @param helicopter
 * @param multiplier
 */
export function SetHelicopterRollPitchYawMult(helicopter: number, multiplier: number): void {
	return _in(0x6e0859b5, 0x30a365cc, helicopter, _fv(multiplier)); 
}

/**
 * ```
 * Sets vehicle wheel hydraulic states transition. Known states:
 * 0 - reset
 * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
 * 2 - jump using wheel
 * ```
 * @param vehicle
 * @param wheelId
 * @param state
 * @param value
 * @param p4
 */
export function SetHydraulicWheelStateTransition(vehicle: number, wheelId: number, state: number, value: number, p4: number): void {
	return _in(0xc2407531, 0x0a8b9cd1, vehicle, wheelId, state, _fv(value), _fv(p4)); 
}

/**
 * 
 * @param vehicle
 * @param state
 */
export function SetHydraulicWheelState(vehicle: number, state: number): void {
	return _in(0x8ea86df3, 0x56801c7d, vehicle, state); 
}

/**
 * ```
 * Works only on vehicles that support hydraulic.
 * ```
 * @param vehicle
 * @param wheelId
 * @param value
 */
export function SetHydraulicWheelValue(vehicle: number, wheelId: number, value: number): void {
	return _in(0x84ea99c6, 0x2cb3ef0c, vehicle, wheelId, _fv(value)); 
}

/**
 * 
 * @param vehicle
 */
export function setLastDrivenVehicle(vehicle: number): void {
	return _in(0xacfb2463, 0xcc22bed2, vehicle); 
}

/**
 * ```
 * p1 is always 0
 * ```
 * @param train
 * @param p1
 */
export function setMissionTrainAsNoLongerNeeded(p1: boolean): void {
	return _in(0xbbe76483, 0x49b49be8, _i, p1); 
}

/**
 * 
 * @param value
 */
export function setNumberOfParkedVehicles(value: number): void {
	return _in(0xcaa15f13, 0xebd417ff, value); 
}

/**
 * 
 * @param train
 * @param x
 * @param y
 * @param z
 */
export function setMissionTrainCoords(train: number, x: number, y: number, z: number): void {
	return _in(0x591ca673, 0xaa6ab736, train, _fv(x), _fv(y), _fv(z)); 
}

/**
 * 
 * @param multiplier
 */
export function setParkedVehicleDensityMultiplierThisFrame(multiplier: number): void {
	return _in(0xeae6dcc7, 0xeee3db1d, _fv(multiplier)); 
}

/**
 * 
 * @param distance
 */
export function setLightsCutoffDistanceTweak(distance: number): void {
	return _in(0xbc3cca58, 0x44452b06, _fv(distance)); 
}

/**
 * ```
 * Works just like SET_VEHICLE_ENGINE_HEALTH, didn't saw any difference. But this native works only for planes.
 * ```
 * @param vehicle
 * @param health
 */
export function SetPlaneEngineHealth(vehicle: number, health: number): void {
	return _in(0x2a86a047, 0x5b6a1434, vehicle, _fv(health)); 
}

/**
 * Set state to true to extend the wings, false to retract them.
 * @param vehicle
 * @param extend
 */
export function SetOppressorTransformState(vehicle: number, extend: boolean): void {
	return _in(0x544996c0, 0x081abdeb, vehicle, extend); 
}

/**
 * 
 * @param plane
 * @param health
 */
export function SetPlanePropellersHealth(plane: number, health: number): void {
	return _in(0x4c815eb1, 0x75086f84, plane, _fv(health)); 
}

/**
 * ```
 * min: 1.9f, max: 100.0f
 * ```
 * @param cargobob
 * @param length1
 * @param length2
 * @param state
 */
export function setPickupRopeLengthForCargobob(cargobob: number, length1: number, length2: number, state: boolean): void {
	return _in(0x877c1eae, 0xac531023, cargobob, _fv(length1), _fv(length2), state); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setPlaneResistToExplosion(vehicle: number, toggle: boolean): void {
	return _in(0xe16142b9, 0x4664defd, vehicle, toggle); 
}

/**
 * This native sets the turbulence multiplier. It only works for planes.
 * 0.0 = no turbulence at all.
 * 1.0 = heavy turbulence.
 * 
 * Works by just calling it once, does not need to be called every tick.
 * @param vehicle
 * @param multiplier
 */
export function setPlaneTurbulenceMultiplier(vehicle: number, multiplier: number): void {
	return _in(0xad2d28a1, 0xafdff131, vehicle, _fv(multiplier)); 
}

/**
 * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
 * @param vehicle
 * @param drivingStyle
 */
export function setPlaybackToUseAi(vehicle: number, drivingStyle: number): void {
	return _in(0xa549c3b3, 0x7ea28131, vehicle, drivingStyle); 
}

/**
 * 
 * @param vehicle
 */
export function setPlayersLastVehicle(vehicle: number): void {
	return _in(0xbcdf8baf, 0x56c87b6a, vehicle); 
}

/**
 * ```
 * Time is number of milliseconds before reverting, zero for indefinitely.
 * ```
 * @param vehicle
 * @param time
 * @param drivingStyle
 * @param p3
 */
export function setPlaybackToUseAiTryToRevertBackLater(vehicle: number, time: number, drivingStyle: number, p3: boolean): void {
	return _in(0x6e63860b, 0xbb190730, vehicle, time, drivingStyle, p3); 
}

/**
 * 
 * @param toggle
 */
export function setRandomBoats(toggle: boolean): void {
	return _in(0x84436ec2, 0x93b1415f, toggle); 
}

/**
 * 
 * @param vehicle
 * @param speed
 */
export function setPlaybackSpeed(vehicle: number, speed: number): void {
	return _in(0x6683ab88, 0x0e427778, vehicle, _fv(speed)); 
}

/**
 * Sets flag on vehicle that changes behaviour in relation to when player gets wanted level
 * @param vehicle
 * @param p1
 */
export function setPoliceFocusWillTrackVehicle(vehicle: number, p1: boolean): void {
	return _in(0x4e74e62e, 0x0a97e901, vehicle, p1); 
}

/**
 * Enables spawning random trains on the preset tracks.
 * 
 * Requires [`SWITCH_TRAIN_TRACK`](#\_0xFD813BB7DB977F20) and [`SET_TRAIN_TRACK_SPAWN_FREQUENCY`](#\_0x21973BBF8D17EDFA) to be set.
 * @param toggle
 */
export function setRandomTrains(toggle: boolean): void {
	return _in(0x80d9f741, 0x97ea47d9, toggle); 
}

/**
 * 
 * @param multiplier
 */
export function setRandomVehicleDensityMultiplierThisFrame(multiplier: number): void {
	return _in(0xb3b33593, 0x79fe77d3, _fv(multiplier)); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param toggle
 */
export function SetRandomBoatsInMp(toggle: boolean): void {
	return _in(0xda5e12f7, 0x28db30ca, toggle); 
}

/**
 * Lowers the vehicle's stance. Only works for vehicles that support this feature.
 * 
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param vehicle
 * @param enable
 */
export function SetReduceDriftVehicleSuspension(vehicle: number, enable: boolean): void {
	return _in(0x3a375167, 0xf5782a65, vehicle, enable); 
}

/**
 * ```
 * Only called once in the decompiled scripts. Presumably activates the specified generator.
 * ```
 * @param vehicleGenerator
 * @param enabled
 */
export function setScriptVehicleGenerator(vehicleGenerator: number, enabled: boolean): void {
	return _in(0xd9d620e0, 0xac6dc4b0, vehicleGenerator, enabled); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 * @param depth1
 * @param depth2
 * @param depth3
 */
export function setSubmarineCrushDepths(vehicle: number, toggle: boolean, depth1: number, depth2: number, depth3: number): void {
	return _in(0xc59872a5, 0x134879c7, vehicle, toggle, _fv(depth1), _fv(depth2), _fv(depth3)); 
}

/**
 * ```
 * makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
 * ```
 * @param train
 * @param toggle
 */
export function setRenderTrainAsDerailed(train: number, toggle: boolean): void {
	return _in(0x317b11a3, 0x12df5534, train, toggle); 
}

/**
 * ```
 * This is not tested - it's just an assumption.
 * Doesn't seem to work.  I'll try with an int instead. --JT
 * Read the scripts, im dumpass.
 * Doesn't work at all, wether with an bool neither an int
 * if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
 * VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
 * }
 * ```
 * @param vehicle
 * @param state
 */
export function setTaxiLights(vehicle: number, state: boolean): void {
	return _in(0x598803e8, 0x5e8448d9, vehicle, state); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param ratio
 */
export function SetSpecialflightWingRatio(vehicle: number, ratio: number): void {
	return _in(0x70a252f6, 0x0a3e036b, vehicle, _fv(ratio)); 
}

/**
 * 
 * @param plane
 * @param height
 */
export function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane: number, height: number): void {
	return _in(0xb893215d, 0x8d4c015b, plane, height); 
}

/**
 * ```
 * Inverse of 0x95CF53B3D687F9FA
 * ```
 * 
 * ```
 * NativeDB Added Parameter 1: Vehicle vehicle
 * ```
 */
export function SetTrailerLegsLowered(): void {
	return _in(0x878c75c0, 0x9fbdb942); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setTrailerInverseMassScale(vehicle: number, p1: number): void {
	return _in(0x2a8f319b, 0x392e7b3f, vehicle, _fv(p1)); 
}

/**
 * Used to control train speed, can be used to start and stop its movement as well.
 * @param train
 * @param speed
 */
export function setTrainCruiseSpeed(train: number, speed: number): void {
	return _in(0x16469284, 0xdb8c62b5, train, _fv(speed)); 
}

/**
 * ```
 * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
 * ```
 * @param vehicle
 */
export function setTrailerLegsRaised(vehicle: number): void {
	return _in(0x95cf53b3, 0xd687f9fa, vehicle); 
}

/**
 * 
 * @param train
 * @param speed
 */
export function setTrainSpeed(train: number, speed: number): void {
	return _in(0xaa0bc91b, 0xe0b796e3, train, _fv(speed)); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param vehicle
 * @param wheelIndex
 * @param health
 */
export function SetTyreHealth(vehicle: number, wheelIndex: number, health: number): void {
	return _in(0x74c68ef9, 0x7645e79d, vehicle, wheelIndex, _fv(health)); 
}

/**
 * ```
 * Controls how much traction the wheel loses.
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtds" (Soft): 0.05
 * "owrtdm" (Medium): 0.45
 * "owrtdh" (Hard): 0.8
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * ```
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export function SetTyreTractionLossMultiplier(vehicle: number, wheelIndex: number, multiplier: number): void {
	return _in(0xc970d0e0, 0xfc31d768, vehicle, wheelIndex, _fv(multiplier)); 
}

/**
 * ```
 * Only called once inside main_persitant with the parameters, 0
 * ```
 * @param trackIndex
 * @param frequency
 */
export function setTrainTrackSpawnFrequency(trackIndex: number, frequency: number): void {
	return _in(0x21973bbf, 0x8d17edfa, trackIndex, frequency); 
}

/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export function SetTyreWearMultiplier(vehicle: number, wheelIndex: number, multiplier: number): void {
	return _in(0x01894e2e, 0xde923ca2, vehicle, wheelIndex, _fv(multiplier)); 
}

/**
 * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
 * @param vehicle
 * @param toggle
 */
export function SetUseHigherVehicleJumpForce(vehicle: number, toggle: boolean): void {
	return _in(0xf06a16ca, 0x55d138d8, vehicle, toggle); 
}

/**
 * ```
 * Controls how fast the tires wear out.
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtss" (Soft): 2.2
 * "owrtsm" (Medium): 1.7
 * "owrtsh" (Hard): 1.2
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * ```
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export function SetTyreSoftnessMultiplier(vehicle: number, wheelIndex: number, multiplier: number): void {
	return _in(0x392183bb, 0x9ea57697, vehicle, wheelIndex, _fv(multiplier)); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param value
 */
export function SetUnkBool0x102ForSubmarineVehicleTask(vehicle: number, value: boolean): void {
	return _in(0x41b9fb92, 0xeded32a6, vehicle, value); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param value
 */
export function SetUnkFloat0x104ForSubmarineVehicleTask(vehicle: number, value: number): void {
	return _in(0x49821825, 0x9fb7c72d, vehicle, _fv(value)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleActiveForPedNavigation(vehicle: number, toggle: boolean): void {
	return _in(0x21115bcd, 0x6e44656a, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleActiveDuringPlayback(vehicle: number, toggle: boolean): void {
	return _in(0xdffcef48, 0xe511db48, vehicle, toggle); 
}

/**
 * ```
 * Makes the vehicle accept no passengers.
 * ```
 * @param veh
 * @param toggle
 */
export function setVehicleAllowNoPassengersLockon(veh: number, toggle: boolean): void {
	return _in(0x5d14d415, 0x4bfe7b2c, veh, toggle); 
}

/**
 * 
 * @param vehicle
 * @param state
 */
export function setVehicleAlarm(vehicle: number, state: boolean): void {
	return _in(0xcde5e70c, 0x1ddb954c, vehicle, state); 
}

/**
 * ```
 * p2 often set to 1000.0 in the decompiled scripts.
 * ```
 * @param vehicle
 * @param value
 */
export function setVehicleBodyHealth(vehicle: number, value: number): void {
	return _in(0xb77d05ac, 0x8c78aadb, vehicle, _fv(value)); 
}

/**
 * 
 * @param vehicle
 * @param p1
 * @param p2
 */
export function setVehicleAutomaticallyAttaches(vehicle: number, p1: boolean, p2: any): any {
	return _in(0x8ba6f76b, 0xc53a1493, vehicle, p1, p2, _r, _ri); 
}

/**
 * Sets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * 
 * In decompiled scripts this is used to deduct from or add to the count whenever bombs are dropped or purchased/restocked.
 * 
 * Use [`_GET_AIRCRAFT_BOMB_COUNT`](#\_0xEA12BD130D7569A1) to get the amount of bombs on that vehicle.
 * @param aircraft
 * @param bombCount
 */
export function SetVehicleBombCount(aircraft: number, bombCount: number): void {
	return _in(0xf4b2ed59, 0xdeb5d774, aircraft, bombCount); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleBrake(vehicle: number, toggle: boolean): void {
	return _in(0xe4e2fd32, 0x3574965c, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleBrakeLights(vehicle: number, toggle: boolean): void {
	return _in(0x92b35082, 0xe0b42f66, vehicle, toggle); 
}

/**
 * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
 * @param vehicle
 * @param position
 * @param p2
 */
export function setVehicleBulldozerArmPosition(vehicle: number, position: number, p2: boolean): void {
	return _in(0xf8ebccc9, 0x6adb9fb7, vehicle, _fv(position), p2); 
}

/**
 * ```
 * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleBurnout(vehicle: number, toggle: boolean): void {
	return _in(0xfb879444, 0x4a7d60fb, vehicle, toggle); 
}

/**
 * ```
 * SET_VEHICLE_AL*
 * ```
 * @param vehicle
 * @param canBeLockedOn
 * @param unk
 */
export function SetVehicleCanBeLockedOn(vehicle: number, canBeLockedOn: boolean, unk: boolean): void {
	return _in(0x1dda078d, 0x12879eee, vehicle, canBeLockedOn, unk); 
}

/**
 * ```
 * This has not yet been tested - it's just an assumption of what the types could be.
 * ```
 * @param vehicle
 * @param state
 */
export function setVehicleCanBeTargetted(vehicle: number, state: boolean): void {
	return _in(0x3750146a, 0x28097a82, vehicle, state); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleCanBeUsedByFleeingPeds(vehicle: number, toggle: boolean): void {
	return _in(0x300504b2, 0x3bd3b711, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleCanBreak(vehicle: number, toggle: boolean): void {
	return _in(0x59bf8c3d, 0x52c92f66, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param state
 */
export function setVehicleCanBeVisiblyDamaged(vehicle: number, state: boolean): void {
	return _in(0x4c7028f7, 0x8ffd3681, vehicle, state); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleCanDeformWheels(vehicle: number, toggle: boolean): void {
	return _in(0x0cdda42f, 0x9e360ca6, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetVehicleCanEngineOperateOnFire(vehicle: number, toggle: boolean): void {
	return _in(0x206bc5dc, 0x9d1ac70a, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleCanLeakPetrol(vehicle: number, toggle: boolean): void {
	return _in(0x19254724, 0x7864dfdd, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleCanLeakOil(vehicle: number, toggle: boolean): void {
	return _in(0x51bb2d88, 0xd31a914b, vehicle, toggle); 
}

/**
 * ```
 * Previously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)
 * from Decrypted Scripts I found
 * VEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2 -- [[2]] ], 420.0);
 * ```
 * @param vehicle
 * @param height
 */
export function setVehicleCeilingHeight(vehicle: number, height: number): void {
	return _in(0xa4641306, 0x6687a328, vehicle, _fv(height)); 
}

/**
 * colorPrimary & colorSecondary are the paint indexes for the vehicle.
 * 
 * For a list of valid paint indexes, view: pastebin.com/pwHci0xK
 * @param vehicle
 * @param colorPrimary
 * @param colorSecondary
 */
export function setVehicleColours(vehicle: number, colorPrimary: number, colorSecondary: number): void {
	return _in(0x4f1d4be3, 0xa7f24601, vehicle, colorPrimary, colorSecondary); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleCanSaveInGarage(vehicle: number, toggle: boolean): void {
	return _in(0x428baccd, 0xf5e26ead, vehicle, toggle); 
}

/**
 * ```
 * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
 * Doesn't work for planes/helis.
 * ```
 * @param vehicle
 * @param state
 */
export function SetVehicleControlsInverted(vehicle: number, state: boolean): void {
	return _in(0x5b91b229, 0x243351a8, vehicle, state); 
}

/**
 * Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).
 * 
 * Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
 * @param vehicle
 * @param colorCombination
 */
export function setVehicleColourCombination(vehicle: number, colorCombination: number): void {
	return _in(0x33e8cd33, 0x22e2fe31, vehicle, colorCombination); 
}

/**
 * ```
 * <1.0 - Decreased torque
 * =1.0 - Default torque
 * >1.0 - Increased torque
 * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
 * value - is between 0.2 and 1.8 in the decompiled scripts.
 * This needs to be called every frame to take effect.
 * ```
 * @param vehicle
 * @param value
 */
export function setVehicleCheatPowerIncrease(vehicle: number, value: number): void {
	return _in(0xb59e4bd3, 0x7ae292db, vehicle, _fv(value)); 
}

/**
 * ```
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * ```
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleCustomPrimaryColour(vehicle: number, r: number, g: number, b: number): void {
	return _in(0x7141766f, 0x91d15bea, vehicle, r, g, b); 
}

/**
 * Similar to [`_SET_AIRCRAFT_BOMB_COUNT`](#\_0xF4B2ED59DEB5D774), this sets the amount of countermeasures that are present on this vehicle.
 * 
 * Use [`_GET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\_0xF846AA63DF56B804) to get the current amount.
 * @param aircraft
 * @param count
 */
export function SetVehicleCountermeasureCount(aircraft: number, count: number): void {
	return _in(0x9bda23bf, 0x666f0855, aircraft, count); 
}

/**
 * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
 * Radius of effect damage applied in a sphere at impact location
 * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
 * @param vehicle
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param damage
 * @param radius
 * @param focusOnModel
 */
export function setVehicleDamage(vehicle: number, xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, focusOnModel: boolean): void {
	return _in(0xa1dd317e, 0xa8fd4f29, vehicle, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(damage), _fv(radius), focusOnModel); 
}

/**
 * ```
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * ```
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleCustomSecondaryColour(vehicle: number, r: number, g: number, b: number): void {
	return _in(0x36ced73b, 0xfed89754, vehicle, r, g, b); 
}

/**
 * ```
 * SET_VEHICLE_D*
 * ```
 * @param vehicle
 * @param p1
 */
export function SetVehicleDamageModifier(vehicle: number, p1: number): any {
	return _in(0x4e20d2a6, 0x27011e8e, vehicle, _fv(p1), _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param color
 */
export function SetVehicleDashboardColor(vehicle: number, color: number): void {
	return _in(0x6089cdf6, 0xa57f326c, vehicle, color); 
}

/**
 * ```
 * This fixes the deformation of a vehicle but the vehicle health doesn't improve
 * ```
 * @param vehicle
 */
export function setVehicleDeformationFixed(vehicle: number): void {
	return _in(0x953da1e1, 0xb12c0491, vehicle); 
}

/**
 * **Usage:**
 * 
 * *   Use this native inside a looped function.
 * *   Values:
 * *   `0.0` = no vehicles on streets
 * *   `1.0` = normal vehicles on streets
 * 
 * `1.0` Seems to be the maximum.
 * @param multiplier
 */
export function setVehicleDensityMultiplierThisFrame(multiplier: number): void {
	return _in(0x245a6883, 0xd966d537, _fv(multiplier)); 
}

/**
 * Sets the dirt level of the passed vehicle.
 * @param vehicle
 * @param dirtLevel
 */
export function setVehicleDirtLevel(vehicle: number, dirtLevel: number): void {
	return _in(0x79d3b596, 0xfe44ee8b, vehicle, _fv(dirtLevel)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleDisableTowing(vehicle: number, toggle: boolean): void {
	return _in(0x2b6747fa, 0xa9db9d6b, vehicle, toggle); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 * @param deleteDoor
 */
export function setVehicleDoorBroken(vehicle: number, doorIndex: number, deleteDoor: boolean): void {
	return _in(0xd4d4f6a4, 0xab575a33, vehicle, doorIndex, deleteDoor); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 * @param isBreakable
 */
export function SetVehicleDoorCanBreak(vehicle: number, doorIndex: number, isBreakable: boolean): void {
	return _in(0x2fa133a4, 0xa9d37ed8, vehicle, doorIndex, isBreakable); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 * @param speed
 * @param angle
 */
export function setVehicleDoorControl(vehicle: number, doorIndex: number, speed: number, angle: number): void {
	return _in(0xf2bfa043, 0x0f0a0fcb, vehicle, doorIndex, speed, _fv(angle)); 
}

/**
 * Sets the specified door index open on the passed vehicle. See [`IS_VEHICLE_DOOR_FULLY_OPEN`](#\_0x3E933CFF7B111C22).
 * @param vehicle
 * @param doorIndex
 * @param loose
 * @param openInstantly
 */
export function setVehicleDoorOpen(vehicle: number, doorIndex: number, loose: boolean, openInstantly: boolean): void {
	return _in(0x7c65dac7, 0x3c35c862, vehicle, doorIndex, loose, openInstantly); 
}

/**
 * Sets the specified door index shut on the passed vehicle.
 * 
 * ```cpp
 * enum eDoorId
 * {
 * VEH_EXT_DOOR_DSIDE_F = 0,
 * VEH_EXT_DOOR_DSIDE_R = 1,
 * VEH_EXT_DOOR_PSIDE_F = 2,
 * VEH_EXT_DOOR_PSIDE_R = 3,
 * VEH_EXT_BONNET = 4,
 * VEH_EXT_BOOT = 5,
 * // 0x872E72B8 = 0xFFFFFFFF,
 * }
 * ```
 * @param vehicle
 * @param doorIndex
 * @param closeInstantly
 */
export function setVehicleDoorShut(vehicle: number, doorIndex: number, closeInstantly: boolean): void {
	return _in(0x93d9bd30, 0x0d7789e5, vehicle, doorIndex, closeInstantly); 
}

/**
 * ```
 * // Source GTA VC miss2 leak, matching constants for 0/2/4, testing
 * // They use 10 in am_mp_property_int, don't know what it does atm.
 * enum eCarLock {
 * CARLOCK_NONE = 0,
 * CARLOCK_UNLOCKED = 1,
 * CARLOCK_LOCKED = 2,
 * CARLOCK_LOCKOUT_PLAYER_ONLY = 3,
 * CARLOCK_LOCKED_PLAYER_INSIDE = 4,
 * CARLOCK_LOCKED_INITIALLY = 5,
 * CARLOCK_FORCE_SHUT_DOORS = 6,
 * CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7
 * };
 * ```
 * @param vehicle
 * @param doorLockStatus
 */
export function setVehicleDoorsLocked(vehicle: number, doorLockStatus: number): void {
	return _in(0xb664292e, 0xaecf7fa6, vehicle, doorLockStatus); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleDoorsLockedForNonScriptPlayers(vehicle: number, toggle: boolean): void {
	return _in(0x9737a371, 0x36f07e75, vehicle, toggle); 
}

/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * @param vehicle
 * @param doorIndex
 * @param forceClose
 * @param lock
 * @param p4
 */
export function setVehicleDoorLatched(vehicle: number, doorIndex: number, forceClose: boolean, lock: boolean, p4: boolean): void {
	return _in(0xa5a9653a, 0x8d2caf48, vehicle, doorIndex, forceClose, lock, p4); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleDoorsLockedForAllPlayers(vehicle: number, toggle: boolean): void {
	return _in(0xa2f80b8d, 0x040727cc, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param player
 * @param toggle
 */
export function setVehicleDoorsLockedForPlayer(vehicle: number, player: number, toggle: boolean): void {
	return _in(0x517aaf68, 0x4bb50cd1, vehicle, player, toggle); 
}

/**
 * ```
 * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
 * youtu.be/3arlUxzHl5Y
 * i.imgur.com/WrNpYFs.jpg
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleDropsMoneyWhenBlownUp(vehicle: number, toggle: boolean): void {
	return _in(0x068f64f2, 0x470f9656, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param team
 * @param toggle
 */
export function setVehicleDoorsLockedForTeam(vehicle: number, team: number, toggle: boolean): void {
	return _in(0xb81f6d4a, 0x8f5eeba8, vehicle, team, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleDoorsLockedForUnk(vehicle: number, toggle: boolean): void {
	return _in(0x203b527d, 0x1b77904c, vehicle, toggle); 
}

/**
 * ```
 * Closes all doors of a vehicle:
 * ```
 * @param vehicle
 * @param closeInstantly
 */
export function setVehicleDoorsShut(vehicle: number, closeInstantly: boolean): void {
	return _in(0x781b3d62, 0xbb013ef5, vehicle, closeInstantly); 
}

/**
 * ```
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
 * -------------------------
 * Minimum: -4000
 * Maximum: 1000
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * ```
 * @param vehicle
 * @param health
 */
export function setVehicleEngineHealth(vehicle: number, health: number): void {
	return _in(0x45f6d8ee, 0xf34abef1, vehicle, _fv(health)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleEngineCanDegrade(vehicle: number, toggle: boolean): void {
	return _in(0x98376585, 0x6f2564f9, vehicle, toggle); 
}

/**
 * Starts or stops the engine on the specified vehicle.
 * From what I've tested when I do this to a helicopter the propellers turn off after the engine has started.
 * @param vehicle
 * @param value
 * @param instantly
 * @param disableAutoStart
 */
export function setVehicleEngineOn(vehicle: number, value: boolean, instantly: boolean, disableAutoStart: boolean): void {
	return _in(0x2497c471, 0x7c8b881e, vehicle, value, instantly, disableAutoStart); 
}

/**
 * Examples with a besra:
 * 
 * *   [fade value `0.0`](https://i.imgur.com/DXNk63e.jpg)
 * *   [fade value `0.5`](https://i.imgur.com/2Vb35fq.jpg)
 * *   [fade value `1.0`](https://i.imgur.com/aa8cxaD.jpg)
 * 
 * The parameter fade is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 * @param fade
 */
export function setVehicleEnveffScale(vehicle: number, fade: number): void {
	return _in(0x3afdc536, 0xc3d01674, vehicle, _fv(fade)); 
}

/**
 * The **actual** [`SET_VEHICLE_EXCLUSIVE_DRIVER`](#\_0x41062318F23ED854) native.
 * @param vehicle
 * @param ped
 * @param index
 */
export function SetVehicleExclusiveDriver2(vehicle: number, ped: number, index: number): void {
	return _in(0xb5c51b55, 0x02e85e83, vehicle, ped, index); 
}

/**
 * ```
 * Max value is 32767
 * ```
 * @param vehicle
 * @param range
 */
export function setVehicleExtendedRemovalRange(vehicle: number, range: number): void {
	return _in(0x79df7e80, 0x6202ce01, vehicle, range); 
}

/**
 * Incorrectly named `SET_VEHICLE_EXCLUSIVE_DRIVER`; likely `SET_VEHICLE_ALLOW_*`.
 * 
 * Toggles a flag related to `SET_VEHICLE_EXCLUSIVE_DRIVER`, however, doesn't enable that feature (or trigger script events related to it).
 * 
 * See [`_SET_VEHICLE_EXCLUSIVE_DRIVER_2`](#\_0xB5C51B5502E85E83).
 * 
 * ```
 * NativeDB Removed Parameter 2: int index
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleExclusiveDriver(vehicle: number, toggle: boolean): void {
	return _in(0x41062318, 0xf23ed854, vehicle, toggle); 
}

/**
 * ```
 * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleExplodesOnHighExplosionDamage(vehicle: number, toggle: boolean): void {
	return _in(0x71b0892e, 0xc081d60a, vehicle, toggle); 
}

/**
 * ```
 * Note: only some vehicle have extras
 * extra ids are from 1 - 9 depending on the vehicle
 * -------------------------------------------------
 * ^ not sure if outdated or simply wrong. Max extra ID for b944 is 14
 * -------------------------------------------------
 * p2 is not a on/off toggle. mostly 0 means on and 1 means off.
 * not sure if it really should be a BOOL.
 * -------------------------------------------------
 * Confirmed p2 does not work as a bool. Changed to int. [0=on, 1=off]
 * ```
 * @param vehicle
 * @param extraId
 * @param disable
 */
export function setVehicleExtra(vehicle: number, extraId: number, disable: boolean): void {
	return _in(0x7ee3a3c5, 0xe4a40cc9, vehicle, extraId, disable); 
}

/**
 * Fix a given vehicle.
 * If the vehicle's engine's broken then you cannot fix it with this native.
 * @param vehicle
 */
export function setVehicleFixed(vehicle: number): void {
	return _in(0x115722b1, 0xb9c14c1c, vehicle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleForceAfterburner(vehicle: number, toggle: boolean): void {
	return _in(0xb055a345, 0x27cb8fd7, vehicle, toggle); 
}

/**
 * ```
 * They use the same color indexs as SET_VEHICLE_COLOURS.
 * ```
 * @param vehicle
 * @param pearlescentColor
 * @param wheelColor
 */
export function setVehicleExtraColours(vehicle: number, pearlescentColor: number, wheelColor: number): void {
	return _in(0x2036f561, 0xadd12e33, vehicle, pearlescentColor, wheelColor); 
}

/**
 * ```
 * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
 * Speed is in meters per second
 * You can convert meters/s to mph here:
 * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
 * ```
 * @param vehicle
 * @param speed
 */
export function setVehicleForwardSpeed(vehicle: number, speed: number): void {
	return _in(0xab54a438, 0x726d25d5, vehicle, _fv(speed)); 
}

/**
 * 
 * @param vehicle
 * @param angleRatio
 */
export function setVehicleFlightNozzlePosition(vehicle: number, angleRatio: number): void {
	return _in(0x30d779de, 0x7c4f6dd3, vehicle, _fv(angleRatio)); 
}

/**
 * ```
 * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleGeneratesEngineShockingEvents(vehicle: number, toggle: boolean): void {
	return _in(0x279d50de, 0x5652d935, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param angle
 */
export function setVehicleFlightNozzlePositionImmediate(vehicle: number, angle: number): void {
	return _in(0x9aa47fff, 0x660cb932, vehicle, _fv(angle)); 
}

/**
 * ```
 * Seems to be related to the metal parts, not tyres (like i was expecting lol)
 * Must be called every tick.
 * ```
 * @param vehicle
 * @param friction
 */
export function setVehicleFrictionOverride(vehicle: number, friction: number): void {
	return _in(0x1837af7c, 0x627009ba, vehicle, _fv(friction)); 
}

/**
 * ```
 * It switch to highbeam when p1 is set to true.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleFullbeam(vehicle: number, toggle: boolean): void {
	return _in(0x8b7fd87f, 0x0ddb421e, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleHandbrake(vehicle: number, toggle: boolean): void {
	return _in(0x68478556, 0x8ef26a22, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleHasBeenDrivenFlag(vehicle: number, toggle: boolean): void {
	return _in(0x02398b62, 0x7547189c, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleGravity(vehicle: number, toggle: boolean): void {
	return _in(0x89f149b6, 0x131e57da, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param owned
 */
export function setVehicleHasBeenOwnedByPlayer(vehicle: number, owned: boolean): void {
	return _in(0x2b5f9d2a, 0xf1f1722d, vehicle, owned); 
}

/**
 * 
 * @param vehicle
 * @param hash
 */
export function SetVehicleHandlingHashForAi(vehicle: number, hash: number): void {
	return _in(0x10655fab, 0x9915623d, vehicle, _ch(hash)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleHasMutedSirens(vehicle: number, toggle: boolean): void {
	return _in(0xd8050e0e, 0xb60cf274, vehicle, toggle); 
}

/**
 * ```
 * If false, anything related to INPUT_VEH_TRANSFORM are ignored (changing hover state through script natives still possible).
 * ```
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleHoverTransformEnabled(vehicle: number, toggle: boolean): void {
	return _in(0xf1211889, 0xdf15a763, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function setVehicleHasUnbreakableLights(vehicle: number, p1: boolean): void {
	return _in(0x1aa8a837, 0xd2169d94, vehicle, p1); 
}

/**
 * ```
 * if true, axles won't bend.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleHasStrongAxles(vehicle: number, toggle: boolean): void {
	return _in(0x92f0cf72, 0x2bc4202f, vehicle, toggle); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleHoverTransformActive(vehicle: number, toggle: boolean): void {
	return _in(0x2d55fe37, 0x4d5fdb91, vehicle, toggle); 
}

/**
 * According to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles.
 * I've only seen this work for `deluxo` though, can't figure out what it's supposed to do on `oppressor2`.
 * 
 * For the deluxo:
 * 
 * *   Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode).
 * *   Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode).
 * 
 * If you set it to something like 0.5, then something [weird happens](https://streamable.com/p6wmr), you end up in some 50% hover mode, 50% not hover mode.
 * 
 * This doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided.
 * 
 * Once this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key.
 * @param vehicle
 * @param state
 */
export function SetVehicleHoverTransformPercentage(vehicle: number, state: number): void {
	return _in(0x438b3d7c, 0xa026fe91, vehicle, _fv(state)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleInactiveDuringPlayback(vehicle: number, toggle: boolean): void {
	return _in(0x06582aff, 0x74894c75, vehicle, toggle); 
}

/**
 * ```
 * Sets the turn signal enabled for a vehicle.
 * Set turnSignal to 1 for left light, 0 for right light.
 * ```
 * @param vehicle
 * @param turnSignal
 * @param toggle
 */
export function setVehicleIndicatorLights(vehicle: number, turnSignal: number, toggle: boolean): void {
	return _in(0xb5d45264, 0x751b7df0, vehicle, turnSignal, toggle); 
}

/**
 * 
 * @param vehicle
 * @param color
 */
export function SetVehicleInteriorColor(vehicle: number, color: number): void {
	return _in(0xf40dd601, 0xa65f7f19, vehicle, color); 
}

/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @param ratio
 */
export function SetVehicleHoverTransformRatio(vehicle: number, ratio: number): void {
	return _in(0xd138fa15, 0xc9776837, vehicle, _fv(ratio)); 
}

/**
 * ```
 * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleIsConsideredByPlayer(vehicle: number, toggle: boolean): void {
	return _in(0x31b927bb, 0xc44156cd, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param doorIndex
 * @param doorLockStatus
 */
export function setVehicleIndividualDoorsLocked(vehicle: number, doorIndex: number, doorLockStatus: number): void {
	return _in(0xbe707240, 0x27f85bcd, vehicle, doorIndex, doorLockStatus); 
}

/**
 * ```
 * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleIsRacing(vehicle: number, toggle: boolean): void {
	return _in(0x07116e24, 0xe9d1929d, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleInteriorlight(vehicle: number, toggle: boolean): void {
	return _in(0xbc2042f0, 0x90af6ad3, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param isStolen
 */
export function setVehicleIsStolen(vehicle: number, isStolen: boolean): void {
	return _in(0x67b2c79a, 0xa7ff5738, vehicle, isStolen); 
}

/**
 * ```
 * Sets the wanted state of this vehicle.
 * ```
 * @param vehicle
 * @param state
 */
export function setVehicleIsWanted(vehicle: number, state: boolean): void {
	return _in(0xf7ec25a3, 0xebeec726, vehicle, state); 
}

/**
 * ```
 * multiplier = brightness of head lights.
 * this value isn't capped afaik.
 * multiplier = 0.0 no lights
 * multiplier = 1.0 default game value
 * ```
 * @param vehicle
 * @param multiplier
 */
export function setVehicleLightMultiplier(vehicle: number, multiplier: number): void {
	return _in(0xb385454f, 0x8791f57c, vehicle, _fv(multiplier)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetVehicleJetEngineOn(vehicle: number, toggle: boolean): void {
	return _in(0xb8fbc8b1, 0x330ca9b4, vehicle, toggle); 
}

/**
 * ```
 * set's if the vehicle has lights or not.
 * not an on off toggle.
 * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
 * p1 = 1 ;vehicle doesn't have lights, always off
 * p1 = 2 ;vehicle has always on lights
 * p1 = 3 ;or even larger like 4,5,... normal lights like =1
 * note1: when using =2 on day it's lowbeam,highbeam
 * but at night it's lowbeam,lowbeam,highbeam
 * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
 * ```
 * @param vehicle
 * @param state
 */
export function setVehicleLights(vehicle: number, state: number): void {
	return _in(0x34e710ff, 0x01247c5a, vehicle, state); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleKersAllowed(vehicle: number, toggle: boolean): void {
	return _in(0x99c82f8a, 0x139f3e4e, vehicle, toggle); 
}

/**
 * ```
 * p1 can be either 0, 1 or 2.
 * Determines how vehicle lights behave when toggled.
 * 0 = Default (Lights can be toggled between off, normal and high beams)
 * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
 * 2 = Always On (Lights can be toggled between normal and high beams)
 * ```
 * @param vehicle
 * @param p1
 */
export function SetVehicleLightsMode(vehicle: number, p1: number): void {
	return _in(0x1fd09e73, 0x90a74d54, vehicle, p1); 
}

/**
 * 
 * @param vehicle
 * @param livery
 */
export function setVehicleLivery(vehicle: number, livery: number): void {
	return _in(0x60bf608f, 0x1b8cd1b6, vehicle, livery); 
}

/**
 * To reset the max speed, set the `speed` value to `0.0` or lower.
 * @param vehicle
 * @param speed
 */
export function SetVehicleMaxSpeed(vehicle: number, speed: number): void {
	return _in(0xbaa045b4, 0xe42f3c06, vehicle, _fv(speed)); 
}

/**
 * ```cpp
 * // eVehicleModType values modified to conform to script native reorganization (see 0x140D25327 in 1604).
 * enum eVehicleModType
 * {
 * VMT_SPOILER = 0,
 * VMT_BUMPER_F = 1,
 * VMT_BUMPER_R = 2,
 * VMT_SKIRT = 3,
 * VMT_EXHAUST = 4,
 * VMT_CHASSIS = 5,
 * VMT_GRILL = 6,
 * VMT_BONNET = 7,
 * VMT_WING_L = 8,
 * VMT_WING_R = 9,
 * VMT_ROOF = 10,
 * VMT_ENGINE = 11,
 * VMT_BRAKES = 12,
 * VMT_GEARBOX = 13,
 * VMT_HORN = 14,
 * VMT_SUSPENSION = 15,
 * VMT_ARMOUR = 16,
 * VMT_NITROUS = 17,
 * VMT_TURBO = 18,
 * VMT_SUBWOOFER = 19,
 * VMT_TYRE_SMOKE = 20,
 * VMT_HYDRAULICS = 21,
 * VMT_XENON_LIGHTS = 22,
 * VMT_WHEELS = 23,
 * VMT_WHEELS_REAR_OR_HYDRAULICS = 24,
 * VMT_PLTHOLDER = 25,
 * VMT_PLTVANITY = 26,
 * VMT_INTERIOR1 = 27,
 * VMT_INTERIOR2 = 28,
 * VMT_INTERIOR3 = 29,
 * VMT_INTERIOR4 = 30,
 * VMT_INTERIOR5 = 31,
 * VMT_SEATS = 32,
 * VMT_STEERING = 33,
 * VMT_KNOB = 34,
 * VMT_PLAQUE = 35,
 * VMT_ICE = 36,
 * VMT_TRUNK = 37,
 * VMT_HYDRO = 38,
 * VMT_ENGINEBAY1 = 39,
 * VMT_ENGINEBAY2 = 40,
 * VMT_ENGINEBAY3 = 41,
 * VMT_CHASSIS2 = 42,
 * VMT_CHASSIS3 = 43,
 * VMT_CHASSIS4 = 44,
 * VMT_CHASSIS5 = 45,
 * VMT_DOOR_L = 46,
 * VMT_DOOR_R = 47,
 * VMT_LIVERY_MOD = 48,
 * VMT_LIGHTBAR = 49,
 * };
 * ```
 * @param vehicle
 * @param modType
 * @param modIndex
 * @param customTires
 */
export function setVehicleMod(vehicle: number, modType: number, modIndex: number, customTires: boolean): void {
	return _in(0x6af0636d, 0xdedcb6dd, vehicle, modType, modIndex, customTires); 
}

/**
 * 
 * @param vehicle
 * @param multiplier
 */
export function setVehicleLodMultiplier(vehicle: number, multiplier: number): void {
	return _in(0x93ae6a61, 0xbe015bf1, vehicle, _fv(multiplier)); 
}

/**
 * ```
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * color: number of the color.
 * p3 seems to always be 0.
 * ```
 * @param vehicle
 * @param paintType
 * @param color
 * @param pearlescentColor
 */
export function setVehicleModColor1(vehicle: number, paintType: number, color: number, pearlescentColor: number): void {
	return _in(0x43feb945, 0xee7f85b8, vehicle, paintType, color, pearlescentColor); 
}

/**
 * ```
 * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
 * ```
 * @param vehicle
 * @param modKit
 */
export function setVehicleModKit(vehicle: number, modKit: number): void {
	return _in(0x1f2aa07f, 0x00b3217a, vehicle, modKit); 
}

/**
 * ```
 * Changes the secondary paint type and color
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * color: number of the color
 * ```
 * @param vehicle
 * @param paintType
 * @param color
 */
export function setVehicleModColor2(vehicle: number, paintType: number, color: number): void {
	return _in(0x816562ba, 0xdfdec83e, vehicle, paintType, color); 
}

/**
 * ```
 * seems to make the vehicle stop spawning naturally in traffic. Here's an essential example:
 * VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY("taco"), true);
 * ```
 * @param model
 * @param suppressed
 */
export function setVehicleModelIsSuppressed(model: number, suppressed: boolean): void {
	return _in(0x0fc2d89a, 0xc25a5814, _ch(model), suppressed); 
}

/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * @param vehicle
 * @param name
 */
export function setVehicleNameDebug(vehicle: number, name: string): void {
	return _in(0xbfdf984e, 0x2c22b94f, vehicle, _ts(name)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleNeedsToBeHotwired(vehicle: number, toggle: boolean): void {
	return _in(0xfba550ea, 0x44404ee6, vehicle, toggle); 
}

/**
 * ```
 * Sets the neon lights of the specified vehicle on/off.
 * Indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * ```
 * @param vehicle
 * @param index
 * @param toggle
 */
export function SetVehicleNeonLightEnabled(vehicle: number, index: number, toggle: boolean): void {
	return _in(0x2aa720e4, 0x287bf269, vehicle, index, toggle); 
}

/**
 * Sets the color of the neon lights on the specified vehicle.
 * 
 * RGB values and colour names taken from the decompiled scripts:
 * 
 * | Colour         |  R  |  G  |  B  |
 * |---------------|:---:|:---:|:---:|
 * | White         | 222 | 222 | 255 |
 * | Blue          | 2   | 21  | 255 |
 * | Electric Blue | 3   | 83  | 255 |
 * | Mint Green    | 0   | 255 | 140 |
 * | Lime Green    | 94  | 255 | 1   |
 * | Yellow        | 255 | 255 | 0   |
 * | Golden Shower | 255 | 150 | 0   |
 * | Orange        | 255 | 62  | 0   |
 * | Red           | 255 | 1   | 1   |
 * | Pony Pink     | 255 | 50  | 100 |
 * | Hot Pink      | 255 | 5   | 190 |
 * | Purple        | 35  | 1   | 255 |
 * | Blacklight    | 15  | 3   | 255 |
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function SetVehicleNeonLightsColour(vehicle: number, r: number, g: number, b: number): void {
	return _in(0x8e0a5822, 0x09a62695, vehicle, r, g, b); 
}

/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * @param vehicle
 * @param color
 */
export function SetVehicleNeonLightsColor2(vehicle: number, color: number): void {
	return _in(0xb93b2867, 0xf7b479d1, vehicle, color); 
}

/**
 * ```
 * NativeDB Introduced: v1604
 * NativeDB Added Parameter 2 (2060): float level
 * NativeDB Added Parameter 3 (2060): float power
 * NativeDB Added Parameter 4 (2060): float rechargeTime
 * NativeDB Added Parameter 5 (2060): BOOL disableSound
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleNitroEnabled(vehicle: number, toggle: boolean): void {
	return _in(0xc8e9b6b7, 0x1b8e660d, vehicle, toggle); 
}

/**
 * ```
 * Plates:
 * Blue/White - 0
 * Yellow/black - 1
 * Yellow/Blue - 2
 * Blue/White2 - 3
 * Blue/White3 - 4
 * Yankton - 5
 * ```
 * @param vehicle
 * @param plateIndex
 */
export function setVehicleNumberPlateTextIndex(vehicle: number, plateIndex: number): void {
	return _in(0x9088eb5a, 0x43ffb0a1, vehicle, plateIndex); 
}

/**
 * 
 * @param vehicle
 * @param plateText
 */
export function setVehicleNumberPlateText(vehicle: number, plateText: string): void {
	return _in(0x95a88f0b, 0x409cda47, vehicle, _ts(plateText)); 
}

/**
 * ```
 * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
 * ```
 * @param vehicle
 * @param killDriver
 * @param explodeOnImpact
 */
export function setVehicleOutOfControl(vehicle: number, killDriver: boolean, explodeOnImpact: boolean): void {
	return _in(0xf19d095e, 0x42d430cc, vehicle, killDriver, explodeOnImpact); 
}

/**
 * ```
 * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 2: float p1
 * ```
 * @param vehicle
 */
export function setVehicleOnGroundProperly(vehicle: number): boolean {
	return _in(0x49733e92, 0x263139d1, vehicle, _r); 
}

/**
 * 
 * @param vehicle
 * @param active
 */
export function SetVehicleParachuteActive(vehicle: number, active: boolean): void {
	return _in(0x0bffb028, 0xb3dd0a97, vehicle, active); 
}

/**
 * ```
 * parachuteModel = 230075693
 * ```
 * @param vehicle
 * @param modelHash
 */
export function SetVehicleParachuteModel(vehicle: number, modelHash: number): void {
	return _in(0x4d610c6b, 0x56031351, vehicle, _ch(modelHash)); 
}

/**
 * ```
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * ```
 * @param vehicle
 * @param health
 */
export function setVehiclePetrolTankHealth(vehicle: number, health: number): void {
	return _in(0x70db5764, 0x9fa8d0d8, vehicle, _fv(health)); 
}

/**
 * ```
 * colorIndex = 0 - 7
 * ```
 * @param vehicle
 * @param textureVariation
 */
export function SetVehicleParachuteTextureVariation(vehicle: number, textureVariation: number): void {
	return _in(0xa74ad243, 0x9468c883, vehicle, textureVariation); 
}

/**
 * 
 * @param vehicle
 * @param p1
 */
export function SetVehicleRampLaunchModifier(vehicle: number, p1: number): void {
	return _in(0xefc13b1c, 0xe30d755d, vehicle, _fv(p1)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleProvidesCover(vehicle: number, toggle: boolean): void {
	return _in(0x5afeedd9, 0xbb2899d7, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetVehicleRampSidewaysLaunchMotion(vehicle: number, toggle: boolean): void {
	return _in(0x1bbac99c, 0x0bc53656, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetVehicleReceivesRampDamage(vehicle: number, toggle: boolean): void {
	return _in(0x28d034a9, 0x3fe31bf5, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function SetVehicleRampUpwardsLaunchMotion(vehicle: number, toggle: boolean): void {
	return _in(0x756ae6e9, 0x62168a04, vehicle, toggle); 
}

/**
 * Often used in conjunction with: [SET_VEHICLE_REDUCE_GRIP](#\_0x222FF6A823D122E2).
 * 
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 * @param val
 */
export function SetVehicleReduceTraction(vehicle: number, val: number): void {
	return _in(0x6dee944e, 0x1ee90cfb, vehicle, val); 
}

/**
 * 
 * @param vehicle
 * @param percentage
 */
export function SetVehicleRocketBoostPercentage(vehicle: number, percentage: number): void {
	return _in(0xfeb2dded, 0x3509562e, vehicle, _fv(percentage)); 
}

/**
 * 
 * @param vehicle
 * @param active
 */
export function SetVehicleRocketBoostActive(vehicle: number, active: boolean): void {
	return _in(0x81e1552e, 0x35dc3839, vehicle, active); 
}

/**
 * ```
 * Reduces grip significantly so it's hard to go anywhere.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleReduceGrip(vehicle: number, toggle: boolean): void {
	return _in(0x222ff6a8, 0x23d122e2, vehicle, toggle); 
}

/**
 * Used to set the tornado custom (convertible) rooftop livery.
 * 
 * Livery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.
 * 
 * Might work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.
 * @param vehicle
 * @param livery
 */
export function SetVehicleRoofLivery(vehicle: number, livery: number): void {
	return _in(0xa6d3a875, 0x0dc73270, vehicle, livery); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleRudderBroken(vehicle: number, toggle: boolean): void {
	return _in(0x09606148, 0xb6c71def, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param time
 */
export function SetVehicleRocketBoostRefillTime(vehicle: number, time: number): void {
	return _in(0xe00f2ab1, 0x00b76e89, vehicle, _fv(time)); 
}

/**
 * ```
 * Adds some kind of shadow to the vehicle.
 * -1 disables the effect.
 * DISABLE_*
 * ```
 * @param vehicle
 * @param p1
 * @param p2
 */
export function SetVehicleShadowEffect(vehicle: number, p1: number, p2: number): void {
	return _in(0xf0e4ba16, 0xd1db546c, vehicle, p1, p2); 
}

/**
 * ```
 * Only works during nighttime.
 * ```
 * @param heli
 * @param toggle
 * @param canBeUsedByAI
 */
export function setVehicleSearchlight(heli: number, toggle: boolean, canBeUsedByAI: boolean): void {
	return _in(0x14e85c5e, 0xe7a4d542, heli, toggle, canBeUsedByAI); 
}

/**
 * ```
 * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleSilent(vehicle: number, toggle: boolean): void {
	return _in(0x9d44fcce, 0x98450843, vehicle, toggle); 
}

/**
 * ```
 * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
 * WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
 * ```
 * @param driver
 * @param entity
 * @param xTarget
 * @param yTarget
 * @param zTarget
 */
export function setVehicleShootAtTarget(driver: number, entity: number, xTarget: number, yTarget: number, zTarget: number): void {
	return _in(0x74cd9a93, 0x27a282ea, driver, entity, _fv(xTarget), _fv(yTarget), _fv(zTarget)); 
}

/**
 * ```
 * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
 * ============================================
 * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
 * Btw, func_1333 ends up calling this func which uses this native,
 * void func_1338(int iParam0)//Position
 * {
 * ENTITY::FREEZE_ENTITY_POSITION(iParam0, true);
 * ENTITY::SET_ENTITY_COLLISION(iParam0, false, 0);
 * ENTITY::SET_ENTITY_INVINCIBLE(iParam0, true);
 * VEHICLE::_0xDF594D8D(iParam0, true);
 * }
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleSt(vehicle: number, toggle: boolean): void {
	return _in(0x1cf38d52, 0x9d7441d9, vehicle, toggle); 
}

/**
 * ```
 * Locks the vehicle's steering to the desired angle, explained below.
 * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
 * Steer bias:
 * -1.0 = full right
 * 0.0 = centered steering
 * 1.0 = full left
 * ```
 * @param vehicle
 * @param value
 */
export function setVehicleSteerBias(vehicle: number, value: number): void {
	return _in(0x42a8ec77, 0xd5150cbe, vehicle, _fv(value)); 
}

/**
 * 
 * @param vehicle
 * @param scalar
 */
export function setVehicleSteeringBiasScalar(vehicle: number, scalar: number): void {
	return _in(0x9007a2f2, 0x1dc108d4, vehicle, _fv(scalar)); 
}

/**
 * 
 * @param vehicle
 * @param position
 * @param p2
 */
export function setVehicleTankTurretPosition(vehicle: number, position: number, p2: boolean): void {
	return _in(0x56b94c6d, 0x7127dfba, vehicle, _fv(position), p2); 
}

/**
 * ```
 * Activate siren on vehicle (Only works if the vehicle has a siren).
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleSiren(vehicle: number, toggle: boolean): void {
	return _in(0xf4924635, 0xa19eb37d, vehicle, toggle); 
}

/**
 * ```
 * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleStrong(vehicle: number, toggle: boolean): void {
	return _in(0x3e8c8727, 0x991a8a0b, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param ped
 * @param toggle
 */
export function setVehicleTimedExplosion(vehicle: number, ped: number, toggle: boolean): void {
	return _in(0x2e0a74e1, 0x002380b1, vehicle, ped, toggle); 
}

/**
 * ```
 * Toggles specific flag on turret
 * ```
 * 
 * ```
 * NativeDB Introduced: v1290
 * ```
 * @param vehicle
 * @param index
 * @param toggle
 */
export function SetVehicleTurretUnk(vehicle: number, index: number, toggle: boolean): void {
	return _in(0xc60060eb, 0x0d8ac7b1, vehicle, index, toggle); 
}

/**
 * ```
 * tyreIndex = 0 to 4 on normal vehicles
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * ```
 * @param vehicle
 * @param tyreIndex
 */
export function setVehicleTyreFixed(vehicle: number, tyreIndex: number): void {
	return _in(0x6e13fc66, 0x2b882d1d, vehicle, tyreIndex); 
}

/**
 * ```
 * Sets the tire smoke's color of this vehicle.
 * vehicle: The vehicle that is the target of this method.
 * r: The red level in the RGB color code.
 * g: The green level in the RGB color code.
 * b: The blue level in the RGB color code.
 * Note:
 * setting r,g,b to 0 will give the car independance day tyre smoke
 * ```
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleTyreSmokeColor(vehicle: number, r: number, g: number, b: number): void {
	return _in(0xb5ba80f8, 0x39791c0f, vehicle, r, g, b); 
}

/**
 * ```
 * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
 * ```
 * @param vehicle
 * @param position
 */
export function setVehicleTowTruckArmPosition(vehicle: number, position: number): void {
	return _in(0xfe54b92a, 0x344583ca, vehicle, _fv(position)); 
}

/**
 * 
 * @param vehicle
 * @param speed
 */
export function setVehicleTurretSpeedThisFrame(vehicle: number, speed: number): void {
	return _in(0x1093408b, 0x4b9d1146, vehicle, _fv(speed)); 
}

/**
 * ```
 * "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
 * to burst all tyres type it 8 times where p1 = 0 to 7.
 * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * ```
 * @param vehicle
 * @param index
 * @param onRim
 * @param p3
 */
export function setVehicleTyreBurst(vehicle: number, index: number, onRim: boolean, p3: number): void {
	return _in(0xec6a202e, 0xe4960385, vehicle, index, onRim, _fv(p3)); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleUndriveable(vehicle: number, toggle: boolean): void {
	return _in(0x8aba6af5, 0x4b942b95, vehicle, toggle); 
}

/**
 * ```
 * Allows you to toggle bulletproof tires.
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleTyresCanBurst(vehicle: number, toggle: boolean): void {
	return _in(0xeb9dc3c7, 0xd8596c46, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleUseAlternateHandling(vehicle: number, toggle: boolean): void {
	return _in(0x1d97d1e3, 0xa70a649f, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param multiplier
 */
export function SetVehicleUnkDamageMultiplier(vehicle: number, multiplier: number): void {
	return _in(0x45a561a9, 0x421ab6ad, vehicle, _fv(multiplier)); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setVehicleUseCutsceneWheelCompression(p0: number, p1: boolean, p2: boolean, p3: boolean): any {
	return _in(0xe023e8ac, 0x4ef7c117, p0, p1, p2, p3, _r, _ri); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleUsePlayerLightSettings(vehicle: number, toggle: boolean): void {
	return _in(0xc45c27ef, 0x50f36adc, vehicle, toggle); 
}

/**
 * ```
 * vehicle must be a plane
 * ```
 * @param vehicle
 * @param toggle
 */
export function setVehicleUsesLargeRearRamp(vehicle: number, toggle: boolean): void {
	return _in(0xcac66558, 0xb944da67, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param weaponIndex
 * @param capacity
 */
export function SetVehicleWeaponCapacity(vehicle: number, weaponIndex: number, capacity: number): void {
	return _in(0x44cd1f49, 0x3db2a0a6, vehicle, weaponIndex, capacity); 
}

/**
 * 
 * @param vehicle
 * @param weaponSlot
 */
export function SetVehicleWeaponsDisabled(vehicle: number, weaponSlot: number): void {
	return _in(0x86b4b621, 0x2cb8b627, vehicle, weaponSlot); 
}

/**
 * Refer to [GET_VEHICLE_WHEEL_TYPE](#\_0xB3ED1BFB4BE636DC) for wheel types.
 * @param vehicle
 * @param wheelType
 */
export function setVehicleWheelType(vehicle: number, wheelType: number): void {
	return _in(0x487eb21c, 0xc7295ba1, vehicle, wheelType); 
}

/**
 * 
 * @param vehicle
 * @param toggle
 */
export function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle: number, toggle: boolean): void {
	return _in(0xa37b9a51, 0x7b133349, vehicle, toggle); 
}

/**
 * 
 * @param vehicle
 * @param enabled
 */
export function setVehicleWheelsCanBreak(vehicle: number, enabled: boolean): void {
	return _in(0x29b18b4f, 0xd460ca8f, vehicle, enabled); 
}

/**
 * ```
 * Related to monster trucks in native scripts.
 * ```
 * 
 * ```
 * NativeDB Introduced: v1604
 * ```
 * @param vehicle
 * @param toggle
 */
export function SetVehicleWheelsDealDamage(vehicle: number, toggle: boolean): void {
	return _in(0x2970eaa1, 0x8fd5e42f, vehicle, toggle); 
}

/**
 * Paint index goes from 0 to 12.
 * 
 * You can find the list of colors and ids here: [\_GET_VEHICLE_HEADLIGHTS_COLOUR](#\_0x3DFF319A831E0CDB)
 * @param vehicle
 * @param color
 */
export function SetVehicleXenonLightsColor(vehicle: number, color: number): void {
	return _in(0xe41033b2, 0x5d003a07, vehicle, color); 
}

/**
 * ```
 * enum WindowTints
 * {
 * WINDOWTINT_NONE,
 * WINDOWTINT_PURE_BLACK,
 * WINDOWTINT_DARKSMOKE,
 * WINDOWTINT_LIGHTSMOKE,
 * WINDOWTINT_STOCK,
 * WINDOWTINT_LIMO,
 * WINDOWTINT_GREEN
 * };
 * ```
 * @param vehicle
 * @param tint
 */
export function setVehicleWindowTint(vehicle: number, tint: number): void {
	return _in(0x57c51e6b, 0xad752696, vehicle, tint); 
}

/**
 * 
 * @param vehicle
 * @param entity
 * @param p2
 */
export function stabiliseEntityAttachedToHeli(vehicle: number, entity: number, p2: number): void {
	return _in(0x37470627, 0x1354cb18, vehicle, entity, _fv(p2)); 
}

/**
 * ```
 * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
 * ```
 * @param vehicle
 * @param time
 */
export function skipTimeInPlaybackRecordedVehicle(vehicle: number, time: number): void {
	return _in(0x9438f7ad, 0x68771a20, vehicle, _fv(time)); 
}

/**
 * 
 * @param vehicle
 */
export function skipToEndAndStopPlaybackRecordedVehicle(vehicle: number): void {
	return _in(0xab8e2eda, 0x0c0a5883, vehicle); 
}

/**
 * p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
 * 
 * See [`REQUEST_VEHICLE_RECORDING`](#\_0xAF514CABE74CBF15).
 * @param vehicle
 * @param recording
 * @param script
 * @param p3
 */
export function startPlaybackRecordedVehicle(vehicle: number, recording: number, script: string, p3: boolean): void {
	return _in(0x3f878f92, 0xb3a7a071, vehicle, recording, _ts(script), p3); 
}

/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * @param vehicle
 * @param windowIndex
 */
export function smashVehicleWindow(vehicle: number, windowIndex: number): void {
	return _in(0x9e5b5e4d, 0x2ccd2259, vehicle, windowIndex); 
}

/**
 * ```
 * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
 * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
 * ```
 * @param vehicle
 * @param recording
 * @param script
 * @param flags
 * @param time
 * @param drivingStyle
 */
export function startPlaybackRecordedVehicleWithFlags(vehicle: number, recording: number, script: string, flags: number, time: number, drivingStyle: number): void {
	return _in(0x7d80fd64, 0x5d4da346, vehicle, recording, _ts(script), flags, time, drivingStyle); 
}

/**
 * ```
 * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
 * 
 * 0x1F2E4E06DEA8992B is a related native that deals with the AI physics for such recordings.
 * ```
 * @param vehicle
 * @param recording
 * @param script
 * @param speed
 * @param drivingStyle
 */
export function startPlaybackRecordedVehicleUsingAi(vehicle: number, recording: number, script: string, speed: number, drivingStyle: number): void {
	return _in(0x29de5fa5, 0x2d00428c, vehicle, recording, _ts(script), _fv(speed), drivingStyle); 
}

/**
 * 
 */
export function stopAllGarageActivity(): void {
	return _in(0x0f87e938, 0xbdf29d66); 
}

/**
 * ```
 * Sounds the horn for the specified vehicle.
 * vehicle: The vehicle to activate the horn for.
 * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
 * duration: The duration to sound the horn, in milliseconds.
 * Note: If a player is in the vehicle, it will only sound briefly.
 * ```
 * @param vehicle
 * @param duration
 * @param mode
 * @param forever
 */
export function startVehicleHorn(vehicle: number, duration: number, mode: number, forever: boolean): void {
	return _in(0x9c8c6504, 0xb5b63d2c, vehicle, duration, _ch(mode), forever); 
}

/**
 * ```
 * Stops CTaskBringVehicleToHalt
 * ```
 * @param vehicle
 */
export function StopBringVehicleToHalt(vehicle: number): void {
	return _in(0x7c06330b, 0xfdda182e, vehicle); 
}

/**
 * 
 * @param vehicle
 */
export function startVehicleAlarm(vehicle: number): void {
	return _in(0xb8ff7ab4, 0x5305c345, vehicle); 
}

/**
 * Toggles whether ambient trains can spawn on the specified track or not.
 * 
 * | trackId | File | Description |
 * | --- | --- | --- |
 * | 0 | `trains1.dat` | Main track around SA |
 * | 1 | `trains2.dat` | Davis Quartz Quarry branch |
 * | 2 | `trains3.dat` | Second track alongside live track along Roy Lewenstein Blv. |
 * | 3 | `trains4.dat` | Metro track circuit |
 * | 4 | `trains5.dat` | Branch in Mirror Park Railyard |
 * | 5 | `trains6.dat` | Branch in Mirror Park Railyard |
 * | 6 | `trains7.dat` | LS branch to Mirror Park Railyard |
 * | 7 | `trains8.dat` | Overground part of metro track along Forum Dr. |
 * | 8 | `trains9.dat` | Branch to Mirror Park Railyard |
 * | 9 | `trains10.dat` | Yankton train |
 * | 10 | `trains11.dat` | Part of metro track near mission row |
 * | 11 | `trains12.dat` | Yankton prologue mission train |
 * 
 * Tracks IDs `0` and `3` are the main tracks you find trains on during normal gameplay, all the others are used during missions and are not complete tracks.
 * @param trackId
 * @param state
 * @return None. The original return type is `void`, but ABI compatibility makes this impossible.
 */
export function switchTrainTrack(trackId: number, state: boolean): void {
	return _in(0xfd813bb7, 0xdb977f20, trackId, state); 
}

/**
 * 
 * @param vehicle
 * @param modType
 * @param toggle
 */
export function toggleVehicleMod(vehicle: number, modType: number, toggle: boolean): void {
	return _in(0x2a1f4f37, 0xf95bad08, vehicle, modType, toggle); 
}

/**
 * 
 * @param vehicle
 */
export function stopPlaybackRecordedVehicle(vehicle: number): void {
	return _in(0x54833611, 0xc17abdea, vehicle); 
}

/**
 * ```
 * in script hook .net
 * Vehicle v = ...;
 * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
 * ```
 * @param vehicle
 */
export function trackVehicleVisibility(vehicle: number): void {
	return _in(0x64473aef, 0xdcf47dca, vehicle); 
}

/**
 * Transforms the `stormberg` to its "water vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param instantly
 */
export function transformToSubmarine(vehicle: number, instantly: boolean): void {
	return _in(0xbe4c854f, 0xfdb6eebe, vehicle, instantly); 
}

/**
 * Transforms the `stormberg` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param instantly
 */
export function transformToCar(vehicle: number, instantly: boolean): void {
	return _in(0x2a69ffd1, 0xb42bff9e, vehicle, instantly); 
}

/**
 * 
 * @param vehicle
 */
export function unpausePlaybackRecordedVehicle(vehicle: number): void {
	return _in(0x8879ee09, 0x268305d5, vehicle); 
}

/**
 * ```
 * Gets the aggressiveness factor of the ocean waves.
 * ```
 */
export function getDeepOceanScaler(): number {
	return _in(0x2b2a2cc8, 0x6778b619, _r, _rf); 
}

/**
 * Only 8 current rises can exist. If rises need to be changed, use REMOVE_EXTRA_CALMING_QUAD and then ADD_EXTRA_CALMING_QUAD again.
 * After removing a rise, you will be able to add a rise again.
 * @param xLow
 * @param yLow
 * @param xHigh
 * @param yHigh
 * @param height
 * @return If succeeded to add, returns a rise index that can be used on REMOVE_EXTRA_CALMING_QUAD.
If failed to add, returns -1 (make sure you don't pass -1 to REMOVE_EXTRA_CALMING_QUAD).
 */
export function addExtraCalmingQuad(xLow: number, yLow: number, xHigh: number, yHigh: number, height: number): number {
	return _in(0xfdbf4cdb, 0xc07e1706, _fv(xLow), _fv(yLow), _fv(xHigh), _fv(yHigh), _fv(height), _r, _ri); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param height
 */
export function getWaterHeightNoWaves(x: number, y: number, z: number): boolean {
	return _in(0x8ee6b53c, 0xe13a9794, _fv(x), _fv(y), _fv(z), _fi(height), _r); 
}

/**
 * ```
 * p0 is the handle returned from _0xFDBF4CDBC07E1706
 * ```
 * @param p0
 */
export function RemoveCurrentRise(p0: number): void {
	return _in(0xb1252e3e, 0x59a82aaf, p0); 
}

/**
 * ```
 * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
 * Works only ~200 meters around the player.
 * ```
 * @param intensity
 */
export function setDeepOceanScaler(intensity: number): void {
	return _in(0xb96b00e9, 0x76be977f, _fv(intensity)); 
}

/**
 * ```
 * This function set height to the value of z-axis of the water surface.
 * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
 * note: seems to return true when you are in water
 * ```
 * @param x
 * @param y
 * @param z
 * @param height
 */
export function getWaterHeight(x: number, y: number, z: number): boolean {
	return _in(0xf6829842, 0xc06ae524, _fv(x), _fv(y), _fv(z), _fi(height), _r); 
}

/**
 * ```
 * Sets the water height for a given position and radius.
 * ```
 * @param x
 * @param y
 * @param height
 * @param radius
 */
export function modifyWater(x: number, y: number, height: number, radius: number): void {
	return _in(0xc443fd75, 0x7c3ba637, _fv(x), _fv(y), _fv(height), _fv(radius)); 
}

/**
 * 
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param result
 */
export function testProbeAgainstWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
	return _in(0xffa5d878, 0x809819db, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _v(result), _r); 
}

/**
 * ```
 * Sets the waves intensity back to original (1.0 in most cases).
 * ```
 */
export function resetDeepOceanScaler(): void {
	return _in(0x5e5e9928, 0x5ae812db); 
}

/**
 * Flags are identical to START_SHAPE_TEST\*, however, 128 is automatically set.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flag
 * @param result
 */
export function testProbeAgainstAllWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flag: number): boolean {
	return _in(0x8974647e, 0xd222ea5f, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flag, _v(result), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param flag
 * @param height
 */
export function testVerticalProbeAgainstAllWater(x: number, y: number, z: number, flag: number): boolean {
	return _in(0x2b3451fa, 0x1e3142e2, _fv(x), _fv(y), _fv(z), flag, _fi(height), _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function addAmmoToPed(ped: number, weaponHash: number, ammo: number): void {
	return _in(0x78f0424c, 0x34306220, ped, _ch(weaponHash), ammo); 
}

/**
 * 
 * @param ped
 * @param ammoType
 * @param ammo
 */
export function AddAmmoToPedByType(ped: number, ammoType: number, ammo: number): void {
	return _in(0x2472622c, 0xe1f2d45f, ped, _ch(ammoType), ammo); 
}

/**
 * ```
 * this returns if you can use the weapon while using a parachute
 * ```
 * @param weaponHash
 */
export function canUseWeaponOnParachute(weaponHash: number): boolean {
	return _in(0xbc7be5ab, 0xc0879f74, _ch(weaponHash), _r); 
}

/**
 * 
 * @param entity
 */
export function clearEntityLastWeaponDamage(entity: number): void {
	return _in(0xac678e40, 0xbe7c74d2, entity); 
}

/**
 * 
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param weaponHash
 */
export function CreateAirDefenseArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, weaponHash: number): number {
	return _in(0x9da58cdb, 0xf6bdbc08, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _ch(weaponHash), _r, _ri); 
}

/**
 * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
 * @param ped
 */
export function clearPedLastWeaponDamage(ped: number): void {
	return _in(0x0e98f88a, 0x24c5f4b8, ped); 
}

/**
 * Both coordinates are from objects in the decompiled scripts.
 * 
 * Native related to [\_0xECDC202B25E5CF48](#\_0xECDC202B25E5CF48) p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param weaponHash
 * @return Seems to be some sort of handle, result is += 1 any time this native is called.
 */
export function CreateAirDefenseSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number, weaponHash: number): number {
	return _in(0x91ef3458, 0x4710be99, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p4), _fv(p5), _fv(p6), _ch(weaponHash), _r, _ri); 
}

/**
 * ```
 * Now has 8 params.
 * ```
 * 
 * ```
 * NativeDB Added Parameter 9: Any p8
 * NativeDB Added Parameter 10: Any p9
 * ```
 * @param weaponHash
 * @param ammoCount
 * @param x
 * @param y
 * @param z
 * @param showWorldModel
 * @param scale
 * @param p7
 */
export function createWeaponObject(weaponHash: number, ammoCount: number, x: number, y: number, z: number, showWorldModel: boolean, scale: number, p7: any): number {
	return _in(0x9541d3cf, 0x0d398f36, _ch(weaponHash), ammoCount, _fv(x), _fv(y), _fv(z), showWorldModel, _fv(scale), p7, _r, _ro); 
}

/**
 * 
 * @param zoneId
 */
export function DoesAirDefenseZoneExist(zoneId: number): boolean {
	return _in(0xcd79a550, 0x999d7d4f, zoneId, _r); 
}

/**
 * 
 * @param weaponHash
 * @param componentHash
 */
export function doesWeaponTakeWeaponComponent(weaponHash: number, componentHash: number): boolean {
	return _in(0x5cee3df5, 0x69cecab0, _ch(weaponHash), _ch(componentHash), _r); 
}

/**
 * ```
 * Enables laser sight on any weapon.
 * It doesn't work. Neither on tick nor OnKeyDown
 * ```
 * @param toggle
 */
export function enableLaserSightRendering(toggle: boolean): void {
	return _in(0xc8b46d77, 0x27d864aa, toggle); 
}

/**
 * 
 * @param zoneId
 * @param x
 * @param y
 * @param z
 */
export function FireAirDefenseWeapon(zoneId: number, x: number, y: number, z: number): void {
	return _in(0x44f1012b, 0x69313374, zoneId, _fv(x), _fv(y), _fv(z)); 
}

/**
 * ```
 * WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
 * ```
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function explodeProjectiles(ped: number, weaponHash: number, p2: boolean): void {
	return _in(0xfc4bd125, 0xde7611e4, ped, _ch(weaponHash), p2); 
}

/**
 * ```
 * WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
 * From decompiled scripts
 * Returns total ammo in weapon
 * GTALua Example :
 * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
 * ```
 * @param ped
 * @param weaponhash
 */
export function getAmmoInPedWeapon(ped: number, weaponhash: number): number {
	return _in(0x015a5221, 0x36d7f951, ped, _ch(weaponhash), _r, _ri); 
}

/**
 * ```
 * p1 is always 0 in the scripts.
 * ```
 * @param ped
 * @param p1
 */
export function getBestPedWeapon(ped: number, p1: boolean): number {
	return _in(0x8483e98e, 0x8b888ae2, ped, p1, _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function getAmmoInClip(ped: number, weaponHash: number): boolean {
	return _in(0x2e120224, 0x8937775c, ped, _ch(weaponHash), _ii(ammo), _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 */
export function getCurrentPedVehicleWeapon(ped: number): boolean {
	return _in(0x1017582b, 0xcd3832dc, ped, _i, _r); 
}

/**
 * ```
 * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
 * p2 seems to be 1 most of the time; and is not implemented.
 * ```
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function getCurrentPedWeapon(ped: number, p2: boolean): boolean {
	return _in(0x3a87e44b, 0xb9a01d54, ped, _i, p2, _r); 
}

/**
 * ```
 * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * ```
 * @param ped
 * @param gadgetHash
 */
export function getIsPedGadgetEquipped(ped: number, gadgetHash: number): boolean {
	return _in(0xf7313320, 0x72f5156c, ped, _ch(gadgetHash), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * @param ped
 */
export function getCurrentPedWeaponEntityIndex(ped: number): number {
	return _in(0x3b390a93, 0x9af0b5fc, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function getLockonDistanceOfCurrentPedWeapon(ped: number): number {
	return _in(0x840f03e9, 0x041e2c9c, ped, _r, _rf); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function getMaxAmmo(ped: number, weaponHash: number): boolean {
	return _in(0xdc16122c, 0x7a20c933, ped, _ch(weaponHash), _ii(ammo), _r); 
}

/**
 * 
 * @param ped
 * @param ammoType
 * @param ammo
 */
export function GetMaxAmmoByType(ped: number, ammoType: number): boolean {
	return _in(0x585847c5, 0xe4e11709, ped, _ch(ammoType), _ii(ammo), _r); 
}

/**
 * ```
 * p2 is mostly 1 in the scripts.
 * ```
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function getMaxAmmoInClip(ped: number, weaponHash: number, p2: boolean): number {
	return _in(0xa38dcffc, 0xea8962fa, ped, _ch(weaponHash), p2, _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getMaxRangeOfCurrentPedWeapon(ped: number): number {
	return _in(0x814c9d19, 0xdfd69679, ped, _r, _rf); 
}

/**
 * 
 * @param ped
 * @param ammoType
 */
export function getPedAmmoByType(ped: number, ammoType: number): number {
	return _in(0x39d22031, 0x557946c1, ped, _ch(ammoType), _r, _ri); 
}

/**
 * ```
 * Returns the current ammo type of the specified ped's specified weapon.
 * 
 * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
 * 
 * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
 * ```
 * @param ped
 * @param weaponHash
 */
export function getPedAmmoTypeFromWeapon(ped: number, weaponHash: number): number {
	return _in(0x7fead38b, 0x326b9f74, ped, _ch(weaponHash), _r); 
}

/**
 * ```
 * Returns the base/default ammo type of the specified ped's specified weapon.
 * 
 * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
 * ```
 * @param ped
 * @param weaponHash
 */
export function GetPedAmmoTypeFromWeapon2(ped: number, weaponHash: number): number {
	return _in(0xf489b44d, 0xd5af4bd9, ped, _ch(weaponHash), _r); 
}

/**
 * ```
 * Pass ped. Pass address of Vector3.
 * The coord will be put into the Vector3.
 * The return will determine whether there was a coord found or not.
 * ```
 * @param ped
 * @param coords
 */
export function getPedLastWeaponImpactCoord(ped: number): boolean {
	return _in(0x6c4d0409, 0xba1a2bc2, ped, _v(coords), _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 */
export function GetPedWeaponLiveryColor(ped: number, weaponHash: number, camoComponentHash: number): number {
	return _in(0xf0a60040, 0xbe558f2d, ped, _ch(weaponHash), _ch(camoComponentHash), _r, _ri); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 */
export function getPedWeaponTintIndex(ped: number, weaponHash: number): number {
	return _in(0x2b9eedc0, 0x7bd06b9f, ped, _ch(weaponHash), _r, _ri); 
}

/**
 * 
 * @param ped
 */
export function getSelectedPedWeapon(ped: number): number {
	return _in(0x0a6db496, 0x5674d243, ped, _r); 
}

/**
 * 
 * @param ped
 * @param weaponSlot
 */
export function getPedWeapontypeInSlot(ped: number, weaponSlot: number): number {
	return _in(0xeffed78e, 0x9011134d, ped, _ch(weaponSlot), _r); 
}

/**
 * ```
 * // Returns the size of the default weapon component clip.
 * Use it like this:
 * char cClipSize[32];
 * Hash cur;
 * if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
 * {
 * if (WEAPON::IS_WEAPON_VALID(cur))
 * {
 * int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
 * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
 * vDrawString(cClipSize, 0.5f, 0.5f);
 * }
 * }
 * ```
 * @param weaponHash
 */
export function getWeaponClipSize(weaponHash: number): number {
	return _in(0x583be370, 0xb1ec6eb4, _ch(weaponHash), _r, _ri); 
}

/**
 * 
 * @param componentHash
 */
export function getWeaponComponentTypeModel(componentHash: number): number {
	return _in(0x0db57b41, 0xec1db083, _ch(componentHash), _r); 
}

/**
 * 
 * @param componentHash
 * @param outData
 */
export function getWeaponComponentHudStats(componentHash: number): boolean {
	return _in(0xb3caf387, 0xae12e9f8, _ch(componentHash), _ii(outData), _r); 
}

/**
 * 
 * @param componentHash
 * @param extraComponentIndex
 */
export function GetWeaponComponentVariantExtraComponentModel(componentHash: number, extraComponentIndex: number): number {
	return _in(0x4d1cb8dc, 0x40208a17, _ch(componentHash), extraComponentIndex, _r); 
}

/**
 * 
 * @param componentHash
 */
export function GetWeaponComponentVariantExtraComponentCount(componentHash: number): number {
	return _in(0x6558ac7c, 0x17bfef58, _ch(componentHash), _r, _ri); 
}

/**
 * ```
 * 0=unknown (or incorrect weaponHash)
 * 1= no damage (flare,snowball, petrolcan)
 * 2=melee
 * 3=bullet
 * 4=force ragdoll fall
 * 5=explosive (RPG, Railgun, grenade)
 * 6=fire(molotov)
 * 8=fall(WEAPON_HELI_CRASH)
 * 10=electric
 * 11=barbed wire
 * 12=extinguisher
 * 13=gas
 * 14=water cannon(WEAPON_HIT_BY_WATER_CANNON)
 * ```
 * @param weaponHash
 */
export function getWeaponDamageType(weaponHash: number): number {
	return _in(0x3be0bb12, 0xd25fb305, _ch(weaponHash), _r, _ri); 
}

/**
 * This native does not return damages of weapons from the melee and explosive group.
 * @param weaponHash
 * @param componentHash
 * @return Damages of the weapon.
 */
export function getWeaponDamage(weaponHash: number, componentHash: number): number {
	return _in(0x3133b907, 0xd8b32053, _ch(weaponHash), _ch(componentHash), _r, _rf); 
}

/**
 * ```
 * // members should be aligned to 8 bytes by default but it's best to use alignas here, just to be sure
 * struct WeaponHudStatsData
 * {
 * alignas(8) uint8_t hudDamage; // 0x0000
 * alignas(8) uint8_t hudSpeed; // 0x0008
 * alignas(8) uint8_t hudCapacity; // 0x0010
 * alignas(8) uint8_t hudAccuracy; // 0x0018
 * alignas(8) uint8_t hudRange; // 0x0020
 * };
 * Usage:
 * WeaponHudStatsData data;
 * if (GET_WEAPON_HUD_STATS(weaponHash, (Any*)&data))
 * {
 * // uint8_t damagePercentage = data.hudDamage etc...
 * }
 * ```
 * @param weaponHash
 * @param outData
 */
export function getWeaponHudStats(weaponHash: number): boolean {
	return _in(0xd92c739e, 0xe34c9eba, _ch(weaponHash), _i, _r); 
}

/**
 * 
 * @param weaponObject
 * @param camoComponentHash
 */
export function GetWeaponObjectLiveryColor(weaponObject: number, camoComponentHash: number): number {
	return _in(0xb3ea4fea, 0xbf41464b, weaponObject, _ch(camoComponentHash), _r, _ri); 
}

/**
 * ```
 * Drops the current weapon and returns the object
 * Unknown behavior when unarmed.
 * ```
 * @param ped
 * @param p1
 */
export function getWeaponObjectFromPed(ped: number, p1: boolean): number {
	return _in(0xcae1dc9a, 0x0e22a16d, ped, p1, _r, _ro); 
}

/**
 * 
 * @param weaponHash
 */
export function GetWeaponTimeBetweenShots(weaponHash: number): number {
	return _in(0x065d2aac, 0xad8cf7a4, _ch(weaponHash), _r, _rf); 
}

/**
 * 
 * @param weaponHash
 */
export function getWeaponTintCount(weaponHash: number): number {
	return _in(0x5dcf6c5c, 0xab2e9bf7, _ch(weaponHash), _r, _ri); 
}

/**
 * 
 * @param weaponHash
 * @return *   **Melee**: 2685387236
*   **Handgun**: 416676503
*   **Submachine Gun**: -957766203
*   **Shotgun**: 860033945
*   **Assault Rifle**: 970310034
*   **Light Machine Gun**: 1159398588
*   **Sniper**: 3082541095
*   **Heavy Weapon**: 2725924767
*   **Throwables**: 1548507267
*   **Misc**: 4257178988
 */
export function getWeapontypeGroup(weaponHash: number): number {
	return _in(0xc3287ee3, 0x050fb74c, _ch(weaponHash), _r); 
}

/**
 * 
 * @param weapon
 */
export function getWeaponObjectTintIndex(weapon: number): number {
	return _in(0xcd183314, 0xf7cd2e57, weapon, _r, _ri); 
}

/**
 * ```
 * Returns the model of any weapon.
 * Can also take an ammo hash?
 * sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
 * ```
 * @param weaponHash
 */
export function getWeapontypeModel(weaponHash: number): number {
	return _in(0xf46cdc33, 0x180fda94, _ch(weaponHash), _r); 
}

/**
 * 
 * @param weaponHash
 */
export function getWeapontypeSlot(weaponHash: number): number {
	return _in(0x4215460b, 0x9b8b7fa0, _ch(weaponHash), _r); 
}

/**
 * ```
 * Gives a weapon to PED with a delay, example:
 * WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
 * ```
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param bForceInHand
 */
export function giveDelayedWeaponToPed(ped: number, weaponHash: number, ammoCount: number, bForceInHand: boolean): void {
	return _in(0xb282dc6e, 0xbd803c75, ped, _ch(weaponHash), ammoCount, bForceInHand); 
}

/**
 * ```
 * addonHash:
 * (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
 * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
 * ```
 * @param weaponObject
 * @param addonHash
 */
export function giveWeaponComponentToWeaponObject(weaponObject: number, addonHash: number): void {
	return _in(0x33e17943, 0x6c0b31db, weaponObject, _ch(addonHash)); 
}

/**
 * 
 * @param weaponObject
 * @param ped
 */
export function giveWeaponObjectToPed(weaponObject: number, ped: number): void {
	return _in(0xb1fa6137, 0x1af7c4b7, weaponObject, ped); 
}

/**
 * 
 * @param ped
 * @param loadoutHash
 */
export function GiveLoadoutToPed(ped: number, loadoutHash: number): void {
	return _in(0x68f8be6a, 0xf5cdf8a6, ped, _ch(loadoutHash)); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function giveWeaponComponentToPed(ped: number, weaponHash: number, componentHash: number): void {
	return _in(0xd966d51a, 0xa5b28bb9, ped, _ch(weaponHash), _ch(componentHash)); 
}

/**
 * ```
 * It determines what weapons caused damage:
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * ```
 * @param ped
 * @param weaponHash
 * @param weaponType
 */
export function hasPedBeenDamagedByWeapon(ped: number, weaponHash: number, weaponType: number): boolean {
	return _in(0x2d343d22, 0x19cd027a, ped, _ch(weaponHash), weaponType, _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param isHidden
 * @param bForceInHand
 */
export function giveWeaponToPed(ped: number, weaponHash: number, ammoCount: number, isHidden: boolean, bForceInHand: boolean): void {
	return _in(0xbf0fd6e5, 0x6c964fcb, ped, _ch(weaponHash), ammoCount, isHidden, bForceInHand); 
}

/**
 * ```
 * It determines what weapons caused damage:
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * ```
 * @param entity
 * @param weaponHash
 * @param weaponType
 */
export function hasEntityBeenDamagedByWeapon(entity: number, weaponHash: number, weaponType: number): boolean {
	return _in(0x131d4013, 0x34815e94, entity, _ch(weaponHash), weaponType, _r); 
}

/**
 * ```
 * p2 should be FALSE, otherwise it seems to always return FALSE
 * Bool does not check if the weapon is current equipped, unfortunately.
 * ```
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function hasPedGotWeapon(ped: number, weaponHash: number, p2: boolean): boolean {
	return _in(0x8decb02f, 0x88f428bc, ped, _ch(weaponHash), p2, _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function hasPedGotWeaponComponent(ped: number, weaponHash: number, componentHash: number): boolean {
	return _in(0xc5932124, 0x75fae340, ped, _ch(weaponHash), _ch(componentHash), _r); 
}

/**
 * ```
 * Third Parameter = unsure, but pretty sure it is weapon hash
 * --> get_hash_key("weapon_stickybomb")
 * Fourth Parameter = unsure, almost always -1
 * ```
 * @param driver
 * @param vehicle
 * @param weaponHash
 * @param p3
 */
export function hasVehicleGotProjectileAttached(driver: number, vehicle: number, weaponHash: number, p3: any): boolean {
	return _in(0x717c8481, 0x234e3b88, driver, vehicle, _ch(weaponHash), p3, _r); 
}

/**
 * 
 * @param weaponHash
 */
export function hasWeaponAssetLoaded(weaponHash: number): boolean {
	return _in(0x36e35327, 0x1f0e90ee, _ch(weaponHash), _r); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param outZoneId
 */
export function IsAnyAirDefenseZoneInsideSphere(x: number, y: number, z: number, radius: number, outZoneId: number): boolean {
	return _in(0xdab96383, 0x1dbfd3f4, _fv(x), _fv(y), _fv(z), _fv(radius), outZoneId, _r); 
}

/**
 * ```
 * Hides the players weapon during a cutscene.
 * ```
 * @param ped
 * @param toggle
 */
export function hidePedWeaponForScriptedCutscene(ped: number, toggle: boolean): void {
	return _in(0x6f6981d2, 0x253c208f, ped, toggle); 
}

/**
 * 
 * @param weapon
 * @param addonHash
 */
export function hasWeaponGotWeaponComponent(weapon: number, addonHash: number): boolean {
	return _in(0x76a18844, 0xe743bf91, weapon, _ch(addonHash), _r); 
}

/**
 * 
 * @param ped
 */
export function isFlashLightOn(ped: number): boolean {
	return _in(0x4b7620c4, 0x7217126c, ped, _r); 
}

/**
 * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
 * 
 * | Bit value | Effect            |
 * |-----------|-------------------|
 * | 1         | Melee weapons     |
 * | 2         | Explosive weapons |
 * | 4         | Any other weapons |
 * 
 * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
 * @param ped
 * @param typeFlags
 * @return Whether or not the ped is currently equipped with any weapon matching typeFlags.
 */
export function isPedArmed(ped: number, typeFlags: number): boolean {
	return _in(0x475768a9, 0x75d5ad17, ped, typeFlags, _r); 
}

/**
 * ```
 * This native returns a true or false value.
 * Ped ped = The ped whose weapon you want to check.
 * ```
 * @param ped
 */
export function isPedCurrentWeaponSilenced(ped: number): boolean {
	return _in(0x65f0c5ae, 0x05943ec7, ped, _r); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function isPedWeaponComponentActive(ped: number, weaponHash: number, componentHash: number): boolean {
	return _in(0x0d78de05, 0x72d3969e, ped, _ch(weaponHash), _ch(componentHash), _r); 
}

/**
 * 
 * @param ped
 */
export function isPedWeaponReadyToShoot(ped: number): boolean {
	return _in(0xb80ca294, 0xf2f26749, ped, _r); 
}

/**
 * 
 * @param weaponHash
 */
export function isWeaponValid(weaponHash: number): boolean {
	return _in(0x937c7116, 0x5cf334b3, _ch(weaponHash), _r); 
}

/**
 * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
 * @param ped
 */
export function makePedReload(ped: number): boolean {
	return _in(0x20ae33f3, 0xac9c0033, ped, _r); 
}

/**
 * 
 * @param ped
 */
export function refillAmmoInstantly(ped: number): boolean {
	return _in(0x8c0d57ea, 0x686fad87, ped, _r); 
}

/**
 * 
 */
export function RemoveAllAirDefenseZones(): void {
	return _in(0x1e45b34a, 0xdebee48e); 
}

/**
 * 
 * @param zoneId
 */
export function RemoveAirDefenseZone(zoneId: number): boolean {
	return _in(0x0abf5358, 0x77897560, zoneId, _r); 
}

/**
 * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
 * @param weaponHash
 * @param explode
 */
export function removeAllProjectilesOfType(weaponHash: number, explode: boolean): void {
	return _in(0xfc52e0f3, 0x7e446528, _ch(weaponHash), explode); 
}

/**
 * 
 * @param weaponHash
 */
export function removeWeaponAsset(weaponHash: number): void {
	return _in(0xaa08ef13, 0xf341c8fc, _ch(weaponHash)); 
}

/**
 * Parameter `p1` does not seem to be used or referenced in game binaries.\
 * **Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.
 * @param ped
 * @param p1
 */
export function removeAllPedWeapons(ped: number, p1: boolean): void {
	return _in(0xf25df915, 0xfa38c5f3, ped, p1); 
}

/**
 * 
 * @param weaponObject
 * @param addonHash
 */
export function removeWeaponComponentFromWeaponObject(weaponObject: number, addonHash: number): void {
	return _in(0xf7d82b0d, 0x66777611, weaponObject, _ch(addonHash)); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function removeWeaponComponentFromPed(ped: number, weaponHash: number, componentHash: number): void {
	return _in(0x1e8be90c, 0x74fb4c09, ped, _ch(weaponHash), _ch(componentHash)); 
}

/**
 * ```
 * This native removes a specified weapon from your selected ped.
 * Weapon Hashes: pastebin.com/0wwDZgkF
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
 * C++:
 * WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
 * The code above removes the knife from the player.
 * ```
 * @param ped
 * @param weaponHash
 */
export function removeWeaponFromPed(ped: number, weaponHash: number): void {
	return _in(0x4899cb08, 0x8edf59b8, ped, _ch(weaponHash)); 
}

/**
 * ```
 * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
 * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
 * ```
 * @param weaponHash
 * @param p1
 * @param p2
 */
export function requestWeaponAsset(weaponHash: number, p1: number, p2: number): void {
	return _in(0x5443438f, 0x033e29c3, _ch(weaponHash), p1, p2); 
}

/**
 * 
 * @param weaponObject
 */
export function requestWeaponHighDetailModel(weaponObject: number): void {
	return _in(0x48164dbb, 0x970ac3f0, weaponObject); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function setAmmoInClip(ped: number, weaponHash: number, ammo: number): boolean {
	return _in(0xdcd2a934, 0xd65cb497, ped, _ch(weaponHash), ammo, _r); 
}

/**
 * Does the same as [`_SET_CAN_PED_SELECT_WEAPON`](https://runtime.fivem.net/doc/natives/#\_0xB4771B9AAF4E68E4) except for all weapons.
 * @param ped
 * @param toggle
 */
export function SetCanPedEquipAllWeapons(ped: number, toggle: boolean): void {
	return _in(0xeff29609, 0x7ff1e509, ped, toggle); 
}

/**
 * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
 * @param ped
 * @param weaponHash
 * @param toggle
 */
export function SetCanPedEquipWeapon(ped: number, weaponHash: number, toggle: boolean): void {
	return _in(0xb4771b9a, 0xaf4e68e4, ped, _ch(weaponHash), toggle); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 */
export function setCurrentPedVehicleWeapon(ped: number, weaponHash: number): boolean {
	return _in(0x75c55983, 0xc2c39daa, ped, _ch(weaponHash), _r); 
}

/**
 * ```
 * NativeDB Added Parameter 4: BOOL p3
 * ```
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function setPedAmmo(ped: number, weaponHash: number, ammo: number): void {
	return _in(0x14e56bc5, 0xb5db6a19, ped, _ch(weaponHash), ammo); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param bForceInHand
 */
export function setCurrentPedWeapon(ped: number, weaponHash: number, bForceInHand: boolean): void {
	return _in(0xadf692b2, 0x54977c0c, ped, _ch(weaponHash), bForceInHand); 
}

/**
 * 
 * @param ped
 * @param ammoType
 * @param ammo
 */
export function setPedAmmoByType(ped: number, ammoType: number, ammo: number): void {
	return _in(0x5fd1e1f0, 0x11e76d7e, ped, _ch(ammoType), ammo); 
}

/**
 * 
 * @param distance
 */
export function setFlashLightFadeDistance(distance: number): any {
	return _in(0xcea66dad, 0x478cd39b, _fv(distance), _r, _ri); 
}

/**
 * 
 * @param ped
 * @param xBias
 * @param yBias
 */
export function setPedChanceOfFiringBlanks(ped: number, xBias: number, yBias: number): void {
	return _in(0x83786272, 0x01d5497d, ped, _fv(xBias), _fv(yBias)); 
}

/**
 * Enables/disables flashlight on ped's weapon.
 * 
 * ```
 * NativeDB Introduced: v2060
 * ```
 * @param ped
 * @param toggle
 */
export function SetFlashLightEnabled(ped: number, toggle: boolean): void {
	return _in(0x988db6fe, 0x9b3ac000, ped, toggle); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param ammoCount
 */
export function setPedDropsInventoryWeapon(ped: number, weaponHash: number, xOffset: number, yOffset: number, zOffset: number, ammoCount: number): void {
	return _in(0x208a1888, 0x007fc0e6, ped, _ch(weaponHash), _fv(xOffset), _fv(yOffset), _fv(zOffset), ammoCount); 
}

/**
 * 
 * @param ped
 * @param ammo
 */
export function setPedAmmoToDrop(ped: number, ammo: number): void {
	return _in(0xa4efef94, 0x40a5b0ef, ped, ammo); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedDropsWeaponsWhenDead(ped: number, toggle: boolean): void {
	return _in(0x476ae72c, 0x1d19d1a8, ped, toggle); 
}

/**
 * 
 * @param ped
 */
export function setPedDropsWeapon(ped: number): void {
	return _in(0x6b7513d9, 0x966fbec0, ped); 
}

/**
 * ```
 * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * p2 is always true.
 * ```
 * @param ped
 * @param gadgetHash
 * @param p2
 */
export function setPedGadget(ped: number, gadgetHash: number, p2: boolean): void {
	return _in(0xd0d7b1e6, 0x80ed4a1a, ped, _ch(gadgetHash), p2); 
}

/**
 * ```
 * Has 5 parameters since latest patches.
 * ```
 * @param ped
 * @param visible
 * @param deselectWeapon
 * @param p3
 * @param p4
 */
export function setPedCurrentWeaponVisible(ped: number, visible: boolean, deselectWeapon: boolean, p3: boolean, p4: boolean): void {
	return _in(0x0725a4cc, 0xfded9a70, ped, visible, deselectWeapon, p3, p4); 
}

/**
 * 
 * @param ped
 * @param toggle
 * @param weaponHash
 */
export function setPedInfiniteAmmo(ped: number, toggle: boolean, weaponHash: number): void {
	return _in(0x3edcb050, 0x5123623b, ped, toggle, _ch(weaponHash)); 
}

/**
 * 
 * @param ped
 * @param toggle
 */
export function setPedInfiniteAmmoClip(ped: number, toggle: boolean): void {
	return _in(0x183dadc6, 0xaa953186, ped, toggle); 
}

/**
 * ```
 * tintIndex can be the following:
 * 0 : Default/Black
 * 1 : Green
 * 2 : Gold
 * 3 : Pink
 * 4 : Army
 * 5 : LSPD
 * 6 : Orange
 * 7 : Platinum
 * 
 * tintIndex for MK2 weapons :
 * 0 : Classic Black
 * 1 : Classic Gray
 * 2 : Classic Two-Tone
 * 3 : Classic White
 * 4 : Classic Beige
 * 5 : Classic Green
 * 6 : Classic Blue
 * 7 : Classic Earth
 * 8 : Classic Brown & Black
 * 9 : Red Contrast
 * 10 : Blue Contrast
 * 11 : Yellow Contrast
 * 12 : Orange Contrast
 * 13 : Bold Pink
 * 14 : Bold Purple & Yellow
 * 15 : Bold Orange
 * 16 : Bold Green & Purple
 * 17 : Bold Red Features
 * 18 : Bold Green Features
 * 19 : Bold Cyan Features
 * 20 : Bold Yellow Features
 * 21 : Bold Red & White
 * 22 : Bold Blue & White
 * 23 : Metallic Gold
 * 24 : Metallic Platinum
 * 25 : Metallic Gray & Lilac
 * 26 : Metallic Purple & Lime
 * 27 : Metallic Red
 * 28 : Metallic Green
 * 29 : Metallic Blue
 * 30 : Metallic White & Aqua
 * 31 : Metallic Orange & Yellow
 * 32 : Mettalic Red and Yellow
 * ```
 * @param ped
 * @param weaponHash
 * @param tintIndex
 */
export function setPedWeaponTintIndex(ped: number, weaponHash: number, tintIndex: number): void {
	return _in(0x50969b9b, 0x89ed5738, ped, _ch(weaponHash), tintIndex); 
}

/**
 * ```
 * Returns handle of the projectile.
 * ```
 * @param ped
 * @param p1
 */
export function setPedShootOrdnanceWeapon(ped: number, p1: number): number {
	return _in(0xb4c8d77c, 0x80c0421e, ped, _fv(p1), _r, _ro); 
}

/**
 * 
 * @param p0
 */
export function setPickupAmmoAmountScaler(p0: number): void {
	return _in(0xe620fd35, 0x12a04f18, _fv(p0)); 
}

/**
 * 
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 * @param colorIndex
 */
export function SetPedWeaponLiveryColor(ped: number, weaponHash: number, camoComponentHash: number, colorIndex: number): void {
	return _in(0x9fe56338, 0x80ecd8ed, ped, _ch(weaponHash), _ch(camoComponentHash), colorIndex); 
}

/**
 * ```
 * Changes the selected ped aiming animation style.
 * Note : You must use GET_HASH_KEY!
 * Strings to use with GET_HASH_KEY :
 * "Ballistic",
 * "Default",
 * "Fat",
 * "Female",
 * "FirstPerson",
 * "FirstPersonAiming",
 * "FirstPersonFranklin",
 * "FirstPersonFranklinAiming",
 * "FirstPersonFranklinRNG",
 * "FirstPersonFranklinScope",
 * "FirstPersonMPFemale",
 * "FirstPersonMichael",
 * "FirstPersonMichaelAiming",
 * "FirstPersonMichaelRNG",
 * "FirstPersonMichaelScope",
 * "FirstPersonRNG",
 * "FirstPersonScope",
 * "FirstPersonTrevor",
 * "FirstPersonTrevorAiming",
 * "FirstPersonTrevorRNG",
 * "FirstPersonTrevorScope",
 * "Franklin",
 * "Gang",
 * "Gang1H",
 * "GangFemale",
 * "Hillbilly",
 * "MP_F_Freemode",
 * "Michael",
 * "SuperFat",
 * "Trevor"
 * ```
 * @param ped
 * @param animStyle
 */
export function setWeaponAnimationOverride(ped: number, animStyle: number): void {
	return _in(0x1055ac3a, 0x667f09d9, ped, _ch(animStyle)); 
}

/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * @param weaponHash
 * @param multiplier
 */
export function SetWeaponExplosionRadiusMultiplier(weaponHash: number, multiplier: number): void {
	return _in(0x4ae5ac8b, 0x852d642c, _ch(weaponHash), _fv(multiplier)); 
}

/**
 * 
 * @param player
 * @param zoneId
 * @param enable
 */
export function SetPlayerAirDefenseZoneFlag(player: number, zoneId: number, enable: boolean): void {
	return _in(0xecdc202b, 0x25e5cf48, player, zoneId, enable); 
}

/**
 * Changes the weapon damage output by the given multiplier value.
 * Does NOT need to be called every frame.
 * @param weaponHash
 * @param damageMultiplier
 */
export function SetWeaponDamageModifier(weaponHash: number, damageMultiplier: number): void {
	return _in(0x4757f00b, 0xc6323cfe, _ch(weaponHash), _fv(damageMultiplier)); 
}

/**
 * 
 * @param weapon
 * @param tintIndex
 */
export function setWeaponObjectTintIndex(weapon: number, tintIndex: number): void {
	return _in(0xf8275890, 0x17d4e4a9, weapon, tintIndex); 
}

/**
 * 
 * @param weaponObject
 * @param camoComponentHash
 * @param colorIndex
 */
export function SetWeaponObjectLiveryColor(weaponObject: number, camoComponentHash: number, colorIndex: number): void {
	return _in(0x5da825a8, 0x5d0ea6e6, weaponObject, _ch(camoComponentHash), colorIndex); 
}

/**
 * ```
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 * Modified example from "am_imp_exp.c4", line 6418:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]] 
 * STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
 * ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
 * ```
 * @param scheduleId
 */
export function clearPopscheduleOverrideVehicleModel(scheduleId: number): void {
	return _in(0x5c0de367, 0xaa0d911c, scheduleId); 
}

/**
 * 
 * @param x
 * @param y
 * @param z
 */
export function getZoneAtCoords(x: number, y: number, z: number): number {
	return _in(0x27040c25, 0xde6cb2f4, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * ```
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 * PROL = Prologue / North Yankton
 * ISHeist = Cayo Perico Island
 * ```
 * @param x
 * @param y
 * @param z
 */
export function getNameOfZone(x: number, y: number, z: number): string {
	return _in(0xcd90657d, 0x4c30e1ca, _fv(x), _fv(y), _fv(z), _r, _s); 
}

/**
 * ```
 * Returns a hash representing which part of the map the given coords are located.
 * Possible return values:
 * (Hash of) city -> -289320599
 * (Hash of) countryside -> 2072609373
 * C# Example :
 * Ped player = Game.Player.Character;
 * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
 * ```
 * @param x
 * @param y
 * @param z
 */
export function getHashOfMapAreaAtCoords(x: number, y: number, z: number): number {
	return _in(0x7ee64d51, 0xe8498728, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * ```
 * 'zoneName' corresponds to an entry in 'popzone.ipl'.
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 * ```
 * @param zoneName
 */
export function getZoneFromNameId(zoneName: string): number {
	return _in(0x98cd1d29, 0x34b76cc1, _ts(zoneName), _r, _ri); 
}

/**
 * 
 * @param zoneId
 */
export function getZonePopschedule(zoneId: number): number {
	return _in(0x4334bc40, 0xaa0cb4bb, zoneId, _r, _ri); 
}

/**
 * ```
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 * Modified example from "am_imp_exp.c4", line 6406:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]] 
 * ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
 * STREAMING::REQUEST_MODEL(vehicleHash);
 * ```
 * @param scheduleId
 * @param vehicleHash
 */
export function overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number): void {
	return _in(0x5f7d596b, 0xac2e7777, scheduleId, _ch(vehicleHash)); 
}

/**
 * Gets the zone scumminess level, used to calculate the cellphone signal strength.
 * 
 * ```cpp
 * enum eZoneScumminess
 * {
 * SCUMMINESS_POSH = 0,
 * SCUMMINESS_NICE = 1,
 * SCUMMINESS_ABOVE_AVERAGE = 2,
 * SCUMMINESS_BELOW_AVERAGE = 3,
 * SCUMMINESS_CRAP = 4,
 * SCUMMINESS_SCUM = 5
 * }
 * ```
 * @param zoneId
 * @return The zone scumminess level
 */
export function getZoneScumminess(zoneId: number): number {
	return _in(0x5f7b268d, 0x15ba0739, zoneId, _r, _ri); 
}

/**
 * 
 * @param zoneId
 * @param toggle
 */
export function setZoneEnabled(zoneId: number, toggle: boolean): void {
	return _in(0xba5eceea, 0x120e5611, zoneId, toggle); 
}
