import { Vector3 } from "@fivemjs/shared";
//@ts-ignore
const Citizen = global.Citizen;
//@ts-ignore
const msgpack_pack = global.msgpack_pack;
const _i = Citizen.pointerValueInt();
const _f = Citizen.pointerValueFloat();
const _v = Citizen.pointerValueVector();
const _r = Citizen.returnResultAnyway();
const _ri = Citizen.resultAsInteger();
const _rf = Citizen.resultAsFloat();
const _rl = Citizen.resultAsLong();
const _s = Citizen.resultAsString();
const _rv = Citizen.resultAsVector();
//@ts-ignore
const _ro = Citizen.resultAsObject2();
//@ts-ignore
const _in = Citizen.invokeNativeByHash;
const _ii_base = Citizen.pointerValueInt();
const _fi_base = Citizen.pointerValueFloat();

function _ii(...args: any[]) {
    // @ts-ignore
    return _ii_base(...args);
}
function _fi(...args: any[]) {
    // @ts-ignore
    return _fi_base(...args);
}
function joaat(key: string) {
	var hash = 0,
		i = key.length;

	while (i--) {
		hash += key.charCodeAt(i);
		hash += hash << 10;
		hash ^= hash >> 6;
	}
	hash += hash << 3;
	hash ^= hash >> 11;
	hash += hash << 15;
	return hash;
}
function _ch(hash: any) {
	if (typeof hash === "string") {
		return joaat(hash);
	}

	return hash;
}

function _ts(num: any) {
	if (num === 0 || num === null || num === undefined || num === false) {
		// workaround for users calling string parameters with '0', also nil being translated
		return null;
	}
	if (ArrayBuffer.isView(num) || num instanceof ArrayBuffer) {
		// these are handled as strings internally
		return num;
	}
	return num.toString();
}
function _fv(flt: number) {
	return flt === 0.0 ? flt : flt + 0.0000001;
}

function _mfr(fn: any) {
	return Citizen.makeRefFunction(fn);
}
