
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function addMinimapOverlay (name: char*): int {
            return invoke("0x00000000", "0x4afd2499", name: char*);
        }
        export function addReplaceTexture (origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*): void {
            return invoke("0x00000000", "0xa66f8f75", origTxd: char*, origTxn: char*, newTxd: char*, newTxn: char*);
        }
        export function addAudioSubmixOutput (submixId: int, outputSubmixId: int): void {
            return invoke("0x00000000", "0xac6e290d", submixId: int, outputSubmixId: int);
        }
        export function callMinimapScaleformFunction (miniMap: int, fnName: char*): BOOL {
            return invoke("0x00000000", "0x4c89c0ed", miniMap: int, fnName: char*);
        }
        export function addTextEntry (entryKey: char*, entryText: char*): void {
            return invoke("0x00000000", "0x32ca01c3", entryKey: char*, entryText: char*);
        }
        export function addTextEntryByHash (entryKey: Hash, entryText: char*): void {
            return invoke("0x00000000", "0x289da860", entryKey: Hash, entryText: char*);
        }
        export function addStateBagChangeHandler (keyFilter: char*, bagFilter: char*, handler: func): int {
            return invoke("0x00000000", "0x5ba35aaf", keyFilter: char*, bagFilter: char*, handler: func);
        }
        export function canPlayerStartCommerceSession (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x429461c3", playerSrc: char*);
        }
        export function duplicateFunctionReference (referenceIdentity: char*): char* {
            return invoke("0x00000000", "0xf4e2079d", referenceIdentity: char*);
        }
        export function cancelEvent (): void {
            return invoke("0x00000000", "0xfa29d35d", );
        }
        export function enableEnhancedHostSupport (enabled: BOOL): void {
            return invoke("0x00000000", "0xf97b1c93", enabled: BOOL);
        }
        export function dropPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0xba0613e1", playerSrc: char*, reason: char*);
        }
        export function clearVehicleXenonLightsCustomColor (vehicle: Vehicle): void {
            return invoke("0x00000000", "0x2867ed8c", vehicle: Vehicle);
        }
        export function createDryVolume (xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float): int {
            return invoke("0x00000000", "0x0eb1c6dd", xMin: float, yMin: float, zMin: float, xMax: float, yMax: float, zMax: float);
        }
        export function endFindPed (findHandle: int): void {
            return invoke("0x00000000", "0x9615c2ad", findHandle: int);
        }
        export function commitRuntimeTexture (tex: long): void {
            return invoke("0x00000000", "0x19d81f4e", tex: long);
        }
        export function endFindPickup (findHandle: int): void {
            return invoke("0x00000000", "0x3c407d53", findHandle: int);
        }
        export function createRuntimeTexture (txd: long, txn: char*, width: int, height: int): long {
            return invoke("0x00000000", "0xfec3766d", txd: long, txn: char*, width: int, height: int);
        }
        export function endFindKvp (handle: int): void {
            return invoke("0x00000000", "0xb3210203", handle: int);
        }
        export function endFindObject (findHandle: int): void {
            return invoke("0x00000000", "0xdeda4e50", findHandle: int);
        }
        export function endFindVehicle (findHandle: int): void {
            return invoke("0x00000000", "0x9227415a", findHandle: int);
        }
        export function ensureEntityStateBag (entity: Entity): void {
            return invoke("0x00000000", "0x3bb78f05", entity: Entity);
        }
        export function createAudioSubmix (name: char*): int {
            return invoke("0x00000000", "0x658d2bc8", name: char*);
        }
        export function createRuntimeTxd (name: char*): long {
            return invoke("0x00000000", "0x1f3ac778", name: char*);
        }
        export function createRuntimeTextureFromDuiHandle (txd: long, txn: char*, duiHandle: char*): long {
            return invoke("0x00000000", "0xb135472b", txd: long, txn: char*, duiHandle: char*);
        }
        export function getAmbientVehicleRangeMultiplier (): float {
            return invoke("0x00000000", "0x667ec929", );
        }
        export function deleteEntity (entity: Entity): void {
            return invoke("0x00000000", "0xfaa3d236", entity: Entity);
        }
        export function executeCommand (commandString: char*): void {
            return invoke("0x00000000", "0x561c060b", commandString: char*);
        }
        export function createDui (url: char*, width: int, height: int): long {
            return invoke("0x00000000", "0x23eaf899", url: char*, width: int, height: int);
        }
        export function createRuntimeTextureFromImage (txd: long, txn: char*, fileName: char*): long {
            return invoke("0x00000000", "0x786d8bc3", txd: long, txn: char*, fileName: char*);
        }
        export function getAmbientPedRangeMultiplier (): float {
            return invoke("0x00000000", "0xb550232d", );
        }
        export function deleteResourceKvpNoSync (key: char*): void {
            return invoke("0x00000000", "0x04152c90", key: char*);
        }
        export function getConvar (varName: char*, default_: char*): char* {
            return invoke("0x00000000", "0x6ccd2564", varName: char*, default_: char*);
        }
        export function experimentalLoadCloneCreate (data: char*, objectId: int, tree: char*): Entity {
            return invoke("0x00000000", "0xd2cb95a3", data: char*, objectId: int, tree: char*);
        }
        export function getAllVehicles (): object {
            return invoke("0x00000000", "0x332169f5", );
        }
        export function disableIdleCamera (state: BOOL): void {
            return invoke("0x00000000", "0x3d5ab7f0", state: BOOL);
        }
        export function deleteFunctionReference (referenceIdentity: char*): void {
            return invoke("0x00000000", "0x1e86f206", referenceIdentity: char*);
        }
        export function experimentalSaveCloneCreate (entity: Entity): char* {
            return invoke("0x00000000", "0x9d65cad2", entity: Entity);
        }
        export function destroyDui (duiObject: long): void {
            return invoke("0x00000000", "0xa085cb10", duiObject: long);
        }
        export function doesEntityExist (entity: Object): BOOL {
            return invoke("0x00000000", "0x3ac90869", entity: Object);
        }
        export function deleteResourceKvp (key: char*): void {
            return invoke("0x00000000", "0x7389b5df", key: char*);
        }
        export function disableWorldhorizonRendering (state: BOOL): void {
            return invoke("0x00000000", "0xa9c92cdc", state: BOOL);
        }
        export function getConvarInt (varName: char*, default_: int): int {
            return invoke("0x00000000", "0x935c0ab2", varName: char*, default_: int);
        }
        export function getCurrentGameName (): char* {
            return invoke("0x00000000", "0xaca18ecd", );
        }
        export function getCamMatrix (camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*): void {
            return invoke("0x00000000", "0x8f57a89d", camera: Cam, rightVector: Vector3*, forwardVector: Vector3*, upVector: Vector3*, position: Vector3*);
        }
        export function getHostId (): char* {
            return invoke("0x00000000", "0x5f70f5a3", );
        }
        export function findFirstObject (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfaa6cb5d", outEntity: Entity*);
        }
        export function experimentalLoadCloneSync (entity: Entity, data: char*): void {
            return invoke("0x00000000", "0x6bc189ac", entity: Entity, data: char*);
        }
        export function experimentalSaveCloneSync (entity: Entity): char* {
            return invoke("0x00000000", "0x38d19210", entity: Entity);
        }
        export function getCurrentResourceName (): char* {
            return invoke("0x00000000", "0xe5e9ebbb", );
        }
        export function doorSystemGetSize (): int {
            return invoke("0x00000000", "0x237613b3", );
        }
        export function findKvp (handle: int): char* {
            return invoke("0x00000000", "0xbd7bebc5", handle: int);
        }
        export function findFirstPickup (outEntity: Entity*): int {
            return invoke("0x00000000", "0x3ff9d340", outEntity: Entity*);
        }
        export function getConsoleBuffer (): char* {
            return invoke("0x00000000", "0xe57429fa", );
        }
        export function getHeliMainRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf01e2aab", vehicle: Vehicle);
        }
        export function doorSystemGetActive (): object {
            return invoke("0x00000000", "0xf65bba4b", );
        }
        export function doesPlayerOwnSkuExt (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0xdef0480b", playerSrc: char*, skuId: int);
        }
        export function drawLine2d (x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0x0b856a90", x1: float, y1: float, x2: float, y2: float, width: float, r: int, g: int, b: int, a: int);
        }
        export function findFirstPed (outEntity: Entity*): int {
            return invoke("0x00000000", "0xfb012961", outEntity: Entity*);
        }
        export function findFirstVehicle (outEntity: Entity*): int {
            return invoke("0x00000000", "0x15e55694", outEntity: Entity*);
        }
        export function drawRectRotated (x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xec37c168", x: float, y: float, width: float, height: float, rotation: float, r: int, g: int, b: int, a: int);
        }
        export function getCurrentServerEndpoint (): char* {
            return invoke("0x00000000", "0xea11bfba", );
        }
        export function getHeliTailRotorHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xa41bc13d", vehicle: Vehicle);
        }
        export function doesPlayerOwnSku (playerSrc: char*, skuId: int): BOOL {
            return invoke("0x00000000", "0x167aba27", playerSrc: char*, skuId: int);
        }
        export function getInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0xf772bb2c", interiorId: int, portalIndex: int, cornerIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function findNextPickup (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4107ef0f", findHandle: int, outEntity: Entity*);
        }
        export function findNextObject (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x4e129dbf", findHandle: int, outEntity: Entity*);
        }
        export function getNumPlayerIdentifiers (playerSrc: char*): int {
            return invoke("0x00000000", "0xff7f66ab", playerSrc: char*);
        }
        export function flagServerAsPrivate (private_: BOOL): void {
            return invoke("0x00000000", "0x13b6855d", private_: BOOL);
        }
        export function getNumPlayerTokens (playerSrc: char*): int {
            return invoke("0x00000000", "0x619e4a3d", playerSrc: char*);
        }
        export function getInteriorPortalCount (interiorId: int): int {
            return invoke("0x00000000", "0xd05bb8b1", interiorId: int);
        }
        export function getDuiHandle (duiObject: long): char* {
            return invoke("0x00000000", "0x1655d41d", duiObject: long);
        }
        export function getInteriorPortalEntityArchetype (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9a0e1700", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getAllPeds (): object {
            return invoke("0x00000000", "0xb8584fef", );
        }
        export function getAllObjects (): object {
            return invoke("0x00000000", "0x6886c3fe", );
        }
        export function getAirDragMultiplierForPlayersVehicle (playerSrc: char*): float {
            return invoke("0x00000000", "0x62fc38d0", playerSrc: char*);
        }
        export function getInteriorPortalEntityCount (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x0c68021b", interiorId: int, portalIndex: int);
        }
        export function forceSnowPass (enabled: BOOL): void {
            return invoke("0x00000000", "0xe6e16170", enabled: BOOL);
        }
        export function getEntityFromStateBagName (bagName: char*): Entity {
            return invoke("0x00000000", "0x4bdf1867", bagName: char*);
        }
        export function getAllRopes (): object {
            return invoke("0x00000000", "0x760a2d67", );
        }
        export function getEntityMaxHealth (entity: Entity): int {
            return invoke("0x00000000", "0xc7ae6aa1", entity: Entity);
        }
        export function getInstanceId (): int {
            return invoke("0x00000000", "0x9f1c4383", );
        }
        export function getEntityHeading (entity: Entity): float {
            return invoke("0x00000000", "0x972cc383", entity: Entity);
        }
        export function getEntityArchetypeName (entity: Entity): char* {
            return invoke("0x00000000", "0x47b870f5", entity: Entity);
        }
        export function getInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int): int {
            return invoke("0x00000000", "0x9da2e811", interiorId: int, portalIndex: int, entityIndex: int);
        }
        export function getEntityCoords (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x1647f1cb", entity: Entity);
        }
        export function getInteriorEntitiesExtents (interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0x322b1192", interiorId: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function flushResourceKvp (): void {
            return invoke("0x00000000", "0xe27c97a0", );
        }
        export function getEntityAttachedTo (entity: Entity): Entity {
            return invoke("0x00000000", "0xfe1589f9", entity: Entity);
        }
        export function getEntityHealth (entity: Entity): int {
            return invoke("0x00000000", "0x8e3222b7", entity: Entity);
        }
        export function findNextVehicle (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0x8839120d", findHandle: int, outEntity: Entity*);
        }
        export function getEntityModel (entity: Entity): Hash {
            return invoke("0x00000000", "0xdafcb3ec", entity: Entity);
        }
        export function getPlayerGuid (playerSrc: char*): char* {
            return invoke("0x00000000", "0xe52d9680", playerSrc: char*);
        }
        export function getPedCauseOfDeath (ped: Ped): Hash {
            return invoke("0x00000000", "0x63458c27", ped: Ped);
        }
        export function getPasswordHash (password: char*): char* {
            return invoke("0x00000000", "0x23473ea4", password: char*);
        }
        export function getInteriorPortalEntityPosition (interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x9b7ab83c", interiorId: int, portalIndex: int, entityIndex: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getPlayerIdentifierByType (playerSrc: char*, identifierType: char*): char* {
            return invoke("0x00000000", "0xa61c8fc6", playerSrc: char*, identifierType: char*);
        }
        export function getEntityRotationVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x9bf8a73f", entity: Entity);
        }
        export function findNextPed (findHandle: int, outEntity: Entity*): BOOL {
            return invoke("0x00000000", "0xab09b548", findHandle: int, outEntity: Entity*);
        }
        export function getPedDecorations (ped: Ped): object {
            return invoke("0x00000000", "0x7cce1163", ped: Ped);
        }
        export function getPedArmour (ped: Ped): int {
            return invoke("0x00000000", "0x2ce311a7", ped: Ped);
        }
        export function getParkedVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xff72df84", );
        }
        export function getEntityScript (entity: Entity): char* {
            return invoke("0x00000000", "0xb7f70784", entity: Entity);
        }
        export function getInteriorPortalRoomTo (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0x3f47f0e8", interiorId: int, portalIndex: int);
        }
        export function getGamePool (poolName: char*): object {
            return invoke("0x00000000", "0x2b9d4f50", poolName: char*);
        }
        export function getGameName (): char* {
            return invoke("0x00000000", "0xe8eaa18b", );
        }
        export function getActivePlayers (): object {
            return invoke("0x00000000", "0xcf143fb9", );
        }
        export function getNumResourceMetadata (resourceName: char*, metadataKey: char*): int {
            return invoke("0x00000000", "0x0776e864", resourceName: char*, metadataKey: char*);
        }
        export function getNumPlayerIndices (): int {
            return invoke("0x00000000", "0x63d13184", );
        }
        export function getInteriorPortalRoomFrom (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xaa9c141d", interiorId: int, portalIndex: int);
        }
        export function getInteriorPosition (interiorId: int, posX: float*, posY: float*, posZ: float*): void {
            return invoke("0x00000000", "0x77a435b0", interiorId: int, posX: float*, posY: float*, posZ: float*);
        }
        export function getGameBuildNumber (): int {
            return invoke("0x00000000", "0x804b9f7b", );
        }
        export function getAllVehicleModels (): object {
            return invoke("0x00000000", "0xd7531645", );
        }
        export function getGameTimer (): long {
            return invoke("0x00000000", "0xa4ea0691", );
        }
        export function getInteriorPortalEntityRotation (interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x9f9ceb63", interiorId: int, portalIndex: int, entityIndex: int, rotX: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*): void {
            return invoke("0x00000000", "0xf9e795dd", interiorId: int, roomIndex: int, bbMinX: float*, bbMinY: float*, bbMinZ: float*, bbMaxX: float*, bbMaxY: float*, bbMaxZ: float*);
        }
        export function getPlayerMaxHealth (playerSrc: char*): int {
            return invoke("0x00000000", "0x8154e470", playerSrc: char*);
        }
        export function getEntityPopulationType (entity: Entity): int {
            return invoke("0x00000000", "0xfc30ddff", entity: Entity);
        }
        export function getResourceMetadata (resourceName: char*, metadataKey: char*, index: int): char* {
            return invoke("0x00000000", "0x964bab1d", resourceName: char*, metadataKey: char*, index: int);
        }
        export function getPlayerLastMsg (playerSrc: char*): int {
            return invoke("0x00000000", "0x427e8e6a", playerSrc: char*);
        }
        export function getResourceKvpString (key: char*): char* {
            return invoke("0x00000000", "0x5240da5a", key: char*);
        }
        export function getPlayerMeleeWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8689a825", playerId: Player);
        }
        export function getPlayerMaxStamina (playerId: Player): float {
            return invoke("0x00000000", "0xd014ab79", playerId: Player);
        }
        export function getEntitySpeed (entity: Entity): float {
            return invoke("0x00000000", "0x9e1e4798", entity: Entity);
        }
        export function getPlayerInvincible (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x680c90ee", playerSrc: char*);
        }
        export function getInteriorPortalFlag (interiorId: int, portalIndex: int): int {
            return invoke("0x00000000", "0xc74da47c", interiorId: int, portalIndex: int);
        }
        export function getPlayerMaxArmour (playerSrc: char*): int {
            return invoke("0x00000000", "0x02a50657", playerSrc: char*);
        }
        export function getEntityType (entity: Entity): int {
            return invoke("0x00000000", "0x0b1bd08d", entity: Entity);
        }
        export function getPedFaceFeature (ped: Ped, index: int): float {
            return invoke("0x00000000", "0xba352add", ped: Ped, index: int);
        }
        export function getPedDensityMultiplier (): float {
            return invoke("0x00000000", "0xf5a904f9", );
        }
        export function getInteriorRoomFlag (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x6b7af743", interiorId: int, roomIndex: int);
        }
        export function getInteriorRoomTimecycle (interiorId: int, roomIndex: int): int {
            return invoke("0x00000000", "0x82ba3f88", interiorId: int, roomIndex: int);
        }
        export function getInvokingResource (): char* {
            return invoke("0x00000000", "0x4d52fe5b", );
        }
        export function getEntityVelocity (entity: Entity): Vector3 {
            return invoke("0x00000000", "0xc14c9b6b", entity: Entity);
        }
        export function getPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0x388fde9a", vehicle: Vehicle, seatIndex: int);
        }
        export function getNumResources (): int {
            return invoke("0x00000000", "0x0863f27b", );
        }
        export function getEntityRotation (entity: Entity): Vector3 {
            return invoke("0x00000000", "0x8ff45b04", entity: Entity);
        }
        export function getEntityRoutingBucket (entity: Entity): int {
            return invoke("0x00000000", "0xed4b0486", entity: Entity);
        }
        export function getLastPedInVehicleSeat (vehicle: Vehicle, seatIndex: int): Entity {
            return invoke("0x00000000", "0xf7c6792d", vehicle: Vehicle, seatIndex: int);
        }
        export function getHashKey (model: char*): Hash {
            return invoke("0x00000000", "0x98eff6f1", model: char*);
        }
        export function getInteriorRoomCount (interiorId: int): int {
            return invoke("0x00000000", "0xa2737c2c", interiorId: int);
        }
        export function getPlayerIdentifier (playerSrc: char*, identifier: int): char* {
            return invoke("0x00000000", "0x7302dbcf", playerSrc: char*, identifier: int);
        }
        export function getLandingGearState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xa6f02670", vehicle: Vehicle);
        }
        export function getPedHairHighlightColor (ped: Ped): int {
            return invoke("0x00000000", "0x4b087305", ped: Ped);
        }
        export function getInteriorRoomIndexByHash (interiorId: int, roomHash: int): int {
            return invoke("0x00000000", "0xe0ee05f8", interiorId: int, roomHash: int);
        }
        export function getMapZoomDataLevel (index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*): BOOL {
            return invoke("0x00000000", "0x1363a998", index: int, zoomScale: float*, zoomSpeed: float*, scrollSpeed: float*, tilesX: float*, tilesY: float*);
        }
        export function getNetworkWalkMode (): bool {
            return invoke("0x00000000", "0x2cafd5e9", );
        }
        export function getRopeUpdateOrder (rope: int): int {
            return invoke("0x00000000", "0x2ab2e0f6", rope: int);
        }
        export function getPlayerRoutingBucket (playerSrc: char*): int {
            return invoke("0x00000000", "0x52441c34", playerSrc: char*);
        }
        export function getRopeTimeMultiplier (rope: int): float {
            return invoke("0x00000000", "0xf341e6ca", rope: int);
        }
        export function getRopeLengthChangeRate (rope: int): float {
            return invoke("0x00000000", "0x66d70ea3", rope: int);
        }
        export function getPlayerMeleeWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x27e94ef8", playerId: Player);
        }
        export function getPlayerTeam (playerSrc: char*): int {
            return invoke("0x00000000", "0x9873e404", playerSrc: char*);
        }
        export function getRuntimeTexturePitch (tex: long): int {
            return invoke("0x00000000", "0xca0a085f", tex: long);
        }
        export function getIsVehicleEngineRunning (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x7dc6d022", vehicle: Vehicle);
        }
        export function getPedMaxHealth (ped: Ped): int {
            return invoke("0x00000000", "0xa45b6c8d", ped: Ped);
        }
        export function getPedDesiredHeading (ped: Ped): float {
            return invoke("0x00000000", "0xc182f76e", ped: Ped);
        }
        export function getPedSourceOfDamage (ped: Ped): Entity {
            return invoke("0x00000000", "0x535db43f", ped: Ped);
        }
        export function getPedScriptTaskCommand (ped: Ped): Hash {
            return invoke("0x00000000", "0x084fe084", ped: Ped);
        }
        export function getVehicleDashboardOilPressure (): float {
            return invoke("0x00000000", "0x3856d767", );
        }
        export function getResourceState (resourceName: char*): char* {
            return invoke("0x00000000", "0x4039b485", resourceName: char*);
        }
        export function getPedEyeColor (ped: Ped): int {
            return invoke("0x00000000", "0xa47b860f", ped: Ped);
        }
        export function getPlayerFromServerId (serverId: int): Player {
            return invoke("0x00000000", "0x344ea166", serverId: int);
        }
        export function getIsVehiclePrimaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xd7ec8760", vehicle: Vehicle);
        }
        export function getVehicleDashboardRpm (): float {
            return invoke("0x00000000", "0xf9716a11", );
        }
        export function getPedHairColor (ped: Ped): int {
            return invoke("0x00000000", "0xa3ea2893", ped: Ped);
        }
        export function getRuntimeTextureHeight (tex: long): int {
            return invoke("0x00000000", "0x3574aace", tex: long);
        }
        export function getPlayerInvincible2 (player: Player): BOOL {
            return invoke("0x00000000", "0xf2e3912b", player: Player);
        }
        export function getResourcePath (resourceName: char*): char* {
            return invoke("0x00000000", "0x61dcf017", resourceName: char*);
        }
        export function getPlayerFakeWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0x0098d244", playerSrc: char*);
        }
        export function getIsVehicleSecondaryColourCustom (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x288ad228", vehicle: Vehicle);
        }
        export function getPlayerFromIndex (index: int): char* {
            return invoke("0x00000000", "0xc8a9ce08", index: int);
        }
        export function getPlayerServerId (player: Player): int {
            return invoke("0x00000000", "0x4d97bcc7", player: Player);
        }
        export function getPlayerEndpoint (playerSrc: char*): char* {
            return invoke("0x00000000", "0xfee404f9", playerSrc: char*);
        }
        export function getInteriorRoomName (interiorId: int, roomIndex: int): char* {
            return invoke("0x00000000", "0x11755df2", interiorId: int, roomIndex: int);
        }
        export function getPedModelPersonality (modelHash: Hash): Hash {
            return invoke("0x00000000", "0xfe08cad6", modelHash: Hash);
        }
        export function getPedHeadOverlayData (ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*): BOOL {
            return invoke("0x00000000", "0xc46ee605", ped: Ped, index: int, overlayValue: int*, colourType: int*, firstColour: int*, secondColour: int*, overlayOpacity: float*);
        }
        export function getInteriorRotation (interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*): void {
            return invoke("0x00000000", "0x5a039998", interiorId: int, rotx: float*, rotY: float*, rotZ: float*, rotW: float*);
        }
        export function getTrainCarriageEngine (train: Vehicle): int {
            return invoke("0x00000000", "0x095070fa", train: Vehicle);
        }
        export function getVehicleDashboardVacuum (): float {
            return invoke("0x00000000", "0xfabe67a9", );
        }
        export function getVehicleDashboardWaterTemp (): float {
            return invoke("0x00000000", "0x8e3b3e42", );
        }
        export function getRuntimeTextureWidth (tex: long): int {
            return invoke("0x00000000", "0xc9f55558", tex: long);
        }
        export function getPlayerTimeInPursuit (playerSrc: char*, lastPursuit: BOOL): int {
            return invoke("0x00000000", "0x7ade63e1", playerSrc: char*, lastPursuit: BOOL);
        }
        export function getVehicleDoorsLockedForPlayer (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x1dc50247", vehicle: Vehicle);
        }
        export function getTrainDoorCount (train: Vehicle): int {
            return invoke("0x00000000", "0x99974721", train: Vehicle);
        }
        export function getPlayerName (playerSrc: char*): char* {
            return invoke("0x00000000", "0x406b4b20", playerSrc: char*);
        }
        export function getPlayerPing (playerSrc: char*): int {
            return invoke("0x00000000", "0xff1290d4", playerSrc: char*);
        }
        export function getPlayerPed (playerSrc: char*): Entity {
            return invoke("0x00000000", "0x6e31e993", playerSrc: char*);
        }
        export function getPedSourceOfDeath (ped: Ped): Entity {
            return invoke("0x00000000", "0x84adf9eb", ped: Ped);
        }
        export function getResourceKvpFloat (key: char*): float {
            return invoke("0x00000000", "0x35bdceea", key: char*);
        }
        export function getVehicleDashboardSpeed (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9aad420e", vehicle: Vehicle);
        }
        export function getPlayerWantedLevel (playerSrc: char*): int {
            return invoke("0x00000000", "0xbdcdd163", playerSrc: char*);
        }
        export function getVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0xef7c6538", );
        }
        export function getNuiCursorPosition (x: int*, y: int*): void {
            return invoke("0x00000000", "0xbdba226f", x: int*, y: int*);
        }
        export function getVehicleNumberOfWheels (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xedf4b0fc", vehicle: Vehicle);
        }
        export function getPedSpecificTaskType (ped: Ped, index: int): int {
            return invoke("0x00000000", "0x7f4563d3", ped: Ped, index: int);
        }
        export function getVehicleDirtLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfd15c065", vehicle: Vehicle);
        }
        export function getRegisteredCommands (): object {
            return invoke("0x00000000", "0xd4bef069", );
        }
        export function getRopeFlags (rope: int): int {
            return invoke("0x00000000", "0xa80ffe99", rope: int);
        }
        export function getVehicleNumberPlateText (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xe8522d58", vehicle: Vehicle);
        }
        export function getResourceByFindIndex (findIndex: int): char* {
            return invoke("0x00000000", "0x387246b7", findIndex: int);
        }
        export function getVehicleDashboardOilTemp (): float {
            return invoke("0x00000000", "0x1f5996aa", );
        }
        export function getTrainCarriageIndex (train: Vehicle): int {
            return invoke("0x00000000", "0x4b8285cf", train: Vehicle);
        }
        export function getPlayerStamina (playerId: Player): float {
            return invoke("0x00000000", "0xe415ec5c", playerId: Player);
        }
        export function getPlayerToken (playerSrc: char*, index: int): char* {
            return invoke("0x00000000", "0x54c06897", playerSrc: char*, index: int);
        }
        export function getPedMovementClipset (ped: Ped): int {
            return invoke("0x00000000", "0x69e81e3d", ped: Ped);
        }
        export function getPlayerCameraRotation (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x433c765d", playerSrc: char*);
        }
        export function getTrainDoorOpenRatio (train: Vehicle, doorIndex: int): float {
            return invoke("0x00000000", "0x40b16551", train: Vehicle, doorIndex: int);
        }
        export function getVehicleDoorLockStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0d72cef2", vehicle: Vehicle);
        }
        export function getPlayerVehicleDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0x8326e7cd", playerId: Player);
        }
        export function getVehicleEngineTemperature (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xf4f495cb", vehicle: Vehicle);
        }
        export function getSelectedPedWeapon (ped: Ped): Hash {
            return invoke("0x00000000", "0xd240123e", ped: Ped);
        }
        export function getPedScriptTaskStage (ped: Ped): int {
            return invoke("0x00000000", "0x44b0e5e2", ped: Ped);
        }
        export function getRandomVehicleDensityMultiplier (): float {
            return invoke("0x00000000", "0x7b0d00c5", );
        }
        export function getScenarioPedDensityMultiplier (): float {
            return invoke("0x00000000", "0x77c598b2", );
        }
        export function getStateBagValue (bagName: char*, key: char*): object {
            return invoke("0x00000000", "0x637f4c75", bagName: char*, key: char*);
        }
        export function getVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x3bcfee14", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleDashboardFuel (): float {
            return invoke("0x00000000", "0x19b0b2ce", );
        }
        export function getVehiclePetrolTankHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe41595ce", vehicle: Vehicle);
        }
        export function getPlayerWeaponDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x2a3d7cda", playerId: Player);
        }
        export function getVehiclePedIsIn (ped: Ped, lastVehicle: BOOL): Vehicle {
            return invoke("0x00000000", "0xafe92319", ped: Ped, lastVehicle: BOOL);
        }
        export function getVehicleRadioStationIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x57037960", vehicle: Vehicle);
        }
        export function getVehicleSteeringAngle (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1382fcea", vehicle: Vehicle);
        }
        export function getVehicleFuelLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x5f739bb8", vehicle: Vehicle);
        }
        export function getVehicleExtraColours (vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*): void {
            return invoke("0x00000000", "0x80e4659b", vehicle: Vehicle, pearlescentColor: int*, wheelColor: int*);
        }
        export function getVehicleAlarmTimeLeft (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xc62aac98", vehicle: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier (playerId: Player): float {
            return invoke("0x00000000", "0xf1543251", playerId: Player);
        }
        export function getVehicleDashboardBoost (): float {
            return invoke("0x00000000", "0xdffaba2a", );
        }
        export function getVehicleDashboardTemp (): float {
            return invoke("0x00000000", "0x6b6adafa", );
        }
        export function getVehicleColours (vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*): void {
            return invoke("0x00000000", "0x40d82d88", vehicle: Vehicle, colorPrimary: int*, colorSecondary: int*);
        }
        export function getTrainCurrentTrackNode (train: Vehicle): int {
            return invoke("0x00000000", "0xe015e854", train: Vehicle);
        }
        export function getPlayerWeaponDefenseModifier2 (playerId: Player): float {
            return invoke("0x00000000", "0x986b65ff", playerId: Player);
        }
        export function getVehicleNumberPlateTextIndex (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x499747b6", vehicle: Vehicle);
        }
        export function getPlayerWantedCentrePosition (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x821f2d2c", playerSrc: char*);
        }
        export function getVehicleDashboardColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xa0dbd08d", vehicle: Vehicle, color: int*);
        }
        export function getVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcc90cbca", vehicle: Vehicle, wheelIndex: int);
        }
        export function getPlayerVehicleDamageModifier (playerId: Player): float {
            return invoke("0x00000000", "0x78f27b1f", playerId: Player);
        }
        export function getVehicleCheatPowerIncrease (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xc3c93f28", vehicle: Vehicle);
        }
        export function getVehicleDrawnWheelAngleMult (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x21c1da8e", vehicle: Vehicle);
        }
        export function getVehicleEngineHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x8880038a", vehicle: Vehicle);
        }
        export function getVehicleDoorStatus (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x6e35c49c", vehicle: Vehicle);
        }
        export function getVehicleRoofLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x0872cf42", vehicle: Vehicle);
        }
        export function getVehicleCustomSecondaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x3ff247a2", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleSteeringScale (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x954465de", vehicle: Vehicle);
        }
        export function getVehicleCurrentGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xb4f4e566", vehicle: Vehicle);
        }
        export function getVehicleGravityAmount (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xb48a1292", vehicle: Vehicle);
        }
        export function getPlayerFromStateBagName (bagName: char*): int {
            return invoke("0x00000000", "0xa56135e0", bagName: char*);
        }
        export function getVehicleLivery (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xec82a51d", vehicle: Vehicle);
        }
        export function getVehicleNextGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xddb298ae", vehicle: Vehicle);
        }
        export function getWeaponComponentClipSize (componentHash: Hash): int {
            return invoke("0x00000000", "0xe14cf665", componentHash: Hash);
        }
        export function getWeaponAnimationOverride (ped: Ped): Hash {
            return invoke("0x00000000", "0x063ed2e7", ped: Ped);
        }
        export function getVehicleType (vehicle: Vehicle): char* {
            return invoke("0x00000000", "0xa273060e", vehicle: Vehicle);
        }
        export function getWeaponComponentAccuracyModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xc693e278", componentHash: Hash);
        }
        export function getVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xc70fa0c7", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int*, green: int*, blue: int*): BOOL {
            return invoke("0x00000000", "0xc715f730", vehicle: Vehicle, red: int*, green: int*, blue: int*);
        }
        export function getVehicleCurrentRpm (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe7b12b54", vehicle: Vehicle);
        }
        export function getVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2ea4affe", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelWidth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x9c7b59f9", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoadedExt (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x1d14f4fe", playerSrc: char*);
        }
        export function getVehicleTyreSmokeColor (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x75280015", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getWeaponComponentDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x4a0e3855", componentHash: Hash);
        }
        export function getWeaponComponentCameraHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xacb7e68f", componentHash: Hash);
        }
        export function getVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x54a677f5", vehicle: Vehicle, wheelIndex: int);
        }
        export function getResourceKvpInt (key: char*): int {
            return invoke("0x00000000", "0x557b586a", key: char*);
        }
        export function getVehicleBodyHealth (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x2b2fcc28", vehicle: Vehicle);
        }
        export function getVehicleFlightNozzlePosition (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xad40ad55", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xef65929c", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleHeadlightsColour (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xd7147656", vehicle: Vehicle);
        }
        export function isPlayerCommerceInfoLoaded (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xbefe93f4", playerSrc: char*);
        }
        export function getVehicleCustomPrimaryColour (vehicle: Vehicle, r: int*, g: int*, b: int*): void {
            return invoke("0x00000000", "0x1c2b9fef", vehicle: Vehicle, r: int*, g: int*, b: int*);
        }
        export function getVehicleOilLevel (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xfc7f8ef4", vehicle: Vehicle);
        }
        export function getVehicleTurboPressure (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xe02b51d7", vehicle: Vehicle);
        }
        export function getVehicleLightMultiplier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x7e6e219c", vehicle: Vehicle);
        }
        export function getVehicleLightsState (vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*): BOOL {
            return invoke("0x00000000", "0x7c278621", vehicle: Vehicle, lightsOn: BOOL*, highbeamsOn: BOOL*);
        }
        export function getVehicleHandbrake (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x483b013c", vehicle: Vehicle);
        }
        export function getVehicleInteriorColour (vehicle: Vehicle, color: int*): void {
            return invoke("0x00000000", "0xccff3b6e", vehicle: Vehicle, color: int*);
        }
        export function getVehicleClutch (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x1dad4583", vehicle: Vehicle);
        }
        export function getWeaponRecoilShakeAmplitude (weaponHash: Hash): float {
            return invoke("0x00000000", "0x05e1af5f", weaponHash: Hash);
        }
        export function getVehicleTopSpeedModifier (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x998b7fee", vehicle: Vehicle);
        }
        export function getWeaponDamageModifier (weaponHash: Hash): float {
            return invoke("0x00000000", "0x0d979143", weaponHash: Hash);
        }
        export function getVehicleThrottleOffset (vehicle: Vehicle): float {
            return invoke("0x00000000", "0xd1d07351", vehicle: Vehicle);
        }
        export function isVehiclePreviouslyOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf849ed67", vehicle: Vehicle);
        }
        export function isStreamingFileReady (registerAs: char*): BOOL {
            return invoke("0x00000000", "0xa194934d", registerAs: char*);
        }
        export function isVehicleEngineStarting (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xbb340d04", vehicle: Vehicle);
        }
        export function getVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*): int {
            return invoke("0x00000000", "0x27396c75", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function getVehicleDashboardLights (): int {
            return invoke("0x00000000", "0x500ffe9d", );
        }
        export function getVehicleHighGear (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xf1d1d689", vehicle: Vehicle);
        }
        export function getVehicleHomingLockonState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xfbde9fd8", vehicle: Vehicle);
        }
        export function isVehicleInteriorLightOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xa411f72c", vehicle: Vehicle);
        }
        export function isVehicleTyreBurst (vehicle: Vehicle, wheelID: int, completely: BOOL): BOOL {
            return invoke("0x00000000", "0x48c80210", vehicle: Vehicle, wheelID: int, completely: BOOL);
        }
        export function isVehicleSirenOn (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x25eb5873", vehicle: Vehicle);
        }
        export function isPlayerEvadingWantedLevel (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0x89a3881a", playerSrc: char*);
        }
        export function getWeaponComponentReticuleHash (componentHash: Hash): int {
            return invoke("0x00000000", "0xf9ab9297", componentHash: Hash);
        }
        export function getVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x70fe2eff", vehicle: Vehicle, wheelIndex: int);
        }
        export function isPrincipalAceAllowed (principal: char*, object: char*): BOOL {
            return invoke("0x00000000", "0x37cf52ce", principal: char*, object: char*);
        }
        export function getVehicleWheelSuspensionCompression (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x2b48175b", vehicle: Vehicle, wheelIndex: int);
        }
        export function hasVehicleBeenOwnedByPlayer (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xe4e83a5b", vehicle: Vehicle);
        }
        export function getVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xea1859e5", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetVoiceChannelFromServerId (serverId: int): int {
            return invoke("0x00000000", "0x221c09f1", serverId: int);
        }
        export function isVehicleExtraTurnedOn (vehicle: Vehicle, extraId: int): BOOL {
            return invoke("0x00000000", "0x042098b5", vehicle: Vehicle, extraId: int);
        }
        export function getVehicleWheelieState (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x137260d1", vehicle: Vehicle);
        }
        export function getVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xe0ba9fe6", vehicle: Vehicle, wheelIndex: int);
        }
        export function isVehicleAlarmSet (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xdc921211", vehicle: Vehicle);
        }
        export function isPedAPlayer (ped: Ped): BOOL {
            return invoke("0x00000000", "0x404794ca", ped: Ped);
        }
        export function getVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*): float {
            return invoke("0x00000000", "0x642fc12f", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function mumbleAddVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0xc79f44bf", channel: int);
        }
        export function hasEntityBeenMarkedAsNoLongerNeeded (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x9c9a3be0", vehicle: Vehicle);
        }
        export function getVehicleWheelSize (vehicle: Vehicle): float {
            return invoke("0x00000000", "0x04046b66", vehicle: Vehicle);
        }
        export function mumbleClearVoiceTargetChannels (targetId: int): void {
            return invoke("0x00000000", "0x5ea72e76", targetId: int);
        }
        export function getWeaponComponentRangeModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0x2fd0bc1b", componentHash: Hash);
        }
        export function getVehicleWindowTint (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x13d53892", vehicle: Vehicle);
        }
        export function getVehicleIndicatorLights (vehicle: Vehicle): int {
            return invoke("0x00000000", "0x83070354", vehicle: Vehicle);
        }
        export function getVehicleWheelPower (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x0d203287", vehicle: Vehicle, wheelIndex: int);
        }
        export function getVehicleWheelSurfaceMaterial (vehicle: Vehicle, wheelIndex: int): int {
            return invoke("0x00000000", "0xa7f04022", vehicle: Vehicle, wheelIndex: int);
        }
        export function getWorldCoordFromScreenCoord (screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*): void {
            return invoke("0x00000000", "0xc81d0659", screenX: float, screenY: float, worldVector: Vector3*, normalVector: Vector3*);
        }
        export function getWeaponComponentRangeDamageModifier (componentHash: Hash): float {
            return invoke("0x00000000", "0xe134fb8d", componentHash: Hash);
        }
        export function mumbleAddVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x25f2b65f", targetId: int, serverId: int);
        }
        export function getVehicleWheelSpeed (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0x149c9da0", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleGetTalkerProximity (): float {
            return invoke("0x00000000", "0x84e02a32", );
        }
        export function mumbleIsPlayerMuted (playerSrc: int): BOOL {
            return invoke("0x00000000", "0x1d5d50c2", playerSrc: int);
        }
        export function getVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int): BOOL {
            return invoke("0x00000000", "0x3ccf1b49", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleIsActive (): BOOL {
            return invoke("0x00000000", "0xe820bc10", );
        }
        export function networkGetVoiceProximityOverride (playerSrc: char*): Vector3 {
            return invoke("0x00000000", "0x7a6462f4", playerSrc: char*);
        }
        export function getVehicleLockOnTarget (vehicle: Vehicle): Vehicle {
            return invoke("0x00000000", "0x4a557117", vehicle: Vehicle);
        }
        export function isVehicleNeedsToBeHotwired (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0xf9933bf4", vehicle: Vehicle);
        }
        export function hasMinimapOverlayLoaded (id: int): BOOL {
            return invoke("0x00000000", "0xf7535f32", id: int);
        }
        export function loadPlayerCommerceDataExt (playerSrc: char*): void {
            return invoke("0x00000000", "0x7995539e", playerSrc: char*);
        }
        export function mumbleAddVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x4d386c9e", targetId: int, channel: int);
        }
        export function getVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*): Vector3 {
            return invoke("0x00000000", "0xfb341304", vehicle: Vehicle, class_: char*, fieldName: char*);
        }
        export function isNuiFocused (): BOOL {
            return invoke("0x00000000", "0x98545e6d", );
        }
        export function mumbleCreateChannel (id: int): void {
            return invoke("0x00000000", "0x262663c5", id: int);
        }
        export function getVehicleWheelSteeringAngle (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xa0867448", vehicle: Vehicle, wheelIndex: int);
        }
        export function mumbleClearVoiceChannel (): void {
            return invoke("0x00000000", "0xbf847807", );
        }
        export function isVehicleWanted (vehicle: Vehicle): BOOL {
            return invoke("0x00000000", "0x0a7daf7c", vehicle: Vehicle);
        }
        export function mumbleRemoveVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x88cd646f", targetId: int, player: Player);
        }
        export function profilerEnterScope (scopeName: char*): void {
            return invoke("0x00000000", "0xc795a4a9", scopeName: char*);
        }
        export function isNuiFocusKeepingInput (): BOOL {
            return invoke("0x00000000", "0x39c9dc92", );
        }
        export function mumbleSetTalkerProximity (value: float): void {
            return invoke("0x00000000", "0x74e927b0", value: float);
        }
        export function networkGetNetworkIdFromEntity (entity: Entity): int {
            return invoke("0x00000000", "0x9e35dab6", entity: Entity);
        }
        export function mumbleAddVoiceTargetPlayer (targetId: int, player: Player): void {
            return invoke("0x00000000", "0x32c5355a", targetId: int, player: Player);
        }
        export function mumbleClearVoiceTargetPlayers (targetId: int): void {
            return invoke("0x00000000", "0x912e21da", targetId: int);
        }
        export function isPlayerUsingSuperJump (playerSrc: char*): BOOL {
            return invoke("0x00000000", "0xc7d2c20c", playerSrc: char*);
        }
        export function invokeFunctionReference (referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*): char* {
            return invoke("0x00000000", "0xe3551879", referenceIdentity: char*, argsSerialized: char*, argsLength: int, retvalLength: int*);
        }
        export function overridePopGroups (path: char*): void {
            return invoke("0x00000000", "0xd3bc438f", path: char*);
        }
        export function isDuiAvailable (duiObject: long): BOOL {
            return invoke("0x00000000", "0x7aac3b4c", duiObject: long);
        }
        export function mumbleSetVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x960a4a95", targetId: int);
        }
        export function isAceAllowed (object: char*): BOOL {
            return invoke("0x00000000", "0x7ebb9929", object: char*);
        }
        export function mumbleClearVoiceTarget (targetId: int): void {
            return invoke("0x00000000", "0x8555dcba", targetId: int);
        }
        export function isEntityVisible (entity: Entity): BOOL {
            return invoke("0x00000000", "0x120b4ed5", entity: Entity);
        }
        export function performHttpRequestInternalEx (requestData: object): int {
            return invoke("0x00000000", "0x6b171e87", requestData: object);
        }
        export function mumbleSetVolumeOverrideByServerId (serverId: int, volume: float): void {
            return invoke("0x00000000", "0xce8e25b4", serverId: int, volume: float);
        }
        export function loadPlayerCommerceData (playerSrc: char*): void {
            return invoke("0x00000000", "0xa8f63eab", playerSrc: char*);
        }
        export function isDuplicityVersion (): BOOL {
            return invoke("0x00000000", "0xcf24c52e", );
        }
        export function isBigmapFull (): BOOL {
            return invoke("0x00000000", "0x66ee14b2", );
        }
        export function networkGetFirstEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x1e546224", entity: Entity);
        }
        export function mumbleSetSubmixForServerId (serverId: int, submixId: int): void {
            return invoke("0x00000000", "0xfe3a3054", serverId: int, submixId: int);
        }
        export function mumbleRemoveVoiceTargetPlayerByServerId (targetId: int, serverId: int): void {
            return invoke("0x00000000", "0x930bd34b", targetId: int, serverId: int);
        }
        export function getVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int): float {
            return invoke("0x00000000", "0xcee21ab2", vehicle: Vehicle, wheelIndex: int);
        }
        export function registerKeyMapping (commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*): void {
            return invoke("0x00000000", "0xd7664fd1", commandString: char*, description: char*, defaultMapper: char*, defaultParameter: char*);
        }
        export function registerNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xc59b980c", callbackType: char*, callback: func);
        }
        export function mumbleRemoveVoiceTargetChannel (targetId: int, channel: int): void {
            return invoke("0x00000000", "0x268db867", targetId: int, channel: int);
        }
        export function registerStreamingFileFromCache (resourceName: char*, fileName: char*, cacheString: char*): void {
            return invoke("0x00000000", "0xcead2d4b", resourceName: char*, fileName: char*, cacheString: char*);
        }
        export function removeStateBagChangeHandler (cookie: int): void {
            return invoke("0x00000000", "0xd36be661", cookie: int);
        }
        export function getVehicleWheelType (vehicle: Vehicle): int {
            return invoke("0x00000000", "0xda58d7ae", vehicle: Vehicle);
        }
        export function sendDuiMouseMove (duiObject: long, x: int, y: int): void {
            return invoke("0x00000000", "0xd9d7a0aa", duiObject: long, x: int, y: int);
        }
        export function profilerExitScope (): void {
            return invoke("0x00000000", "0xb39ca35c", );
        }
        export function isEntityPositionFrozen (entity: Entity): bool {
            return invoke("0x00000000", "0xedbe6add", entity: Entity);
        }
        export function mumbleSetServerAddress (address: char*, port: int): void {
            return invoke("0x00000000", "0xe6eb2cd8", address: char*, port: int);
        }
        export function overrideVehiclePedsCanStandOnTopFlag (vehicle: Vehicle, can: BOOL): void {
            return invoke("0x00000000", "0x7fa03e76", vehicle: Vehicle, can: BOOL);
        }
        export function mumbleIsConnected (): BOOL {
            return invoke("0x00000000", "0xb816370a", );
        }
        export function resetFlyThroughWindscreenParams (): void {
            return invoke("0x00000000", "0x6d712937", );
        }
        export function mumbleSetPlayerMuted (playerSrc: int, toggle: bool): void {
            return invoke("0x00000000", "0xcc6c2eb1", playerSrc: int, toggle: bool);
        }
        export function mumbleIsPlayerTalking (player: Player): BOOL {
            return invoke("0x00000000", "0x33eef97f", player: Player);
        }
        export function networkGetEntityFromNetworkId (netId: int): Entity {
            return invoke("0x00000000", "0x5b912c3f", netId: int);
        }
        export function mumbleRemoveVoiceChannelListen (channel: int): void {
            return invoke("0x00000000", "0x231523b7", channel: int);
        }
        export function mumbleSetAudioOutputDistance (distance: float): void {
            return invoke("0x00000000", "0x74c597d9", distance: float);
        }
        export function registerFontFile (fileName: char*): void {
            return invoke("0x00000000", "0x01b3a363", fileName: char*);
        }
        export function mumbleSetVoiceChannel (channel: int): void {
            return invoke("0x00000000", "0x8737eee8", channel: int);
        }
        export function performHttpRequestInternal (requestData: char*, requestDataLength: int): int {
            return invoke("0x00000000", "0x8e8cc653", requestData: char*, requestDataLength: int);
        }
        export function mumbleSetActive (state: BOOL): void {
            return invoke("0x00000000", "0xd932a3f3", state: BOOL);
        }
        export function removeReplaceTexture (origTxd: char*, origTxn: char*): void {
            return invoke("0x00000000", "0xa896b20a", origTxd: char*, origTxn: char*);
        }
        export function registerResourceAsset (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x9862b266", resourceName: char*, fileName: char*);
        }
        export function registerEntities (factory: func): void {
            return invoke("0x00000000", "0x410da7d3", factory: func);
        }
        export function registerRawNuiCallback (callbackType: char*, callback: func): void {
            return invoke("0x00000000", "0xa8ae9c2f", callbackType: char*, callback: func);
        }
        export function requestResourceFileSet (setName: char*): BOOL {
            return invoke("0x00000000", "0xe7490533", setName: char*);
        }
        export function mumbleSetVolumeOverride (player: Player, volume: float): void {
            return invoke("0x00000000", "0x61c309e3", player: Player, volume: float);
        }
        export function networkGetEntityOwner (entity: Entity): int {
            return invoke("0x00000000", "0x526fee31", entity: Entity);
        }
        export function mumbleSetAudioInputDistance (distance: float): void {
            return invoke("0x00000000", "0x1b1052e2", distance: float);
        }
        export function isBigmapActive (): BOOL {
            return invoke("0x00000000", "0xfff65c63", );
        }
        export function setCursorLocation (x: float, y: float): BOOL {
            return invoke("0x00000000", "0x8a7a8dac", x: float, y: float);
        }
        export function registerNuiCallbackType (callbackType: char*): void {
            return invoke("0x00000000", "0xcd03cda9", callbackType: char*);
        }
        export function registerStreamingFileFromKvs (kvsKey: char*): void {
            return invoke("0x00000000", "0x1493dcc1", kvsKey: char*);
        }
        export function loadResourceFile (resourceName: char*, fileName: char*): char* {
            return invoke("0x00000000", "0x76a9ee1f", resourceName: char*, fileName: char*);
        }
        export function setEntityRoutingBucket (entity: Entity, bucket: int): void {
            return invoke("0x00000000", "0x635e5289", entity: Entity, bucket: int);
        }
        export function isPlayerAceAllowed (playerSrc: char*, object: char*): BOOL {
            return invoke("0x00000000", "0xdedae23d", playerSrc: char*, object: char*);
        }
        export function registerFontId (fontName: char*): int {
            return invoke("0x00000000", "0xacf6d8ee", fontName: char*);
        }
        export function sendNuiMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x78608acb", jsonString: char*);
        }
        export function registerResourceAsEventHandler (eventName: char*): void {
            return invoke("0x00000000", "0xd233a168", eventName: char*);
        }
        export function setInteriorRoomFlag (interiorId: int, roomIndex: int, flag: int): void {
            return invoke("0x00000000", "0x5518d60b", interiorId: int, roomIndex: int, flag: int);
        }
        export function registerArchetypes (factory: func): void {
            return invoke("0x00000000", "0x3c2f9037", factory: func);
        }
        export function registerResourceBuildTaskFactory (factoryId: char*, factoryFn: func): void {
            return invoke("0x00000000", "0x285b43ca", factoryId: char*, factoryFn: func);
        }
        export function setDuiUrl (duiObject: long, url: char*): void {
            return invoke("0x00000000", "0xf761d9f3", duiObject: long, url: char*);
        }
        export function requestPlayerCommerceSession (playerSrc: char*, skuId: int): void {
            return invoke("0x00000000", "0x96f93cce", playerSrc: char*, skuId: int);
        }
        export function registerCommand (commandName: char*, handler: func, restricted: BOOL): void {
            return invoke("0x00000000", "0x5fa79b0f", commandName: char*, handler: func, restricted: BOOL);
        }
        export function scheduleResourceTick (resourceName: char*): void {
            return invoke("0x00000000", "0xb88a73ad", resourceName: char*);
        }
        export function resetVehiclePedsCanStandOnTopFlag (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xdf62cfe2", vehicle: Vehicle);
        }
        export function setAudioSubmixOutputVolumes (submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float): void {
            return invoke("0x00000000", "0x825dc0d1", submixId: int, outputSlot: int, frontLeftVolume: float, frontRightVolume: float, rearLeftVolume: float, rearRightVolume: float, channel5Volume: float, channel6Volume: float);
        }
        export function resetPedModelPersonality (modelHash: Hash): void {
            return invoke("0x00000000", "0x79a12861", modelHash: Hash);
        }
        export function registerConsoleListener (listener: func): void {
            return invoke("0x00000000", "0x281b5448", listener: func);
        }
        export function registerStreamingFileFromUrl (registerAs: char*, url: char*): void {
            return invoke("0x00000000", "0xf44bfb95", registerAs: char*, url: char*);
        }
        export function setAudioSubmixEffectParamFloat (submixId: int, effectSlot: int, paramIndex: int, paramValue: float): void {
            return invoke("0x00000000", "0x9a209b3c", submixId: int, effectSlot: int, paramIndex: int, paramValue: float);
        }
        export function sendDuiMessage (duiObject: long, jsonString: char*): void {
            return invoke("0x00000000", "0xcd380da9", duiObject: long, jsonString: char*);
        }
        export function removeDryVolume (handle: int): void {
            return invoke("0x00000000", "0x7bcaa6e7", handle: int);
        }
        export function sendDuiMouseUp (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x1d735b93", duiObject: long, button: char*);
        }
        export function resetMapZoomDataLevel (index: int): void {
            return invoke("0x00000000", "0x11a5b7ed", index: int);
        }
        export function sendDuiMouseWheel (duiObject: long, deltaY: int, deltaX: int): void {
            return invoke("0x00000000", "0x2d62133a", duiObject: long, deltaY: int, deltaX: int);
        }
        export function setDiscordRichPresenceAction (index: int, label: char*, url: char*): void {
            return invoke("0x00000000", "0xcbbc3fac", index: int, label: char*, url: char*);
        }
        export function setAudioSubmixEffectParamInt (submixId: int, effectSlot: int, paramIndex: int, paramValue: int): void {
            return invoke("0x00000000", "0x77fae2b8", submixId: int, effectSlot: int, paramIndex: int, paramValue: int);
        }
        export function setConvar (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x341b16d2", varName: char*, value: char*);
        }
        export function overridePedsCanStandOnTopFlag (flag: BOOL): void {
            return invoke("0x00000000", "0x90a9e0b2", flag: BOOL);
        }
        export function sendLoadingScreenMessage (jsonString: char*): BOOL {
            return invoke("0x00000000", "0x8bbe6cc0", jsonString: char*);
        }
        export function setDiscordRichPresenceAsset (assetName: char*): void {
            return invoke("0x00000000", "0x53dfd530", assetName: char*);
        }
        export function profilerIsRecording (): BOOL {
            return invoke("0x00000000", "0xf8b7d7bb", );
        }
        export function mumbleSetAudioInputIntent (intentHash: Hash): void {
            return invoke("0x00000000", "0x6383526b", intentHash: Hash);
        }
        export function setDiscordRichPresenceAssetSmallText (text: char*): void {
            return invoke("0x00000000", "0x35e62b6a", text: char*);
        }
        export function setDiscordAppId (appId: char*): void {
            return invoke("0x00000000", "0x6a02254d", appId: char*);
        }
        export function setFlyThroughWindscreenParams (vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float): BOOL {
            return invoke("0x00000000", "0x4d3118ed", vehMinSpeed: float, unkMinSpeed: float, unkModifier: float, minDamage: float);
        }
        export function setAudioSubmixEffectRadioFx (submixId: int, effectSlot: int): void {
            return invoke("0x00000000", "0xaaa94d53", submixId: int, effectSlot: int);
        }
        export function setFlashLightKeepOnWhileMoving (state: BOOL): void {
            return invoke("0x00000000", "0x7635b349", state: BOOL);
        }
        export function setInteriorRoomExtents (interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float): void {
            return invoke("0x00000000", "0x4fdcf51e", interiorId: int, roomIndex: int, bbMinX: float, bbMinY: float, bbMinZ: float, bbMaxX: float, bbMaxY: float, bbMaxZ: float);
        }
        export function setInteriorPortalRoomTo (interiorId: int, portalIndex: int, roomTo: int): void {
            return invoke("0x00000000", "0x58982680", interiorId: int, portalIndex: int, roomTo: int);
        }
        export function setPlayerTalkingOverride (player: Player, state: BOOL): void {
            return invoke("0x00000000", "0xfc02caf6", player: Player, state: BOOL);
        }
        export function setMillisecondsPerGameMinute (value: int): void {
            return invoke("0x00000000", "0x36ca2554", value: int);
        }
        export function setMpGamerTagsUseVehicleBehavior (enabled: bool): void {
            return invoke("0x00000000", "0x7a27bc93", enabled: bool);
        }
        export function setInteriorPortalCornerPosition (interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float): void {
            return invoke("0x00000000", "0x87f43553", interiorId: int, portalIndex: int, cornerIndex: int, posX: float, posY: float, posZ: float);
        }
        export function setMinimapClipType (type: int): void {
            return invoke("0x00000000", "0xb8b4490c", type: int);
        }
        export function setDefaultVehicleNumberPlateTextPattern (plateIndex: int, pattern: char*): void {
            return invoke("0x00000000", "0x79780fd2", plateIndex: int, pattern: char*);
        }
        export function setConvarReplicated (varName: char*, value: char*): void {
            return invoke("0x00000000", "0xf292858c", varName: char*, value: char*);
        }
        export function setInteriorPortalRoomFrom (interiorId: int, portalIndex: int, roomFrom: int): void {
            return invoke("0x00000000", "0x298fc783", interiorId: int, portalIndex: int, roomFrom: int);
        }
        export function setDiscordRichPresenceAssetSmall (assetName: char*): void {
            return invoke("0x00000000", "0xf61d04c4", assetName: char*);
        }
        export function setEntityDistanceCullingRadius (entity: Entity, radius: float): void {
            return invoke("0x00000000", "0xd3a183a3", entity: Entity, radius: float);
        }
        export function setRuntimeTextureArgbData (tex: long, buffer: char*, length: int): BOOL {
            return invoke("0x00000000", "0x3963d527", tex: long, buffer: char*, length: int);
        }
        export function setNetworkWalkMode (enabled: bool): void {
            return invoke("0x00000000", "0x55188d2d", enabled: bool);
        }
        export function setNuiFocusKeepInput (keepInput: BOOL): void {
            return invoke("0x00000000", "0x3ff5e5f8", keepInput: BOOL);
        }
        export function setDiscordRichPresenceAssetText (text: char*): void {
            return invoke("0x00000000", "0xb029d2fa", text: char*);
        }
        export function setInteriorPortalEntityFlag (interiorId: int, portalIndex: int, entityIndex: int, flag: int): void {
            return invoke("0x00000000", "0x8349cd76", interiorId: int, portalIndex: int, entityIndex: int, flag: int);
        }
        export function setGameType (gametypeName: char*): void {
            return invoke("0x00000000", "0xf90b7469", gametypeName: char*);
        }
        export function setConvarServerInfo (varName: char*, value: char*): void {
            return invoke("0x00000000", "0x9338d547", varName: char*, value: char*);
        }
        export function setResourceKvp (key: char*, value: char*): void {
            return invoke("0x00000000", "0x21c7a35b", key: char*, value: char*);
        }
        export function saveResourceFile (resourceName: char*, fileName: char*, data: char*, dataLength: int): BOOL {
            return invoke("0x00000000", "0xa09e7e7b", resourceName: char*, fileName: char*, data: char*, dataLength: int);
        }
        export function setAimCooldown (value: int): void {
            return invoke("0x00000000", "0xa42a3dbf", value: int);
        }
        export function sendDuiMouseDown (duiObject: long, button: char*): void {
            return invoke("0x00000000", "0x5d01f191", duiObject: long, button: char*);
        }
        export function setResourceKvpFloatNoSync (key: char*, value: float): void {
            return invoke("0x00000000", "0x3517bfbe", key: char*, value: float);
        }
        export function setPlayerMaxStamina (playerId: Player, maxStamina: float): bool {
            return invoke("0x00000000", "0x35594f67", playerId: Player, maxStamina: float);
        }
        export function setHandlingFloat (vehicle: char*, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x090dd01c", vehicle: char*, class_: char*, fieldName: char*, value: float);
        }
        export function setHandlingVector (vehicle: char*, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x07f9d543", vehicle: char*, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setMinimapOverlayDisplay (miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float): void {
            return invoke("0x00000000", "0x6a48b3ca", miniMap: int, x: float, y: float, xScale: float, yScale: float, alpha: float);
        }
        export function setInteriorPortalFlag (interiorId: int, portalIndex: int, flag: int): void {
            return invoke("0x00000000", "0x88b2355e", interiorId: int, portalIndex: int, flag: int);
        }
        export function setPedModelPersonality (modelHash: Hash, personalityHash: Hash): void {
            return invoke("0x00000000", "0x46f6b38b", modelHash: Hash, personalityHash: Hash);
        }
        export function setVehicleGravityAmount (vehicle: Vehicle, gravity: float): void {
            return invoke("0x00000000", "0x1a963e58", vehicle: Vehicle, gravity: float);
        }
        export function setHttpHandler (handler: func): void {
            return invoke("0x00000000", "0xf5c6330c", handler: func);
        }
        export function setIgnoreVehicleOwnershipForStowing (ignore: BOOL): void {
            return invoke("0x00000000", "0x85a10ffd", ignore: BOOL);
        }
        export function setVehicleOilLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0x90d1cad1", vehicle: Vehicle, level: float);
        }
        export function setHandlingInt (vehicle: char*, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0x8ab3f46c", vehicle: char*, class_: char*, fieldName: char*, value: int);
        }
        export function setMpGamerTagsVisibleDistance (distance: float): void {
            return invoke("0x00000000", "0xd61676b3", distance: float);
        }
        export function setRoutingBucketEntityLockdownMode (bucketId: int, mode: char*): void {
            return invoke("0x00000000", "0xa0f2201f", bucketId: int, mode: char*);
        }
        export function setVehicleFuelLevel (vehicle: Vehicle, level: float): void {
            return invoke("0x00000000", "0xba970511", vehicle: Vehicle, level: float);
        }
        export function setResourceKvpInt (key: char*, value: int): void {
            return invoke("0x00000000", "0x06a2b1e8", key: char*, value: int);
        }
        export function setManualShutdownLoadingScreenNui (manualShutdown: BOOL): void {
            return invoke("0x00000000", "0x1722c938", manualShutdown: BOOL);
        }
        export function setRuntimeTexturePixel (tex: long, x: int, y: int, r: int, g: int, b: int, a: int): void {
            return invoke("0x00000000", "0xab65acee", tex: long, x: int, y: int, r: int, g: int, b: int, a: int);
        }
        export function setMinimapType (type: int): void {
            return invoke("0x00000000", "0x5fb53015", type: int);
        }
        export function setNuiFocus (hasFocus: BOOL, hasCursor: BOOL): void {
            return invoke("0x00000000", "0x5b98ae30", hasFocus: BOOL, hasCursor: BOOL);
        }
        export function setRuntimeTextureImage (tex: long, fileName: char*): BOOL {
            return invoke("0x00000000", "0x28fc4ecb", tex: long, fileName: char*);
        }
        export function setMapName (mapName: char*): void {
            return invoke("0x00000000", "0xb7ba82dc", mapName: char*);
        }
        export function setVehicleCurrentRpm (vehicle: Vehicle, rpm: float): void {
            return invoke("0x00000000", "0x2a01a8fc", vehicle: Vehicle, rpm: float);
        }
        export function setModelHeadlightConfiguration (modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL): void {
            return invoke("0x00000000", "0x7f6b8d75", modelHash: Hash, ratePerSecond: float, headlightRotation: float, invertRotation: BOOL);
        }
        export function setInteriorRoomTimecycle (interiorId: int, roomIndex: int, timecycleHash: int): void {
            return invoke("0x00000000", "0x31c9a848", interiorId: int, roomIndex: int, timecycleHash: int);
        }
        export function setResourceKvpIntNoSync (key: char*, value: int): void {
            return invoke("0x00000000", "0x26aeb707", key: char*, value: int);
        }
        export function setPlayerCullingRadius (playerSrc: char*, radius: float): void {
            return invoke("0x00000000", "0x8a2fbad4", playerSrc: char*, radius: float);
        }
        export function setResourceKvpNoSync (key: char*, value: char*): void {
            return invoke("0x00000000", "0x0cf9a2ff", key: char*, value: char*);
        }
        export function setRoutingBucketPopulationEnabled (bucketId: int, mode: BOOL): void {
            return invoke("0x00000000", "0xce51ac2c", bucketId: int, mode: BOOL);
        }
        export function setTrainsForceDoorsOpen (forceOpen: bool): void {
            return invoke("0x00000000", "0xd4d1ba63", forceOpen: bool);
        }
        export function setVehicleSuspensionHeight (vehicle: Vehicle, newHeight: float): void {
            return invoke("0x00000000", "0xb3439a01", vehicle: Vehicle, newHeight: float);
        }
        export function setHandlingField (vehicle: char*, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0xfe8064e3", vehicle: char*, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleHandlingInt (vehicle: Vehicle, class_: char*, fieldName: char*, value: int): void {
            return invoke("0x00000000", "0xc37f4cf9", vehicle: Vehicle, class_: char*, fieldName: char*, value: int);
        }
        export function setVehicleTurboPressure (vehicle: Vehicle, pressure: float): void {
            return invoke("0x00000000", "0x6485615e", vehicle: Vehicle, pressure: float);
        }
        export function setSnakeoilForEntry (name: char*, path: char*, data: char*): void {
            return invoke("0x00000000", "0xa7dd3209", name: char*, path: char*, data: char*);
        }
        export function setVehicleAutoRepairDisabled (vehicle: Vehicle, value: BOOL): void {
            return invoke("0x00000000", "0x5f3a3574", vehicle: Vehicle, value: BOOL);
        }
        export function setMinimapComponentPosition (name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float): void {
            return invoke("0x00000000", "0x3e882b23", name: char*, alignX: char*, alignY: char*, posX: float, posY: float, sizeX: float, sizeY: float);
        }
        export function setTrainDoorOpenRatio (train: Vehicle, doorIndex: int, ratio: float): void {
            return invoke("0x00000000", "0x2468dbe8", train: Vehicle, doorIndex: int, ratio: float);
        }
        export function setWeaponsNoAutoswap (state: BOOL): void {
            return invoke("0x00000000", "0x02a7b50e", state: BOOL);
        }
        export function setPlayerRoutingBucket (playerSrc: char*, bucket: int): void {
            return invoke("0x00000000", "0x6504eb38", playerSrc: char*, bucket: int);
        }
        export function setVehicleEngineTemperature (vehicle: Vehicle, temperature: float): void {
            return invoke("0x00000000", "0x6c93c4a9", vehicle: Vehicle, temperature: float);
        }
        export function setResourceKvpFloat (key: char*, value: float): void {
            return invoke("0x00000000", "0x9add2938", key: char*, value: float);
        }
        export function setRichPresence (presenceState: char*): void {
            return invoke("0x00000000", "0x7bdcbd45", presenceState: char*);
        }
        export function setWeaponRecoilShakeAmplitude (weaponHash: Hash, amplitude: float): void {
            return invoke("0x00000000", "0x9864312f", weaponHash: Hash, amplitude: float);
        }
        export function setVehicleWheelTireColliderWidth (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0x47bd0270", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setMapZoomDataLevel (index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float): void {
            return invoke("0x00000000", "0x447c718e", index: int, zoomScale: float, zoomSpeed: float, scrollSpeed: float, tilesX: float, tilesY: float);
        }
        export function setVehicleAlarmTimeLeft (vehicle: Vehicle, time: int): void {
            return invoke("0x00000000", "0xc108ee6f", vehicle: Vehicle, time: int);
        }
        export function setRopesCreateNetworkWorldState (shouldCreate: BOOL): void {
            return invoke("0x00000000", "0x0e62fc73", shouldCreate: BOOL);
        }
        export function setVehicleSteeringAngle (vehicle: Vehicle, angle: float): void {
            return invoke("0x00000000", "0xffccc2ea", vehicle: Vehicle, angle: float);
        }
        export function setVehicleWheelXOffset (vehicle: Vehicle, wheelIndex: int, offset: float): void {
            return invoke("0x00000000", "0x0bd6357d", vehicle: Vehicle, wheelIndex: int, offset: float);
        }
        export function setVehicleXenonLightsCustomColor (vehicle: Vehicle, red: int, green: int, blue: int): void {
            return invoke("0x00000000", "0x1683e7f0", vehicle: Vehicle, red: int, green: int, blue: int);
        }
        export function triggerLatentClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x70b35890", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function setWeaponsNoAutoreload (state: BOOL): void {
            return invoke("0x00000000", "0x311150e5", state: BOOL);
        }
        export function setVehicleWheelSize (vehicle: Vehicle, size: float): BOOL {
            return invoke("0x00000000", "0x53ab5c35", vehicle: Vehicle, size: float);
        }
        export function setStateBagValue (bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL): void {
            return invoke("0x00000000", "0x8d50e33a", bagName: char*, keyName: char*, valueData: char*, valueLength: int, replicated: BOOL);
        }
        export function setVehicleWheelIsPowered (vehicle: Vehicle, wheelIndex: int, powered: BOOL): void {
            return invoke("0x00000000", "0xbd5291a0", vehicle: Vehicle, wheelIndex: int, powered: BOOL);
        }
        export function setVehicleWheelFlags (vehicle: Vehicle, wheelIndex: int, flags: int): void {
            return invoke("0x00000000", "0xd2b9e90d", vehicle: Vehicle, wheelIndex: int, flags: int);
        }
        export function setRopeLengthChangeRate (rope: int, lengthChangeRate: float): void {
            return invoke("0x00000000", "0x69b680a7", rope: int, lengthChangeRate: float);
        }
        export function setVehicleHandlingField (vehicle: Vehicle, class_: char*, fieldName: char*, value: Any): void {
            return invoke("0x00000000", "0x2ba40795", vehicle: Vehicle, class_: char*, fieldName: char*, value: Any);
        }
        export function setVehicleWheelRimColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xf380e184", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function setVehicleClutch (vehicle: Vehicle, clutch: float): void {
            return invoke("0x00000000", "0x2f70aced", vehicle: Vehicle, clutch: float);
        }
        export function setPlayerStamina (playerId: Player, stamina: float): bool {
            return invoke("0x00000000", "0xa9ec16c7", playerId: Player, stamina: float);
        }
        export function setVehicleWheelYRotation (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xc6c2171f", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function enableEditorRuntime (): void {
            return invoke("0x00000000", "0xc383871d", );
        }
        export function startResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x29b440dc", resourceName: char*);
        }
        export function setVehicleSteeringScale (vehicle: Vehicle, scale: float): void {
            return invoke("0x00000000", "0xeb46596f", vehicle: Vehicle, scale: float);
        }
        export function setVehicleHandlingFloat (vehicle: Vehicle, class_: char*, fieldName: char*, value: float): void {
            return invoke("0x00000000", "0x488c86d2", vehicle: Vehicle, class_: char*, fieldName: char*, value: float);
        }
        export function AddBlipForArea (x: float, y: float, z: float, width: float, height: float): Blip {
            return invoke("0x00000000", "0x6228f159", x: float, y: float, z: float, width: float, height: float);
        }
        export function setEntityDrawOutline (entity: Entity, enabled: BOOL): void {
            return invoke("0x00000000", "0x76180407", entity: Entity, enabled: BOOL);
        }
        export function setVehicleWheelHealth (vehicle: Vehicle, wheelIndex: int, health: float): void {
            return invoke("0x00000000", "0xb22ecefd", vehicle: Vehicle, wheelIndex: int, health: float);
        }
        export function setVehicleWheelRotationSpeed (vehicle: Vehicle, wheelIndex: int, speed: float): void {
            return invoke("0x00000000", "0x35ed100d", vehicle: Vehicle, wheelIndex: int, speed: float);
        }
        export function getEntityMapdataOwner (entity: Entity, mapdataHandle: int*, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0xf6b815c5", entity: Entity, mapdataHandle: int*, entityHandle: int*);
        }
        export function setVehicleHighGear (vehicle: Vehicle, gear: int): void {
            return invoke("0x00000000", "0x20b1b3e6", vehicle: Vehicle, gear: int);
        }
        export function shutdownLoadingScreenNui (): void {
            return invoke("0x00000000", "0xb9234afb", );
        }
        export function getMapdataEntityHandle (mapDataHash: int, entityInternalIdx: int, entityHandle: int*): BOOL {
            return invoke("0x00000000", "0x30aa6911", mapDataHash: int, entityInternalIdx: int, entityHandle: int*);
        }
        export function setVehicleHandlingVector (vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3): void {
            return invoke("0x00000000", "0x12497890", vehicle: Vehicle, class_: char*, fieldName: char*, value: Vector3);
        }
        export function setTextChatEnabled (enabled: BOOL): BOOL {
            return invoke("0x00000000", "0x97b2f9f8", enabled: BOOL);
        }
        export function setVehicleWheelWidth (vehicle: Vehicle, width: float): BOOL {
            return invoke("0x00000000", "0x64c3f1c0", vehicle: Vehicle, width: float);
        }
        export function setVehicleWheelTireColliderSize (vehicle: Vehicle, wheelIndex: int, value: float): void {
            return invoke("0x00000000", "0xb962d05c", vehicle: Vehicle, wheelIndex: int, value: float);
        }
        export function triggerServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x7fdd1128", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function getMapdataFromHashKey (mapdataHandle: Hash): int {
            return invoke("0x00000000", "0xd29d8edd", mapdataHandle: Hash);
        }
        export function wasEventCanceled (): BOOL {
            return invoke("0x00000000", "0x58382a19", );
        }
        export function clearPedSecondaryTask (ped: Ped): void {
            return invoke("0x00000000", "0xa635f451", ped: Ped);
        }
        export function tempBanPlayer (playerSrc: char*, reason: char*): void {
            return invoke("0x00000000", "0x1e35dbba", playerSrc: char*, reason: char*);
        }
        export function setVehicleWheelPower (vehicle: Vehicle, wheelIndex: int, power: float): void {
            return invoke("0x00000000", "0xc6146043", vehicle: Vehicle, wheelIndex: int, power: float);
        }
        export function startFindKvp (prefix: char*): int {
            return invoke("0x00000000", "0xdd379006", prefix: char*);
        }
        export function setVehicleWheelieState (vehicle: Vehicle, state: int): void {
            return invoke("0x00000000", "0xeab8db65", vehicle: Vehicle, state: int);
        }
        export function updateMapdataEntity (mapdata: int, entity: int, entityDef: object): void {
            return invoke("0x00000000", "0xfc52cb91", mapdata: int, entity: int, entityDef: object);
        }
        export function stopResource (resourceName: char*): BOOL {
            return invoke("0x00000000", "0x21783161", resourceName: char*);
        }
        export function getExternalKvpString (resource: char*, key: char*): char* {
            return invoke("0x00000000", "0x9080363a", resource: char*, key: char*);
        }
        export function selectEntityAtPos (fracX: float, fracY: float, hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0xafe8d405", fracX: float, fracY: float, hitFlags: int, precise: BOOL);
        }
        export function addBlipForRadius (posX: float, posY: float, posZ: float, radius: float): Blip {
            return invoke("0x00000000", "0x4626756c", posX: float, posY: float, posZ: float, radius: float);
        }
        export function setVisualSettingFloat (name: char*, value: float): void {
            return invoke("0x00000000", "0xd1d31681", name: char*, value: float);
        }
        export function freezeEntityPosition (entity: Entity, toggle: BOOL): void {
            return invoke("0x00000000", "0x65c16d57", entity: Entity, toggle: BOOL);
        }
        export function getExternalKvpFloat (resource: char*, key: char*): float {
            return invoke("0x00000000", "0x3cc98b25", resource: char*, key: char*);
        }
        export function createVehicleServerSetter (modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float): Vehicle {
            return invoke("0x00000000", "0x6ae51d4b", modelHash: Hash, type: char*, x: float, y: float, z: float, heading: float);
        }
        export function verifyPasswordHash (password: char*, hash: char*): BOOL {
            return invoke("0x00000000", "0x2e310acd", password: char*, hash: char*);
        }
        export function giveWeaponToPed (ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xc4d88a85", ped: Ped, weaponHash: Hash, ammoCount: int, isHidden: BOOL, bForceInHand: BOOL);
        }
        export function drawGizmo (matrixPtr: long, id: char*): BOOL {
            return invoke("0x00000000", "0xeb2edca2", matrixPtr: long, id: char*);
        }
        export function triggerClientEventInternal (eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x2f7a49e6", eventName: char*, eventTarget: char*, eventPayload: char*, payloadLength: int);
        }
        export function unregisterRawNuiCallback (callbackType: char*): void {
            return invoke("0x00000000", "0x7fb46432", callbackType: char*);
        }
        export function setVehicleWheelBrakePressure (vehicle: Vehicle, wheelIndex: int, pressure: float): void {
            return invoke("0x00000000", "0xe80f4e31", vehicle: Vehicle, wheelIndex: int, pressure: float);
        }
        export function triggerLatentServerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int, bps: int): void {
            return invoke("0x00000000", "0x128737ea", eventName: char*, eventPayload: char*, payloadLength: int, bps: int);
        }
        export function leaveCursorMode (): void {
            return invoke("0x00000000", "0xadecf19e", );
        }
        export function removeWeaponFromPed (ped: Ped, weaponHash: Hash): void {
            return invoke("0x00000000", "0x9c37f220", ped: Ped, weaponHash: Hash);
        }
        export function clearPedTasks (ped: Ped): void {
            return invoke("0x00000000", "0xde3316ab", ped: Ped);
        }
        export function enterCursorMode (): void {
            return invoke("0x00000000", "0x0780da86", );
        }
        export function scanResourceRoot (rootPath: char*, callback: func): void {
            return invoke("0x00000000", "0x636f097f", rootPath: char*, callback: func);
        }
        export function setEntityDrawOutlineColor (red: int, green: int, blue: int, alpha: int): void {
            return invoke("0x00000000", "0xb41a56c2", red: int, green: int, blue: int, alpha: int);
        }
        export function setPedAmmo (ped: Ped, weaponHash: Hash, ammo: int): void {
            return invoke("0x00000000", "0xbf90df1a", ped: Ped, weaponHash: Hash, ammo: int);
        }
        export function setWeatherOwnedByNetwork (network: BOOL): void {
            return invoke("0x00000000", "0x2703d582", network: BOOL);
        }
        export function startFindExternalKvp (resourceName: char*, prefix: char*): int {
            return invoke("0x00000000", "0x8f2eecc3", resourceName: char*, prefix: char*);
        }
        export function setEntityMatrix (entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float): void {
            return invoke("0x00000000", "0x0fb0639b", entity: Entity, forwardX: float, forwardY: float, forwardZ: float, rightX: float, rightY: float, rightZ: float, upX: float, upY: float, upZ: float, atX: float, atY: float, atZ: float);
        }
        export function getExternalKvpInt (resource: char*, key: char*): int {
            return invoke("0x00000000", "0x12b8d689", resource: char*, key: char*);
        }
        export function getMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int, matrixPtr: long): BOOL {
            return invoke("0x00000000", "0x2c3cda93", mapDataHash: int, entityInternalIdx: int, matrixPtr: long);
        }
        export function setVehicleWheelTractionVectorLength (vehicle: Vehicle, wheelIndex: int, length: float): void {
            return invoke("0x00000000", "0x85c85a3a", vehicle: Vehicle, wheelIndex: int, length: float);
        }
        export function triggerEventInternal (eventName: char*, eventPayload: char*, payloadLength: int): void {
            return invoke("0x00000000", "0x91310870", eventName: char*, eventPayload: char*, payloadLength: int);
        }
        export function giveWeaponComponentToPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x3e1e286d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function printStructuredTrace (jsonString: char*): void {
            return invoke("0x00000000", "0x90892ded", jsonString: char*);
        }
        export function resetMapdataEntityMatrix (mapDataHash: int, entityInternalIdx: int): BOOL {
            return invoke("0x00000000", "0x8143fa4f", mapDataHash: int, entityInternalIdx: int);
        }
        export function addBlipForEntity (entity: Entity): Blip {
            return invoke("0x00000000", "0x30822554", entity: Entity);
        }
        export function setEntityRotation (entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL): void {
            return invoke("0x00000000", "0x0a345efe", entity: Entity, pitch: float, roll: float, yaw: float, rotationOrder: int, p5: BOOL);
        }
        export function disableEditorRuntime (): void {
            return invoke("0x00000000", "0xb1622b17", );
        }
        export function setEntityDrawOutlineShader (shader: int): void {
            return invoke("0x00000000", "0x5261a01a", shader: int);
        }
        export function createPed (pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x0389ef71", pedType: int, modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function setVehicleColourCombination (vehicle: Vehicle, colorCombination: int): void {
            return invoke("0x00000000", "0xa557aead", vehicle: Vehicle, colorCombination: int);
        }
        export function selectEntityAtCursor (hitFlags: int, precise: BOOL): Entity {
            return invoke("0x00000000", "0x3dd8130f", hitFlags: int, precise: BOOL);
        }
        export function setEntityHeading (entity: Entity, heading: float): void {
            return invoke("0x00000000", "0xe0ff064d", entity: Entity, heading: float);
        }
        export function setVehicleCustomSecondaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x9d77259e", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function createVehicle (modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL): Entity {
            return invoke("0x00000000", "0xdd75460a", modelHash: Hash, x: float, y: float, z: float, heading: float, isNetwork: BOOL, netMissionEntity: BOOL);
        }
        export function setPedDefaultComponentVariation (ped: Ped): void {
            return invoke("0x00000000", "0xc866a984", ped: Ped);
        }
        export function removeBlip (blip: Blip*): void {
            return invoke("0x00000000", "0xd8c3c1cd", blip: Blip*);
        }
        export function addPedDecorationFromHashes (ped: Ped, collection: Hash, overlay: Hash): void {
            return invoke("0x00000000", "0x70559ac7", ped: Ped, collection: Hash, overlay: Hash);
        }
        export function createObject (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x2f7aa05c", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function getEntityIndexFromMapdata (mapdata: int, entity: int): int {
            return invoke("0x00000000", "0xee43540d", mapdata: int, entity: int);
        }
        export function setPedComponentVariation (ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int): void {
            return invoke("0x00000000", "0xd4f7b05c", ped: Ped, componentId: int, drawableId: int, textureId: int, paletteId: int);
        }
        export function setEntityVelocity (entity: Entity, x: float, y: float, z: float): void {
            return invoke("0x00000000", "0xff5a1988", entity: Entity, x: float, y: float, z: float);
        }
        export function setVehicleDirtLevel (vehicle: Vehicle, dirtLevel: float): void {
            return invoke("0x00000000", "0x2b39128b", vehicle: Vehicle, dirtLevel: float);
        }
        export function setPedResetFlag (ped: Ped, flagId: int, doReset: BOOL): void {
            return invoke("0x00000000", "0xcff6ff66", ped: Ped, flagId: int, doReset: BOOL);
        }
        export function createPedInsideVehicle (vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL): Entity {
            return invoke("0x00000000", "0x3000f092", vehicle: Vehicle, pedType: int, modelHash: Hash, seat: int, isNetwork: BOOL, bScriptHostPed: BOOL);
        }
        export function clearPlayerWantedLevel (player: Player): void {
            return invoke("0x00000000", "0x54ea5bcc", player: Player);
        }
        export function SetPedHeadOverlayColor (ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int): void {
            return invoke("0x00000000", "0x78935a27", ped: Ped, overlayID: int, colorType: int, colorID: int, secondColorID: int);
        }
        export function setPedToRagdollWithFall (ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float): void {
            return invoke("0x00000000", "0xfa12e286", ped: Ped, time: int, p2: int, ragdollType: int, x: float, y: float, z: float, p7: float, p8: float, p9: float, p10: float, p11: float, p12: float, p13: float);
        }
        export function applyForceToEntity (entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL): void {
            return invoke("0x00000000", "0xc1c0855a", entity: Entity, forceType: int, x: float, y: float, z: float, offX: float, offY: float, offZ: float, boneIndex: int, isDirectionRel: BOOL, ignoreUpVec: BOOL, isForceRel: BOOL, p12: BOOL, p13: BOOL);
        }
        export function clearPedProp (ped: Ped, propId: int): void {
            return invoke("0x00000000", "0x2d23d743", ped: Ped, propId: int);
        }
        export function setBlipSprite (blip: Blip, spriteId: int): void {
            return invoke("0x00000000", "0x8dbbb0b9", blip: Blip, spriteId: int);
        }
        export function setPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x07500c79", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function clearPedTasksImmediately (ped: Ped): void {
            return invoke("0x00000000", "0xbc045625", ped: Ped);
        }
        export function setVehicleBodyHealth (vehicle: Vehicle, value: float): void {
            return invoke("0x00000000", "0x920c2517", vehicle: Vehicle, value: float);
        }
        export function setPedHeadOverlay (ped: Ped, overlayID: int, index: int, opacity: float): void {
            return invoke("0x00000000", "0xd28dba90", ped: Ped, overlayID: int, index: int, opacity: float);
        }
        export function setPedCanRagdoll (ped: Ped, toggle: BOOL): void {
            return invoke("0x00000000", "0xcf1384c4", ped: Ped, toggle: BOOL);
        }
        export function removeWeaponComponentFromPed (ped: Ped, weaponHash: Hash, componentHash: Hash): void {
            return invoke("0x00000000", "0x412aa00d", ped: Ped, weaponHash: Hash, componentHash: Hash);
        }
        export function setVehicleAlarm (vehicle: Vehicle, state: BOOL): void {
            return invoke("0x00000000", "0x24877d84", vehicle: Vehicle, state: BOOL);
        }
        export function setPlayerControl (player: Player, bHasControl: BOOL, flags: int): void {
            return invoke("0x00000000", "0xd17afcd8", player: Player, bHasControl: BOOL, flags: int);
        }
        export function setEntityCoords (entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL): void {
            return invoke("0x00000000", "0xdf70b41b", entity: Entity, xPos: float, yPos: float, zPos: float, alive: BOOL, deadFlag: BOOL, ragdollFlag: BOOL, clearArea: BOOL);
        }
        export function createObjectNoOffset (modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL): Entity {
            return invoke("0x00000000", "0x58040420", modelHash: Hash, x: float, y: float, z: float, isNetwork: BOOL, netMissionEntity: BOOL, doorFlag: BOOL);
        }
        export function taskLeaveVehicle (ped: Ped, vehicle: Vehicle, flags: int): void {
            return invoke("0x00000000", "0x7b1141c6", ped: Ped, vehicle: Vehicle, flags: int);
        }
        export function setVehicleDoorsLocked (vehicle: Vehicle, doorLockStatus: int): void {
            return invoke("0x00000000", "0x4cdd35d0", vehicle: Vehicle, doorLockStatus: int);
        }
        export function taskPlayAnimAdvanced (ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any): void {
            return invoke("0x00000000", "0x3ddeb0e6", ped: Ped, animDict: char*, animName: char*, posX: float, posY: float, posZ: float, rotX: float, rotY: float, rotZ: float, animEnterSpeed: float, animExitSpeed: float, duration: int, flag: Any, animTime: float, p14: Any, p15: Any);
        }
        export function setPedArmour (ped: Ped, amount: int): void {
            return invoke("0x00000000", "0x4e3a0cc4", ped: Ped, amount: int);
        }
        export function addBlipForCoord (x: float, y: float, z: float): Blip {
            return invoke("0x00000000", "0xc6f43d0e", x: float, y: float, z: float);
        }
        export function setPedHeadBlendData (ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL): void {
            return invoke("0x00000000", "0x60746b88", ped: Ped, shapeFirstID: int, shapeSecondID: int, shapeThirdID: int, skinFirstID: int, skinSecondID: int, skinThirdID: int, shapeMix: float, skinMix: float, thirdMix: float, isParent: BOOL);
        }
        export function setVehicleNumberPlateText (vehicle: Vehicle, plateText: char*): void {
            return invoke("0x00000000", "0x400f9556", vehicle: Vehicle, plateText: char*);
        }
        export function SetPedHairColor (ped: Ped, colorID: int, highlightColorID: int): void {
            return invoke("0x00000000", "0xbb43f090", ped: Ped, colorID: int, highlightColorID: int);
        }
        export function setPlayerModel (player: Player, model: Hash): void {
            return invoke("0x00000000", "0x774a4c54", player: Player, model: Hash);
        }
        export function setPlayerInvincible (player: Player, toggle: BOOL): void {
            return invoke("0x00000000", "0xdfb9a2a2", player: Player, toggle: BOOL);
        }
        export function setPedRandomComponentVariation (ped: Ped, p1: int): void {
            return invoke("0x00000000", "0x4111ba46", ped: Ped, p1: int);
        }
        export function setCurrentPedWeapon (ped: Ped, weaponHash: Hash, bForceInHand: BOOL): void {
            return invoke("0x00000000", "0xb8278882", ped: Ped, weaponHash: Hash, bForceInHand: BOOL);
        }
        export function taskPlayAnim (ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL): void {
            return invoke("0x00000000", "0x5ab552c6", ped: Ped, animDictionary: char*, animationName: char*, blendInSpeed: float, blendOutSpeed: float, duration: int, flag: int, playbackRate: float, lockX: BOOL, lockY: BOOL, lockZ: BOOL);
        }
        export function SetPedEyeColor (ped: Ped, index: int): void {
            return invoke("0x00000000", "0xec09db1b", ped: Ped, index: int);
        }
        export function taskGoToCoordAnyMeans (ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float): void {
            return invoke("0x00000000", "0xf91df93b", ped: Ped, x: float, y: float, z: float, speed: float, p5: Any, p6: BOOL, walkingStyle: int, p8: float);
        }
        export function taskEveryoneLeaveVehicle (vehicle: Vehicle): void {
            return invoke("0x00000000", "0xc1971f30", vehicle: Vehicle);
        }
        export function taskEnterVehicle (ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any): void {
            return invoke("0x00000000", "0xb8689b4e", ped: Ped, vehicle: Vehicle, timeout: int, seatIndex: int, speed: float, flag: int, p6: Any);
        }
        export function taskDriveBy (driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash): void {
            return invoke("0x00000000", "0x2b84d1c4", driverPed: Ped, targetPed: Ped, targetVehicle: Vehicle, targetX: float, targetY: float, targetZ: float, distanceToShoot: float, pedAccuracy: int, p8: BOOL, firingPattern: Hash);
        }
        export function setPedToRagdoll (ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL): void {
            return invoke("0x00000000", "0x83cb5052", ped: Ped, time1: int, time2: int, ragdollType: int, p4: BOOL, p5: BOOL, p6: BOOL);
        }
        export function taskShootAtCoord (ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0x601c22e3", ped: Ped, x: float, y: float, z: float, duration: int, firingPattern: Hash);
        }
        export function taskLeaveAnyVehicle (ped: Ped, p1: int, flags: int): void {
            return invoke("0x00000000", "0xdbdd79fa", ped: Ped, p1: int, flags: int);
        }
        export function removeAllPedWeapons (ped: Ped, p1: BOOL): void {
            return invoke("0x00000000", "0xa44ce817", ped: Ped, p1: BOOL);
        }
        export function setVehicleColours (vehicle: Vehicle, colorPrimary: int, colorSecondary: int): void {
            return invoke("0x00000000", "0x57f24253", vehicle: Vehicle, colorPrimary: int, colorSecondary: int);
        }
        export function taskGoStraightToCoord (ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float): void {
            return invoke("0x00000000", "0x80a9e7a7", ped: Ped, x: float, y: float, z: float, speed: float, timeout: int, targetHeading: float, distanceToSlide: float);
        }
        export function setPedPropIndex (ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL): void {
            return invoke("0x00000000", "0x0829f2e2", ped: Ped, componentId: int, drawableId: int, textureId: int, attach: BOOL);
        }
        export function setVehicleDoorBroken (vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL): void {
            return invoke("0x00000000", "0x8147fea7", vehicle: Vehicle, doorIndex: int, deleteDoor: BOOL);
        }
        export function setVehicleCustomPrimaryColour (vehicle: Vehicle, r: int, g: int, b: int): void {
            return invoke("0x00000000", "0x8df9f9bc", vehicle: Vehicle, r: int, g: int, b: int);
        }
        export function setPedRandomProps (ped: Ped): void {
            return invoke("0x00000000", "0xe3318e0e", ped: Ped);
        }
        export function SetPedFaceFeature (ped: Ped, index: int, scale: float): void {
            return invoke("0x00000000", "0x6c8d4458", ped: Ped, index: int, scale: float);
        }
        export function taskGoToEntity (entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int): void {
            return invoke("0x00000000", "0x374827c2", entity: Entity, target: Entity, duration: int, distance: float, speed: float, p5: float, p6: int);
        }
        export function taskCombatPed (ped: Ped, targetPed: Ped, p2: int, p3: int): void {
            return invoke("0x00000000", "0xcb0d8932", ped: Ped, targetPed: Ped, p2: int, p3: int);
        }
        export function taskHandsUp (ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL): void {
            return invoke("0x00000000", "0x8dcc19c5", ped: Ped, duration: int, facingPed: Ped, p3: int, p4: BOOL);
        }
        export function taskWarpPedIntoVehicle (ped: Ped, vehicle: Vehicle, seatIndex: int): void {
            return invoke("0x00000000", "0x65d4a35d", ped: Ped, vehicle: Vehicle, seatIndex: int);
        }
        export function setPlayerWantedLevel (player: Player, wantedLevel: int, disableNoMission: BOOL): void {
            return invoke("0x00000000", "0xb7a0914b", player: Player, wantedLevel: int, disableNoMission: BOOL);
        }
        export function setPedConfigFlag (ped: Ped, flagId: int, value: BOOL): void {
            return invoke("0x00000000", "0x9cfbe10d", ped: Ped, flagId: int, value: BOOL);
        }
        export function taskReactAndFleePed (ped: Ped, fleeTarget: Ped): void {
            return invoke("0x00000000", "0x8a632bd8", ped: Ped, fleeTarget: Ped);
        }
        export function taskShootAtEntity (entity: Entity, target: Entity, duration: int, firingPattern: Hash): void {
            return invoke("0x00000000", "0xac0631c9", entity: Entity, target: Entity, duration: int, firingPattern: Hash);
        }