"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNavmeshRequiredRegion = exports.addNavmeshBlockingObject = exports.addModelToCreatorBudget = exports.addLineToConversation = exports.addHospitalRestart = exports.addExtraCalmingQuad = exports.addExtendedPickupProbeArea = exports.addExplosionWithUserVfx = exports.addExplosion = exports.addEntityToAudioMixGroup = exports.addEntityIcon = exports.addDoorToSystem = exports.addDispatchSpawnSphereBlockingArea = exports.addDispatchSpawnAngledBlockingArea = exports.addDecal = exports.addCoverPoint = exports.addCoverBlockingArea = exports.addCamSplineNodeUsingGameplayFrame = exports.addCamSplineNodeUsingCameraFrame = exports.addCamSplineNodeUsingCamera = exports.addCamSplineNode = exports.addBlipForRadius = exports.addBlipForPickup = exports.addBlipForEntity = exports.addBlipForCoord = exports.addBlipForArea = exports.addArmourToPed = exports.addAmmoToPed = exports.activityFeedPost = exports.activityFeedOnlinePlayedWithPost = exports.activityFeedLargeImageUrl = exports.activityFeedCreate = exports.activityFeedAddSubstringToCaption = exports.activityFeedAddLiteralSubstringToCaption = exports.activityFeedAddIntToCaption = exports.activityFeedActionStartWithCommandLineAdd = exports.activityFeedActionStartWithCommandLine = exports.activateRockstarEditor = exports.activatePhysics = exports.activateInteriorGroupsUsingCamera = exports.activateInteriorEntitySet = exports.activateFrontendMenu = exports.activateDamageTrackerOnPlayer = exports.activateDamageTrackerOnNetworkId = exports.activateAudioSlowmoMode = exports.actionManagerEnableAction = exports.acos = exports.absi = exports.absf = exports.abortVehicleCrewEmblemRequest = void 0;
exports.addVehicleSubtaskAttackCoord = exports.addVehicleStuckCheckWithWarp = exports.addVehiclePhoneExplosiveDevice = exports.addVehicleCrewEmblem = exports.addVehicleCombatAngledAvoidanceArea = exports.addValidVehicleHitHash = exports.addToItemset = exports.addToClockTime = exports.addTextComponentSubstringWebsite = exports.addTextComponentSubstringTime = exports.addTextComponentSubstringTextLabelHashKey = exports.addTextComponentSubstringTextLabel = exports.addTextComponentSubstringPlayerName = exports.addTextComponentSubstringPhoneNumber = exports.addTextComponentSubstringKeyboardDisplay = exports.addTextComponentSubstringBlipName = exports.addTextComponentInteger = exports.addTextComponentFormattedInteger = exports.addTextComponentFloat = exports.addTcmodifierOverride = exports.addTacticalNavMeshPoint = exports.addStuntJumpAngled = exports.addStuntJump = exports.addShockingEventForEntity = exports.addShockingEventAtPosition = exports.addScriptedCoverArea = exports.addScriptToRandomPed = exports.addScenarioBlockingArea = exports.addRope = exports.addRoadNodeSpeedZone = exports.addReplayStatValue = exports.addRelationshipGroup = exports.addPopMultiplierSphere = exports.addPopMultiplierArea = exports.addPoliceRestart = exports.addPointToGpsMultiRoute = exports.addPointToGpsCustomRoute = exports.addPlayerTargetableEntity = exports.addPickupToInteriorRoomByName = exports.addPetrolTrailDecalInfo = exports.addPetrolDecal = exports.addPedToConversation = exports.addPedDecorationFromHashesInCorona = exports.addPedDecorationFromHashes = exports.addPedAmmoByType = exports.addPatrolRouteNode = exports.addPatrolRouteLink = exports.addOwnedExplosion = exports.addOilDecal = exports.addNextMessageToPreviousBriefs = void 0;
exports.applyDamageToPed = exports.appSetString = exports.appSetInt = exports.appSetFloat = exports.appSetBlock = exports.appSetApp = exports.appSaveData = exports.appHasSyncedData = exports.appHasLinkedSocialClubAccount = exports.appGetString = exports.appGetInt = exports.appGetFloat = exports.appGetDeletedFileStatus = exports.appDeleteAppData = exports.appDataValid = exports.appCloseBlock = exports.appCloseApp = exports.appClearBlock = exports.animpostfxStopAndFlushRequests = exports.animpostfxStopAll = exports.animpostfxStop = exports.animpostfxPlay = exports.animpostfxIsRunning = exports.animpostfxGetCurrentTime = exports.animatedShakeScriptGlobal = exports.animatedShakeCam = exports.allowTrainToBeRemovedByPopulation = exports.allowSonarBlips = exports.allowPortablePickupToMigrateToNonParticipants = exports.allowPlayerSwitchPan = exports.allowPlayerSwitchOutro = exports.allowPlayerSwitchDescent = exports.allowPlayerSwitchAscent = exports.allowPickupByNoneParticipant = exports.allowPickupArrowMarkerWhenUncollectable = exports.allowPauseWhenNotInStateOfPlayThisFrame = exports.allowMotionBlurDecay = exports.allowMissionCreatorWarp = exports.allowEvasionHudIfDisablingHiddenEvasionThisFrame = exports.allowDisplayOfMultiplayerCashText = exports.allowDamageEventsForNonNetworkedObjects = exports.allowBoatBoomToAnimate = exports.allowAmbientVehiclesToAvoidAdverseConditions = exports.allowAlternativeScriptControlsLayout = exports.allowAllPlayersToCollectPickupsOfType = exports.advanceClockTimeTo = exports.adjustNextPosSizeAsNormalized169 = exports.adjustAmbientPedSpawnDensitiesThisFrame = exports.addVehicleUpsidedownCheck = exports.addVehicleSubtaskAttackPed = void 0;
exports.attachPortablePickupToPed = exports.attachEntityToEntityPhysicallyOverrideInverseMass = exports.attachEntityToEntityPhysically = exports.attachEntityToEntity = exports.attachEntityToCargobob = exports.attachEntityBoneToEntityBoneYForward = exports.attachEntityBoneToEntityBone = exports.attachEntitiesToRope = exports.attachContainerToHandlerFrameWhenLinedUp = exports.attachCamToVehicleBone = exports.attachCamToPedBone = exports.attachCamToEntity = exports.atan2 = exports.atan = exports.assistedMovementSetRouteProperties = exports.assistedMovementRequestRoute = exports.assistedMovementRemoveRoute = exports.assistedMovementOverrideLoadDistanceThisFrame = exports.assistedMovementIsRouteLoaded = exports.assistedMovementFlushRoute = exports.assistedMovementCloseRoute = exports.asin = exports.areWingsOfPlaneIntact = exports.areWidescreenBordersActive = exports.areStringsEqual = exports.areProfileSettingsValid = exports.arePlayerStarsGreyedOut = exports.arePlayerFlashingStarsAboutToDrop = exports.arePlanePropellersIntact = exports.arePlaneControlPanelsIntact = exports.areOnlinePoliciesUpToDate = exports.areNodesLoadedForArea = exports.areMissileBaysDeployed = exports.areFoldingWingsDeployed = exports.areEntitiesEntirelyInsideGarage = exports.areCutsceneEntitiesNetworked = exports.areCreditsRunning = exports.areAnyVehicleSeatsFree = exports.areAnyCcsPending = exports.areAllVehicleWindowsIntact = exports.areAllNavmeshRegionsLoaded = exports.applyPedDamagePack = exports.applyPedDamageDecal = exports.applyPedBloodSpecific = exports.applyPedBloodDamageByZone = exports.applyPedBloodByZone = exports.applyPedBlood = exports.applyImpulseToCloth = exports.applyForceToEntityCenterOfMass = exports.applyForceToEntity = void 0;
exports.blockPedFromGeneratingDeadBodyEventsWhenDead = exports.blockFirstPersonOrientationResetThisUpdate = exports.blockDispatchServiceResourceCreation = exports.blockDecisionMakerEvent = exports.blockDeathJingle = exports.blockAllSpeechFromPed = exports.blipSiren = exports.bgStartContextHash = exports.bgStartContext = exports.bgSetExitflagResponse = exports.bgIsExitflagSet = exports.bgGetScriptIdFromNameHash = exports.bgGetLaunchParamValue = exports.bgEndContextHash = exports.bgEndContext = exports.bgDoesLaunchParamExist = exports.beginTextCommandThefeedPost = exports.beginTextCommandSetBlipName = exports.beginTextCommandScaleformString = exports.beginTextCommandPrint = exports.beginTextCommandOverrideButtonText = exports.beginTextCommandIsThisHelpMessageBeingDisplayed = exports.beginTextCommandIsMessageDisplayed = exports.beginTextCommandGetScreenWidthOfDisplayText = exports.beginTextCommandGetNumberOfLinesForString = exports.beginTextCommandDisplayText = exports.beginTextCommandDisplayHelp = exports.beginTextCommandClearPrint = exports.beginTextCommandBusyspinnerOn = exports.beginTextCommandAddDirectlyToPreviousBriefs = exports.beginTakeMissionCreatorPhoto = exports.beginTakeHighQualityPhoto = exports.beginSrl = exports.beginScaleformScriptHudMovieMethod = exports.beginScaleformMovieMethodOnFrontendHeader = exports.beginScaleformMovieMethodOnFrontend = exports.beginScaleformMovieMethod = exports.beginReplayStats = exports.beginCreateMissionCreatorPhotoPreview = exports.beginCreateLowQualityCopyOfPhoto = exports.badSportPlayerLeftDetected = exports.audioIsScriptedMusicPlaying = exports.audioIsMusicPlaying = exports.attachVehicleToTrailer = exports.attachVehicleToTowTruck = exports.attachVehicleToCargobob = exports.attachVehicleOnToTrailer = exports.attachTvAudioToEntity = exports.attachSynchronizedSceneToEntity = exports.attachRopeToEntity = void 0;
exports.cancelOnscreenKeyboard = exports.cancelMusicEvent = exports.cancelAllPoliceReports = exports.canVehicleReceiveCbRadio = exports.canUseWeaponOnParachute = exports.canUseMobilePhoneDuringCutscene = exports.canShuffleSeat = exports.canSetExitStateForRegisteredEntity = exports.canSetExitStateForCamera = exports.canSetEnterStateForRegisteredEntity = exports.canRequestAssetsForCutsceneEntity = exports.canRegisterMissionVehicles = exports.canRegisterMissionPickups = exports.canRegisterMissionPeds = exports.canRegisterMissionObjects = exports.canRegisterMissionEntities = exports.canRegisterMissionDoors = exports.canPlayerStartMission = exports.canPhoneBeSeenOnScreen = exports.canPedShuffleToOrFromTurretSeat = exports.canPedShuffleToOrFromExtraSeat = exports.canPedSeeHatedPed = exports.canPedRagdoll = exports.canPedInCombatSeeTarget = exports.canPedHearPlayer = exports.canPayAmountToBoss = exports.canKnockPedOffVehicle = exports.canCreateRandomPed = exports.canCreateRandomDriver = exports.canCreateRandomCops = exports.canCreateRandomBikeRider = exports.canCargobobPickUpEntity = exports.canAnchorBoatHereIgnorePlayers = exports.canAnchorBoatHere = exports.cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate = exports.callScaleformMovieMethodWithString = exports.callScaleformMovieMethodWithNumberAndString = exports.callScaleformMovieMethodWithNumber = exports.callScaleformMovieMethod = exports.calculateTravelDistanceBetweenPoints = exports.bypassCutsceneCamRenderingThisUpdate = exports.bypassCameraCollisionBuoyancyTestThisUpdate = exports.busyspinnerOff = exports.busyspinnerIsOn = exports.busyspinnerIsDisplaying = exports.bringVehicleToHalt = exports.breakObjectFragmentChild = exports.breakEntityGlass = exports.blockSpeechContextGroup = exports.blockPlayersForAmbientPickup = void 0;
exports.clearArea = exports.clearAngledAreaOfVehicles = exports.clearAmbientZoneState = exports.clearAmbientZoneListState = exports.clearAllTcmodifierOverrides = exports.clearAllPickupRewardTypeSuppression = exports.clearAllPedVehicleForcedSeatUsage = exports.clearAllPedProps = exports.clearAllHelpMessages = exports.clearAllBrokenGlass = exports.clearAllBlipRoutes = exports.clearAdditionalText = exports.cleanupAsyncInstall = exports.cleanItemset = exports.changeUniform = exports.changePlayerPed = exports.changeGoonLookingForWork = exports.changeFakeMpCash = exports.cellSetInput = exports.cellHorizontalModeToggle = exports.cellCamSetSelfieModeVertPanOffset = exports.cellCamSetSelfieModeSideOffsetScaling = exports.cellCamSetSelfieModeRollOffset = exports.cellCamSetSelfieModeHorzPanOffset = exports.cellCamSetSelfieModeHeadYawOffset = exports.cellCamSetSelfieModeHeadRollOffset = exports.cellCamSetSelfieModeHeadPitchOffset = exports.cellCamSetSelfieModeDistanceScaling = exports.cellCamIsCharVisibleNoFaceCheck = exports.cellCamActivateShallowDofMode = exports.cellCamActivateSelfieMode = exports.cellCamActivate = exports.ceil = exports.cascadeShadowsSetSplitZExpWeight = exports.cascadeShadowsSetShadowSampleType = exports.cascadeShadowsSetScreenSizeCheckEnabled = exports.cascadeShadowsSetEntityTrackerScale = exports.cascadeShadowsSetDynamicDepthValue = exports.cascadeShadowsSetDynamicDepthMode = exports.cascadeShadowsSetCascadeBoundsScale = exports.cascadeShadowsSetCascadeBounds = exports.cascadeShadowsSetBoundPosition = exports.cascadeShadowsSetAircraftMode = exports.cascadeShadowsInitSession = exports.cascadeShadowsEnableFreezer = exports.cascadeShadowsEnableEntityTracker = exports.cascadeShadowsClearShadowSampleType = exports.capInterior = exports.cancelStuntJump = exports.cancelReplayRecording = void 0;
exports.clearPedFallUpperBodyClipsetOverride = exports.clearPedEnvDirt = exports.clearPedDriveByClipsetOverride = exports.clearPedDecorationsLeaveScars = exports.clearPedDecorations = exports.clearPedDamageDecalByZone = exports.clearPedBloodDamageByZone = exports.clearPedBloodDamage = exports.clearPedAlternateWalkAnim = exports.clearPedAlternateMovementAnim = exports.clearParticleFxShootoutBoat = exports.clearOverrideWeather = exports.clearObjectsInsideGarage = exports.clearLastDrivenVehicle = exports.clearInteriorStateOfEntity = exports.clearHelp = exports.clearHdArea = exports.clearGpsRaceTrack = exports.clearGpsPlayerWaypoint = exports.clearGpsMultiRoute = exports.clearGpsFlags = exports.clearGpsDisabledZoneAtIndex = exports.clearGpsCustomRoute = exports.clearGarage = exports.clearFocus = exports.clearFloatingHelp = exports.clearFakeConeArray = exports.clearFacialIdleAnimOverride = exports.clearExtraTcmodifier = exports.clearExtendedPickupProbeAreas = exports.clearEntityLastWeaponDamage = exports.clearEntityLastDamageEntity = exports.clearDynamicPauseMenuErrorMessage = exports.clearDrivebyTaskUnderneathDrivingTask = exports.clearDrawOrigin = exports.clearDefaultPrimaryTask = exports.clearDecisionMakerEventResponse = exports.clearCustomRadioTrackList = exports.clearCoverPointForPed = exports.clearControlShakeSuppressedId = exports.clearControlLightEffect = exports.clearCodeRequestedAutosave = exports.clearBrief = exports.clearBit = exports.clearAreaOfVehicles = exports.clearAreaOfProjectiles = exports.clearAreaOfPeds = exports.clearAreaOfObjects = exports.clearAreaOfCops = exports.clearAreaLeaveVehicleHealth = void 0;
exports.clearWeatherTypePersist = exports.clearWeatherTypeNowPersistNetwork = exports.clearVehicleRouteHistory = exports.clearVehiclePhoneExplosiveDevice = exports.clearVehiclePetroltankFireCulprit = exports.clearVehicleGeneratorAreaOfInterest = exports.clearVehicleCustomSecondaryColour = exports.clearVehicleCustomPrimaryColour = exports.clearVehicleCrashTask = exports.clearValidVehicleHitHashes = exports.clearTvChannelPlaylist = exports.clearTimecycleModifier = exports.clearThisPrint = exports.clearTacticalNavMeshPoints = exports.clearStatusOfSortedListOperation = exports.clearSmallPrints = exports.clearServiceEventArguments = exports.clearSequenceTask = exports.clearScenarioSpawnHistory = exports.clearRoomForGameViewport = exports.clearRoomForEntity = exports.clearRestartCoordOverride = exports.clearReplayStats = exports.clearReminderMessage = exports.clearRelationshipBetweenGroups = exports.clearRagdollBlockingFlags = exports.clearPrints = exports.clearPrimaryVehicleTask = exports.clearPopscheduleOverrideVehicleModel = exports.clearPlayerWantedLevel = exports.clearPlayerReserveParachuteModelOverride = exports.clearPlayerParachuteVariationOverride = exports.clearPlayerParachutePackModelOverride = exports.clearPlayerParachuteModelOverride = exports.clearPlayerHasDamagedAtLeastOnePed = exports.clearPlayerHasDamagedAtLeastOneNonAnimalPed = exports.clearPickupRewardTypeSuppression = exports.clearPedWetness = exports.clearPedTasksImmediately = exports.clearPedTasks = exports.clearPedStoredHatProp = exports.clearPedSecondaryTask = exports.clearPedScubaGearVariation = exports.clearPedProp = exports.clearPedParachutePackVariation = exports.clearPedNonCreationArea = exports.clearPedMotionInCoverClipsetOverride = exports.clearPedLastWeaponDamage = exports.clearPedLastDamageBone = exports.clearPedInPauseMenu = void 0;
exports.createMoneyPickups = exports.createModelSwap = exports.createModelHideExcludingScriptObjects = exports.createModelHide = exports.createMobilePhone = exports.createMissionTrain = exports.createItemset = exports.createIncidentWithEntity = exports.createIncident = exports.createGroup = exports.createForcedObject = exports.createFakeMpGamerTag = exports.createCinematicShot = exports.createCheckpoint = exports.createCameraWithParams = exports.createCamera = exports.createCamWithParams = exports.createCam = exports.createAmbientPickup = exports.createAirDefenceSphere = exports.createAirDefenceAngledArea = exports.countPedsInCombatWithTargetWithinRadius = exports.countPedsInCombatWithTarget = exports.cos = exports.copyVehicleDamages = exports.copyScriptStruct = exports.convertPosixTime = exports.convertOldPickupTypeToNew = exports.controlMountedWeapon = exports.controlLandingGear = exports.compareStrings = exports.commitToLoadingscreenSelction = exports.codeWantsScriptToTakeControl = exports.cloudIsCheckingAvailability = exports.cloudHasRequestCompleted = exports.cloudGetAvailabilityCheckResult = exports.cloudDidRequestSucceed = exports.cloudDeleteMemberFile = exports.cloudCheckAvailability = exports.closeSocialClubMenu = exports.closeSequenceTask = exports.closeSafehouseGarages = exports.closePatrolRoute = exports.closeMpTextChat = exports.closeBombBayDoors = exports.closeAllBarriersForRace = exports.clonePedToTargetAlt = exports.clonePedToTarget = exports.clonePedAlt = exports.clonePed = void 0;
exports.datadictGetString = exports.datadictGetInt = exports.datadictGetFloat = exports.datadictGetDict = exports.datadictGetBool = exports.datadictGetArray = exports.datadictCreateDict = exports.datadictCreateArray = exports.dataarrayGetVector = exports.dataarrayGetType = exports.dataarrayGetString = exports.dataarrayGetInt = exports.dataarrayGetFloat = exports.dataarrayGetDict = exports.dataarrayGetCount = exports.dataarrayGetBool = exports.dataarrayAddVector = exports.dataarrayAddString = exports.dataarrayAddInt = exports.dataarrayAddFloat = exports.dataarrayAddDict = exports.dataarrayAddBool = exports.damageObjectFragmentChild = exports.customMinimapSetBlipObject = exports.customMinimapSetActive = exports.customMinimapCreateBlip = exports.customMinimapClearBlips = exports.createWeaponObject = exports.createVehicle = exports.createTrackedPoint = exports.createSynchronizedSceneAtMapObject = exports.createSynchronizedScene = exports.createScriptVehicleGenerator = exports.createRandomPedAsDriver = exports.createRandomPed = exports.createPortablePickup = exports.createPickupRotate = exports.createPickup = exports.createPickUpRopeForCargobob = exports.createPedInsideVehicle = exports.createPed = exports.createPatrolRoute = exports.createParachuteBagObject = exports.createObjectNoOffset = exports.createObject = exports.createNonNetworkedPortablePickup = exports.createNonNetworkedAmbientPickup = exports.createNmMessage = exports.createNewScriptedConversation = exports.createMpGamerTagWithCrewColor = void 0;
exports.deleteIncident = exports.deleteEntity = exports.deleteChildRope = exports.deleteCheckpoint = exports.deleteAllTrains = exports.delayMpStoreOpen = exports.decorSetTime = exports.decorSetInt = exports.decorSetFloat = exports.decorSetBool = exports.decorRemove = exports.decorRegisterLock = exports.decorRegister = exports.decorIsRegisteredAsType = exports.decorGetInt = exports.decorGetFloat = exports.decorGetBool = exports.decorExistOn = exports.deactivateInteriorEntitySet = exports.deactivateAudioSlowmoMode = exports.datafileWatchRequestId = exports.datafileUpdateSaveToCloud = exports.datafileStoreMissionHeader = exports.datafileStartSaveToCloud = exports.datafileSelectUgcStats = exports.datafileSelectUgcPlayerData = exports.datafileSelectUgcData = exports.datafileSelectCreatorStats = exports.datafileSelectActiveFile = exports.datafileLoadOfflineUgcForAdditionalDataFile = exports.datafileLoadOfflineUgc = exports.datafileIsValidRequestId = exports.datafileIsSavePending = exports.datafileHasValidFileData = exports.datafileHasLoadedFileData = exports.datafileGetFileDictForAdditionalDataFile = exports.datafileGetFileDict = exports.datafileFlushMissionHeader = exports.datafileDeleteRequestedFile = exports.datafileDeleteForAdditionalDataFile = exports.datafileDelete = exports.datafileCreate = exports.datafileClearWatchList = exports.datadictSetVector = exports.datadictSetString = exports.datadictSetInt = exports.datadictSetFloat = exports.datadictSetBool = exports.datadictGetVector = exports.datadictGetType = void 0;
exports.disableMoonCycleOverride = exports.disableMetroSystem = exports.disableInterior = exports.disableIndividualPlanePropeller = exports.disableInWaterPtfx = exports.disableHospitalRestart = exports.disableHeadBlendPaletteColor = exports.disableHdtexThisFrame = exports.disableGameplayCamAltitudeFovScalingThisUpdate = exports.disableFrontendThisFrame = exports.disableFirstPersonFlashEffectThisUpdate = exports.disableFirstPersonCameraWaterClippingTestThisUpdate = exports.disableDownwashPtfx = exports.disableControlAction = exports.disableCompositeShotgunDecals = exports.disableCinematicVehicleIdleModeThisUpdate = exports.disableCinematicSlowMoThisUpdate = exports.disableCinematicBonnetCameraThisUpdate = exports.disableCameraViewModeCycle = exports.disableCamCollisionForObject = exports.disableAllControlActions = exports.disableAimCamThisUpdate = exports.detonateVehiclePhoneExplosiveDevice = exports.detachVehicleFromTrailer = exports.detachVehicleFromTowTruck = exports.detachVehicleFromCargobob = exports.detachVehicleFromAnyTowTruck = exports.detachVehicleFromAnyCargobob = exports.detachSynchronizedScene = exports.detachRopeFromEntity = exports.detachPortablePickupFromPed = exports.detachEntityFromCargobob = exports.detachEntity = exports.detachContainerFromHandlerFrame = exports.detachCam = exports.destroyTrackedPoint = exports.destroyMobilePhone = exports.destroyItemset = exports.destroyCam = exports.destroyAllCams = exports.depositVc = exports.deleteWaypointsFromThisPlayer = exports.deleteVehicle = exports.deleteStuntJump = exports.deleteScriptVehicleGenerator = exports.deleteRope = exports.deletePed = exports.deletePatrolRoute = exports.deleteObject = exports.deleteMissionTrain = void 0;
exports.doesBlipExist = exports.doesAnimDictExist = exports.doesAirDefenceSphereExist = exports.doScreenFadeOut = exports.doScreenFadeIn = exports.doAutoSave = exports.dlcCheckCompatPackConfiguration = exports.dlcCheckCloudDataCorrect = exports.distantCopCarSirens = exports.displaySystemSigninUi = exports.displaySniperScopeThisFrame = exports.displayRadar = exports.displayPlayerNameTagsOnBlips = exports.displayOnscreenKeyboardWithLongerInitialString = exports.displayOnscreenKeyboard = exports.displayHudWhenPausedThisFrame = exports.displayHudWhenNotInStateOfPlayThisFrame = exports.displayHud = exports.displayHelpTextThisFrame = exports.displayCash = exports.displayAreaName = exports.displayAmmoThisFrame = exports.disableVehicleWeapon = exports.disableVehicleTurretMovementThisFrame = exports.disableVehicleExplosionBreakOffParts = exports.disableVehicleDistantlights = exports.disableVehcileDynamicAmbientScales = exports.disableTidyingUpInGarage = exports.disableSwitchOutroFx = exports.disableStuntJumpSet = exports.disableScuffDecals = exports.disableScriptBrainSet = exports.disableScreenblurFade = exports.disableScreenDimmingThisFrame = exports.disableRegionVfx = exports.disableProcobjCreation = exports.disablePoliceRestart = exports.disablePlayerVehicleRewards = exports.disablePlayerThrowGrenadeWhileUsingGun = exports.disablePlayerHealthRecharge = exports.disablePlayerFiring = exports.disablePlaneAileron = exports.disablePedPainAudio = exports.disablePedInjuredOnGroundBehaviour = exports.disablePedHeatscaleOverride = exports.disablePausemenuSpinner = exports.disableOnFootFirstPersonViewThisUpdate = exports.disableOcclusionThisFrame = exports.disableNearClipScanThisUpdate = exports.disableNavmeshInArea = void 0;
exports.doesVehicleHaveStuckVehicleCheck = exports.doesVehicleHaveSearchlight = exports.doesVehicleHaveRoof = exports.doesVehicleHaveCrewEmblem = exports.doesVehicleExistWithDecorator = exports.doesVehicleAllowRappel = exports.doesThisPhotoSlotContainAValidPhoto = exports.doesTextLabelExist = exports.doesTextBlockExist = exports.doesShopPedApparelHaveRestrictionTag = exports.doesScriptedCoverPointExistAtCoords = exports.doesScriptWithNameHashExist = exports.doesScriptVehicleGeneratorExist = exports.doesScriptOwnRope = exports.doesScriptExist = exports.doesScenarioOfTypeExistInArea = exports.doesScenarioGroupExist = exports.doesScenarioExistInArea = exports.doesScenarioBlockingAreaExists = exports.doesRopeExist = exports.doesRelationshipGroupExist = exports.doesRayfireMapObjectExist = exports.doesPopMultiplierSphereExist = exports.doesPopMultiplierAreaExist = exports.doesPlayerVehHaveRadio = exports.doesPickupOfTypeExistInArea = exports.doesPickupObjectExist = exports.doesPickupExist = exports.doesPedHaveAiBlip = exports.doesParticleFxLoopedExist = exports.doesObjectOfTypeExistAtCoords = exports.doesNavmeshBlockingObjectExist = exports.doesLatestBriefStringExist = exports.doesGroupExist = exports.doesExtraExist = exports.doesEntityHaveSkeleton = exports.doesEntityHavePhysics = exports.doesEntityHaveDrawable = exports.doesEntityHaveAnimDirector = exports.doesEntityExist = exports.doesEntityBelongToThisScript = exports.doesCutsceneHandleExist = exports.doesCutsceneEntityExist = exports.doesCurrentPedPropHaveRestrictionTag = exports.doesCurrentPedComponentHaveRestrictionTag = exports.doesContextExistForThisPed = exports.doesCargobobHavePickupMagnet = exports.doesCargobobHavePickUpRope = exports.doesCamExist = exports.doesBlipHaveGpsRoute = void 0;
exports.drawSpriteNamedRendertarget = exports.drawSpriteArxWithUv = exports.drawSpriteArx = exports.drawSprite = exports.drawSpotLight = exports.drawShadowedSpotLight = exports.drawScaleformMovieFullscreenMasked = exports.drawScaleformMovieFullscreen = exports.drawScaleformMovie3dSolid = exports.drawScaleformMovie3d = exports.drawScaleformMovie = exports.drawRect = exports.drawPoly = exports.drawMarkerSphere = exports.drawMarkerEx = exports.drawMarker = exports.drawLowQualityPhotoToPhone = exports.drawLine = exports.drawLightWithRangeex = exports.drawLightWithRange = exports.drawHudOverFadeThisFrame = exports.drawFrontendBackgroundThisFrame = exports.drawDebugText2d = exports.drawDebugText = exports.drawDebugSphere = exports.drawDebugLineWithTwoColours = exports.drawDebugLine = exports.drawDebugCross = exports.drawDebugBox = exports.drawBox = exports.drawBinkMovie = exports.doorSystemSetSpringRemoved = exports.doorSystemSetOpenRatio = exports.doorSystemSetHoldOpen = exports.doorSystemSetDoorState = exports.doorSystemSetDoorOpenForRaces = exports.doorSystemSetAutomaticRate = exports.doorSystemSetAutomaticDistance = exports.doorSystemGetOpenRatio = exports.doorSystemGetIsPhysicsLoaded = exports.doorSystemGetDoorState = exports.doorSystemGetDoorPendingState = exports.doorSystemGetAutomaticDistance = exports.doorSystemFindExistingDoor = exports.dontZoomMinimapWhenSnipingThisFrame = exports.dontZoomMinimapWhenRunningThisFrame = exports.dontTiltMinimapThisFrame = exports.dontRenderInGameUi = exports.doesWeaponTakeWeaponComponent = exports.doesVehicleHaveWeapons = void 0;
exports.endTextCommandSetBlipName = exports.endTextCommandScaleformString = exports.endTextCommandPrint = exports.endTextCommandOverrideButtonText = exports.endTextCommandIsThisHelpMessageBeingDisplayed = exports.endTextCommandIsMessageDisplayed = exports.endTextCommandGetScreenWidthOfDisplayText = exports.endTextCommandGetNumberOfLinesForString = exports.endTextCommandDisplayText = exports.endTextCommandDisplayHelp = exports.endTextCommandClearPrint = exports.endTextCommandBusyspinnerOn = exports.endTextCommandAddDirectlyToPreviousBriefs = exports.endSrl = exports.endScaleformMovieMethodReturnValue = exports.endScaleformMovieMethod = exports.endReplayStats = exports.endPetrolTrailDecals = exports.endBeingGoon = exports.endBeingBoss = exports.enableVehicleFanbeltDamage = exports.enableVehicleExhaustPops = exports.enableVehicleDynamicAmbientScales = exports.enableTennisMode = exports.enableSwitchPauseBeforeDescent = exports.enableStuntJumpSet = exports.enableStuntJumpAudio = exports.enableStallWarningSounds = exports.enableStadiumProbesThisFrame = exports.enableSpecialAbility = exports.enableShadowCullModelThisFrame = exports.enableScriptBrainSet = exports.enableSavingInGarage = exports.enableProcobjCreation = exports.enableMpLight = exports.enableMovieSubtitles = exports.enableMovieKeyframeWait = exports.enableMoonCycleOverride = exports.enableLaserSightRendering = exports.enableExteriorCullModelThisFrame = exports.enableEntityBulletCollision = exports.enableDispatchService = exports.enableControlAction = exports.enableClownBloodVfx = exports.enableAllControlActions = exports.enableAlienBloodVfx = exports.dropAmbientProp = exports.drawTvChannel = exports.drawTexturedPolyWithThreeColours = exports.drawTexturedPoly = void 0;
exports.flashMinimapDisplay = exports.flashAbilityBar = exports.flagPlayerContextInTournament = exports.fixVehicleWindow = exports.fixObjectFragment = exports.fireAirDefenceSphereWeaponAtPosition = exports.findSpawnPointInDirection = exports.findSpawnCoordinatesForHeli = exports.findRadioStationIndex = exports.findHandlerVehicleContainerIsAttachedTo = exports.findAnimEventPhase = exports.finalizeHeadBlend = exports.filloutPmPlayerListWithNames = exports.filloutPmPlayerList = exports.fadeUpPedLight = exports.fadeOutLocalPlayer = exports.fadeDecalsInRange = exports.facebookPostCreateCharacter = exports.facebookPostCompletedMilestone = exports.facebookPostCompletedHeist = exports.facebookHasPostCompleted = exports.facebookDidPostSucceed = exports.facebookCanPostToFacebook = exports.extendWorldBoundaryForPlayer = exports.explodeVehicleInCutscene = exports.explodeVehicle = exports.explodeProjectiles = exports.explodePedHead = exports.executeContentChangesetGroupForAll = exports.endTextCommandUnparsedScaleformString = exports.endTextCommandThefeedPostVersusTu = exports.endTextCommandThefeedPostUnlockTuWithColor = exports.endTextCommandThefeedPostUnlockTu = exports.endTextCommandThefeedPostUnlock = exports.endTextCommandThefeedPostTickerWithTokens = exports.endTextCommandThefeedPostTickerForced = exports.endTextCommandThefeedPostTicker = exports.endTextCommandThefeedPostStats = exports.endTextCommandThefeedPostReplayInput = exports.endTextCommandThefeedPostReplay = exports.endTextCommandThefeedPostMpticker = exports.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon = exports.endTextCommandThefeedPostMessagetextWithCrewTag = exports.endTextCommandThefeedPostMessagetextTu = exports.endTextCommandThefeedPostMessagetextSubtitleLabel = exports.endTextCommandThefeedPostMessagetext = exports.endTextCommandThefeedPostCrewtagWithGameName = exports.endTextCommandThefeedPostCrewtag = exports.endTextCommandThefeedPostCrewRankupWithLiteralFlag = exports.endTextCommandThefeedPostAward = void 0;
exports.freeMemoryForHighQualityPhoto = exports.forceZeroMassInCollisions = exports.forceVehicleCamStuntSettingsThisUpdate = exports.forceUseAudioGameObject = exports.forceTightspaceCustomFramingThisUpdate = exports.forceSubmarineSurfaceMode = exports.forceSubmarineNeurtalBuoyancy = exports.forceSubThrottleForTime = exports.forceStartHiddenEvasion = exports.forceSonarBlipsThisFrame = exports.forceScriptedGfxWhenFrontendActive = exports.forceRoomForGameViewport = exports.forceRoomForEntity = exports.forceRenderInGameUi = exports.forcePostfxBulletImpactsAfterHud = exports.forcePortablePickupLastAccessiblePositionSetting = exports.forcePlaybackRecordedVehicleUpdate = exports.forcePickupRotateFaceUp = exports.forcePickupRegenerate = exports.forcePedToOpenParachute = exports.forcePedPanicWalla = exports.forcePedMotionState = exports.forcePedAiAndAnimationUpdate = exports.forceParticleFxInVehicleInterior = exports.forceOffWantedStarFlash = exports.forceNextMessageToPreviousBriefsList = exports.forceMusicTrackList = exports.forceLightningFlash = exports.forceInstantLegIkSetup = exports.forceGameStatePlaying = exports.forceExposureReadback = exports.forceEntityAiAndAnimationUpdate = exports.forceCloudMpStatsDownloadAndOverwriteLocalSave = exports.forceCloseTextInputBox = exports.forceCloseReportugcMenu = exports.forceCleanupForThreadWithThisId = exports.forceCleanupForAllThreadsWithThisName = exports.forceCleanup = exports.forceCinematicRenderingThisUpdate = exports.forceCheckScriptVariables = exports.forceCameraRelativeHeadingAndPitch = exports.forceCamFarClip = exports.forceBonnetCameraRelativeHeadingAndPitch = exports.forceAllowTimeBasedFadingThisFrame = exports.forceAllHeadingValuesToAlign = exports.forceActivatingTrackingOnEntity = exports.forceActivatePhysicsOnUnfixedPickup = exports.floor = exports.flashWantedDisplay = exports.flashMinimapDisplayWithColor = void 0;
exports.getBlipRotation = exports.getBlipInfoIdType = exports.getBlipInfoIdPickupIndex = exports.getBlipInfoIdEntityIndex = exports.getBlipInfoIdDisplay = exports.getBlipInfoIdCoord = exports.getBlipHudColour = exports.getBlipFromEntity = exports.getBlipFadeDirection = exports.getBlipCoords = exports.getBlipColour = exports.getBlipAlpha = exports.getBitsInRange = exports.getBinkMovieTime = exports.getBestPedWeapon = exports.getBenchmarkPass = exports.getBenchmarkIterations = exports.getBaseElementLocationFromMetadataBlock = exports.getAudibleMusicTrackTextId = exports.getAttachedPickUpHookPosition = exports.getAspectRatio = exports.getAreCameraControlsDisabled = exports.getAreBombBayDoorsOpen = exports.getApproxHeightForPoint = exports.getApproxHeightForArea = exports.getApproxFloorForPoint = exports.getApproxFloorForArea = exports.getAnimInitialOffsetRotation = exports.getAnimInitialOffsetPosition = exports.getAnimDuration = exports.getAngleBetween2dVectors = exports.getAmmoInPedWeapon = exports.getAmmoInClip = exports.getAmbientVoiceNameHash = exports.getAllowMovementWhileZoomed = exports.getAllocatedStackSize = exports.getAllVehicles = exports.getAiPedVehicleBlipIndex = exports.getAiPedPedBlipIndex = exports.getActualScreenResolution = exports.getActiveVehicleMissionType = exports.getAchievementProgress = exports.generateVehicleCreationPosFromPaths = exports.generateDirectionsToCoord = exports.freezeRadioStation = exports.freezeMicrophone = exports.freezeEntityPosition = exports.freeMemoryForMissionCreatorPhotoPreview = exports.freeMemoryForMissionCreatorPhoto = exports.freeMemoryForLowQualityPhoto = void 0;
exports.getCloudTimeAsInt = exports.getClosestVehicleNodeWithHeading = exports.getClosestVehicleNode = exports.getClosestVehicle = exports.getClosestRoad = exports.getClosestPointOnLine = exports.getClosestPed = exports.getClosestObjectOfType = exports.getClosestMajorVehicleNode = exports.getClosestFirePos = exports.getClosestBlipInfoId = exports.getClockYear = exports.getClockSeconds = exports.getClockMonth = exports.getClockMinutes = exports.getClockHours = exports.getClockDayOfWeek = exports.getClockDayOfMonth = exports.getClipSetForScriptedGunTask = exports.getCityDensity = exports.getCharacterMenuPedMaskedIntStat = exports.getCharacterMenuPedIntStat = exports.getCharacterMenuPedFloatStat = exports.getCharacterFromAudioConversationFilenameWithByteLimit = exports.getCharacterFromAudioConversationFilenameBytes = exports.getCharacterFromAudioConversationFilename = exports.getCgoffset = exports.getCauseOfMostRecentForceCleanup = exports.getCarHasJump = exports.getCanVehicleBePlacedHere = exports.getCanPedBeGrabbedByScript = exports.getCamViewModeForContext = exports.getCamSplinePhase = exports.getCamSplineNodePhase = exports.getCamSplineNodeIndex = exports.getCamRot = exports.getCamNearDof = exports.getCamNearClip = exports.getCamFov = exports.getCamFarDof = exports.getCamFarClip = exports.getCamDofStrength = exports.getCamCoord = exports.getCamAnimCurrentPhase = exports.getCamActiveViewModeContext = exports.getBothVehicleHeadlightsDamaged = exports.getBossGoonUuid = exports.getBoatVehicleModelAgility = exports.getBoatBoomPositionRatio = exports.getBlipSprite = void 0;
exports.getDefaultAmmoForWeaponPickup = exports.getDeepOceanScaler = exports.getDecalWashLevel = exports.getDebugCam = exports.getDeadPedPickupCoords = exports.getCutsceneTotalDuration = exports.getCutsceneTime = exports.getCutsceneSectionPlaying = exports.getCutscenePlayDuration = exports.getCutsceneEndTime = exports.getCutsceneConcatSectionPlaying = exports.getCutFileConcatCount = exports.getCurrentWebsiteId = exports.getCurrentWebpageId = exports.getCurrentTvClipNamehash = exports.getCurrentTrackSoundName = exports.getCurrentTrackPlayTime = exports.getCurrentScriptedConversationLine = exports.getCurrentPlaybackForVehicle = exports.getCurrentPedWeaponEntityIndex = exports.getCurrentPedWeapon = exports.getCurrentPedVehicleWeapon = exports.getCurrentNumberOfCloudPhotos = exports.getCurrentLanguage = exports.getCurrentFrontendMenuVersion = exports.getCurrWeatherState = exports.getCoordsOfProjectileTypeWithinDistance = exports.getCoordsOfProjectileTypeInArea = exports.getCoordsOfProjectileTypeInAngledArea = exports.getCoordsAndRotationOfClosestObjectOfType = exports.getConvertibleRoofState = exports.getControlValue = exports.getControlUnboundNormal = exports.getControlNormal = exports.getControlInstructionalButtonsString = exports.getControlHowLongAgo = exports.getControlGroupInstructionalButtonsString = exports.getContentToLoadType = exports.getContentToLoad = exports.getContentIdIndex = exports.getCommerceProductPrice = exports.getCommerceItemTexturename = exports.getCommerceItemNumCats = exports.getCommerceItemName = exports.getCommerceItemId = exports.getCommerceItemCat = exports.getCombatFloat = exports.getCollisionNormalOfLastHitForEntity = exports.getCloudsAlpha = exports.getCloudTimeAsString = void 0;
exports.getEntityPlayerIsFreeAimingAt = exports.getEntityPitch = exports.getEntityOfTypeAttachedToEntity = exports.getEntityModel = exports.getEntityMaxHealth = exports.getEntityMatrix = exports.getEntityLodDist = exports.getEntityIndexOfRegisteredEntity = exports.getEntityIndexOfCutsceneEntity = exports.getEntityHeightAboveGround = exports.getEntityHeight = exports.getEntityHealth = exports.getEntityHeadingFromEulers = exports.getEntityHeading = exports.getEntityForwardY = exports.getEntityForwardX = exports.getEntityForwardVector = exports.getEntityCoords = exports.getEntityCollisionDisabled = exports.getEntityCanBeDamaged = exports.getEntityBoneRotation = exports.getEntityBonePostion = exports.getEntityBoneObjectRotation = exports.getEntityBoneObjectPostion = exports.getEntityBoneIndexByName = exports.getEntityBoneCount = exports.getEntityAttachedToTowTruck = exports.getEntityAttachedToCargobob = exports.getEntityAttachedTo = exports.getEntityAnimTotalTime = exports.getEntityAnimCurrentTime = exports.getEntityAlpha = exports.getDriftTyresSet = exports.getDoesVehicleHaveTombstone = exports.getDoesVehicleHaveDamageDecals = exports.getDlcWeaponDataSp = exports.getDlcWeaponData = exports.getDlcWeaponComponentDataSp = exports.getDlcWeaponComponentData = exports.getDlcVehicleModel = exports.getDlcVehicleModLockHash = exports.getDlcVehicleFlags = exports.getDlcVehicleData = exports.getDistanceBetweenCoords = exports.getDisplayNameFromVehicleModel = exports.getDisabledControlUnboundNormal = exports.getDisabledControlNormal = exports.getDefaultSecondaryTintForCreator = exports.getDefaultSecondaryTintForBarber = exports.getDefaultScriptRendertargetRenderId = void 0;
exports.getGameTimer = exports.getFrameTime = exports.getFrameCount = exports.getForcedProp = exports.getForcedComponent = exports.getFollowVehicleCamZoomLevel = exports.getFollowVehicleCamViewMode = exports.getFollowPedCamZoomLevel = exports.getFollowPedCamViewMode = exports.getFocusPedOnScreen = exports.getFmMaleShopPedApparelItemIndex = exports.getFmFemaleShopPedApparelItemIndex = exports.getFlyingVehicleModelAgility = exports.getFirstPersonAimCamZoomFactor = exports.getFirstNCharactersOfLiteralString = exports.getFirstBlipInfoId = exports.getFinalRenderedRemotePlayerCamRot = exports.getFinalRenderedRemotePlayerCamFov = exports.getFinalRenderedCamRot = exports.getFinalRenderedCamNearDof = exports.getFinalRenderedCamNearClip = exports.getFinalRenderedCamMotionBlurStrength = exports.getFinalRenderedCamFov = exports.getFinalRenderedCamFarDof = exports.getFinalRenderedCamFarClip = exports.getFinalRenderedCamCoord = exports.getFilenameForAudioConversation = exports.getFakeWantedLevel = exports.getFakeSuspensionLoweringAmount = exports.getFakeSpectatorMode = exports.getExtracontentCloudResult = exports.getExtraTcmodifier = exports.getEverHadBadPackOrder = exports.getEventExists = exports.getEventData = exports.getEventAtIndex = exports.getEntryPointPosition = exports.getEntityVelocity = exports.getEntityUprightValue = exports.getEntityType = exports.getEntitySubmergedLevel = exports.getEntitySpeedVector = exports.getEntitySpeed = exports.getEntityScript = exports.getEntityRotationVelocity = exports.getEntityRotation = exports.getEntityRoll = exports.getEntityQuaternion = exports.getEntityProofs = exports.getEntityPopulationType = void 0;
exports.getIsDoorValid = exports.getIsBoatCapsized = exports.getIsAutoSaveOff = exports.getIsArticulatedJointAtMinAngle = exports.getIsArticulatedJointAtMaxAngle = exports.getInteriorLocationAndNamehash = exports.getInteriorHeading = exports.getInteriorGroupId = exports.getInteriorFromPrimaryView = exports.getInteriorFromEntity = exports.getInteriorFromCollision = exports.getInteriorAtCoordsWithTypehash = exports.getInteriorAtCoordsWithType = exports.getInteriorAtCoords = exports.getIndexedItemInItemset = exports.getIndexOfCurrentLevel = exports.getInVehicleClipsetHashForSeat = exports.getIdealPlayerSwitchType = exports.getIdOfThisThread = exports.getHydraulicSuspensionRaiseFactor = exports.getHudScreenPositionFromWorldPosition = exports.getHudComponentPosition = exports.getHudColour = exports.getHeliTailRotorHealth = exports.getHeliTailBoomHealth = exports.getHeliMainRotorHealth = exports.getHeadingFromVector2d = exports.getHeadBlendEyeColor = exports.getHashOfThisScriptName = exports.getHashOfMapAreaAtCoords = exports.getHashNameForProp = exports.getHashNameForComponent = exports.getHashKey = exports.getHasVehicleBeenHitByShunt = exports.getHasRocketBoost = exports.getHasRetractableWheels = exports.getHasObjectBeenCompletelyDestroyed = exports.getGroupSize = exports.getGroundZFor3dCoord = exports.getGroundZExcludingObjectsFor3dCoord = exports.getGroundZAndNormalFor3dCoord = exports.getGpsBlipRouteLength = exports.getGpsBlipRouteFound = exports.getGlobalWaterFile = exports.getGlobalActionscriptFlag = exports.getGameplayCamRot = exports.getGameplayCamRelativePitch = exports.getGameplayCamRelativeHeading = exports.getGameplayCamFov = exports.getGameplayCamCoord = void 0;
exports.getLodscale = exports.getLockonDistanceOfCurrentPedWeapon = exports.getLocalTime = exports.getLocalPlayerGamepadAimState = exports.getLocalPlayerAimState = exports.getLoadHighQualityPhotoStatus = exports.getLiveryName = exports.getLinePlaneIntersection = exports.getLightOverrideMaxIntensityScale = exports.getLengthOfStringWithThisTextLabel = exports.getLengthOfLiteralStringInBytes = exports.getLengthOfLiteralString = exports.getLastShuntVehicle = exports.getLastPedInVehicleSeat = exports.getLastMaterialHitByEntity = exports.getLastEntityHitByEntity = exports.getLastDrivenVehicle = exports.getLandingGearState = exports.getKeyForEntityInRoom = exports.getJackTarget = exports.getItemsetSize = exports.getIsWidescreen = exports.getIsWheelsRetracted = exports.getIsWaypointRecordingLoaded = exports.getIsVehicleShunting = exports.getIsVehicleSecondaryColourCustom = exports.getIsVehiclePrimaryColourCustom = exports.getIsVehicleEngineRunning = exports.getIsVehicleDisabledByEmp = exports.getIsUsingHoodCamera = exports.getIsUsingFpsThirdPersonCover = exports.getIsUsingAlternateHandbrake = exports.getIsUsingAlternateDriveby = exports.getIsTimecycleTransitioningOut = exports.getIsTaskActive = exports.getIsRightVehicleHeadlightDamaged = exports.getIsPreloadedConversationReady = exports.getIsPlayerInAnimalForm = exports.getIsPlayerDrivingWreckless = exports.getIsPlayerDrivingOnHighway = exports.getIsPetrolDecalInRange = exports.getIsPedGadgetEquipped = exports.getIsMoppingAreaFreeInFrontOfPlayer = exports.getIsLoadingScreenActive = exports.getIsLiveAreaLaunchWithContent = exports.getIsLeftVehicleHeadlightDamaged = exports.getIsLaunchFromLiveArea = exports.getIsInitialLoadingScreenActive = exports.getIsHidef = exports.getIsEntityAFrag = void 0;
exports.getNextAudibleBeat = exports.getNewSelectedMissionCreatorBlip = exports.getNetworkTimeAccurate = exports.getNetworkTime = exports.getNetworkIdFromSoundId = exports.getNearestPlayerToEntityOnTeam = exports.getNearestPlayerToEntity = exports.getNearestParticipantToEntity = exports.getNavmeshRouteResult = exports.getNavmeshRouteDistanceRemaining = exports.getNamedRendertargetRenderId = exports.getNameOfZone = exports.getNameOfScriptWithThisId = exports.getMusicVolSlider = exports.getMusicPlaytime = exports.getMpOutfitDataFromMetadata = exports.getMpLightEnabled = exports.getMouseEvent = exports.getMount = exports.getMotionblurMaxVelScaler = exports.getModelDimensions = exports.getModTextLabel = exports.getModSlotName = exports.getMobilePhoneRotation = exports.getMobilePhoneRenderId = exports.getMobilePhonePosition = exports.getMissionFlag = exports.getMinimapFowDiscoveryRatio = exports.getMinimapFowCoordinateIsRevealed = exports.getMillisecondsPerGameMinute = exports.getMenuTriggerEventDetails = exports.getMenuPedMaskedIntStat = exports.getMenuPedIntStat = exports.getMenuPedFloatStat = exports.getMenuPedBoolStat = exports.getMenuLayoutChangedEventDetails = exports.getMeleeTargetForPed = exports.getMaximumNumberOfPhotos = exports.getMaximumNumberOfCloudPhotos = exports.getMaxWantedLevel = exports.getMaxRangeOfCurrentPedWeapon = exports.getMaxNumNetworkVehicles = exports.getMaxNumNetworkPickups = exports.getMaxNumNetworkPeds = exports.getMaxNumNetworkObjects = exports.getMaxAmmoInClip = exports.getMaxAmmoByType = exports.getMaxAmmo = exports.getMakeNameFromVehicleModel = exports.getMainPlayerBlipId = void 0;
exports.getObjectIndexFromEntityIndex = exports.getObjectFragmentDamageHealth = exports.getNumberResourcesAllocatedToWantedLevel = exports.getNumberOfVehicleNumberPlates = exports.getNumberOfVehicleDoors = exports.getNumberOfVehicleColours = exports.getNumberOfThreadsRunningTheScriptWithThisHash = exports.getNumberOfStreamingRequests = exports.getNumberOfPlayersInTeam = exports.getNumberOfPlayers = exports.getNumberOfPedTextureVariations = exports.getNumberOfPedPropTextureVariations = exports.getNumberOfPedPropDrawableVariations = exports.getNumberOfPedDrawableVariations = exports.getNumberOfFreeStacksOfThisSize = exports.getNumberOfFiresInRange = exports.getNumberOfEvents = exports.getNumberOfActiveBlips = exports.getNumVehicleWindowTints = exports.getNumVehicleMods = exports.getNumUnlockedRadioStations = exports.getNumTattooShopDlcItems = exports.getNumSuccessfulStuntJumps = exports.getNumReservedMissionVehicles = exports.getNumReservedMissionPeds = exports.getNumReservedMissionObjects = exports.getNumPedMakeupTints = exports.getNumPedHairTints = exports.getNumNavmeshesExistingInArea = exports.getNumModKits = exports.getNumModColors = exports.getNumDlcWeaponsSp = exports.getNumDlcWeapons = exports.getNumDlcWeaponComponentsSp = exports.getNumDlcWeaponComponents = exports.getNumDlcVehicles = exports.getNumCreatedMissionVehicles = exports.getNumCreatedMissionPeds = exports.getNumCreatedMissionObjects = exports.getNumCommerceItems = exports.getNthClosestVehicleNodeWithHeading = exports.getNthClosestVehicleNodeIdWithHeading = exports.getNthClosestVehicleNodeId = exports.getNthClosestVehicleNodeFavourDirection = exports.getNthClosestVehicleNode = exports.getNorthBlidIndex = exports.getNoLoadingScreen = exports.getNextWeatherTypeHashName = exports.getNextGpsDisabledZoneIndex = exports.getNextBlipInfoId = void 0;
exports.getPedHelmetStoredHatTexIndex = exports.getPedHelmetStoredHatPropIndex = exports.getPedHeadOverlayNum = exports.getPedHeadOverlay = exports.getPedHeadBlendNumHeads = exports.getPedHeadBlendFirstIndex = exports.getPedHeadBlendData = exports.getPedHairTintColor = exports.getPedGroupIndex = exports.getPedExtractedDisplacement = exports.getPedEnveffScale = exports.getPedEmissiveScale = exports.getPedDrawableVariation = exports.getPedDiesInWater = exports.getPedDesiredMoveBlendRatio = exports.getPedDefensiveAreaPosition = exports.getPedDecorationsState = exports.getPedDecorationZoneFromHashes = exports.getPedCurrentMoveBlendRatio = exports.getPedConfigFlag = exports.getPedCombatRange = exports.getPedCombatMovement = exports.getPedCauseOfDeath = exports.getPedBoneIndex = exports.getPedBoneCoords = exports.getPedAsGroupMember = exports.getPedAsGroupLeader = exports.getPedArmour = exports.getPedAmmoTypeFromWeapon = exports.getPedAmmoByType = exports.getPedAlertness = exports.getPedAccuracy = exports.getPauseMenuState = exports.getPauseMenuPosition = exports.getPatrolTaskInfo = exports.getPackedTuIntStatKey = exports.getPackedStatIntCode = exports.getPackedStatBoolCode = exports.getPackedNgIntStatKey = exports.getPackedIntStatKey = exports.getOwnerOfExplosionInSphere = exports.getOwnerOfExplosionInAngledArea = exports.getOutriggersDeployed = exports.getOnscreenKeyboardResult = exports.getOnlineVersion = exports.getOffsetFromInteriorInWorldCoords = exports.getOffsetFromEntityInWorldCoords = exports.getOffsetFromEntityGivenWorldCoords = exports.getOffsetFromCoordAndHeadingInWorldCoords = exports.getObjectTintIndex = void 0;
exports.getPlayerIndex = exports.getPlayerHealthRechargeMaxPercent = exports.getPlayerHasReserveParachute = exports.getPlayerHasDrivenAllVehicles = exports.getPlayerGroup = exports.getPlayerFakeWantedLevel = exports.getPlayerDebugInvincible = exports.getPlayerCurrentStealthNoise = exports.getPickupTypeFromWeaponHash = exports.getPickupObject = exports.getPickupGenerationRangeMultiplier = exports.getPickupCoords = exports.getPhoneGestureAnimTotalTime = exports.getPhoneGestureAnimCurrentTime = exports.getPedsJacker = exports.getPedheadshotTxdString = exports.getPedWeapontypeInSlot = exports.getPedWeaponTintIndex = exports.getPedWeaponComponentTintIndex = exports.getPedWeaponCamoIndex = exports.getPedWaypointProgress = exports.getPedWaypointDistance = exports.getPedVisualFieldCenterAngle = exports.getPedUsingVehicleDoor = exports.getPedType = exports.getPedTimeOfDeath = exports.getPedTextureVariation = exports.getPedTargetFromCombatPed = exports.getPedStealthMovement = exports.getPedSourceOfDeath = exports.getPedResetFlag = exports.getPedRelationshipGroupHash = exports.getPedRelationshipGroupDefaultHash = exports.getPedRagdollBoneIndex = exports.getPedPropTextureIndex = exports.getPedPropIndex = exports.getPedParachuteTintIndex = exports.getPedParachuteState = exports.getPedParachuteLandingType = exports.getPedPaletteVariation = exports.getPedOriginalAmmoTypeFromWeapon = exports.getPedNearbyVehicles = exports.getPedNearbyPeds = exports.getPedMoney = exports.getPedMaxHealth = exports.getPedMakeupTintColor = exports.getPedLastWeaponImpactCoord = exports.getPedLastDamageBone = exports.getPedIndexFromEntityIndex = exports.getPedInVehicleSeat = void 0;
exports.getRandomPedAtCoord = exports.getRandomMwcIntInRange = exports.getRandomIntInRange = exports.getRandomFloatInRange = exports.getRandomEventFlag = exports.getRainLevel = exports.getRadioStationName = exports.getProjectileOfProjectileTypeWithinDistance = exports.getProfileSetting = exports.getPrevWeatherTypeHashName = exports.getPosixTime = exports.getPositionOfVehicleRecordingIdAtTime = exports.getPositionOfVehicleRecordingAtTime = exports.getPositionInRecording = exports.getPositionBySideOfRoad = exports.getPosFromFiredEvent = exports.getPosAlongGpsTypeRoute = exports.getPointAreaOverlap = exports.getPmPlayerCrewColor = exports.getPlayersLastVehicle = exports.getPlayerWantedLevel = exports.getPlayerWantedCentrePosition = exports.getPlayerUnderwaterTimeRemaining = exports.getPlayerTeam = exports.getPlayerTargetEntity = exports.getPlayerSwitchType = exports.getPlayerSwitchState = exports.getPlayerSwitchJumpCutIndex = exports.getPlayerSwitchInterpOutDuration = exports.getPlayerSwitchInterpOutCurrentTime = exports.getPlayerSprintTimeRemaining = exports.getPlayerSprintStaminaRemaining = exports.getPlayerShortSwitchState = exports.getPlayerRgbColour = exports.getPlayerReserveParachuteTintIndex = exports.getPlayerReserveParachuteModelOverride = exports.getPlayerReceivedBattleEventRecently = exports.getPlayerRadioStationName = exports.getPlayerRadioStationIndex = exports.getPlayerRadioStationGenre = exports.getPlayerPedScriptIndex = exports.getPlayerPedIsFollowing = exports.getPlayerPed = exports.getPlayerParachuteTintIndex = exports.getPlayerParachuteSmokeTrailColor = exports.getPlayerParachutePackTintIndex = exports.getPlayerParachuteModelOverride = exports.getPlayerName = exports.getPlayerMaxArmour = exports.getPlayerInvincible = void 0;
exports.getShopPedApparelVariantComponentCount = exports.getShopPedApparelForcedPropCount = exports.getShopPedApparelForcedComponentCount = exports.getShapeTestResultIncludingMaterial = exports.getShapeTestResult = exports.getSequenceProgress = exports.getSelectedPedWeapon = exports.getSeatPedIsTryingToEnter = exports.getScriptedCoverPointCoords = exports.getScriptTaskStatus = exports.getScriptGfxAlignPosition = exports.getScreenblurFadeCurrentTime = exports.getScreenResolution = exports.getScreenCoordFromWorldCoord = exports.getScreenCodeWantsScriptToControl = exports.getScreenAspectRatio = exports.getScaleformMovieMethodReturnValueString = exports.getScaleformMovieMethodReturnValueInt = exports.getScaleformMovieMethodReturnValueBool = exports.getSaveHouseDetailsAfterSuccessfulLoad = exports.getSafeZoneSize = exports.getSafePickupCoords = exports.getSafeCoordForPed = exports.getRotationOfVehicleRecordingIdAtTime = exports.getRotationOfVehicleRecordingAtTime = exports.getRopeVertexCount = exports.getRopeVertexCoord = exports.getRopeLastVertexCoord = exports.getRoomKeyFromEntity = exports.getRoomKeyForGameViewport = exports.getRoadBoundaryUsingHeading = exports.getReservedMissionEntitiesInArea = exports.getRequestingnightvision = exports.getReplayStatMissionType = exports.getReplayStatMissionId = exports.getReplayStatCount = exports.getReplayStatAtIndex = exports.getRenderingCam = exports.getRenderedCharacterHeight = exports.getRelationshipBetweenPeds = exports.getRelationshipBetweenGroups = exports.getRealWorldTime = exports.getRayfireMapObjectAnimPhase = exports.getRayfireMapObject = exports.getRatioOfClosestPointOnLine = exports.getRandomVehicleNode = exports.getRandomVehicleModelInMemory = exports.getRandomVehicleInSphere = exports.getRandomVehicleFrontBumperInSphere = exports.getRandomVehicleBackBumperInSphere = void 0;
exports.getTextureResolution = exports.getTennisSwingAnimSwung = exports.getTennisSwingAnimComplete = exports.getTennisSwingAnimCanBeInterrupted = exports.getTattooShopDlcItemIndex = exports.getTattooShopDlcItemData = exports.getTaskRappelDownWallState = exports.getTaskMoveNetworkState = exports.getTaskMoveNetworkSignalFloat = exports.getTaskMoveNetworkSignalBool = exports.getTaskMoveNetworkEvent = exports.getSystemTimeStep = exports.getSynchronizedSceneRate = exports.getSynchronizedScenePhase = exports.getSubmarineNumberOfAirLeaks = exports.getSubmarineIsUnderDesignDepth = exports.getStreetNameFromHashKey = exports.getStreetNameAtCoord = exports.getStreamPlayTime = exports.getStatusOfTextureDownload = exports.getStatusOfTakeMissionCreatorPhoto = exports.getStatusOfTakeHighQualityPhoto = exports.getStatusOfSortedListOperation = exports.getStatusOfSaveHighQualityPhoto = exports.getStatusOfMissionRepeatSave = exports.getStatusOfManualSave = exports.getStatusOfLoadMissionCreatorPhoto = exports.getStatusOfCreateMissionCreatorPhotoPreview = exports.getStatusOfCreateLowQualityCopyOfPhoto = exports.getStateOfRayfireMapObject = exports.getStateOfClosestDoorOfType = exports.getStatHashForCharacterStat = exports.getStandardBlipEnumId = exports.getSpawnCoordsForVehicleNode = exports.getSoundIdFromNetworkId = exports.getSoundId = exports.getSnowLevel = exports.getSizeOfSaveData = exports.getShopPedQueryPropIndex = exports.getShopPedQueryProp = exports.getShopPedQueryOutfit = exports.getShopPedQueryComponentIndex = exports.getShopPedQueryComponent = exports.getShopPedProp = exports.getShopPedOutfitPropVariant = exports.getShopPedOutfitLocate = exports.getShopPedOutfitComponentVariant = exports.getShopPedOutfit = exports.getShopPedComponent = exports.getShopPedApparelVariantPropCount = void 0;
exports.getVehicleColours = exports.getVehicleColourCombination = exports.getVehicleColor = exports.getVehicleClassMaxTraction = exports.getVehicleClassMaxBraking = exports.getVehicleClassMaxAgility = exports.getVehicleClassMaxAcceleration = exports.getVehicleClassFromName = exports.getVehicleClassEstimatedMaxSpeed = exports.getVehicleClass = exports.getVehicleCauseOfDestruction = exports.getVehicleCanDeployParachute = exports.getVehicleBombAmmo = exports.getVehicleBodyHealth = exports.getVehicleAttachedToCargobob = exports.getVehicleAcceleration = exports.getVariationChosenForScriptedLine = exports.getVariantProp = exports.getVariantComponent = exports.getUtcTime = exports.getUsingseethrough = exports.getUsingnightvision = exports.getUserStarterAccess = exports.getUserPremiumAccess = exports.getUsedCreatorBudget = exports.getTyreWearRate = exports.getTyreHealth = exports.getTvVolume = exports.getTvChannel = exports.getTrainCarriage = exports.getTrackedPedPixelcount = exports.getTotalSuccessfulStuntJumps = exports.getTotalDurationOfVehicleRecordingId = exports.getTotalDurationOfVehicleRecording = exports.getTogglePausedRenderphasesStatus = exports.getTintIndexForLastGenHairTexture = exports.getTimecycleTransitionModifierIndex = exports.getTimecycleModifierIndex = exports.getTimeSincePlayerHitVehicle = exports.getTimeSincePlayerHitPed = exports.getTimeSincePlayerDroveOnPavement = exports.getTimeSincePlayerDroveAgainstTraffic = exports.getTimeSinceLastDeath = exports.getTimeSinceLastArrest = exports.getTimePositionInRecording = exports.getTimePedDamagedByWeapon = exports.getTimeOffset = exports.getTimeDifference = exports.getTimeAsString = exports.getThisScriptName = void 0;
exports.getVehicleModModifierValue = exports.getVehicleModKitType = exports.getVehicleModKit = exports.getVehicleModIdentifierHash = exports.getVehicleModColor2Name = exports.getVehicleModColor2 = exports.getVehicleModColor1Name = exports.getVehicleModColor1 = exports.getVehicleMod = exports.getVehicleMaxTraction = exports.getVehicleMaxNumberOfPassengers = exports.getVehicleMaxBraking = exports.getVehicleLockOnTarget = exports.getVehicleLiveryCount = exports.getVehicleLivery2Count = exports.getVehicleLivery2 = exports.getVehicleLivery = exports.getVehicleLightsState = exports.getVehicleLayoutHash = exports.getVehicleIsMercenary = exports.getVehicleIsDummy = exports.getVehicleIndividualDoorLockStatus = exports.getVehicleIndexFromEntityIndex = exports.getVehicleHornSoundIndex = exports.getVehicleHomingLockonState = exports.getVehicleHomingLockedontoState = exports.getVehicleHealthPercentage = exports.getVehicleHasParachute = exports.getVehicleHasLandingGear = exports.getVehicleHasKers = exports.getVehicleFlightNozzlePosition = exports.getVehicleExtraColours = exports.getVehicleExtraColour6 = exports.getVehicleExtraColour5 = exports.getVehicleEstimatedMaxSpeed = exports.getVehicleEnveffScale = exports.getVehicleEngineHealth = exports.getVehicleDoorsLockedForPlayer = exports.getVehicleDoorLockStatus = exports.getVehicleDoorAngleRatio = exports.getVehicleDirtLevel = exports.getVehicleDeformationAtPos = exports.getVehicleDefaultHornIgnoreMods = exports.getVehicleDefaultHorn = exports.getVehicleCustomSecondaryColour = exports.getVehicleCustomPrimaryColour = exports.getVehicleCurrentTimeInSlipStream = exports.getVehicleCrewEmblemRequestState = exports.getVehicleCountermeasureAmmo = exports.getVehicleColoursWhichCanBeSet = void 0;
exports.getWeaponComponentVariantExtraCount = exports.getWeaponComponentTypeModel = exports.getWeaponComponentHudStats = exports.getWeaponClipSize = exports.getWaypointDistanceAlongRoute = exports.getWaypointBlipEnumId = exports.getWaterHeightNoWaves = exports.getWaterHeight = exports.getWarningScreenMessageHash = exports.getWantedLevelTimeToEscape = exports.getWantedLevelThreshold = exports.getWantedLevelRadius = exports.getVehicleXenonLightColorIndex = exports.getVehicleWindowTint = exports.getVehicleWheelType = exports.getVehicleWeaponRestrictedAmmo = exports.getVehicleWaypointTargetPoint = exports.getVehicleWaypointProgress = exports.getVehicleTyresCanBurst = exports.getVehicleTyreSmokeColor = exports.getVehicleTrailerVehicle = exports.getVehicleTrailerParentVehicle = exports.getVehicleSize = exports.getVehicleRecordingId = exports.getVehiclePlateType = exports.getVehiclePetrolTankHealth = exports.getVehiclePedIsUsing = exports.getVehiclePedIsTryingToEnter = exports.getVehiclePedIsIn = exports.getVehiclePedIsEntering = exports.getVehicleNumberPlateTextIndex = exports.getVehicleNumberPlateText = exports.getVehicleNumberOfPassengers = exports.getVehicleNumOfBrokenOffParts = exports.getVehicleNumOfBrokenLoosenParts = exports.getVehicleNodeProperties = exports.getVehicleNodePosition = exports.getVehicleNodeIsSwitchedOff = exports.getVehicleNodeIsGpsAllowed = exports.getVehicleNeonEnabled = exports.getVehicleNeonColour = exports.getVehicleModelValue = exports.getVehicleModelNumberOfSeats = exports.getVehicleModelMaxTraction = exports.getVehicleModelMaxBrakingMaxMods = exports.getVehicleModelMaxBraking = exports.getVehicleModelEstimatedMaxSpeed = exports.getVehicleModelAccelerationMaxMods = exports.getVehicleModelAcceleration = exports.getVehicleModVariation = void 0;
exports.hasActionModeAssetLoaded = exports.hasAchievementBeenPassed = exports.hardAttachCamToPedBone = exports.hardAttachCamToEntity = exports.grassbatchEnableFlatteningInSphere = exports.grassbatchEnableFlatteningExtInSphere = exports.grassbatchDisableFlattening = exports.grabPausemenuOwnership = exports.golfTrailSetTessellation = exports.golfTrailSetShaderParams = exports.golfTrailSetRadius = exports.golfTrailSetPath = exports.golfTrailSetFixedControlPointEnable = exports.golfTrailSetFixedControlPoint = exports.golfTrailSetFacing = exports.golfTrailSetEnabled = exports.golfTrailSetColour = exports.golfTrailGetVisualControlPoint = exports.golfTrailGetMaxHeight = exports.giveWeaponToPed = exports.giveWeaponObjectToPed = exports.giveWeaponComponentToWeaponObject = exports.giveWeaponComponentToPed = exports.givePlayerRagdollControl = exports.givePedToPauseMenu = exports.givePedNmMessage = exports.givePedHelmet = exports.giveLoadoutToPed = exports.giveDelayedWeaponToPed = exports.giveAchievementToPlayer = exports.getZoneScumminess = exports.getZonePopschedule = exports.getZoneFromNameId = exports.getZoneAtCoords = exports.getWorldPositionOfEntityBone = exports.getWindSpeed = exports.getWindDirection = exports.getWeapontypeSlot = exports.getWeapontypeModel = exports.getWeapontypeGroup = exports.getWeaponTypeFromPickupType = exports.getWeaponTintCount = exports.getWeaponTimeBetweenShots = exports.getWeaponObjectTintIndex = exports.getWeaponObjectFromPed = exports.getWeaponObjectComponentTintIndex = exports.getWeaponHudStats = exports.getWeaponDamageType = exports.getWeaponDamage = exports.getWeaponComponentVariantExtraModel = void 0;
exports.hasPedheadshotImgUploadFailed = exports.hasPedReceivedEvent = exports.hasPedPreloadVariationDataFinished = exports.hasPedPreloadPropDataFinished = exports.hasPedHeadBlendFinished = exports.hasPedGotWeaponComponent = exports.hasPedGotWeapon = exports.hasPedBeenDamagedByWeapon = exports.hasPcCheatWithHashBeenActivated = exports.hasObjectBeenBroken = exports.hasNetworkTimeStarted = exports.hasNamedPtfxAssetLoaded = exports.hasModelLoaded = exports.hasMenuTriggerEventOccurred = exports.hasMenuLayoutChangedEventOccurred = exports.hasLoadedSpDataSet = exports.hasLoadedMpDataSet = exports.hasInstantFillVehiclePopulationFinished = exports.hasGameInstalledThisSession = exports.hasForceCleanupOccurred = exports.hasEntityCollidedWithAnything = exports.hasEntityClearLosToEntityInFront = exports.hasEntityClearLosToEntityAdjustForCover = exports.hasEntityClearLosToEntity = exports.hasEntityBeenDamagedByWeapon = exports.hasEntityBeenDamagedByEntity = exports.hasEntityBeenDamagedByAnyVehicle = exports.hasEntityBeenDamagedByAnyPed = exports.hasEntityBeenDamagedByAnyObject = exports.hasEntityAnimFinished = exports.hasDirectorModeBeenLaunchedByCode = exports.hasCutsceneLoaded = exports.hasCutsceneFinished = exports.hasCutsceneCutThisFrame = exports.hasCutFileLoaded = exports.hasCollisionLoadedAroundEntity = exports.hasCollisionForModelLoaded = exports.hasCodeRequestedAutosave = exports.hasCloudRequestsFinished = exports.hasClosestObjectOfTypeBeenCompletelyDestroyed = exports.hasClosestObjectOfTypeBeenBroken = exports.hasClipSetLoaded = exports.hasCheatWithHashBeenActivated = exports.hasBulletImpactedInBox = exports.hasBulletImpactedInArea = exports.hasAsyncInstallFinished = exports.hasAnimSetLoaded = exports.hasAnimEventFired = exports.hasAnimDictLoaded = exports.hasAdditionalTextLoaded = void 0;
exports.hintAmbientAudioBank = exports.hideTombstone = exports.hideStreetAndCarNamesThisFrame = exports.hideScriptedHudComponentThisFrame = exports.hidePortablePickupWhenDetached = exports.hidePedWeaponForScriptedCutscene = exports.hidePedBloodDamageByZone = exports.hideNumberOnBlip = exports.hideMinimapInteriorMapThisFrame = exports.hideMinimapExteriorMapThisFrame = exports.hideLoadingOnFadeThisFrame = exports.hideHudmarkersThisFrame = exports.hideHudComponentThisFrame = exports.hideHudAndRadarThisFrame = exports.hideHelpTextThisFrame = exports.haveVehicleRearDoorsBeenBlownOpenByStickybomb = exports.haveVehicleModsStreamedIn = exports.haveReplayStatsBeenStored = exports.haveCreditsReachedEnd = exports.haveControlsChanged = exports.haveAllStreamingRequestsCompleted = exports.hasWeaponGotWeaponComponent = exports.hasWeaponAssetLoaded = exports.hasVehicleRecordingBeenLoaded = exports.hasVehiclePhoneExplosiveDevice = exports.hasVehiclePetroltankSetOnFireByEntity = exports.hasVehicleGotProjectileAttached = exports.hasVehicleAssetLoaded = exports.hasVcWithdrawalCompleted = exports.hasThisCutsceneLoaded = exports.hasThisAdditionalTextLoaded = exports.hasStreamedTextureDictLoaded = exports.hasStealthModeAssetLoaded = exports.hasSoundFinished = exports.hasScriptWithNameHashLoaded = exports.hasScriptLoaded = exports.hasScriptHiddenHelpThisFrame = exports.hasScaleformScriptHudMovieLoaded = exports.hasScaleformMovieLoaded = exports.hasScaleformMovieFilenameLoaded = exports.hasScaleformContainerMovieLoadedIntoParent = exports.hasResumedFromSuspend = exports.hasPtfxAssetLoaded = exports.hasPreloadModsFinished = exports.hasPlayerLeftTheWorld = exports.hasPlayerDamagedAtLeastOnePed = exports.hasPlayerDamagedAtLeastOneNonAnimalPed = exports.hasPlayerBeenSpottedInStolenVehicle = exports.hasPickupBeenCollected = exports.hasPedheadshotImgUploadSucceeded = void 0;
exports.isAnyPedRappellingFromHeli = exports.isAnyPedNearPoint = exports.isAnyObjectNearPoint = exports.isAnyHostilePedNearPoint = exports.isAnyEntityEntirelyInsideGarage = exports.isAnyEntityAttachedToHandlerFrame = exports.isAnimalVocalizationPlaying = exports.isAnEntity = exports.isAmbientZoneEnabled = exports.isAmbientSpeechPlaying = exports.isAmbientSpeechDisabled = exports.isAllowedIndependentCameraModes = exports.isAlarmPlaying = exports.isAirDefenceSphereInArea = exports.isAimCamActiveInAccurateMode = exports.isAimCamActive = exports.isActiveScaleformMovieDeleting = exports.iplGroupSwapStart = exports.iplGroupSwapIsReady = exports.iplGroupSwapIsActive = exports.iplGroupSwapFinish = exports.iplGroupSwapCancel = exports.invalidateIdleCam = exports.invalidateCinematicVehicleIdleMode = exports.interruptConversationAndPause = exports.interruptConversation = exports.intToPlayerindex = exports.intToParticipantindex = exports.instantlyFillVehiclePopulation = exports.instantlyFillPedPopulation = exports.initSynchSceneAudioWithPosition = exports.initSynchSceneAudioWithEntity = exports.initShopPedProp = exports.initShopPedComponent = exports.initPcScriptedControls = exports.initCreatorBudget = exports.informCodeOfContentIdOfCurrentUgcMission = exports.increasePlayerJumpSuppressionRange = exports.ignoreNextRestart = exports.ignoreMenuPreferenceForBonnetCameraThisUpdate = exports.hudSuppressWeaponWheelResultsThisFrame = exports.hudShowingCharacterSwitchSelection = exports.hudSetWeaponWheelTopSlot = exports.hudGetWeaponWheelTopSlot = exports.hudGetWeaponWheelCurrentlyHighlighted = exports.hudForceWeaponWheel = exports.hudForceSpecialVehicleWeaponWheel = exports.hiredLimo = exports.hintScriptAudioBank = exports.hintMissionAudioBank = void 0;
exports.isCutscenePlaybackFlagSet = exports.isCutsceneAuthorized = exports.isCutsceneActive = exports.isCurrentHeadPropAHelmet = exports.isCopVehicleInArea3d = exports.isCopPedInArea3d = exports.isConversationPedDead = exports.isControlledVehicleUnableToGetToRoad = exports.isControlReleased = exports.isControlPressed = exports.isControlJustReleased = exports.isControlJustPressed = exports.isControlEnabled = exports.isContentItemLocked = exports.isCommerceStoreOpen = exports.isCommerceDataValid = exports.isCommerceDataFetchInProgress = exports.isCommandlineEndUserBenchmark = exports.isCollisionMarkedOutside = exports.isCodeGameplayHintActive = exports.isCinematicShotActive = exports.isCinematicIdleCamRendering = exports.isCinematicFirstPersonVehicleInteriorCamRendering = exports.isCinematicCamShaking = exports.isCinematicCamRendering = exports.isCinematicCamInputActive = exports.isCamSplinePaused = exports.isCamShaking = exports.isCamRendering = exports.isCamPlayingAnim = exports.isCamInterpolating = exports.isCamActive = exports.isBulletInBox = exports.isBulletInArea = exports.isBulletInAngledArea = exports.isBonnetCinematicCamRendering = exports.isBoatAnchored = exports.isBlipShortRange = exports.isBlipOnMinimap = exports.isBlipFlashing = exports.isBigVehicle = exports.isAutoSaveInProgress = exports.isAussieVersion = exports.isAudioSceneActive = exports.isAreaOccupiedSlow = exports.isAreaOccupied = exports.isAnyVehicleNearPoint = exports.isAnySpeechPlaying = exports.isAnyPositionalSpeechPlaying = exports.isAnyPedShootingInArea = void 0;
exports.isExplosionInAngledArea = exports.isExplosionActiveInArea = exports.isEntryPointForSeatClear = exports.isEntityWaitingForWorldCollision = exports.isEntityVisibleToScript = exports.isEntityVisible = exports.isEntityUpsidedown = exports.isEntityUpright = exports.isEntityTouchingModel = exports.isEntityTouchingEntity = exports.isEntityStatic = exports.isEntityPlayingAnim = exports.isEntityOnScreen = exports.isEntityOnFire = exports.isEntityOccluded = exports.isEntityInZone = exports.isEntityInWater = exports.isEntityInGhostCollision = exports.isEntityInArea = exports.isEntityInAngledArea = exports.isEntityInAir = exports.isEntityFocus = exports.isEntityDead = exports.isEntityAttachedToHandlerFrame = exports.isEntityAttachedToEntity = exports.isEntityAttachedToAnyVehicle = exports.isEntityAttachedToAnyPed = exports.isEntityAttachedToAnyObject = exports.isEntityAttached = exports.isEntityAtEntity = exports.isEntityAtCoord = exports.isEntityAnObject = exports.isEntityAVehicle = exports.isEntityAPed = exports.isEntityAMissionEntity = exports.isEntityAGhost = exports.isDurangoVersion = exports.isDrivebyTaskUnderneathDrivingTask = exports.isDoorRegisteredWithSystem = exports.isDoorClosed = exports.isDlcVehicleMod = exports.isDlcPresent = exports.isDisabledControlReleased = exports.isDisabledControlPressed = exports.isDisabledControlJustReleased = exports.isDisabledControlJustPressed = exports.isDecalAlive = exports.isDamageTrackerActiveOnPlayer = exports.isDamageTrackerActiveOnNetworkId = exports.isCutscenePlaying = void 0;
exports.isMissionNewsStoryUnlocked = exports.isMissionCreatorBlip = exports.isMissionCompleteReadyForUi = exports.isMissionCompletePlaying = exports.isMinimapRendering = exports.isMinigameInProgress = exports.isMessageBeingDisplayed = exports.isMemoryCardInUse = exports.isLookInverted = exports.isJapaneseVersion = exports.isItemsetValid = exports.isIplActive = exports.isInterpolatingToScriptCams = exports.isInterpolatingFromScriptCams = exports.isInteriorScene = exports.isInteriorReady = exports.isInteriorEntitySetActive = exports.isInteriorDisabled = exports.isInteriorCapped = exports.isIncidentValid = exports.isInVehicleMobilePhoneCameraRendering = exports.isInItemset = exports.isImeInProgress = exports.isHudPreferenceSwitchedOn = exports.isHudHidden = exports.isHudComponentActive = exports.isHoveringOverMissionCreatorBlip = exports.isHornActive = exports.isHelpMessageOnScreen = exports.isHelpMessageFadingOut = exports.isHelpMessageBeingDisplayed = exports.isHeliPartBroken = exports.isHeliLandingAreaBlocked = exports.isHandlerFrameLinedUpWithContainer = exports.isGarageEmpty = exports.isGameplayHintActive = exports.isGameplayCamShaking = exports.isGameplayCamRendering = exports.isGameplayCamLookingBehind = exports.isGameInControlOfMusic = exports.isFrontendReadyForControl = exports.isFrontendFading = exports.isFollowVehicleCamActive = exports.isFollowPedCamActive = exports.isFloatingHelpTextOnScreen = exports.isFlashLightOn = exports.isFirstPersonAimCamActive = exports.isExtraBrokenOff = exports.isExplosionInSphere = exports.isExplosionInArea = void 0;
exports.isPedArmed = exports.isPedAimingFromCover = exports.isPedActiveInScenario = exports.isPedAPlayer = exports.isPcVersion = exports.isPausemapInInteriorMode = exports.isPauseMenuRestarting = exports.isPauseMenuActive = exports.isOrbisVersion = exports.isOnlinePoliciesMenuActive = exports.isObjectWithinBrainActivationRange = exports.isObjectVisible = exports.isObjectPartiallyInsideGarage = exports.isObjectNearPoint = exports.isObjectEntirelyInsideGarage = exports.isObjectAPortablePickup = exports.isObjectAPickup = exports.isNextWeatherType = exports.isNewLoadSceneLoaded = exports.isNewLoadSceneActive = exports.isNetworkVehicleRunningRespotTimer = exports.isNetworkLoadingScene = exports.isNetworkIdOwnedByParticipant = exports.isNavmeshRequiredRegionInUse = exports.isNavmeshLoadedInArea = exports.isNavigatingMenuContent = exports.isNamedRendertargetRegistered = exports.isNamedRendertargetLinked = exports.isMusicOneshotPlaying = exports.isMultiheadFadeUp = exports.isMpTextChatTyping = exports.isMpGamerTagMovieActive = exports.isMpGamerTagFree = exports.isMpGamerTagActive = exports.isMoveBlendRatioWalking = exports.isMoveBlendRatioStill = exports.isMoveBlendRatioSprinting = exports.isMoveBlendRatioRunning = exports.isMouseRolledOverInstructionalButtons = exports.isMouseLookInverted = exports.isMountedWeaponTaskUnderneathDrivingTask = exports.isModelValid = exports.isModelInCdimage = exports.isModelAVehicle = exports.isModelAPed = exports.isMobilePhoneToPedEar = exports.isMobilePhoneRadioActive = exports.isMobilePhoneCallOngoing = exports.isMobileInterferenceActive = exports.isMissionTrain = void 0;
exports.isPedInFlyingVehicle = exports.isPedInCurrentConversation = exports.isPedInCoverFacingLeft = exports.isPedInCover = exports.isPedInCombat = exports.isPedInAnyVehicle = exports.isPedInAnyTrain = exports.isPedInAnyTaxi = exports.isPedInAnySub = exports.isPedInAnyPoliceVehicle = exports.isPedInAnyPlane = exports.isPedInAnyHeli = exports.isPedInAnyBoat = exports.isPedHurt = exports.isPedHuman = exports.isPedHelmetVisorUp = exports.isPedHeadtrackingPed = exports.isPedHeadtrackingEntity = exports.isPedHeadingTowardsPosition = exports.isPedHangingOnToVehicle = exports.isPedHairTintForCreator = exports.isPedHairTintForBarber = exports.isPedGroupMember = exports.isPedGoingIntoCover = exports.isPedGettingUp = exports.isPedGettingIntoAVehicle = exports.isPedGesturing = exports.isPedFleeing = exports.isPedFatallyInjured = exports.isPedFalling = exports.isPedFacingPed = exports.isPedExclusiveDriverOfVehicle = exports.isPedEvasiveDiving = exports.isPedDucking = exports.isPedDoingDriveby = exports.isPedDoingABeastJump = exports.isPedDiving = exports.isPedDefensiveAreaActive = exports.isPedDeadOrDying = exports.isPedCurrentWeaponSilenced = exports.isPedCuffed = exports.isPedComponentVariationValid = exports.isPedClimbing = exports.isPedBlushTintForCreator = exports.isPedBlushTintForBarber = exports.isPedBlushFacepaintTintForBarber = exports.isPedBeingStunned = exports.isPedBeingStealthKilled = exports.isPedBeingJacked = exports.isPedBeingArrested = void 0;
exports.isPedSwitchingWeapon = exports.isPedSwimmingUnderWater = exports.isPedSwimming = exports.isPedStrafing = exports.isPedStopped = exports.isPedStill = exports.isPedSprinting = exports.isPedSittingInVehicle = exports.isPedSittingInAnyVehicle = exports.isPedShootingInArea = exports.isPedShooting = exports.isPedSheltered = exports.isPedShaderReady = exports.isPedRunningRagdollTask = exports.isPedRunningMobilePhoneTask = exports.isPedRunningMeleeTask = exports.isPedRunningArrestTask = exports.isPedRunning = exports.isPedRingtonePlaying = exports.isPedRespondingToEvent = exports.isPedReloading = exports.isPedRagdoll = exports.isPedProne = exports.isPedPlayingBaseClipInScenario = exports.isPedPlantingBomb = exports.isPedPerformingStealthKill = exports.isPedPerformingMeleeAction = exports.isPedPerformingACounterAttack = exports.isPedOpeningDoor = exports.isPedOnVehicle = exports.isPedOnSpecificVehicle = exports.isPedOnMount = exports.isPedOnFoot = exports.isPedOnAnyBike = exports.isPedModel = exports.isPedMale = exports.isPedLipstickTintForCreator = exports.isPedLipstickTintForBarber = exports.isPedLanding = exports.isPedJumpingOutOfVehicle = exports.isPedJumping = exports.isPedJacking = exports.isPedInjured = exports.isPedInWrithe = exports.isPedInVehicle = exports.isPedInParachuteFreeFall = exports.isPedInModel = exports.isPedInMeleeCombat = exports.isPedInHighCover = exports.isPedInGroup = void 0;
exports.isPopMultiplierAreaNetworked = exports.isPointOnRoad = exports.isPointObscuredByAMissionEntity = exports.isPointInAngledArea = exports.isPlaylistOnChannel = exports.isPlayingPhoneGestureAnim = exports.isPlayerWantedLevelGreater = exports.isPlayerVehicleWeaponToggledToNonHoming = exports.isPlayerVehRadioEnable = exports.isPlayerTeleportActive = exports.isPlayerTargettingEntity = exports.isPlayerTargettingAnything = exports.isPlayerSwitchInProgress = exports.isPlayerScriptControlOn = exports.isPlayerRidingTrain = exports.isPlayerReadyForCutscene = exports.isPlayerPressingHorn = exports.isPlayerPlaying = exports.isPlayerPartiallyInsideGarage = exports.isPlayerOnline = exports.isPlayerLoggingInNp = exports.isPlayerInCutscene = exports.isPlayerFreeForAmbientTask = exports.isPlayerFreeAimingAtEntity = exports.isPlayerFreeAiming = exports.isPlayerEntirelyInsideGarage = exports.isPlayerDead = exports.isPlayerControlOn = exports.isPlayerClimbing = exports.isPlayerBluetoothEnable = exports.isPlayerBeingArrested = exports.isPlayerBattleAware = exports.isPlaybackUsingAiGoingOnForVehicle = exports.isPlaybackGoingOnForVehicle = exports.isPlaneLandingGearIntact = exports.isPickupWeaponObjectValid = exports.isPedheadshotValid = exports.isPedheadshotReady = exports.isPedheadshotImgUploadAvailable = exports.isPedWearingHelmet = exports.isPedWeaponReadyToShoot = exports.isPedWeaponComponentActive = exports.isPedWalking = exports.isPedVaulting = exports.isPedUsingScenario = exports.isPedUsingAnyScenario = exports.isPedUsingActionMode = exports.isPedTryingToEnterALockedVehicle = exports.isPedTracked = exports.isPedTakingOffHelmet = void 0;
exports.isSpecialAbilityMeterFull = exports.isSpecialAbilityEnabled = exports.isSpecialAbilityActive = exports.isSocialClubActive = exports.isSniperInverted = exports.isSniperBulletInArea = exports.isShockingEventInSphere = exports.isSeatWarpOnly = exports.isScriptedSpeechPlaying = exports.isScriptedScenarioPedUsingConditionalAnim = exports.isScriptedHudComponentHiddenThisFrame = exports.isScriptedHudComponentActive = exports.isScriptedConversationOngoing = exports.isScriptedConversationLoaded = exports.isScriptGlobalShaking = exports.isScreenblurFadeRunning = exports.isScreenFadingOut = exports.isScreenFadingIn = exports.isScreenFadedOut = exports.isScreenFadedIn = exports.isScenarioTypeEnabled = exports.isScenarioOccupied = exports.isScenarioGroupEnabled = exports.isScePlatform = exports.isScarlettVersion = exports.isScaleformMovieMethodReturnValueReady = exports.isScaleformMovieDeleting = exports.isSafeToStartPlayerSwitch = exports.isRopeAttachedAtBothEnds = exports.isRocketBoostActive = exports.isReportugcMenuOpen = exports.isReplayRecording = exports.isReplayRecordSpaceAvailable = exports.isReplayInitialized = exports.isReplayAvailable = exports.isRemotePlayerInNonClonedVehicle = exports.isRadioStationFavourited = exports.isRadioRetuning = exports.isRadioFadedOut = exports.isRadarPreferenceSwitchedOn = exports.isRadarHidden = exports.isPs3Version = exports.isProsperoVersion = exports.isPropLightOverriden = exports.isProjectileTypeWithinDistance = exports.isProjectileTypeInArea = exports.isProjectileTypeInAngledArea = exports.isProjectileInArea = exports.isPrevWeatherType = exports.isPositionOccupied = void 0;
exports.isUpdatingMpGamerTagNameAndCrewDetails = exports.isTvshowCurrentlyPlaying = exports.isTurretSeat = exports.isTrackedPointVisible = exports.isTrackedPedVisible = exports.isToggleModOn = exports.isTimeMoreThan = exports.isTimeLessThan = exports.isTimeEqualTo = exports.isThreadActive = exports.isThisModelAnAmphibiousQuadbike = exports.isThisModelAnAmphibiousCar = exports.isThisModelATrain = exports.isThisModelAQuadbike = exports.isThisModelAPlane = exports.isThisModelAJetski = exports.isThisModelAHeli = exports.isThisModelACar = exports.isThisModelABoat = exports.isThisModelABike = exports.isThisModelABicycle = exports.isThisAMinigameScript = exports.isTennisMode = exports.isTaxiLightOn = exports.isTaskMoveNetworkReadyForTransition = exports.isTaskMoveNetworkActive = exports.isTargetPedInPerceptionArea = exports.isSystemUiBeingDisplayed = exports.isSynchronizedSceneRunning = exports.isSynchronizedSceneLooped = exports.isSynchronizedSceneHoldLastFrame = exports.isSwitchToMultiFirstpartFinished = exports.isSwitchSkippingDescent = exports.isSwitchReadyForDescent = exports.isSubtitlePreferenceSwitchedOn = exports.isStuntJumpMessageShowing = exports.isStuntJumpInProgress = exports.isStringNullOrEmpty = exports.isStringNull = exports.isStreamvolActive = exports.isStreamingAdditionalText = exports.isStreamPlaying = exports.isStorePendingNetworkShutdownToOpen = exports.isStoreAvailableToUser = exports.isSteamVersion = exports.isSrlLoaded = exports.isSphereVisibleToPlayer = exports.isSphereVisibleToAnotherMachine = exports.isSphereVisible = exports.isSpecialAbilityUnlocked = void 0;
exports.isWaypointPlaybackGoingOnForVehicle = exports.isWaypointPlaybackGoingOnForPed = exports.isWaypointActive = exports.isWarningMessageReadyForControl = exports.isWarningMessageActive = exports.isWantedAndHasBeenSeenByCops = exports.isVehicleWindowIntact = exports.isVehicleWeaponDisabled = exports.isVehicleVisible = exports.isVehicleTyreBurst = exports.isVehicleStuckTimerUp = exports.isVehicleStuckOnRoof = exports.isVehicleStoppedAtTrafficLights = exports.isVehicleStopped = exports.isVehicleStolen = exports.isVehicleSprayable = exports.isVehicleSirenOn = exports.isVehicleSirenAudioOn = exports.isVehicleSeatFree = exports.isVehicleSearchlightOn = exports.isVehicleRadioOn = exports.isVehicleProducingSlipStream = exports.isVehicleParachuteDeployed = exports.isVehicleOnAllWheels = exports.isVehicleNodeIdValid = exports.isVehicleModel = exports.isVehicleModGen9Exclusive = exports.isVehicleInSubmarineMode = exports.isVehicleInGarageArea = exports.isVehicleInBurnout = exports.isVehicleHighDetail = exports.isVehicleExtraTurnedOn = exports.isVehicleDriveable = exports.isVehicleDoorFullyOpen = exports.isVehicleDoorDamaged = exports.isVehicleBumperBrokenOff = exports.isVehicleBumperBouncing = exports.isVehicleBeingBroughtToHalt = exports.isVehicleAudiblyDamaged = exports.isVehicleAttachedToTrailer = exports.isVehicleAttachedToTowTruck = exports.isVehicleAttachedToCargobob = exports.isVehicleAlarmActivated = exports.isVehicleAConvertible = exports.isValidInterior = exports.isUsingRemotePlay = exports.isUsingPedScubaGearVariation = exports.isUsingKeyboardAndMouse = exports.isUsingCursor = exports.isUserOldEnoughToAccessStore = void 0;
exports.loadRopeData = exports.loadMovieMeshSet = exports.loadMissionCreatorPhoto = exports.loadHighQualityPhoto = exports.loadGlobalWaterFile = exports.loadCloudHat = exports.loadAllPathNodes = exports.loadAllObjectsNow = exports.linkStaticEmitterToEntity = exports.linkNamedRendertarget = exports.leaderboardsWriteAddColumnLong = exports.leaderboardsWriteAddColumn = exports.leaderboardsReadSuccessful = exports.leaderboardsReadPending = exports.leaderboardsReadClearAll = exports.leaderboardsReadClear = exports.leaderboardsReadAnyPending = exports.leaderboardsGetNumberOfColumns = exports.leaderboardsGetColumnType = exports.leaderboardsGetColumnId = exports.leaderboardsGetCacheTime = exports.leaderboardsGetCacheNumberOfRows = exports.leaderboardsGetCacheExists = exports.leaderboardsGetCacheDataRow = exports.leaderboardsClearCacheDataId = exports.leaderboardsClearCacheData = exports.leaderboardsCacheDataRow = exports.leaderboards2WriteDataForEventType = exports.leaderboards2WriteData = exports.leaderboards2ReadRankPrediction = exports.leaderboards2ReadGetRowDataStart = exports.leaderboards2ReadGetRowDataInt = exports.leaderboards2ReadGetRowDataInfo = exports.leaderboards2ReadGetRowDataFloat = exports.leaderboards2ReadGetRowDataEnd = exports.leaderboards2ReadFriendsByRow = exports.leaderboards2ReadByScoreInt = exports.leaderboards2ReadByScoreFloat = exports.leaderboards2ReadByRow = exports.leaderboards2ReadByRank = exports.leaderboards2ReadByRadius = exports.leaderboards2ReadByPlaform = exports.leaderboards2ReadByHandle = exports.landingScreenStartedEndUserBenchmark = exports.knockPedOffVehicle = exports.knockOffPedProp = exports.isXboxPlatform = exports.isXbox360Version = exports.isWorldPointWithinBrainActivationRange = exports.isWeaponValid = void 0;
exports.netGameserverIsSessionValid = exports.netGameserverIsSessionRefreshPending = exports.netGameserverIsCatalogCurrent = exports.netGameserverInitSession = exports.netGameserverGetSessionStateAndStatus = exports.netGameserverGetPrice = exports.netGameserverGetCatalogCloudCrc = exports.netGameserverEndService = exports.netGameserverDeleteSetTelemetryNonceSeed = exports.netGameserverDeleteCharacterGetStatus = exports.netGameserverDeleteCharacter = exports.netGameserverClearSession = exports.netGameserverCheckoutStart = exports.netGameserverCatalogItemKeyIsValid = exports.netGameserverCatalogItemIsValid = exports.netGameserverCatalogIsValid = exports.netGameserverBeginService = exports.netGameserverBasketStart = exports.netGameserverBasketIsFull = exports.netGameserverBasketIsActive = exports.netGameserverBasketEnd = exports.netGameserverBasketApplyServerData = exports.netGameserverBasketAddItem = exports.mpTextChatIsTeamJob = exports.mpTextChatDisable = exports.moveVehicleDecals = exports.modifyWater = exports.modifyVehicleTopSpeed = exports.markPedDecorationsAsClonedFromLocalPlayer = exports.makePedReload = exports.lowerForkliftForks = exports.lowerConvertibleRoof = exports.log10 = exports.lockRadioStationTrackList = exports.lockRadioStation = exports.lockMinimapPosition = exports.lockMinimapAngle = exports.lockDoorsWhenNoLongerNeeded = exports.localizationGetSystemLanguage = exports.localizationGetSystemDateType = exports.lobbySetAutoMultiplayerEvent = exports.lobbySetAutoMultiplayer = exports.lobbySetAutoMpRandomJob = exports.lobbyAutoMultiplayerRandomJob = exports.lobbyAutoMultiplayerMenu = exports.lobbyAutoMultiplayerFreemode = exports.lobbyAutoMultiplayerEvent = exports.loadStreamWithStartOffset = exports.loadStream = exports.loadScene = void 0;
exports.networkAllowRemoteSyncedSceneLocalPlayerRequests = exports.networkAllowRemoteAttachmentModification = exports.networkAllowInviteProcessInPlayerSwitch = exports.networkAllowGangToJoinTutorialSession = exports.networkAllowCloningWhileInTutorial = exports.networkAddSynchronisedSceneCamera = exports.networkAddPedToSynchronisedSceneWithIk = exports.networkAddPedToSynchronisedScene = exports.networkAddMapEntityToSynchronisedScene = exports.networkAddInvalidObjectModel = exports.networkAddFriend = exports.networkAddFollowers = exports.networkAddEntityToSynchronisedScene = exports.networkAddEntityArea = exports.networkAddEntityAngledArea = exports.networkAddClientEntityArea = exports.networkAddClientEntityAngledArea = exports.networkActionFollowInvite = exports.networkAccessTunableModificationDetectionClear = exports.networkAccessTunableIntModificationDetectionRegistrationHash = exports.networkAccessTunableIntHash = exports.networkAccessTunableInt = exports.networkAccessTunableFloatModificationDetectionRegistrationHash = exports.networkAccessTunableFloatHash = exports.networkAccessTunableFloat = exports.networkAccessTunableBoolModificationDetectionRegistrationHash = exports.networkAccessTunableBoolHash = exports.networkAccessTunableBool = exports.networkAcceptPresenceInvite = exports.netToVeh = exports.netToPed = exports.netToObj = exports.netToEnt = exports.netGameserverUseServerTransactions = exports.netGameserverTransferWalletToBankGetStatus = exports.netGameserverTransferWalletToBank = exports.netGameserverTransferCashSetTelemetryNonceSeed = exports.netGameserverTransferBankToWalletGetStatus = exports.netGameserverTransferBankToWallet = exports.netGameserverTransactionInProgress = exports.netGameserverStartSessionRestart = exports.netGameserverStartSessionPending = exports.netGameserverStartSession = exports.netGameserverSetTelemetryNonceSeed = exports.netGameserverSessionApplyReceivedData = exports.netGameserverRetrieveStartSessionStatus = exports.netGameserverRetrieveSessionErrorCode = exports.netGameserverRetrieveInitSessionStatus = exports.netGameserverRetrieveCatalogRefreshStatus = exports.netGameserverRefreshServerCatalog = void 0;
exports.networkCancelTransitionMatchmaking = exports.networkCancelRespawnSearch = exports.networkCanViewGamerUserContent = exports.networkCanTextChatWithGamer = exports.networkCanSpendMoney2 = exports.networkCanSpendMoney = exports.networkCanShareJobCash = exports.networkCanSetWaypoint = exports.networkCanSessionEnd = exports.networkCanSendLocalInvite = exports.networkCanReceivePlayerCash = exports.networkCanReceiveLocalInvite = exports.networkCanQueueForPreviousSessionJoin = exports.networkCanPlayMultiplayerWithGamer = exports.networkCanGamerPlayMultiplayerWithMe = exports.networkCanEnterMultiplayer = exports.networkCanCommunicateWithGamer = exports.networkCanBet = exports.networkCanBail = exports.networkCanAccessMultiplayer = exports.networkCacheLocalPlayerHeadBlendData = exports.networkBuySmokes = exports.networkBuyProperty = exports.networkBuyItem = exports.networkBuyHeliStrike = exports.networkBuyHealthcare = exports.networkBuyFairgroundRide = exports.networkBuyContrabandMission = exports.networkBuyBounty = exports.networkBuyBackupGang = exports.networkBuyAirstrike = exports.networkBlockProxyMigrationBetweenTutorialSessions = exports.networkBlockJoinQueueInvites = exports.networkBlockInvites = exports.networkBailTransition = exports.networkBail = exports.networkAttachSynchronisedSceneToEntity = exports.networkAreTransitionDetailsValid = exports.networkAreSocialClubPoliciesCurrent = exports.networkArePlayersInSameTutorialSession = exports.networkAreHandlesTheSame = exports.networkApplyVoiceProximityOverride = exports.networkApplyTransitionParameterString = exports.networkApplyTransitionParameter = exports.networkApplyPedScarData = exports.networkApplyCachedPlayerHeadBlendData = exports.networkAmIMutedByPlayer = exports.networkAmIMutedByGamer = exports.networkAmIBlockedByPlayer = exports.networkAmIBlockedByGamer = void 0;
exports.networkClearTransitionCreatorHandle = exports.networkClearQueuedJoinRequest = exports.networkClearPropertyId = exports.networkClearOfflineInvitePending = exports.networkClearInvalidObjectModels = exports.networkClearGroupActivity = exports.networkClearGetGamerStatus = exports.networkClearFoundGamers = exports.networkClearFollowers = exports.networkClearFollowInvite = exports.networkClearClockTimeOverride = exports.networkClearCharacterWallet = exports.networkClanServiceIsValid = exports.networkClanRequestEmblem = exports.networkClanRemoteMembershipsAreInCache = exports.networkClanReleaseEmblem = exports.networkClanPlayerIsActive = exports.networkClanPlayerGetDesc = exports.networkClanJoin = exports.networkClanIsRockstarClan = exports.networkClanIsEmblemReady = exports.networkClanHasCrewinfoMetadataBeenReceived = exports.networkClanGetUiFormattedTag = exports.networkClanGetMembershipValid = exports.networkClanGetMembershipDesc = exports.networkClanGetMembershipCount = exports.networkClanGetMembership = exports.networkClanGetLocalMembershipsCount = exports.networkClanGetEmblemTxdName = exports.networkClanDownloadMembershipPending = exports.networkClanDownloadMembership = exports.networkClanCrewinfoGetStringValue = exports.networkClanCrewinfoGetCrewranktitle = exports.networkClanAnyDownloadMembershipPending = exports.networkCheckUserContentPrivileges = exports.networkCheckTextCommunicationPrivileges = exports.networkCheckRosLinkWentdownNotNet = exports.networkCheckPrivileges = exports.networkCheckOnlinePrivileges = exports.networkCheckDataManagerSucceededForHandle = exports.networkCheckDataManagerForHandle = exports.networkCheckCommunicationPrivileges = exports.networkChangeTransitionSlots = exports.networkCasinoSellChips = exports.networkCasinoCanBuyChipsPvc = exports.networkCasinoCanBetPvc = exports.networkCasinoCanBetAmount = exports.networkCasinoCanBet = exports.networkCasinoBuyChips = exports.networkCapEmptyCrowdingVehiclesRemoval = void 0;
exports.networkEarnAwardPhone = exports.networkEarnAwardJuggaloMission = exports.networkEarnAwardFixerMission = exports.networkEarnAwardDeadDrop = exports.networkEarnAwardDailyStash = exports.networkEarnAwardContract = exports.networkEarnAwardAcidLab = exports.networkEarnAvenger = exports.networkEarnAutoshopIncome = exports.networkEarnAutoshopBusiness = exports.networkEarnAssassinateTargetKilled = exports.networkEarnArenaWarEventCargo = exports.networkEarnArenaWarAssassinateTarget = exports.networkEarnArenaWar = exports.networkEarnArenaSkillLevelProgression = exports.networkEarnArenaCareerProgression = exports.networkEarnArcade = exports.networkEarnAgencySafe = exports.networkEarnAgencyPhone = exports.networkEarnAgencyContract = exports.networkEarnAgency = exports.networkDumpNetIfConfig = exports.networkDoesTunableExistHash = exports.networkDoesTunableExist = exports.networkDoesNetworkIdExist = exports.networkDoesEntityExistWithNetworkId = exports.networkDoTransitionToNewGame = exports.networkDoTransitionToNewFreemode = exports.networkDoTransitionToGame = exports.networkDoTransitionToFreemode = exports.networkDoTransitionQuickmatchWithGroup = exports.networkDoTransitionQuickmatchAsync = exports.networkDoTransitionQuickmatch = exports.networkDisplaynamesFromHandlesStart = exports.networkDisableVoiceBandwidthRestriction = exports.networkDisableRealtimeMultiplayer = exports.networkDisableProximityMigration = exports.networkDisableLeaveRemotePedBehind = exports.networkDisableInvincibleFlashing = exports.networkDidGetGamerStatusSucceed = exports.networkDidFindGamersSucceed = exports.networkDeleteCharacter = exports.networkDeferCashTransactionsUntilShopSave = exports.networkDeductCash = exports.networkCreateSynchronisedScene = exports.networkConcealPlayer = exports.networkConcealEntity = exports.networkCloseTransitionMatchmaking = exports.networkClearVoiceProximityOverride = exports.networkClearVoiceChannel = void 0;
exports.networkEarnFromChallengeWin = exports.networkEarnFromCashingOut = exports.networkEarnFromBusinessProduct = exports.networkEarnFromBusinessHubSell = exports.networkEarnFromBusinessBattle = exports.networkEarnFromBounty = exports.networkEarnFromBetting = exports.networkEarnFromBendJob = exports.networkEarnFromAmbientJob = exports.networkEarnFromAiTargetKill = exports.networkEarnFooliganJobParticipation = exports.networkEarnFooliganJob = exports.networkEarnFmbbWageBonus = exports.networkEarnFixerRivalDelivery = exports.networkEarnFixerPrep = exports.networkEarnFixerFinale = exports.networkEarnFixerAgencyShortTrip = exports.networkEarnFirstTimeBonus = exports.networkEarnDoomsdayFinaleBonus = exports.networkEarnDispatchCall = exports.networkEarnDarChallenge = exports.networkEarnDailyVehicleBonus = exports.networkEarnDailyVehicle = exports.networkEarnDailyStashHouseParticipation = exports.networkEarnDailyStashHouseCompleted = exports.networkEarnDailyObjectiveEvent = exports.networkEarnCollectablesActionFigures = exports.networkEarnCollectables = exports.networkEarnCollectableItem = exports.networkEarnCollectableCompletedCollection = exports.networkEarnChallenge = exports.networkEarnCasinoTimeTrialWin = exports.networkEarnCasinoStoryMissionReward = exports.networkEarnCasinoMissionReward = exports.networkEarnCasinoMissionParticipation = exports.networkEarnCasinoHeistAwards = exports.networkEarnCasinoHeist = exports.networkEarnCasinoCollectableCompletedCollection = exports.networkEarnCasinoAward = exports.networkEarnCarclubMembership = exports.networkEarnBountyHunterReward = exports.networkEarnBoss = exports.networkEarnBonusObjective = exports.networkEarnBikerShop = exports.networkEarnBiker = exports.networkEarnBeachPartyLostFound = exports.networkEarnBbEventBonus = exports.networkEarnAwardTaxi = exports.networkEarnAwardShortTrip = exports.networkEarnAwardRandomEvent = void 0;
exports.networkEarnSellParticipationAcidLab = exports.networkEarnSellBase = exports.networkEarnSellAcid = exports.networkEarnRdrBonus = exports.networkEarnRcTimeTrial = exports.networkEarnPurchaseClubHouse = exports.networkEarnProgressHub = exports.networkEarnNightclubDancing = exports.networkEarnNightclubAndWarehouse = exports.networkEarnNightclub = exports.networkEarnJuggaloStoryMissionParticipation = exports.networkEarnJuggaloStoryMission = exports.networkEarnIslandHeist = exports.networkEarnHeistAward = exports.networkEarnHackerTruck = exports.networkEarnGoon = exports.networkEarnGangopsWagesBonus = exports.networkEarnGangopsWages = exports.networkEarnGangopsSetup = exports.networkEarnGangopsPrepParticipation = exports.networkEarnGangopsFinale = exports.networkEarnGangopsElite = exports.networkEarnGangopsAward = exports.networkEarnFromWarehouse = exports.networkEarnFromVehicleExport = exports.networkEarnFromVehicle = exports.networkEarnFromSmugglerWork = exports.networkEarnFromSellBunker = exports.networkEarnFromRobArmoredCars = exports.networkEarnFromProperty = exports.networkEarnFromPremiumJob = exports.networkEarnFromPickup = exports.networkEarnFromPersonalVehicle = exports.networkEarnFromNotBadsport = exports.networkEarnFromJobx2 = exports.networkEarnFromJobBonus = exports.networkEarnFromJob = exports.networkEarnFromIslandHeistDjMission = exports.networkEarnFromImportExport = exports.networkEarnFromHoldups = exports.networkEarnFromHangarTrade = exports.networkEarnFromGangattackPickup = exports.networkEarnFromFmbbPhonecallMission = exports.networkEarnFromFmbbBossWork = exports.networkEarnFromDestroyingContraband = exports.networkEarnFromDailyObjectives = exports.networkEarnFromCriminalMastermind = exports.networkEarnFromCrateDrop = exports.networkEarnFromContraband = exports.networkEarnFromClubManagementParticipation = void 0;
exports.networkGetBoneIdOfFatalHit = exports.networkGetAveragePing = exports.networkGetAveragePacketLoss = exports.networkGetAverageLatency = exports.networkGetAssistedKillOfEntity = exports.networkGetAssistedDamageOfEntity = exports.networkGetAgeGroup = exports.networkGetActivityPlayerNum = exports.networkGamertagFromHandleSucceeded = exports.networkGamertagFromHandleStart = exports.networkGamertagFromHandlePending = exports.networkGamerHasHeadset = exports.networkForceLocalUseOfSyncedSceneCamera = exports.networkForceLocalPlayerScarSync = exports.networkFinishBroadcastingData = exports.networkFindMatchedGamers = exports.networkFindLargestBunchOfPlayers = exports.networkFindGamersInCrew = exports.networkFadeOutEntity = exports.networkFadeInEntity = exports.networkExplodeVehicle = exports.networkExplodeHeli = exports.networkEntityUseHighPrecisionRotation = exports.networkEntityGetObjectId = exports.networkEntityAreaIsOccupied = exports.networkEntityAreaHaveAllReplied = exports.networkEntityAreaDoesExist = exports.networkEndTutorialSession = exports.networkEnableVoiceBandwidthRestriction = exports.networkEnableExtraVehicleOrientationBlendChecks = exports.networkEnableEmptyCrowdingVehiclesRemoval = exports.networkEconomyHasFixedCrazyNumbers = exports.networkEarnYatchMission = exports.networkEarnWagePaymentBonus = exports.networkEarnWagePayment = exports.networkEarnUpgradeAutoshop = exports.networkEarnUpgradeArcade = exports.networkEarnUpgradeAgency = exports.networkEarnTunerRobbery = exports.networkEarnTunerAward = exports.networkEarnTaxiJob = exports.networkEarnTargetRefund = exports.networkEarnStreetDealer = exports.networkEarnSpinTheWheelCash = exports.networkEarnSourceParticipationAcidLab = exports.networkEarnSmugglerOps = exports.networkEarnSmugglerAgency = exports.networkEarnSightseeingReward = exports.networkEarnSetupParticipationAcidLab = exports.networkEarnSellPrizeVehicle = void 0;
exports.networkGetNumberBodyTrackerHits = exports.networkGetNumUnackedReliables = exports.networkGetNumTransitionNonAsyncGamers = exports.networkGetNumScriptParticipants = exports.networkGetNumPresenceInvites = exports.networkGetNumParticipants = exports.networkGetNumFoundGamers = exports.networkGetNumConnectedPlayers = exports.networkGetNpUnavailableReason = exports.networkGetNetworkIdFromEntity = exports.networkGetNetStatisticsInfo = exports.networkGetMuteCountForPlayer = exports.networkGetMaxNumParticipants = exports.networkGetMaxFriends = exports.networkGetLocalSceneFromNetworkId = exports.networkGetLocalHandle = exports.networkGetLastVelReceivedOverNetwork = exports.networkGetLastPlayerPosReceivedOverNetwork = exports.networkGetLastEntityPosReceivedOverNetwork = exports.networkGetKillerOfPlayer = exports.networkGetInviteReplyStatus = exports.networkGetInstanceIdOfThisScript = exports.networkGetHostPlayerIndex = exports.networkGetHostOfThisScript = exports.networkGetHostOfScript = exports.networkGetHighestReliableResendCount = exports.networkGetGlobalMultiplayerClock = exports.networkGetGamertagFromHandle = exports.networkGetGamerStatusResult = exports.networkGetGamerStatusFromQueue = exports.networkGetGameMode = exports.networkGetFriendName = exports.networkGetFriendDisplayName = exports.networkGetFriendCount = exports.networkGetFoundGamer = exports.networkGetEvcBalance = exports.networkGetEntityKillerOfPlayer = exports.networkGetEntityIsNetworked = exports.networkGetEntityIsLocal = exports.networkGetEntityFromObjectId = exports.networkGetEntityFromNetworkId = exports.networkGetDisplaynamesFromHandles = exports.networkGetDestroyerOfNetworkId = exports.networkGetDestroyerOfEntity = exports.networkGetCurrentlySelectedGamerHandleFromInviteMenu = exports.networkGetContentModifierListId = exports.networkGetCanTransferCash = exports.networkGetCanSpendFromWallet = exports.networkGetCanSpendFromBankAndWallet = exports.networkGetCanSpendFromBank = void 0;
exports.networkGetUnreliableResendCount = exports.networkGetTunableCloudCrc = exports.networkGetTransitionMembers = exports.networkGetTransitionHost = exports.networkGetTotalNumPlayers = exports.networkGetTimeoutTime = exports.networkGetThisScriptIsNetworkScript = exports.networkGetTalkerProximity = exports.networkGetStringWalletBalance = exports.networkGetStringBankWalletBalance = exports.networkGetStringBankBalance = exports.networkGetSignallingInfo = exports.networkGetScriptStatus = exports.networkGetRespawnResultFlags = exports.networkGetRespawnResult = exports.networkGetRemainingTransferBalance = exports.networkGetRandomIntRanged = exports.networkGetRandomInt = exports.networkGetRandomFloatRanged = exports.networkGetPvcTransferBalance = exports.networkGetPvcBalance = exports.networkGetPrimaryClanDataSuccess = exports.networkGetPrimaryClanDataStart = exports.networkGetPrimaryClanDataPending = exports.networkGetPrimaryClanDataNew = exports.networkGetPrimaryClanDataClear = exports.networkGetPrimaryClanDataCancel = exports.networkGetPresenceInviteSessionId = exports.networkGetPresenceInvitePlaylistLength = exports.networkGetPresenceInvitePlaylistCurrent = exports.networkGetPresenceInviteIsTournament = exports.networkGetPresenceInviteInviter = exports.networkGetPresenceInviteIndexById = exports.networkGetPresenceInviteId = exports.networkGetPresenceInviteHandle = exports.networkGetPresenceInviteFromAdmin = exports.networkGetPresenceInviteContentId = exports.networkGetPredictedVelocity = exports.networkGetPositionHashOfThisScript = exports.networkGetPlayerTutorialSessionInstance = exports.networkGetPlayerOwnsWaypoint = exports.networkGetPlayerLoudness = exports.networkGetPlayerIsHighEarner = exports.networkGetPlayerIndexFromPed = exports.networkGetPlayerIndex = exports.networkGetPlayerFromGamerHandle = exports.networkGetPlayerAccountId = exports.networkGetPlatformPartyMembers = exports.networkGetPlatformPartyMemberCount = exports.networkGetParticipantIndex = void 0;
exports.networkIgnoreRemoteWaypoints = exports.networkHostTransition = exports.networkHideProjectileInCutscene = exports.networkHaveUserContentPrivileges = exports.networkHaveScsPrivateMsgPriv = exports.networkHaveRosSocialClubPriv = exports.networkHaveRosMultiplayerPriv = exports.networkHaveRosLeaderboardWritePriv = exports.networkHaveRosCreateTicketPriv = exports.networkHaveRosBannedPriv = exports.networkHavePlatformSubscription = exports.networkHaveOnlinePrivileges = exports.networkHaveCommunicationPrivileges = exports.networkHashFromPlayerHandle = exports.networkHashFromGamerHandle = exports.networkHasViewGamerUserContentResult = exports.networkHasValidRosCredentials = exports.networkHasTransitionInviteBeenAcked = exports.networkHasSocialNetworkingSharingPriv = exports.networkHasSocialClubAccount = exports.networkHasRosPrivilegeSpecialEditionContent = exports.networkHasRosPrivilegePlayedLastGen = exports.networkHasRosPrivilegeEndDate = exports.networkHasRosPrivilege = exports.networkHasReceivedHostBroadcastData = exports.networkHasPlayerStartedTransition = exports.networkHasPendingInvite = exports.networkHasMadeInviteDecision = exports.networkHasInvitedGamerToTransition = exports.networkHasInvitedGamer = exports.networkHasHeadset = exports.networkHasFollowInvite = exports.networkHasEntityBeenRegisteredWithThisThread = exports.networkHasControlOfPickup = exports.networkHasControlOfNetworkId = exports.networkHasControlOfEntity = exports.networkHasControlOfDoor = exports.networkHasConfirmedInvite = exports.networkHasCachedPlayerHeadBlendData = exports.networkHasBoneBeenHitByKiller = exports.networkHasAutomuteOverride = exports.networkHasAgeRestrictions = exports.networkHandleFromUserId = exports.networkHandleFromPlayer = exports.networkHandleFromMemberId = exports.networkHandleFromFriend = exports.networkGivePlayerJobshareCash = exports.networkGetVcWalletBalance = exports.networkGetVcBankBalance = exports.networkGetVcBalance = void 0;
exports.networkIsParticipantActive = exports.networkIsOfflineInvitePending = exports.networkIsNpPending = exports.networkIsNpAvailable = exports.networkIsNetworkIdRemotelyControlled = exports.networkIsMultiplayerDisabled = exports.networkIsLoggedInToPsn = exports.networkIsLocalPlayerInvincible = exports.networkIsInactiveProfile = exports.networkIsInTutorialSession = exports.networkIsInTransition = exports.networkIsInSpectatorMode = exports.networkIsInSession = exports.networkIsInPlatformPartyChat = exports.networkIsInPlatformParty = exports.networkIsInMpCutscene = exports.networkIsHostOfThisScript = exports.networkIsHost = exports.networkIsHandleValid = exports.networkIsGettingGamerStatus = exports.networkIsGamerTalking = exports.networkIsGamerMutedByMe = exports.networkIsGamerInMySession = exports.networkIsGamerBlockedByMe = exports.networkIsGameInProgress = exports.networkIsFriendOnline = exports.networkIsFriendIndexOnline = exports.networkIsFriendInSameTitle = exports.networkIsFriendInMultiplayer = exports.networkIsFriendHandleOnline = exports.networkIsFriend = exports.networkIsFindingGamers = exports.networkIsEntityFading = exports.networkIsEntityConcealed = exports.networkIsDoorNetworked = exports.networkIsConnetedToNpPresence = exports.networkIsConnectedViaRelay = exports.networkIsCloudBackgroundScriptRequestPending = exports.networkIsCloudAvailable = exports.networkIsClockTimeOverridden = exports.networkIsChattingInPlatformParty = exports.networkIsCableConnected = exports.networkIsAnyPlayerNear = exports.networkIsAddingFriend = exports.networkIsActivitySpectatorFromHandle = exports.networkIsActivitySpectator = exports.networkIsActivitySession = exports.networkInviteGamersToTransition = exports.networkInviteGamers = exports.networkInitializeCash = void 0;
exports.networkLeavePedBehindBeforeCutscene = exports.networkLaunchTransition = exports.networkKeepEntityCollisionDisabledAfterAnimScene = exports.networkJoinTransition = exports.networkJoinPreviouslyFailedTransition = exports.networkJoinPreviouslyFailedSession = exports.networkJoinGroupActivity = exports.networkIsUsingOnlinePromotion = exports.networkIsTutorialSessionChangePending = exports.networkIsTunableCloudRequestPending = exports.networkIsTransitionVisibilityLocked = exports.networkIsTransitionToGame = exports.networkIsTransitionStarted = exports.networkIsTransitionSolo = exports.networkIsTransitionPrivate = exports.networkIsTransitionOpenToMatchmaking = exports.networkIsTransitionMatchmaking = exports.networkIsTransitionLeavePostponed = exports.networkIsTransitionHostFromHandle = exports.networkIsTransitionHost = exports.networkIsTransitionClosedFriends = exports.networkIsTransitionClosedCrew = exports.networkIsTransitionBusy = exports.networkIsTitleUpdateRequired = exports.networkIsThreadANetworkScript = exports.networkIsSignedOnline = exports.networkIsSignedIn = exports.networkIsShowingSystemUiOrRecentlyRequestedUpsell = exports.networkIsSessionStarted = exports.networkIsSessionBusy = exports.networkIsSessionActive = exports.networkIsScriptActiveByHash = exports.networkIsScriptActive = exports.networkIsRefreshingRosCredentials = exports.networkIsQueuingForSessionJoin = exports.networkIsPushToTalkActive = exports.networkIsPrivilegeCheckInProgress = exports.networkIsPlayerTalking = exports.networkIsPlayerOnBlocklist = exports.networkIsPlayerMutedByMe = exports.networkIsPlayerInMpCutscene = exports.networkIsPlayerFading = exports.networkIsPlayerConnected = exports.networkIsPlayerConcealed = exports.networkIsPlayerBlockedByMe = exports.networkIsPlayerActive = exports.networkIsPlayerAParticipantOnScript = exports.networkIsPlayerAParticipant = exports.networkIsPlatformSubscriptionCheckPending = exports.networkIsPendingFriend = void 0;
exports.networkRemoveAndCancelAllTransitionInvites = exports.networkRemoveAndCancelAllInvites = exports.networkRemoveAllTransitionInvite = exports.networkRemoveAllQueuedJoinRequests = exports.networkRemainInGameChat = exports.networkRegisterPlayerBroadcastVariables = exports.networkRegisterHostBroadcastVariables = exports.networkRegisterHighFrequencyPlayerBroadcastVariables = exports.networkRegisterHighFrequencyHostBroadcastVariables = exports.networkRegisterEntityAsNetworked = exports.networkRefundCash = exports.networkReceivePlayerJobshareCash = exports.networkQuitMpToDesktop = exports.networkQueueGamerForStatus = exports.networkQueryRespawnResults = exports.networkPreventScriptHostMigration = exports.networkPlayerIsRockstarDev = exports.networkPlayerIsCheater = exports.networkPlayerIsBadsport = exports.networkPlayerIndexIsCheater = exports.networkPlayerIdToInt = exports.networkPlayerHasHeadset = exports.networkPlayerGetUserid = exports.networkPlayerGetName = exports.networkPlayerGetCheaterReason = exports.networkPermissionsHasGamerRecord = exports.networkPayMatchEntryFee = exports.networkPayEmployeeWage = exports.networkPatchPostCutsceneHs4fTunEnt = exports.networkOverrideTransitionChat = exports.networkOverrideTeamRestrictions = exports.networkOverrideSendRestrictionsAll = exports.networkOverrideSendRestrictions = exports.networkOverrideReceiveRestrictionsAll = exports.networkOverrideReceiveRestrictions = exports.networkOverrideCoordsAndHeading = exports.networkOverrideClockTime = exports.networkOverrideClockRate = exports.networkOverrideChatRestrictions = exports.networkOpenTransitionMatchmaking = exports.networkOnReturnToSinglePlayer = exports.networkNeedToStartNewGameButBlocked = exports.networkMoneyCanBet = exports.networkMemberIdFromGamerHandle = exports.networkMarkTransitionGamerAsFullyJoined = exports.networkMarkAsWaitingAsync = exports.networkMarkAsPreferredActivity = exports.networkManualDeleteCharacter = exports.networkLeaveTransition = exports.networkLeavePedBehindBeforeWarp = void 0;
exports.networkSessionIsSolo = exports.networkSessionIsPrivate = exports.networkSessionIsInVoiceSession = exports.networkSessionIsDisplayingInviteConfirmation = exports.networkSessionIsClosedFriends = exports.networkSessionIsClosedCrew = exports.networkSessionIsAwaitingInviteResponse = exports.networkSessionHostSinglePlayer = exports.networkSessionHostFriendsOnly = exports.networkSessionHostClosed = exports.networkSessionHost = exports.networkSessionGetPrivateSlots = exports.networkSessionGetMatchmakingGroupFree = exports.networkSessionGetKickVote = exports.networkSessionGetInviter = exports.networkSessionGetHostAimPreference = exports.networkSessionForceCancelInvite = exports.networkSessionEnd = exports.networkSessionDoFriendMatchmaking = exports.networkSessionDoFreeroamQuickmatch = exports.networkSessionDoCrewMatchmaking = exports.networkSessionDoActivityQuickmatch = exports.networkSessionChangeSlots = exports.networkSessionCancelInvite = exports.networkSessionBlockJoinRequests = exports.networkSessionAddActiveMatchmakingGroup = exports.networkServiceEarnGangopsRivalDelivery = exports.networkSendTransitionInviteViaPresence = exports.networkSendTransitionGamerInstruction = exports.networkSendTextMessage = exports.networkSendQueuedJoinRequest = exports.networkSendInviteViaPresence = exports.networkSendImportantTransitionInviteViaPresence = exports.networkSeedRandomNumberGenerator = exports.networkRetainActivityGroup = exports.networkResurrectLocalPlayer = exports.networkResolvePrivilegeUserContent = exports.networkResetBodyTracker = exports.networkRequestToBeHostOfThisScript = exports.networkRequestInviteConfirmedEvent = exports.networkRequestControlOfNetworkId = exports.networkRequestControlOfEntity = exports.networkRequestControlOfDoor = exports.networkRequestCloudTunables = exports.networkRequestCloudBackgroundScripts = exports.networkReportCodeTamper = exports.networkRemoveTransitionInvite = exports.networkRemovePresenceInvite = exports.networkRemoveInvalidObjectModel = exports.networkRemoveEntityArea = void 0;
exports.networkSetInSpectatorModeExtended = exports.networkSetInSpectatorMode = exports.networkSetInProgressFinishTime = exports.networkSetInMpCutscene = exports.networkSetInFreeCamMode = exports.networkSetIgnoreSpectatorChatLimitsSameTeam = exports.networkSetGamerInvitedToTransition = exports.networkSetFriendlyFireOption = exports.networkSetEntityOnlyExistsForParticipants = exports.networkSetEntityCanBlend = exports.networkSetDoNotLaunchFromJoinAsMigratedHost = exports.networkSetCustomArenaBallParams = exports.networkSetCurrentlySelectedGamerHandleFromInviteMenu = exports.networkSetCurrentSpawnLocationOption = exports.networkSetCurrentPublicContentId = exports.networkSetCurrentDataManagerHandle = exports.networkSetCurrentChatOption = exports.networkSetCanReceiveRsInvites = exports.networkSetAttributeDamageToPlayer = exports.networkSetAntagonisticToPlayer = exports.networkSetActivitySpectatorMax = exports.networkSetActivitySpectator = exports.networkSetActivityPlayerMax = exports.networkSessionWasInvited = exports.networkSessionVoiceSetTimeout = exports.networkSessionVoiceRespondToRequest = exports.networkSessionVoiceLeave = exports.networkSessionVoiceHost = exports.networkSessionVoiceConnectToPlayer = exports.networkSessionValidateJoin = exports.networkSessionSetUniqueCrewOnlyCrewsTransition = exports.networkSessionSetUniqueCrewLimitTransition = exports.networkSessionSetUniqueCrewLimit = exports.networkSessionSetScriptValidateJoin = exports.networkSessionSetNumBosses = exports.networkSessionSetMatchmakingPropertyId = exports.networkSessionSetMatchmakingMentalState = exports.networkSessionSetMatchmakingGroupMax = exports.networkSessionSetMatchmakingGroup = exports.networkSessionSetGamemode = exports.networkSessionSetCrewLimitMaxMembersTransition = exports.networkSessionReserveSlotsTransition = exports.networkSessionMarkVisible = exports.networkSessionLeaveSinglePlayer = exports.networkSessionLeave = exports.networkSessionKickPlayer = exports.networkSessionJoinInvite = exports.networkSessionIsVoiceSessionBusy = exports.networkSessionIsVoiceSessionActive = exports.networkSessionIsVisible = void 0;
exports.networkSpendApartmentUtilities = exports.networkSpendAgency = exports.networkSkipRadioWarning = exports.networkSkipRadioResetNextOpen = exports.networkSkipRadioResetNextClose = exports.networkShowPsnUgcRestriction = exports.networkShowProfileUi = exports.networkShowChatRestrictionMsc = exports.networkShowAccountUpgradeUi = exports.networkShouldShowStrictNatWarning = exports.networkShouldShowPromotionAlertScreen = exports.networkSetVoiceChannel = exports.networkSetVoiceActive = exports.networkSetVehicleDrivenLocation = exports.networkSetVehicleDrivenInTestDrive = exports.networkSetTransitionVisibilityLock = exports.networkSetTransitionCreatorHandle = exports.networkSetTransitionActivityId = exports.networkSetThisScriptIsNetworkScript = exports.networkSetTeamOnlyChat = exports.networkSetTaskCutsceneInscopeMultipler = exports.networkSetTalkerProximity = exports.networkSetSpectatorToNonSpectatorTextChat = exports.networkSetScriptReadyForEvents = exports.networkSetScriptIsSafeForNetworkGame = exports.networkSetScriptControllingTeams = exports.networkSetScriptAutomuted = exports.networkSetSameTeamAsLocalPlayer = exports.networkSetRichPresenceString = exports.networkSetRichPresence = exports.networkSetProximityAffectsTeam = exports.networkSetPropertyId = exports.networkSetPrivilegeCheckResultNotNeeded = exports.networkSetPresenceSessionInvitesBlocked = exports.networkSetPlayerMentalState = exports.networkSetPlayerIsPassive = exports.networkSetOverrideTutorialSessionChat = exports.networkSetOverrideSpectatorMode = exports.networkSetObjectScopeDistance = exports.networkSetObjectCanBlendWhenFixed = exports.networkSetNoSpectatorChat = exports.networkSetNoLongerNeeded = exports.networkSetMocapCutsceneCanBeSkipped = exports.networkSetMissionFinished = exports.networkSetMinimumRankForMission = exports.networkSetLookAtTalkers = exports.networkSetLocalPlayerSyncLookAt = exports.networkSetLocalPlayerInvincibleTime = exports.networkSetInviteOnCallForInviteMenu = exports.networkSetInviteFailedMessageForInviteMenu = void 0;
exports.networkSpendSubmarine = exports.networkSpendSpinTheWheelPayment = exports.networkSpendSourceBike = exports.networkSpendSetDiscount = exports.networkSpendSetCommonFields = exports.networkSpendRenameAcidProduct = exports.networkSpendRenameAcidLab = exports.networkSpendPlayArcade = exports.networkSpendNightclubBarDrink = exports.networkSpendNightclubAndWarehouse = exports.networkSpendMakeItRain = exports.networkSpendIslandHeist = exports.networkSpendInteractionMenuAbility = exports.networkSpendHidden = exports.networkSpendGunrunning = exports.networkSpendGoon = exports.networkSpendGangopsTripSkip = exports.networkSpendGangopsStartStrand = exports.networkSpendGangopsSkipMission = exports.networkSpendGangopsRepairCost = exports.networkSpendGangopsCannon = exports.networkSpendEarnedFromBankAndWallets = exports.networkSpendCompSuv = exports.networkSpendCasinoMembership = exports.networkSpendCasinoHeistSkipMission = exports.networkSpendCasinoHeist = exports.networkSpendCasinoGeneric = exports.networkSpendCasinoClub = exports.networkSpendCarClubTakeover = exports.networkSpendCarClubMembership = exports.networkSpendCarClubBar = exports.networkSpendBuySupplies = exports.networkSpendBuySub = exports.networkSpendBuyMfgarage = exports.networkSpendBuyCasino = exports.networkSpendBuyAutoshop = exports.networkSpendBuyArena = exports.networkSpendBuyArcade = exports.networkSpendBuyAgency = exports.networkSpendBuyAcidLab = exports.networkSpendBusinessPropertyFees = exports.networkSpendBountyHunterMission = exports.networkSpendBoss = exports.networkSpendBikeShop = exports.networkSpendBeachParty = exports.networkSpendAutoshopModify = exports.networkSpendArenaSpectatorBox = exports.networkSpendArenaPremium = exports.networkSpendArcadeMgmt = exports.networkSpendArcade = void 0;
exports.networkSpentJobSkip = exports.networkSpentInStripclub = exports.networkSpentImportExportRepair = exports.networkSpentHoldups = exports.networkSpentHireMugger = exports.networkSpentHireMercenary = exports.networkSpentHeliPickup = exports.networkSpentHangarUtilityCharges = exports.networkSpentHangarStaffCharges = exports.networkSpentFromRockstar = exports.networkSpentEmployAssassins = exports.networkSpentCinema = exports.networkSpentChangeAppearance = exports.networkSpentCashDrop = exports.networkSpentCarwash = exports.networkSpentCargoSourcing = exports.networkSpentCallPlayer = exports.networkSpentBuyWantedlevel = exports.networkSpentBuyTruck = exports.networkSpentBuyTiltrotor = exports.networkSpentBuyRevealPlayers = exports.networkSpentBuyPassiveMode = exports.networkSpentBuyOfftheradar = exports.networkSpentBuyBunker = exports.networkSpentBuyBase = exports.networkSpentBullShark = exports.networkSpentBounty = exports.networkSpentBossGoon = exports.networkSpentBoatPickup = exports.networkSpentBetting = exports.networkSpentBankInterest = exports.networkSpentBallisticEquipment = exports.networkSpentArrestBail = exports.networkSpentArenaJoinSpectator = exports.networkSpentAmmoDrop = exports.networkSpentAirFreight = exports.networkSpendVehicleRequested = exports.networkSpendUpgradeSub = exports.networkSpendUpgradeMfgarage = exports.networkSpendUpgradeCasino = exports.networkSpendUpgradeAutoshop = exports.networkSpendUpgradeArena = exports.networkSpendUpgradeArcade = exports.networkSpendUpgradeAgency = exports.networkSpendUpgradeAcidLabScoop = exports.networkSpendUpgradeAcidLabMines = exports.networkSpendUpgradeAcidLabEquipment = exports.networkSpendUpgradeAcidLabArmor = exports.networkSpendSuvFstTrvl = exports.networkSpendSupply = void 0;
exports.networkSpentUpgradeTiltrotor = exports.networkSpentUpgradeOfficeProperty = exports.networkSpentUpgradeOfficeGarage = exports.networkSpentUpgradeNightclubAndWarehouse = exports.networkSpentUpgradeImpexpWarehouseProperty = exports.networkSpentUpgradeHangar = exports.networkSpentUpgradeHackerTruck = exports.networkSpentUpgradeClubHouse = exports.networkSpentUpgradeBusinessProperty = exports.networkSpentUpgradeBase = exports.networkSpentTradeImpexpWarehouseProperty = exports.networkSpentTradeBusinessProperty = exports.networkSpentTelescope = exports.networkSpentTaxi = exports.networkSpentStealthModule = exports.networkSpentSkipCargoSourceSetup = exports.networkSpentRobbedByMugger = exports.networkSpentRequestJob = exports.networkSpentRequestHeist = exports.networkSpentRenameOrganization = exports.networkSpentRehireDj = exports.networkSpentRdrHatchetBonus = exports.networkSpentPurchaseWarehouseProperty = exports.networkSpentPurchaseOfficeProperty = exports.networkSpentPurchaseOfficeGarage = exports.networkSpentPurchaseNightclubAndWarehouse = exports.networkSpentPurchaseImpexpWarehouseProperty = exports.networkSpentPurchaseHangar = exports.networkSpentPurchaseHackerTruck = exports.networkSpentPurchaseClubHouse = exports.networkSpentPurchaseBusinessProperty = exports.networkSpentProstitutes = exports.networkSpentPlayerHealthcare = exports.networkSpentPayVehicleInsurancePremium = exports.networkSpentPayBusinessSupplies = exports.networkSpentPaServiceVehicle = exports.networkSpentPaServiceSnack = exports.networkSpentPaServiceImpound = exports.networkSpentPaServiceHeli = exports.networkSpentPaServiceDancer = exports.networkSpentPaHeliPickup = exports.networkSpentOrderWarehouseVehicle = exports.networkSpentOrderBodyguardVehicle = exports.networkSpentNoCops = exports.networkSpentNightclubEntryFee = exports.networkSpentMoveYacht = exports.networkSpentMoveSubmarine = exports.networkSpentMissileJammer = exports.networkSpentMcAbility = exports.networkSpentJukebox = void 0;
exports.openSequenceTask = exports.openReportugcMenu = exports.openPatrolRoute = exports.openOnlinePoliciesMenu = exports.openCommerceStore = exports.openBombBayDoors = exports.openAllBarriersForRace = exports.onlyCleanUpObjectWhenOutOfRange = exports.onEnterSp = exports.onEnterMp = exports.objToNet = exports.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts = exports.newLoadSceneStop = exports.newLoadSceneStartSphere = exports.newLoadSceneStart = exports.networkYohanSourceGoods = exports.networkWasGameSuspended = exports.networkWaitingPopClearTutorialSession = exports.networkUseLogarithmicBlendingThisFrame = exports.networkUseHighPrecisionTrainBlending = exports.networkUseHighPrecisionBlending = exports.networkUpdateLoadScene = exports.networkUnregisterNetworkedEntity = exports.networkUgcNav = exports.networkTryToSetThisScriptIsNetworkScript = exports.networkTryAccessTunableBoolHash = exports.networkTriggerDamageEventForZeroWeaponHash = exports.networkTriggerDamageEventForZeroDamage = exports.networkTransitionStart = exports.networkTransitionSetInProgress = exports.networkTransitionSetContentCreator = exports.networkTransitionSetActivityIsland = exports.networkTransitionFinish = exports.networkTransitionBlockJoinRequests = exports.networkTransitionAddStage = exports.networkTextChatIsTyping = exports.networkSuppressInvite = exports.networkStoreInviteThroughRestart = exports.networkStopSynchronisedScene = exports.networkStartUserContentPermissionsCheck = exports.networkStartSynchronisedScene = exports.networkStartSoloTutorialSession = exports.networkStartRespawnSearchInAngledAreaForPlayer = exports.networkStartRespawnSearchForPlayer = exports.networkStartCommunicationPermissionsCheck = exports.networkSpentWager = exports.networkSpentVehicleExportMods = exports.networkSpentUpradeBunker = exports.networkSpentUpgradeWarehouseProperty = exports.networkSpentUpgradeTruck = void 0;
exports.phonephotoeditorToggle = exports.phonephotoeditorSetFrameTxd = exports.phonephotoeditorIsActive = exports.pedToNet = exports.pedHasUseScenarioTask = exports.pedHasSexinessFlagSet = exports.pauseToggleFullscreenMap = exports.pauseScriptedConversation = exports.pausePlaybackRecordedVehicle = exports.pauseMenuceptionTheKick = exports.pauseMenuceptionGoDeeper = exports.pauseMenuSetWarnOnTabChange = exports.pauseMenuSetBusySpinner = exports.pauseMenuRedrawInstructionalButtons = exports.pauseMenuIsContextMenuActive = exports.pauseMenuIsContextActive = exports.pauseMenuGetMouseHoverUniqueId = exports.pauseMenuGetMouseHoverIndex = exports.pauseMenuGetMouseClickEvent = exports.pauseMenuGetHairColourIndex = exports.pauseMenuDeactivateContext = exports.pauseMenuActivateContext = exports.pauseDeathArrestRestart = exports.pauseClock = exports.patchDecalDiffuseMap = exports.passKeyboardInputToScaleform = exports.participantIdToInt = exports.participantId = exports.packedStatGetIntStatIndex = exports.overrideVehHorn = exports.overrideUnderwaterStream = exports.overrideTrevorRage = exports.overrideSaveHouse = exports.overridePopscheduleVehicleModel = exports.overridePlayerGroundMaterial = exports.overridePlaneDamageThrehsold = exports.overridePedCrewLogoTexture = exports.overrideNightvisionLightRange = exports.overrideMpTextChatTeamString = exports.overrideMpTextChatColor = exports.overrideMicrophoneSettings = exports.overrideLodscaleThisFrame = exports.overrideInteriorSmokeName = exports.overrideInteriorSmokeLevel = exports.overrideInteriorSmokeEnd = exports.overrideFreezeFlags = exports.overrideCamSplineVelocity = exports.overrideCamSplineMotionBlur = exports.orderBossVehicle = exports.openSocialClubMenu = void 0;
exports.playstatsAppendDirectorMetric = exports.playstatsActivityDone = exports.playstatsAcquiredHiddenPackage = exports.playstatsAcidRnd = exports.playstatsAcidMissionEnd = exports.playstatsAbandonedMc = exports.playerPedId = exports.playerId = exports.playerDetachVirtualBound = exports.playerAttachVirtualBound = exports.playVehicleDoorOpenSound = exports.playVehicleDoorCloseSound = exports.playTennisSwingAnim = exports.playTennisDiveAnim = exports.playSynchronizedMapEntityAnim = exports.playSynchronizedEntityAnim = exports.playSynchronizedCamAnim = exports.playSynchronizedAudioEvent = exports.playStreamFrontend = exports.playStreamFromVehicle = exports.playStreamFromPosition = exports.playStreamFromPed = exports.playStreamFromObject = exports.playSoundFrontend = exports.playSoundFromEntityHash = exports.playSoundFromEntity = exports.playSoundFromCoord = exports.playSound = exports.playPoliceReport = exports.playPedRingtone = exports.playPedAmbientSpeechWithVoiceNative = exports.playPedAmbientSpeechNative = exports.playPedAmbientSpeechAndCloneNative = exports.playPain = exports.playObjectAutoStartAnim = exports.playMissionCompleteAudio = exports.playFacialAnim = exports.playEntityScriptedAnim = exports.playEntityAnim = exports.playEndCreditsMusic = exports.playDeferredSoundFrontend = exports.playCamAnim = exports.playBinkMovie = exports.playAnimalVocalization = exports.playAnimOnRunningScenario = exports.playAmbientSpeechFromPositionNative = exports.placeObjectOnGroundProperly = exports.placeObjectOnGroundOrObjectProperly = exports.pinRopeVertex = exports.pinInteriorInMemory = void 0;
exports.playstatsClothChange = exports.playstatsCheatApplied = exports.playstatsChangeMcRole = exports.playstatsChangeMcOutfit = exports.playstatsCasinoThreeCardPokerLight = exports.playstatsCasinoThreeCardPoker = exports.playstatsCasinoStoryMissionEnded = exports.playstatsCasinoSlotMachineLight = exports.playstatsCasinoSlotMachine = exports.playstatsCasinoRouletteLight = exports.playstatsCasinoRoulette = exports.playstatsCasinoLuckySeven = exports.playstatsCasinoInsideTrackLight = exports.playstatsCasinoInsideTrack = exports.playstatsCasinoChip = exports.playstatsCasinoBlackjackLight = exports.playstatsCasinoBlackjack = exports.playstatsCarclubPrize = exports.playstatsCarclubPoints = exports.playstatsCarclubChallenge = exports.playstatsBwYatchattack = exports.playstatsBwSightseer = exports.playstatsBwHuntTheBoss = exports.playstatsBwHeadHunter = exports.playstatsBwFragileGoods = exports.playstatsBwBossonbossdeathmatch = exports.playstatsBwBellyOfTheBeast = exports.playstatsBwAssault = exports.playstatsBwAirFreight = exports.playstatsBuyContrabandMission = exports.playstatsBusinessBattleEnded = exports.playstatsBcSmashAndGrab = exports.playstatsBcSalvage = exports.playstatsBcProtectionRacket = exports.playstatsBcPointToPoint = exports.playstatsBcMostWanted = exports.playstatsBcFindersKeepers = exports.playstatsBcCashing = exports.playstatsBcCarJacking = exports.playstatsBanAlert = exports.playstatsBackgroundScriptAction = exports.playstatsAwardXp = exports.playstatsAwardNav = exports.playstatsAwardBadSport = exports.playstatsAttritionStageEnd = exports.playstatsArenaWarsSpectator = exports.playstatsArenaWarsEnded = exports.playstatsArcadeLoveMatch = exports.playstatsArcadeGame = exports.playstatsArcadeCabinet = void 0;
exports.playstatsImpexpMissionEnded = exports.playstatsIdleKick = exports.playstatsIdle = exports.playstatsHubExit = exports.playstatsHubEntry = exports.playstatsHoldUpMissionDone = exports.playstatsHitContrabandDestroyLimit = exports.playstatsHeistSaveCheat = exports.playstatsHeist4Prep = exports.playstatsHeist4Hack = exports.playstatsHeist4Finale = exports.playstatsHeist3Prep = exports.playstatsHeist3Hack = exports.playstatsHeist3Finale = exports.playstatsHeist3Drone = exports.playstatsGunrunningRnd = exports.playstatsGunrunningMissionEnded = exports.playstatsFriendActivity = exports.playstatsFreemodeCasinoMissionEnded = exports.playstatsFmMissionEnd = exports.playstatsFmHeistPrepEnded = exports.playstatsFmEventVehicletarget = exports.playstatsFmEventUrbanwarfare = exports.playstatsFmEventPennedin = exports.playstatsFmEventPasstheparcel = exports.playstatsFmEventKingofthecastle = exports.playstatsFmEventHuntbeast = exports.playstatsFmEventHotproperty = exports.playstatsFmEventDeaddrop = exports.playstatsFmEventCriminaldamage = exports.playstatsFmEventCompetitiveurbanwarfare = exports.playstatsFmEventCheckpointcollection = exports.playstatsFmEventChallenges = exports.playstatsFmEventAtob = exports.playstatsFlowLow = exports.playstatsFastTrvl = exports.playstatsExtraEvent = exports.playstatsEnterSessionPack = exports.playstatsEarnedMcPoints = exports.playstatsDupeDetected = exports.playstatsDroneUsage = exports.playstatsDjUsage = exports.playstatsDjMissionEnded = exports.playstatsDefendContrabandMission = exports.playstatsDarCheckpoint = exports.playstatsCreateMatchHistoryId2 = exports.playstatsCrateDropMissionDone = exports.playstatsCrateCreated = exports.playstatsCopyRankIntoNewSlot = exports.playstatsCollectiblePickedUp = void 0;
exports.playstatsSmugglerMissionEnded = exports.playstatsShowroomOverview = exports.playstatsShowroomNav = exports.playstatsShopmenuNav = exports.playstatsShopItem = exports.playstatsSetJoinType = exports.playstatsSellContrabandMission = exports.playstatsRosBet = exports.playstatsRobberyPrep = exports.playstatsRobberyFinale = exports.playstatsRivalBehavior = exports.playstatsRecoverContrabandMission = exports.playstatsRankUp = exports.playstatsRandomMissionDone = exports.playstatsRandomEvent = exports.playstatsRaceToPointMissionDone = exports.playstatsRaceCheckpoint = exports.playstatsQuitMode = exports.playstatsQuickfixTool = exports.playstatsPropChange = exports.playstatsPlayerStyle = exports.playstatsPimenuHideOptions = exports.playstatsPegasusAsPersonalAircraft = exports.playstatsOddjobDone = exports.playstatsNpcPhone = exports.playstatsNpcInvite = exports.playstatsNjvsVote = exports.playstatsNightclubMissionEnded = exports.playstatsMissionVote = exports.playstatsMissionStarted = exports.playstatsMissionOver = exports.playstatsMissionEnded = exports.playstatsMissionCheckpoint = exports.playstatsMinigameUsage = exports.playstatsMcRequestBike = exports.playstatsMcKilledRivalMcMember = exports.playstatsMcFormationEnds = exports.playstatsMcClubhouseActivity = exports.playstatsMatchStarted = exports.playstatsMasterControl = exports.playstatsLeaveJobChain = exports.playstatsKillYourself = exports.playstatsJobLtsRoundEnd = exports.playstatsJobLtsEnd = exports.playstatsJobBend = exports.playstatsJobActivityEnd = exports.playstatsInventory = exports.playstatsInstancedHeistEnded = exports.playstatsInstMissionEnd = exports.playstatsImportExportMissionDone = void 0;
exports.queryMovieMeshSetState = exports.pushTimecycleModifier = exports.pulseBlip = exports.procgrassIsCullsphereEnabled = exports.procgrassEnableCullsphere = exports.procgrassEnableAmbscalescan = exports.procgrassDisableCullsphere = exports.procgrassDisableAmbscalescan = exports.processEntityAttachments = exports.processCashGift = exports.preventCollectionOfPortablePickup = exports.preventArrestStateThisFrame = exports.presetInteriorAmbientCache = exports.presenceEventUpdatestatIntWithString = exports.presenceEventUpdatestatInt = exports.presenceEventUpdatestatFloat = exports.prepareSynchronizedAudioEventForScene = exports.prepareSynchronizedAudioEvent = exports.prepareMusicEvent = exports.prepareAlarm = exports.preloadVehicleMod = exports.preloadVehicleAudioBank = exports.preloadScriptPhoneConversation = exports.preloadScriptConversation = exports.preloadCloudHat = exports.preloadBusyspinner = exports.prefetchSrl = exports.pow = exports.populateNow = exports.popTimecycleModifier = exports.popOutVehicleWindscreen = exports.popOffVehicleRoofWithImpulse = exports.pointCamAtPedBone = exports.pointCamAtEntity = exports.pointCamAtCoord = exports.plmIsInConstrainedMode = exports.plmGetConstrainedDurationMs = exports.playstatsWebsiteVisited = exports.playstatsWeaponModeChange = exports.playstatsWarehouseMissionEnded = exports.playstatsVehDel = exports.playstatsSwitchPassiveMode = exports.playstatsSwitchMcEmblem = exports.playstatsSubWeap = exports.playstatsStopTrackingStunts = exports.playstatsStoneHatchetEnded = exports.playstatsStartedSessionInOfflinemode = exports.playstatsStartTrackingStunts = exports.playstatsSpinWheel = exports.playstatsSpentPiCustomLoadout = void 0;
exports.releaseNamedScriptAudioBank = exports.releaseNamedRendertarget = exports.releaseMovieMeshSet = exports.releaseMissionAudioBank = exports.releaseControlOfFrontend = exports.releaseBinkMovie = exports.releaseAmbientAudioBank = exports.releaseAllCommerceItemImages = exports.registerWorldPointScriptBrain = exports.registerTextLabelToSave = exports.registerTextLabel63ToSave = exports.registerTextLabel31ToSave = exports.registerTextLabel23ToSave = exports.registerTextLabel15ToSave = exports.registerTarget = exports.registerScriptWithAudio = exports.registerScriptVariable = exports.registerSaveHouse = exports.registerPostfxBulletImpact = exports.registerPedheadshotTransparent = exports.registerPedheadshotHires = exports.registerPedheadshot = exports.registerObjectScriptBrain = exports.registerNoirLensEffect = exports.registerNamedRendertarget = exports.registerIntToSave = exports.registerInt64ToSave = exports.registerHatedTargetsAroundPed = exports.registerFloatToSave = exports.registerEnumToSave = exports.registerEntityForCutscene = exports.registerEffectForReplayEditor = exports.registerBoolToSave = exports.refreshWaypoint = exports.refreshPlayerListStats = exports.refreshInterior = exports.refreshClosestOceanShoreline = exports.refillAmmoInstantly = exports.recordGreatestMoment = exports.recordBrokenGlass = exports.reactivateNamedWorldBrainsWaitingTillOutOfRange = exports.reactivateNamedObjectBrainsWaitingTillOutOfRange = exports.reactivateAllWorldBrainsThatAreWaitingTillOutOfRange = exports.reactivateAllObjectBrainsThatAreWaitingTillOutOfRange = exports.raiseConvertibleRoof = exports.quitGame = exports.queueOperationToCreateSortedListOfPhotos = exports.queueMissionRepeatSaveForBenchmarkTest = exports.queueMissionRepeatSave = exports.queueMissionRepeatLoad = void 0;
exports.removeMultiplayerHudCash = exports.removeMultiplayerBankCash = exports.removeMpGamerTag = exports.removeModelSwap = exports.removeModelHide = exports.removeModelFromCreatorBudget = exports.removeIpl = exports.removeGroup = exports.removeGrassCullSphere = exports.removeFromItemset = exports.removeForcedObject = exports.removeFakeConeData = exports.removeExtraCalmingQuad = exports.removeEntityFromAudioMixGroup = exports.removeDoorFromSystem = exports.removeDispatchSpawnBlockingArea = exports.removeDecalsInRange = exports.removeDecalsFromVehicle = exports.removeDecalsFromObjectFacing = exports.removeDecalsFromObject = exports.removeDecal = exports.removeCutscene = exports.removeCutFile = exports.removeCoverPoint = exports.removeCoverBlockingAreasAtPosition = exports.removeCopBlipFromPed = exports.removeClipSet = exports.removeBlip = exports.removeAnimSet = exports.removeAnimDict = exports.removeAllStickyBombsFromEntity = exports.removeAllShockingEvents = exports.removeAllProjectilesOfType = exports.removeAllPickupsOfType = exports.removeAllPedWeapons = exports.removeAllCoverBlockingAreas = exports.removeAllAirDefenceSpheres = exports.removeAirDefenceSphere = exports.removeActionModeAsset = exports.remoteCheaterPlayerDetected = exports.remapLodscaleRangeThisFrame = exports.reloadMapMenu = exports.releaseWeaponAudio = exports.releaseSoundId = exports.releaseScriptGuidFromEntity = exports.releaseScriptAudioBank = exports.releasePreloadMods = exports.releasePedheadshotImgUpload = exports.releasePedPreloadVariationData = exports.releasePedPreloadPropData = void 0;
exports.renderScriptCams = exports.renderFakePickupGlow = exports.removeWeaponFromPed = exports.removeWeaponComponentFromWeaponObject = exports.removeWeaponComponentFromPed = exports.removeWeaponAsset = exports.removeWaypointRecording = exports.removeWarningMessageOptionItems = exports.removeVehiclesFromGeneratorsInArea = exports.removeVehicleWindow = exports.removeVehicleUpsidedownCheck = exports.removeVehicleStuckCheck = exports.removeVehicleRecording = exports.removeVehicleMod = exports.removeVehicleHighDetailModel = exports.removeVehicleCrewEmblem = exports.removeVehicleCombatAvoidanceArea = exports.removeVehicleAsset = exports.removeStealthModeAsset = exports.removeSpecificCoverBlockingAreas = exports.removeShockingEventSpawnBlockingAreas = exports.removeShockingEvent = exports.removeScriptFirePosition = exports.removeScriptFire = exports.removeScenarioBlockingAreas = exports.removeScenarioBlockingArea = exports.removeScaleformScriptHudMovie = exports.removeRoadNodeSpeedZone = exports.removeRelationshipGroup = exports.removePtfxAsset = exports.removePortalSettingsOverride = exports.removePopMultiplierSphere = exports.removePopMultiplierArea = exports.removePlayerTargetableEntity = exports.removePlayerHelmet = exports.removePickup = exports.removePickUpRopeForCargobob = exports.removePedPreferredCoverSet = exports.removePedHelmet = exports.removePedFromGroup = exports.removePedElegantly = exports.removePedDefensiveArea = exports.removeParticleFxInRange = exports.removeParticleFxFromEntity = exports.removeParticleFx = exports.removeObjectHighDetailModel = exports.removeNavmeshRequiredRegions = exports.removeNavmeshBlockingObject = exports.removeNamedPtfxAsset = exports.removeMultiplayerWalletCash = void 0;
exports.requestScaleformScriptHudMovie = exports.requestScaleformMovieWithIgnoreSuperWidescreen = exports.requestScaleformMovieSkipRenderWhilePaused = exports.requestScaleformMovieInstance = exports.requestScaleformMovie = exports.requestRagdollBoundsUpdate = exports.requestPtfxAsset = exports.requestPedheadshotImgUpload = exports.requestPedVisibilityTracking = exports.requestPedVehicleVisibilityTracking = exports.requestPedUseSmallBboxVisibilityTracking = exports.requestPedRestrictedVehicleVisibilityTracking = exports.requestPathNodesInAreaThisFrame = exports.requestNamedPtfxAsset = exports.requestModelsInRoom = exports.requestModel = exports.requestMissionAudioBank = exports.requestMenuPedModel = exports.requestIpl = exports.requestEarlyLightCheck = exports.requestCutsceneWithPlaybackList = exports.requestCutscene = exports.requestCutFile = exports.requestCommerceItemImage = exports.requestCollisionForModel = exports.requestCollisionAtCoord = exports.requestClipSet = exports.requestAnimSet = exports.requestAnimDict = exports.requestAmbientAudioBank = exports.requestAdditionalTextForDlc = exports.requestAdditionalText = exports.requestAdditionalCollisionAtCoord = exports.requestActionModeAsset = exports.reportPoliceSpottedPlayer = exports.reportCrime = exports.replaySystemHasRequestedAScriptCleanup = exports.replayStopEvent = exports.replayStartEvent = exports.replayResetEventInfo = exports.replayRecordBackForTime = exports.replayPreventRecordingThisFrame = exports.replayGetMaxDistanceAllowedFromPlayer = exports.replayDisableCameraMovementThisFrame = exports.replayControlShutdown = exports.replayCheckForEventThisFrame = exports.replayCancelEvent = exports.replaceHudColourWithRgba = exports.replaceHudColour = exports.renderShadowedLightsWithNoShadows = void 0;
exports.resetPedWeaponMovementClipset = exports.resetPedVisibleDamage = exports.resetPedStrafeClipset = exports.resetPedRagdollTimer = exports.resetPedMovementClipset = exports.resetPedLastVehicle = exports.resetPedInVehicleContext = exports.resetPedAudioFlags = exports.resetPausedRenderphases = exports.resetParticleFxOverride = exports.resetLawResponseDelayOverride = exports.resetHudComponentValues = exports.resetGroupFormationDefaultSpacing = exports.resetGlobalActionscriptFlag = exports.resetGhostAlpha = exports.resetGameplayCamFullAttachParentTransformTimer = exports.resetFormationLeader = exports.resetFacialIdleAnim = exports.resetExclusiveScenarioGroup = exports.resetEntityAlpha = exports.resetEndUserBenchmark = exports.resetDispatchTimeBetweenSpawnAttempts = exports.resetDispatchSpawnLocation = exports.resetDispatchSpawnBlockingAreas = exports.resetDispatchIdealSpawnDistance = exports.resetDisableBreaking = exports.resetDeepOceanScaler = exports.resetAiWeaponDamageModifier = exports.resetAiMeleeWeaponDamageModifier = exports.resetAdaptation = exports.reserveNetworkMissionVehicles = exports.reserveNetworkMissionPeds = exports.reserveNetworkMissionObjects = exports.reserveLocalNetworkMissionVehicles = exports.reserveLocalNetworkMissionPeds = exports.reserveLocalNetworkMissionObjects = exports.requestWeaponHighDetailModel = exports.requestWeaponAsset = exports.requestWaypointRecording = exports.requestVehicleRecording = exports.requestVehicleHighDetailModel = exports.requestVehicleDial = exports.requestVehicleAsset = exports.requestTennisBanks = exports.requestTaskMoveNetworkStateTransition = exports.requestStreamedTextureDict = exports.requestStealthModeAsset = exports.requestScriptWithNameHash = exports.requestScriptAudioBank = exports.requestScript = void 0;
exports.savemigrationMpGetAccount = exports.savemigrationIsMpEnabled = exports.saveReplayRecording = exports.saveHighQualityPhoto = exports.saveEndUserBenchmark = exports.round = exports.rotateObject = exports.ropeUnloadTextures = exports.ropeSetUpdatePinverts = exports.ropeSetUpdateOrder = exports.ropeSetSmoothReelin = exports.ropeSetRefframevelocityColliderorder = exports.ropeResetLength = exports.ropeLoadTextures = exports.ropeGetDistanceBetweenEnds = exports.ropeForceLength = exports.ropeDrawShadowEnabled = exports.ropeDrawEnabled = exports.ropeConvertToSimple = exports.ropeChangeScriptOwner = exports.ropeAttachVirtualBoundGeom = exports.ropeAreTexturesLoaded = exports.rollUpWindow = exports.rollDownWindows = exports.rollDownWindow = exports.reviveInjuredPed = exports.revertContentChangesetGroupForAll = exports.retainEntityInInterior = exports.resurrectPed = exports.restorePlayerStamina = exports.restartScriptedConversation = exports.restartGame = exports.restartFrontendMenu = exports.resetWorldBoundaryForPlayer = exports.resetWantedResponseNumPedsToSpawn = exports.resetWantedLevelHiddenEscapeTime = exports.resetWantedLevelDifficulty = exports.resetVehicleWheels = exports.resetVehicleStuckTimer = exports.resetVehicleStartupRevSound = exports.resetTrevorRage = exports.resetStoreNetworkGameTracking = exports.resetScriptGfxAlign = exports.resetScenarioTypesEnabled = exports.resetScenarioGroupsEnabled = exports.resetReticuleValues = exports.resetPlayerStamina = exports.resetPlayerInputGait = exports.resetPlayerArrestState = exports.resetPickupEntityGlow = void 0;
exports.scInboxMessageGetDataString = exports.scInboxMessageGetDataInt = exports.scInboxMessageGetDataBool = exports.scInboxMessageDoApply = exports.scInboxGetTotalNumMessages = exports.scInboxGetMessageTypeAtIndex = exports.scInboxGetMessageIsReadAtIndex = exports.scInboxGetBountyDataAtIndex = exports.scHasNewRockstarMsg = exports.scHasAchievementBeenPassed = exports.scGetNewRockstarMsg = exports.scGamerdataGetString = exports.scGamerdataGetInt = exports.scGamerdataGetFloat = exports.scGamerdataGetBool = exports.scGamerdataGetActiveXpBonus = exports.scEmailSetCurrentEmailTag = exports.scEmailSendEmail = exports.scEmailRetrieveEmails = exports.scEmailMessagePushGamerToRecipList = exports.scEmailMessageClearRecipList = exports.scEmailGetRetrievalStatus = exports.scEmailGetNumRetrievedEmails = exports.scEmailGetEmailAtIndex = exports.scEmailDeleteEmails = exports.scCommunityEventIsActiveForType = exports.scCommunityEventIsActiveById = exports.scCommunityEventIsActive = exports.scCommunityEventGetExtraDataStringForType = exports.scCommunityEventGetExtraDataStringById = exports.scCommunityEventGetExtraDataString = exports.scCommunityEventGetExtraDataIntForType = exports.scCommunityEventGetExtraDataIntById = exports.scCommunityEventGetExtraDataInt = exports.scCommunityEventGetExtraDataFloatForType = exports.scCommunityEventGetExtraDataFloatById = exports.scCommunityEventGetExtraDataFloat = exports.scCommunityEventGetEventIdForType = exports.scCommunityEventGetEventId = exports.scCommunityEventGetDisplayNameForType = exports.scCommunityEventGetDisplayNameById = exports.scCommunityEventGetDisplayName = exports.scCacheNewRockstarMsgs = exports.scAchievementInfoStatus = exports.scAccountInfoGetNickname = exports.savemigrationMpRequestStatus = exports.savemigrationMpRequestAccounts = exports.savemigrationMpNumAccounts = exports.savemigrationMpGetStatus = exports.savemigrationMpGetAccountsStatus = void 0;
exports.scriptRacePlayerHitCheckpoint = exports.scriptRaceInit = exports.scriptRaceGetPlayerSplitTime = exports.scriptOverridesWindElevation = exports.scriptIsMovingMobilePhoneOffscreen = exports.scaleformMovieMethodAddParamTextureNameString = exports.scaleformMovieMethodAddParamPlayerNameString = exports.scaleformMovieMethodAddParamLiteralString = exports.scaleformMovieMethodAddParamLatestBriefString = exports.scaleformMovieMethodAddParamInt = exports.scaleformMovieMethodAddParamFloat = exports.scaleformMovieMethodAddParamBool = exports.scTransitionNewsShowTimed = exports.scTransitionNewsShowNextItem = exports.scTransitionNewsShow = exports.scTransitionNewsHasExtraDataTu = exports.scTransitionNewsGetExtraDataIntTu = exports.scTransitionNewsEnd = exports.scProfanityGetStringStatus = exports.scProfanityGetStringPassed = exports.scProfanityGetCheckIsValid = exports.scProfanityGetCheckIsPending = exports.scProfanityCheckStringUgc = exports.scProfanityCheckString = exports.scPresenceSetActivityRating = exports.scPresenceAttrSetString = exports.scPresenceAttrSetInt = exports.scPresenceAttrSetFloat = exports.scPauseNewsShutdown = exports.scPauseNewsInitStarterPack = exports.scPauseNewsGetPendingStory = exports.scLicenseplateSetPlateData = exports.scLicenseplateIsvalid = exports.scLicenseplateGetPlateData = exports.scLicenseplateGetPlate = exports.scLicenseplateGetIsvalidStatus = exports.scLicenseplateGetIsvalidIsPending = exports.scLicenseplateGetCount = exports.scLicenseplateGetCheckIsValid = exports.scLicenseplateGetCheckIsPending = exports.scLicenseplateGetAddStatus = exports.scLicenseplateGetAddIsPending = exports.scLicenseplateCheckString = exports.scLicenseplateAdd = exports.scInboxSetMessageAsReadAtIndex = exports.scInboxSendUgcstatupdateToRecipList = exports.scInboxSendBountyToRecipList = exports.scInboxMessagePushGamerT0RecipList = exports.scInboxMessageGetUgcdata = exports.scInboxMessageGetRawTypeAtIndex = void 0;
exports.setAmbientPedRangeMultiplierThisFrame = exports.setAmbientLawPedAccuracyModifier = exports.setAllowVehicleExplodesOnContact = exports.setAllowStuntJumpCamera = exports.setAllowStreamPrologueNodes = exports.setAllowStreamHeistIslandNodes = exports.setAllowRammingSoopOrRamp = exports.setAllowMigrateToSpectator = exports.setAllowLockonToPedIfFriendly = exports.setAllowCustomVehicleDriveByCamThisUpdate = exports.setAllowCommaOnTextInput = exports.setAllowAbilityBar = exports.setAllVehicleGeneratorsActiveInArea = exports.setAllVehicleGeneratorsActive = exports.setAllRandomPedsFleeThisFrame = exports.setAllRandomPedsFlee = exports.setAllNeutralRandomPedsFleeThisFrame = exports.setAllNeutralRandomPedsFlee = exports.setAllMpGamerTagsVisibility = exports.setAllMapdataCulled = exports.setAllLowPriorityVehicleGeneratorsActive = exports.setAircraftPilotSkillNoiseScalar = exports.setAircraftIgnoreHightmapOptimisation = exports.setAirDragMultiplierForPlayersVehicle = exports.setAiWeaponDamageModifier = exports.setAiMeleeWeaponDamageModifier = exports.setAggressiveHorns = exports.setAdditionalRotationForRecordedVehiclePlayback = exports.setActivateObjectPhysicsAsSoonAsItIsUnfrozen = exports.setAchievementProgress = exports.setAbilityBarVisibility = exports.setAbilityBarValue = exports.sendTuScriptEvent = exports.sendMetricVipPoach = exports.sendMetricPunishBodyguard = exports.sendMetricGhostingToPlayer = exports.seethroughSetNoiseMin = exports.seethroughSetNoiseMax = exports.seethroughSetMaxThickness = exports.seethroughSetHilightIntensity = exports.seethroughSetHighlightNoise = exports.seethroughSetHeatscale = exports.seethroughSetFadeStartdistance = exports.seethroughSetFadeEnddistance = exports.seethroughSetColorNear = exports.seethroughReset = exports.seethroughGetMaxThickness = exports.scriptThreadIteratorReset = exports.scriptThreadIteratorGetNextThreadId = exports.scriptRaceShutdown = void 0;
exports.setBlipExtendedHeightThreshold = exports.setBlipDisplay = exports.setBlipCoords = exports.setBlipColour = exports.setBlipCategory = exports.setBlipBright = exports.setBlipAsShortRange = exports.setBlipAsMissionCreatorBlip = exports.setBlipAsMinimalOnEdge = exports.setBlipAsFriendly = exports.setBlipAlpha = exports.setBitsInRange = exports.setBit = exports.setBinkShouldSkip = exports.setBinkMovieVolume = exports.setBinkMovieTime = exports.setBinkMovieAudioFrontend = exports.setBinkMovie = exports.setBikeOnStand = exports.setBikeEasyToLand = exports.setBigmapActive = exports.setBeastJumpThisFrame = exports.setBackfaceculling = exports.setAutoGiveScubaGearWhenExitVehicle = exports.setAutoGiveParachuteWhenEnterPlane = exports.setAudioVehiclePriority = exports.setAudioSpecialEffectMode = exports.setAudioScriptCleanupTime = exports.setAudioSceneVariable = exports.setAudioFlag = exports.setArtificialVehicleLightsState = exports.setArtificialLightsState = exports.setArriveDistanceOverrideForVehiclePersuitAttack = exports.setArenaThemeAndVariationForTakenPhoto = exports.setApplyWaypointOfPlayer = exports.setAnimalMood = exports.setAnimWeight = exports.setAnimRate = exports.setAnimPhase = exports.setAnimLooped = exports.setAmmoInClip = exports.setAmbientZoneStatePersistent = exports.setAmbientZoneState = exports.setAmbientZoneListStatePersistent = exports.setAmbientZoneListState = exports.setAmbientVoiceNameHash = exports.setAmbientVoiceName = exports.setAmbientVehicleRangeMultiplierThisFrame = exports.setAmbientVehicleNeonEnabled = exports.setAmbientPedsDropMoney = void 0;
exports.setCamDofPlanes = exports.setCamDofOverriddenFocusDistanceBlendLevel = exports.setCamDofOverriddenFocusDistance = exports.setCamDofMaxNearInFocusDistanceBlendLevel = exports.setCamDofMaxNearInFocusDistance = exports.setCamDofFocusDistanceBias = exports.setCamDofFocalLengthMultiplier = exports.setCamDofFnumberOfLens = exports.setCamDebugName = exports.setCamDeathFailEffectState = exports.setCamCoord = exports.setCamControlsMiniMapHeading = exports.setCamAnimCurrentPhase = exports.setCamAffectsAiming = exports.setCamActiveWithInterp = exports.setCamActive = exports.setCalmedWaveHeightScaler = exports.setBoundsAffectWaterProbes = exports.setBoatWrecked = exports.setBoatSinksWhenWrecked = exports.setBoatRemainsAnchoredWhilePlayerIsDriver = exports.setBoatLowLodAnchorDistance = exports.setBoatIgnoreLandProbes = exports.setBoatDisableAvoidance = exports.setBoatAnchor = exports.setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame = exports.setBlockingOfNonTemporaryEvents = exports.setBlockWantedFlash = exports.setBlipUseHeightIndicatorOnEdge = exports.setBlipSprite = exports.setBlipShowCone = exports.setBlipShortHeightThreshold = exports.setBlipSecondaryColour = exports.setBlipScale2d = exports.setBlipScale = exports.setBlipRouteColour = exports.setBlipRoute = exports.setBlipRotationWithFloat = exports.setBlipRotation = exports.setBlipPriority = exports.setBlipNameToPlayerName = exports.setBlipNameFromTextFile = exports.setBlipMarkerLongDistance = exports.setBlipHighDetail = exports.setBlipHiddenOnLegend = exports.setBlipFlashesAlternate = exports.setBlipFlashes = exports.setBlipFlashTimer = exports.setBlipFlashInterval = exports.setBlipFade = void 0;
exports.setCgAtBoundcenter = exports.setCarjackMissionRemovalParameters = exports.setCargobobPickupRopeType = exports.setCargobobPickupRopeDampingMultiplier = exports.setCargobobPickupMagnetStrength = exports.setCargobobPickupMagnetSetTargetedMode = exports.setCargobobPickupMagnetSetAmbientMode = exports.setCargobobPickupMagnetReducedStrength = exports.setCargobobPickupMagnetReducedFalloff = exports.setCargobobPickupMagnetPullStrength = exports.setCargobobPickupMagnetPullRopeLength = exports.setCargobobPickupMagnetFalloff = exports.setCargobobPickupMagnetEnsurePickupEntityUpright = exports.setCargobobPickupMagnetActive = exports.setCargobobForceDontDetachVehicle = exports.setCargobobExtaPickupRange = exports.setCargobobExcludeFromPickupEntity = exports.setCarHighSpeedBumpSeverityMultiplier = exports.setCarGeneratorsCanUpdateDuringCutscene = exports.setCarBootOpen = exports.setCanUseHydraulics = exports.setCanResprayVehicle = exports.setCanPedSelectInventoryWeapon = exports.setCanPedSelectAllWeapons = exports.setCanDisplayMinimapDuringCutsceneThisUpdate = exports.setCanClimbOnEntity = exports.setCanAutoVaultOnEntity = exports.setCanAttackFriendly = exports.setCanAdjustGroundClearance = exports.setCamViewModeForContext = exports.setCamUseShallowDofMode = exports.setCamSplineSmoothingStyle = exports.setCamSplinePhase = exports.setCamSplineNodeVelocityScale = exports.setCamSplineNodeExtraFlags = exports.setCamSplineNodeEase = exports.setCamSplineDuration = exports.setCamShakeAmplitude = exports.setCamRot = exports.setCamParams = exports.setCamNearDof = exports.setCamNearClip = exports.setCamMotionBlurStrength = exports.setCamIsInsideVehicle = exports.setCamInheritRollVehicle = exports.setCamFov = exports.setCamFarDof = exports.setCamFarClip = exports.setCamDofStrength = exports.setCamDofShouldKeepLookAtTargetInFocus = void 0;
exports.setCustomRadioTrackList = exports.setCustomPickupWeaponHash = exports.setCustomMpHudColor = exports.setCursorPosition = exports.setCurrentPlayerTcmodifier = exports.setCurrentPedWeapon = exports.setCurrentPedVehicleWeapon = exports.setCurrWeatherState = exports.setCreditsFadeOutWithScreen = exports.setCreditsActive = exports.setCreateRandomCopsOnScenarios = exports.setCreateRandomCopsNotOnScenarios = exports.setCreateRandomCops = exports.setCorpseRagdollFriction = exports.setCopPerceptionOverrides = exports.setCopBlipSpriteAsStandard = exports.setCopBlipSprite = exports.setConvertibleRoofLatchState = exports.setConvertibleRoof = exports.setConversationAudioPlaceholder = exports.setConversationAudioControlledByAnim = exports.setControlValueNextFrame = exports.setControlTriggerShake = exports.setControlShakeSuppressedId = exports.setControlShake = exports.setControlLightEffectColor = exports.setContentIdIndex = exports.setCombatFloat = exports.setColourOfNextTextComponent = exports.setCloudsAlpha = exports.setCloudSettingsOverride = exports.setClockTime = exports.setClockDate = exports.setClearFreezeWaitingOnCollisionOncePlayerEnters = exports.setCinematicNewsChannelActiveThisUpdate = exports.setCinematicModeActive = exports.setCinematicCamShakeAmplitude = exports.setCinematicButtonActive = exports.setCheckpointRgba2 = exports.setCheckpointRgba = exports.setCheckpointInsideCylinderScale = exports.setCheckpointInsideCylinderHeightScale = exports.setCheckpointForceOldArrowPointing = exports.setCheckpointForceDirection = exports.setCheckpointDirection = exports.setCheckpointDecalRotAlignedToCameraRot = exports.setCheckpointCylinderHeight = exports.setCheckpointClipplaneWithPosNorm = exports.setCheckForEnoughRoomForPed = exports.setCgoffset = void 0;
exports.setDisableVehicleExplosionsDamage = exports.setDisableVehicleEngineFires = exports.setDisableTurretMovement = exports.setDisableSuperdummy = exports.setDisableRetractingWeaponBlades = exports.setDisableRandomTrainsThisFrame = exports.setDisablePretendOccupants = exports.setDisablePetrolDecalsRecyclingThisFrame = exports.setDisablePetrolDecalsIgnitingThisFrame = exports.setDisablePedStandOnTop = exports.setDisablePedMapCollision = exports.setDisableMapCollision = exports.setDisableHoverModeFlight = exports.setDisableHighFallDeath = exports.setDisableHeliExplodeFromBodyDamage = exports.setDisableFragDamage = exports.setDisableExplodeFromBodyDamageOnCollision = exports.setDisableDecalRenderingThisFrame = exports.setDisableDamageWithPickedUpEntity = exports.setDisableCollisionsBetweenCarsAndCarParachute = exports.setDisableBreaking = exports.setDisableBmxExtraTrickForces = exports.setDisableAutomaticCrashTask = exports.setDisableAmbientMeleeMove = exports.setDirectorModeLaunchedByScript = exports.setDirectorModeAvailable = exports.setDipStraightDownWhenCrashingPlane = exports.setDescriptionForUgcMissionEightStrings = exports.setDepthwriting = exports.setDeployMissileBays = exports.setDeployFoldingWings = exports.setDeepOceanScaler = exports.setDecisionMaker = exports.setDecalBulletImpactRangeScale = exports.setDebugLinesAndSpheresDrawingActive = exports.setDamping = exports.setCutscenesWeaponFlashlightOnThisFrame = exports.setCutsceneTriggerArea = exports.setCutscenePedPropVariation = exports.setCutscenePedComponentVariationFromPed = exports.setCutscenePedComponentVariation = exports.setCutsceneOriginAndOrientation = exports.setCutsceneOrigin = exports.setCutsceneMultiheadFadeManual = exports.setCutsceneMultiheadFade = exports.setCutsceneFadeValues = exports.setCutsceneEntityStreamingFlags = exports.setCutsceneCanBeSkipped = exports.setCutsceneCamFarClipThisUpdate = exports.setCutsceneAudioOverride = void 0;
exports.setEntityCoordsNoOffset = exports.setEntityCoords = exports.setEntityCompletelyDisableCollision = exports.setEntityCollision = exports.setEntityCantCauseCollisionDamagedEntity = exports.setEntityCanOnlyBeDamagedByScriptParticipants = exports.setEntityCanOnlyBeDamagedByEntity = exports.setEntityCanBeTargetedWithoutLos = exports.setEntityCanBeDamagedByRelationshipGroup = exports.setEntityCanBeDamaged = exports.setEntityAsNoLongerNeeded = exports.setEntityAsMissionEntity = exports.setEntityAnimSpeed = exports.setEntityAnimCurrentTime = exports.setEntityAngularVelocity = exports.setEntityAlwaysPrerender = exports.setEntityAlpha = exports.setEnableVehicleSlipstreaming = exports.setEnableScuba = exports.setEnablePedEnveffScale = exports.setEnableHandcuffs = exports.setEnableBoundAnkles = exports.setEmitterRadioStation = exports.setDriverRacingModifier = exports.setDriverAggressiveness = exports.setDriverAbility = exports.setDrivebyTaskTarget = exports.setDriveTaskMaxCruiseSpeed = exports.setDriveTaskDrivingStyle = exports.setDriveTaskCruiseSpeed = exports.setDriveArticulatedJointWithInflictor = exports.setDriveArticulatedJoint = exports.setDriftTyres = exports.setDrawOrigin = exports.setDoorAllowedToBeBrokenOff = exports.setDontProcessVehicleGlass = exports.setDontAllowPlayerToEnterVehicleIfLockedForPlayer = exports.setDitchPoliceModels = exports.setDistantCarsEnabled = exports.setDistanceBlurStrengthOverride = exports.setDispatchTimeBetweenSpawnAttemptsMultiplier = exports.setDispatchTimeBetweenSpawnAttempts = exports.setDispatchSpawnLocation = exports.setDispatchIdealSpawnDistance = exports.setDispatchCopsForPlayer = exports.setDisableWeaponBladeForces = exports.setDisableWantedConesResponse = exports.setDisableVerticalFlightModeTransition = exports.setDisableVehiclePetrolTankFires = exports.setDisableVehiclePetrolTankDamage = void 0;
exports.setFacialClipset = exports.setExtraTcmodifier = exports.setExposuretweak = exports.setExplosiveMeleeThisFrame = exports.setExplosiveAmmoThisFrame = exports.setExpectedCloneNextTaskMoveNetworkState = exports.setExclusiveScenarioGroup = exports.setEveryoneIgnorePlayer = exports.setEqippedWeaponStartSpinningAtFullSpeed = exports.setEntityWaterReflectionFlag = exports.setEntityVisibleInCutscene = exports.setEntityVisible = exports.setEntityVelocity = exports.setEntityUseMaxDistanceForWaterReflection = exports.setEntityTrafficlightOverride = exports.setEntitySortBias = exports.setEntityShouldFreezeWaitingOnCollision = exports.setEntityRotation = exports.setEntityRequiresMoreExpensiveRiverCheck = exports.setEntityRenderScorched = exports.setEntityRecordsCollisions = exports.setEntityQuaternion = exports.setEntityProofs = exports.setEntityOnlyDamagedByRelationshipGroup = exports.setEntityOnlyDamagedByPlayer = exports.setEntityNoweapondecals = exports.setEntityNoCollisionEntity = exports.setEntityMotionBlur = exports.setEntityMirrorReflectionFlag = exports.setEntityMaxSpeed = exports.setEntityMaxHealth = exports.setEntityLodDist = exports.setEntityLocallyVisible = exports.setEntityLocallyInvisible = exports.setEntityLoadCollisionFlag = exports.setEntityLights = exports.setEntityIsTargetPriority = exports.setEntityIsInVehicle = exports.setEntityInvincible = exports.setEntityIconVisibility = exports.setEntityIconColor = exports.setEntityHealth = exports.setEntityHeading = exports.setEntityHasGravity = exports.setEntityGhostedForGhostPlayers = exports.setEntityForNullConvPed = exports.setEntityFlagSuppressShadow = exports.setEntityFlagRenderSmallShadow = exports.setEntityDynamic = exports.setEntityCoordsWithoutPlantsReset = void 0;
exports.setForceHdVehicle = exports.setForceFootstepUpdate = exports.setForceFixLinkMatrices = exports.setFollowVehicleCamZoomLevel = exports.setFollowVehicleCamViewMode = exports.setFollowVehicleCamSeatThisUpdate = exports.setFollowVehicleCamHighAngleModeThisUpdate = exports.setFollowVehicleCamHighAngleModeEveryUpdate = exports.setFollowPedCamViewMode = exports.setFollowPedCamThisUpdate = exports.setFollowPedCamLadderAlignThisUpdate = exports.setFollowCamIgnoreAttachParentMovementThisUpdate = exports.setFocusPosAndVel = exports.setFocusEntity = exports.setFlyCamVerticalResponse = exports.setFlyCamVerticalControlsThisUpdate = exports.setFlyCamMaxHeight = exports.setFlyCamHorizontalResponse = exports.setFlyCamCoordAndConstrain = exports.setFloatingHelpTextWorldPosition = exports.setFloatingHelpTextToEntity = exports.setFloatingHelpTextStyle = exports.setFloatingHelpTextScreenPosition = exports.setFleeingVehiclesUseSwitchedOffNodes = exports.setFlashLightFadeDistance = exports.setFlashLightActiveHistory = exports.setFlash = exports.setFlammabilityMultiplier = exports.setFirstPersonShooterCameraPitch = exports.setFirstPersonShooterCameraHeading = exports.setFirstPersonFlashEffectVehicleModelName = exports.setFirstPersonFlashEffectVehicleModelHash = exports.setFirstPersonFlashEffectType = exports.setFirstPersonAimCamZoomFactorLimitsThisUpdate = exports.setFirstPersonAimCamZoomFactor = exports.setFirstPersonAimCamRelativePitchLimitsThisUpdate = exports.setFirstPersonAimCamRelativeHeadingLimitsThisUpdate = exports.setFirstPersonAimCamNearClipThisUpdate = exports.setFireAmmoThisFrame = exports.setFarDrawVehicles = exports.setFakeWantedLevel = exports.setFakeSpectatorMode = exports.setFakePausemapPlayerPositionThisFrame = exports.setFakeMinimapMaxAltimeterHeight = exports.setFakeGpsPlayerPositionThisFrame = exports.setFadeOutAfterDeath = exports.setFadeOutAfterArrest = exports.setFadeInAfterLoad = exports.setFadeInAfterDeathArrest = exports.setFacialIdleAnimOverride = void 0;
exports.setGrassCullSphere = exports.setGpsMultiRouteRender = exports.setGpsFlashes = exports.setGpsFlags = exports.setGpsDisabledZoneAtIndex = exports.setGpsDisabledZone = exports.setGpsCustomRouteRender = exports.setGpsActive = exports.setGoonBossVehicle = exports.setGlobalRadioSignalLevel = exports.setGlobalPositionOffsetForRecordedVehiclePlayback = exports.setGlobalMinBirdFlightHeight = exports.setGliderActive = exports.setGhostAlpha = exports.setGarbageTrucks = exports.setGameplayVehicleHint = exports.setGameplayPedHint = exports.setGameplayObjectHint = exports.setGameplayHintFov = exports.setGameplayHintFollowDistanceScalar = exports.setGameplayHintCameraRelativeVerticalOffset = exports.setGameplayHintCameraRelativeSideOffset = exports.setGameplayHintCameraBlendToFollowPedMediumViewMode = exports.setGameplayHintBaseOrbitPitchOffset = exports.setGameplayEntityHint = exports.setGameplayCoordHint = exports.setGameplayCamShakeAmplitude = exports.setGameplayCamRelativePitch = exports.setGameplayCamRelativeHeading = exports.setGameplayCamMotionBlurScalingThisUpdate = exports.setGameplayCamMaxMotionBlurStrengthThisUpdate = exports.setGameplayCamIgnoreEntityCollisionThisUpdate = exports.setGameplayCamFollowPedThisUpdate = exports.setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate = exports.setGameplayCamAltitudeFovScalingState = exports.setGamePausesForStreaming = exports.setGamePaused = exports.setFrontendRadioActive = exports.setFrontendActive = exports.setFreemodeStrandProgressionStatus = exports.setFreemodePrologueDone = exports.setFormationLeader = exports.setForkliftForkHeight = exports.setForcedJumpThisFrame = exports.setForceVehicleEngineDamageByBullet = exports.setForceStepType = exports.setForceShowGps = exports.setForceObjectThisFrame = exports.setForceMotionblur = exports.setForceLowLodAnchorMode = void 0;
exports.setInstancePriorityHint = exports.setInsideVerySmallInterior = exports.setInsideVeryLargeInterior = exports.setInputExclusive = exports.setInitialPlayerStation = exports.setIncreaseWheelCrushDamage = exports.setIncidentRequestedUnits = exports.setInVehicleCamStateThisUpdate = exports.setInStuntMode = exports.setInArenaMode = exports.setIkTarget = exports.setIgnorePlanesSmallPitchChange = exports.setIgnoreNoGpsFlagUntilFirstNormalNode = exports.setIgnoreNoGpsFlag = exports.setIgnoreLowPriorityShockingEvents = exports.setIdealSpawnDistanceForIncident = exports.setHydraulicsControl = exports.setHydraulicWheelState = exports.setHydraulicVehicleState = exports.setHydraulicSuspensionRaiseFactor = exports.setHudComponentPosition = exports.setHoverModeWingRatio = exports.setHornPermanentlyOnTime = exports.setHornPermanentlyOn = exports.setHornEnabled = exports.setHighFallTask = exports.setHidofOverride = exports.setHelpMessageStyle = exports.setHeliTurbulenceScalar = exports.setHeliTailRotorHealth = exports.setHeliTailBoomCanBreakOff = exports.setHeliResistToExplosion = exports.setHeliMainRotorHealth = exports.setHeliControlLaggingRateScalar = exports.setHeliCombatOffset = exports.setHeliCanPickupEntityThatHasPickUpDisabled = exports.setHeliBladesSpeed = exports.setHeliBladesFullSpeed = exports.setHealthSnacksCarriedByAllNewPeds = exports.setHealthHudDisplayValues = exports.setHeadBlendPaletteColor = exports.setHeadBlendEyeColor = exports.setHdArea = exports.setHasSpecialeditionContent = exports.setHasPostedAllVehiclesDriven = exports.setGroupSeparationRange = exports.setGroupFormationSpacing = exports.setGroupFormation = exports.setGroundEffectReducesDrag = exports.setGravityLevel = void 0;
exports.setMobilePhonePosition = exports.setMobilePhoneDofState = exports.setMissionTrainCoords = exports.setMissionTrainAsNoLongerNeeded = exports.setMissionNameForUgcMission = exports.setMissionName = exports.setMissionFlag = exports.setMinimapSonarSweep = exports.setMinimapInSpectatorMode = exports.setMinimapInPrologue = exports.setMinimapHideFow = exports.setMinimapGolfCourseOff = exports.setMinimapGolfCourse = exports.setMinimapFowRevealCoordinate = exports.setMinimapFowDoNotUpdate = exports.setMinimapComponent = exports.setMinimapBlockWaypoint = exports.setMinigameInProgress = exports.setMicrophonePosition = exports.setMaxWantedLevel = exports.setMaxNumPortablePickupsCarriedByPlayer = exports.setMaxHealthHudDisplay = exports.setMaxArmourHudDisplay = exports.setMapdatacullboxEnabled = exports.setLockedUnstreamedInDoorOfType = exports.setLockAdaptiveDofDistance = exports.setLocalPlayerVisibleLocally = exports.setLocalPlayerVisibleInCutscene = exports.setLocalPlayerPermittedToCollectPickupsWithModel = exports.setLocalPlayerInvisibleLocally = exports.setLocalPlayerCanCollectPortablePickups = exports.setLocalPlayerAsGhost = exports.setLightsCutoffDistanceTweak = exports.setLightOverrideMaxIntensityScale = exports.setLawResponseDelayOverride = exports.setLawPedsCanAttackNonWantedPlayerThisFrame = exports.setLastViewedShopItem = exports.setLastDrivenVehicle = exports.setLadderClimbInputState = exports.setJobActivityIdStarted = exports.setIslandEnabled = exports.setIsObjectBall = exports.setIsObjectArticulated = exports.setIsExteriorOnly = exports.setInvertVehicleControls = exports.setInvertGhosting = exports.setInteriorInUse = exports.setInteriorEntitySetTintIndex = exports.setInteriorActive = exports.setInstancePriorityMode = void 0;
exports.setObjectAllowLowLodBuoyancy = exports.setNumberOfParkedVehicles = exports.setNonParticipantsOfThisScriptAsGhosts = exports.setNoisinessoveride = exports.setNoiseoveride = exports.setNoLoadingScreen = exports.setNoDuckingForConversation = exports.setNightvision = exports.setNextRadioTrack = exports.setNextPlayerTcmodifier = exports.setNextDesiredMoveState = exports.setNewWaypoint = exports.setNetworkVehicleRespotTimer = exports.setNetworkVehicleMaxPositionDeltaMultiplier = exports.setNetworkVehicleAsGhost = exports.setNetworkIdVisibleInCutsceneRemainHack = exports.setNetworkIdVisibleInCutsceneHack = exports.setNetworkIdVisibleInCutscene = exports.setNetworkIdPassControlInTutorial = exports.setNetworkIdExistsOnAllMachines = exports.setNetworkIdCanMigrate = exports.setNetworkIdCanBeReassigned = exports.setNetworkIdAlwaysExistsForPlayer = exports.setNetworkEnableHighSpeedEdgeFallDetection = exports.setNetworkCutsceneEntities = exports.setMultiplayerWalletCash = exports.setMultiplayerHudCash = exports.setMultiplayerBankCash = exports.setMpGamerTagsShouldUseVehicleHealth = exports.setMpGamerTagsShouldUsePointsHealth = exports.setMpGamerTagsPointHealth = exports.setMpGamerTagWantedLevel = exports.setMpGamerTagVisibility = exports.setMpGamerTagNumPackages = exports.setMpGamerTagName = exports.setMpGamerTagHealthBarColour = exports.setMpGamerTagColour = exports.setMpGamerTagBigText = exports.setMpGamerTagAlpha = exports.setMovementModeOverride = exports.setMouseCursorVisible = exports.setMouseCursorThisFrame = exports.setMouseCursorStyle = exports.setMountedWeaponTarget = exports.setMotionblurMaxVelScaler = exports.setModelAsNoLongerNeeded = exports.setMobileRadioEnabledDuringGameplay = exports.setMobilePhoneScale = exports.setMobilePhoneRotation = exports.setMobilePhoneRadioState = void 0;
exports.setPauseMenuActive = exports.setPauseExteriorRenderingWhileInInterior = exports.setParticleFxSlipstreamLodrangeScale = exports.setParticleFxShootoutBoat = exports.setParticleFxOverride = exports.setParticleFxNonLoopedScale = exports.setParticleFxNonLoopedEmitterSize = exports.setParticleFxNonLoopedColour = exports.setParticleFxNonLoopedAlpha = exports.setParticleFxLoopedScale = exports.setParticleFxLoopedOffsets = exports.setParticleFxLoopedFarClipDist = exports.setParticleFxLoopedEvolution = exports.setParticleFxLoopedColour = exports.setParticleFxLoopedAlpha = exports.setParticleFxForceVehicleInterior = exports.setParticleFxFootOverrideName = exports.setParticleFxFootLodrangeScale = exports.setParticleFxCamInsideVehicle = exports.setParticleFxCamInsideNonplayerVehicle = exports.setParticleFxBulletTraceNoAngleReject = exports.setParticleFxBulletImpactScale = exports.setParticleFxBulletImpactLodrangeScale = exports.setParticleFxBloodScale = exports.setParticleFxBangScrapeLodrangeScale = exports.setParkedVehicleDensityMultiplierThisFrame = exports.setParachuteTaskThrust = exports.setParachuteTaskTarget = exports.setPadCanShakeDuringCutscene = exports.setPackedStatIntCode = exports.setPackedStatBoolCode = exports.setOverrideWeatherex = exports.setOverrideWeather = exports.setOverrideVehicleDoorTorque = exports.setOverrideNitrousLevel = exports.setOpenRearDoorsOnExplosion = exports.setOnlyAllowAmmoCollectionWhenLow = exports.setOnIslandXForTakenPhoto = exports.setObjectTintIndex = exports.setObjectTargettable = exports.setObjectTakesDamageFromCollidingWithBuildings = exports.setObjectSpeedBoostDuration = exports.setObjectSpeedBoostAmount = exports.setObjectPhysicsParams = exports.setObjectIsVisibleInMirrors = exports.setObjectIsSpecialGolfball = exports.setObjectIsAPressurePlate = exports.setObjectGlowInSameTeam = exports.setObjectForceVehiclesToAvoid = exports.setObjectAsNoLongerNeeded = void 0;
exports.setPedCanPlayInCarIdles = exports.setPedCanPlayGestureAnims = exports.setPedCanPlayAmbientIdles = exports.setPedCanPlayAmbientBaseAnims = exports.setPedCanPlayAmbientAnims = exports.setPedCanPeekInCover = exports.setPedCanLosePropsOnDamage = exports.setPedCanLegIk = exports.setPedCanHeadIk = exports.setPedCanEvasiveDive = exports.setPedCanCowerInCover = exports.setPedCanBeTargettedByTeam = exports.setPedCanBeTargettedByPlayer = exports.setPedCanBeTargetted = exports.setPedCanBeTargetedWithoutLos = exports.setPedCanBeTargetedWhenInjured = exports.setPedCanBeShotInVehicle = exports.setPedCanBeKnockedOffVehicle = exports.setPedCanBeKnockedOffBike = exports.setPedCanBeDraggedOut = exports.setPedCanArmIk = exports.setPedBoundsOrientation = exports.setPedBlocksPathingWhenDead = exports.setPedBlendFromParents = exports.setPedAsNoLongerNeeded = exports.setPedAsGroupMember = exports.setPedAsGroupLeader = exports.setPedAsEnemy = exports.setPedAsCop = exports.setPedArmour = exports.setPedAoBlobRendering = exports.setPedAngledDefensiveArea = exports.setPedAmmoToDrop = exports.setPedAmmoByType = exports.setPedAmmo = exports.setPedAlternateWalkAnim = exports.setPedAlternateMovementAnim = exports.setPedAllowedToDuck = exports.setPedAllowVehiclesOverride = exports.setPedAllowMinorReactionsAsMissionPed = exports.setPedAllowHurtCombatForAllMissionPeds = exports.setPedAlertness = exports.setPedAiBlipSprite = exports.setPedAiBlipNoticeRange = exports.setPedAiBlipHasCone = exports.setPedAiBlipGangId = exports.setPedAiBlipForcedOn = exports.setPedAccuracy = exports.setPauseMenuPedSleepState = exports.setPauseMenuPedLighting = void 0;
exports.setPedEnveffCpvAdd = exports.setPedEnveffColorModulator = exports.setPedEnableWeaponBlocking = exports.setPedEnableCrewEmblem = exports.setPedEmissiveScale = exports.setPedDucking = exports.setPedDropsWeaponsWhenDead = exports.setPedDropsWeapon = exports.setPedDropsInventoryWeapon = exports.setPedDriveByClipsetOverride = exports.setPedDiesWhenInjured = exports.setPedDiesInstantlyInWater = exports.setPedDiesInWater = exports.setPedDiesInVehicle = exports.setPedDiesInSinkingVehicle = exports.setPedDesiredMoveBlendRatio = exports.setPedDesiredHeading = exports.setPedDensityMultiplierThisFrame = exports.setPedDefensiveSphereAttachedToVehicle = exports.setPedDefensiveSphereAttachedToPed = exports.setPedDefensiveAreaDirection = exports.setPedDefensiveAreaAttachedToPed = exports.setPedDefaultComponentVariation = exports.setPedCycleVehicleWeaponsOnly = exports.setPedCurrentWeaponVisible = exports.setPedCowerHash = exports.setPedCoordsNoGang = exports.setPedCoordsKeepVehicle = exports.setPedConfigFlag = exports.setPedComponentVariation = exports.setPedCombatRange = exports.setPedCombatMovement = exports.setPedCombatAttributes = exports.setPedCombatAbility = exports.setPedClothProne = exports.setPedClothPinFrames = exports.setPedClothPackageIndex = exports.setPedClothEventsEnabled = exports.setPedChanceOfFiringBlanks = exports.setPedCapsule = exports.setPedCanUseAutoConversationLookat = exports.setPedCanTorsoVehicleIk = exports.setPedCanTorsoReactIk = exports.setPedCanTorsoIk = exports.setPedCanTeleportToGroupLeader = exports.setPedCanSwitchWeapon = exports.setPedCanSmashGlass = exports.setPedCanRagdollFromPlayerImpact = exports.setPedCanRagdoll = exports.setPedCanPlayVisemeAnims = void 0;
exports.setPedMotionBlur = exports.setPedMoney = exports.setPedModelIsSuppressed = exports.setPedMinMoveBlendRatio = exports.setPedMinGroundTimeForStungun = exports.setPedMicroMorph = exports.setPedMaxTimeUnderwater = exports.setPedMaxTimeInWater = exports.setPedMaxMoveBlendRatio = exports.setPedMaxHealth = exports.setPedLodMultiplier = exports.setPedLegIkMode = exports.setPedKeepTask = exports.setPedIsIgnoredByAutoOpenDoors = exports.setPedIsDrunk = exports.setPedIsAvoidedByOthers = exports.setPedIntoVehicle = exports.setPedInteriorWallaDensity = exports.setPedInjuredOnGroundBehaviour = exports.setPedInfiniteAmmoClip = exports.setPedInfiniteAmmo = exports.setPedIncreasedAvoidanceRadius = exports.setPedInVehicleContext = exports.setPedIdRange = exports.setPedHighlyPerceptive = exports.setPedHelmetVisorPropIndices = exports.setPedHelmetTextureIndex = exports.setPedHelmetPropIndex = exports.setPedHelmetFlag = exports.setPedHelmet = exports.setPedHeatscaleOverride = exports.setPedHearingRange = exports.setPedHealthPendingLastDamageEventOverrideFlag = exports.setPedHeadOverlayTint = exports.setPedHeadOverlay = exports.setPedHeadBlendData = exports.setPedHasAiBlipWithColour = exports.setPedHasAiBlip = exports.setPedHairTint = exports.setPedGroupMemberPassengerIndex = exports.setPedGravity = exports.setPedGetOutUpsideDownVehicle = exports.setPedGestureGroup = exports.setPedGeneratesDeadBodyEvents = exports.setPedGender = exports.setPedGadget = exports.setPedFootstepsEventsEnabled = exports.setPedFleeAttributes = exports.setPedFiringPattern = exports.setPedEnveffScale = void 0;
exports.setPedShouldProbeForScenarioExitsInOneFrame = exports.setPedShouldPlayNormalScenarioExit = exports.setPedShouldPlayImmediateScenarioExit = exports.setPedShouldPlayFleeScenarioExit = exports.setPedShouldPlayDirectedNormalScenarioExit = exports.setPedShouldIgnoreScenarioNavChecks = exports.setPedShouldIgnoreScenarioExitCollisionChecks = exports.setPedShootsAtCoord = exports.setPedShootRate = exports.setPedShootOrdnanceWeapon = exports.setPedSeeingRange = exports.setPedScubaGearVariation = exports.setPedResetFlag = exports.setPedReserveParachuteTintIndex = exports.setPedRelationshipGroupHash = exports.setPedRelationshipGroupDefaultHash = exports.setPedRandomProps = exports.setPedRandomComponentVariation = exports.setPedRagdollOnCollision = exports.setPedRagdollForceFall = exports.setPedRaceAndVoiceGroup = exports.setPedPropIndex = exports.setPedPrimaryLookat = exports.setPedPreloadVariationData = exports.setPedPreloadPropData = exports.setPedPreferredCoverSet = exports.setPedPopulationBudget = exports.setPedPlaysHeadOnHornAnimWhenDiesInVehicle = exports.setPedPinnedDown = exports.setPedPhonePaletteIdx = exports.setPedPathsInArea = exports.setPedPathsBackToOriginal = exports.setPedPathPreferToAvoidWater = exports.setPedPathMayEnterWater = exports.setPedPathClimbCostModifier = exports.setPedPathCanUseLadders = exports.setPedPathCanUseClimbovers = exports.setPedPathCanDropFromHeight = exports.setPedPathAvoidFire = exports.setPedParachuteTintIndex = exports.setPedPanicExitScenario = exports.setPedNonCreationArea = exports.setPedNoTimeDelayBeforeShot = exports.setPedNeverLeavesGroup = exports.setPedNameDebug = exports.setPedMovementClipset = exports.setPedMoveRateOverride = exports.setPedMoveRateInWaterOverride = exports.setPedMoveAnimsBlendOut = exports.setPedMotionInCoverClipsetOverride = void 0;
exports.setPickupObjectGlowOffset = exports.setPickupObjectCollectableInVehicle = exports.setPickupObjectArrowMarker = exports.setPickupObjectAlphaWhenTransparent = exports.setPickupHiddenWhenUncollectable = exports.setPickupGlowOffset = exports.setPickupGenerationRangeMultiplier = exports.setPickupCollidesWithProjectiles = exports.setPickupAmmoAmountScaler = exports.setPickUpByCargobobDisabled = exports.setPedsCanFallOffThisVehicleFromLargeFallDamage = exports.setPedWillOnlyAttackWantedPlayer = exports.setPedWetnessHeight = exports.setPedWetnessEnabledThisFrame = exports.setPedWetness = exports.setPedWeaponTintIndex = exports.setPedWeaponMovementClipset = exports.setPedWeaponComponentTintIndex = exports.setPedWaypointRouteOffset = exports.setPedWallaDensity = exports.setPedVoiceGroupFromRaceToPvg = exports.setPedVoiceGroup = exports.setPedVoiceFull = exports.setPedVisualFieldPeripheralRange = exports.setPedVisualFieldMinElevationAngle = exports.setPedVisualFieldMinAngle = exports.setPedVisualFieldMaxElevationAngle = exports.setPedVisualFieldMaxAngle = exports.setPedVisualFieldCenterAngle = exports.setPedVehicleForcedSeatUsage = exports.setPedUsingActionMode = exports.setPedUpperBodyDamageOnly = exports.setPedTreatedAsFriendly = exports.setPedToRagdollWithFall = exports.setPedToRagdoll = exports.setPedToLoadCover = exports.setPedToInformRespectedFriends = exports.setPedTargetLossResponse = exports.setPedSweat = exports.setPedSuffersCriticalHits = exports.setPedStunGunFiniteAmmo = exports.setPedStrafeClipset = exports.setPedSteersAroundVehicles = exports.setPedSteersAroundPeds = exports.setPedSteersAroundObjects = exports.setPedSteersAroundDeadBodies = exports.setPedSteerBias = exports.setPedStealthMovement = exports.setPedStayInVehicleWhenJacked = exports.setPedSphereDefensiveArea = void 0;
exports.setPlayerMayNotEnterAnyVehicle = exports.setPlayerMaxExplosiveDamage = exports.setPlayerMaxArmour = exports.setPlayerLockonRangeOverride = exports.setPlayerLockon = exports.setPlayerLeavePedBehind = exports.setPlayerIsRepeatingAMission = exports.setPlayerIsInDirectorMode = exports.setPlayerIsInAnimalForm = exports.setPlayerInvisibleLocally = exports.setPlayerInvincibleButHasReactions = exports.setPlayerInvincible = exports.setPlayerIconColour = exports.setPlayerHomingDisabledForAllVehicleWeapons = exports.setPlayerHealthRechargeMultiplier = exports.setPlayerHealthRechargeMaxPercent = exports.setPlayerHasReserveParachute = exports.setPlayerForcedZoom = exports.setPlayerForcedAim = exports.setPlayerForceSkipAimIntro = exports.setPlayerFallDistanceToTriggerRagdollOverride = exports.setPlayerExplosiveDamageModifier = exports.setPlayerControl = exports.setPlayerClothPinFrames = exports.setPlayerClothPackageIndex = exports.setPlayerClothLockCounter = exports.setPlayerCanUseCover = exports.setPlayerCanLeaveParachuteSmokeTrail = exports.setPlayerCanDoDriveBy = exports.setPlayerCanDamagePlayer = exports.setPlayerCanCollectDroppedMoney = exports.setPlayerCanBeHassledByGangs = exports.setPlayerBluetoothState = exports.setPlayerAngry = exports.setPlaybackToUseAiTryToRevertBackLater = exports.setPlaybackToUseAi = exports.setPlaybackSpeed = exports.setPlaneTurbulenceMultiplier = exports.setPlaneSectionDamageScale = exports.setPlaneResistToExplosion = exports.setPlanePropellerHealth = exports.setPlaneEngineHealth = exports.setPickupUncollectable = exports.setPickupTransparentWhenUncollectable = exports.setPickupTrackDamageEvents = exports.setPickupRopeLengthWithoutCreatingRopeForCargobob = exports.setPickupRopeLengthForCargobob = exports.setPickupRegenerationTime = exports.setPickupObjectTransparentWhenUncollectable = exports.setPickupObjectGlowWhenUncollectable = void 0;
exports.setPopControlSphereThisFrame = exports.setPoliceRadarBlips = exports.setPoliceIgnorePlayer = exports.setPoliceFocusWillTrackVehicle = exports.setPmWarningscreenActive = exports.setPlayersLastVehicle = exports.setPlayerpadShakesWhenControllerDisabled = exports.setPlayerWeaponTakedownDefenseModifier = exports.setPlayerWeaponMinigunDefenseModifier = exports.setPlayerWeaponDefenseModifier = exports.setPlayerWeaponDamageModifier = exports.setPlayerWantedLevelNow = exports.setPlayerWantedLevelNoDrop = exports.setPlayerWantedLevel = exports.setPlayerWantedCentrePosition = exports.setPlayerVisibleLocally = exports.setPlayerVehicleWeaponToNonHoming = exports.setPlayerVehicleDefenseModifier = exports.setPlayerVehicleDamageModifier = exports.setPlayerVehicleAlarmAudioActive = exports.setPlayerUnderwaterBreathPercentRemaining = exports.setPlayerTeam = exports.setPlayerTcmodifierTransition = exports.setPlayerTargettableForAirDefenceSphere = exports.setPlayerTargetingMode = exports.setPlayerTargetLevel = exports.setPlayerSwitchOutro = exports.setPlayerSwitchEstablishingShot = exports.setPlayerStealthPerceptionModifier = exports.setPlayerSprint = exports.setPlayerSpectatedVehicleRadioOverride = exports.setPlayerSneakingNoiseMultiplier = exports.setPlayerSimulateAiming = exports.setPlayerShortSwitchStyle = exports.setPlayerReserveParachuteTintIndex = exports.setPlayerReserveParachuteModelOverride = exports.setPlayerPreviousVariationData = exports.setPlayerPhonePaletteIdx = exports.setPlayerPermittedToCollectPickupsOfType = exports.setPlayerParachuteVariationOverride = exports.setPlayerParachuteTintIndex = exports.setPlayerParachuteSmokeTrailColor = exports.setPlayerParachutePackTintIndex = exports.setPlayerParachutePackModelOverride = exports.setPlayerParachuteModelOverride = exports.setPlayerNoiseMultiplier = exports.setPlayerModel = exports.setPlayerMeleeWeaponDefenseModifier = exports.setPlayerMeleeWeaponDamageModifier = exports.setPlayerMayOnlyEnterThisVehicle = void 0;
exports.setRenderHdOnly = exports.setRemotePlayerVisibleInCutscene = exports.setRemotePlayerAsGhost = exports.setRelationshipGroupAffectsWantedLevel = exports.setRelationshipBetweenGroups = exports.setReducedSuspensionForce = exports.setReduceVehicleModelBudget = exports.setReducePedModelBudget = exports.setRandomWeatherType = exports.setRandomVehicleDensityMultiplierThisFrame = exports.setRandomTrains = exports.setRandomSeed = exports.setRandomEventFlag = exports.setRandomBoatsMp = exports.setRandomBoats = exports.setRain = exports.setRagdollBlockingFlags = exports.setRadiusBlipEdge = exports.setRadioTrackWithStartOffset = exports.setRadioTrack = exports.setRadioToStationName = exports.setRadioToStationIndex = exports.setRadioStationMusicOnly = exports.setRadioStationAsFavourite = exports.setRadioRetuneUp = exports.setRadioRetuneDown = exports.setRadioPositionAudioMute = exports.setRadioFrontendFadeTime = exports.setRadioAutoUnfreeze = exports.setRadarZoomToDistance = exports.setRadarZoomToBlip = exports.setRadarZoomPrecise = exports.setRadarZoom = exports.setRadarAsInteriorThisFrame = exports.setRadarAsExteriorThisFrame = exports.setRaceTrackRender = exports.setPtfxForceVehicleInteriorFlag = exports.setPropTintIndex = exports.setPropLightColor = exports.setProjectilesShouldExplodeOnContact = exports.setProfileSettingSpChopMissionComplete = exports.setProfileSettingPrologueComplete = exports.setProfileSettingCreatorRacesDone = exports.setProfileSettingCreatorDmDone = exports.setProfileSettingCreatorCtfDone = exports.setPositionedPlayerVehicleRadioEmitterEnabled = exports.setPositionOffsetForRecordedVehiclePlayback = exports.setPositionForNullConvPed = exports.setPortalSettingsOverride = exports.setPortablePickupPersist = void 0;
exports.setShortSlowdownForLanding = exports.setSequenceToRepeat = exports.setSeethrough = exports.setSecondScriptVariableHudColour = exports.setScriptsHaveCleanedUpForReplaySystem = exports.setScriptedConversionCoordThisFrame = exports.setScriptedCameraIsFirstPersonThisFrame = exports.setScriptedAnimSeatOffset = exports.setScriptWithNameHashAsNoLongerNeeded = exports.setScriptVehicleGenerator = exports.setScriptVariableHudColour = exports.setScriptUpdateDoorAudio = exports.setScriptRocketBoostRechargeTime = exports.setScriptRampImpulseScale = exports.setScriptHighPrio = exports.setScriptGfxDrawOrder = exports.setScriptGfxDrawBehindPausemenu = exports.setScriptGfxAlignParams = exports.setScriptGfxAlign = exports.setScriptFirePosition = exports.setScriptCanStartCutscene = exports.setScriptAsNoLongerNeeded = exports.setSceneStreamingTracksCamPosThisFrame = exports.setScenarioTypeEnabled = exports.setScenarioPedsToBeReturnedByNextCommand = exports.setScenarioPedsSpawnInSphereArea = exports.setScenarioPedDensityMultiplierThisFrame = exports.setScenarioGroupEnabled = exports.setScaleformMovieToUseSystemTime = exports.setScaleformMovieToUseSuperLargeRt = exports.setScaleformMovieToUseLargeRt = exports.setScaleformMovieAsNoLongerNeeded = exports.setSavegameListUniqueId = exports.setSaveMigrationTransactionIdWarning = exports.setSaveMenuActive = exports.setSaveHouse = exports.setRunSprintMultiplierForPlayer = exports.setRoomForGameViewportByName = exports.setRoomForGameViewportByKey = exports.setRocketBoostFill = exports.setRocketBoostActive = exports.setRoadsInArea = exports.setRoadsInAngledArea = exports.setRoadsBackToOriginalInAngledArea = exports.setRoadsBackToOriginal = exports.setRiotModeEnabled = exports.setRestoreFocusEntity = exports.setRestartCoordOverride = exports.setReplaySystemPausedForSave = exports.setRenderTrainAsDerailed = void 0;
exports.setTennisMoveNetworkSignalFloat = exports.setTeamPickupObject = exports.setTaxiLights = exports.setTaskVehicleGotoPlaneMinHeightAboveTerrain = exports.setTaskVehicleChaseIdealPursuitDistance = exports.setTaskVehicleChaseBehaviorFlag = exports.setTaskMoveNetworkSignalLocalFloat = exports.setTaskMoveNetworkSignalFloatLerpRate = exports.setTaskMoveNetworkSignalFloat = exports.setTaskMoveNetworkSignalBool = exports.setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed = exports.setTaskMoveNetworkAnimSet = exports.setTakenPhotoIsMugshot = exports.setTableGamesCameraThisUpdate = exports.setSynchronizedSceneRate = exports.setSynchronizedScenePhase = exports.setSynchronizedSceneOrigin = exports.setSynchronizedSceneLooped = exports.setSynchronizedSceneHoldLastFrame = exports.setSwimMultiplierForPlayer = exports.setSuperJumpThisFrame = exports.setSubmarineCrushDepths = exports.setStuntJumpsCanTrigger = exports.setStreaming = exports.setStreamedTextureDictAsNoLongerNeeded = exports.setStoreEnabled = exports.setStaticEmitterEnabled = exports.setStateOfRayfireMapObject = exports.setStateOfClosestDoorOfType = exports.setSrlTime = exports.setSrlReadaheadTimes = exports.setSrlPostCutsceneCamera = exports.setSrlLongJumpMode = exports.setSrlForcePrestream = exports.setSpeedBoostEffectDisabled = exports.setSpecialFlightModeTargetRatio = exports.setSpecialFlightModeRatio = exports.setSpecialFlightModeAllowed = exports.setSpecialAbilityMultiplier = exports.setSpecialAbilityMp = exports.setSocialClubTour = exports.setSnow = exports.setSlowDownEffectDisabled = exports.setSkipMinigunSpinUpAudio = exports.setSkidmarkRangeScale = exports.setSirenWithNoDriver = exports.setSirenCanBeControlledByAudio = exports.setSirenBypassMpDriverCheck = exports.setShouldResetTurretInScriptedCameras = exports.setShouldLerpFromAiToFullRecording = void 0;
exports.setTyreMaximumGripDifferenceDueToWearRate = exports.setTyreHealth = exports.setTvVolume = exports.setTvPlayerWatchingThisFrame = exports.setTvChannelPlaylistAtHour = exports.setTvChannelPlaylist = exports.setTvChannel = exports.setTvAudioFrontend = exports.setTurretHidden = exports.setTreatAsAmbientPedForDriverLockon = exports.setTransitionTimecycleModifier = exports.setTransitionOutOfTimecycleModifier = exports.setTransformToSubmarineUsesAlternateInput = exports.setTransformRateForAnimation = exports.setTrainTrackSpawnFrequency = exports.setTrainSpeed = exports.setTrainCruiseSpeed = exports.setTrailerLegsRaised = exports.setTrailerLegsLowered = exports.setTrailerInverseMassScale = exports.setTrailerAttachmentEnabled = exports.setTrackedPointInfo = exports.setTintIndexClosestBuildingOfType = exports.setTimecycleModifierStrength = exports.setTimecycleModifier = exports.setTimeScale = exports.setTickerJohnmarstonIsDone = exports.setThisThreadPriority = exports.setThisScriptCanRemoveBlipsCreatedByAnyScript = exports.setThisScriptCanBePaused = exports.setThisIsATriggerScript = exports.setThirdPersonCamRelativePitchLimitsThisUpdate = exports.setThirdPersonCamRelativeHeadingLimitsThisUpdate = exports.setThirdPersonCamOrbitDistanceLimitsThisUpdate = exports.setThirdPersonAimCamNearClipThisUpdate = exports.setTextWrap = exports.setTextScale = exports.setTextRightJustify = exports.setTextRenderId = exports.setTextProportional = exports.setTextOutline = exports.setTextLeading = exports.setTextJustification = exports.setTextInputBoxEnabled = exports.setTextFont = exports.setTextEdge = exports.setTextDropshadow = exports.setTextDropShadow = exports.setTextColour = exports.setTextCentre = void 0;
exports.setVehicleCanEjectPassengersIfLocked = exports.setVehicleCanDeformWheels = exports.setVehicleCanBreak = exports.setVehicleCanBeVisiblyDamaged = exports.setVehicleCanBeUsedByFleeingPeds = exports.setVehicleCanBeTargetted = exports.setVehicleBurnout = exports.setVehicleBulldozerArmPosition = exports.setVehicleBrokenPartsDontAffectAiHandling = exports.setVehicleBrakeLights = exports.setVehicleBrake = exports.setVehicleBoostActive = exports.setVehicleBombAmmo = exports.setVehicleBodyHealth = exports.setVehicleBobbleheadVelocity = exports.setVehicleBlipThrottleRandomly = exports.setVehicleAvoidPlayerVehicleRiotVanMission = exports.setVehicleAutomaticallyAttaches = exports.setVehicleAudioEngineDamageFactor = exports.setVehicleAudioBodyDamageFactor = exports.setVehicleAsNoLongerNeeded = exports.setVehicleAllowNoPassengersLockon = exports.setVehicleAllowHomingMissleLockonSynced = exports.setVehicleAllowHomingMissleLockon = exports.setVehicleAlarm = exports.setVehicleAiCanUseExclusiveSeats = exports.setVehicleActiveForPedNavigation = exports.setVehicleActiveDuringPlayback = exports.setVehicleActAsIfHighSpeedForFragSmashing = exports.setVehicleActAsIfHasSirenOn = exports.setVehRadioStation = exports.setVehHasNormalRadio = exports.setVehForcedRadioThisFrame = exports.setVariableOnUnderWaterStream = exports.setVariableOnSynchSceneAudio = exports.setVariableOnStream = exports.setVariableOnSound = exports.setUserRadioControlEnabled = exports.setUseSetDestinationInPauseMap = exports.setUseKinematicPhysics = exports.setUseIslandMap = exports.setUseHigherCarJump = exports.setUseHiDofOnSyncedSceneThisUpdate = exports.setUseHiDof = exports.setUseDoubleClickForCarJump = exports.setUseDesiredZCruiseSpeedForLanding = exports.setUseCameraHeadingForDesiredDirectionLockOnTest = exports.setUseAdjustedMouseCoords = exports.setTyreWearRateScale = exports.setTyreWearRate = void 0;
exports.setVehicleExtra = exports.setVehicleExtendedRemovalRange = exports.setVehicleExplodesOnHighExplosionDamage = exports.setVehicleExplodesOnExplosionDamageAtZeroBodyHealth = exports.setVehicleExclusiveDriver = exports.setVehicleEnveffScale = exports.setVehicleEngineOn = exports.setVehicleEngineHealth = exports.setVehicleEngineCanDegrade = exports.setVehicleDropsMoneyWhenBlownUp = exports.setVehicleDoorsShut = exports.setVehicleDoorsLockedForTeam = exports.setVehicleDoorsLockedForPlayer = exports.setVehicleDoorsLockedForNonScriptPlayers = exports.setVehicleDoorsLockedForAllTeams = exports.setVehicleDoorsLockedForAllPlayers = exports.setVehicleDoorsLocked = exports.setVehicleDoorShut = exports.setVehicleDoorOpen = exports.setVehicleDoorLatched = exports.setVehicleDoorControl = exports.setVehicleDoorBroken = exports.setVehicleDoorAutoLock = exports.setVehicleDontTerminateTaskWhenAchieved = exports.setVehicleDisableTowing = exports.setVehicleDisableHeightMapAvoidance = exports.setVehicleDisableCollisionUponCreation = exports.setVehicleDirtLevel = exports.setVehicleDetonationMode = exports.setVehicleDensityMultiplierThisFrame = exports.setVehicleDeformationFixed = exports.setVehicleDamageScales = exports.setVehicleDamageScale = exports.setVehicleDamage = exports.setVehicleCustomSecondaryColour = exports.setVehicleCustomPrimaryColour = exports.setVehicleCustomPathNodeStreamingRadius = exports.setVehicleCountermeasureAmmo = exports.setVehicleConversationsPersistNew = exports.setVehicleConversationsPersist = exports.setVehicleCombatMode = exports.setVehicleColours = exports.setVehicleColourCombination = exports.setVehicleCheatPowerIncrease = exports.setVehicleCeilingHeight = exports.setVehicleCausesSwerving = exports.setVehicleCanSaveInGarage = exports.setVehicleCanLeakPetrol = exports.setVehicleCanLeakOil = exports.setVehicleCanEngineMissfire = void 0;
exports.setVehicleModColor1 = exports.setVehicleMod = exports.setVehicleMissileWarningEnabled = exports.setVehicleMayBeUsedByGotoPointAnyMeans = exports.setVehicleMaxSpeed = exports.setVehicleLodMultiplier = exports.setVehicleLivery2 = exports.setVehicleLivery = exports.setVehicleLimitSpeedWhenPlayerInactive = exports.setVehicleLights = exports.setVehicleLightMultiplier = exports.setVehicleKersAllowed = exports.setVehicleKeepEngineOnWhenAbandoned = exports.setVehicleIsWanted = exports.setVehicleIsStolen = exports.setVehicleIsRacing = exports.setVehicleIsConsideredByPlayer = exports.setVehicleInteriorlight = exports.setVehicleInfluencesWantedLevel = exports.setVehicleIndividualDoorsLocked = exports.setVehicleIndicatorLights = exports.setVehicleInactiveDuringPlayback = exports.setVehicleInCarModShop = exports.setVehicleImpatienceTimer = exports.setVehicleHornSoundIndex = exports.setVehicleHomingLockedontoState = exports.setVehicleHeadlightShadows = exports.setVehicleHasUnbreakableLights = exports.setVehicleHasStrongAxles = exports.setVehicleHasMutedSirens = exports.setVehicleHasBeenOwnedByPlayer = exports.setVehicleHasBeenDrivenFlag = exports.setVehicleHandlingOverride = exports.setVehicleHandbrake = exports.setVehicleGravity = exports.setVehicleGeneratorAreaOfInterest = exports.setVehicleGeneratesEngineShockingEvents = exports.setVehicleFullbeam = exports.setVehicleFrictionOverride = exports.setVehicleForwardSpeedXy = exports.setVehicleForwardSpeed = exports.setVehicleForceReverseWarning = exports.setVehicleForceInteriorlight = exports.setVehicleForceAfterburner = exports.setVehicleFlightNozzlePositionImmediate = exports.setVehicleFlightNozzlePosition = exports.setVehicleFixed = exports.setVehicleExtraColours = exports.setVehicleExtraColour6 = exports.setVehicleExtraColour5 = void 0;
exports.setVehicleTyresCanBurst = exports.setVehicleTyreSmokeColor = exports.setVehicleTyreFixed = exports.setVehicleTyreBurst = exports.setVehicleTurretTarget = exports.setVehicleTurretSpeedThisFrame = exports.setVehicleTowTruckArmPosition = exports.setVehicleTimedExplosion = exports.setVehicleTankTurretPosition = exports.setVehicleTankStationary = exports.setVehicleTailLights = exports.setVehicleStrong = exports.setVehicleStopInstantlyWhenPlayerInactive = exports.setVehicleSteeringBiasScalar = exports.setVehicleSteerForBuildings = exports.setVehicleSteerBias = exports.setVehicleStaysFrozenWhenCleanedUp = exports.setVehicleStartupRevSound = exports.setVehicleSlipstreamingShouldTimeOut = exports.setVehicleSiren = exports.setVehicleShuntOnStick = exports.setVehicleShootAtTarget = exports.setVehicleSearchlight = exports.setVehicleRudderBroken = exports.setVehicleRespectsLocksWhenHasDriver = exports.setVehicleRemoveAggressiveCarjackMission = exports.setVehicleReduceGripLevel = exports.setVehicleReduceGrip = exports.setVehicleReadyForCleanup = exports.setVehicleRadioLoud = exports.setVehicleRadioEnabled = exports.setVehicleProvidesCover = exports.setVehiclePopulationBudget = exports.setVehiclePetrolTankHealth = exports.setVehicleOutOfControl = exports.setVehicleOnGroundProperly = exports.setVehicleOccupantsTakeExplosiveDamage = exports.setVehicleNumberPlateTextIndex = exports.setVehicleNumberPlateText = exports.setVehicleNotStealableAmbiently = exports.setVehicleNoExplosionDamageFromDriver = exports.setVehicleNeonIndexColour = exports.setVehicleNeonEnabled = exports.setVehicleNeonColour = exports.setVehicleNeedsToBeHotwired = exports.setVehicleNameDebug = exports.setVehicleModelPlayerWillExitScene = exports.setVehicleModelIsSuppressed = exports.setVehicleModKit = exports.setVehicleModColor2 = void 0;
exports.setWidescreenBorders = exports.setWheelsRetractedInstantly = exports.setWheelsExtendedInstantly = exports.setWheelieEnabled = exports.setWeatherTypePersist = exports.setWeatherTypeOvertimePersist = exports.setWeatherTypeNowPersist = exports.setWeatherTypeNow = exports.setWeatherPtfxUseOverrideSettings = exports.setWeatherPtfxOverrideCurrLevel = exports.setWeaponObjectTintIndex = exports.setWeaponObjectComponentTintIndex = exports.setWeaponObjectCamoIndex = exports.setWeaponImpactsApplyGreaterForce = exports.setWeaponEffectDurationModifier = exports.setWeaponDamageModifier = exports.setWeaponAoeModifier = exports.setWeaponAnimationOverride = exports.setWaypointOff = exports.setWarningMessageWithHeaderExtended = exports.setWarningMessageWithHeaderAndSubstringFlagsExtended = exports.setWarningMessageWithHeaderAndSubstringFlags = exports.setWarningMessageWithHeader = exports.setWarningMessageOptionItems = exports.setWarningMessageOptionHighlight = exports.setWarningMessage = exports.setWantedResponseNumPedsToSpawn = exports.setWantedLevelMultiplier = exports.setWantedLevelHiddenEscapeTime = exports.setWantedLevelDifficulty = exports.setWaitForCollisionsBeforeProbe = exports.setVehicleXenonLightColorIndex = exports.setVehicleWindowTint = exports.setVehicleWillTellOthersToHurry = exports.setVehicleWillForceOtherVehiclesToStop = exports.setVehicleWheelsCanBreakOffWhenBlowUp = exports.setVehicleWheelsCanBreak = exports.setVehicleWheelType = exports.setVehicleWeaponRestrictedAmmo = exports.setVehicleWeaponDamageScale = exports.setVehicleWeaponCanTargetObjects = exports.setVehicleUsesMpPlayerDamageMultiplier = exports.setVehicleUsesLargeRearRamp = exports.setVehicleUsedForPilotSchool = exports.setVehicleUsePlayerLightSettings = exports.setVehicleUseMoreRestrictiveSpawnChecks = exports.setVehicleUseCutsceneWheelCompression = exports.setVehicleUseBoostButtonForWheelRetract = exports.setVehicleUseAlternateHandling = exports.setVehicleUndriveable = void 0;
exports.smashVehicleWindow = exports.slideObject = exports.slerpNearQuaternion = exports.skipToNextScriptedConversationLine = exports.skipToEndAndStopPlaybackRecordedVehicle = exports.skipTimeInPlaybackRecordedVehicle = exports.skipRadioForward = exports.sin = exports.simulatePlayerInputGait = exports.shutdownSessionClearsAutoMultiplayer = exports.shutdownPcScriptedControls = exports.shutdownLoadingScreen = exports.shutdownCreatorBudget = exports.shutdownAndLoadMostRecentSave = exports.shutdownAndLaunchSinglePlayerGame = exports.showTickOnBlip = exports.showStartMissionInstructionalButton = exports.showScriptedHudComponentThisFrame = exports.showOutlineIndicatorOnBlip = exports.showNumberOnBlip = exports.showHudComponentThisFrame = exports.showHeightOnBlip = exports.showHeadingIndicatorOnBlip = exports.showGoldTickOnBlip = exports.showFriendIndicatorOnBlip = exports.showForSaleIconOnBlip = exports.showCrewIndicatorOnBlip = exports.showContactInstructionalButton = exports.showAccountPicker = exports.shouldUseMetricMeasurements = exports.shootSingleBulletBetweenCoordsIgnoreEntityNew = exports.shootSingleBulletBetweenCoordsIgnoreEntity = exports.shootSingleBulletBetweenCoords = exports.shiftRight = exports.shiftLeft = exports.shakeScriptGlobal = exports.shakeGameplayCam = exports.shakeCinematicCam = exports.shakeCam = exports.setupShopPedOutfitQuery = exports.setupShopPedApparelQueryTu = exports.setupShopPedApparelQuery = exports.setupFakeConeData = exports.settimerb = exports.settimera = exports.setZoneEnabled = exports.setWindSpeed = exports.setWindDirection = exports.setWind = exports.setWidescreenFormat = void 0;
exports.startParticleFxLoopedAtCoord = exports.startNewScriptWithNameHashAndArgs = exports.startNewScriptWithNameHash = exports.startNewScriptWithArgs = exports.startNewScript = exports.startNetworkedParticleFxNonLoopedOnPedBone = exports.startNetworkedParticleFxNonLoopedOnEntity = exports.startNetworkedParticleFxNonLoopedAtCoord = exports.startNetworkedParticleFxLoopedOnEntityBone = exports.startNetworkedParticleFxLoopedOnEntity = exports.startGpsMultiRoute = exports.startGpsCustomRoute = exports.startFiringAmnesty = exports.startExpensiveSynchronousShapeTestLosProbe = exports.startEntityFire = exports.startEndUserBenchmark = exports.startCutsceneAtCoords = exports.startCutscene = exports.startBeingGoon = exports.startBeingBoss = exports.startAudioScene = exports.startAlarm = exports.stabiliseEntityAttachedToHeli = exports.sqrt = exports.specialFunctionDoNotUse = exports.specialAbilityUnlock = exports.specialAbilityReset = exports.specialAbilityLock = exports.specialAbilityFillMeter = exports.specialAbilityDepleteMeter = exports.specialAbilityDeactivateMp = exports.specialAbilityDeactivateFast = exports.specialAbilityDeactivate = exports.specialAbilityChargeSmall = exports.specialAbilityChargeOnMissionFailed = exports.specialAbilityChargeNormalized = exports.specialAbilityChargeMedium = exports.specialAbilityChargeLarge = exports.specialAbilityChargeContinuous = exports.specialAbilityChargeAbsolute = exports.specialAbilityActivate = exports.spawnpointsStartSearchInAngledArea = exports.spawnpointsStartSearch = exports.spawnpointsIsSearchFailed = exports.spawnpointsIsSearchComplete = exports.spawnpointsIsSearchActive = exports.spawnpointsGetSearchResultFlags = exports.spawnpointsGetSearchResult = exports.spawnpointsGetNumSearchResults = exports.spawnpointsCancelSearch = void 0;
exports.statGetCurrentDrivingReverseDistance = exports.statGetCurrentDriveNocrashDistance = exports.statGetChallengeFlyingDist = exports.statGetCancelSaveMigrationStatus = exports.statGetBool = exports.statGetBlockSaves = exports.statEnableStatsTracking = exports.statDisableStatsTracking = exports.statDeleteSlot = exports.statCommunitySynchIsPending = exports.statCommunityStartSynch = exports.statCommunityGetHistory = exports.statCloudSlotSaveFailed = exports.statCloudSlotLoadFailedCode = exports.statCloudSlotLoadFailed = exports.statClearSlotForReload = exports.statClearPendingSaves = exports.statClearDirtyReadDetected = exports.startVehicleHorn = exports.startVehicleAlarm = exports.startShapeTestSweptSphere = exports.startShapeTestMouseCursorLosProbe = exports.startShapeTestLosProbe = exports.startShapeTestCapsule = exports.startShapeTestBox = exports.startShapeTestBoundingBox = exports.startShapeTestBound = exports.startScriptPhoneConversation = exports.startScriptFire = exports.startScriptConversation = exports.startSaveStructWithSize = exports.startSaveData = exports.startSaveArrayWithSize = exports.startRopeWinding = exports.startRopeUnwindingFront = exports.startReplayRecording = exports.startPreloadedConversation = exports.startPlayerTeleport = exports.startPlayerSwitch = exports.startPlaybackRecordedVehicleWithFlags = exports.startPlaybackRecordedVehicleUsingAi = exports.startPlaybackRecordedVehicle = exports.startPetrolTrailDecals = exports.startParticleFxNonLoopedOnPedBone = exports.startParticleFxNonLoopedOnEntityBone = exports.startParticleFxNonLoopedOnEntity = exports.startParticleFxNonLoopedAtCoord = exports.startParticleFxLoopedOnPedBone = exports.startParticleFxLoopedOnEntityBone = exports.startParticleFxLoopedOnEntity = void 0;
exports.statSetCheatIsActive = exports.statSetBool = exports.statSetBlockSaves = exports.statSavePendingOrRequested = exports.statSavePending = exports.statSaveMigrationConsumeContent = exports.statSaveMigrationCancelPendingOperation = exports.statSave = exports.statRollbackSaveMigration = exports.statResetAllOnlineCharacterStats = exports.statNetworkIncrementOnSuicide = exports.statMigrateSavegameStart = exports.statMigrateSavegameGetStatus = exports.statMigrateClearForRestart = exports.statMigrateCheckStart = exports.statMigrateCheckGetPlatformStatus = exports.statMigrateCheckGetIsPlatformAvailable = exports.statMigrateCheckAlreadyDone = exports.statLocalResetAllOnlineCharacterStats = exports.statLoadPending = exports.statLoadDirtyReadDetected = exports.statLoad = exports.statIsStatsTrackingEnabled = exports.statIsRecordingStat = exports.statIsPlayerVehicleAboveOcean = exports.statIncrement = exports.statGetVehicleBailDistance = exports.statGetUserId = exports.statGetString = exports.statGetSaveMigrationStatus = exports.statGetSaveMigrationConsumeContentStatus = exports.statGetRecordedValue = exports.statGetPos = exports.statGetNumberOfSeconds = exports.statGetNumberOfMinutes = exports.statGetNumberOfHours = exports.statGetNumberOfDays = exports.statGetMaskedInt = exports.statGetLoadSafeToProgressToMpFromSp = exports.statGetLicensePlate = exports.statGetInt = exports.statGetFlyingAltitude = exports.statGetFloat = exports.statGetDate = exports.statGetCurrentSpeed = exports.statGetCurrentSkydivingDistance = exports.statGetCurrentRearWheelDistance = exports.statGetCurrentNearMissNocrashPrecise = exports.statGetCurrentJumpDistance = exports.statGetCurrentFrontWheelDistance = void 0;
exports.stopPedWeaponFiringWhenDropped = exports.stopPedSpeakingSynced = exports.stopPedSpeaking = exports.stopPedRingtone = exports.stopParticleFxLooped = exports.stopGameplayHintBeingCancelledThisUpdate = exports.stopGameplayHint = exports.stopGameplayCamShaking = exports.stopFireInRange = exports.stopEntityFire = exports.stopEntityAnim = exports.stopEndUserBenchmark = exports.stopCutsceneImmediately = exports.stopCutsceneCamShaking = exports.stopCutsceneAudio = exports.stopCutscene = exports.stopCurrentPlayingSpeech = exports.stopCurrentPlayingAmbientSpeech = exports.stopControlShake = exports.stopCodeGameplayHint = exports.stopCinematicShot = exports.stopCinematicCamShaking = exports.stopCamShaking = exports.stopCamPointing = exports.stopBringingVehicleToHalt = exports.stopBinkMovie = exports.stopAudioScenes = exports.stopAudioScene = exports.stopAnyPedModelBeingSuppressed = exports.stopAnimTask = exports.stopAnimPlayback = exports.stopAllGarageActivity = exports.stopAllAlarms = exports.stopAlarm = exports.statsCompletedCharacterCreation = exports.statStopRecordStat = exports.statStartRecordStat = exports.statSlotIsLoaded = exports.statSetUserId = exports.statSetString = exports.statSetProfileSettingValue = exports.statSetPos = exports.statSetOpenSavetypeInJob = exports.statSetMaskedInt = exports.statSetLicensePlate = exports.statSetInt = exports.statSetGxtLabel = exports.statSetFloat = exports.statSetDate = exports.statSetCurrentPosixTime = void 0;
exports.taskAimGunAtCoord = exports.taskAgitatedActionConfrontResponse = exports.taskAchieveHeading = exports.tan = exports.takeOwnershipOfSynchronizedScene = exports.takeControlOfFrontend = exports.switchTrainTrack = exports.switchToMultiSecondpart = exports.switchToMultiFirstpart = exports.switchPcScriptedControls = exports.swingBoatBoomToRatio = exports.swingBoatBoomFreely = exports.supressRandomEventThisFrame = exports.suppressWitnessesCallingPoliceThisFrame = exports.suppressShockingEventsNextFrame = exports.suppressShockingEventTypeNextFrame = exports.suppressPickupSoundForPickup = exports.suppressPickupRewardType = exports.suppressNeonsOnVehicle = exports.suppressLosingWantedLevelIfHiddenThisFrame = exports.suppressHdMapStreamingThisFrame = exports.suppressFrontendRenderingThisFrame = exports.suppressCrimeThisFrame = exports.suppressAmbientPedAggressiveCleanupThisFrame = exports.suppressAgitationEventsNextFrame = exports.stringToInt = exports.streamvolIsValid = exports.streamvolHasLoaded = exports.streamvolDelete = exports.streamvolCreateSphere = exports.streamvolCreateLine = exports.streamvolCreateFrustum = exports.stopSynchronizedMapEntityAnim = exports.stopSynchronizedEntityAnim = exports.stopSynchronizedAudioEvent = exports.stopStream = exports.stopSound = exports.stopSmokeGrenadeExplosionSounds = exports.stopScriptedConversation = exports.stopScriptGlobalShaking = exports.stopSaveStruct = exports.stopSaveData = exports.stopSaveArray = exports.stopRopeWinding = exports.stopRopeUnwindingFront = exports.stopReplayRecording = exports.stopRenderingScriptCamsUsingCatchUp = exports.stopPlayerTeleport = exports.stopPlayerSwitch = exports.stopPlaybackRecordedVehicle = void 0;
exports.taskHeliMission = exports.taskHeliEscortHeli = exports.taskHeliChase = exports.taskHandsUp = exports.taskGuardSphereDefensiveArea = exports.taskGuardCurrentPosition = exports.taskGuardAssignedDefensiveArea = exports.taskGotoEntityOffsetXy = exports.taskGotoEntityOffset = exports.taskGotoEntityAiming = exports.taskGoToEntityWhileAimingAtEntity = exports.taskGoToEntityWhileAimingAtCoord = exports.taskGoToEntity = exports.taskGoToCoordWhileAimingAtEntity = exports.taskGoToCoordWhileAimingAtCoord = exports.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed = exports.taskGoToCoordAnyMeansExtraParams = exports.taskGoToCoordAnyMeans = exports.taskGoToCoordAndAimAtHatedEntitiesNearCoord = exports.taskGoStraightToCoordRelativeToEntity = exports.taskGoStraightToCoord = exports.taskGetOffBoat = exports.taskForceMotionState = exports.taskFollowWaypointRecording = exports.taskFollowToOffsetOfEntity = exports.taskFollowPointRoute = exports.taskFollowNavMeshToCoordAdvanced = exports.taskFollowNavMeshToCoord = exports.taskFlushRoute = exports.taskExtendRoute = exports.taskExitCover = exports.taskEveryoneLeaveVehicle = exports.taskEnterVehicle = exports.taskDriveBy = exports.taskCower = exports.taskCombatPedTimed = exports.taskCombatPed = exports.taskCombatHatedTargetsInArea = exports.taskCombatHatedTargetsAroundPedTimed = exports.taskCombatHatedTargetsAroundPed = exports.taskClimbLadder = exports.taskClimb = exports.taskClearLookAt = exports.taskClearDefensiveArea = exports.taskChatToPed = exports.taskBoatMission = exports.taskArrestPed = exports.taskAimGunScriptedWithTarget = exports.taskAimGunScripted = exports.taskAimGunAtEntity = void 0;
exports.taskStandGuard = exports.taskSmartFleePed = exports.taskSmartFleeCoord = exports.taskSkyDive = exports.taskShuffleToNextVehicleSeat = exports.taskShootAtEntity = exports.taskShootAtCoord = exports.taskShockingEventReact = exports.taskSetSphereDefensiveArea = exports.taskSetDecisionMaker = exports.taskSetBlockingOfNonTemporaryEvents = exports.taskSeekCoverToCoverPoint = exports.taskSeekCoverToCoords = exports.taskSeekCoverFromPos = exports.taskSeekCoverFromPed = exports.taskScriptedAnimation = exports.taskReloadWeapon = exports.taskReactAndFleePed = exports.taskRappelFromHeli = exports.taskRappelDownWallUsingClipsetOverride = exports.taskPutPedDirectlyIntoMelee = exports.taskPutPedDirectlyIntoCover = exports.taskPlayPhoneGestureAnimation = exports.taskPlayAnimAdvanced = exports.taskPlayAnim = exports.taskPlantBomb = exports.taskPlaneTaxi = exports.taskPlaneMission = exports.taskPlaneLand = exports.taskPlaneGotoPreciseVtol = exports.taskPlaneChase = exports.taskPerformSequenceLocally = exports.taskPerformSequenceFromProgress = exports.taskPerformSequence = exports.taskPedSlideToCoordHdgRate = exports.taskPedSlideToCoord = exports.taskPause = exports.taskPatrol = exports.taskParachuteToTarget = exports.taskParachute = exports.taskOpenVehicleDoor = exports.taskMoveNetworkByNameWithInitParams = exports.taskMoveNetworkByName = exports.taskMoveNetworkAdvancedByNameWithInitParams = exports.taskMoveNetworkAdvancedByName = exports.taskLookAtEntity = exports.taskLookAtCoord = exports.taskLeaveVehicle = exports.taskLeaveAnyVehicle = exports.taskJump = void 0;
exports.terminateThread = exports.terminateThisThread = exports.terminateAllScriptsWithThisName = exports.tellGroupPedsInAreaToAttack = exports.taskWrithe = exports.taskWarpPedIntoVehicle = exports.taskWarpPedDirectlyIntoCover = exports.taskWanderStandard = exports.taskWanderSpecific = exports.taskWanderInArea = exports.taskVehicleTempAction = exports.taskVehicleShootAtPed = exports.taskVehicleShootAtCoord = exports.taskVehiclePlayAnim = exports.taskVehiclePark = exports.taskVehicleMissionPedTarget = exports.taskVehicleMissionCoorsTarget = exports.taskVehicleMission = exports.taskVehicleHeliProtect = exports.taskVehicleGotoNavmesh = exports.taskVehicleFollowWaypointRecording = exports.taskVehicleFollow = exports.taskVehicleEscort = exports.taskVehicleDriveWander = exports.taskVehicleDriveToCoordLongrange = exports.taskVehicleDriveToCoord = exports.taskVehicleChase = exports.taskVehicleAimAtPed = exports.taskVehicleAimAtCoord = exports.taskUseNearestScenarioToCoordWarp = exports.taskUseNearestScenarioToCoord = exports.taskUseNearestScenarioChainToCoordWarp = exports.taskUseNearestScenarioChainToCoord = exports.taskUseMobilePhoneTimed = exports.taskUseMobilePhone = exports.taskTurnPedToFaceEntity = exports.taskTurnPedToFaceCoord = exports.taskToggleDuck = exports.taskThrowProjectile = exports.taskSynchronizedScene = exports.taskSweepAimPosition = exports.taskSweepAimEntity = exports.taskSwapWeapon = exports.taskSubmarineGotoAndStop = exports.taskStopPhoneGestureAnimation = exports.taskStealthKill = exports.taskStayInCover = exports.taskStartScenarioInPlace = exports.taskStartScenarioAtPosition = exports.taskStandStill = void 0;
exports.transformToCar = exports.trackVehicleVisibility = exports.trackObjectVisibility = exports.toggleVehicleMod = exports.toggleStealthRadar = exports.toggleShowOptionalStuntJumpCamera = exports.toggleScenarioPedCowerInPlace = exports.togglePlayerDamageOverlay = exports.togglePausedRenderphases = exports.toFloat = exports.titleTextureDownloadRequest = exports.timestep = exports.timerb = exports.timera = exports.thefeedUpdateItemTexture = exports.thefeedShow = exports.thefeedSetVibrateParameterForNextMessage = exports.thefeedSetSnapFeedItemPositions = exports.thefeedSetScriptedMenuHeight = exports.thefeedSetRgbaParameterForNextMessage = exports.thefeedSetFlashDurationParameterForNextMessage = exports.thefeedSetBackgroundColorForNextPost = exports.thefeedResume = exports.thefeedResetAllParameters = exports.thefeedReportLogoOn = exports.thefeedReportLogoOff = exports.thefeedRemoveItem = exports.thefeedPause = exports.thefeedOnlyShowTooltips = exports.thefeedIsPaused = exports.thefeedHideThisFrame = exports.thefeedHide = exports.thefeedGetLastShownPhoneActivatableFeedId = exports.thefeedFreezeNextPost = exports.thefeedForceRenderOn = exports.thefeedForceRenderOff = exports.thefeedFlushQueue = exports.thefeedClearFrozenPost = exports.thefeedAutoPostGametipsOn = exports.thefeedAutoPostGametipsOff = exports.textureDownloadRequest = exports.textureDownloadRelease = exports.textureDownloadHasFailed = exports.textureDownloadGetName = exports.testVerticalProbeAgainstAllWater = exports.testProbeAgainstWater = exports.testProbeAgainstAllWater = exports.terraingridSetParams = exports.terraingridSetColours = exports.terraingridActivate = void 0;
exports.ugcGetContentUpdatedDate = exports.ugcGetContentTotal = exports.ugcGetContentRatingPositiveCount = exports.ugcGetContentRatingNegativeCount = exports.ugcGetContentRatingCount = exports.ugcGetContentRating = exports.ugcGetContentPath = exports.ugcGetContentNum = exports.ugcGetContentName = exports.ugcGetContentLanguage = exports.ugcGetContentIsVerified = exports.ugcGetContentIsUsingScNickname = exports.ugcGetContentIsPublished = exports.ugcGetContentId = exports.ugcGetContentHash = exports.ugcGetContentHasPlayerRecord = exports.ugcGetContentHasPlayerBookmarked = exports.ugcGetContentHasLoResPhoto = exports.ugcGetContentHasHiResPhoto = exports.ugcGetContentFileVersion = exports.ugcGetContentDescriptionHash = exports.ugcGetContentCreatorGamerHandle = exports.ugcGetContentCreatedByLocalPlayer = exports.ugcGetContentCategory = exports.ugcGetCachedDescription = exports.ugcGetBookmarkedContent = exports.ugcDidQueryCreatorsSucceed = exports.ugcDidModifySucceed = exports.ugcDidGetSucceed = exports.ugcDidDescriptionRequestSucceed = exports.ugcDidCreateSucceed = exports.ugcCreateMission = exports.ugcCreateContent = exports.ugcCopyContent = exports.ugcClearQueryResults = exports.ugcClearOfflineQuery = exports.ugcClearModifyResult = exports.ugcClearCreateResult = exports.ugcCancelQuery = exports.triggerVehiclePartBrokenCameraShake = exports.triggerSonarBlip = exports.triggerSirenAudio = exports.triggerScriptEvent = exports.triggerScreenblurFadeOut = exports.triggerScreenblurFadeIn = exports.triggerPedScenarioPanicexittoflee = exports.triggerMusicEvent = exports.triggerIdleAnimationOnPed = exports.triggerCommerceDataFetch = exports.transformToSubmarine = void 0;
exports.ui3dsceneAssignPedToSlot = exports.ugcWasQueryForceCancelled = exports.ugcUpdateMission = exports.ugcUpdateContent = exports.ugcTextureDownloadRequest = exports.ugcSetUsingOfflineContent = exports.ugcSetQueryDataFromOffline = exports.ugcSetPlayerData = exports.ugcSetDeleted = exports.ugcSetBookmarked = exports.ugcRequestContentDataFromParams = exports.ugcRequestContentDataFromIndex = exports.ugcRequestCachedDescription = exports.ugcReleaseCachedDescription = exports.ugcReleaseAllCachedDescriptions = exports.ugcQueryMyContent = exports.ugcQueryMostRecentlyCreatedContent = exports.ugcQueryByContentIds = exports.ugcQueryByContentId = exports.ugcQueryByCategory = exports.ugcPublish = exports.ugcLoadOfflineQuery = exports.ugcIsModifying = exports.ugcIsLanguageSupported = exports.ugcIsGetting = exports.ugcIsDescriptionRequestInProgress = exports.ugcIsCreating = exports.ugcHasQueryCreatorsFinished = exports.ugcHasModifyFinished = exports.ugcHasGetFinished = exports.ugcHasDescriptionRequestFinished = exports.ugcHasCreateFinished = exports.ugcGetTopRatedContent = exports.ugcGetRootContentId = exports.ugcGetQueryResult = exports.ugcGetMyContent = exports.ugcGetMostRecentlyPlayedContent = exports.ugcGetMostRecentlyCreatedContent = exports.ugcGetModifyResult = exports.ugcGetGetByContentIds = exports.ugcGetGetByContentId = exports.ugcGetGetByCategory = exports.ugcGetFriendContent = exports.ugcGetCrewContent = exports.ugcGetCreatorsByUserId = exports.ugcGetCreatorNum = exports.ugcGetCreateResult = exports.ugcGetCreateContentId = exports.ugcGetContentUserName = exports.ugcGetContentUserId = void 0;
exports.useSnowWheelVfxWhenUnsheltered = exports.useSnowFootVfxWhenUnsheltered = exports.useSirenAsHorn = exports.useScriptCamForAmbientPopulationOriginThisFrame = exports.usePlayerColourInsteadOfTeamColour = exports.useParticleFxAsset = exports.useFootstepScriptSweeteners = exports.useFakeMpCash = exports.useDedicatedStuntCameraThisUpdate = exports.useActiveCameraForTimeslicingCentre = exports.updateWantedPositionThisFrame = exports.updateUnlockableDjRadioTracks = exports.updateTaskSweepAimPosition = exports.updateTaskSweepAimEntity = exports.updateTaskHandsUpDuration = exports.updateTaskAimGunScriptedTarget = exports.updateSpecialAbilityFromStat = exports.updateSoundCoord = exports.updateRadarZoomToBlip = exports.updatePlayerTeleport = exports.updatePedHeadBlendData = exports.updateOnscreenKeyboard = exports.updateNavmeshBlockingObject = exports.updateLightsOnEntity = exports.unrequestTennisBanks = exports.unregisterScriptWithAudio = exports.unregisterScriptVariable = exports.unregisterPedheadshot = exports.unpinRopeVertex = exports.unpinInterior = exports.unpausePlaybackRecordedVehicle = exports.unpatchDecalDiffuseMap = exports.unlockRadioStationTrackList = exports.unlockMissionNewsStory = exports.unlockMinimapPosition = exports.unlockMinimapAngle = exports.unloadCloudHat = exports.unloadAllCloudHats = exports.unhintScriptAudioBank = exports.unhintNamedScriptAudioBank = exports.unhintAmbientAudioBank = exports.unfreezeRadioStation = exports.uncuffPed = exports.unblockSpeechContextGroup = exports.unblockDecisionMakerEvent = exports.uiStartedEndUserBenchmark = exports.ui3dscenePushPreset = exports.ui3dsceneMakePushedPresetPersistent = exports.ui3dsceneIsAvailable = exports.ui3dsceneClearPatchedData = void 0;
exports.waypointPlaybackOverrideSpeed = exports.waypointPlaybackGetIsPaused = exports.waterReflectionSetScriptObjectVisibility = exports.waterOverrideSetStrength = exports.waterOverrideSetShorewaveminamplitude = exports.waterOverrideSetShorewavemaxamplitude = exports.waterOverrideSetShorewaveamplitude = exports.waterOverrideSetRippleminbumpiness = exports.waterOverrideSetRipplemaxbumpiness = exports.waterOverrideSetRippledisturb = exports.waterOverrideSetRipplebumpiness = exports.waterOverrideSetOceanwaveminamplitude = exports.waterOverrideSetOceanwavemaxamplitude = exports.waterOverrideSetOceanwaveamplitude = exports.waterOverrideSetOceannoiseminamplitude = exports.waterOverrideFadeOut = exports.waterOverrideFadeIn = exports.washDecalsInRange = exports.washDecalsFromVehicle = exports.wasVcWithdrawalSuccessful = exports.wasPedSkeletonUpdated = exports.wasPedKnockedOut = exports.wasPedKilledByTakedown = exports.wasPedKilledByStealth = exports.wasFlyCamConstrainedOnPreviousUdpate = exports.wasCutsceneSkipped = exports.wait = exports.vmag2 = exports.vmag = exports.vehicleWaypointPlaybackUseDefaultSpeed = exports.vehicleWaypointPlaybackResume = exports.vehicleWaypointPlaybackPause = exports.vehicleWaypointPlaybackOverrideSpeed = exports.vehicleStartParachuting = exports.vehicleSetRampAndRammingCarsTakeDamage = exports.vehicleSetParachuteModelTintIndex = exports.vehicleSetParachuteModelOverride = exports.vehicleSetOverrideSideRatio = exports.vehicleSetOverrideExtenableSideRatio = exports.vehicleSetJetWashForceEnabled = exports.vehicleSetExtenableSideTargetRatio = exports.vehicleSetEnableRampCarSideImpulse = exports.vehicleSetEnableNormaliseRampCarVerticalVeloctiy = exports.vehToNet = exports.vdist2 = exports.vdist = exports.usingMissionCreator = exports.useWaypointRecordingAsAssistedMovementRoute = exports.useVehicleTargetingReticule = exports.useVehicleCamStuntSettingsThisUpdate = void 0;
exports.wouldEntityBeOccluded = exports.withdrawVc = exports.waypointRecordingGetSpeedAtPoint = exports.waypointRecordingGetNumPoints = exports.waypointRecordingGetCoord = exports.waypointRecordingGetClosestWaypoint = exports.waypointPlaybackUseDefaultSpeed = exports.waypointPlaybackStopAimingOrShooting = exports.waypointPlaybackStartShootingAtPed = exports.waypointPlaybackStartShootingAtCoord = exports.waypointPlaybackStartAimingAtPed = exports.waypointPlaybackStartAimingAtCoord = exports.waypointPlaybackResume = exports.waypointPlaybackPause = void 0;
const cfx_shared_1 = require("cfx-shared");
//@ts-ignore
const Citizen = global.Citizen;
//@ts-ignore
const msgpack_pack = global.msgpack_pack;
const _i = Citizen.pointerValueInt();
const _f = Citizen.pointerValueFloat();
const _v = Citizen.pointerValueVector();
const _r = Citizen.returnResultAnyway();
const _ri = Citizen.resultAsInteger();
const _rf = Citizen.resultAsFloat();
const _rl = Citizen.resultAsLong();
const _s = Citizen.resultAsString();
const _rv = Citizen.resultAsVector();
const _ro = Citizen.resultAsObject2();
const _in = Citizen.invokeNativeByHash;
const _ii = Citizen.pointerValueIntInitialized;
const _fi = Citizen.pointerValueFloatInitialized;
function joaat(s) {
    const k = s.toLowerCase();
    let h, i;
    for (h = i = 0; i < k.length; i++) {
        h += k.charCodeAt(i);
        h += h << 10;
        h ^= h >>> 6;
    }
    h += h << 3;
    h ^= h >>> 11;
    h += h << 15;
    return h >>> 0;
}
function _ch(hash) {
    if (typeof hash === "string") {
        return joaat(hash);
    }
    return hash;
}
function _ts(num) {
    if (num === 0 || num === null || num === undefined || num === false) {
        // workaround for users calling string parameters with '0', also nil being translated
        return null;
    }
    if (ArrayBuffer.isView(num) || num instanceof ArrayBuffer) {
        // these are handled as strings internally
        return num;
    }
    return num.toString();
}
function _fv(flt) {
    return flt === 0.0 ? flt : flt + 0.0000001;
}
function _mfr(fn) {
    return Citizen.makeRefFunction(fn);
}
function _mv(vector) {
    return cfx_shared_1.Vector3.fromArray(vector);
}
function abortVehicleCrewEmblemRequest(p0) {
    const [retval, p0_out] = _in(0x82acc484, 0xffa3b05f, _ii(p0), _r);
    return [retval, p0_out];
}
exports.abortVehicleCrewEmblemRequest = abortVehicleCrewEmblemRequest;
function absf(value) {
    return _in(0x73d57cff, 0xdd12c355, _fv(value), _r, _rf);
}
exports.absf = absf;
function absi(value) {
    return _in(0xf0d31ad1, 0x91a74f87, value, _r, _ri);
}
exports.absi = absi;
function acos(p0) {
    return _in(0x1d08b970, 0x013c34b6, _fv(p0), _r, _rf);
}
exports.acos = acos;
/**
 * Appears to remove stealth kill action from memory
 * @param hash
 * @param enable
 */
function actionManagerEnableAction(hash, enable) {
    return _in(0xa6a12939, 0xf16d85be, _ch(hash), enable);
}
exports.actionManagerEnableAction = actionManagerEnableAction;
/**
 * mode can be any of these:
 * SLOWMO_T1_TRAILER_SMASH
 * SLOWMO_T1_RAYFIRE_EXPLOSION
 * SLOWMO_PROLOGUE_VAULT
 * NIGEL_02_SLOWMO_SETTING
 * JSH_EXIT_TUNNEL_SLOWMO
 * SLOWMO_BIG_SCORE_JUMP
 * SLOWMO_FIB4_TRUCK_SMASH
 * SLOWMO_EXTREME_04
 * SLOW_MO_METH_HOUSE_RAYFIRE
 * BARRY_02_SLOWMO
 * BARRY_01_SLOWMO
 * @param mode
 */
function activateAudioSlowmoMode(mode) {
    return _in(0xd01005d2, 0xba2eb778, _ts(mode));
}
exports.activateAudioSlowmoMode = activateAudioSlowmoMode;
function activateDamageTrackerOnNetworkId(netID, toggle) {
    return _in(0xd45b1ffc, 0xcd52ff19, netID, toggle);
}
exports.activateDamageTrackerOnNetworkId = activateDamageTrackerOnNetworkId;
function activateDamageTrackerOnPlayer(player, toggle) {
    return _in(0xbec0816f, 0xf5acbcda, player, toggle);
}
exports.activateDamageTrackerOnPlayer = activateDamageTrackerOnPlayer;
/**
 * Does stuff like this:
 * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
 *
 * Example:
 * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
 * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
 *
 * BOOL p1 is a toggle to define the game in pause.
 * int p2 is unknown but -1 always works, not sure why though.
 *
 * [30/03/2017] ins1de :
 *
 * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
 *
 * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
 * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
 * - FE_MENU_VERSION_SP_PAUSE
 * - FE_MENU_VERSION_MP_PAUSE
 * - FE_MENU_VERSION_CREATOR_PAUSE
 * - FE_MENU_VERSION_CUTSCENE_PAUSE
 * - FE_MENU_VERSION_SAVEGAME
 * - FE_MENU_VERSION_PRE_LOBBY
 * - FE_MENU_VERSION_LOBBY
 * - FE_MENU_VERSION_MP_CHARACTER_SELECT
 * - FE_MENU_VERSION_MP_CHARACTER_CREATION
 * - FE_MENU_VERSION_EMPTY
 * - FE_MENU_VERSION_EMPTY_NO_BACKGROUND
 * - FE_MENU_VERSION_TEXT_SELECTION
 * - FE_MENU_VERSION_CORONA
 * - FE_MENU_VERSION_CORONA_LOBBY
 * - FE_MENU_VERSION_CORONA_JOINED_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_FRIENDS
 * - FE_MENU_VERSION_CORONA_INVITE_CREWS
 * - FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
 * - FE_MENU_VERSION_CORONA_RACE
 * - FE_MENU_VERSION_CORONA_BETTING
 * - FE_MENU_VERSION_JOINING_SCREEN
 * - FE_MENU_VERSION_LANDING_MENU
 * - FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
 * @param menuhash
 * @param togglePause
 * @param component
 */
function activateFrontendMenu(menuhash, togglePause, component) {
    return _in(0xef01d36b, 0x9c9d0c7b, _ch(menuhash), togglePause, component);
}
exports.activateFrontendMenu = activateFrontendMenu;
/**
 * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
 *
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
function activateInteriorEntitySet(interior, entitySetName) {
    return _in(0x55e86af2, 0x712b36a1, interior, _ts(entitySetName));
}
exports.activateInteriorEntitySet = activateInteriorEntitySet;
function activateInteriorGroupsUsingCamera() {
    return _in(0x483aca11, 0x76ca93f1);
}
exports.activateInteriorGroupsUsingCamera = activateInteriorGroupsUsingCamera;
function activatePhysics(entity) {
    return _in(0x710311ad, 0xf0e20730, entity);
}
exports.activatePhysics = activatePhysics;
/**
 * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
 * @param p0
 */
function activateRockstarEditor(p0) {
    return _in(0x49da8145, 0x672b2725, p0);
}
exports.activateRockstarEditor = activateRockstarEditor;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 * @param p1
 */
function activityFeedActionStartWithCommandLine(p0, p1) {
    return _in(0xeb078ca2, 0xb5e82add, _ts(p0), _ts(p1));
}
exports.activityFeedActionStartWithCommandLine = activityFeedActionStartWithCommandLine;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
function activityFeedActionStartWithCommandLineAdd(p0) {
    return _in(0x703cc7f6, 0x0cbb2b57, _ts(p0));
}
exports.activityFeedActionStartWithCommandLineAdd = activityFeedActionStartWithCommandLineAdd;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
function activityFeedAddIntToCaption(p0) {
    return _in(0x97e7e2c0, 0x4245115b, p0);
}
exports.activityFeedAddIntToCaption = activityFeedAddIntToCaption;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
function activityFeedAddLiteralSubstringToCaption(p0) {
    return _in(0xebd3205a, 0x207939ed, _ts(p0));
}
exports.activityFeedAddLiteralSubstringToCaption = activityFeedAddLiteralSubstringToCaption;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
function activityFeedAddSubstringToCaption(p0) {
    return _in(0x31125fd5, 0x09d9043f, _ts(p0));
}
exports.activityFeedAddSubstringToCaption = activityFeedAddSubstringToCaption;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 * @param p1
 */
function activityFeedCreate(p0, p1) {
    return _in(0x4dcdf92b, 0xf64236cd, _ts(p0), _ts(p1));
}
exports.activityFeedCreate = activityFeedCreate;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
function activityFeedLargeImageUrl(p0) {
    return _in(0x916ca67d, 0x26fd1e37, _ts(p0));
}
exports.activityFeedLargeImageUrl = activityFeedLargeImageUrl;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 *
 * Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
 * @param p0
 */
function activityFeedOnlinePlayedWithPost(p0) {
    return _in(0xba4b8d83, 0xbdc75551, _ts(p0));
}
exports.activityFeedOnlinePlayedWithPost = activityFeedOnlinePlayedWithPost;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 */
function activityFeedPost() {
    return _in(0x8951eb9c, 0x6906d3c8);
}
exports.activityFeedPost = activityFeedPost;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
function addAmmoToPed(ped, weaponHash, ammo) {
    return _in(0x78f0424c, 0x34306220, ped, _ch(weaponHash), ammo);
}
exports.addAmmoToPed = addAmmoToPed;
/**
 * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
 * @param ped
 * @param amount
 */
function addArmourToPed(ped, amount) {
    return _in(0x5ba652a0, 0xcd14df2f, ped, amount);
}
exports.addArmourToPed = addArmourToPed;
/**
 * Adds a rectangular blip for the specified coordinates/area.
 *
 * It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
 *
 * By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
 *
 * Example image:
 * minimap https://w.wew.wtf/pdcjig.png
 * big map https://w.wew.wtf/zgcjcm.png
 *
 * (Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
 * @param x
 * @param y
 * @param z
 * @param width
 * @param height
 */
function addBlipForArea(x, y, z, width, height) {
    return _in(0xce5d0e5e, 0x315db238, _fv(x), _fv(y), _fv(z), _fv(width), _fv(height), _r, _ri);
}
exports.addBlipForArea = addBlipForArea;
/**
 * Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
 * @param x
 * @param y
 * @param z
 */
function addBlipForCoord(x, y, z) {
    return _in(0x5a039bb0, 0xbca604b6, _fv(x), _fv(y), _fv(z), _r, _ri);
}
exports.addBlipForCoord = addBlipForCoord;
/**
 * Returns red ( default ) blip attached to entity.
 *
 * Example:
 * Blip blip; //Put this outside your case or option
 * blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
 * HUD::SET_BLIP_AS_FRIENDLY(blip, true);
 * @param entity
 */
function addBlipForEntity(entity) {
    return _in(0x5cde92c7, 0x02a8fce7, entity, _r, _ri);
}
exports.addBlipForEntity = addBlipForEntity;
function addBlipForPickup(pickup) {
    return _in(0xbe339365, 0xc863bd36, pickup, _r, _ri);
}
exports.addBlipForPickup = addBlipForPickup;
function addBlipForRadius(posX, posY, posZ, radius) {
    return _in(0x46818d79, 0xb1f7499a, _fv(posX), _fv(posY), _fv(posZ), _fv(radius), _r, _ri);
}
exports.addBlipForRadius = addBlipForRadius;
/**
 * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
 *
 * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
 *
 * p8 big values ~100 will slow down the camera movement before reaching this node
 *
 * p9 != 0 seems to override the rotation/pitch (bool?)
 * @param camera
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param length
 * @param smoothingStyle
 * @param rotationOrder
 */
function addCamSplineNode(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder) {
    return _in(0x8609c75e, 0xc438fb3b, camera, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), length, smoothingStyle, rotationOrder);
}
exports.addCamSplineNode = addCamSplineNode;
/**
 * p0 is the spline camera to which the node is being added.
 * p1 is the camera used to create the node.
 * p3 is always 3 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
function addCamSplineNodeUsingCamera(cam, cam2, length, p3) {
    return _in(0x0fb82563, 0x989cf4fb, cam, cam2, length, p3);
}
exports.addCamSplineNodeUsingCamera = addCamSplineNodeUsingCamera;
/**
 * p0 is the spline camera to which the node is being added.
 * p1 is the camera used to create the node.
 * p3 is always 3 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
function addCamSplineNodeUsingCameraFrame(cam, cam2, length, p3) {
    return _in(0x0a9f2a46, 0x8b328e74, cam, cam2, length, p3);
}
exports.addCamSplineNodeUsingCameraFrame = addCamSplineNodeUsingCameraFrame;
/**
 * p2 is always 2 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param length
 * @param p2
 */
function addCamSplineNodeUsingGameplayFrame(cam, length, p2) {
    return _in(0x60927824, 0x6a29ca34, cam, length, p2);
}
exports.addCamSplineNodeUsingGameplayFrame = addCamSplineNodeUsingGameplayFrame;
function addCoverBlockingArea(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer) {
    return _in(0x45c59709, 0x7dd7cb81, _fv(startX), _fv(startY), _fv(startZ), _fv(endX), _fv(endY), _fv(endZ), blockObjects, blockVehicles, blockMap, blockPlayer);
}
exports.addCoverBlockingArea = addCoverBlockingArea;
function addCoverPoint(x, y, z, direction, usage, height, arc, isPriority) {
    return _in(0xd5c12a75, 0xc7b9497f, _fv(x), _fv(y), _fv(z), _fv(direction), usage, height, arc, isPriority, _r, _ri);
}
exports.addCoverPoint = addCoverPoint;
/**
 * decal types:
 *
 * public enum DecalTypes
 * {
 * splatters_blood = 1010,
 * splatters_blood_dir = 1015,
 * splatters_blood_mist = 1017,
 * splatters_mud = 1020,
 * splatters_paint = 1030,
 * splatters_water = 1040,
 * splatters_water_hydrant = 1050,
 * splatters_blood2 = 1110,
 * weapImpact_metal = 4010,
 * weapImpact_concrete = 4020,
 * weapImpact_mattress = 4030,
 * weapImpact_mud = 4032,
 * weapImpact_wood = 4050,
 * weapImpact_sand = 4053,
 * weapImpact_cardboard = 4040,
 * weapImpact_melee_glass = 4100,
 * weapImpact_glass_blood = 4102,
 * weapImpact_glass_blood2 = 4104,
 * weapImpact_shotgun_paper = 4200,
 * weapImpact_shotgun_mattress,
 * weapImpact_shotgun_metal,
 * weapImpact_shotgun_wood,
 * weapImpact_shotgun_dirt,
 * weapImpact_shotgun_tvscreen,
 * weapImpact_shotgun_tvscreen2,
 * weapImpact_shotgun_tvscreen3,
 * weapImpact_melee_concrete = 4310,
 * weapImpact_melee_wood = 4312,
 * weapImpact_melee_metal = 4314,
 * burn1 = 4421,
 * burn2,
 * burn3,
 * burn4,
 * burn5,
 * bang_concrete_bang = 5000,
 * bang_concrete_bang2,
 * bang_bullet_bang,
 * bang_bullet_bang2 = 5004,
 * bang_glass = 5031,
 * bang_glass2,
 * solidPool_water = 9000,
 * solidPool_blood,
 * solidPool_oil,
 * solidPool_petrol,
 * solidPool_mud,
 * porousPool_water,
 * porousPool_blood,
 * porousPool_oil,
 * porousPool_petrol,
 * porousPool_mud,
 * porousPool_water_ped_drip,
 * liquidTrail_water = 9050
 * }
 * @param decalType
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param width
 * @param height
 * @param rCoef
 * @param gCoef
 * @param bCoef
 * @param opacity
 * @param timeout
 * @param p17
 * @param p18
 * @param p19
 */
function addDecal(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19) {
    return _in(0xb302244a, 0x1839bdad, decalType, _fv(posX), _fv(posY), _fv(posZ), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(width), _fv(height), _fv(rCoef), _fv(gCoef), _fv(bCoef), _fv(opacity), _fv(timeout), p17, p18, p19, _r, _ri);
}
exports.addDecal = addDecal;
/**
 * To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
function addDispatchSpawnAngledBlockingArea(x1, y1, z1, x2, y2, z2, width) {
    return _in(0x918c7b2d, 0x2ff3928b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r, _ri);
}
exports.addDispatchSpawnAngledBlockingArea = addDispatchSpawnAngledBlockingArea;
function addDispatchSpawnSphereBlockingArea(x1, y1, x2, y2) {
    return _in(0x2d4259f1, 0xfeb81da9, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _ri);
}
exports.addDispatchSpawnSphereBlockingArea = addDispatchSpawnSphereBlockingArea;
/**
 * doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
 * p5 only set to true in single player native scripts.
 * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
 *
 * door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
 * All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
 *
 * Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
 * @param doorHash
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param scriptDoor
 * @param isLocal
 */
function addDoorToSystem(doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal) {
    return _in(0x6f8838d0, 0x3d1dc226, _ch(doorHash), _ch(modelHash), _fv(x), _fv(y), _fv(z), p5, scriptDoor, isLocal);
}
exports.addDoorToSystem = addDoorToSystem;
/**
 * Example:
 * GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
 *
 * I tried this and nothing happened...
 * @param entity
 * @param icon
 */
function addEntityIcon(entity, icon) {
    return _in(0x9cd43eee, 0x12bf4dd0, entity, _ts(icon), _r, _ri);
}
exports.addEntityIcon = addEntityIcon;
/**
 * All found occurrences in b678d:
 * https://pastebin.com/ceu67jz8
 * @param entity
 * @param groupName
 * @param p2
 */
function addEntityToAudioMixGroup(entity, groupName, p2) {
    return _in(0x153973ab, 0x99fe8980, entity, _ts(groupName), _fv(p2));
}
exports.addEntityToAudioMixGroup = addEntityToAudioMixGroup;
/**
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 *
 * explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 * @param noDamage
 */
function addExplosion(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage) {
    return _in(0xe3ad2bdb, 0xaee269ac, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake), noDamage);
}
exports.addExplosion = addExplosion;
/**
 * isAudible: If explosion makes a sound.
 * isInvisible: If the explosion is invisible or not.
 * explosionType: See ADD_EXPLOSION.
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param explosionFx
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
function addExplosionWithUserVfx(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
    return _in(0x36dd3fe5, 0x8b5e5212, _fv(x), _fv(y), _fv(z), explosionType, _ch(explosionFx), _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
}
exports.addExplosionWithUserVfx = addExplosionWithUserVfx;
/**
 * Adds an area that seems to be related to pickup physics behavior.
 * Max amount of areas is 10. Only works in multiplayer.
 * @param x
 * @param y
 * @param z
 * @param radius
 */
function addExtendedPickupProbeArea(x, y, z, radius) {
    return _in(0xd4a7a435, 0xb3710d05, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.addExtendedPickupProbeArea = addExtendedPickupProbeArea;
function addExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height) {
    return _in(0xfdbf4cdb, 0xc07e1706, _fv(xLow), _fv(yLow), _fv(xHigh), _fv(yHigh), _fv(height), _r, _ri);
}
exports.addExtraCalmingQuad = addExtraCalmingQuad;
/**
 * Returns the index of the newly created hospital spawn point.
 *
 * p3 might be radius?
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
function addHospitalRestart(x, y, z, p3, p4) {
    return _in(0x1f464ef9, 0x88465a81, _fv(x), _fv(y), _fv(z), _fv(p3), p4, _r, _ri);
}
exports.addHospitalRestart = addHospitalRestart;
/**
 * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
 * GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
 *
 * p0 is -1, 0 - 35
 * p1 is a char or string (whatever you wanna call it)
 * p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
 * p3 is again -1, 0 - 35
 * p4 is again -1, 0 - 35
 * p5 is either 0 or 1 (bool ?)
 * p6 is either 0 or 1 (The func to determine this is bool)
 * p7 is either 0 or 1 (The func to determine this is bool)
 * p8 is either 0 or 1 (The func to determine this is bool)
 * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
 * p10 is either 0 or 1 (The func to determine this is bool)
 * p11 is either 0 or 1 (The func to determine this is bool)
 * p12 is unknown as in TU27 X360 scripts it only goes to p11.
 * @param index
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 */
function addLineToConversation(index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    return _in(0xc5ef9634, 0x05593646, index, _ts(p1), _ts(p2), p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}
exports.addLineToConversation = addLineToConversation;
function addModelToCreatorBudget(modelHash) {
    return _in(0x0bc3144d, 0xeb678666, _ch(modelHash), _r);
}
exports.addModelToCreatorBudget = addModelToCreatorBudget;
function addNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0xfcd5c8e0, 0x6e502f5a, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri);
}
exports.addNavmeshBlockingObject = addNavmeshBlockingObject;
function addNavmeshRequiredRegion(x, y, radius) {
    return _in(0x387ead7e, 0xe42f6685, _fv(x), _fv(y), _fv(radius));
}
exports.addNavmeshRequiredRegion = addNavmeshRequiredRegion;
function addNextMessageToPreviousBriefs(p0) {
    return _in(0x60296af4, 0xba14abc5, p0);
}
exports.addNextMessageToPreviousBriefs = addNextMessageToPreviousBriefs;
function addOilDecal(x, y, z, groundLvl, width, transparency) {
    return _in(0x126d7f89, 0xfe859a5e, _fv(x), _fv(y), _fv(z), _fv(groundLvl), _fv(width), _fv(transparency), _r, _ri);
}
exports.addOilDecal = addOilDecal;
/**
 * isAudible: If explosion makes a sound.
 * isInvisible: If the explosion is invisible or not.
 * explosionType: See ADD_EXPLOSION.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
function addOwnedExplosion(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
    return _in(0x172aa1b6, 0x24fa1013, ped, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
}
exports.addOwnedExplosion = addOwnedExplosion;
function addPatrolRouteLink(nodeId1, nodeId2) {
    return _in(0x23083260, 0xdec3a551, nodeId1, nodeId2);
}
exports.addPatrolRouteLink = addPatrolRouteLink;
/**
 * Example:
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
 *
 * p0 is between 0 and 4 in the scripts.
 *
 * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
 *
 * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
 * Examples:
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7 -- [[3]] ], 0.0, 0.0, 0.0, 0);
 *
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17 -- [[44]] ]._f3, l_B0[17 -- [[44]] ]._f3, 2000);
 *
 * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
 *
 * p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
 * @param nodeId
 * @param nodeType
 * @param posX
 * @param posY
 * @param posZ
 * @param headingX
 * @param headingY
 * @param headingZ
 * @param duration
 */
function addPatrolRouteNode(nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration) {
    return _in(0x8edf9501, 0x67586b7c, nodeId, _ts(nodeType), _fv(posX), _fv(posY), _fv(posZ), _fv(headingX), _fv(headingY), _fv(headingZ), duration);
}
exports.addPatrolRouteNode = addPatrolRouteNode;
/**
 * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
function addPedAmmoByType(ped, ammoTypeHash, ammo) {
    return _in(0x2472622c, 0xe1f2d45f, ped, _ch(ammoTypeHash), ammo);
}
exports.addPedAmmoByType = addPedAmmoByType;
/**
 * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
 *
 * collection - PedDecorationCollection filename hash
 * overlay - Item name hash
 *
 * Example:
 * Entry inside "mpbeach_overlays.xml" -
 * <Item>
 * <uvPos x="0.500000" y="0.500000" />
 * <scale x="0.600000" y="0.500000" />
 * <rotation value="0.000000" />
 * <nameHash>FM_Hair_Fuzz</nameHash>
 * <txdHash>mp_hair_fuzz</txdHash>
 * <txtHash>mp_hair_fuzz</txtHash>
 * <zone>ZONE_HEAD</zone>
 * <type>TYPE_TATTOO</type>
 * <faction>FM</faction>
 * <garment>All</garment>
 * <gender>GENDER_DONTCARE</gender>
 * <award />
 * <awardLevel />
 * </Item>
 *
 * Code:
 * PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
 *
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param ped
 * @param collection
 * @param overlay
 */
function addPedDecorationFromHashes(ped, collection, overlay) {
    return _in(0x5f5d1665, 0xe352a839, ped, _ch(collection), _ch(overlay));
}
exports.addPedDecorationFromHashes = addPedDecorationFromHashes;
/**
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param ped
 * @param collection
 * @param overlay
 */
function addPedDecorationFromHashesInCorona(ped, collection, overlay) {
    return _in(0x5619bfa0, 0x7cfd7833, ped, _ch(collection), _ch(overlay));
}
exports.addPedDecorationFromHashesInCorona = addPedDecorationFromHashesInCorona;
/**
 * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
 *
 * AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
 *
 * =================================================
 * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
 * @param index
 * @param ped
 * @param p2
 */
function addPedToConversation(index, ped, p2) {
    return _in(0x95d9f4bc, 0x443956e7, index, ped, _ts(p2));
}
exports.addPedToConversation = addPedToConversation;
function addPetrolDecal(x, y, z, groundLvl, width, transparency) {
    return _in(0x4f5212c7, 0xad880df8, _fv(x), _fv(y), _fv(z), _fv(groundLvl), _fv(width), _fv(transparency), _r, _ri);
}
exports.addPetrolDecal = addPetrolDecal;
function addPetrolTrailDecalInfo(x, y, z, p3) {
    return _in(0x96727868, 0x2cb6967a, _fv(x), _fv(y), _fv(z), _fv(p3));
}
exports.addPetrolTrailDecalInfo = addPetrolTrailDecalInfo;
function addPickupToInteriorRoomByName(pickup, roomName) {
    return _in(0x3f6167f3, 0x51168730, pickup, _ts(roomName));
}
exports.addPickupToInteriorRoomByName = addPickupToInteriorRoomByName;
function addPlayerTargetableEntity(player, entity) {
    return _in(0x9097eb6d, 0x4bb9a12a, player, entity);
}
exports.addPlayerTargetableEntity = addPlayerTargetableEntity;
function addPointToGpsCustomRoute(x, y, z) {
    return _in(0x311438a0, 0x71dd9b1a, _fv(x), _fv(y), _fv(z));
}
exports.addPointToGpsCustomRoute = addPointToGpsCustomRoute;
function addPointToGpsMultiRoute(x, y, z) {
    return _in(0xa905192a, 0x6781c41b, _fv(x), _fv(y), _fv(z));
}
exports.addPointToGpsMultiRoute = addPointToGpsMultiRoute;
function addPoliceRestart(p0, p1, p2, p3, p4) {
    return _in(0x45273676, 0x5b31fc4b, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _r, _ri);
}
exports.addPoliceRestart = addPoliceRestart;
function addPopMultiplierArea(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9) {
    return _in(0x67f6413d, 0x3220e18d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(p6), _fv(p7), p8, p9, _r, _ri);
}
exports.addPopMultiplierArea = addPopMultiplierArea;
/**
 * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param pedMultiplier
 * @param vehicleMultiplier
 * @param p6
 * @param p7
 */
function addPopMultiplierSphere(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7) {
    return _in(0x32c7a7e8, 0xc43a1f80, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(pedMultiplier), _fv(vehicleMultiplier), p6, p7, _r, _ri);
}
exports.addPopMultiplierSphere = addPopMultiplierSphere;
/**
 * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
 * @param name
 * @param groupHash
 */
function addRelationshipGroup(name, groupHash) {
    const [retval, groupHash_out] = _in(0xf372bc22, 0xfcb88606, _ts(name), _i, _r);
    return [retval, groupHash_out];
}
exports.addRelationshipGroup = addRelationshipGroup;
function addReplayStatValue(value) {
    return _in(0x69fe6dc8, 0x7bd2a5e9, value);
}
exports.addReplayStatValue = addReplayStatValue;
function addRoadNodeSpeedZone(x, y, z, radius, speed, p5) {
    return _in(0x2ce544c6, 0x8fb812a0, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(speed), p5, _r, _ri);
}
exports.addRoadNodeSpeedZone = addRoadNodeSpeedZone;
/**
 * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
 * __
 *
 * Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
 *
 * When attached, Position<vector> does not matter
 * When attached, Angle<vector> does not matter
 *
 * Rope Type:
 * 4 and bellow is a thick rope
 * 5 and up are small metal wires
 * 0 crashes the game
 *
 * Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
 *
 * windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
 *
 * Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
 *
 * breakable - Whether or not shooting the rope will break it.
 *
 * unkPtr - unknown ptr, always 0 in orig scripts
 * __
 *
 * Lengths can be calculated like so:
 *
 * float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
 *
 *
 * NOTES:
 *
 * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
 *
 * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param length
 * @param ropeType
 * @param maxLength
 * @param minLength
 * @param windingSpeed
 * @param p11
 * @param p12
 * @param rigid
 * @param p14
 * @param breakWhenShot
 * @param unkPtr
 */
function addRope(x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot, unkPtr) {
    const [retval, unkPtr_out] = _in(0xe832d760, 0x399eb220, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(length), ropeType, _fv(maxLength), _fv(minLength), _fv(windingSpeed), p11, p12, rigid, _fv(p14), breakWhenShot, _ii(unkPtr), _r, _ri);
    return [retval, unkPtr_out];
}
exports.addRope = addRope;
function addScenarioBlockingArea(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9) {
    return _in(0x1b5c85c6, 0x12e5256e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, p8, p9, _r, _ri);
}
exports.addScenarioBlockingArea = addScenarioBlockingArea;
/**
 * BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
 *
 * - Nacorpio
 *
 * -----
 *
 * Hardcoded to not work in Multiplayer.
 * @param name
 * @param model
 * @param p2
 * @param p3
 */
function addScriptToRandomPed(name, model, p2, p3) {
    return _in(0x4ee53674, 0x68a65ccc, _ts(name), _ch(model), _fv(p2), _fv(p3));
}
exports.addScriptToRandomPed = addScriptToRandomPed;
function addScriptedCoverArea(x, y, z, radius) {
    return _in(0x28b7b9bf, 0xdaf274aa, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.addScriptedCoverArea = addScriptedCoverArea;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param duration
 */
function addShockingEventAtPosition(eventType, x, y, z, duration) {
    return _in(0xd9f84554, 0x09b525e9, eventType, _fv(x), _fv(y), _fv(z), _fv(duration), _r, _ri);
}
exports.addShockingEventAtPosition = addShockingEventAtPosition;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param entity
 * @param duration
 */
function addShockingEventForEntity(eventType, entity, duration) {
    return _in(0x7fd8f3be, 0x76f89422, eventType, entity, _fv(duration), _r, _ri);
}
exports.addShockingEventForEntity = addShockingEventForEntity;
/**
 * See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param camX
 * @param camY
 * @param camZ
 * @param p15
 * @param p16
 * @param p17
 */
function addStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17) {
    return _in(0x1a992da2, 0x97a4630c, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(x4), _fv(y4), _fv(z4), _fv(camX), _fv(camY), _fv(camZ), p15, p16, p17, _r, _ri);
}
exports.addStuntJump = addStuntJump;
/**
 * Creates a new stunt jump.
 *
 * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
 *
 * Info about the specific 'parameter sections':
 *
 *
 * **x1, y1, z1, x2, y2, z2 and radius1:**
 *
 * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
 *
 *
 * **x3, y3, z3, x4, y4, z4 and radius2:**
 *
 * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
 *
 *
 * **camX, camY and camZ:**
 *
 * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
 *
 *
 * **unk1, unk2 and unk3:**
 *
 * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
 *
 * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius1
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param radius2
 * @param camX
 * @param camY
 * @param camZ
 * @param p17
 * @param p18
 * @param p19
 */
function addStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19) {
    return _in(0xbbe5d803, 0xa5360cbf, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius1), _fv(x3), _fv(y3), _fv(z3), _fv(x4), _fv(y4), _fv(z4), _fv(radius2), _fv(camX), _fv(camY), _fv(camZ), p17, p18, p19, _r, _ri);
}
exports.addStuntJumpAngled = addStuntJumpAngled;
function addTacticalNavMeshPoint(x, y, z) {
    return _in(0xb8721407, 0xee9c3ff6, _fv(x), _fv(y), _fv(z));
}
exports.addTacticalNavMeshPoint = addTacticalNavMeshPoint;
function addTcmodifierOverride(modifierName1, modifierName2) {
    return _in(0x1a8e2c8b, 0x9cf4549c, _ts(modifierName1), _ts(modifierName2));
}
exports.addTcmodifierOverride = addTcmodifierOverride;
function addTextComponentFloat(value, decimalPlaces) {
    return _in(0xe7dcb5b8, 0x74bcd96e, _fv(value), decimalPlaces);
}
exports.addTextComponentFloat = addTextComponentFloat;
function addTextComponentFormattedInteger(value, commaSeparated) {
    return _in(0x0e4c749f, 0xf9de9cc4, value, commaSeparated);
}
exports.addTextComponentFormattedInteger = addTextComponentFormattedInteger;
function addTextComponentInteger(value) {
    return _in(0x03b504cf, 0x259931bc, value);
}
exports.addTextComponentInteger = addTextComponentInteger;
function addTextComponentSubstringBlipName(blip) {
    return _in(0x80ead8e2, 0xe1d5d52e, blip);
}
exports.addTextComponentSubstringBlipName = addTextComponentSubstringBlipName;
function addTextComponentSubstringKeyboardDisplay(string) {
    return _in(0x5f685208, 0x88e69014, _ts(string));
}
exports.addTextComponentSubstringKeyboardDisplay = addTextComponentSubstringKeyboardDisplay;
/**
 * p1 was always -1
 * @param p0
 * @param p1
 */
function addTextComponentSubstringPhoneNumber(p0, p1) {
    return _in(0x761b7745, 0x4205a61d, _ts(p0), p1);
}
exports.addTextComponentSubstringPhoneNumber = addTextComponentSubstringPhoneNumber;
function addTextComponentSubstringPlayerName(text) {
    return _in(0x6c188be1, 0x34e074aa, _ts(text));
}
exports.addTextComponentSubstringPlayerName = addTextComponentSubstringPlayerName;
function addTextComponentSubstringTextLabel(labelName) {
    return _in(0xc63cd5d2, 0x920acbe7, _ts(labelName));
}
exports.addTextComponentSubstringTextLabel = addTextComponentSubstringTextLabel;
/**
 * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
 * @param gxtEntryHash
 */
function addTextComponentSubstringTextLabelHashKey(gxtEntryHash) {
    return _in(0x17299b63, 0xc7683a2b, _ch(gxtEntryHash));
}
exports.addTextComponentSubstringTextLabelHashKey = addTextComponentSubstringTextLabelHashKey;
/**
 * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
 * @param timestamp
 * @param flags
 */
function addTextComponentSubstringTime(timestamp, flags) {
    return _in(0x1115f16b, 0x8ab9e8bf, timestamp, flags);
}
exports.addTextComponentSubstringTime = addTextComponentSubstringTime;
/**
 * This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
 * @param website
 */
function addTextComponentSubstringWebsite(website) {
    return _in(0x94cf4ac0, 0x34c9c986, _ts(website));
}
exports.addTextComponentSubstringWebsite = addTextComponentSubstringWebsite;
function addToClockTime(hours, minutes, seconds) {
    return _in(0xd716f30d, 0x8c8980e2, hours, minutes, seconds);
}
exports.addToClockTime = addToClockTime;
function addToItemset(item, itemset) {
    return _in(0xe3945201, 0xf14637dd, item, itemset, _r);
}
exports.addToItemset = addToItemset;
function addValidVehicleHitHash(p0) {
    return _in(0xe4c3b169, 0x876d33d7, p0);
}
exports.addValidVehicleHitHash = addValidVehicleHitHash;
function addVehicleCombatAngledAvoidanceArea(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x54b0f614, 0x960f4a5f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _r, _ri);
}
exports.addVehicleCombatAngledAvoidanceArea = addVehicleCombatAngledAvoidanceArea;
/**
 * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
 * @param vehicle
 * @param ped
 * @param boneIndex
 * @param x1
 * @param x2
 * @param x3
 * @param y1
 * @param y2
 * @param y3
 * @param z1
 * @param z2
 * @param z3
 * @param scale
 * @param p13
 * @param alpha
 */
function addVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha) {
    return _in(0x428bdcb9, 0xda58da53, vehicle, ped, boneIndex, _fv(x1), _fv(x2), _fv(x3), _fv(y1), _fv(y2), _fv(y3), _fv(z1), _fv(z2), _fv(z3), _fv(scale), p13, alpha, _r);
}
exports.addVehicleCrewEmblem = addVehicleCrewEmblem;
function addVehiclePhoneExplosiveDevice(vehicle) {
    return _in(0x99ad4ccc, 0xb128cbc9, vehicle);
}
exports.addVehiclePhoneExplosiveDevice = addVehiclePhoneExplosiveDevice;
function addVehicleStuckCheckWithWarp(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x2fa99230, 0x62dd396c, p0, _fv(p1), p2, p3, p4, p5, p6);
}
exports.addVehicleStuckCheckWithWarp = addVehicleStuckCheckWithWarp;
/**
 * x, y, z: offset in world coords from some entity.
 * @param ped
 * @param x
 * @param y
 * @param z
 */
function addVehicleSubtaskAttackCoord(ped, x, y, z) {
    return _in(0x5cf0d8f9, 0xbba0dd75, ped, _fv(x), _fv(y), _fv(z));
}
exports.addVehicleSubtaskAttackCoord = addVehicleSubtaskAttackCoord;
function addVehicleSubtaskAttackPed(ped, target) {
    return _in(0x85f462ba, 0xdc7da47f, ped, target);
}
exports.addVehicleSubtaskAttackPed = addVehicleSubtaskAttackPed;
function addVehicleUpsidedownCheck(vehicle) {
    return _in(0xb72e26d8, 0x1006005b, vehicle);
}
exports.addVehicleUpsidedownCheck = addVehicleUpsidedownCheck;
function adjustAmbientPedSpawnDensitiesThisFrame(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0xaa76052d, 0xda9bfc3e, p0, p1, p2, p3, p4, p5, p6);
}
exports.adjustAmbientPedSpawnDensitiesThisFrame = adjustAmbientPedSpawnDensitiesThisFrame;
function adjustNextPosSizeAsNormalized169() {
    return _in(0xefabc772, 0x2293da7c);
}
exports.adjustNextPosSizeAsNormalized169 = adjustNextPosSizeAsNormalized169;
function advanceClockTimeTo(hour, minute, second) {
    return _in(0xc8ca9670, 0xb9d83b3b, hour, minute, second);
}
exports.advanceClockTimeTo = advanceClockTimeTo;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
function allowAllPlayersToCollectPickupsOfType(pickupHash) {
    return _in(0xfdc07c58, 0xe8aab715, _ch(pickupHash));
}
exports.allowAllPlayersToCollectPickupsOfType = allowAllPlayersToCollectPickupsOfType;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function allowAlternativeScriptControlsLayout(control) {
    return _in(0x7f472403, 0x5fdca1dd, control);
}
exports.allowAlternativeScriptControlsLayout = allowAlternativeScriptControlsLayout;
/**
 * This native doesn't seem to do anything, might be a debug-only native.
 *
 * Confirmed, it is a debug native.
 * @param vehicle
 */
function allowAmbientVehiclesToAvoidAdverseConditions(vehicle) {
    return _in(0xb264c4d2, 0xf2b0a78b, vehicle);
}
exports.allowAmbientVehiclesToAvoidAdverseConditions = allowAmbientVehiclesToAvoidAdverseConditions;
function allowBoatBoomToAnimate(vehicle, toggle) {
    return _in(0x0f3b4d4e, 0x43177236, vehicle, toggle);
}
exports.allowBoatBoomToAnimate = allowBoatBoomToAnimate;
function allowDamageEventsForNonNetworkedObjects(value) {
    return _in(0xabdabf4e, 0x1edecbfa, value);
}
exports.allowDamageEventsForNonNetworkedObjects = allowDamageEventsForNonNetworkedObjects;
/**
 * Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
 * @param allow
 */
function allowDisplayOfMultiplayerCashText(allow) {
    return _in(0xe67c6dfd, 0x386ea5e7, allow);
}
exports.allowDisplayOfMultiplayerCashText = allowDisplayOfMultiplayerCashText;
function allowEvasionHudIfDisablingHiddenEvasionThisFrame(player, p1) {
    return _in(0x2f41a3ba, 0xe005e5fa, player, p1);
}
exports.allowEvasionHudIfDisablingHiddenEvasionThisFrame = allowEvasionHudIfDisablingHiddenEvasionThisFrame;
function allowMissionCreatorWarp(toggle) {
    return _in(0xdea36202, 0xfc3382df, toggle);
}
exports.allowMissionCreatorWarp = allowMissionCreatorWarp;
function allowMotionBlurDecay(p0, p1) {
    return _in(0x271017b9, 0xba825366, p0, p1);
}
exports.allowMotionBlurDecay = allowMotionBlurDecay;
/**
 * Allows opening the pause menu this frame, when the player is dead.
 */
function allowPauseWhenNotInStateOfPlayThisFrame() {
    return _in(0xcc3fdded, 0x67bcfc63);
}
exports.allowPauseWhenNotInStateOfPlayThisFrame = allowPauseWhenNotInStateOfPlayThisFrame;
function allowPickupArrowMarkerWhenUncollectable(pickup, toggle) {
    return _in(0x834344a4, 0x14c7c85d, pickup, toggle);
}
exports.allowPickupArrowMarkerWhenUncollectable = allowPickupArrowMarkerWhenUncollectable;
function allowPickupByNoneParticipant(pickup, toggle) {
    return _in(0xaa059c61, 0x5de9dd03, pickup, toggle);
}
exports.allowPickupByNoneParticipant = allowPickupByNoneParticipant;
function allowPlayerSwitchAscent() {
    return _in(0x8e2a065a, 0xbdae6994);
}
exports.allowPlayerSwitchAscent = allowPlayerSwitchAscent;
function allowPlayerSwitchDescent() {
    return _in(0xad5fdf34, 0xb81bfe79);
}
exports.allowPlayerSwitchDescent = allowPlayerSwitchDescent;
function allowPlayerSwitchOutro() {
    return _in(0x74de2e87, 0x39086740);
}
exports.allowPlayerSwitchOutro = allowPlayerSwitchOutro;
function allowPlayerSwitchPan() {
    return _in(0x43d1680c, 0x6d19a8e9);
}
exports.allowPlayerSwitchPan = allowPlayerSwitchPan;
function allowPortablePickupToMigrateToNonParticipants(pickup, toggle) {
    return _in(0x641f272b, 0x52e2f0f8, pickup, toggle);
}
exports.allowPortablePickupToMigrateToNonParticipants = allowPortablePickupToMigrateToNonParticipants;
function allowSonarBlips(toggle) {
    return _in(0x60734cc2, 0x07c9833c, toggle);
}
exports.allowSonarBlips = allowSonarBlips;
function allowTrainToBeRemovedByPopulation(p0) {
    return _in(0x2310a8f9, 0x421ebf43, p0);
}
exports.allowTrainToBeRemovedByPopulation = allowTrainToBeRemovedByPopulation;
/**
 * Example from michael2 script.
 *
 * CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 * @param amplitude
 */
function animatedShakeCam(cam, p1, p2, p3, amplitude) {
    return _in(0xa2746eea, 0xe3e577cd, cam, _ts(p1), _ts(p2), _ts(p3), _fv(amplitude));
}
exports.animatedShakeCam = animatedShakeCam;
/**
 * CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
function animatedShakeScriptGlobal(p0, p1, p2, p3) {
    return _in(0xc2eae3fb, 0x8cdbed31, _ts(p0), _ts(p1), _ts(p2), _fv(p3));
}
exports.animatedShakeScriptGlobal = animatedShakeScriptGlobal;
/**
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
function animpostfxGetCurrentTime(effectName) {
    return _in(0xe35b38a2, 0x7e8e7179, _ts(effectName), _r, _rf);
}
exports.animpostfxGetCurrentTime = animpostfxGetCurrentTime;
/**
 * Returns whether the specified effect is active.
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
function animpostfxIsRunning(effectName) {
    return _in(0x36ad3e69, 0x0da5aceb, _ts(effectName), _r);
}
exports.animpostfxIsRunning = animpostfxIsRunning;
/**
 * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
 * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 * @param duration
 * @param looped
 */
function animpostfxPlay(effectName, duration, looped) {
    return _in(0x2206bf9a, 0x37b7f724, _ts(effectName), duration, looped);
}
exports.animpostfxPlay = animpostfxPlay;
/**
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
function animpostfxStop(effectName) {
    return _in(0x068e835a, 0x1d0dc0e3, _ts(effectName));
}
exports.animpostfxStop = animpostfxStop;
/**
 * Stops ALL currently playing effects.
 */
function animpostfxStopAll() {
    return _in(0xb4eddc19, 0x532bfb85);
}
exports.animpostfxStopAll = animpostfxStopAll;
/**
 * Stops the effect and sets a value (bool) in its data (+0x199) to false.
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
function animpostfxStopAndFlushRequests(effectName) {
    return _in(0xd2209be1, 0x28b5418c, _ts(effectName));
}
exports.animpostfxStopAndFlushRequests = animpostfxStopAndFlushRequests;
function appClearBlock() {
    return _in(0x5fe1df33, 0x42db7dba);
}
exports.appClearBlock = appClearBlock;
function appCloseApp() {
    return _in(0xe41c65e0, 0x7a5f05fc);
}
exports.appCloseApp = appCloseApp;
function appCloseBlock() {
    return _in(0xe8e3fcf7, 0x2eac0ef8);
}
exports.appCloseBlock = appCloseBlock;
function appDataValid() {
    return _in(0x846aa8e7, 0xd55ee5b6, _r);
}
exports.appDataValid = appDataValid;
function appDeleteAppData(appName) {
    return _in(0x44151aea, 0x95c8a003, _ts(appName), _r);
}
exports.appDeleteAppData = appDeleteAppData;
function appGetDeletedFileStatus() {
    return _in(0xc9853a2b, 0xe3ded1a6, _r, _ri);
}
exports.appGetDeletedFileStatus = appGetDeletedFileStatus;
function appGetFloat(property) {
    return _in(0x1514fb24, 0xc02c2322, _ts(property), _r, _rf);
}
exports.appGetFloat = appGetFloat;
function appGetInt(property) {
    return _in(0xd3a58a12, 0xc77d9d4b, _ts(property), _r, _ri);
}
exports.appGetInt = appGetInt;
function appGetString(property) {
    return _in(0x749b0239, 0x50d2311c, _ts(property), _r, _s);
}
exports.appGetString = appGetString;
function appHasLinkedSocialClubAccount() {
    return _in(0x71eee697, 0x45088da0, _r);
}
exports.appHasLinkedSocialClubAccount = appHasLinkedSocialClubAccount;
function appHasSyncedData(appName) {
    return _in(0xca52279a, 0x7271517f, _ts(appName), _r);
}
exports.appHasSyncedData = appHasSyncedData;
function appSaveData() {
    return _in(0x95c5d356, 0xcda6e85f);
}
exports.appSaveData = appSaveData;
/**
 * Called in the gamescripts like:
 * APP::APP_SET_APP("car");
 * APP::APP_SET_APP("dog");
 * @param appName
 */
function appSetApp(appName) {
    return _in(0xcfd0406a, 0xdaf90d2b, _ts(appName));
}
exports.appSetApp = appSetApp;
function appSetBlock(blockName) {
    return _in(0x262ab456, 0xa3d21f93, _ts(blockName));
}
exports.appSetBlock = appSetBlock;
function appSetFloat(property, value) {
    return _in(0x25d7687c, 0x68e0daa4, _ts(property), _fv(value));
}
exports.appSetFloat = appSetFloat;
function appSetInt(property, value) {
    return _in(0x607e8e3d, 0x3e4f9611, _ts(property), value);
}
exports.appSetInt = appSetInt;
function appSetString(property, value) {
    return _in(0x3ff2fcec, 0x4b7721b4, _ts(property), _ts(value));
}
exports.appSetString = appSetString;
/**
 * damages a ped with the given amount
 * @param ped
 * @param damageAmount
 * @param p2
 * @param p3
 */
function applyDamageToPed(ped, damageAmount, p2, p3) {
    return _in(0x697157ce, 0xd63f18d4, ped, damageAmount, p2, p3);
}
exports.applyDamageToPed = applyDamageToPed;
/**
 * Documented here:
 * gtaforums.com/topic/885669-precisely-define-object-physics/
 * gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
 *
 * forceFlags:
 * First bit (lowest): Strong force flag, factor 100
 * Second bit: Unkown flag
 * Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
 * If higher bits are unequal 0 the function doesn't applay any forces at all.
 * (As integer possible values are 0-7)
 *
 * 0: weak force
 * 1: strong force
 * 2: same as 0 (2nd bit?)
 * 3: same as 1
 * 4: weak momentum
 * 5: strong momentum
 * 6: same as 4
 * 7: same as 5
 *
 * isLocal: vector defined in local (body-fixed) coordinate frame
 * isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
 *
 * p8 !!! Whenever I set this !=0, my script stopped.
 * @param entity
 * @param forceFlags
 * @param x
 * @param y
 * @param z
 * @param offX
 * @param offY
 * @param offZ
 * @param boneIndex
 * @param isDirectionRel
 * @param ignoreUpVec
 * @param isForceRel
 * @param p12
 * @param p13
 */
function applyForceToEntity(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
    return _in(0xc5f68be9, 0x613e2d18, entity, forceFlags, _fv(x), _fv(y), _fv(z), _fv(offX), _fv(offY), _fv(offZ), boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
}
exports.applyForceToEntity = applyForceToEntity;
/**
 * Applies a force to the specified entity.
 *
 * **List of force types (p1)**:
 * public enum ForceType
 * {
 * MinForce = 0,
 * MaxForceRot = 1,
 * MinForce2 = 2,
 * MaxForceRot2 = 3,
 * ForceNoRot = 4,
 * ForceRotPlusForce = 5
 * }
 * Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
 *
 * p6/relative - makes the xyz force not relative to world coords, but to something else
 * p7/highForce - setting false will make the force really low
 * @param entity
 * @param forceType
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param isDirectionRel
 * @param isForceRel
 * @param p8
 */
function applyForceToEntityCenterOfMass(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) {
    return _in(0x18ff00fc, 0x7eff559e, entity, forceType, _fv(x), _fv(y), _fv(z), p5, isDirectionRel, isForceRel, p8);
}
exports.applyForceToEntityCenterOfMass = applyForceToEntityCenterOfMass;
function applyImpulseToCloth(posX, posY, posZ, vecX, vecY, vecZ, impulse) {
    return _in(0xe37f7218, 0x24571784, _fv(posX), _fv(posY), _fv(posZ), _fv(vecX), _fv(vecY), _fv(vecZ), _fv(impulse));
}
exports.applyImpulseToCloth = applyImpulseToCloth;
/**
 * woundTypes:
 * - soak_splat
 * - wound_sheet
 * - BulletSmall
 * - BulletLarge
 * - ShotgunSmall
 * - ShotgunSmallMonolithic
 * - ShotgunLarge
 * - ShotgunLargeMonolithic
 * - NonFatalHeadshot
 * - stab
 * - BasicSlash
 * - Scripted_Ped_Splash_Back
 * - BackSplash
 * @param ped
 * @param boneIndex
 * @param xRot
 * @param yRot
 * @param zRot
 * @param woundType
 */
function applyPedBlood(ped, boneIndex, xRot, yRot, zRot, woundType) {
    return _in(0x83f7e01c, 0x7b769a26, ped, boneIndex, _fv(xRot), _fv(yRot), _fv(zRot), _ts(woundType));
}
exports.applyPedBlood = applyPedBlood;
function applyPedBloodByZone(ped, p1, p2, p3, p4) {
    return _in(0x3311e47b, 0x91edcbbc, ped, p1, _fv(p2), _fv(p3), _ts(p4));
}
exports.applyPedBloodByZone = applyPedBloodByZone;
function applyPedBloodDamageByZone(ped, p1, p2, p3, p4) {
    return _in(0x816f6981, 0xc60bf53b, ped, p1, _fv(p2), _fv(p3), p4);
}
exports.applyPedBloodDamageByZone = applyPedBloodDamageByZone;
function applyPedBloodSpecific(ped, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0xef0d582c, 0xbf2d9b0f, ped, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7), _ts(p8));
}
exports.applyPedBloodSpecific = applyPedBloodSpecific;
/**
 * enum eDamageZone
 * {
 * DZ_Torso = 0,
 * DZ_Head,
 * DZ_LeftArm,
 * DZ_RightArm,
 * DZ_LeftLeg,
 * DZ_RightLeg,
 * };
 *
 * Decal Names:
 * scar
 * blushing
 * cs_flush_anger
 * cs_flush_anger_face
 * bruise
 * bruise_large
 * herpes
 * ArmorBullet
 * basic_dirt_cloth
 * basic_dirt_skin
 * cs_trev1_dirt
 *
 * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
 * @param ped
 * @param damageZone
 * @param xOffset
 * @param yOffset
 * @param heading
 * @param scale
 * @param alpha
 * @param variation
 * @param fadeIn
 * @param decalName
 */
function applyPedDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) {
    return _in(0x397c38aa, 0x7b4a5f83, ped, damageZone, _fv(xOffset), _fv(yOffset), _fv(heading), _fv(scale), _fv(alpha), variation, fadeIn, _ts(decalName));
}
exports.applyPedDamageDecal = applyPedDamageDecal;
/**
 * Damage Packs:
 *
 * "SCR_TrevorTreeBang"
 * "HOSPITAL_0"
 * "HOSPITAL_1"
 * "HOSPITAL_2"
 * "HOSPITAL_3"
 * "HOSPITAL_4"
 * "HOSPITAL_5"
 * "HOSPITAL_6"
 * "HOSPITAL_7"
 * "HOSPITAL_8"
 * "HOSPITAL_9"
 * "SCR_Dumpster"
 * "BigHitByVehicle"
 * "SCR_Finale_Michael_Face"
 * "SCR_Franklin_finb"
 * "SCR_Finale_Michael"
 * "SCR_Franklin_finb2"
 * "Explosion_Med"
 * "SCR_Torture"
 * "SCR_TracySplash"
 * "Skin_Melee_0"
 *
 * Additional damage packs:
 *
 * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
 * Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
 * @param ped
 * @param damagePack
 * @param damage
 * @param mult
 */
function applyPedDamagePack(ped, damagePack, damage, mult) {
    return _in(0x46df9187, 0x88cb093f, ped, _ts(damagePack), _fv(damage), _fv(mult));
}
exports.applyPedDamagePack = applyPedDamagePack;
function areAllNavmeshRegionsLoaded() {
    return _in(0x8415d95b, 0x194a3aea, _r);
}
exports.areAllNavmeshRegionsLoaded = areAllNavmeshRegionsLoaded;
/**
 * Appears to return false if any window is broken.
 * @param vehicle
 */
function areAllVehicleWindowsIntact(vehicle) {
    return _in(0x11d862a3, 0xe977a9ef, vehicle, _r);
}
exports.areAllVehicleWindowsIntact = areAllVehicleWindowsIntact;
function areAnyCcsPending() {
    return _in(0x241fca5b, 0x1aa14f75, _r);
}
exports.areAnyCcsPending = areAnyCcsPending;
/**
 * Returns false if every seat is occupied.
 * @param vehicle
 */
function areAnyVehicleSeatsFree(vehicle) {
    return _in(0x2d34fc3b, 0xc4adb780, vehicle, _r);
}
exports.areAnyVehicleSeatsFree = areAnyVehicleSeatsFree;
function areCreditsRunning() {
    return _in(0xd19c0826, 0xdc20cf1c, _r);
}
exports.areCreditsRunning = areCreditsRunning;
/**
 * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
 */
function areCutsceneEntitiesNetworked() {
    return _in(0x66d6a5e9, 0xc511214a, _r);
}
exports.areCutsceneEntitiesNetworked = areCutsceneEntitiesNetworked;
function areEntitiesEntirelyInsideGarage(garageHash, p1, p2, p3, p4) {
    return _in(0x85b6c850, 0x546fdde2, _ch(garageHash), p1, p2, p3, p4, _r);
}
exports.areEntitiesEntirelyInsideGarage = areEntitiesEntirelyInsideGarage;
/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * @param vehicle
 */
function areFoldingWingsDeployed(vehicle) {
    return _in(0xaef12960, 0xfa943792, vehicle, _r);
}
exports.areFoldingWingsDeployed = areFoldingWingsDeployed;
function areMissileBaysDeployed(vehicle) {
    return _in(0xea474387, 0x4d515f13, vehicle, _r);
}
exports.areMissileBaysDeployed = areMissileBaysDeployed;
function areNodesLoadedForArea(x1, y1, x2, y2) {
    return _in(0xf7b79a50, 0xb905a30d, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r);
}
exports.areNodesLoadedForArea = areNodesLoadedForArea;
function areOnlinePoliciesUpToDate() {
    return _in(0xf13fe2a8, 0x0c05c561, _r);
}
exports.areOnlinePoliciesUpToDate = areOnlinePoliciesUpToDate;
function arePlaneControlPanelsIntact(vehicle, p1) {
    return _in(0xf78f94d6, 0x0248c737, vehicle, p1, _r);
}
exports.arePlaneControlPanelsIntact = arePlaneControlPanelsIntact;
function arePlanePropellersIntact(plane) {
    return _in(0x755d6d52, 0x67cbbd7e, plane, _r);
}
exports.arePlanePropellersIntact = arePlanePropellersIntact;
function arePlayerFlashingStarsAboutToDrop(player) {
    return _in(0xafaf8604, 0x3e5874e9, player, _r);
}
exports.arePlayerFlashingStarsAboutToDrop = arePlayerFlashingStarsAboutToDrop;
function arePlayerStarsGreyedOut(player) {
    return _in(0x0a6eb355, 0xee14a2db, player, _r);
}
exports.arePlayerStarsGreyedOut = arePlayerStarsGreyedOut;
function areProfileSettingsValid() {
    return _in(0x5aa3befa, 0x29f03ad4, _r);
}
exports.areProfileSettingsValid = areProfileSettingsValid;
function areStringsEqual(string1, string2) {
    return _in(0x0c515fab, 0x3ff9ea92, _ts(string1), _ts(string2), _r);
}
exports.areStringsEqual = areStringsEqual;
function areWidescreenBordersActive() {
    return _in(0x4879e4fe, 0x39074cdf, _r);
}
exports.areWidescreenBordersActive = areWidescreenBordersActive;
function areWingsOfPlaneIntact(plane) {
    return _in(0x5991a014, 0x34ce9677, plane, _r);
}
exports.areWingsOfPlaneIntact = areWingsOfPlaneIntact;
function asin(p0) {
    return _in(0xc843060b, 0x5765dce7, _fv(p0), _r, _rf);
}
exports.asin = asin;
function assistedMovementCloseRoute() {
    return _in(0xaebf081f, 0xfc0a0e5e);
}
exports.assistedMovementCloseRoute = assistedMovementCloseRoute;
function assistedMovementFlushRoute() {
    return _in(0x8621390f, 0x0cdcfe1f);
}
exports.assistedMovementFlushRoute = assistedMovementFlushRoute;
function assistedMovementIsRouteLoaded(route) {
    return _in(0x60f9a439, 0x3a21f741, _ts(route), _r);
}
exports.assistedMovementIsRouteLoaded = assistedMovementIsRouteLoaded;
function assistedMovementOverrideLoadDistanceThisFrame(dist) {
    return _in(0x13945951, 0xe16ef912, _fv(dist));
}
exports.assistedMovementOverrideLoadDistanceThisFrame = assistedMovementOverrideLoadDistanceThisFrame;
function assistedMovementRemoveRoute(route) {
    return _in(0x35485364, 0x85dd792b, _ts(route));
}
exports.assistedMovementRemoveRoute = assistedMovementRemoveRoute;
/**
 * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
 * @param route
 */
function assistedMovementRequestRoute(route) {
    return _in(0x81726896, 0x8605947a, _ts(route));
}
exports.assistedMovementRequestRoute = assistedMovementRequestRoute;
function assistedMovementSetRouteProperties(route, props) {
    return _in(0xd5002d78, 0xb7162e1b, _ts(route), props);
}
exports.assistedMovementSetRouteProperties = assistedMovementSetRouteProperties;
function atan(p0) {
    return _in(0xa9d1795c, 0xd5043663, _fv(p0), _r, _rf);
}
exports.atan = atan;
function atan2(p0, p1) {
    return _in(0x8927cbf9, 0xd22261a4, _fv(p0), _fv(p1), _r, _rf);
}
exports.atan2 = atan2;
/**
 * Last param determines if its relative to the Entity
 * @param cam
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
function attachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative) {
    return _in(0xfedb7d26, 0x9e8c60e3, cam, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative);
}
exports.attachCamToEntity = attachCamToEntity;
function attachCamToPedBone(cam, ped, boneIndex, x, y, z, heading) {
    return _in(0x61a3dba1, 0x4ab7f411, cam, ped, boneIndex, _fv(x), _fv(y), _fv(z), heading);
}
exports.attachCamToPedBone = attachCamToPedBone;
/**
 * This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
 * @param cam
 * @param vehicle
 * @param boneIndex
 * @param relativeRotation
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param fixedDirection
 */
function attachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection) {
    return _in(0x8db3f12a, 0x02caef72, cam, vehicle, boneIndex, relativeRotation, _fv(rotX), _fv(rotY), _fv(rotZ), _fv(offsetX), _fv(offsetY), _fv(offsetZ), fixedDirection);
}
exports.attachCamToVehicleBone = attachCamToVehicleBone;
function attachContainerToHandlerFrameWhenLinedUp(vehicle, entity) {
    return _in(0x6a98c2ec, 0xf57fa5d4, vehicle, entity);
}
exports.attachContainerToHandlerFrameWhenLinedUp = attachContainerToHandlerFrameWhenLinedUp;
/**
 * Attaches entity 1 to entity 2.
 * @param ropeId
 * @param ent1
 * @param ent2
 * @param ent1_x
 * @param ent1_y
 * @param ent1_z
 * @param ent2_x
 * @param ent2_y
 * @param ent2_z
 * @param length
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
function attachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11) {
    const [p12_out, p13_out] = _in(0x3d95ec8b, 0x6d940ac3, ropeId, ent1, ent2, _fv(ent1_x), _fv(ent1_y), _fv(ent1_z), _fv(ent2_x), _fv(ent2_y), _fv(ent2_z), _fv(length), p10, p11, _i, _i);
    return [p12_out, p13_out];
}
exports.attachEntitiesToRope = attachEntitiesToRope;
function attachEntityBoneToEntityBone(entity1, entity2, boneIndex1, boneIndex2, p4, p5) {
    return _in(0x5c48b757, 0x32c8456c, entity1, entity2, boneIndex1, boneIndex2, p4, p5);
}
exports.attachEntityBoneToEntityBone = attachEntityBoneToEntityBone;
function attachEntityBoneToEntityBoneYForward(entity1, entity2, boneIndex1, boneIndex2, p4, p5) {
    return _in(0xfd1695c5, 0xd3b05439, entity1, entity2, boneIndex1, boneIndex2, p4, p5);
}
exports.attachEntityBoneToEntityBoneYForward = attachEntityBoneToEntityBoneYForward;
function attachEntityToCargobob(p0, p1, p2, p3, p4, p5) {
    return _in(0xa1dd82f3, 0xccf9a01e, p0, p1, p2, p3, p4, p5);
}
exports.attachEntityToCargobob = attachEntityToCargobob;
/**
 * Attaches entity1 to bone (boneIndex) of entity2.
 *
 * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
 *
 * useSoftPinning - if set to false attached entity will not detach when fixed
 * collision - controls collision between the two entities (FALSE disables collision).
 * isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
 * vertexIndex - position of vertex
 * fixedRot - if false it ignores entity vector
 *
 * @param entity1
 * @param entity2
 * @param boneIndex
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param useSoftPinning
 * @param collision
 * @param isPed
 * @param vertexIndex
 * @param fixedRot
 * @param p15
 */
function attachEntityToEntity(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15) {
    return _in(0x6b9bbd38, 0xab0796df, entity1, entity2, boneIndex, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15);
}
exports.attachEntityToEntity = attachEntityToEntity;
/**
 * breakForce is the amount of force required to break the bond.
 * p14 - is always 1 in scripts
 * p15 - is 1 or 0 in scripts - unknoun what it does
 * p16 - controls collision between the two entities (FALSE disables collision).
 * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
 * p18 - is always 2 in scripts.
 *
 *
 * @param entity1
 * @param entity2
 * @param boneIndex1
 * @param boneIndex2
 * @param xPos1
 * @param yPos1
 * @param zPos1
 * @param xPos2
 * @param yPos2
 * @param zPos2
 * @param xRot
 * @param yRot
 * @param zRot
 * @param breakForce
 * @param fixedRot
 * @param p15
 * @param collision
 * @param p17
 * @param p18
 */
function attachEntityToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18) {
    return _in(0xc3675780, 0xc92f90f9, entity1, entity2, boneIndex1, boneIndex2, _fv(xPos1), _fv(yPos1), _fv(zPos1), _fv(xPos2), _fv(yPos2), _fv(zPos2), _fv(xRot), _fv(yRot), _fv(zRot), _fv(breakForce), fixedRot, p15, collision, p17, p18);
}
exports.attachEntityToEntityPhysically = attachEntityToEntityPhysically;
function attachEntityToEntityPhysicallyOverrideInverseMass(firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB) {
    return _in(0x168a09d1, 0xb25b0ba4, firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, _fv(secondEntityOffsetX), _fv(secondEntityOffsetY), _fv(secondEntityOffsetZ), _fv(firstEntityOffsetX), _fv(firstEntityOffsetY), _fv(firstEntityOffsetZ), _fv(vecRotationX), _fv(vecRotationY), _fv(vecRotationZ), _fv(physicalStrength), constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, _fv(invMassScaleA), _fv(invMassScaleB));
}
exports.attachEntityToEntityPhysicallyOverrideInverseMass = attachEntityToEntityPhysicallyOverrideInverseMass;
function attachPortablePickupToPed(pickupObject, ped) {
    return _in(0x8dc39368, 0xbdd57755, pickupObject, ped);
}
exports.attachPortablePickupToPed = attachPortablePickupToPed;
/**
 * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
 * @param ropeId
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param p5
 */
function attachRopeToEntity(ropeId, entity, x, y, z, p5) {
    return _in(0x4b490a68, 0x32559a65, ropeId, entity, _fv(x), _fv(y), _fv(z), p5);
}
exports.attachRopeToEntity = attachRopeToEntity;
function attachSynchronizedSceneToEntity(sceneID, entity, boneIndex) {
    return _in(0x272e4723, 0xb56a3b96, sceneID, entity, boneIndex);
}
exports.attachSynchronizedSceneToEntity = attachSynchronizedSceneToEntity;
/**
 * Might be more appropriate in AUDIO?
 * @param entity
 */
function attachTvAudioToEntity(entity) {
    return _in(0x845bad77, 0xcc770633, entity);
}
exports.attachTvAudioToEntity = attachTvAudioToEntity;
/**
 * This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
 * @param vehicle
 * @param trailer
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param coordsX
 * @param coordsY
 * @param coordsZ
 * @param rotationX
 * @param rotationY
 * @param rotationZ
 * @param disableCollisions
 */
function attachVehicleOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions) {
    return _in(0x16b5e274, 0xbde402f8, vehicle, trailer, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(coordsX), _fv(coordsY), _fv(coordsZ), _fv(rotationX), _fv(rotationY), _fv(rotationZ), _fv(disableCollisions));
}
exports.attachVehicleOnToTrailer = attachVehicleOnToTrailer;
function attachVehicleToCargobob(vehicle, cargobob, p2, x, y, z) {
    return _in(0x4127f1d8, 0x4e347769, vehicle, cargobob, p2, _fv(x), _fv(y), _fv(z));
}
exports.attachVehicleToCargobob = attachVehicleToCargobob;
/**
 * HookOffset defines where the hook is attached. leave at 0 for default attachment.
 * @param towTruck
 * @param vehicle
 * @param rear
 * @param hookOffsetX
 * @param hookOffsetY
 * @param hookOffsetZ
 */
function attachVehicleToTowTruck(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ) {
    return _in(0x29a16f8d, 0x621c4508, towTruck, vehicle, rear, _fv(hookOffsetX), _fv(hookOffsetY), _fv(hookOffsetZ));
}
exports.attachVehicleToTowTruck = attachVehicleToTowTruck;
function attachVehicleToTrailer(vehicle, trailer, radius) {
    return _in(0x3c7d42d5, 0x8f770b54, vehicle, trailer, _fv(radius));
}
exports.attachVehicleToTrailer = attachVehicleToTrailer;
function audioIsMusicPlaying() {
    return _in(0x845ffc3a, 0x4feefa3e, _r);
}
exports.audioIsMusicPlaying = audioIsMusicPlaying;
/**
 * This is an alias of AUDIO_IS_MUSIC_PLAYING.
 */
function audioIsScriptedMusicPlaying() {
    return _in(0x2dd39bf3, 0xe2f9c47f, _r);
}
exports.audioIsScriptedMusicPlaying = audioIsScriptedMusicPlaying;
function badSportPlayerLeftDetected(event, amountReceived) {
    const [retval, gamerHandle_out] = _in(0xec5e3af5, 0x289dca81, _i, event, amountReceived, _r);
    return [retval, gamerHandle_out];
}
exports.badSportPlayerLeftDetected = badSportPlayerLeftDetected;
function beginCreateLowQualityCopyOfPhoto(p0) {
    return _in(0x75965063, 0x4f07b6b4, p0, _r);
}
exports.beginCreateLowQualityCopyOfPhoto = beginCreateLowQualityCopyOfPhoto;
function beginCreateMissionCreatorPhotoPreview() {
    return _in(0x7fa5d82b, 0x8f58ec06, _r);
}
exports.beginCreateMissionCreatorPhotoPreview = beginCreateMissionCreatorPhotoPreview;
function beginReplayStats(p0, p1) {
    return _in(0xe0e50024, 0x6ff73d66, p0, p1);
}
exports.beginReplayStats = beginReplayStats;
/**
 * Push a function from the Scaleform onto the stack
 *
 * @param scaleform
 * @param methodName
 */
function beginScaleformMovieMethod(scaleform, methodName) {
    return _in(0xf6e48914, 0xc7a8694e, scaleform, _ts(methodName), _r);
}
exports.beginScaleformMovieMethod = beginScaleformMovieMethod;
/**
 * Starts frontend (pause menu) scaleform movie methods.
 * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
 * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
 * @param methodName
 */
function beginScaleformMovieMethodOnFrontend(methodName) {
    return _in(0xab58c27c, 0x2e6123c6, _ts(methodName), _r);
}
exports.beginScaleformMovieMethodOnFrontend = beginScaleformMovieMethodOnFrontend;
/**
 * Starts frontend (pause menu) scaleform movie methods for header options.
 * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
 * @param methodName
 */
function beginScaleformMovieMethodOnFrontendHeader(methodName) {
    return _in(0xb9449845, 0xf73f5e9c, _ts(methodName), _r);
}
exports.beginScaleformMovieMethodOnFrontendHeader = beginScaleformMovieMethodOnFrontendHeader;
/**
 * Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
 *
 * Known components:
 * 19 - MP_RANK_BAR
 * 20 - HUD_DIRECTOR_MODE
 *
 * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
 * @param hudComponent
 * @param methodName
 */
function beginScaleformScriptHudMovieMethod(hudComponent, methodName) {
    return _in(0x98c494fd, 0x5bdfbfd5, hudComponent, _ts(methodName), _r);
}
exports.beginScaleformScriptHudMovieMethod = beginScaleformScriptHudMovieMethod;
function beginSrl() {
    return _in(0x9baddc94, 0xef83b823);
}
exports.beginSrl = beginSrl;
function beginTakeHighQualityPhoto() {
    return _in(0xa67c35c5, 0x6eb1bd9d, _r);
}
exports.beginTakeHighQualityPhoto = beginTakeHighQualityPhoto;
function beginTakeMissionCreatorPhoto() {
    return _in(0x1dd2139a, 0x9a20dce8, _r);
}
exports.beginTakeMissionCreatorPhoto = beginTakeMissionCreatorPhoto;
function beginTextCommandAddDirectlyToPreviousBriefs(p0) {
    return _in(0x23d69e04, 0x65570028, _ts(p0));
}
exports.beginTextCommandAddDirectlyToPreviousBriefs = beginTextCommandAddDirectlyToPreviousBriefs;
/**
 * Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
 *
 *
 * e.g
 * void StartLoadingMessage(char *text, int spinnerType = 3)
 * {
 * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
 * }
 *  -- [[OR]]
 * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
 * {
 * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
 * WAIT(timeMs);
 * BUSYSPINNER_OFF();
 * }
 *
 *
 * These are some localized strings used in the loading spinner.
 * "PM_WAIT"                   = Please Wait
 * "CELEB_WPLYRS"              = Waiting For Players.
 * "CELL_SPINNER2"             = Scanning storage.
 * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
 * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
 * "FM_COR_AUTOD"                        = Just spinner no text
 * "FM_IHELP_WAT2"                        = Waiting for other players
 * "FM_JIP_WAITO"                            = Game options are being set
 * "FMMC_DOWNLOAD"                    = Downloading
 * "FMMC_PLYLOAD"                         = Loading
 * "FMMC_STARTTRAN"                    = Launching session
 * "HUD_QUITTING"                           =  Quiting session
 * "KILL_STRIP_IDM"                         = Waiting for to accept
 * "MP_SPINLOADING"                      = Loading
 * @param string
 */
function beginTextCommandBusyspinnerOn(string) {
    return _in(0xaba17d7c, 0xe615adbf, _ts(string));
}
exports.beginTextCommandBusyspinnerOn = beginTextCommandBusyspinnerOn;
/**
 * clears a print text command with this text
 * @param text
 */
function beginTextCommandClearPrint(text) {
    return _in(0xe124fa80, 0xa759019c, _ts(text));
}
exports.beginTextCommandClearPrint = beginTextCommandClearPrint;
/**
 * Used to be known as _SET_TEXT_COMPONENT_FORMAT
 * @param inputType
 */
function beginTextCommandDisplayHelp(inputType) {
    return _in(0x8509b634, 0xfbe7da11, _ts(inputType));
}
exports.beginTextCommandDisplayHelp = beginTextCommandDisplayHelp;
/**
 * The following were found in the decompiled script files:
 * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
 *
 * ESDOLLA - cash
 * ESMINDOLLA - cash (negative)
 *
 * Used to be known as _SET_TEXT_ENTRY
 * @param text
 */
function beginTextCommandDisplayText(text) {
    return _in(0x25fbb336, 0xdf1804cb, _ts(text));
}
exports.beginTextCommandDisplayText = beginTextCommandDisplayText;
/**
 * int GetLineCount(char *text, float x, float y)
 * {
 * BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
 * }
 * @param entry
 */
function beginTextCommandGetNumberOfLinesForString(entry) {
    return _in(0x521fb041, 0xd93dd0e4, _ts(entry));
}
exports.beginTextCommandGetNumberOfLinesForString = beginTextCommandGetNumberOfLinesForString;
function beginTextCommandGetScreenWidthOfDisplayText(text) {
    return _in(0x54ce8ac9, 0x8e120cab, _ts(text));
}
exports.beginTextCommandGetScreenWidthOfDisplayText = beginTextCommandGetScreenWidthOfDisplayText;
/**
 * nothin doin.
 *
 * BOOL Message(const char* text)
 * {
 * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
 * }
 * @param text
 */
function beginTextCommandIsMessageDisplayed(text) {
    return _in(0x853648fd, 0x1063a213, _ts(text));
}
exports.beginTextCommandIsMessageDisplayed = beginTextCommandIsMessageDisplayed;
/**
 * BOOL IsContextActive(char *ctx)
 * {
 * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
 * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
 * }
 * @param labelName
 */
function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName) {
    return _in(0x0a24da3a, 0x41b718f5, _ts(labelName));
}
exports.beginTextCommandIsThisHelpMessageBeingDisplayed = beginTextCommandIsThisHelpMessageBeingDisplayed;
function beginTextCommandOverrideButtonText(gxtEntry) {
    return _in(0x8f9ee568, 0x7f8eeccd, _ts(gxtEntry));
}
exports.beginTextCommandOverrideButtonText = beginTextCommandOverrideButtonText;
/**
 * void ShowSubtitle(const char *text)
 * {
 * BEGIN_TEXT_COMMAND_PRINT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_PRINT(2000, true);
 * }
 * @param GxtEntry
 */
function beginTextCommandPrint(GxtEntry) {
    return _in(0xb87a37ee, 0xb7faa67d, _ts(GxtEntry));
}
exports.beginTextCommandPrint = beginTextCommandPrint;
/**
 * Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
 *
 * Examples:
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
 * HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 *
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 *
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 *
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * @param componentType
 */
function beginTextCommandScaleformString(componentType) {
    return _in(0x80338406, 0xf3475e55, _ts(componentType));
}
exports.beginTextCommandScaleformString = beginTextCommandScaleformString;
/**
 * Starts a text command to change the name of a blip displayed in the pause menu.
 * This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
 * Example:
 *
 * HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");
 * HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
 * @param textLabel
 */
function beginTextCommandSetBlipName(textLabel) {
    return _in(0xf9113a30, 0xde5c6670, _ts(textLabel));
}
exports.beginTextCommandSetBlipName = beginTextCommandSetBlipName;
/**
 * Declares the entry type of a notification, for example "STRING".
 *
 * int ShowNotification(char *text)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
 * }
 * @param text
 */
function beginTextCommandThefeedPost(text) {
    return _in(0x202709f4, 0xc58a0424, _ts(text));
}
exports.beginTextCommandThefeedPost = beginTextCommandThefeedPost;
function bgDoesLaunchParamExist(scriptIndex, p1) {
    return _in(0x0f6f1ebb, 0xc4e1d5e6, scriptIndex, _ts(p1), _r);
}
exports.bgDoesLaunchParamExist = bgDoesLaunchParamExist;
/**
 * Deletes the given context from the background scripts context map.
 * @param contextName
 */
function bgEndContext(contextName) {
    return _in(0xdc2bacd9, 0x20d0a0dd, _ts(contextName));
}
exports.bgEndContext = bgEndContext;
/**
 * Hashed version of BG_END_CONTEXT.
 * @param contextHash
 */
function bgEndContextHash(contextHash) {
    return _in(0x107e5cc7, 0xca942bc1, _ch(contextHash));
}
exports.bgEndContextHash = bgEndContextHash;
function bgGetLaunchParamValue(scriptIndex, p1) {
    return _in(0x22e21fbc, 0xfc88c149, scriptIndex, _ts(p1), _r, _ri);
}
exports.bgGetLaunchParamValue = bgGetLaunchParamValue;
function bgGetScriptIdFromNameHash(p0) {
    return _in(0x829cd22e, 0x043a2577, _ch(p0), _r, _ri);
}
exports.bgGetScriptIdFromNameHash = bgGetScriptIdFromNameHash;
/**
 * Returns true if bit 0 in GtaThread+0x154 is set.
 */
function bgIsExitflagSet() {
    return _in(0x836b6271, 0x3e0534ca, _r);
}
exports.bgIsExitflagSet = bgIsExitflagSet;
/**
 * Sets bit 1 in GtaThread+0x154
 */
function bgSetExitflagResponse() {
    return _in(0x760910b4, 0x9d2b98ea);
}
exports.bgSetExitflagResponse = bgSetExitflagResponse;
/**
 * Inserts the given context into the background scripts context map.
 * @param contextName
 */
function bgStartContext(contextName) {
    return _in(0x9d5a25ba, 0xdb742acd, _ts(contextName));
}
exports.bgStartContext = bgStartContext;
/**
 * Hashed version of BG_START_CONTEXT.
 * @param contextHash
 */
function bgStartContextHash(contextHash) {
    return _in(0x75b18e49, 0x607874c7, _ch(contextHash));
}
exports.bgStartContextHash = bgStartContextHash;
/**
 * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
 * Only works on vehicles with a police siren.
 * @param vehicle
 */
function blipSiren(vehicle) {
    return _in(0x1b9025bd, 0xa76822b6, vehicle);
}
exports.blipSiren = blipSiren;
function blockAllSpeechFromPed(ped, p1, p2) {
    return _in(0xf8ad2eed, 0x7c47e8fe, ped, p1, p2);
}
exports.blockAllSpeechFromPed = blockAllSpeechFromPed;
function blockDeathJingle(toggle) {
    return _in(0xf154b8d1, 0x775b2dec, toggle);
}
exports.blockDeathJingle = blockDeathJingle;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 *
 * This is limited to 4 blocked events at a time.
 * @param name
 * @param eventType
 */
function blockDecisionMakerEvent(name, eventType) {
    return _in(0xe42fcdfd, 0x0e4196f7, _ch(name), eventType);
}
exports.blockDecisionMakerEvent = blockDecisionMakerEvent;
function blockDispatchServiceResourceCreation(dispatchService, toggle) {
    return _in(0x9b2bd377, 0x3123ea2f, dispatchService, toggle);
}
exports.blockDispatchServiceResourceCreation = blockDispatchServiceResourceCreation;
function blockFirstPersonOrientationResetThisUpdate() {
    return _in(0x9f97da93, 0x681f87ea);
}
exports.blockFirstPersonOrientationResetThisUpdate = blockFirstPersonOrientationResetThisUpdate;
function blockPedFromGeneratingDeadBodyEventsWhenDead(ped, toggle) {
    return _in(0xe43a13c9, 0xe4cccbcf, ped, toggle);
}
exports.blockPedFromGeneratingDeadBodyEventsWhenDead = blockPedFromGeneratingDeadBodyEventsWhenDead;
function blockPlayersForAmbientPickup(p0, p1) {
    return _in(0x1e3f1b1b, 0x891a2aaa, p0, p1);
}
exports.blockPlayersForAmbientPickup = blockPlayersForAmbientPickup;
function blockSpeechContextGroup(p0, p1) {
    return _in(0xa8a7d434, 0xafb4b97b, _ts(p0), p1);
}
exports.blockSpeechContextGroup = blockSpeechContextGroup;
function breakEntityGlass(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    return _in(0x2e648d16, 0xf6e308f3, entity, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10);
}
exports.breakEntityGlass = breakEntityGlass;
function breakObjectFragmentChild(p0, p1, p2) {
    return _in(0xe7e4c198, 0xb0185900, p0, p1, p2);
}
exports.breakObjectFragmentChild = breakObjectFragmentChild;
/**
 * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
 *
 * . distance defines how far it will travel until stopping. Garage doors use 3.0.
 *
 * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
 * @param vehicle
 * @param distance
 * @param duration
 * @param p3
 */
function bringVehicleToHalt(vehicle, distance, duration, p3) {
    return _in(0x260be8f0, 0x9e326a20, vehicle, _fv(distance), duration, p3);
}
exports.bringVehicleToHalt = bringVehicleToHalt;
function busyspinnerIsDisplaying() {
    return _in(0xb2a592b0, 0x4648a9cb, _r);
}
exports.busyspinnerIsDisplaying = busyspinnerIsDisplaying;
function busyspinnerIsOn() {
    return _in(0xd422fcc5, 0xf239a915, _r);
}
exports.busyspinnerIsOn = busyspinnerIsOn;
/**
 * Removes the loading prompt at the bottom right of the screen.
 */
function busyspinnerOff() {
    return _in(0x10d37332, 0x3e5b9c0d);
}
exports.busyspinnerOff = busyspinnerOff;
function bypassCameraCollisionBuoyancyTestThisUpdate() {
    return _in(0xa7092afe, 0x81944852);
}
exports.bypassCameraCollisionBuoyancyTestThisUpdate = bypassCameraCollisionBuoyancyTestThisUpdate;
function bypassCutsceneCamRenderingThisUpdate() {
    return _in(0xdb629ffd, 0x9285fa06);
}
exports.bypassCutsceneCamRenderingThisUpdate = bypassCutsceneCamRenderingThisUpdate;
/**
 * Calculates the travel distance between a set of points.
 *
 * Doesn't seem to correlate with distance on gps sometimes.
 * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function calculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2) {
    return _in(0xadd95c70, 0x05c4a197, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf);
}
exports.calculateTravelDistanceBetweenPoints = calculateTravelDistanceBetweenPoints;
/**
 * Calls the Scaleform function.
 * @param scaleform
 * @param method
 */
function callScaleformMovieMethod(scaleform, method) {
    return _in(0xfbd96d87, 0xac96d533, scaleform, _ts(method));
}
exports.callScaleformMovieMethod = callScaleformMovieMethod;
/**
 * Calls the Scaleform function and passes the parameters as floats.
 *
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
function callScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5) {
    return _in(0xd0837058, 0xae2e4bee, scaleform, _ts(methodName), _fv(param1), _fv(param2), _fv(param3), _fv(param4), _fv(param5));
}
exports.callScaleformMovieMethodWithNumber = callScaleformMovieMethodWithNumber;
/**
 * Calls the Scaleform function and passes both float and string parameters (in their respective order).
 *
 * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
 *
 * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
 *
 * Examples:
 * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
 * GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
 *
 * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
 * GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
 * @param scaleform
 * @param methodName
 * @param floatParam1
 * @param floatParam2
 * @param floatParam3
 * @param floatParam4
 * @param floatParam5
 * @param stringParam1
 * @param stringParam2
 * @param stringParam3
 * @param stringParam4
 * @param stringParam5
 */
function callScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5) {
    return _in(0xef662d8d, 0x57e290b1, scaleform, _ts(methodName), _fv(floatParam1), _fv(floatParam2), _fv(floatParam3), _fv(floatParam4), _fv(floatParam5), _ts(stringParam1), _ts(stringParam2), _ts(stringParam3), _ts(stringParam4), _ts(stringParam5));
}
exports.callScaleformMovieMethodWithNumberAndString = callScaleformMovieMethodWithNumberAndString;
/**
 * Calls the Scaleform function and passes the parameters as strings.
 *
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
function callScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5) {
    return _in(0x51bc1ed3, 0xcc44e8f7, scaleform, _ts(methodName), _ts(param1), _ts(param2), _ts(param3), _ts(param4), _ts(param5));
}
exports.callScaleformMovieMethodWithString = callScaleformMovieMethodWithString;
function cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate() {
    return _in(0x62374889, 0xa4d59f72);
}
exports.cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate = cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate;
function canAnchorBoatHere(vehicle) {
    return _in(0x26c10ecb, 0xda5d043b, vehicle, _r);
}
exports.canAnchorBoatHere = canAnchorBoatHere;
function canAnchorBoatHereIgnorePlayers(vehicle) {
    return _in(0x24f4121d, 0x07579880, vehicle, _r);
}
exports.canAnchorBoatHereIgnorePlayers = canAnchorBoatHereIgnorePlayers;
function canCargobobPickUpEntity(p0, p1) {
    return _in(0x2c1d8b3b, 0x19e517cc, p0, p1, _r);
}
exports.canCargobobPickUpEntity = canCargobobPickUpEntity;
function canCreateRandomBikeRider() {
    return _in(0xeaceeda8, 0x1751915c, _r);
}
exports.canCreateRandomBikeRider = canCreateRandomBikeRider;
function canCreateRandomCops() {
    return _in(0x5ee2caff, 0x7f17770d, _r);
}
exports.canCreateRandomCops = canCreateRandomCops;
function canCreateRandomDriver() {
    return _in(0xb8eb95e5, 0xb4e56978, _r);
}
exports.canCreateRandomDriver = canCreateRandomDriver;
function canCreateRandomPed(p0) {
    return _in(0x3e8349c0, 0x8e4b82e4, p0, _r);
}
exports.canCreateRandomPed = canCreateRandomPed;
function canKnockPedOffVehicle(ped) {
    return _in(0x51ac07a4, 0x4d4f5b8a, ped, _r);
}
exports.canKnockPedOffVehicle = canKnockPedOffVehicle;
function canPayAmountToBoss(p0, p1, amount, p3) {
    const [retval, p3_out] = _in(0x9777734d, 0xad16992f, p0, p1, amount, _ii(p3), _r);
    return [retval, p3_out];
}
exports.canPayAmountToBoss = canPayAmountToBoss;
function canPedHearPlayer(player, ped) {
    return _in(0xf297383a, 0xa91dca29, player, ped, _r);
}
exports.canPedHearPlayer = canPedHearPlayer;
function canPedInCombatSeeTarget(ped, target) {
    return _in(0xead42de3, 0x610d0721, ped, target, _r);
}
exports.canPedInCombatSeeTarget = canPedInCombatSeeTarget;
/**
 * Prevents the ped from going limp.
 *
 * [Example: Can prevent peds from falling when standing on moving vehicles.]
 * @param ped
 */
function canPedRagdoll(ped) {
    return _in(0x128f79ed, 0xcece4fd5, ped, _r);
}
exports.canPedRagdoll = canPedRagdoll;
function canPedSeeHatedPed(ped1, ped2) {
    return _in(0x6cd5a433, 0x374d4cfb, ped1, ped2, _r);
}
exports.canPedSeeHatedPed = canPedSeeHatedPed;
function canPedShuffleToOrFromExtraSeat(ped, p1) {
    const [retval, p1_out] = _in(0x2dfc81c9, 0xb9608549, ped, _ii(p1), _r);
    return [retval, p1_out];
}
exports.canPedShuffleToOrFromExtraSeat = canPedShuffleToOrFromExtraSeat;
function canPedShuffleToOrFromTurretSeat(ped, p1) {
    const [retval, p1_out] = _in(0x9c6a6c19, 0xb6c0c496, ped, _ii(p1), _r);
    return [retval, p1_out];
}
exports.canPedShuffleToOrFromTurretSeat = canPedShuffleToOrFromTurretSeat;
/**
 * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
 *
 *
 * I can confirm the above. This function is hard-coded to always return 1.
 */
function canPhoneBeSeenOnScreen() {
    return _in(0xc4e28138, 0x98c97a4b, _r);
}
exports.canPhoneBeSeenOnScreen = canPhoneBeSeenOnScreen;
function canPlayerStartMission(player) {
    return _in(0xde7465a2, 0x7d403c06, player, _r);
}
exports.canPlayerStartMission = canPlayerStartMission;
function canRegisterMissionDoors(p0) {
    return _in(0xe16aa70c, 0xe9beedc3, p0, _r);
}
exports.canRegisterMissionDoors = canRegisterMissionDoors;
function canRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt) {
    return _in(0x69778e75, 0x64bade6d, ped_amt, vehicle_amt, object_amt, pickup_amt, _r);
}
exports.canRegisterMissionEntities = canRegisterMissionEntities;
function canRegisterMissionObjects(amount) {
    return _in(0x800dd472, 0x1a8b008b, amount, _r);
}
exports.canRegisterMissionObjects = canRegisterMissionObjects;
function canRegisterMissionPeds(amount) {
    return _in(0xbcbf4fef, 0x9fa5d781, amount, _r);
}
exports.canRegisterMissionPeds = canRegisterMissionPeds;
function canRegisterMissionPickups(amount) {
    return _in(0x0a49d1cb, 0x6e34af72, amount, _r);
}
exports.canRegisterMissionPickups = canRegisterMissionPickups;
function canRegisterMissionVehicles(amount) {
    return _in(0x7277f1f2, 0xe085ee74, amount, _r);
}
exports.canRegisterMissionVehicles = canRegisterMissionVehicles;
function canRequestAssetsForCutsceneEntity() {
    return _in(0xb56bbbcc, 0x2955d9cb, _r);
}
exports.canRequestAssetsForCutsceneEntity = canRequestAssetsForCutsceneEntity;
/**
 * modelHash (p1) was always 0 in R* scripts
 * @param cutsceneEntName
 * @param modelHash
 */
function canSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash) {
    return _in(0x645d0b45, 0x8d8e17b5, _ts(cutsceneEntName), _ch(modelHash), _r);
}
exports.canSetEnterStateForRegisteredEntity = canSetEnterStateForRegisteredEntity;
function canSetExitStateForCamera(p0) {
    return _in(0xb2cbcd09, 0x30dfb420, p0, _r);
}
exports.canSetExitStateForCamera = canSetExitStateForCamera;
function canSetExitStateForRegisteredEntity(cutsceneEntName, modelHash) {
    return _in(0x4c6a6451, 0xc79e4662, _ts(cutsceneEntName), _ch(modelHash), _r);
}
exports.canSetExitStateForRegisteredEntity = canSetExitStateForRegisteredEntity;
function canShuffleSeat(vehicle, seatIndex) {
    return _in(0x30785d90, 0xc956bf35, vehicle, seatIndex, _r);
}
exports.canShuffleSeat = canShuffleSeat;
function canUseMobilePhoneDuringCutscene() {
    return _in(0x5edef0cf, 0x8c1dab3c, _r);
}
exports.canUseMobilePhoneDuringCutscene = canUseMobilePhoneDuringCutscene;
/**
 * this returns if you can use the weapon while using a parachute
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
function canUseWeaponOnParachute(weaponHash) {
    return _in(0xbc7be5ab, 0xc0879f74, _ch(weaponHash), _r);
}
exports.canUseWeaponOnParachute = canUseWeaponOnParachute;
function canVehicleReceiveCbRadio(vehicle) {
    return _in(0x032a1166, 0x63a4d5ac, vehicle, _r);
}
exports.canVehicleReceiveCbRadio = canVehicleReceiveCbRadio;
function cancelAllPoliceReports() {
    return _in(0xb4f90faf, 0x7670b16f);
}
exports.cancelAllPoliceReports = cancelAllPoliceReports;
/**
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
function cancelMusicEvent(eventName) {
    return _in(0x5b17a902, 0x91133da5, _ts(eventName), _r);
}
exports.cancelMusicEvent = cancelMusicEvent;
/**
 * DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
 * Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
 */
function cancelOnscreenKeyboard() {
    return _in(0x58a39be5, 0x97ce99cd);
}
exports.cancelOnscreenKeyboard = cancelOnscreenKeyboard;
/**
 * Stops recording and discards the recorded clip.
 */
function cancelReplayRecording() {
    return _in(0x88bb3507, 0xed41a240);
}
exports.cancelReplayRecording = cancelReplayRecording;
function cancelStuntJump() {
    return _in(0xe6b7b0ac, 0xd4e4b75e);
}
exports.cancelStuntJump = cancelStuntJump;
/**
 * Does something similar to INTERIOR::DISABLE_INTERIOR
 * @param interior
 * @param toggle
 */
function capInterior(interior, toggle) {
    return _in(0xd9175f94, 0x1610db54, interior, toggle);
}
exports.capInterior = capInterior;
function cascadeShadowsClearShadowSampleType() {
    return _in(0x27cb7722, 0x18215325);
}
exports.cascadeShadowsClearShadowSampleType = cascadeShadowsClearShadowSampleType;
/**
 * When this is set to ON, shadows only draw as you get nearer.
 *
 * When OFF, they draw from a further distance.
 * @param toggle
 */
function cascadeShadowsEnableEntityTracker(toggle) {
    return _in(0x80ecbc0c, 0x856d3b0b, toggle);
}
exports.cascadeShadowsEnableEntityTracker = cascadeShadowsEnableEntityTracker;
function cascadeShadowsEnableFreezer(p0) {
    return _in(0x0ae73d8d, 0xf3a762b2, p0);
}
exports.cascadeShadowsEnableFreezer = cascadeShadowsEnableFreezer;
function cascadeShadowsInitSession() {
    return _in(0x03fc694a, 0xe06c5a20);
}
exports.cascadeShadowsInitSession = cascadeShadowsInitSession;
function cascadeShadowsSetAircraftMode(p0) {
    return _in(0x6ddbf9df, 0xfc4ac080, p0);
}
exports.cascadeShadowsSetAircraftMode = cascadeShadowsSetAircraftMode;
function cascadeShadowsSetBoundPosition(p0) {
    return _in(0x259ba6d4, 0xe6f808f1, p0);
}
exports.cascadeShadowsSetBoundPosition = cascadeShadowsSetBoundPosition;
function cascadeShadowsSetCascadeBounds(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0xd2936cab, 0x8b58fcbd, p0, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7));
}
exports.cascadeShadowsSetCascadeBounds = cascadeShadowsSetCascadeBounds;
function cascadeShadowsSetCascadeBoundsScale(p0) {
    return _in(0x5f0f3f56, 0x635809ef, _fv(p0));
}
exports.cascadeShadowsSetCascadeBoundsScale = cascadeShadowsSetCascadeBoundsScale;
function cascadeShadowsSetDynamicDepthMode(p0) {
    return _in(0xd39d13c9, 0xfebf0511, p0);
}
exports.cascadeShadowsSetDynamicDepthMode = cascadeShadowsSetDynamicDepthMode;
function cascadeShadowsSetDynamicDepthValue(p0) {
    return _in(0x02ac28f3, 0xa01fa04a, _fv(p0));
}
exports.cascadeShadowsSetDynamicDepthValue = cascadeShadowsSetDynamicDepthValue;
function cascadeShadowsSetEntityTrackerScale(p0) {
    return _in(0x5e9daf5a, 0x20f15908, _fv(p0));
}
exports.cascadeShadowsSetEntityTrackerScale = cascadeShadowsSetEntityTrackerScale;
function cascadeShadowsSetScreenSizeCheckEnabled(p0) {
    return _in(0x25fc3e33, 0xa31ad0c9, p0);
}
exports.cascadeShadowsSetScreenSizeCheckEnabled = cascadeShadowsSetScreenSizeCheckEnabled;
/**
 * Possible values:
 * "CSM_ST_POINT"
 * "CSM_ST_LINEAR"
 * "CSM_ST_TWOTAP"
 * "CSM_ST_BOX3x3"
 * "CSM_ST_BOX4x4"
 * "CSM_ST_DITHER2_LINEAR"
 * "CSM_ST_CUBIC"
 * "CSM_ST_DITHER4"
 * "CSM_ST_DITHER16"
 * "CSM_ST_SOFT16"
 * "CSM_ST_DITHER16_RPDB"
 * "CSM_ST_POISSON16_RPDB_GNORM"
 * "CSM_ST_HIGHRES_BOX4x4"
 * "CSM_ST_CLOUDS_SIMPLE"
 * "CSM_ST_CLOUDS_LINEAR"
 * "CSM_ST_CLOUDS_TWOTAP"
 * "CSM_ST_CLOUDS_BOX3x3"
 * "CSM_ST_CLOUDS_BOX4x4"
 * "CSM_ST_CLOUDS_DITHER2_LINEAR"
 * "CSM_ST_CLOUDS_SOFT16"
 * "CSM_ST_CLOUDS_DITHER16_RPDB"
 * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
 * @param type
 */
function cascadeShadowsSetShadowSampleType(type) {
    return _in(0xb11d94bc, 0x55f41932, _ts(type));
}
exports.cascadeShadowsSetShadowSampleType = cascadeShadowsSetShadowSampleType;
function cascadeShadowsSetSplitZExpWeight(p0) {
    return _in(0x36f66264, 0x59d91457, _fv(p0));
}
exports.cascadeShadowsSetSplitZExpWeight = cascadeShadowsSetSplitZExpWeight;
/**
 * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
 * @param value
 */
function ceil(value) {
    return _in(0x11e019c8, 0xf43acc8a, _fv(value), _r, _ri);
}
exports.ceil = ceil;
function cellCamActivate(p0, p1) {
    return _in(0xfde8f069, 0xc542d126, p0, p1);
}
exports.cellCamActivate = cellCamActivate;
function cellCamActivateSelfieMode(toggle) {
    return _in(0x015c49a9, 0x3e3e086e, toggle);
}
exports.cellCamActivateSelfieMode = cellCamActivateSelfieMode;
function cellCamActivateShallowDofMode(toggle) {
    return _in(0xa2ccbe62, 0xcd4c91a4, toggle);
}
exports.cellCamActivateShallowDofMode = cellCamActivateShallowDofMode;
function cellCamIsCharVisibleNoFaceCheck(entity) {
    return _in(0x439e9bc9, 0x5b7e7fbe, entity, _r);
}
exports.cellCamIsCharVisibleNoFaceCheck = cellCamIsCharVisibleNoFaceCheck;
function cellCamSetSelfieModeDistanceScaling(distanceScaling) {
    return _in(0xac289047, 0x1901861c, _fv(distanceScaling));
}
exports.cellCamSetSelfieModeDistanceScaling = cellCamSetSelfieModeDistanceScaling;
function cellCamSetSelfieModeHeadPitchOffset(pitch) {
    return _in(0x466da42c, 0x89865553, _fv(pitch));
}
exports.cellCamSetSelfieModeHeadPitchOffset = cellCamSetSelfieModeHeadPitchOffset;
function cellCamSetSelfieModeHeadRollOffset(roll) {
    return _in(0xf1e22dc1, 0x3f5eebad, _fv(roll));
}
exports.cellCamSetSelfieModeHeadRollOffset = cellCamSetSelfieModeHeadRollOffset;
function cellCamSetSelfieModeHeadYawOffset(yaw) {
    return _in(0xd6ade981, 0x781fca09, _fv(yaw));
}
exports.cellCamSetSelfieModeHeadYawOffset = cellCamSetSelfieModeHeadYawOffset;
function cellCamSetSelfieModeHorzPanOffset(horizontalPan) {
    return _in(0x53f4892d, 0x18ec90a4, _fv(horizontalPan));
}
exports.cellCamSetSelfieModeHorzPanOffset = cellCamSetSelfieModeHorzPanOffset;
function cellCamSetSelfieModeRollOffset(roll) {
    return _in(0x15e69e28, 0x02c24b8d, _fv(roll));
}
exports.cellCamSetSelfieModeRollOffset = cellCamSetSelfieModeRollOffset;
function cellCamSetSelfieModeSideOffsetScaling(p0) {
    return _in(0x1b0b4aee, 0xd5b9b41c, _fv(p0));
}
exports.cellCamSetSelfieModeSideOffsetScaling = cellCamSetSelfieModeSideOffsetScaling;
function cellCamSetSelfieModeVertPanOffset(vertPan) {
    return _in(0x3117d84e, 0xfa60f77b, _fv(vertPan));
}
exports.cellCamSetSelfieModeVertPanOffset = cellCamSetSelfieModeVertPanOffset;
/**
 * if the bool "Toggle" is "true" so the phone is lean.
 * if the bool "Toggle" is "false" so the phone is not lean.
 * @param toggle
 */
function cellHorizontalModeToggle(toggle) {
    return _in(0x44e44169, 0xef70138e, toggle);
}
exports.cellHorizontalModeToggle = cellHorizontalModeToggle;
/**
 * For move the finger of player, the value of int goes 1 at 5.
 * @param direction
 */
function cellSetInput(direction) {
    return _in(0x95c9e72f, 0x3d7dec9b, direction);
}
exports.cellSetInput = cellSetInput;
/**
 * Displays cash change notifications on HUD.
 * @param cash
 * @param bank
 */
function changeFakeMpCash(cash, bank) {
    return _in(0x0772df77, 0x852c2e30, cash, bank);
}
exports.changeFakeMpCash = changeFakeMpCash;
function changeGoonLookingForWork(p0) {
    return _in(0x44919cc0, 0x79bb60bf, p0);
}
exports.changeGoonLookingForWork = changeGoonLookingForWork;
function changePlayerPed(player, ped, p2, resetDamage) {
    return _in(0x048189fa, 0xc643deee, player, ped, p2, resetDamage);
}
exports.changePlayerPed = changePlayerPed;
function changeUniform(p0, p1, p2) {
    return _in(0xd1c9b92b, 0xdd3f151d, p0, p1, p2);
}
exports.changeUniform = changeUniform;
function cleanItemset(itemset) {
    return _in(0x41bc0d72, 0x2fc04221, itemset);
}
exports.cleanItemset = cleanItemset;
function cleanupAsyncInstall() {
    return _in(0xc79ae219, 0x74b01fb2);
}
exports.cleanupAsyncInstall = cleanupAsyncInstall;
function clearAdditionalText(p0, p1) {
    return _in(0x2a179df1, 0x7ccf04cd, p0, p1);
}
exports.clearAdditionalText = clearAdditionalText;
function clearAllBlipRoutes() {
    return _in(0xd12882d3, 0xff82bf11);
}
exports.clearAllBlipRoutes = clearAllBlipRoutes;
function clearAllBrokenGlass() {
    return _in(0xb32209ef, 0xfdc04913);
}
exports.clearAllBrokenGlass = clearAllBrokenGlass;
function clearAllHelpMessages() {
    return _in(0x6178f68a, 0x87a4d3a0);
}
exports.clearAllHelpMessages = clearAllHelpMessages;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 */
function clearAllPedProps(ped, p1) {
    return _in(0xcd8a7537, 0xa9b52f06, ped, p1);
}
exports.clearAllPedProps = clearAllPedProps;
function clearAllPedVehicleForcedSeatUsage(ped) {
    return _in(0xe6ca85e7, 0x259ce16b, ped);
}
exports.clearAllPedVehicleForcedSeatUsage = clearAllPedVehicleForcedSeatUsage;
function clearAllPickupRewardTypeSuppression() {
    return _in(0xa2c1f5e9, 0x2afe49ed);
}
exports.clearAllPickupRewardTypeSuppression = clearAllPickupRewardTypeSuppression;
function clearAllTcmodifierOverrides(p0) {
    return _in(0x15e33297, 0xc3e8dc60, _ts(p0));
}
exports.clearAllTcmodifierOverrides = clearAllTcmodifierOverrides;
function clearAmbientZoneListState(ambientZone, p1) {
    return _in(0x120c48c6, 0x14909fa4, _ts(ambientZone), p1);
}
exports.clearAmbientZoneListState = clearAmbientZoneListState;
/**
 * This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);
 *
 * Still needs more research.
 *
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param zoneName
 * @param p1
 */
function clearAmbientZoneState(zoneName, p1) {
    return _in(0x218dd44a, 0xaac964ff, _ts(zoneName), p1);
}
exports.clearAmbientZoneState = clearAmbientZoneState;
function clearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13) {
    return _in(0x11db3500, 0xf042a8aa, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7, p8, p9, p10, p11, p12, p13);
}
exports.clearAngledAreaOfVehicles = clearAngledAreaOfVehicles;
/**
 * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
 * @param X
 * @param Y
 * @param Z
 * @param radius
 * @param p4
 * @param ignoreCopCars
 * @param ignoreObjects
 * @param p7
 */
function clearArea(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7) {
    return _in(0xa56f01f3, 0x765b93a0, _fv(X), _fv(Y), _fv(Z), _fv(radius), p4, ignoreCopCars, ignoreObjects, p7);
}
exports.clearArea = clearArea;
/**
 * MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
function clearAreaLeaveVehicleHealth(x, y, z, radius, p4, p5, p6, p7) {
    return _in(0x957838aa, 0xf91bd12d, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, p7);
}
exports.clearAreaLeaveVehicleHealth = clearAreaLeaveVehicleHealth;
/**
 * flags appears to always be 0
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
function clearAreaOfCops(x, y, z, radius, flags) {
    return _in(0x04f8fc8f, 0xcf58f88d, _fv(x), _fv(y), _fv(z), _fv(radius), flags);
}
exports.clearAreaOfCops = clearAreaOfCops;
/**
 * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
function clearAreaOfObjects(x, y, z, radius, flags) {
    return _in(0xdd9b9b38, 0x5aac7f5b, _fv(x), _fv(y), _fv(z), _fv(radius), flags);
}
exports.clearAreaOfObjects = clearAreaOfObjects;
/**
 * Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
function clearAreaOfPeds(x, y, z, radius, flags) {
    return _in(0xbe31fd6c, 0xe464ac59, _fv(x), _fv(y), _fv(z), _fv(radius), flags);
}
exports.clearAreaOfPeds = clearAreaOfPeds;
/**
 * flags is usually 0 in the scripts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
function clearAreaOfProjectiles(x, y, z, radius, flags) {
    return _in(0x0a1cb909, 0x4635d1a6, _fv(x), _fv(y), _fv(z), _fv(radius), flags);
}
exports.clearAreaOfProjectiles = clearAreaOfProjectiles;
/**
 * Example:
 * CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
function clearAreaOfVehicles(x, y, z, radius, p4, p5, p6, p7, p8, p9, p10) {
    return _in(0x01c7b9b3, 0x8428aeb6, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, p7, p8, p9, p10);
}
exports.clearAreaOfVehicles = clearAreaOfVehicles;
/**
 * This sets bit [offset] of [address] to off.
 *
 * Example:
 * MISC::CLEAR_BIT(&bitAddress, 1);
 *
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
 * @param address
 * @param offset
 */
function clearBit(offset) {
    return _in(0xe80492a9, 0xac099a93, _i, offset);
}
exports.clearBit = clearBit;
function clearBrief() {
    return _in(0x9d292f73, 0xadbd9313);
}
exports.clearBrief = clearBrief;
function clearCodeRequestedAutosave() {
    return _in(0x06462a96, 0x1e94b67c);
}
exports.clearCodeRequestedAutosave = clearCodeRequestedAutosave;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function clearControlLightEffect(control) {
    return _in(0xcb0360ef, 0xefb2580d, control);
}
exports.clearControlLightEffect = clearControlLightEffect;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function clearControlShakeSuppressedId(control) {
    return _in(0xa0cefcea, 0x390aab9b, control);
}
exports.clearControlShakeSuppressedId = clearControlShakeSuppressedId;
function clearCoverPointForPed(ped) {
    return _in(0x637822dc, 0x2afeebf8, ped);
}
exports.clearCoverPointForPed = clearCoverPointForPed;
/**
 * 3 calls in the b617d scripts, removed duplicate.
 *
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
 * @param radioStation
 */
function clearCustomRadioTrackList(radioStation) {
    return _in(0x1654f24a, 0x88a8e3fe, _ts(radioStation));
}
exports.clearCustomRadioTrackList = clearCustomRadioTrackList;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param name
 * @param eventType
 */
function clearDecisionMakerEventResponse(name, eventType) {
    return _in(0x4fc9381a, 0x7aee8968, _ch(name), eventType);
}
exports.clearDecisionMakerEventResponse = clearDecisionMakerEventResponse;
function clearDefaultPrimaryTask(ped) {
    return _in(0x6100b3ce, 0xfd43452e, ped);
}
exports.clearDefaultPrimaryTask = clearDefaultPrimaryTask;
/**
 * Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
 *
 * See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
 */
function clearDrawOrigin() {
    return _in(0xff0b610f, 0x6be0d7af);
}
exports.clearDrawOrigin = clearDrawOrigin;
function clearDrivebyTaskUnderneathDrivingTask(ped) {
    return _in(0xc35b5cdb, 0x2824cf69, ped);
}
exports.clearDrivebyTaskUnderneathDrivingTask = clearDrivebyTaskUnderneathDrivingTask;
function clearDynamicPauseMenuErrorMessage() {
    return _in(0x7792424a, 0xa0eac32e);
}
exports.clearDynamicPauseMenuErrorMessage = clearDynamicPauseMenuErrorMessage;
function clearEntityLastDamageEntity(entity) {
    return _in(0xa72cd9ca, 0x74a5ecba, entity);
}
exports.clearEntityLastDamageEntity = clearEntityLastDamageEntity;
function clearEntityLastWeaponDamage(entity) {
    return _in(0xac678e40, 0xbe7c74d2, entity);
}
exports.clearEntityLastWeaponDamage = clearEntityLastWeaponDamage;
/**
 * Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
 */
function clearExtendedPickupProbeAreas() {
    return _in(0xb7c6d80f, 0xb371659a);
}
exports.clearExtendedPickupProbeAreas = clearExtendedPickupProbeAreas;
/**
 * Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
 */
function clearExtraTcmodifier() {
    return _in(0x92ccc17a, 0x7a2285da);
}
exports.clearExtraTcmodifier = clearExtraTcmodifier;
function clearFacialIdleAnimOverride(ped) {
    return _in(0x726256cc, 0x1eeb182f, ped);
}
exports.clearFacialIdleAnimOverride = clearFacialIdleAnimOverride;
function clearFakeConeArray() {
    return _in(0x8410c5e0, 0xcd847b9d);
}
exports.clearFakeConeArray = clearFakeConeArray;
function clearFloatingHelp(hudIndex, p1) {
    return _in(0x50085246, 0xabd3fefa, hudIndex, p1);
}
exports.clearFloatingHelp = clearFloatingHelp;
function clearFocus() {
    return _in(0x31b73d1e, 0xa9f01da2);
}
exports.clearFocus = clearFocus;
function clearGarage(garageHash, isNetwork) {
    return _in(0xda051942, 0x60cdcdf9, _ch(garageHash), isNetwork);
}
exports.clearGarage = clearGarage;
function clearGpsCustomRoute() {
    return _in(0xe6de0561, 0xd9232a64);
}
exports.clearGpsCustomRoute = clearGpsCustomRoute;
/**
 * Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
 * @param index
 */
function clearGpsDisabledZoneAtIndex(index) {
    return _in(0x2801d001, 0x2266df07, index);
}
exports.clearGpsDisabledZoneAtIndex = clearGpsDisabledZoneAtIndex;
/**
 * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
 *
 * Doesn't seem like the flags are actually read by the game at all.
 */
function clearGpsFlags() {
    return _in(0x21986729, 0xd6a3a830);
}
exports.clearGpsFlags = clearGpsFlags;
/**
 * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
 */
function clearGpsMultiRoute() {
    return _in(0x67eedea1, 0xb9bafd94);
}
exports.clearGpsMultiRoute = clearGpsMultiRoute;
function clearGpsPlayerWaypoint() {
    return _in(0xff4fb7c8, 0xcdfa3da7);
}
exports.clearGpsPlayerWaypoint = clearGpsPlayerWaypoint;
/**
 * Does the same as SET_RACE_TRACK_RENDER(false);
 */
function clearGpsRaceTrack() {
    return _in(0x7aa5b4ce, 0x533c858b);
}
exports.clearGpsRaceTrack = clearGpsRaceTrack;
function clearHdArea() {
    return _in(0xce58b1cf, 0xb9290813);
}
exports.clearHdArea = clearHdArea;
function clearHelp(toggle) {
    return _in(0x8dfced7a, 0x656f8802, toggle);
}
exports.clearHelp = clearHelp;
/**
 * Immediately removes entity from an interior. Like sets entity to `limbo` room.
 * @param entity
 */
function clearInteriorStateOfEntity(entity) {
    return _in(0x85d5422b, 0x2039a70d, entity);
}
exports.clearInteriorStateOfEntity = clearInteriorStateOfEntity;
function clearLastDrivenVehicle() {
    return _in(0xe01903c4, 0x7c7ac89e);
}
exports.clearLastDrivenVehicle = clearLastDrivenVehicle;
function clearObjectsInsideGarage(garageHash, vehicles, peds, objects, isNetwork) {
    return _in(0x19042851, 0x2b240692, _ch(garageHash), vehicles, peds, objects, isNetwork);
}
exports.clearObjectsInsideGarage = clearObjectsInsideGarage;
function clearOverrideWeather() {
    return _in(0x338d2e34, 0x77711050);
}
exports.clearOverrideWeather = clearOverrideWeather;
function clearParticleFxShootoutBoat() {
    return _in(0x2a251aa4, 0x8b2b46db);
}
exports.clearParticleFxShootoutBoat = clearParticleFxShootoutBoat;
function clearPedAlternateMovementAnim(ped, stance, p2) {
    return _in(0xd8d19675, 0xed5fbdce, ped, stance, _fv(p2));
}
exports.clearPedAlternateMovementAnim = clearPedAlternateMovementAnim;
function clearPedAlternateWalkAnim(ped, p1) {
    return _in(0x8844bbfc, 0xe30aa9e9, ped, _fv(p1));
}
exports.clearPedAlternateWalkAnim = clearPedAlternateWalkAnim;
function clearPedBloodDamage(ped) {
    return _in(0x8fe22675, 0xa5a45817, ped);
}
exports.clearPedBloodDamage = clearPedBloodDamage;
/**
 * Somehow related to changing ped's clothes.
 * @param ped
 * @param p1
 */
function clearPedBloodDamageByZone(ped, p1) {
    return _in(0x56e3b78c, 0x5408d9f4, ped, p1);
}
exports.clearPedBloodDamageByZone = clearPedBloodDamageByZone;
/**
 * p1: from 0 to 5 in the b617d scripts.
 * p2: "blushing" and "ALL" found in the b617d scripts.
 * @param ped
 * @param p1
 * @param p2
 */
function clearPedDamageDecalByZone(ped, p1, p2) {
    return _in(0x523c79ae, 0xefcc4a2a, ped, p1, _ts(p2));
}
exports.clearPedDamageDecalByZone = clearPedDamageDecalByZone;
function clearPedDecorations(ped) {
    return _in(0x0e5173c1, 0x63976e38, ped);
}
exports.clearPedDecorations = clearPedDecorations;
function clearPedDecorationsLeaveScars(ped) {
    return _in(0xe3b27e70, 0xceab9f0c, ped);
}
exports.clearPedDecorationsLeaveScars = clearPedDecorationsLeaveScars;
function clearPedDriveByClipsetOverride(ped) {
    return _in(0x4afe3690, 0xd7e0b5ac, ped);
}
exports.clearPedDriveByClipsetOverride = clearPedDriveByClipsetOverride;
function clearPedEnvDirt(ped) {
    return _in(0x6585d955, 0xa68452a5, ped);
}
exports.clearPedEnvDirt = clearPedEnvDirt;
function clearPedFallUpperBodyClipsetOverride(ped) {
    return _in(0x80054d7f, 0xcc70eec6, ped);
}
exports.clearPedFallUpperBodyClipsetOverride = clearPedFallUpperBodyClipsetOverride;
function clearPedInPauseMenu() {
    return _in(0x5e62be5d, 0xc58e9e06);
}
exports.clearPedInPauseMenu = clearPedInPauseMenu;
function clearPedLastDamageBone(ped) {
    return _in(0x8ef6b7ac, 0x68e2f01b, ped);
}
exports.clearPedLastDamageBone = clearPedLastDamageBone;
/**
 * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
 * @param ped
 */
function clearPedLastWeaponDamage(ped) {
    return _in(0x0e98f88a, 0x24c5f4b8, ped);
}
exports.clearPedLastWeaponDamage = clearPedLastWeaponDamage;
function clearPedMotionInCoverClipsetOverride(ped) {
    return _in(0xc79196dc, 0xb36f6121, ped);
}
exports.clearPedMotionInCoverClipsetOverride = clearPedMotionInCoverClipsetOverride;
function clearPedNonCreationArea() {
    return _in(0x2e052080, 0x86ba0651);
}
exports.clearPedNonCreationArea = clearPedNonCreationArea;
function clearPedParachutePackVariation(ped) {
    return _in(0x1280804f, 0x7cfd2d6c, ped);
}
exports.clearPedParachutePackVariation = clearPedParachutePackVariation;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 * @param p2
 */
function clearPedProp(ped, propId, p2) {
    return _in(0x0943e5b8, 0xe078e76e, ped, propId, p2);
}
exports.clearPedProp = clearPedProp;
/**
 * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
 * @param ped
 */
function clearPedScubaGearVariation(ped) {
    return _in(0xb50eb4cc, 0xb29704ac, ped);
}
exports.clearPedScubaGearVariation = clearPedScubaGearVariation;
function clearPedSecondaryTask(ped) {
    return _in(0x176cecf6, 0xf920d707, ped);
}
exports.clearPedSecondaryTask = clearPedSecondaryTask;
function clearPedStoredHatProp(ped) {
    return _in(0x687c0b59, 0x4907d2e8, ped);
}
exports.clearPedStoredHatProp = clearPedStoredHatProp;
function clearPedTasks(ped) {
    return _in(0xe1ef3c12, 0x16aff2cd, ped);
}
exports.clearPedTasks = clearPedTasks;
/**
 * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
 * @param ped
 */
function clearPedTasksImmediately(ped) {
    return _in(0xaaa34f8a, 0x7cb32098, ped);
}
exports.clearPedTasksImmediately = clearPedTasksImmediately;
/**
 * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
 * @param ped
 */
function clearPedWetness(ped) {
    return _in(0x9c720776, 0xdaa43e7e, ped);
}
exports.clearPedWetness = clearPedWetness;
function clearPickupRewardTypeSuppression(rewardType) {
    return _in(0x762db2d3, 0x80b48d04, rewardType);
}
exports.clearPickupRewardTypeSuppression = clearPickupRewardTypeSuppression;
function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player) {
    return _in(0x4aacb962, 0x03d11a31, player);
}
exports.clearPlayerHasDamagedAtLeastOneNonAnimalPed = clearPlayerHasDamagedAtLeastOneNonAnimalPed;
function clearPlayerHasDamagedAtLeastOnePed(player) {
    return _in(0xf0b67a4d, 0xe6ab5f98, player);
}
exports.clearPlayerHasDamagedAtLeastOnePed = clearPlayerHasDamagedAtLeastOnePed;
function clearPlayerParachuteModelOverride(player) {
    return _in(0x8753997e, 0xb5f6ee3f, player);
}
exports.clearPlayerParachuteModelOverride = clearPlayerParachuteModelOverride;
function clearPlayerParachutePackModelOverride(player) {
    return _in(0x10c54e43, 0x89c12b42, player);
}
exports.clearPlayerParachutePackModelOverride = clearPlayerParachutePackModelOverride;
function clearPlayerParachuteVariationOverride(player) {
    return _in(0x0f4cc924, 0xcf8c7b21, player);
}
exports.clearPlayerParachuteVariationOverride = clearPlayerParachuteVariationOverride;
function clearPlayerReserveParachuteModelOverride(player) {
    return _in(0x290d248e, 0x25815ae8, player);
}
exports.clearPlayerReserveParachuteModelOverride = clearPlayerReserveParachuteModelOverride;
/**
 * This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
 *
 * PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
 * @param player
 */
function clearPlayerWantedLevel(player) {
    return _in(0xb3025405, 0x97885499, player);
}
exports.clearPlayerWantedLevel = clearPlayerWantedLevel;
/**
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 *
 * Modified example from "am_imp_exp.c4", line 6418:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]]
 * STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
 * ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
 * @param scheduleId
 */
function clearPopscheduleOverrideVehicleModel(scheduleId) {
    return _in(0x5c0de367, 0xaa0d911c, scheduleId);
}
exports.clearPopscheduleOverrideVehicleModel = clearPopscheduleOverrideVehicleModel;
/**
 * This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
 * It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
 * @param vehicle
 */
function clearPrimaryVehicleTask(vehicle) {
    return _in(0xdbbc7a24, 0x32524127, vehicle);
}
exports.clearPrimaryVehicleTask = clearPrimaryVehicleTask;
function clearPrints() {
    return _in(0xcc33fa79, 0x1322b9d9);
}
exports.clearPrints = clearPrints;
/**
 * See SET_RAGDOLL_BLOCKING_FLAGS for flags
 * @param ped
 * @param blockingFlag
 */
function clearRagdollBlockingFlags(ped, blockingFlag) {
    return _in(0xd86d101f, 0xcfd00a4b, ped, blockingFlag);
}
exports.clearRagdollBlockingFlags = clearRagdollBlockingFlags;
/**
 * Clears the relationship between two groups. This should be called twice (once for each group).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 *
 * Example:
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * @param relationship
 * @param group1
 * @param group2
 */
function clearRelationshipBetweenGroups(relationship, group1, group2) {
    return _in(0x5e29243f, 0xb56fc6d4, relationship, _ch(group1), _ch(group2));
}
exports.clearRelationshipBetweenGroups = clearRelationshipBetweenGroups;
/**
 * This native does absolutely nothing, just a nullsub
 */
function clearReminderMessage() {
    return _in(0xb57d8dd6, 0x45cfa2cf);
}
exports.clearReminderMessage = clearReminderMessage;
function clearReplayStats() {
    return _in(0x1b1ab132, 0xa16fda55);
}
exports.clearReplayStats = clearReplayStats;
function clearRestartCoordOverride() {
    return _in(0xa2716d40, 0x842eaf79);
}
exports.clearRestartCoordOverride = clearRestartCoordOverride;
function clearRoomForEntity(entity) {
    return _in(0xb365fc0c, 0x4e27ffa7, entity);
}
exports.clearRoomForEntity = clearRoomForEntity;
function clearRoomForGameViewport() {
    return _in(0x23b59d89, 0x12f94246);
}
exports.clearRoomForGameViewport = clearRoomForGameViewport;
/**
 * Possibly used to clear scenario points.
 */
function clearScenarioSpawnHistory() {
    return _in(0x7ec6f9a4, 0x78a6a512);
}
exports.clearScenarioSpawnHistory = clearScenarioSpawnHistory;
function clearSequenceTask(taskSequenceId) {
    return _in(0x3841422e, 0x9c488d8c, _ii(taskSequenceId));
}
exports.clearSequenceTask = clearSequenceTask;
/**
 * This native does absolutely nothing, just a nullsub
 */
function clearServiceEventArguments() {
    return _in(0x966dd84f, 0xb6a46017);
}
exports.clearServiceEventArguments = clearServiceEventArguments;
function clearSmallPrints() {
    return _in(0x2cea2839, 0x313c09ac);
}
exports.clearSmallPrints = clearSmallPrints;
function clearStatusOfSortedListOperation() {
    return _in(0x4af92acd, 0x3141d96c);
}
exports.clearStatusOfSortedListOperation = clearStatusOfSortedListOperation;
function clearTacticalNavMeshPoints() {
    return _in(0xb3cd58cc, 0xa6cda852);
}
exports.clearTacticalNavMeshPoints = clearTacticalNavMeshPoints;
/**
 * p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
 * @param p0
 */
function clearThisPrint(p0) {
    return _in(0xcf708001, 0xe1e536dd, _ts(p0));
}
exports.clearThisPrint = clearThisPrint;
function clearTimecycleModifier() {
    return _in(0x0f07e774, 0x5a236711);
}
exports.clearTimecycleModifier = clearTimecycleModifier;
function clearTvChannelPlaylist(tvChannel) {
    return _in(0xbeb3d46b, 0xb7f043c0, tvChannel);
}
exports.clearTvChannelPlaylist = clearTvChannelPlaylist;
function clearValidVehicleHitHashes() {
    return _in(0xeb81a3da, 0xdd503187);
}
exports.clearValidVehicleHitHashes = clearValidVehicleHitHashes;
function clearVehicleCrashTask(vehicle) {
    return _in(0x53ddc75b, 0xc3ac0a90, vehicle);
}
exports.clearVehicleCrashTask = clearVehicleCrashTask;
function clearVehicleCustomPrimaryColour(vehicle) {
    return _in(0x55e1d275, 0x8f34e437, vehicle);
}
exports.clearVehicleCustomPrimaryColour = clearVehicleCustomPrimaryColour;
function clearVehicleCustomSecondaryColour(vehicle) {
    return _in(0x5ffbdeec, 0x3e8e2009, vehicle);
}
exports.clearVehicleCustomSecondaryColour = clearVehicleCustomSecondaryColour;
function clearVehicleGeneratorAreaOfInterest() {
    return _in(0x0a436b86, 0x43716d14);
}
exports.clearVehicleGeneratorAreaOfInterest = clearVehicleGeneratorAreaOfInterest;
function clearVehiclePetroltankFireCulprit(vehicle) {
    return _in(0x4419966c, 0x9936071a, vehicle);
}
exports.clearVehiclePetroltankFireCulprit = clearVehiclePetroltankFireCulprit;
function clearVehiclePhoneExplosiveDevice() {
    return _in(0xaa3f739a, 0xbddcf21f);
}
exports.clearVehiclePhoneExplosiveDevice = clearVehiclePhoneExplosiveDevice;
function clearVehicleRouteHistory(vehicle) {
    return _in(0x6d6af961, 0xb72728ae, vehicle);
}
exports.clearVehicleRouteHistory = clearVehicleRouteHistory;
function clearWeatherTypeNowPersistNetwork(milliseconds) {
    return _in(0x0cf97f49, 0x7fe7d048, milliseconds);
}
exports.clearWeatherTypeNowPersistNetwork = clearWeatherTypeNowPersistNetwork;
function clearWeatherTypePersist() {
    return _in(0xccc39339, 0xbef76cf5);
}
exports.clearWeatherTypePersist = clearWeatherTypePersist;
function clonePed(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
    return _in(0xef29a163, 0x37facadb, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, _r, _ri);
}
exports.clonePed = clonePed;
function clonePedAlt(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4) {
    return _in(0x668fd40b, 0xcba5de48, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4, _r, _ri);
}
exports.clonePedAlt = clonePedAlt;
/**
 * Copies ped's components and props to targetPed.
 * @param ped
 * @param targetPed
 */
function clonePedToTarget(ped, targetPed) {
    return _in(0xe952d643, 0x1689ad9a, ped, targetPed);
}
exports.clonePedToTarget = clonePedToTarget;
function clonePedToTargetAlt(ped, targetPed, p2) {
    return _in(0x148b08c2, 0xd2acb884, ped, targetPed, p2);
}
exports.clonePedToTargetAlt = clonePedToTargetAlt;
/**
 * Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
 * Related to its "Pre-networked state"?
 */
function closeAllBarriersForRace() {
    return _in(0x701fda1e, 0x82076ba4);
}
exports.closeAllBarriersForRace = closeAllBarriersForRace;
function closeBombBayDoors(vehicle) {
    return _in(0x35560417, 0x42a0dc74, vehicle);
}
exports.closeBombBayDoors = closeBombBayDoors;
function closeMpTextChat() {
    return _in(0x1ac8f4ad, 0x40e22127);
}
exports.closeMpTextChat = closeMpTextChat;
function closePatrolRoute() {
    return _in(0xb043eca8, 0x01b8cbc1);
}
exports.closePatrolRoute = closePatrolRoute;
function closeSafehouseGarages() {
    return _in(0x66a49d02, 0x1870fe88);
}
exports.closeSafehouseGarages = closeSafehouseGarages;
function closeSequenceTask(taskSequenceId) {
    return _in(0x39e72bc9, 0x9e6360cb, taskSequenceId);
}
exports.closeSequenceTask = closeSequenceTask;
function closeSocialClubMenu() {
    return _in(0xd2b32be3, 0xfc1626c6);
}
exports.closeSocialClubMenu = closeSocialClubMenu;
/**
 * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
 */
function cloudCheckAvailability() {
    return _in(0x4f18196c, 0x8d38768d);
}
exports.cloudCheckAvailability = cloudCheckAvailability;
function cloudDeleteMemberFile(p0) {
    return _in(0xc64ded7e, 0xf0d2fe37, _ts(p0), _r, _ri);
}
exports.cloudDeleteMemberFile = cloudDeleteMemberFile;
function cloudDidRequestSucceed(requestId) {
    return _in(0x3a3d5568, 0xaf297cd5, requestId, _r);
}
exports.cloudDidRequestSucceed = cloudDidRequestSucceed;
function cloudGetAvailabilityCheckResult() {
    return _in(0x0b0cc107, 0x20653f3b, _r);
}
exports.cloudGetAvailabilityCheckResult = cloudGetAvailabilityCheckResult;
function cloudHasRequestCompleted(requestId) {
    return _in(0x4c61b399, 0x30d045da, requestId, _r);
}
exports.cloudHasRequestCompleted = cloudHasRequestCompleted;
function cloudIsCheckingAvailability() {
    return _in(0xc7abac5d, 0xe675ee3b, _r);
}
exports.cloudIsCheckingAvailability = cloudIsCheckingAvailability;
function codeWantsScriptToTakeControl() {
    return _in(0x66e7cb63, 0xc97b7d20, _r);
}
exports.codeWantsScriptToTakeControl = codeWantsScriptToTakeControl;
function commitToLoadingscreenSelction() {
    return _in(0xb1577667, 0xc3708f9b);
}
exports.commitToLoadingscreenSelction = commitToLoadingscreenSelction;
/**
 * Compares two strings up to a specified number of characters.
 *
 * Parameters:
 * str1 - String to be compared.
 * str2 - String to be compared.
 * matchCase - Comparison will be case-sensitive.
 * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
 *
 * Returns:
 * A value indicating the relationship between the strings:
 * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
 * 0 - The contents of both strings are equal.
 * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
 *
 * Examples:
 * MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
 * MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
 * MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
 * MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
 * MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
 *
 * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
 * MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
 * MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
 * @param str1
 * @param str2
 * @param matchCase
 * @param maxLength
 */
function compareStrings(str1, str2, matchCase, maxLength) {
    return _in(0x1e34710e, 0xcd4ab0eb, _ts(str1), _ts(str2), matchCase, maxLength, _r, _ri);
}
exports.compareStrings = compareStrings;
/**
 * Works for vehicles with a retractable landing gear
 *
 * Landing gear states:
 *
 * 0: Deployed
 * 1: Closing
 * 2: Opening
 * 3: Retracted
 * @param vehicle
 * @param state
 */
function controlLandingGear(vehicle, state) {
    return _in(0xcfc8be9a, 0x5e1fe575, vehicle, state);
}
exports.controlLandingGear = controlLandingGear;
/**
 * Forces the ped to use the mounted weapon.
 * Returns false if task is not possible.
 * @param ped
 */
function controlMountedWeapon(ped) {
    return _in(0xdcfe4206, 0x8fe0135a, ped, _r);
}
exports.controlMountedWeapon = controlMountedWeapon;
/**
 * returns pickup hash.
 *
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
function convertOldPickupTypeToNew(pickupHash) {
    return _in(0x5eaad83f, 0x8cfb4575, _ch(pickupHash), _r, _ri);
}
exports.convertOldPickupTypeToNew = convertOldPickupTypeToNew;
/**
 * Takes the specified time and writes it to the structure specified in the second argument.
 *
 * struct date_time
 * {
 * int year;
 * int PADDING1;
 * int month;
 * int PADDING2;
 * int day;
 * int PADDING3;
 * int hour;
 * int PADDING4;
 * int minute;
 * int PADDING5;
 * int second;
 * int PADDING6;
 * };
 * @param posixTime
 * @param timeStructure
 */
function convertPosixTime(posixTime, timeStructure) {
    return _in(0xac97af97, 0xfa68e5d5, posixTime, _ii(timeStructure));
}
exports.convertPosixTime = convertPosixTime;
function copyScriptStruct(size) {
    const [dst_out, src_out] = _in(0x213aeb2b, 0x90cba7ac, _i, _i, size);
    return [dst_out, src_out];
}
exports.copyScriptStruct = copyScriptStruct;
/**
 * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
 * @param sourceVehicle
 * @param targetVehicle
 */
function copyVehicleDamages(sourceVehicle, targetVehicle) {
    return _in(0xe44a9823, 0x68a4af23, sourceVehicle, targetVehicle);
}
exports.copyVehicleDamages = copyVehicleDamages;
function cos(value) {
    return _in(0xd0ffb162, 0xf40a139c, _fv(value), _r, _rf);
}
exports.cos = cos;
function countPedsInCombatWithTarget(ped) {
    return _in(0x5407b728, 0x8d0478b7, ped, _r, _ri);
}
exports.countPedsInCombatWithTarget = countPedsInCombatWithTarget;
function countPedsInCombatWithTargetWithinRadius(ped, x, y, z, radius) {
    return _in(0x336b3d20, 0x0ab007cb, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri);
}
exports.countPedsInCombatWithTargetWithinRadius = countPedsInCombatWithTargetWithinRadius;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param radius
 * @param weaponHash
 */
function createAirDefenceAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, radius, weaponHash) {
    return _in(0x9da58cdb, 0xf6bdbc08, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(radius), _ch(weaponHash), _r, _ri);
}
exports.createAirDefenceAngledArea = createAirDefenceAngledArea;
/**
 * Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param weaponHash
 */
function createAirDefenceSphere(x, y, z, radius, p4, p5, p6, weaponHash) {
    return _in(0x91ef3458, 0x4710be99, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p4), _fv(p5), _fv(p6), _ch(weaponHash), _r, _ri);
}
exports.createAirDefenceSphere = createAirDefenceSphere;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param flags
 * @param value
 * @param modelHash
 * @param p7
 * @param p8
 */
function createAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8) {
    return _in(0x673966a0, 0xc0fd7171, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), flags, value, _ch(modelHash), p7, p8, _r, _ri);
}
exports.createAmbientPickup = createAmbientPickup;
/**
 * "DEFAULT_SCRIPTED_CAMERA"
 * "DEFAULT_ANIMATED_CAMERA"
 * "DEFAULT_SPLINE_CAMERA"
 * "DEFAULT_SCRIPTED_FLY_CAMERA"
 * "TIMED_SPLINE_CAMERA"
 * @param camName
 * @param p1
 */
function createCam(camName, p1) {
    return _in(0xc3981dce, 0x61d9e13f, _ts(camName), p1, _r, _ri);
}
exports.createCam = createCam;
/**
 * camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
 * ------------
 * Camera names found in the b617d scripts:
 * "DEFAULT_ANIMATED_CAMERA"
 * "DEFAULT_SCRIPTED_CAMERA"
 * "DEFAULT_SCRIPTED_FLY_CAMERA"
 * "DEFAULT_SPLINE_CAMERA"
 * ------------
 * Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
 * @param camName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param p8
 * @param p9
 */
function createCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
    return _in(0xb5119480, 0x0b257161, _ts(camName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), p8, p9, _r, _ri);
}
exports.createCamWithParams = createCamWithParams;
function createCamera(camHash, p1) {
    return _in(0x5e3cf89c, 0x6bcca67d, _ch(camHash), p1, _r, _ri);
}
exports.createCamera = createCamera;
/**
 * p9 uses 2 by default
 * @param camHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param p8
 * @param p9
 */
function createCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
    return _in(0x6abfa3e1, 0x6460f22d, _ch(camHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), p8, p9, _r, _ri);
}
exports.createCameraWithParams = createCameraWithParams;
/**
 * Creates a checkpoint. Returns the handle of the checkpoint.
 *
 * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
 *
 * Parameters:
 * * type - The type of checkpoint to create. See below for a list of checkpoint types.
 * * pos1 - The position of the checkpoint.
 * * pos2 - The position of the next checkpoint to point to.
 * * radius - The radius of the checkpoint.
 * * color - The color of the checkpoint.
 * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
 *
 * Checkpoint types:
 * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
 * 39----------?
 * 40----------Ring: just a ring
 * 41----------?
 * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
 * 45-47-------Cylinder no arrow or number
 *
 * If using type 42-44, reserved sets number / number and shape to display
 *
 * 0-99------------Just numbers (0-99)
 * 100-109-----------------Arrow (0-9)
 * 110-119------------Two arrows (0-9)
 * 120-129----------Three arrows (0-9)
 * 130-139----------------Circle (0-9)
 * 140-149------------CycleArrow (0-9)
 * 150-159----------------Circle (0-9)
 * 160-169----Circle  w/ pointer (0-9)
 * 170-179-------Perforated ring (0-9)
 * 180-189----------------Sphere (0-9)
 * @param type
 * @param posX1
 * @param posY1
 * @param posZ1
 * @param posX2
 * @param posY2
 * @param posZ2
 * @param diameter
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param reserved
 */
function createCheckpoint(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved) {
    return _in(0x0134f083, 0x5ab6bfcb, type, _fv(posX1), _fv(posY1), _fv(posZ1), _fv(posX2), _fv(posY2), _fv(posZ2), _fv(diameter), red, green, blue, alpha, reserved, _r, _ri);
}
exports.createCheckpoint = createCheckpoint;
/**
 * hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
 * @param p0
 * @param time
 * @param p2
 * @param entity
 */
function createCinematicShot(p0, time, p2, entity) {
    return _in(0x741b0129, 0xd4560f31, _ch(p0), time, p2, entity);
}
exports.createCinematicShot = createCinematicShot;
/**
 * clanFlag: takes a number 0-5
 * @param ped
 * @param username
 * @param pointedClanTag
 * @param isRockstarClan
 * @param clanTag
 * @param clanFlag
 */
function createFakeMpGamerTag(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
    return _in(0xbfefe332, 0x1a3f5015, ped, _ts(username), pointedClanTag, isRockstarClan, _ts(clanTag), clanFlag, _r, _ri);
}
exports.createFakeMpGamerTag = createFakeMpGamerTag;
function createForcedObject(x, y, z, p3, modelHash, p5) {
    return _in(0x150e808b, 0x375a385a, _fv(x), _fv(y), _fv(z), p3, _ch(modelHash), p5);
}
exports.createForcedObject = createForcedObject;
/**
 * Creates a new ped group.
 * Groups can contain up to 8 peds.
 *
 * The parameter is unused.
 *
 * Returns a handle to the created group, or 0 if a group couldn't be created.
 * @param unused
 */
function createGroup(unused) {
    return _in(0x90370ebe, 0x0fee1a3d, unused, _r, _ri);
}
exports.createGroup = createGroup;
/**
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 *
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 *
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * @param dispatchService
 * @param x
 * @param y
 * @param z
 * @param numUnits
 * @param radius
 * @param outIncidentID
 * @param p7
 * @param p8
 */
function createIncident(dispatchService, x, y, z, numUnits, radius, p7, p8) {
    const [retval, outIncidentID_out] = _in(0x3f892caf, 0x67444ae7, dispatchService, _fv(x), _fv(y), _fv(z), numUnits, _fv(radius), _i, p7, p8, _r);
    return [retval, outIncidentID_out];
}
exports.createIncident = createIncident;
/**
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 *
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 *
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * @param dispatchService
 * @param ped
 * @param numUnits
 * @param radius
 * @param outIncidentID
 * @param p5
 * @param p6
 */
function createIncidentWithEntity(dispatchService, ped, numUnits, radius, p5, p6) {
    const [retval, outIncidentID_out] = _in(0x05983472, 0xf0494e60, dispatchService, ped, numUnits, _fv(radius), _i, p5, p6, _r);
    return [retval, outIncidentID_out];
}
exports.createIncidentWithEntity = createIncidentWithEntity;
function createItemset(p0) {
    return _in(0x35ad299f, 0x50d91b24, p0, _r, _ri);
}
exports.createItemset = createItemset;
/**
 * Train models HAVE TO be loaded (requested) before you use this.
 * For variation 15 - request:
 *
 * freight
 * freightcar
 * freightgrain
 * freightcont1
 * freightcont2
 * freighttrailer
 *
 *
 * @param variation
 * @param x
 * @param y
 * @param z
 * @param direction
 * @param p5
 * @param p6
 */
function createMissionTrain(variation, x, y, z, direction, p5, p6) {
    return _in(0x63c6cca8, 0xe68ae8c8, variation, _fv(x), _fv(y), _fv(z), direction, p5, p6, _r, _ri);
}
exports.createMissionTrain = createMissionTrain;
/**
 * Creates a mobile phone of the specified type.
 *
 * Possible phone types:
 *
 * 0 - Default phone / Michael's phone
 * 1 - Trevor's phone
 * 2 - Franklin's phone
 * 3 - Unused police phone
 * 4 - Prologue phone
 *
 * Higher values may crash your game.
 * @param phoneType
 */
function createMobilePhone(phoneType) {
    return _in(0xa4e8e696, 0xc532fbc7, phoneType);
}
exports.createMobilePhone = createMobilePhone;
/**
 * p5 = sets as true in scripts
 * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
 *
 * Network players do not see changes done with this.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
function createModelHide(x, y, z, radius, modelHash, p5) {
    return _in(0x8a97bca3, 0x0a0ce478, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5);
}
exports.createModelHide = createModelHide;
function createModelHideExcludingScriptObjects(x, y, z, radius, modelHash, p5) {
    return _in(0x3a52ae58, 0x8830bf7f, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5);
}
exports.createModelHideExcludingScriptObjects = createModelHideExcludingScriptObjects;
/**
 * Only works with objects!
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param originalModel
 * @param newModel
 * @param p6
 */
function createModelSwap(x, y, z, radius, originalModel, newModel, p6) {
    return _in(0x92c47782, 0xfda8b2a3, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6);
}
exports.createModelSwap = createModelSwap;
/**
 * Spawns one or more money pickups.
 *
 * x: The X-component of the world position to spawn the money pickups at.
 * y: The Y-component of the world position to spawn the money pickups at.
 * z: The Z-component of the world position to spawn the money pickups at.
 * value: The combined value of the pickups (in dollars).
 * amount: The number of pickups to spawn.
 * model: The model to use, or 0 for default money model.
 *
 * Example:
 * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
 *
 * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
 *
 * ==============================================
 *
 * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
 * @param x
 * @param y
 * @param z
 * @param value
 * @param amount
 * @param model
 */
function createMoneyPickups(x, y, z, value, amount, model) {
    return _in(0x0589b5e7, 0x91ce9b2b, _fv(x), _fv(y), _fv(z), value, amount, _ch(model));
}
exports.createMoneyPickups = createMoneyPickups;
/**
 * clanFlag: takes a number 0-5
 * @param player
 * @param username
 * @param pointedClanTag
 * @param isRockstarClan
 * @param clanTag
 * @param clanFlag
 * @param r
 * @param g
 * @param b
 */
function createMpGamerTagWithCrewColor(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b) {
    return _in(0x6dd05e9d, 0x83efa4c9, player, _ts(username), pointedClanTag, isRockstarClan, _ts(clanTag), clanFlag, r, g, b);
}
exports.createMpGamerTagWithCrewColor = createMpGamerTagWithCrewColor;
function createNewScriptedConversation() {
    return _in(0xd2c91a0b, 0x572aae56);
}
exports.createNewScriptedConversation = createNewScriptedConversation;
/**
 * Creates a new NaturalMotion message.
 *
 * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
 * messageId: The ID of the NaturalMotion message.
 *
 * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
 * @param startImmediately
 * @param messageId
 */
function createNmMessage(startImmediately, messageId) {
    return _in(0x418ef2a1, 0xbce56685, startImmediately, messageId);
}
exports.createNmMessage = createNmMessage;
function createNonNetworkedAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8) {
    return _in(0x9c937642, 0x23e29c50, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), flags, value, _ch(modelHash), p7, p8, _r, _ri);
}
exports.createNonNetworkedAmbientPickup = createNonNetworkedAmbientPickup;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
function createNonNetworkedPortablePickup(pickupHash, x, y, z, placeOnGround, modelHash) {
    return _in(0x125494b9, 0x8a21aaf7, _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ri);
}
exports.createNonNetworkedPortablePickup = createNonNetworkedPortablePickup;
/**
 * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param bScriptHostObj
 * @param dynamic
 */
function createObject(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic) {
    return _in(0x509d5878, 0xeb39e842, _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, bScriptHostObj, dynamic, _r, _ri);
}
exports.createObject = createObject;
/**
 * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param bScriptHostObj
 * @param dynamic
 */
function createObjectNoOffset(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic) {
    return _in(0x9a294b21, 0x38abb884, _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, bScriptHostObj, dynamic, _r, _ri);
}
exports.createObjectNoOffset = createObjectNoOffset;
function createParachuteBagObject(ped, p1, p2) {
    return _in(0x8c4f3bf2, 0x3b6237db, ped, p1, p2, _r, _ri);
}
exports.createParachuteBagObject = createParachuteBagObject;
function createPatrolRoute() {
    return _in(0xaf8a443c, 0xcc8018dc);
}
exports.createPatrolRoute = createPatrolRoute;
/**
 * https://alloc8or.re/gta5/doc/enums/ePedType.txt
 *
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param pedType
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostPed
 */
function createPed(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed) {
    return _in(0xd49f9b09, 0x55c367de, pedType, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostPed, _r, _ri);
}
exports.createPed = createPed;
/**
 * pedType: see CREATE_PED
 *
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param vehicle
 * @param pedType
 * @param modelHash
 * @param seat
 * @param isNetwork
 * @param bScriptHostPed
 */
function createPedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) {
    return _in(0x7dd95987, 0x4c1fd534, vehicle, pedType, _ch(modelHash), seat, isNetwork, bScriptHostPed, _r, _ri);
}
exports.createPedInsideVehicle = createPedInsideVehicle;
/**
 * Drops the Hook/Magnet on a cargobob
 *
 * state
 * enum eCargobobHook
 * {
 * CARGOBOB_HOOK = 0,
 * CARGOBOB_MAGNET = 1,
 * };
 * @param cargobob
 * @param state
 */
function createPickUpRopeForCargobob(cargobob, state) {
    return _in(0x7beb0c7a, 0x235f6f3b, cargobob, state);
}
exports.createPickUpRopeForCargobob = createPickUpRopeForCargobob;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param value
 * @param p6
 * @param modelHash
 */
function createPickup(pickupHash, posX, posY, posZ, p4, value, p6, modelHash) {
    return _in(0xfba08c50, 0x3dd5fa58, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), p4, value, p6, _ch(modelHash), _r, _ri);
}
exports.createPickup = createPickup;
/**
 * flags:
 * 8 (1 << 3): place on ground
 * 512 (1 << 9): spin around
 *
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param flag
 * @param amount
 * @param p9
 * @param p10
 * @param modelHash
 */
function createPickupRotate(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash) {
    return _in(0x89180472, 0x7e0a98b7, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), flag, amount, p9, p10, _ch(modelHash), _r, _ri);
}
exports.createPickupRotate = createPickupRotate;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
function createPortablePickup(pickupHash, x, y, z, placeOnGround, modelHash) {
    return _in(0x2eaf1fdb, 0x2fb55698, _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ri);
}
exports.createPortablePickup = createPortablePickup;
/**
 * vb.net
 * Dim ped_handle As Integer
 * With Game.Player.Character
 * Dim pos As Vector3 = .Position + .ForwardVector * 3
 * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
 * End With
 *
 * Creates a Ped at the specified location, returns the Ped Handle.
 * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
 * @param posX
 * @param posY
 * @param posZ
 */
function createRandomPed(posX, posY, posZ) {
    return _in(0xb4ac7d0c, 0xf06bfe8f, _fv(posX), _fv(posY), _fv(posZ), _r, _ri);
}
exports.createRandomPed = createRandomPed;
function createRandomPedAsDriver(vehicle, returnHandle) {
    return _in(0x9b62392b, 0x474f44a0, vehicle, returnHandle, _r, _ri);
}
exports.createRandomPedAsDriver = createRandomPedAsDriver;
/**
 * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
 *
 * Parameters:
 * x/y/z - Generator position
 * heading - Generator heading
 * p4 - Unknown (always 5.0)
 * p5 - Unknown (always 3.0)
 * modelHash - Vehicle model hash
 * p7/8/9/10 - Unknown (always -1)
 * p11 - Unknown (usually TRUE, only one instance of FALSE)
 * p12/13 - Unknown (always FALSE)
 * p14 - Unknown (usally FALSE, only two instances of TRUE)
 * p15 - Unknown (always TRUE)
 * p16 - Unknown (always -1)
 *
 * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p4
 * @param p5
 * @param modelHash
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 * @param p14
 * @param p15
 * @param p16
 */
function createScriptVehicleGenerator(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    return _in(0x9def8831, 0x14668116, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(p4), _fv(p5), _ch(modelHash), p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, _r, _ri);
}
exports.createScriptVehicleGenerator = createScriptVehicleGenerator;
/**
 * p6 always 2 (but it doesnt seem to matter...)
 *
 * roll and pitch 0
 * yaw to Ped.rotation
 * @param x
 * @param y
 * @param z
 * @param roll
 * @param pitch
 * @param yaw
 * @param p6
 */
function createSynchronizedScene(x, y, z, roll, pitch, yaw, p6) {
    return _in(0x8c18e0f9, 0x080add73, _fv(x), _fv(y), _fv(z), _fv(roll), _fv(pitch), _fv(yaw), p6, _r, _ri);
}
exports.createSynchronizedScene = createSynchronizedScene;
function createSynchronizedSceneAtMapObject(x, y, z, radius, object) {
    return _in(0x62ec273d, 0x00187dca, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(object), _r, _ri);
}
exports.createSynchronizedSceneAtMapObject = createSynchronizedSceneAtMapObject;
/**
 * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
 */
function createTrackedPoint() {
    return _in(0xe2c9439e, 0xd45dea60, _r, _ri);
}
exports.createTrackedPoint = createTrackedPoint;
/**
 * p7 when set to true allows you to spawn vehicles under -100 z.
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostVeh
 * @param p7
 */
function createVehicle(modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7) {
    return _in(0xaf35d0d2, 0x583051b0, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostVeh, p7, _r, _ri);
}
exports.createVehicle = createVehicle;
/**
 * Now has 8 params.
 * @param weaponHash
 * @param ammoCount
 * @param x
 * @param y
 * @param z
 * @param showWorldModel
 * @param scale
 * @param p7
 * @param p8
 * @param p9
 */
function createWeaponObject(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9) {
    return _in(0x9541d3cf, 0x0d398f36, _ch(weaponHash), ammoCount, _fv(x), _fv(y), _fv(z), showWorldModel, _fv(scale), p7, p8, p9, _r, _ri);
}
exports.createWeaponObject = createWeaponObject;
function customMinimapClearBlips() {
    return _in(0x2708fc08, 0x3123f9ff);
}
exports.customMinimapClearBlips = customMinimapClearBlips;
/**
 * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
 * @param x
 * @param y
 * @param z
 */
function customMinimapCreateBlip(x, y, z) {
    return _in(0x551df996, 0x58db6ee8, _fv(x), _fv(y), _fv(z), _r, _ri);
}
exports.customMinimapCreateBlip = customMinimapCreateBlip;
/**
 * If toggle is true, the map is shown in full screen
 * If toggle is false, the map is shown in normal mode
 * @param toggle
 */
function customMinimapSetActive(toggle) {
    return _in(0x5354c5ba, 0x2ea868a4, toggle);
}
exports.customMinimapSetActive = customMinimapSetActive;
/**
 * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
 * @param spriteId
 */
function customMinimapSetBlipObject(spriteId) {
    return _in(0x1eae6dd1, 0x7b7a5efa, spriteId);
}
exports.customMinimapSetBlipObject = customMinimapSetBlipObject;
function damageObjectFragmentChild(p0, p1, p2) {
    return _in(0xe05f6aee, 0xfeb0bb02, p0, p1, p2);
}
exports.damageObjectFragmentChild = damageObjectFragmentChild;
function dataarrayAddBool(value) {
    return _in(0xf8b0f5a4, 0x3e928c76, _i, value);
}
exports.dataarrayAddBool = dataarrayAddBool;
function dataarrayAddDict(arrayData) {
    const [retval, arrayData_out] = _in(0x6889498b, 0x3e19c797, _ii(arrayData), _r, _ri);
    return [retval, arrayData_out];
}
exports.dataarrayAddDict = dataarrayAddDict;
function dataarrayAddFloat(value) {
    return _in(0x57a995fd, 0x75d37f56, _i, _fv(value));
}
exports.dataarrayAddFloat = dataarrayAddFloat;
function dataarrayAddInt(value) {
    return _in(0xcabdb751, 0xd86fe93b, _i, value);
}
exports.dataarrayAddInt = dataarrayAddInt;
function dataarrayAddString(value) {
    return _in(0x2f0661c1, 0x55aeeeaa, _i, _ts(value));
}
exports.dataarrayAddString = dataarrayAddString;
function dataarrayAddVector(valueX, valueY, valueZ) {
    return _in(0x407f8d03, 0x4f70f0c2, _i, _fv(valueX), _fv(valueY), _fv(valueZ));
}
exports.dataarrayAddVector = dataarrayAddVector;
function dataarrayGetBool(arrayIndex) {
    const [retval, arrayData_out] = _in(0x50c1b287, 0x4e50c114, _i, arrayIndex, _r);
    return [retval, arrayData_out];
}
exports.dataarrayGetBool = dataarrayGetBool;
function dataarrayGetCount(arrayData) {
    const [retval, arrayData_out] = _in(0x065db281, 0x590cea2d, _ii(arrayData), _r, _ri);
    return [retval, arrayData_out];
}
exports.dataarrayGetCount = dataarrayGetCount;
function dataarrayGetDict(arrayIndex) {
    const [retval, arrayData_out] = _in(0x8b5fadcc, 0x4e3a145f, _i, arrayIndex, _r, _ri);
    return [retval, arrayData_out];
}
exports.dataarrayGetDict = dataarrayGetDict;
function dataarrayGetFloat(arrayIndex) {
    const [retval, arrayData_out] = _in(0xc0c527b5, 0x25d7cfb5, _i, arrayIndex, _r, _rf);
    return [retval, arrayData_out];
}
exports.dataarrayGetFloat = dataarrayGetFloat;
function dataarrayGetInt(arrayIndex) {
    const [retval, arrayData_out] = _in(0x3e5ae194, 0x25cd74be, _i, arrayIndex, _r, _ri);
    return [retval, arrayData_out];
}
exports.dataarrayGetInt = dataarrayGetInt;
function dataarrayGetString(arrayIndex) {
    const [retval, arrayData_out] = _in(0xd3f2ffeb, 0x8d836f52, _i, arrayIndex, _r, _s);
    return [retval, arrayData_out];
}
exports.dataarrayGetString = dataarrayGetString;
/**
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * @param arrayData
 * @param arrayIndex
 */
function dataarrayGetType(arrayIndex) {
    const [retval, arrayData_out] = _in(0x3a0014ad, 0xb172a3c5, _i, arrayIndex, _r, _ri);
    return [retval, arrayData_out];
}
exports.dataarrayGetType = dataarrayGetType;
function dataarrayGetVector(arrayIndex) {
    const [retval, arrayData_out] = _in(0x8d2064e5, 0xb64a628a, _i, arrayIndex, _r, _rv);
    return [_mv(retval), arrayData_out];
}
exports.dataarrayGetVector = dataarrayGetVector;
function datadictCreateArray(key) {
    const [retval, objectData_out] = _in(0x5b117285, 0x27ca6e5f, _i, _ts(key), _r, _ri);
    return [retval, objectData_out];
}
exports.datadictCreateArray = datadictCreateArray;
function datadictCreateDict(key) {
    const [retval, objectData_out] = _in(0xa358f56f, 0x10732ee1, _i, _ts(key), _r, _ri);
    return [retval, objectData_out];
}
exports.datadictCreateDict = datadictCreateDict;
function datadictGetArray(key) {
    const [retval, objectData_out] = _in(0x7a983aa9, 0xda2659ed, _i, _ts(key), _r, _ri);
    return [retval, objectData_out];
}
exports.datadictGetArray = datadictGetArray;
function datadictGetBool(key) {
    const [retval, objectData_out] = _in(0x1186940e, 0xd72ffeec, _i, _ts(key), _r);
    return [retval, objectData_out];
}
exports.datadictGetBool = datadictGetBool;
function datadictGetDict(key) {
    const [retval, objectData_out] = _in(0xb6b9ddc4, 0x12fceee2, _i, _ts(key), _r, _ri);
    return [retval, objectData_out];
}
exports.datadictGetDict = datadictGetDict;
function datadictGetFloat(key) {
    const [retval, objectData_out] = _in(0x06610343, 0xe73b9727, _i, _ts(key), _r, _rf);
    return [retval, objectData_out];
}
exports.datadictGetFloat = datadictGetFloat;
function datadictGetInt(key) {
    const [retval, objectData_out] = _in(0x78f06f6b, 0x1fb5a80c, _i, _ts(key), _r, _ri);
    return [retval, objectData_out];
}
exports.datadictGetInt = datadictGetInt;
function datadictGetString(key) {
    const [retval, objectData_out] = _in(0x3d2fd9e7, 0x63b24472, _i, _ts(key), _r, _s);
    return [retval, objectData_out];
}
exports.datadictGetString = datadictGetString;
/**
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * @param objectData
 * @param key
 */
function datadictGetType(key) {
    const [retval, objectData_out] = _in(0x031c55ed, 0x33227371, _i, _ts(key), _r, _ri);
    return [retval, objectData_out];
}
exports.datadictGetType = datadictGetType;
function datadictGetVector(key) {
    const [retval, objectData_out] = _in(0x46cd3cb6, 0x6e0825cc, _i, _ts(key), _r, _rv);
    return [_mv(retval), objectData_out];
}
exports.datadictGetVector = datadictGetVector;
function datadictSetBool(key, value) {
    return _in(0x35124302, 0xa556a325, _i, _ts(key), value);
}
exports.datadictSetBool = datadictSetBool;
function datadictSetFloat(key, value) {
    return _in(0xc27e1cc2, 0xd795105e, _i, _ts(key), _fv(value));
}
exports.datadictSetFloat = datadictSetFloat;
function datadictSetInt(key, value) {
    return _in(0xe7e03545, 0x0a7948d5, _i, _ts(key), value);
}
exports.datadictSetInt = datadictSetInt;
function datadictSetString(key, value) {
    return _in(0x8ff3847d, 0xadd8e30c, _i, _ts(key), _ts(value));
}
exports.datadictSetString = datadictSetString;
function datadictSetVector(key, valueX, valueY, valueZ) {
    return _in(0x4cd49b76, 0x338c7dee, _i, _ts(key), _fv(valueX), _fv(valueY), _fv(valueZ));
}
exports.datadictSetVector = datadictSetVector;
function datafileClearWatchList() {
    return _in(0x6cc86e78, 0x358d5119);
}
exports.datafileClearWatchList = datafileClearWatchList;
function datafileCreate(p0) {
    return _in(0xd27058a1, 0xca2b13ee, p0);
}
exports.datafileCreate = datafileCreate;
function datafileDelete(p0) {
    return _in(0x9ab9c1cf, 0xc8862dfb, p0);
}
exports.datafileDelete = datafileDelete;
function datafileDeleteForAdditionalDataFile(p0) {
    return _in(0x6ad0bd5e, 0x087866cb, p0);
}
exports.datafileDeleteForAdditionalDataFile = datafileDeleteForAdditionalDataFile;
function datafileDeleteRequestedFile(requestId) {
    return _in(0x8f5ea1c0, 0x1d65a100, requestId, _r);
}
exports.datafileDeleteRequestedFile = datafileDeleteRequestedFile;
function datafileFlushMissionHeader() {
    return _in(0xc55854c7, 0xd7274882);
}
exports.datafileFlushMissionHeader = datafileFlushMissionHeader;
function datafileGetFileDict(p0) {
    return _in(0x906b778c, 0xa1dc72b6, p0, _r, _ri);
}
exports.datafileGetFileDict = datafileGetFileDict;
function datafileGetFileDictForAdditionalDataFile(p0) {
    return _in(0xdbf860cf, 0x1db8e599, p0, _r, _ri);
}
exports.datafileGetFileDictForAdditionalDataFile = datafileGetFileDictForAdditionalDataFile;
function datafileHasLoadedFileData(requestId) {
    return _in(0x15ff52b8, 0x09db2353, requestId, _r);
}
exports.datafileHasLoadedFileData = datafileHasLoadedFileData;
function datafileHasValidFileData(requestId) {
    return _in(0xf8cc1ebe, 0x0b62e29f, requestId, _r);
}
exports.datafileHasValidFileData = datafileHasValidFileData;
function datafileIsSavePending() {
    return _in(0xbedb96a7, 0x584aa8cf, _r);
}
exports.datafileIsSavePending = datafileIsSavePending;
function datafileIsValidRequestId(index) {
    return _in(0xfccae5b9, 0x2a830878, index, _r);
}
exports.datafileIsValidRequestId = datafileIsValidRequestId;
/**
 * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
 *
 * Returns whether or not the file was successfully loaded.
 *
 * Example:
 * DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
 * @param filename
 * @param p1
 */
function datafileLoadOfflineUgc(filename, p1) {
    return _in(0xc5238c01, 0x1af405e4, _ts(filename), p1, _r);
}
exports.datafileLoadOfflineUgc = datafileLoadOfflineUgc;
function datafileLoadOfflineUgcForAdditionalDataFile(p0, p1) {
    return _in(0xa6eef010, 0x87181edd, p0, p1, _r);
}
exports.datafileLoadOfflineUgcForAdditionalDataFile = datafileLoadOfflineUgcForAdditionalDataFile;
function datafileSelectActiveFile(requestId, p1) {
    return _in(0x22da6693, 0x6e0fff37, requestId, p1, _r);
}
exports.datafileSelectActiveFile = datafileSelectActiveFile;
function datafileSelectCreatorStats(p0, p1) {
    return _in(0x01095c95, 0xcd46b624, p0, p1, _r);
}
exports.datafileSelectCreatorStats = datafileSelectCreatorStats;
function datafileSelectUgcData(p0, p1) {
    return _in(0xa69ac4ad, 0xe82b57a4, p0, p1, _r);
}
exports.datafileSelectUgcData = datafileSelectUgcData;
function datafileSelectUgcPlayerData(p0, p1) {
    return _in(0x52818819, 0x057f2b40, p0, p1, _r);
}
exports.datafileSelectUgcPlayerData = datafileSelectUgcPlayerData;
function datafileSelectUgcStats(p0, p1, p2) {
    return _in(0x9cb0bfa7, 0xa9342c3d, p0, p1, p2, _r);
}
exports.datafileSelectUgcStats = datafileSelectUgcStats;
function datafileStartSaveToCloud(filename, p1) {
    return _in(0x83bcce32, 0x24735f05, _ts(filename), p1, _r);
}
exports.datafileStartSaveToCloud = datafileStartSaveToCloud;
function datafileStoreMissionHeader(p0) {
    return _in(0x2ed61456, 0x317b8178, p0);
}
exports.datafileStoreMissionHeader = datafileStoreMissionHeader;
function datafileUpdateSaveToCloud(p0) {
    const [retval, p0_out] = _in(0x4dfdd9eb, 0x705f8140, _i, _r);
    return [retval, p0_out];
}
exports.datafileUpdateSaveToCloud = datafileUpdateSaveToCloud;
/**
 * Adds the given requestID to the watch list.
 * @param requestId
 */
function datafileWatchRequestId(requestId) {
    return _in(0xad6875bb, 0xc0fc899c, requestId);
}
exports.datafileWatchRequestId = datafileWatchRequestId;
/**
 * see ACTIVATE_AUDIO_SLOWMO_MODE for modes
 * @param mode
 */
function deactivateAudioSlowmoMode(mode) {
    return _in(0xddc635d5, 0xb3262c56, _ts(mode));
}
exports.deactivateAudioSlowmoMode = deactivateAudioSlowmoMode;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
function deactivateInteriorEntitySet(interior, entitySetName) {
    return _in(0x420bd372, 0x89eee162, interior, _ts(entitySetName));
}
exports.deactivateInteriorEntitySet = deactivateInteriorEntitySet;
/**
 * Returns whether or not the specified property is set for the entity.
 * @param entity
 * @param propertyName
 */
function decorExistOn(entity, propertyName) {
    return _in(0x05661b80, 0xa8c9165f, entity, _ts(propertyName), _r);
}
exports.decorExistOn = decorExistOn;
function decorGetBool(entity, propertyName) {
    return _in(0xdace6716, 0x63f2f5db, entity, _ts(propertyName), _r);
}
exports.decorGetBool = decorGetBool;
function decorGetFloat(entity, propertyName) {
    return _in(0x6524a2f1, 0x14706f43, entity, _ts(propertyName), _r, _rf);
}
exports.decorGetFloat = decorGetFloat;
function decorGetInt(entity, propertyName) {
    return _in(0xa06c969b, 0x02a97298, entity, _ts(propertyName), _r, _ri);
}
exports.decorGetInt = decorGetInt;
/**
 * type: see DECOR_REGISTER
 * @param propertyName
 * @param type
 */
function decorIsRegisteredAsType(propertyName, type) {
    return _in(0x4f14f9f8, 0x70d6fbc8, _ts(propertyName), type, _r);
}
exports.decorIsRegisteredAsType = decorIsRegisteredAsType;
/**
 * https://alloc8or.re/gta5/doc/enums/eDecorType.txt
 * @param propertyName
 * @param type
 */
function decorRegister(propertyName, type) {
    return _in(0x9fd90732, 0xf56403ce, _ts(propertyName), type);
}
exports.decorRegister = decorRegister;
/**
 * Called after all decorator type initializations.
 */
function decorRegisterLock() {
    return _in(0xa9d14eea, 0x259f9248);
}
exports.decorRegisterLock = decorRegisterLock;
function decorRemove(entity, propertyName) {
    return _in(0x00ee9f29, 0x7c738720, entity, _ts(propertyName), _r);
}
exports.decorRemove = decorRemove;
/**
 * This function sets metadata of type bool to specified entity.
 *
 * @param entity
 * @param propertyName
 * @param value
 */
function decorSetBool(entity, propertyName, value) {
    return _in(0x6b1e8e2e, 0xd1335b71, entity, _ts(propertyName), value, _r);
}
exports.decorSetBool = decorSetBool;
function decorSetFloat(entity, propertyName, value) {
    return _in(0x211ab1dd, 0x8d0f363a, entity, _ts(propertyName), _fv(value), _r);
}
exports.decorSetFloat = decorSetFloat;
/**
 * Sets property to int.
 * @param entity
 * @param propertyName
 * @param value
 */
function decorSetInt(entity, propertyName, value) {
    return _in(0x0ce3aa5e, 0x1ca19e10, entity, _ts(propertyName), value, _r);
}
exports.decorSetInt = decorSetInt;
function decorSetTime(entity, propertyName, timestamp) {
    return _in(0x95aed7b8, 0xe39ecaa4, entity, _ts(propertyName), timestamp, _r);
}
exports.decorSetTime = decorSetTime;
function delayMpStoreOpen() {
    return _in(0x26563515, 0x0fb0d82e);
}
exports.delayMpStoreOpen = delayMpStoreOpen;
function deleteAllTrains() {
    return _in(0x736a7185, 0x77f39c7d);
}
exports.deleteAllTrains = deleteAllTrains;
function deleteCheckpoint(checkpoint) {
    return _in(0xf5ed37f5, 0x4cd4d52e, checkpoint);
}
exports.deleteCheckpoint = deleteCheckpoint;
function deleteChildRope(ropeId) {
    return _in(0xaa5d6b18, 0x88e4db20, ropeId);
}
exports.deleteChildRope = deleteChildRope;
/**
 * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
 * @param entity
 */
function deleteEntity(entity) {
    return _in(0xae3cbe5b, 0xf394c9c9, _ii(entity));
}
exports.deleteEntity = deleteEntity;
/**
 * Delete an incident with a given id.
 *
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * @param incidentId
 */
function deleteIncident(incidentId) {
    return _in(0x556c1aa2, 0x70d5a207, incidentId);
}
exports.deleteIncident = deleteIncident;
function deleteMissionTrain(train) {
    return _in(0x5b76b14a, 0xe875c795, _ii(train));
}
exports.deleteMissionTrain = deleteMissionTrain;
/**
 * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
 * @param object
 */
function deleteObject(object) {
    return _in(0x539e0ae3, 0xe6634b9f, _ii(object));
}
exports.deleteObject = deleteObject;
/**
 * From the b617d scripts:
 *
 * TASK::DELETE_PATROL_ROUTE("miss_merc0");
 * TASK::DELETE_PATROL_ROUTE("miss_merc1");
 * TASK::DELETE_PATROL_ROUTE("miss_merc2");
 * TASK::DELETE_PATROL_ROUTE("miss_dock");
 * @param patrolRoute
 */
function deletePatrolRoute(patrolRoute) {
    return _in(0x7767dd9d, 0x65e91319, _ts(patrolRoute));
}
exports.deletePatrolRoute = deletePatrolRoute;
/**
 * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
 * @param ped
 */
function deletePed(ped) {
    return _in(0x9614299d, 0xcb53e54b, _ii(ped));
}
exports.deletePed = deletePed;
function deleteRope(ropeId) {
    return _in(0x52b48292, 0x81364649, _ii(ropeId));
}
exports.deleteRope = deleteRope;
function deleteScriptVehicleGenerator(vehicleGenerator) {
    return _in(0x22102c9a, 0xbfcf125d, vehicleGenerator);
}
exports.deleteScriptVehicleGenerator = deleteScriptVehicleGenerator;
function deleteStuntJump(p0) {
    return _in(0xdc518000, 0xe39dae1f, p0);
}
exports.deleteStuntJump = deleteStuntJump;
/**
 * Deletes a vehicle.
 * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 *
 * eg how to use:
 * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * DELETE_VEHICLE(&vehicle);
 *
 * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
 * @param vehicle
 */
function deleteVehicle(vehicle) {
    return _in(0xea386986, 0xe786a54f, _ii(vehicle));
}
exports.deleteVehicle = deleteVehicle;
function deleteWaypointsFromThisPlayer() {
    return _in(0xd8e69475, 0x7bcea8e9);
}
exports.deleteWaypointsFromThisPlayer = deleteWaypointsFromThisPlayer;
/**
 * Does nothing and always returns false.
 * @param amount
 */
function depositVc(amount) {
    return _in(0xe260e0bb, 0x9cd995ac, amount, _r);
}
exports.depositVc = depositVc;
/**
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * @param bScriptHostCam
 */
function destroyAllCams(bScriptHostCam) {
    return _in(0x8e5fb156, 0x63f79120, bScriptHostCam);
}
exports.destroyAllCams = destroyAllCams;
/**
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * @param cam
 * @param bScriptHostCam
 */
function destroyCam(cam, bScriptHostCam) {
    return _in(0x865908c8, 0x1a2c22e9, cam, bScriptHostCam);
}
exports.destroyCam = destroyCam;
function destroyItemset(itemset) {
    return _in(0xde18220b, 0x1c183eda, itemset);
}
exports.destroyItemset = destroyItemset;
/**
 * Destroys the currently active mobile phone.
 */
function destroyMobilePhone() {
    return _in(0x3bc861df, 0x703e5097);
}
exports.destroyMobilePhone = destroyMobilePhone;
function destroyTrackedPoint(point) {
    return _in(0xb25dc90b, 0xad56ca42, point);
}
exports.destroyTrackedPoint = destroyTrackedPoint;
function detachCam(cam) {
    return _in(0xa2fabbe8, 0x7f4bad82, cam);
}
exports.detachCam = detachCam;
function detachContainerFromHandlerFrame(vehicle) {
    return _in(0x7c0043fd, 0xff6436bc, vehicle);
}
exports.detachContainerFromHandlerFrame = detachContainerFromHandlerFrame;
/**
 * If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
 * Set `dynamic` to true to keep velocity after dettaching
 * @param entity
 * @param dynamic
 * @param collision
 */
function detachEntity(entity, dynamic, collision) {
    return _in(0x961ac54b, 0xf0613f5d, entity, dynamic, collision);
}
exports.detachEntity = detachEntity;
function detachEntityFromCargobob(cargobob, entity) {
    return _in(0xaf030117, 0x01811146, cargobob, entity, _r);
}
exports.detachEntityFromCargobob = detachEntityFromCargobob;
function detachPortablePickupFromPed(pickupObject) {
    return _in(0xcf463d1e, 0x9a0aecb1, pickupObject);
}
exports.detachPortablePickupFromPed = detachPortablePickupFromPed;
function detachRopeFromEntity(ropeId, entity) {
    return _in(0xbcf30269, 0x12a8647d, ropeId, entity);
}
exports.detachRopeFromEntity = detachRopeFromEntity;
function detachSynchronizedScene(sceneID) {
    return _in(0x6d38f1f0, 0x4cbb37ea, sceneID);
}
exports.detachSynchronizedScene = detachSynchronizedScene;
function detachVehicleFromAnyCargobob(vehicle) {
    return _in(0xadf7be45, 0x0512c12f, vehicle, _r);
}
exports.detachVehicleFromAnyCargobob = detachVehicleFromAnyCargobob;
function detachVehicleFromAnyTowTruck(vehicle) {
    return _in(0xd0e9ce05, 0xa1e68cd8, vehicle, _r);
}
exports.detachVehicleFromAnyTowTruck = detachVehicleFromAnyTowTruck;
function detachVehicleFromCargobob(vehicle, cargobob) {
    return _in(0x0e21d3df, 0x1051399d, vehicle, cargobob);
}
exports.detachVehicleFromCargobob = detachVehicleFromCargobob;
/**
 * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
 * @param towTruck
 * @param vehicle
 */
function detachVehicleFromTowTruck(towTruck, vehicle) {
    return _in(0xc2db6b67, 0x08350ed8, towTruck, vehicle);
}
exports.detachVehicleFromTowTruck = detachVehicleFromTowTruck;
function detachVehicleFromTrailer(vehicle) {
    return _in(0x90532edf, 0x0d2bdd86, vehicle);
}
exports.detachVehicleFromTrailer = detachVehicleFromTrailer;
function detonateVehiclePhoneExplosiveDevice() {
    return _in(0xef49cf02, 0x70307cbe);
}
exports.detonateVehiclePhoneExplosiveDevice = detonateVehiclePhoneExplosiveDevice;
function disableAimCamThisUpdate() {
    return _in(0x1a31fe00, 0x49e542f6);
}
exports.disableAimCamThisUpdate = disableAimCamThisUpdate;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function disableAllControlActions(control) {
    return _in(0x5f4b6931, 0x816e599b, control);
}
exports.disableAllControlActions = disableAllControlActions;
function disableCamCollisionForObject(entity) {
    return _in(0x49482f9f, 0xcd825aaa, entity);
}
exports.disableCamCollisionForObject = disableCamCollisionForObject;
function disableCameraViewModeCycle(player) {
    return _in(0x5501b7a5, 0xcdb79d37, player);
}
exports.disableCameraViewModeCycle = disableCameraViewModeCycle;
function disableCinematicBonnetCameraThisUpdate() {
    return _in(0xadff1b2a, 0x555f5fba);
}
exports.disableCinematicBonnetCameraThisUpdate = disableCinematicBonnetCameraThisUpdate;
function disableCinematicSlowMoThisUpdate() {
    return _in(0x17fca719, 0x9a530203, _r);
}
exports.disableCinematicSlowMoThisUpdate = disableCinematicSlowMoThisUpdate;
function disableCinematicVehicleIdleModeThisUpdate() {
    return _in(0x62ecfcfd, 0xee7885d6);
}
exports.disableCinematicVehicleIdleModeThisUpdate = disableCinematicVehicleIdleModeThisUpdate;
function disableCompositeShotgunDecals(toggle) {
    return _in(0x0e4299c5, 0x49f0d1f1, toggle);
}
exports.disableCompositeShotgunDecals = disableCompositeShotgunDecals;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param disableRelatedActions
 */
function disableControlAction(control, action, disableRelatedActions) {
    return _in(0xfe99b66d, 0x079cf6bc, control, action, disableRelatedActions);
}
exports.disableControlAction = disableControlAction;
function disableDownwashPtfx(toggle) {
    return _in(0x5f6df3d9, 0x2271e8a1, toggle);
}
exports.disableDownwashPtfx = disableDownwashPtfx;
/**
 * Sets some flag on cinematic camera
 */
function disableFirstPersonCameraWaterClippingTestThisUpdate() {
    return _in(0xb1381b97, 0xf70c7b30);
}
exports.disableFirstPersonCameraWaterClippingTestThisUpdate = disableFirstPersonCameraWaterClippingTestThisUpdate;
function disableFirstPersonFlashEffectThisUpdate() {
    return _in(0x59424bd7, 0x5174c9b1);
}
exports.disableFirstPersonFlashEffectThisUpdate = disableFirstPersonFlashEffectThisUpdate;
function disableFrontendThisFrame() {
    return _in(0x6d3465a7, 0x3092f0e6);
}
exports.disableFrontendThisFrame = disableFrontendThisFrame;
/**
 * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
 */
function disableGameplayCamAltitudeFovScalingThisUpdate() {
    return _in(0xea7f0ad7, 0xe9ba676f);
}
exports.disableGameplayCamAltitudeFovScalingThisUpdate = disableGameplayCamAltitudeFovScalingThisUpdate;
function disableHdtexThisFrame() {
    return _in(0xc35a6d07, 0xc93802b2);
}
exports.disableHdtexThisFrame = disableHdtexThisFrame;
function disableHeadBlendPaletteColor(ped) {
    return _in(0xa21c1185, 0x53bbdf02, ped);
}
exports.disableHeadBlendPaletteColor = disableHeadBlendPaletteColor;
/**
 * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
 * @param hospitalIndex
 * @param toggle
 */
function disableHospitalRestart(hospitalIndex, toggle) {
    return _in(0xc8535819, 0xc450eba8, hospitalIndex, toggle);
}
exports.disableHospitalRestart = disableHospitalRestart;
function disableInWaterPtfx(toggle) {
    return _in(0xcfd16f0d, 0xb5a3535c, toggle);
}
exports.disableInWaterPtfx = disableInWaterPtfx;
function disableIndividualPlanePropeller(vehicle, propeller) {
    return _in(0x500873a4, 0x5724c863, vehicle, propeller);
}
exports.disableIndividualPlanePropeller = disableIndividualPlanePropeller;
/**
 * Example:
 * This removes the interior from the strip club and when trying to walk inside the player just falls:
 *
 * INTERIOR::DISABLE_INTERIOR(118018, true);
 * @param interior
 * @param toggle
 */
function disableInterior(interior, toggle) {
    return _in(0x61709414, 0x19d7d8ec, interior, toggle);
}
exports.disableInterior = disableInterior;
function disableMetroSystem(toggle) {
    return _in(0x9e6542f0, 0xce8e70a3, toggle);
}
exports.disableMetroSystem = disableMetroSystem;
/**
 * Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
 */
function disableMoonCycleOverride() {
    return _in(0x2bf72ad5, 0xb41aa739);
}
exports.disableMoonCycleOverride = disableMoonCycleOverride;
/**
 * Set toggle true to disable navmesh.
 * Set toggle false to enable navmesh.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param toggle
 */
function disableNavmeshInArea(x1, y1, z1, x2, y2, z2, toggle) {
    return _in(0x4c8872d8, 0xcdbe1b8b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), toggle);
}
exports.disableNavmeshInArea = disableNavmeshInArea;
function disableNearClipScanThisUpdate() {
    return _in(0x5a43c76f, 0x7fc7ba5f);
}
exports.disableNearClipScanThisUpdate = disableNearClipScanThisUpdate;
function disableOcclusionThisFrame() {
    return _in(0x3669f1b1, 0x98dcaa4f);
}
exports.disableOcclusionThisFrame = disableOcclusionThisFrame;
/**
 * Disables first person camera for the current frame.
 *
 * Found in decompiled scripts:
 * GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
 * CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
 */
function disableOnFootFirstPersonViewThisUpdate() {
    return _in(0xde2ef5da, 0x284cc8df);
}
exports.disableOnFootFirstPersonViewThisUpdate = disableOnFootFirstPersonViewThisUpdate;
function disablePausemenuSpinner(p0) {
    return _in(0x9245e810, 0x72704b8a, p0);
}
exports.disablePausemenuSpinner = disablePausemenuSpinner;
function disablePedHeatscaleOverride(ped) {
    return _in(0x600048c6, 0x0d5c2c51, ped);
}
exports.disablePedHeatscaleOverride = disablePedHeatscaleOverride;
function disablePedInjuredOnGroundBehaviour(ped) {
    return _in(0x733c87d4, 0xce22bea2, ped);
}
exports.disablePedInjuredOnGroundBehaviour = disablePedInjuredOnGroundBehaviour;
function disablePedPainAudio(ped, toggle) {
    return _in(0xa9a41c1e, 0x940fb0e8, ped, toggle);
}
exports.disablePedPainAudio = disablePedPainAudio;
function disablePlaneAileron(vehicle, p1, p2) {
    return _in(0x23428fc5, 0x3c60919c, vehicle, p1, p2);
}
exports.disablePlaneAileron = disablePlaneAileron;
/**
 * Inhibits the player from using any method of combat including melee and firearms.
 *
 * NOTE: Only disables the firing for one frame
 * @param player
 * @param toggle
 */
function disablePlayerFiring(player, toggle) {
    return _in(0x5e6cc076, 0x46bbeab8, player, toggle);
}
exports.disablePlayerFiring = disablePlayerFiring;
/**
 * Needs to be called every frame.
 * @param player
 */
function disablePlayerHealthRecharge(player) {
    return _in(0xbcb06442, 0xf7e52666, player);
}
exports.disablePlayerHealthRecharge = disablePlayerHealthRecharge;
/**
 * Used only once in R* scripts (freemode.ysc).
 */
function disablePlayerThrowGrenadeWhileUsingGun() {
    return _in(0xb885852c, 0x39cc265d);
}
exports.disablePlayerThrowGrenadeWhileUsingGun = disablePlayerThrowGrenadeWhileUsingGun;
function disablePlayerVehicleRewards(player) {
    return _in(0xc142be3b, 0xb9ce125f, player);
}
exports.disablePlayerVehicleRewards = disablePlayerVehicleRewards;
/**
 * Disables the spawn point at the police house on the specified index.
 *
 * policeIndex: The police house index.
 * toggle: true to enable the spawn point, false to disable.
 *
 * - Nacorpio
 * @param policeIndex
 * @param toggle
 */
function disablePoliceRestart(policeIndex, toggle) {
    return _in(0x23285ded, 0x6ebd7ea3, policeIndex, toggle);
}
exports.disablePoliceRestart = disablePoliceRestart;
function disableProcobjCreation() {
    return _in(0x1612c45f, 0x9e3e0d44);
}
exports.disableProcobjCreation = disableProcobjCreation;
function disableRegionVfx(p0) {
    return _in(0xefd97ff4, 0x7b745b8d, p0);
}
exports.disableRegionVfx = disableRegionVfx;
/**
 * Does nothing (it's a nullsub).
 */
function disableScreenDimmingThisFrame() {
    return _in(0x23227df0, 0xb2115469);
}
exports.disableScreenDimmingThisFrame = disableScreenDimmingThisFrame;
function disableScreenblurFade() {
    return _in(0xde812394, 0x37e8c5a8);
}
exports.disableScreenblurFade = disableScreenblurFade;
function disableScriptBrainSet(brainSet) {
    return _in(0x14d8518e, 0x9760f08f, brainSet);
}
exports.disableScriptBrainSet = disableScriptBrainSet;
function disableScuffDecals(toggle) {
    return _in(0x02369d5c, 0x8a51fdcf, toggle);
}
exports.disableScuffDecals = disableScuffDecals;
function disableStuntJumpSet(p0) {
    return _in(0xa5272ebe, 0xdd4747f6, p0);
}
exports.disableStuntJumpSet = disableStuntJumpSet;
function disableSwitchOutroFx() {
    return _in(0xbd605b8e, 0x0e18b3bb);
}
exports.disableSwitchOutroFx = disableSwitchOutroFx;
/**
 * Sets a flag. A valid id is 0x157DC10D
 * @param id
 * @param toggle
 */
function disableTidyingUpInGarage(id, toggle) {
    return _in(0x659f9d71, 0xf52843f8, id, toggle);
}
exports.disableTidyingUpInGarage = disableTidyingUpInGarage;
/**
 * Adds some kind of shadow to the vehicle.
 *
 * p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
 * @param vehicle
 * @param p1
 * @param p2
 */
function disableVehcileDynamicAmbientScales(vehicle, p1, p2) {
    return _in(0xf0e4ba16, 0xd1db546c, vehicle, p1, p2);
}
exports.disableVehcileDynamicAmbientScales = disableVehcileDynamicAmbientScales;
function disableVehicleDistantlights(toggle) {
    return _in(0xc9f98ac1, 0x884e73a2, toggle);
}
exports.disableVehicleDistantlights = disableVehicleDistantlights;
function disableVehicleExplosionBreakOffParts() {
    return _in(0xf25e02cb, 0x9c5818f8);
}
exports.disableVehicleExplosionBreakOffParts = disableVehicleExplosionBreakOffParts;
function disableVehicleTurretMovementThisFrame(vehicle) {
    return _in(0x32caedf2, 0x4a583345, vehicle);
}
exports.disableVehicleTurretMovementThisFrame = disableVehicleTurretMovementThisFrame;
/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param disabled
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
function disableVehicleWeapon(disabled, weaponHash, vehicle, owner) {
    return _in(0xf4fc6a6f, 0x67d8d856, disabled, _ch(weaponHash), vehicle, owner);
}
exports.disableVehicleWeapon = disableVehicleWeapon;
function displayAmmoThisFrame(display) {
    return _in(0xa5e78ba2, 0xb1331c55, display);
}
exports.displayAmmoThisFrame = displayAmmoThisFrame;
function displayAreaName(toggle) {
    return _in(0x276b6ce3, 0x69c33678, toggle);
}
exports.displayAreaName = displayAreaName;
/**
 * "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
 * "DISPLAY_CASH(true);" disables cash amount rendering
 * @param toggle
 */
function displayCash(toggle) {
    return _in(0x96dec8d5, 0x430208b7, toggle);
}
exports.displayCash = displayCash;
/**
 * The messages are localized strings.
 * Examples:
 * "No_bus_money"
 * "Enter_bus"
 * "Tour_help"
 * "LETTERS_HELP2"
 * "Dummy"
 *
 * **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
 * --------
 * p1 doesn't seem to make a difference, regardless of the state it's in.
 *
 *
 * picture of where on the screen this is displayed?
 * @param message
 * @param p1
 */
function displayHelpTextThisFrame(message, p1) {
    return _in(0x960c9ff8, 0xf616e41c, _ts(message), p1);
}
exports.displayHelpTextThisFrame = displayHelpTextThisFrame;
/**
 * If Hud should be displayed
 * @param toggle
 */
function displayHud(toggle) {
    return _in(0xa6294919, 0xe56ff02a, toggle);
}
exports.displayHud = displayHud;
/**
 * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
 */
function displayHudWhenNotInStateOfPlayThisFrame() {
    return _in(0x7669f9e3, 0x9dc17063);
}
exports.displayHudWhenNotInStateOfPlayThisFrame = displayHudWhenNotInStateOfPlayThisFrame;
function displayHudWhenPausedThisFrame() {
    return _in(0x402f9ed6, 0x2087e898);
}
exports.displayHudWhenPausedThisFrame = displayHudWhenPausedThisFrame;
/**
 * sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
 *
 * NOTE: windowTitle uses text labels, and an invalid value will display nothing.
 *
 * www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
 *
 * windowTitle's
 * -----------------
 * CELL_EMAIL_BOD  =   "Enter your Eyefind message"
 * CELL_EMAIL_BODE =   "Message too long. Try again"
 * CELL_EMAIL_BODF    =   "Forbidden message. Try again"
 * CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
 * CELL_EMAIL_SODE =   "Subject too long. Try again"
 * CELL_EMAIL_SODF    =   "Forbidden text. Try again"
 * CELL_EMASH_BOD   =   "Enter your Eyefind message"
 * CELL_EMASH_BODE =   "Message too long. Try again"
 * CELL_EMASH_BODF    =   "Forbidden message. Try again"
 * CELL_EMASH_SOD    =   "Enter your Eyefind subject"
 * CELL_EMASH_SODE =   "Subject too long. Try again"
 * CELL_EMASH_SODF    =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP10   =   "Enter Synopsis"
 * FMMC_KEY_TIP12  =   "Enter Custom Team Name"
 * FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP12N  =   "Custom Team Name"
 * FMMC_KEY_TIP8 =   "Enter Message"
 * FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
 * FMMC_KEY_TIP8S  =   "Enter Message"
 * FMMC_KEY_TIP9    =   "Enter Outfit Name"
 * FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
 * FMMC_KEY_TIP9N  =   "Outfit Name"
 * PM_NAME_CHALL  =   "Enter Challenge Name"
 * @param p0
 * @param windowTitle
 * @param p2
 * @param defaultText
 * @param defaultConcat1
 * @param defaultConcat2
 * @param defaultConcat3
 * @param maxInputLength
 */
function displayOnscreenKeyboard(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength) {
    return _in(0x00dc833f, 0x2568dbf6, p0, _ts(windowTitle), _ts(p2), _ts(defaultText), _ts(defaultConcat1), _ts(defaultConcat2), _ts(defaultConcat3), maxInputLength);
}
exports.displayOnscreenKeyboard = displayOnscreenKeyboard;
function displayOnscreenKeyboardWithLongerInitialString(p0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength) {
    return _in(0xca78cfa0, 0x366592fe, p0, _ts(windowTitle), _i, _ts(defaultText), _ts(defaultConcat1), _ts(defaultConcat2), _ts(defaultConcat3), _ts(defaultConcat4), _ts(defaultConcat5), _ts(defaultConcat6), _ts(defaultConcat7), maxInputLength);
}
exports.displayOnscreenKeyboardWithLongerInitialString = displayOnscreenKeyboardWithLongerInitialString;
/**
 * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
 * Doesn't need to be called every frame.
 * Preview: https://i.imgur.com/DfqKWfJ.png
 *
 * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
 * @param toggle
 */
function displayPlayerNameTagsOnBlips(toggle) {
    return _in(0x82cedc33, 0x687e1f50, toggle);
}
exports.displayPlayerNameTagsOnBlips = displayPlayerNameTagsOnBlips;
/**
 * If Minimap / Radar should be displayed.
 * @param toggle
 */
function displayRadar(toggle) {
    return _in(0xa0ebb943, 0xc300e693, toggle);
}
exports.displayRadar = displayRadar;
/**
 * Displays the crosshair for this frame.
 */
function displaySniperScopeThisFrame() {
    return _in(0x73115226, 0xf4814e62);
}
exports.displaySniperScopeThisFrame = displaySniperScopeThisFrame;
/**
 * Purpose of the BOOL currently unknown.
 * Both, true and false, work
 * @param p0
 */
function displaySystemSigninUi(p0) {
    return _in(0x94dd7888, 0xc10a979e, p0);
}
exports.displaySystemSigninUi = displaySystemSigninUi;
/**
 * If value is set to true, and ambient siren sound will be played.
 * Appears to enable/disable an audio flag.
 * @param value
 */
function distantCopCarSirens(value) {
    return _in(0x552369f5, 0x49563ad5, value);
}
exports.distantCopCarSirens = distantCopCarSirens;
/**
 * This function is hard-coded to always return 1.
 */
function dlcCheckCloudDataCorrect() {
    return _in(0xf2e07819, 0xef1a5289, _r);
}
exports.dlcCheckCloudDataCorrect = dlcCheckCloudDataCorrect;
/**
 * This function is hard-coded to always return 1.
 */
function dlcCheckCompatPackConfiguration() {
    return _in(0xa213b11d, 0xff526300, _r);
}
exports.dlcCheckCompatPackConfiguration = dlcCheckCompatPackConfiguration;
function doAutoSave() {
    return _in(0x50eeaad8, 0x6232ee55);
}
exports.doAutoSave = doAutoSave;
/**
 * Fades the screen in.
 *
 * duration: The time the fade should take, in milliseconds.
 * @param duration
 */
function doScreenFadeIn(duration) {
    return _in(0xd4e8e249, 0x55024033, duration);
}
exports.doScreenFadeIn = doScreenFadeIn;
/**
 * Fades the screen out.
 *
 * duration: The time the fade should take, in milliseconds.
 * @param duration
 */
function doScreenFadeOut(duration) {
    return _in(0x891b5b39, 0xac6302af, duration);
}
exports.doScreenFadeOut = doScreenFadeOut;
function doesAirDefenceSphereExist(zoneId) {
    return _in(0xcd79a550, 0x999d7d4f, zoneId, _r);
}
exports.doesAirDefenceSphereExist = doesAirDefenceSphereExist;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
function doesAnimDictExist(animDict) {
    return _in(0x2da49c3b, 0x79856961, _ts(animDict), _r);
}
exports.doesAnimDictExist = doesAnimDictExist;
function doesBlipExist(blip) {
    return _in(0xa6db27d1, 0x9ecbb7da, blip, _r);
}
exports.doesBlipExist = doesBlipExist;
function doesBlipHaveGpsRoute(blip) {
    return _in(0xdd2238f5, 0x7b977751, blip, _r);
}
exports.doesBlipHaveGpsRoute = doesBlipHaveGpsRoute;
/**
 * Returns whether or not the passed camera handle exists.
 * @param cam
 */
function doesCamExist(cam) {
    return _in(0xa7a93217, 0x0592b50e, cam, _r);
}
exports.doesCamExist = doesCamExist;
/**
 * Returns true only when the hook is active, will return false if the magnet is active
 * @param cargobob
 */
function doesCargobobHavePickUpRope(cargobob) {
    return _in(0x1821d91a, 0xd4b56108, cargobob, _r);
}
exports.doesCargobobHavePickUpRope = doesCargobobHavePickUpRope;
/**
 * Returns true only when the magnet is active, will return false if the hook is active
 * @param cargobob
 */
function doesCargobobHavePickupMagnet(cargobob) {
    return _in(0x6e08bf5b, 0x3722bac9, cargobob, _r);
}
exports.doesCargobobHavePickupMagnet = doesCargobobHavePickupMagnet;
/**
 * Checks if the ped can play the speech or has the speech file, p2 is usually false.
 * @param ped
 * @param speechName
 * @param p2
 */
function doesContextExistForThisPed(ped, speechName, p2) {
    return _in(0x49b99bf3, 0xfda89a7a, ped, _ts(speechName), p2, _r);
}
exports.doesContextExistForThisPed = doesContextExistForThisPed;
function doesCurrentPedComponentHaveRestrictionTag(ped, componentId, restrictionTagHash) {
    return _in(0x7796b21b, 0x76221bc5, ped, componentId, _ch(restrictionTagHash), _r);
}
exports.doesCurrentPedComponentHaveRestrictionTag = doesCurrentPedComponentHaveRestrictionTag;
function doesCurrentPedPropHaveRestrictionTag(ped, componentId, restrictionTagHash) {
    return _in(0xd726bab4, 0x554da580, ped, componentId, _ch(restrictionTagHash), _r);
}
exports.doesCurrentPedPropHaveRestrictionTag = doesCurrentPedPropHaveRestrictionTag;
function doesCutsceneEntityExist(cutsceneEntName, modelHash) {
    return _in(0x499ef20c, 0x5db25c59, _ts(cutsceneEntName), _ch(modelHash), _r);
}
exports.doesCutsceneEntityExist = doesCutsceneEntityExist;
function doesCutsceneHandleExist(cutsceneHandle) {
    return _in(0x4fcd976d, 0xa686580c, cutsceneHandle, _r, _ri);
}
exports.doesCutsceneHandleExist = doesCutsceneHandleExist;
function doesEntityBelongToThisScript(entity, p1) {
    return _in(0xdde6df5a, 0xe89981d2, entity, p1, _r);
}
exports.doesEntityBelongToThisScript = doesEntityBelongToThisScript;
/**
 * Checks whether an entity exists in the game world.
 * @param entity
 */
function doesEntityExist(entity) {
    return _in(0x7239b21a, 0x38f536ba, entity, _r);
}
exports.doesEntityExist = doesEntityExist;
function doesEntityHaveAnimDirector(entity) {
    return _in(0x2158e81a, 0x6af65ea9, entity, _r);
}
exports.doesEntityHaveAnimDirector = doesEntityHaveAnimDirector;
function doesEntityHaveDrawable(entity) {
    return _in(0x060d6e96, 0xf8b8e48d, entity, _r);
}
exports.doesEntityHaveDrawable = doesEntityHaveDrawable;
function doesEntityHavePhysics(entity) {
    return _in(0xda95ea33, 0x17cc5064, entity, _r);
}
exports.doesEntityHavePhysics = doesEntityHavePhysics;
function doesEntityHaveSkeleton(entity) {
    return _in(0x764eb968, 0x74effdc1, entity, _r);
}
exports.doesEntityHaveSkeleton = doesEntityHaveSkeleton;
/**
 * Checks via CVehicleModelInfo
 * @param vehicle
 * @param extraId
 */
function doesExtraExist(vehicle, extraId) {
    return _in(0x1262d557, 0x92428154, vehicle, extraId, _r);
}
exports.doesExtraExist = doesExtraExist;
function doesGroupExist(groupId) {
    return _in(0x7c6b0c22, 0xf9f40bbe, groupId, _r);
}
exports.doesGroupExist = doesGroupExist;
function doesLatestBriefStringExist(p0) {
    return _in(0x5e657ef1, 0x099edd65, p0, _r);
}
exports.doesLatestBriefStringExist = doesLatestBriefStringExist;
function doesNavmeshBlockingObjectExist(p0) {
    return _in(0x0eaeb0db, 0x4b132399, p0, _r);
}
exports.doesNavmeshBlockingObjectExist = doesNavmeshBlockingObjectExist;
/**
 * p5 is usually 0.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param hash
 * @param p5
 */
function doesObjectOfTypeExistAtCoords(x, y, z, radius, hash, p5) {
    return _in(0xbfa48e2f, 0xf417213f, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(hash), p5, _r);
}
exports.doesObjectOfTypeExistAtCoords = doesObjectOfTypeExistAtCoords;
function doesParticleFxLoopedExist(ptfxHandle) {
    return _in(0x74afef0d, 0x2e1e409b, ptfxHandle, _r);
}
exports.doesParticleFxLoopedExist = doesParticleFxLoopedExist;
function doesPedHaveAiBlip(ped) {
    return _in(0x15b8ecf8, 0x44ee67ed, ped, _r);
}
exports.doesPedHaveAiBlip = doesPedHaveAiBlip;
function doesPickupExist(pickup) {
    return _in(0xafc1ca75, 0xad4074d1, pickup, _r);
}
exports.doesPickupExist = doesPickupExist;
function doesPickupObjectExist(pickupObject) {
    return _in(0xd9efb6db, 0xf7daaea3, pickupObject, _r);
}
exports.doesPickupObjectExist = doesPickupObjectExist;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param radius
 */
function doesPickupOfTypeExistInArea(pickupHash, x, y, z, radius) {
    return _in(0xf9c36251, 0xf6e48e33, _ch(pickupHash), _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.doesPickupOfTypeExistInArea = doesPickupOfTypeExistInArea;
function doesPlayerVehHaveRadio() {
    return _in(0x109697e2, 0xffbac8a1, _r);
}
exports.doesPlayerVehHaveRadio = doesPlayerVehHaveRadio;
function doesPopMultiplierAreaExist(id) {
    return _in(0x1327e2fe, 0x9746baee, id, _r);
}
exports.doesPopMultiplierAreaExist = doesPopMultiplierAreaExist;
function doesPopMultiplierSphereExist(id) {
    return _in(0x171bafb3, 0xc60389f4, id, _r);
}
exports.doesPopMultiplierSphereExist = doesPopMultiplierSphereExist;
/**
 * Returns true if a destructible object with this handle exists, false otherwise.
 * @param object
 */
function doesRayfireMapObjectExist(object) {
    return _in(0x52af537a, 0x0c5b8aad, object, _r);
}
exports.doesRayfireMapObjectExist = doesRayfireMapObjectExist;
function doesRelationshipGroupExist(groupHash) {
    return _in(0xcc6e3b6b, 0xb69501f1, _ch(groupHash), _r);
}
exports.doesRelationshipGroupExist = doesRelationshipGroupExist;
function doesRopeExist(ropeId) {
    const [retval, ropeId_out] = _in(0xfd5448be, 0x3111ed96, _ii(ropeId), _r);
    return [retval, ropeId_out];
}
exports.doesRopeExist = doesRopeExist;
function doesScenarioBlockingAreaExists(x1, y1, z1, x2, y2, z2) {
    return _in(0x8a24b067, 0xd175a7bd, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
}
exports.doesScenarioBlockingAreaExists = doesScenarioBlockingAreaExists;
function doesScenarioExistInArea(x, y, z, radius, mustBeFree) {
    return _in(0x5a59271f, 0xfadd33c1, _fv(x), _fv(y), _fv(z), _fv(radius), mustBeFree, _r);
}
exports.doesScenarioExistInArea = doesScenarioExistInArea;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts:
 *
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "GRAPESEED_PLANES",
 * "KORTZ_SECURITY",
 * "LOST_BIKERS",
 * "LSA_Planes",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5"
 * "QUARRY",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE",
 * "Triathlon_1_Start",
 * "Triathlon_2_Start",
 * "Triathlon_3_Start"
 *
 * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 *
 * @param scenarioGroup
 */
function doesScenarioGroupExist(scenarioGroup) {
    return _in(0xf9034c13, 0x6c9e00d3, _ts(scenarioGroup), _r);
}
exports.doesScenarioGroupExist = doesScenarioGroupExist;
function doesScenarioOfTypeExistInArea(x, y, z, scenarioName, radius, mustBeFree) {
    return _in(0x0a9d0c2a, 0x3bbc86c1, _fv(x), _fv(y), _fv(z), _ts(scenarioName), _fv(radius), mustBeFree, _r);
}
exports.doesScenarioOfTypeExistInArea = doesScenarioOfTypeExistInArea;
function doesScriptExist(scriptName) {
    return _in(0xfc04745f, 0xbe67c19a, _ts(scriptName), _r);
}
exports.doesScriptExist = doesScriptExist;
function doesScriptOwnRope(ropeId) {
    return _in(0x271c9d3a, 0xca5d6409, ropeId, _r);
}
exports.doesScriptOwnRope = doesScriptOwnRope;
function doesScriptVehicleGeneratorExist(vehicleGenerator) {
    return _in(0xf6086bc8, 0x36400876, vehicleGenerator, _r);
}
exports.doesScriptVehicleGeneratorExist = doesScriptVehicleGeneratorExist;
function doesScriptWithNameHashExist(scriptHash) {
    return _in(0xf86aa3c5, 0x6ba31381, _ch(scriptHash), _r);
}
exports.doesScriptWithNameHashExist = doesScriptWithNameHashExist;
/**
 * Checks if there is a cover point at position
 * @param x
 * @param y
 * @param z
 */
function doesScriptedCoverPointExistAtCoords(x, y, z) {
    return _in(0xa98b8e3c, 0x088e5a31, _fv(x), _fv(y), _fv(z), _r);
}
exports.doesScriptedCoverPointExistAtCoords = doesScriptedCoverPointExistAtCoords;
/**
 * Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
 *
 * componentId/last parameter seems to be unused.
 * @param componentHash
 * @param restrictionTagHash
 * @param componentId
 */
function doesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId) {
    return _in(0x341de7ed, 0x1d2a1bfd, _ch(componentHash), _ch(restrictionTagHash), componentId, _r);
}
exports.doesShopPedApparelHaveRestrictionTag = doesShopPedApparelHaveRestrictionTag;
function doesTextBlockExist(gxt) {
    return _in(0x1c7302e7, 0x25259789, _ts(gxt), _r);
}
exports.doesTextBlockExist = doesTextBlockExist;
/**
 * Checks if the passed gxt name exists in the game files.
 * @param gxt
 */
function doesTextLabelExist(gxt) {
    return _in(0xac09ca97, 0x3c564252, _ts(gxt), _r);
}
exports.doesTextLabelExist = doesTextLabelExist;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
function doesThisPhotoSlotContainAValidPhoto(p0) {
    return _in(0xe791df1f, 0x73ed2c8b, p0, _r);
}
exports.doesThisPhotoSlotContainAValidPhoto = doesThisPhotoSlotContainAValidPhoto;
/**
 * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
 * @param vehicle
 */
function doesVehicleAllowRappel(vehicle) {
    return _in(0x4e417c54, 0x7182c84d, vehicle, _r);
}
exports.doesVehicleAllowRappel = doesVehicleAllowRappel;
function doesVehicleExistWithDecorator(decorator) {
    return _in(0x956b409b, 0x984d9bf7, _ts(decorator), _r, _ri);
}
exports.doesVehicleExistWithDecorator = doesVehicleExistWithDecorator;
function doesVehicleHaveCrewEmblem(vehicle, p1) {
    return _in(0x060d935d, 0x3981a275, vehicle, p1, _r);
}
exports.doesVehicleHaveCrewEmblem = doesVehicleHaveCrewEmblem;
function doesVehicleHaveRoof(vehicle) {
    return _in(0x8ac862b0, 0xb32c5b80, vehicle, _r);
}
exports.doesVehicleHaveRoof = doesVehicleHaveRoof;
function doesVehicleHaveSearchlight(vehicle) {
    return _in(0x99015ed7, 0xdbea5113, vehicle, _r);
}
exports.doesVehicleHaveSearchlight = doesVehicleHaveSearchlight;
/**
 * Maximum amount of vehicles with vehicle stuck check appears to be 16.
 * @param vehicle
 */
function doesVehicleHaveStuckVehicleCheck(vehicle) {
    return _in(0x57e4c39d, 0xe5ee8470, vehicle, _r);
}
exports.doesVehicleHaveStuckVehicleCheck = doesVehicleHaveStuckVehicleCheck;
function doesVehicleHaveWeapons(vehicle) {
    return _in(0x25ecb9f8, 0x017d98e0, vehicle, _r);
}
exports.doesVehicleHaveWeapons = doesVehicleHaveWeapons;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param componentHash
 */
function doesWeaponTakeWeaponComponent(weaponHash, componentHash) {
    return _in(0x5cee3df5, 0x69cecab0, _ch(weaponHash), _ch(componentHash), _r);
}
exports.doesWeaponTakeWeaponComponent = doesWeaponTakeWeaponComponent;
function dontRenderInGameUi(p0) {
    return _in(0x22a249a5, 0x3034450a, p0);
}
exports.dontRenderInGameUi = dontRenderInGameUi;
/**
 * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
 */
function dontTiltMinimapThisFrame() {
    return _in(0x6d14bfdc, 0x33b34f55);
}
exports.dontTiltMinimapThisFrame = dontTiltMinimapThisFrame;
function dontZoomMinimapWhenRunningThisFrame() {
    return _in(0x89da85d9, 0x49ce57a0);
}
exports.dontZoomMinimapWhenRunningThisFrame = dontZoomMinimapWhenRunningThisFrame;
function dontZoomMinimapWhenSnipingThisFrame() {
    return _in(0x55f5a5f0, 0x7134de60);
}
exports.dontZoomMinimapWhenSnipingThisFrame = dontZoomMinimapWhenSnipingThisFrame;
/**
 * Search radius: 0.5
 * @param x
 * @param y
 * @param z
 * @param modelHash
 * @param outDoorHash
 */
function doorSystemFindExistingDoor(x, y, z, modelHash, outDoorHash) {
    const [retval, outDoorHash_out] = _in(0x589f80b3, 0x25cc82c5, _fv(x), _fv(y), _fv(z), _ch(modelHash), _i, _r);
    return [retval, outDoorHash_out];
}
exports.doorSystemFindExistingDoor = doorSystemFindExistingDoor;
function doorSystemGetAutomaticDistance(doorHash) {
    return _in(0xe851471a, 0xefc3374f, _ch(doorHash), _r, _rf);
}
exports.doorSystemGetAutomaticDistance = doorSystemGetAutomaticDistance;
function doorSystemGetDoorPendingState(doorHash) {
    return _in(0x4bc28544, 0x78f3a749, _ch(doorHash), _r, _ri);
}
exports.doorSystemGetDoorPendingState = doorSystemGetDoorPendingState;
function doorSystemGetDoorState(doorHash) {
    return _in(0x160aa1b3, 0x2f6139b8, _ch(doorHash), _r, _ri);
}
exports.doorSystemGetDoorState = doorSystemGetDoorState;
function doorSystemGetIsPhysicsLoaded(p0) {
    return _in(0xdf97cdd4, 0xfc08fd34, p0, _r);
}
exports.doorSystemGetIsPhysicsLoaded = doorSystemGetIsPhysicsLoaded;
function doorSystemGetOpenRatio(doorHash) {
    return _in(0x65499865, 0xfca6e5ec, _ch(doorHash), _r, _rf);
}
exports.doorSystemGetOpenRatio = doorSystemGetOpenRatio;
/**
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param distance
 * @param requestDoor
 * @param forceUpdate
 */
function doorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate) {
    return _in(0x9ba001cb, 0x45cbf627, _ch(doorHash), _fv(distance), requestDoor, forceUpdate);
}
exports.doorSystemSetAutomaticDistance = doorSystemSetAutomaticDistance;
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param rate
 * @param requestDoor
 * @param forceUpdate
 */
function doorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate) {
    return _in(0x03c27e13, 0xb42a0e82, _ch(doorHash), _fv(rate), requestDoor, forceUpdate);
}
exports.doorSystemSetAutomaticRate = doorSystemSetAutomaticRate;
/**
 * Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
 * @param doorHash
 * @param p1
 */
function doorSystemSetDoorOpenForRaces(doorHash, p1) {
    return _in(0xa85a2158, 0x2451e951, _ch(doorHash), p1);
}
exports.doorSystemSetDoorOpenForRaces = doorSystemSetDoorOpenForRaces;
/**
 * Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
 * `requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
 * `forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
 * Door lock states:
 * 0: UNLOCKED
 * 1: LOCKED
 * 2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
 * 3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
 * 4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
 * 5: DOORSTATE_FORCE_OPEN_THIS_FRAME
 * 6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
 * @param doorHash
 * @param state
 * @param requestDoor
 * @param forceUpdate
 */
function doorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate) {
    return _in(0x6bab9442, 0x830c7f53, _ch(doorHash), state, requestDoor, forceUpdate);
}
exports.doorSystemSetDoorState = doorSystemSetDoorState;
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * @param doorHash
 * @param toggle
 */
function doorSystemSetHoldOpen(doorHash, toggle) {
    return _in(0xd9b71952, 0xf78a2640, _ch(doorHash), toggle);
}
exports.doorSystemSetHoldOpen = doorSystemSetHoldOpen;
/**
 * Sets the ajar angle of a door.
 * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param ajar
 * @param requestDoor
 * @param forceUpdate
 */
function doorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate) {
    return _in(0xb6e6fba9, 0x5c7324ac, _ch(doorHash), _fv(ajar), requestDoor, forceUpdate);
}
exports.doorSystemSetOpenRatio = doorSystemSetOpenRatio;
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param removed
 * @param requestDoor
 * @param forceUpdate
 */
function doorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate) {
    return _in(0xc485e07e, 0x4f0b7958, _ch(doorHash), removed, requestDoor, forceUpdate);
}
exports.doorSystemSetSpringRemoved = doorSystemSetSpringRemoved;
function drawBinkMovie(binkMovie, p1, p2, p3, p4, p5, r, g, b, a) {
    return _in(0x7118e83e, 0xeb9f7238, binkMovie, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), r, g, b, a);
}
exports.drawBinkMovie = drawBinkMovie;
/**
 * x,y,z = start pos
 * x2,y2,z2 = end pos
 *
 * Draw's a 3D Box between the two x,y,z coords.
 * --------------
 * Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
 * End Sub
 *
 * [C#]
 * public void DrawBox(Vector3 a, Vector3 b, Color col)
 * {
 * Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
 * }
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
    return _in(0xd3a9971c, 0xadac7252, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), red, green, blue, alpha);
}
exports.drawBox = drawBox;
function drawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, alpha) {
    return _in(0x083a2ca4, 0xf2e573bd, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r, g, b, alpha);
}
exports.drawDebugBox = drawDebugBox;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x
 * @param y
 * @param z
 * @param size
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawDebugCross(x, y, z, size, red, green, blue, alpha) {
    return _in(0x73b11896, 0x23049839, _fv(x), _fv(y), _fv(z), _fv(size), red, green, blue, alpha);
}
exports.drawDebugCross = drawDebugCross;
function drawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, alpha) {
    return _in(0x7fdfade6, 0x76aa3cb0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r, g, b, alpha);
}
exports.drawDebugLine = drawDebugLine;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param r1
 * @param g1
 * @param b1
 * @param r2
 * @param g2
 * @param b2
 * @param alpha1
 * @param alpha2
 */
function drawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2) {
    return _in(0xd8b9a8ac, 0x5608ff94, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r1, g1, b1, r2, g2, b2, alpha1, alpha2);
}
exports.drawDebugLineWithTwoColours = drawDebugLineWithTwoColours;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawDebugSphere(x, y, z, radius, red, green, blue, alpha) {
    return _in(0xaad68e1a, 0xb39da632, _fv(x), _fv(y), _fv(z), _fv(radius), red, green, blue, alpha);
}
exports.drawDebugSphere = drawDebugSphere;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawDebugText(text, x, y, z, red, green, blue, alpha) {
    return _in(0x3903e216, 0x620488e8, _ts(text), _fv(x), _fv(y), _fv(z), red, green, blue, alpha);
}
exports.drawDebugText = drawDebugText;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawDebugText2d(text, x, y, z, red, green, blue, alpha) {
    return _in(0xa3bb2e95, 0x55c05a8f, _ts(text), _fv(x), _fv(y), _fv(z), red, green, blue, alpha);
}
exports.drawDebugText2d = drawDebugText2d;
/**
 * This native does absolutely nothing, just a nullsub
 */
function drawFrontendBackgroundThisFrame() {
    return _in(0x211c4ef4, 0x50086857);
}
exports.drawFrontendBackgroundThisFrame = drawFrontendBackgroundThisFrame;
function drawHudOverFadeThisFrame() {
    return _in(0xbf4f34a8, 0x5ca2970c);
}
exports.drawHudOverFadeThisFrame = drawHudOverFadeThisFrame;
function drawLightWithRange(posX, posY, posZ, colorR, colorG, colorB, range, intensity) {
    return _in(0xf2a1b277, 0x1a01dbd4, _fv(posX), _fv(posY), _fv(posZ), colorR, colorG, colorB, _fv(range), _fv(intensity));
}
exports.drawLightWithRange = drawLightWithRange;
function drawLightWithRangeex(x, y, z, r, g, b, range, intensity, shadow) {
    return _in(0xf49e9a97, 0x16a04595, _fv(x), _fv(y), _fv(z), r, g, b, _fv(range), _fv(intensity), _fv(shadow));
}
exports.drawLightWithRangeex = drawLightWithRangeex;
/**
 * Draws a depth-tested line from one point to another.
 * ----------------
 * x1, y1, z1 : Coordinates for the first point
 * x2, y2, z2 : Coordinates for the second point
 * r, g, b, alpha : Color with RGBA-Values
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
 * End Sub
 *
 * [C#]
 * public void DrawLine(Vector3 from, Vector3 to, Color col)
 * {
 * Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
 * }
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
    return _in(0x6b725607, 0x4ae34680, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), red, green, blue, alpha);
}
exports.drawLine = drawLine;
function drawLowQualityPhotoToPhone(p0, p1) {
    return _in(0x1072f115, 0xdab0717e, p0, p1);
}
exports.drawLowQualityPhotoToPhone = drawLowQualityPhotoToPhone;
/**
 * enum MarkerTypes
 * {
 * MarkerTypeUpsideDownCone = 0,
 * MarkerTypeVerticalCylinder = 1,
 * MarkerTypeThickChevronUp = 2,
 * MarkerTypeThinChevronUp = 3,
 * MarkerTypeCheckeredFlagRect = 4,
 * MarkerTypeCheckeredFlagCircle = 5,
 * MarkerTypeVerticleCircle = 6,
 * MarkerTypePlaneModel = 7,
 * MarkerTypeLostMCDark = 8,
 * MarkerTypeLostMCLight = 9,
 * MarkerTypeNumber0 = 10,
 * MarkerTypeNumber1 = 11,
 * MarkerTypeNumber2 = 12,
 * MarkerTypeNumber3 = 13,
 * MarkerTypeNumber4 = 14,
 * MarkerTypeNumber5 = 15,
 * MarkerTypeNumber6 = 16,
 * MarkerTypeNumber7 = 17,
 * MarkerTypeNumber8 = 18,
 * MarkerTypeNumber9 = 19,
 * MarkerTypeChevronUpx1 = 20,
 * MarkerTypeChevronUpx2 = 21,
 * MarkerTypeChevronUpx3 = 22,
 * MarkerTypeHorizontalCircleFat = 23,
 * MarkerTypeReplayIcon = 24,
 * MarkerTypeHorizontalCircleSkinny = 25,
 * MarkerTypeHorizontalCircleSkinny_Arrow = 26,
 * MarkerTypeHorizontalSplitArrowCircle = 27,
 * MarkerTypeDebugSphere = 28,
 * MarkerTypeDallorSign = 29,
 * MarkerTypeHorizontalBars = 30,
 * MarkerTypeWolfHead = 31
 * };
 *
 * dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
 *
 * faceCamera - Rotates only the y-axis (the heading) towards the camera
 *
 * p19 - no effect, default value in script is 2
 *
 * rotate - Rotates only on the y-axis (the heading)
 *
 * textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
 *
 * textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
 *
 * drawOnEnts - Draws the marker onto any entities that intersect it
 *
 * basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
 *
 * bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);
 *
 * his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
 *
 * GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);
 *
 *
 * @param type
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param bobUpAndDown
 * @param faceCamera
 * @param p19
 * @param rotate
 * @param textureDict
 * @param textureName
 * @param drawOnEnts
 */
function drawMarker(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts) {
    return _in(0x28477ec2, 0x3d892089, type, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts);
}
exports.drawMarker = drawMarker;
function drawMarkerEx(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25) {
    return _in(0xe82728f0, 0xde75d13a, type, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts, p24, p25);
}
exports.drawMarkerEx = drawMarkerEx;
/**
 * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
 * Example https://imgur.com/nCbtS4H
 *
 * alpha - The alpha for the sphere. Goes from 0.0 to 1.0.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawMarkerSphere(x, y, z, radius, red, green, blue, alpha) {
    return _in(0x799017f9, 0xe3b10112, _fv(x), _fv(y), _fv(z), _fv(radius), red, green, blue, _fv(alpha));
}
exports.drawMarkerSphere = drawMarkerSphere;
/**
 * x/y/z - Location of a vertex (in world coords), presumably.
 * ----------------
 * x1, y1, z1     : Coordinates for the first point
 * x2, y2, z2     : Coordinates for the second point
 * x3, y3, z3     : Coordinates for the third point
 * r, g, b, alpha : Color with RGBA-Values
 *
 * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
 * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
 * End Sub
 *
 * [C#]
 * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
 * {
 * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
 * }
 * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) {
    return _in(0xac267160, 0x48436851, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), red, green, blue, alpha);
}
exports.drawPoly = drawPoly;
/**
 * Draws a rectangle on the screen.
 *
 * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
 *
 * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
 *
 * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
 *
 * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
 *
 * -R: Red part of the color. (0-255)
 *
 * -G: Green part of the color. (0-255)
 *
 * -B: Blue part of the color. (0-255)
 *
 * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
 *
 * The total number of rectangles to be drawn in one frame is apparently limited to 399.
 *
 * @param x
 * @param y
 * @param width
 * @param height
 * @param r
 * @param g
 * @param b
 * @param a
 * @param p8
 */
function drawRect(x, y, width, height, r, g, b, a, p8) {
    return _in(0x3a618a21, 0x7e5154f0, _fv(x), _fv(y), _fv(width), _fv(height), r, g, b, a, p8);
}
exports.drawRect = drawRect;
function drawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, p9) {
    return _in(0x54972ada, 0xf0294a93, scaleformHandle, _fv(x), _fv(y), _fv(width), _fv(height), red, green, blue, alpha, p9);
}
exports.drawScaleformMovie = drawScaleformMovie;
function drawScaleformMovie3d(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder) {
    return _in(0x87d51d72, 0x255d4e78, scaleform, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(p7), _fv(p8), _fv(p9), _fv(scaleX), _fv(scaleY), _fv(scaleZ), rotationOrder);
}
exports.drawScaleformMovie3d = drawScaleformMovie3d;
function drawScaleformMovie3dSolid(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder) {
    return _in(0x1ce592fd, 0xc749d6f5, scaleform, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(p7), _fv(p8), _fv(p9), _fv(scaleX), _fv(scaleY), _fv(scaleZ), rotationOrder);
}
exports.drawScaleformMovie3dSolid = drawScaleformMovie3dSolid;
/**
 * unk is not used so no need
 * @param scaleform
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p5
 */
function drawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, p5) {
    return _in(0x0df60692, 0x9c105be1, scaleform, red, green, blue, alpha, p5);
}
exports.drawScaleformMovieFullscreen = drawScaleformMovieFullscreen;
function drawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha) {
    return _in(0xcf537fde, 0x4fbd4ce5, scaleform1, scaleform2, red, green, blue, alpha);
}
exports.drawScaleformMovieFullscreenMasked = drawScaleformMovieFullscreenMasked;
function drawShadowedSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId) {
    return _in(0x5bca583a, 0x583194db, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), colorR, colorG, colorB, _fv(distance), _fv(brightness), _fv(roundness), _fv(radius), _fv(falloff), shadowId);
}
exports.drawShadowedSpotLight = drawShadowedSpotLight;
/**
 * Parameters:
 * * pos - coordinate where the spotlight is located
 * * dir - the direction vector the spotlight should aim at from its current position
 * * r,g,b - color of the spotlight
 * * distance - the maximum distance the light can reach
 * * brightness - the brightness of the light
 * * roundness - "smoothness" of the circle edge
 * * radius - the radius size of the spotlight
 * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
 *
 * Example in C# (spotlight aims at the closest vehicle):
 * Vector3 myPos = Game.Player.Character.Position;
 * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
 * Vector3 destinationCoords = nearest.Position;
 * Vector3 dirVector = destinationCoords - myPos;
 * dirVector.Normalize();
 * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param colorR
 * @param colorG
 * @param colorB
 * @param distance
 * @param brightness
 * @param hardness
 * @param radius
 * @param falloff
 */
function drawSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff) {
    return _in(0xd0f64b26, 0x5c8c8b33, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), colorR, colorG, colorB, _fv(distance), _fv(brightness), _fv(hardness), _fv(radius), _fv(falloff));
}
exports.drawSpotLight = drawSpotLight;
/**
 * Draws a 2D sprite on the screen.
 *
 * Parameters:
 * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
 *
 * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
 *
 * screenX/Y - Screen offset (0.5 = center)
 * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
 *
 * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
 *
 * red,green,blue - Sprite color (default = 255/255/255)
 *
 * alpha - opacity level
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 * @param p12
 */
function drawSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12) {
    return _in(0xe7ffae5e, 0xbf23d890, _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha, p11, p12);
}
exports.drawSprite = drawSprite;
/**
 * Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
 * x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
 * y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
 * width 0.0 - 1.0 is the reasonable amount generally
 * height 0.0 - 1.0 is the reasonable amount generally
 * p6 almost always 0.0
 * p11 seems to be unknown but almost always 0 int
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param p6
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 * @param p12
 */
function drawSpriteArx(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12) {
    return _in(0x2d3b147a, 0xfad49de0, _ts(textureDict), _ts(textureName), _fv(x), _fv(y), _fv(width), _fv(height), _fv(p6), red, green, blue, alpha, p11, p12);
}
exports.drawSpriteArx = drawSpriteArx;
/**
 * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
 *
 * u1, v1 - texture coordinates for the top-left corner
 * u2, v2 - texture coordinates for the bottom-right corner
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param u1
 * @param v1
 * @param u2
 * @param v2
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p15
 */
function drawSpriteArxWithUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15) {
    return _in(0x95812f9b, 0x26074726, _ts(textureDict), _ts(textureName), _fv(x), _fv(y), _fv(width), _fv(height), _fv(u1), _fv(v1), _fv(u2), _fv(v2), _fv(heading), red, green, blue, alpha, p15);
}
exports.drawSpriteArxWithUv = drawSpriteArxWithUv;
/**
 * Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
 * These seem to be the only dicts ever requested by this native:
 *
 * prop_screen_biker_laptop
 * Prop_Screen_GR_Disruption
 * Prop_Screen_TaleOfUs
 * prop_screen_nightclub
 * Prop_Screen_IE_Adhawk
 * prop_screen_sm_free_trade_shipping
 * prop_screen_hacker_truck
 * MPDesktop
 * Prop_Screen_Nightclub
 * And a few others
 *
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 */
function drawSpriteNamedRendertarget(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11) {
    return _in(0x2bc54a81, 0x88768488, _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha, p11);
}
exports.drawSpriteNamedRendertarget = drawSpriteNamedRendertarget;
/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 *
 * p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
function drawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
    return _in(0x29280002, 0x282f1928, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), red, green, blue, alpha, _ts(textureDict), _ts(textureName), _fv(u1), _fv(v1), _fv(w1), _fv(u2), _fv(v2), _fv(w2), _fv(u3), _fv(v3), _fv(w3));
}
exports.drawTexturedPoly = drawTexturedPoly;
/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 *
 * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red1
 * @param green1
 * @param blue1
 * @param alpha1
 * @param red2
 * @param green2
 * @param blue2
 * @param alpha2
 * @param red3
 * @param green3
 * @param blue3
 * @param alpha3
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
function drawTexturedPolyWithThreeColours(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
    return _in(0x736d7aa1, 0xb750856b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(red1), _fv(green1), _fv(blue1), alpha1, _fv(red2), _fv(green2), _fv(blue2), alpha2, _fv(red3), _fv(green3), _fv(blue3), alpha3, _ts(textureDict), _ts(textureName), _fv(u1), _fv(v1), _fv(w1), _fv(u2), _fv(v2), _fv(w2), _fv(u3), _fv(v3), _fv(w3));
}
exports.drawTexturedPolyWithThreeColours = drawTexturedPolyWithThreeColours;
/**
 * All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.
 *
 * "act_cinema.ysc", line 1483:
 * HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
 * HUD::SET_TEXT_RENDER_ID(l_AE);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
 * if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
 * } else {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * }
 *
 * "am_mp_property_int.ysc", line 102545:
 * if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
 * if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
 * HUD::SET_TEXT_RENDER_ID(a_2._f1);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * if (GRAPHICS::GET_TV_CHANNEL() == -1) {
 * sub_a8fa5(a_2, 1);
 * } else {
 * sub_a8fa5(a_2, 1);
 * GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
 * }
 * HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
 * }
 * }
 *
 * @param xPos
 * @param yPos
 * @param xScale
 * @param yScale
 * @param rotation
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function drawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) {
    return _in(0xfddc2b4e, 0xd3c69df0, _fv(xPos), _fv(yPos), _fv(xScale), _fv(yScale), _fv(rotation), red, green, blue, alpha);
}
exports.drawTvChannel = drawTvChannel;
function dropAmbientProp(ped) {
    return _in(0xaff4710e, 0x2a0a6c12, ped);
}
exports.dropAmbientProp = dropAmbientProp;
/**
 * Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
 * @param toggle
 */
function enableAlienBloodVfx(toggle) {
    return _in(0x9dce1f0f, 0x78260875, toggle);
}
exports.enableAlienBloodVfx = enableAlienBloodVfx;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function enableAllControlActions(control) {
    return _in(0xa5ffe9b0, 0x5f199de7, control);
}
exports.enableAllControlActions = enableAllControlActions;
/**
 * Creates cartoon effect when Michel smokes the weed
 * @param toggle
 */
function enableClownBloodVfx(toggle) {
    return _in(0xd8214905, 0x79791273, toggle);
}
exports.enableClownBloodVfx = enableClownBloodVfx;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param enableRelatedActions
 */
function enableControlAction(control, action, enableRelatedActions) {
    return _in(0x35122025, 0x5d64c155, control, action, enableRelatedActions);
}
exports.enableControlAction = enableControlAction;
/**
 * https://alloc8or.re/gta5/doc/enums/DispatchType.txt
 * @param dispatchService
 * @param toggle
 */
function enableDispatchService(dispatchService, toggle) {
    return _in(0xdc0f8178, 0x84cdd856, dispatchService, toggle);
}
exports.enableDispatchService = enableDispatchService;
function enableEntityBulletCollision(entity) {
    return _in(0x6ce177d0, 0x14502e8a, entity);
}
exports.enableEntityBulletCollision = enableEntityBulletCollision;
/**
 * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
 *
 * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
 * @param mapObjectHash
 */
function enableExteriorCullModelThisFrame(mapObjectHash) {
    return _in(0xa97f257d, 0x0151a6ab, _ch(mapObjectHash));
}
exports.enableExteriorCullModelThisFrame = enableExteriorCullModelThisFrame;
/**
 * Enables laser sight on any weapon.
 *
 * It doesn't work. Neither on tick nor OnKeyDown
 * @param toggle
 */
function enableLaserSightRendering(toggle) {
    return _in(0xc8b46d77, 0x27d864aa, toggle);
}
exports.enableLaserSightRendering = enableLaserSightRendering;
/**
 * The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
 * @param strength
 */
function enableMoonCycleOverride(strength) {
    return _in(0x2c328af1, 0x7210f009, _fv(strength));
}
exports.enableMoonCycleOverride = enableMoonCycleOverride;
function enableMovieKeyframeWait(toggle) {
    return _in(0x74c18003, 0x0fde4b69, toggle);
}
exports.enableMovieKeyframeWait = enableMovieKeyframeWait;
function enableMovieSubtitles(toggle) {
    return _in(0x873fa65c, 0x778ad970, toggle);
}
exports.enableMovieSubtitles = enableMovieSubtitles;
function enableMpLight(ped, toggle) {
    return _in(0xee2476b9, 0xee4a094f, ped, toggle);
}
exports.enableMpLight = enableMpLight;
function enableProcobjCreation() {
    return _in(0x5debd9c4, 0xdc995692);
}
exports.enableProcobjCreation = enableProcobjCreation;
function enableSavingInGarage(garageHash, toggle) {
    return _in(0xf2e1a713, 0x3dd356a6, _ch(garageHash), toggle);
}
exports.enableSavingInGarage = enableSavingInGarage;
function enableScriptBrainSet(brainSet) {
    return _in(0x67aa4d73, 0xf0cfa86b, brainSet);
}
exports.enableScriptBrainSet = enableScriptBrainSet;
function enableShadowCullModelThisFrame(mapObjectHash) {
    return _in(0x50c37553, 0x7449f369, _ch(mapObjectHash));
}
exports.enableShadowCullModelThisFrame = enableShadowCullModelThisFrame;
function enableSpecialAbility(player, toggle, p2) {
    return _in(0x181ec197, 0xdaefe121, player, toggle, p2);
}
exports.enableSpecialAbility = enableSpecialAbility;
function enableStadiumProbesThisFrame(toggle) {
    return _in(0x7ecdf985, 0x87e92dec, toggle);
}
exports.enableStadiumProbesThisFrame = enableStadiumProbesThisFrame;
/**
 * Works for planes only.
 * @param vehicle
 * @param toggle
 */
function enableStallWarningSounds(vehicle, toggle) {
    return _in(0xc15907d6, 0x67f7cfb2, vehicle, toggle);
}
exports.enableStallWarningSounds = enableStallWarningSounds;
function enableStuntJumpAudio() {
    return _in(0xb81cf134, 0xaeb56ffb);
}
exports.enableStuntJumpAudio = enableStuntJumpAudio;
function enableStuntJumpSet(p0) {
    return _in(0xe369a578, 0x3b866016, p0);
}
exports.enableStuntJumpSet = enableStuntJumpSet;
function enableSwitchPauseBeforeDescent() {
    return _in(0xd4793dff, 0x3af2abcd);
}
exports.enableSwitchPauseBeforeDescent = enableSwitchPauseBeforeDescent;
/**
 * Makes the ped jump around like they're in a tennis match
 * @param ped
 * @param toggle
 * @param p2
 */
function enableTennisMode(ped, toggle, p2) {
    return _in(0x28a04b41, 0x1933f8a6, ped, toggle, p2);
}
exports.enableTennisMode = enableTennisMode;
/**
 * Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
 * @param vehicle
 */
function enableVehicleDynamicAmbientScales(vehicle) {
    return _in(0xf87d9f23, 0x01f7d206, vehicle);
}
exports.enableVehicleDynamicAmbientScales = enableVehicleDynamicAmbientScales;
function enableVehicleExhaustPops(vehicle, toggle) {
    return _in(0x2be4bc73, 0x1d039d5a, vehicle, toggle);
}
exports.enableVehicleExhaustPops = enableVehicleExhaustPops;
function enableVehicleFanbeltDamage(vehicle, toggle) {
    return _in(0x1c073274, 0xe065c6d2, vehicle, toggle);
}
exports.enableVehicleFanbeltDamage = enableVehicleFanbeltDamage;
function endBeingBoss(p0, p1, p2) {
    return _in(0xa3c53804, 0xbdb68ed2, p0, p1, p2);
}
exports.endBeingBoss = endBeingBoss;
function endBeingGoon(p0, p1, p2, p3, p4) {
    return _in(0x6bccf994, 0x8492fd85, p0, p1, p2, p3, p4);
}
exports.endBeingGoon = endBeingGoon;
function endPetrolTrailDecals() {
    return _in(0x0a123435, 0xa26c36cd);
}
exports.endPetrolTrailDecals = endPetrolTrailDecals;
function endReplayStats() {
    return _in(0xa23e821f, 0xbdf8a5f2);
}
exports.endReplayStats = endReplayStats;
/**
 * Pops and calls the Scaleform function on the stack
 */
function endScaleformMovieMethod() {
    return _in(0xc6796a8f, 0xfa375e53);
}
exports.endScaleformMovieMethod = endScaleformMovieMethod;
function endScaleformMovieMethodReturnValue() {
    return _in(0xc50aa39a, 0x577af886, _r, _ri);
}
exports.endScaleformMovieMethodReturnValue = endScaleformMovieMethodReturnValue;
/**
 * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
 */
function endSrl() {
    return _in(0x0a41540e, 0x63c9ee17);
}
exports.endSrl = endSrl;
function endTextCommandAddDirectlyToPreviousBriefs(p0) {
    return _in(0xcfdbdf5a, 0xe59ba0f4, p0);
}
exports.endTextCommandAddDirectlyToPreviousBriefs = endTextCommandAddDirectlyToPreviousBriefs;
/**
 * enum eBusySpinnerType
 * {
 * BUSY_SPINNER_LEFT,
 * BUSY_SPINNER_LEFT_2,
 * BUSY_SPINNER_LEFT_3,
 * BUSY_SPINNER_SAVE,
 * BUSY_SPINNER_RIGHT,
 * };
 * @param busySpinnerType
 */
function endTextCommandBusyspinnerOn(busySpinnerType) {
    return _in(0xbd12f822, 0x8410d9b4, busySpinnerType);
}
exports.endTextCommandBusyspinnerOn = endTextCommandBusyspinnerOn;
function endTextCommandClearPrint() {
    return _in(0xfcc75460, 0xaba29378);
}
exports.endTextCommandClearPrint = endTextCommandClearPrint;
/**
 * shape goes from -1 to 50 (may be more).
 * p0 is always 0.
 *
 * Example:
 * void FloatingHelpText(const char* text)
 * {
 * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
 * }
 *
 * Image:
 * - imgbin.org/images/26209.jpg
 *
 * more inputs/icons:
 * - https://pastebin.com/nqNYWMSB
 *
 * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
 * @param p0
 * @param loop
 * @param beep
 * @param shape
 */
function endTextCommandDisplayHelp(p0, loop, beep, shape) {
    return _in(0x238ffe5c, 0x7b0498a6, p0, loop, beep, shape);
}
exports.endTextCommandDisplayHelp = endTextCommandDisplayHelp;
/**
 * After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
 *
 * Used to be known as _DRAW_TEXT
 * @param x
 * @param y
 * @param p2
 */
function endTextCommandDisplayText(x, y, p2) {
    return _in(0xcd015e5b, 0xb0d96a57, _fv(x), _fv(y), p2);
}
exports.endTextCommandDisplayText = endTextCommandDisplayText;
/**
 * Determines how many lines the text string will use when drawn on screen.
 * Must use 0x521FB041D93DD0E4 for setting up
 * @param x
 * @param y
 */
function endTextCommandGetNumberOfLinesForString(x, y) {
    return _in(0x9040dfb0, 0x9be75706, _fv(x), _fv(y), _r, _ri);
}
exports.endTextCommandGetNumberOfLinesForString = endTextCommandGetNumberOfLinesForString;
function endTextCommandGetScreenWidthOfDisplayText(p0) {
    return _in(0x85f061da, 0x64ed2f67, p0, _r, _rf);
}
exports.endTextCommandGetScreenWidthOfDisplayText = endTextCommandGetScreenWidthOfDisplayText;
function endTextCommandIsMessageDisplayed() {
    return _in(0x8a9ba1ab, 0x3e237613, _r);
}
exports.endTextCommandIsMessageDisplayed = endTextCommandIsMessageDisplayed;
function endTextCommandIsThisHelpMessageBeingDisplayed(p0) {
    return _in(0x10bddbfc, 0x529428dd, p0, _r);
}
exports.endTextCommandIsThisHelpMessageBeingDisplayed = endTextCommandIsThisHelpMessageBeingDisplayed;
function endTextCommandOverrideButtonText(p0) {
    return _in(0xa8691197, 0x9638106f, p0);
}
exports.endTextCommandOverrideButtonText = endTextCommandOverrideButtonText;
/**
 * Draws the subtitle at middle center of the screen.
 *
 * int duration = time in milliseconds to show text on screen before disappearing
 *
 * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
 *
 * Used to be known as _DRAW_SUBTITLE_TIMED
 * @param duration
 * @param drawImmediately
 */
function endTextCommandPrint(duration, drawImmediately) {
    return _in(0x9d77056a, 0x530643f6, duration, drawImmediately);
}
exports.endTextCommandPrint = endTextCommandPrint;
function endTextCommandScaleformString() {
    return _in(0x362e2d3f, 0xe93a9959);
}
exports.endTextCommandScaleformString = endTextCommandScaleformString;
/**
 * Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
 * @param blip
 */
function endTextCommandSetBlipName(blip) {
    return _in(0xbc38b49b, 0xcb83bc9b, blip);
}
exports.endTextCommandSetBlipName = endTextCommandSetBlipName;
/**
 * Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
 * Example:
 *
 * HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");
 * HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
 * @param textureDict
 * @param textureName
 * @param rpBonus
 * @param colorOverlay
 * @param titleLabel
 */
function endTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel) {
    return _in(0xaa295b6f, 0x28bd587d, _ts(textureDict), _ts(textureName), rpBonus, colorOverlay, _ts(titleLabel), _r, _ri);
}
exports.endTextCommandThefeedPostAward = endTextCommandThefeedPostAward;
function endTextCommandThefeedPostCrewRankupWithLiteralFlag(p0, p1, p2, p3, p4) {
    return _in(0x8efccf6e, 0xc66d85e4, _ts(p0), _ts(p1), _ts(p2), p3, p4, _r, _ri);
}
exports.endTextCommandThefeedPostCrewRankupWithLiteralFlag = endTextCommandThefeedPostCrewRankupWithLiteralFlag;
function endTextCommandThefeedPostCrewtag(p0, p1, p3, isLeader, unk0, clanDesc, R, G, B) {
    const [retval, p2_out] = _in(0x97c9e4e7, 0x024a8f2c, p0, p1, _i, p3, isLeader, unk0, clanDesc, R, G, B, _r, _ri);
    return [retval, p2_out];
}
exports.endTextCommandThefeedPostCrewtag = endTextCommandThefeedPostCrewtag;
function endTextCommandThefeedPostCrewtagWithGameName(p0, p1, p3, isLeader, unk0, clanDesc, playerName, R, G, B) {
    const [retval, p2_out] = _in(0x137bc355, 0x89e34e1e, p0, p1, _i, p3, isLeader, unk0, clanDesc, _ts(playerName), R, G, B, _r, _ri);
    return [retval, p2_out];
}
exports.endTextCommandThefeedPostCrewtagWithGameName = endTextCommandThefeedPostCrewtagWithGameName;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames: https://pastebin.com/XdpJVbHz
 *
 *
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 *
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
function endTextCommandThefeedPostMessagetext(txdName, textureName, flash, iconType, sender, subject) {
    return _in(0x1ccd9a37, 0x359072cf, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _r, _ri);
}
exports.endTextCommandThefeedPostMessagetext = endTextCommandThefeedPostMessagetext;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * Needs more research.
 *
 * Only one type of usage in the scripts:
 *
 * HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
function endTextCommandThefeedPostMessagetextSubtitleLabel(txdName, textureName, flash, iconType, sender, subject) {
    return _in(0xc6f580e4, 0xc94926ac, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _r, _ri);
}
exports.endTextCommandThefeedPostMessagetextSubtitleLabel = endTextCommandThefeedPostMessagetextSubtitleLabel;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 *
 * Example, only occurrence in the scripts:
 * v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @param duration
 */
function endTextCommandThefeedPostMessagetextTu(txdName, textureName, flash, iconType, sender, subject, duration) {
    return _in(0x1e661114, 0x9db3db6b, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _fv(duration), _r, _ri);
}
exports.endTextCommandThefeedPostMessagetextTu = endTextCommandThefeedPostMessagetextTu;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames https://pastebin.com/XdpJVbHz
 *
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 *
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @param duration
 * @param clanTag
 */
function endTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash, iconType, sender, subject, duration, clanTag) {
    return _in(0x5cbf7bad, 0xe20db93e, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _fv(duration), _ts(clanTag), _r, _ri);
}
exports.endTextCommandThefeedPostMessagetextWithCrewTag = endTextCommandThefeedPostMessagetextWithCrewTag;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames:  https://pastebin.com/XdpJVbHz
 *
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 *
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
 *
 *
 * int IconNotification(char *text, char *text2, char *Subject)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
 * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
 * }
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType1
 * @param sender
 * @param subject
 * @param duration
 * @param clanTag
 * @param iconType2
 * @param p9
 */
function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9) {
    return _in(0x531b84e7, 0xda981fb6, _ts(txdName), _ts(textureName), flash, iconType1, _ts(sender), _ts(subject), _fv(duration), _ts(clanTag), iconType2, p9, _r, _ri);
}
exports.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon = endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon;
function endTextCommandThefeedPostMpticker(blink, p1) {
    return _in(0xf020c969, 0x15705b3a, blink, p1, _r, _ri);
}
exports.endTextCommandThefeedPostMpticker = endTextCommandThefeedPostMpticker;
/**
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
 *
 * example:
 * HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - https://imgur.com/lGBPCz3
 * @param type
 * @param image
 * @param text
 */
function endTextCommandThefeedPostReplay(type, image, text) {
    return _in(0xd202b92c, 0xbf1d816f, type, image, _ts(text), _r, _ri);
}
exports.endTextCommandThefeedPostReplay = endTextCommandThefeedPostReplay;
/**
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, button accepts "~INPUT_SOMETHING~"
 *
 * example:
 * HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - https://imgur.com/UPy0Ial
 *
 *
 * Examples from the scripts:
 * l_D1[1 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");
 * l_D1[1 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
 *
 * @param type
 * @param button
 * @param text
 */
function endTextCommandThefeedPostReplayInput(type, button, text) {
    return _in(0xdd6cb2cc, 0xe7c2735c, type, _ts(button), _ts(text), _r, _ri);
}
exports.endTextCommandThefeedPostReplayInput = endTextCommandThefeedPostReplayInput;
/**
 * List of picture names: https://pastebin.com/XdpJVbHz
 * Example result: https://i.imgur.com/SdEZ22m.png
 * @param statTitle
 * @param iconEnum
 * @param stepVal
 * @param barValue
 * @param isImportant
 * @param pictureTextureDict
 * @param pictureTextureName
 */
function endTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName) {
    return _in(0x2b7e9a4e, 0xaaa93c89, _ts(statTitle), iconEnum, stepVal, barValue, isImportant, _ts(pictureTextureDict), _ts(pictureTextureName), _r, _ri);
}
exports.endTextCommandThefeedPostStats = endTextCommandThefeedPostStats;
function endTextCommandThefeedPostTicker(blink, p1) {
    return _in(0x2ed7843f, 0x8f801023, blink, p1, _r, _ri);
}
exports.endTextCommandThefeedPostTicker = endTextCommandThefeedPostTicker;
function endTextCommandThefeedPostTickerForced(blink, p1) {
    return _in(0x44fa0397, 0x5424a0ee, blink, p1, _r, _ri);
}
exports.endTextCommandThefeedPostTickerForced = endTextCommandThefeedPostTickerForced;
function endTextCommandThefeedPostTickerWithTokens(blink, p1) {
    return _in(0x378e809b, 0xf61ec840, blink, p1, _r, _ri);
}
exports.endTextCommandThefeedPostTickerWithTokens = endTextCommandThefeedPostTickerWithTokens;
function endTextCommandThefeedPostUnlock(gxtLabel1, p1, gxtLabel2) {
    return _in(0x33ee1274, 0x3ccd6343, _ts(gxtLabel1), p1, _ts(gxtLabel2), _r, _ri);
}
exports.endTextCommandThefeedPostUnlock = endTextCommandThefeedPostUnlock;
function endTextCommandThefeedPostUnlockTu(gxtLabel1, p1, gxtLabel2, p3) {
    return _in(0xc8f3aaf9, 0x3d0600bf, _ts(gxtLabel1), p1, _ts(gxtLabel2), p3, _r, _ri);
}
exports.endTextCommandThefeedPostUnlockTu = endTextCommandThefeedPostUnlockTu;
function endTextCommandThefeedPostUnlockTuWithColor(p0, p1, p2, p3, p4, p5) {
    return _in(0x7ae05890, 0x93a2e088, p0, p1, p2, p3, p4, p5, _r, _ri);
}
exports.endTextCommandThefeedPostUnlockTuWithColor = endTextCommandThefeedPostUnlockTuWithColor;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames: https://pastebin.com/XdpJVbHz
 * HUD colors and their values: https://pastebin.com/d9aHPbXN
 *
 * Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
 * @param txdName1
 * @param textureName1
 * @param count1
 * @param txdName2
 * @param textureName2
 * @param count2
 * @param hudColor1
 * @param hudColor2
 */
function endTextCommandThefeedPostVersusTu(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2) {
    return _in(0xb6871b05, 0x55b02996, _ts(txdName1), _ts(textureName1), count1, _ts(txdName2), _ts(textureName2), count2, hudColor1, hudColor2, _r, _ri);
}
exports.endTextCommandThefeedPostVersusTu = endTextCommandThefeedPostVersusTu;
/**
 * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
 *
 * END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?
 */
function endTextCommandUnparsedScaleformString() {
    return _in(0xae4e8157, 0xd9ecf087);
}
exports.endTextCommandUnparsedScaleformString = endTextCommandUnparsedScaleformString;
/**
 * From fm_deathmatch_creator and fm_race_creator:
 *
 * FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
 * FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
 * @param hash
 */
function executeContentChangesetGroupForAll(hash) {
    return _in(0x6bedf576, 0x9ac2dc07, _ch(hash));
}
exports.executeContentChangesetGroupForAll = executeContentChangesetGroupForAll;
/**
 * Forces the ped to fall back and kills it.
 *
 * It doesn't really explode the ped's head but it kills the ped
 * @param ped
 * @param weaponHash
 */
function explodePedHead(ped, weaponHash) {
    return _in(0x2d05ced3, 0xa38d0f3a, ped, _ch(weaponHash));
}
exports.explodePedHead = explodePedHead;
/**
 * WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
 * @param ped
 * @param weaponHash
 * @param p2
 */
function explodeProjectiles(ped, weaponHash, p2) {
    return _in(0xfc4bd125, 0xde7611e4, ped, _ch(weaponHash), p2);
}
exports.explodeProjectiles = explodeProjectiles;
/**
 * Explodes a selected vehicle.
 *
 * Vehicle vehicle = Vehicle you want to explode.
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 *
 * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 */
function explodeVehicle(vehicle, isAudible, isInvisible) {
    return _in(0xba71116a, 0xdf5b514c, vehicle, isAudible, isInvisible);
}
exports.explodeVehicle = explodeVehicle;
function explodeVehicleInCutscene(vehicle, p1) {
    return _in(0x786a4eb6, 0x7b01bf0b, vehicle, p1);
}
exports.explodeVehicleInCutscene = explodeVehicleInCutscene;
/**
 * Appears only 3 times in the scripts, more specifically in michael1.ysc
 *
 * -
 * This can be used to prevent dying if you are "out of the world"
 * @param x
 * @param y
 * @param z
 */
function extendWorldBoundaryForPlayer(x, y, z) {
    return _in(0x5006d96c, 0x995a5827, _fv(x), _fv(y), _fv(z));
}
exports.extendWorldBoundaryForPlayer = extendWorldBoundaryForPlayer;
function facebookCanPostToFacebook() {
    return _in(0x43865688, 0xae10f0d7, _r);
}
exports.facebookCanPostToFacebook = facebookCanPostToFacebook;
function facebookDidPostSucceed() {
    return _in(0xa75e2b67, 0x33da5142, _r);
}
exports.facebookDidPostSucceed = facebookDidPostSucceed;
function facebookHasPostCompleted() {
    return _in(0x62b9fec9, 0xa11f10ef, _r);
}
exports.facebookHasPostCompleted = facebookHasPostCompleted;
function facebookPostCompletedHeist(heistName, cashEarned, xpEarned) {
    return _in(0x098ab65b, 0x9ed9a9ec, _ts(heistName), cashEarned, xpEarned, _r);
}
exports.facebookPostCompletedHeist = facebookPostCompletedHeist;
function facebookPostCompletedMilestone(milestoneId) {
    return _in(0x0ae1f165, 0x3b554ab9, milestoneId, _r);
}
exports.facebookPostCompletedMilestone = facebookPostCompletedMilestone;
function facebookPostCreateCharacter() {
    return _in(0xdc484731, 0x42545431, _r);
}
exports.facebookPostCreateCharacter = facebookPostCreateCharacter;
/**
 * Fades nearby decals within the range specified
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
function fadeDecalsInRange(x, y, z, p3, p4) {
    return _in(0xd77edadb, 0x0420e6e0, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(p4));
}
exports.fadeDecalsInRange = fadeDecalsInRange;
/**
 * Hardcoded to not work in SP.
 * @param p0
 */
function fadeOutLocalPlayer(p0) {
    return _in(0x416dbd4c, 0xd6ed8dd2, p0);
}
exports.fadeOutLocalPlayer = fadeOutLocalPlayer;
function fadeUpPedLight(p0) {
    return _in(0xc9b18b46, 0x19f48f7b, _fv(p0));
}
exports.fadeUpPedLight = fadeUpPedLight;
function filloutPmPlayerList(p1, p2) {
    const [retval, gamerHandle_out] = _in(0xcbbd7c49, 0x91b64809, _i, p1, p2, _r);
    return [retval, gamerHandle_out];
}
exports.filloutPmPlayerList = filloutPmPlayerList;
function filloutPmPlayerListWithNames(p2, p3) {
    const [retval, p0_out, p1_out] = _in(0x716b6db9, 0xd1886106, _i, _i, p2, p3, _r);
    return [retval, p0_out, p1_out];
}
exports.filloutPmPlayerListWithNames = filloutPmPlayerListWithNames;
function finalizeHeadBlend(ped) {
    return _in(0x4668d804, 0x30d6c299, ped);
}
exports.finalizeHeadBlend = finalizeHeadBlend;
/**
 * In the script "player_scene_t_bbfight.c4":
 * "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4 -- [[16]] ], v_9, &v_A, &v_B))"
 * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
 * -- &l_19F[v_4 -- [[16]] ] (p1) is used in other natives in the script as the "animation" param.
 * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
 * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
 * "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
 * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDictionary
 * @param animName
 * @param p2
 * @param p3
 * @param p4
 */
function findAnimEventPhase(animDictionary, animName, p2) {
    const [retval, p3_out, p4_out] = _in(0x07f1be2b, 0xccaa27a7, _ts(animDictionary), _ts(animName), _ts(p2), _i, _i, _r);
    return [retval, p3_out, p4_out];
}
exports.findAnimEventPhase = findAnimEventPhase;
/**
 * Finds the vehicle that is carrying this entity with a handler frame.
 * The model of the entity must be prop_contr_03b_ld or the function will return 0.
 * @param entity
 */
function findHandlerVehicleContainerIsAttachedTo(entity) {
    return _in(0x375e7fc4, 0x4f21c8ab, entity, _r, _ri);
}
exports.findHandlerVehicleContainerIsAttachedTo = findHandlerVehicleContainerIsAttachedTo;
function findRadioStationIndex(stationNameHash) {
    return _in(0x8d674897, 0x93ff428b, _ch(stationNameHash), _r, _ri);
}
exports.findRadioStationIndex = findRadioStationIndex;
/**
 * Native is significantly more complicated than simply generating a random vector & length.
 * The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible
 * @param ped
 */
function findSpawnCoordinatesForHeli(ped) {
    return _mv(_in(0x8dc96757, 0x97123522, ped, _r, _rv));
}
exports.findSpawnCoordinatesForHeli = findSpawnCoordinatesForHeli;
/**
 * Finds a position ahead of the player by predicting the players next actions.
 * The positions match path finding node positions.
 * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
 * @param posX
 * @param posY
 * @param posZ
 * @param fwdVecX
 * @param fwdVecY
 * @param fwdVecZ
 * @param distance
 * @param spawnPoint
 */
function findSpawnPointInDirection(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, spawnPoint) {
    const [retval, spawnPoint_out] = _in(0x6874e219, 0x0b0c1972, _fv(posX), _fv(posY), _fv(posZ), _fv(fwdVecX), _fv(fwdVecY), _fv(fwdVecZ), _fv(distance), _v, _r);
    return [retval, _mv(spawnPoint_out)];
}
exports.findSpawnPointInDirection = findSpawnPointInDirection;
function fireAirDefenceSphereWeaponAtPosition(zoneId, x, y, z) {
    return _in(0x44f1012b, 0x69313374, zoneId, _fv(x), _fv(y), _fv(z));
}
exports.fireAirDefenceSphereWeaponAtPosition = fireAirDefenceSphereWeaponAtPosition;
function fixObjectFragment(object) {
    return _in(0xf9c16813, 0x47c8bd15, object);
}
exports.fixObjectFragment = fixObjectFragment;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 *
 * Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
 *
 * Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
 * @param vehicle
 * @param windowIndex
 */
function fixVehicleWindow(vehicle, windowIndex) {
    return _in(0x772282eb, 0xeb95e682, vehicle, windowIndex);
}
exports.fixVehicleWindow = fixVehicleWindow;
function flagPlayerContextInTournament(toggle) {
    return _in(0xcef21431, 0x5d276fd1, toggle);
}
exports.flagPlayerContextInTournament = flagPlayerContextInTournament;
function flashAbilityBar(millisecondsToFlash) {
    return _in(0x02cfba0c, 0x9e9275ce, millisecondsToFlash);
}
exports.flashAbilityBar = flashAbilityBar;
/**
 * adds a short flash to the Radar/Minimap
 * Usage: UI.FLASH_MINIMAP_DISPLAY
 */
function flashMinimapDisplay() {
    return _in(0xf2dd778c, 0x22b15bda);
}
exports.flashMinimapDisplay = flashMinimapDisplay;
function flashMinimapDisplayWithColor(hudColorIndex) {
    return _in(0x6b1de27e, 0xe78e6a19, hudColorIndex);
}
exports.flashMinimapDisplayWithColor = flashMinimapDisplayWithColor;
function flashWantedDisplay(p0) {
    return _in(0xa18afb39, 0x081b6a1f, p0);
}
exports.flashWantedDisplay = flashWantedDisplay;
function floor(value) {
    return _in(0xf34ee736, 0xcf047844, _fv(value), _r, _ri);
}
exports.floor = floor;
function forceActivatePhysicsOnUnfixedPickup(pickup, toggle) {
    return _in(0x4c134b4d, 0xf76025d0, pickup, toggle);
}
exports.forceActivatePhysicsOnUnfixedPickup = forceActivatePhysicsOnUnfixedPickup;
function forceActivatingTrackingOnEntity(p0, p1) {
    return _in(0x38c1cb1c, 0xb119a016, p0, p1);
}
exports.forceActivatingTrackingOnEntity = forceActivatingTrackingOnEntity;
function forceAllHeadingValuesToAlign(ped) {
    return _in(0xff287323, 0xb0e2c69a, ped);
}
exports.forceAllHeadingValuesToAlign = forceAllHeadingValuesToAlign;
function forceAllowTimeBasedFadingThisFrame() {
    return _in(0x03f1a106, 0xbda7dd3e);
}
exports.forceAllowTimeBasedFadingThisFrame = forceAllowTimeBasedFadingThisFrame;
function forceBonnetCameraRelativeHeadingAndPitch(p0, p1) {
    return _in(0x28b022a1, 0x7b068a3a, _fv(p0), _fv(p1));
}
exports.forceBonnetCameraRelativeHeadingAndPitch = forceBonnetCameraRelativeHeadingAndPitch;
function forceCamFarClip(cam, p1) {
    return _in(0xaabd6287, 0x3ffb1a33, cam, _fv(p1));
}
exports.forceCamFarClip = forceCamFarClip;
function forceCameraRelativeHeadingAndPitch(roll, pitch, yaw) {
    return _in(0x48608c34, 0x64f58ab4, _fv(roll), _fv(pitch), _fv(yaw));
}
exports.forceCameraRelativeHeadingAndPitch = forceCameraRelativeHeadingAndPitch;
function forceCheckScriptVariables() {
    return _in(0x8e580ab9, 0x02917360);
}
exports.forceCheckScriptVariables = forceCheckScriptVariables;
function forceCinematicRenderingThisUpdate(toggle) {
    return _in(0xa41bcd72, 0x13805aac, toggle);
}
exports.forceCinematicRenderingThisUpdate = forceCinematicRenderingThisUpdate;
/**
 * used with 1,2,8,64,128 in the scripts
 * @param cleanupFlags
 */
function forceCleanup(cleanupFlags) {
    return _in(0xbc8983f3, 0x8f78ed51, cleanupFlags);
}
exports.forceCleanup = forceCleanup;
/**
 * PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
 * @param name
 * @param cleanupFlags
 */
function forceCleanupForAllThreadsWithThisName(name, cleanupFlags) {
    return _in(0x4c68dddd, 0xf0097317, _ts(name), cleanupFlags);
}
exports.forceCleanupForAllThreadsWithThisName = forceCleanupForAllThreadsWithThisName;
function forceCleanupForThreadWithThisId(id, cleanupFlags) {
    return _in(0xf745b376, 0x30df176b, id, cleanupFlags);
}
exports.forceCleanupForThreadWithThisId = forceCleanupForThreadWithThisId;
function forceCloseReportugcMenu() {
    return _in(0xee4c0e6d, 0xbc6f2c6f);
}
exports.forceCloseReportugcMenu = forceCloseReportugcMenu;
function forceCloseTextInputBox() {
    return _in(0x8817605c, 0x2ba76200);
}
exports.forceCloseTextInputBox = forceCloseTextInputBox;
function forceCloudMpStatsDownloadAndOverwriteLocalSave() {
    return _in(0x6f361b88, 0x89a792a3);
}
exports.forceCloudMpStatsDownloadAndOverwriteLocalSave = forceCloudMpStatsDownloadAndOverwriteLocalSave;
/**
 * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
 * @param entity
 */
function forceEntityAiAndAnimationUpdate(entity) {
    return _in(0x40fdedb7, 0x2f8293b2, entity);
}
exports.forceEntityAiAndAnimationUpdate = forceEntityAiAndAnimationUpdate;
function forceExposureReadback(toggle) {
    return _in(0x814af7dc, 0xaacc597b, toggle);
}
exports.forceExposureReadback = forceExposureReadback;
/**
 * Sets the localplayer playerinfo state back to playing (State 0)
 *
 * States are:
 * -1: "Invalid"
 * 0: "Playing"
 * 1: "Died"
 * 2: "Arrested"
 * 3: "Failed Mission"
 * 4: "Left Game"
 * 5: "Respawn"
 * 6: "In MP Cutscene"
 */
function forceGameStatePlaying() {
    return _in(0xc0aa53f8, 0x66b3134d);
}
exports.forceGameStatePlaying = forceGameStatePlaying;
function forceInstantLegIkSetup(ped) {
    return _in(0xed3c76ad, 0xfa6d07c4, ped);
}
exports.forceInstantLegIkSetup = forceInstantLegIkSetup;
/**
 * creates single lightning+thunder at random position
 */
function forceLightningFlash() {
    return _in(0xf6062e08, 0x9251c898);
}
exports.forceLightningFlash = forceLightningFlash;
/**
 * Changes start time of a tracklist (milliseconds)
 * R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)
 * @param radioStation
 * @param trackListName
 * @param milliseconds
 */
function forceMusicTrackList(radioStation, trackListName, milliseconds) {
    return _in(0x4e0af911, 0x4608257c, _ts(radioStation), _ts(trackListName), milliseconds);
}
exports.forceMusicTrackList = forceMusicTrackList;
function forceNextMessageToPreviousBriefsList(p0) {
    return _in(0x57d760d5, 0x5f54e071, p0);
}
exports.forceNextMessageToPreviousBriefsList = forceNextMessageToPreviousBriefsList;
function forceOffWantedStarFlash(toggle) {
    return _in(0xba8d65c1, 0xc65702e5, toggle);
}
exports.forceOffWantedStarFlash = forceOffWantedStarFlash;
function forceParticleFxInVehicleInterior(p0, p1) {
    return _in(0xba0127da, 0x25fd54c9, p0, p1);
}
exports.forceParticleFxInVehicleInterior = forceParticleFxInVehicleInterior;
function forcePedAiAndAnimationUpdate(ped, p1, p2) {
    return _in(0x22084380, 0x12482a1a, ped, p1, p2);
}
exports.forcePedAiAndAnimationUpdate = forcePedAiAndAnimationUpdate;
/**
 * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
 *
 * enum eMotionState // 0x92A659FE
 * {
 * MotionState_None = 0xEE717723,
 * MotionState_Idle = 0x9072A713,
 * MotionState_Walk = 0xD827C3DB,
 * MotionState_Run = 0xFFF7E7A4,
 * MotionState_Sprint = 0xBD8817DB,
 * MotionState_Crouch_Idle = 0x43FB099E,
 * MotionState_Crouch_Walk = 0x08C31A98,
 * MotionState_Crouch_Run = 0x3593CF09,
 * MotionState_DoNothing = 0x0EC17E58,
 * MotionState_AnimatedVelocity = 0x551AAC43,
 * MotionState_InVehicle = 0x94D9D58D,
 * MotionState_Aiming = 0x3F67C6AF,
 * MotionState_Diving_Idle = 0x4848CDED,
 * MotionState_Diving_Swim = 0x916E828C,
 * MotionState_Swimming_TreadWater = 0xD1BF11C7,
 * MotionState_Dead = 0x0DBB071C,
 * MotionState_Stealth_Idle = 0x422D7A25,
 * MotionState_Stealth_Walk = 0x042AB6A2,
 * MotionState_Stealth_Run = 0xFB0B79E1,
 * MotionState_Parachuting = 0xBAC0F10B,
 * MotionState_ActionMode_Idle = 0xDA40A0DC,
 * MotionState_ActionMode_Walk = 0xD2905EA7,
 * MotionState_ActionMode_Run = 0x31BADE14,
 * MotionState_Jetpack = 0x535E6A5E
 * };
 * @param ped
 * @param motionStateHash
 * @param p2
 * @param p3
 * @param p4
 */
function forcePedMotionState(ped, motionStateHash, p2, p3, p4) {
    return _in(0xf28965d0, 0x4f570dca, ped, _ch(motionStateHash), p2, p3, p4, _r);
}
exports.forcePedMotionState = forcePedMotionState;
function forcePedPanicWalla() {
    return _in(0x062d5ead, 0x4da2fa6a);
}
exports.forcePedPanicWalla = forcePedPanicWalla;
function forcePedToOpenParachute(ped) {
    return _in(0x16e42e80, 0x0b472221, ped);
}
exports.forcePedToOpenParachute = forcePedToOpenParachute;
function forcePickupRegenerate(p0) {
    return _in(0x758a5c1b, 0x3b1e1990, p0);
}
exports.forcePickupRegenerate = forcePickupRegenerate;
function forcePickupRotateFaceUp() {
    return _in(0x394cd08e, 0x31313c28);
}
exports.forcePickupRotateFaceUp = forcePickupRotateFaceUp;
/**
 * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
 * @param vehicle
 * @param p1
 */
function forcePlaybackRecordedVehicleUpdate(vehicle, p1) {
    return _in(0x1f2e4e06, 0xdea8992b, vehicle, p1);
}
exports.forcePlaybackRecordedVehicleUpdate = forcePlaybackRecordedVehicleUpdate;
function forcePortablePickupLastAccessiblePositionSetting(object) {
    return _in(0x5ce2e45a, 0x5ce2e45a, object);
}
exports.forcePortablePickupLastAccessiblePositionSetting = forcePortablePickupLastAccessiblePositionSetting;
function forcePostfxBulletImpactsAfterHud(p0) {
    return _in(0x9b079e52, 0x21d984d3, p0);
}
exports.forcePostfxBulletImpactsAfterHud = forcePostfxBulletImpactsAfterHud;
function forceRenderInGameUi(toggle) {
    return _in(0xdc459cfa, 0x0cce245b, toggle);
}
exports.forceRenderInGameUi = forceRenderInGameUi;
function forceRoomForEntity(entity, interior, roomHashKey) {
    return _in(0x52923c47, 0x10dd9907, entity, interior, _ch(roomHashKey));
}
exports.forceRoomForEntity = forceRoomForEntity;
function forceRoomForGameViewport(interiorID, roomHashKey) {
    return _in(0x920d853f, 0x3e17f1da, interiorID, _ch(roomHashKey));
}
exports.forceRoomForGameViewport = forceRoomForGameViewport;
/**
 * Not present in retail version of the game, actual definiton seems to be
 * _LOG_DEBUG_INFO(const char* category, const char* debugText);
 * @param p0
 */
function forceScriptedGfxWhenFrontendActive(p0) {
    return _in(0x2162c446, 0xdfdf38fd, _ts(p0));
}
exports.forceScriptedGfxWhenFrontendActive = forceScriptedGfxWhenFrontendActive;
/**
 * Doesn't actually return anything.
 */
function forceSonarBlipsThisFrame() {
    return _in(0x1121bfa1, 0xa1a522a8, _r);
}
exports.forceSonarBlipsThisFrame = forceSonarBlipsThisFrame;
/**
 * This has been found in use in the decompiled files.
 * @param player
 */
function forceStartHiddenEvasion(player) {
    return _in(0xad73ce5a, 0x09e42d12, player);
}
exports.forceStartHiddenEvasion = forceStartHiddenEvasion;
function forceSubThrottleForTime(vehicle, p1, p2) {
    return _in(0x99cad8e7, 0xafdb60fa, vehicle, _fv(p1), _fv(p2));
}
exports.forceSubThrottleForTime = forceSubThrottleForTime;
function forceSubmarineNeurtalBuoyancy(p0, p1) {
    return _in(0xc67db108, 0xa9ade3be, p0, p1);
}
exports.forceSubmarineNeurtalBuoyancy = forceSubmarineNeurtalBuoyancy;
function forceSubmarineSurfaceMode(vehicle, toggle) {
    return _in(0x33506883, 0x545ac0df, vehicle, toggle);
}
exports.forceSubmarineSurfaceMode = forceSubmarineSurfaceMode;
function forceTightspaceCustomFramingThisUpdate() {
    return _in(0x380b4968, 0xd1e09e55);
}
exports.forceTightspaceCustomFramingThisUpdate = forceTightspaceCustomFramingThisUpdate;
/**
 * This native sets the audio of the specified vehicle to the audioName (p1).
 *
 * Use the audioNameHash found in vehicles.meta
 *
 * Example:
 * _SET_VEHICLE_AUDIO(veh, "ADDER");
 * The selected vehicle will now have the audio of the Adder.
 * @param vehicle
 * @param audioName
 */
function forceUseAudioGameObject(vehicle, audioName) {
    return _in(0x4f0c4139, 0x26060b38, vehicle, _ts(audioName));
}
exports.forceUseAudioGameObject = forceUseAudioGameObject;
function forceVehicleCamStuntSettingsThisUpdate() {
    return _in(0x0aa27680, 0xa0bd43fa);
}
exports.forceVehicleCamStuntSettingsThisUpdate = forceVehicleCamStuntSettingsThisUpdate;
function forceZeroMassInCollisions(ped) {
    return _in(0xd33daa36, 0x272177c4, ped);
}
exports.forceZeroMassInCollisions = forceZeroMassInCollisions;
function freeMemoryForHighQualityPhoto() {
    return _in(0xd801cc02, 0x177fa3f1);
}
exports.freeMemoryForHighQualityPhoto = freeMemoryForHighQualityPhoto;
function freeMemoryForLowQualityPhoto() {
    return _in(0x6a12d888, 0x81435dca);
}
exports.freeMemoryForLowQualityPhoto = freeMemoryForLowQualityPhoto;
function freeMemoryForMissionCreatorPhoto() {
    return _in(0x0a46af8a, 0x78dc5e0a);
}
exports.freeMemoryForMissionCreatorPhoto = freeMemoryForMissionCreatorPhoto;
function freeMemoryForMissionCreatorPhotoPreview() {
    return _in(0x346ef3ec, 0xaaab149e);
}
exports.freeMemoryForMissionCreatorPhotoPreview = freeMemoryForMissionCreatorPhotoPreview;
/**
 * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
 * @param entity
 * @param toggle
 */
function freezeEntityPosition(entity, toggle) {
    return _in(0x428ca6db, 0xd1094446, entity, toggle);
}
exports.freezeEntityPosition = freezeEntityPosition;
function freezeMicrophone() {
    return _in(0xd57aaae0, 0xe2214d11);
}
exports.freezeMicrophone = freezeMicrophone;
function freezeRadioStation(radioStation) {
    return _in(0x344f393b, 0x027e38c3, _ts(radioStation));
}
exports.freezeRadioStation = freezeRadioStation;
/**
 * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
 *
 * distToNxJunction seems to be the distance in metres * 10.0f
 *
 * direction:
 * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
 * 1 = Route is being calculated or the player is going in the wrong direction
 * 2 = Please Proceed the Highlighted Route
 * 3 = In (distToNxJunction) Turn Left
 * 4 = In (distToNxJunction) Turn Right
 * 5 = In (distToNxJunction) Keep Straight
 * 6 = In (distToNxJunction) Turn Sharply To The Left
 * 7 = In (distToNxJunction) Turn Sharply To The Right
 * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
 *
 * return value set to 0 always
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param direction
 * @param p5
 * @param distToNxJunction
 */
function generateDirectionsToCoord(x, y, z, p3) {
    const [retval, direction_out, p5_out, distToNxJunction_out] = _in(0xf90125f1, 0xf79ecdf8, _fv(x), _fv(y), _fv(z), p3, _i, _f, _f, _r, _ri);
    return [retval, direction_out, p5_out, distToNxJunction_out];
}
exports.generateDirectionsToCoord = generateDirectionsToCoord;
function generateVehicleCreationPosFromPaths(p1, p3, p4, p5, p6, p7, p8) {
    const [retval, outVec_out, outVec1_out] = _in(0xa4822f1c, 0xf23f4810, _v, p1, _v, p3, p4, p5, p6, p7, p8, _r);
    return [retval, _mv(outVec_out), _mv(outVec1_out)];
}
exports.generateVehicleCreationPosFromPaths = generateVehicleCreationPosFromPaths;
/**
 * For Steam.
 * Always returns 0 in retail version of the game.
 * @param achievementId
 */
function getAchievementProgress(achievementId) {
    return _in(0x1c186837, 0xd0619335, achievementId, _r, _ri);
}
exports.getAchievementProgress = getAchievementProgress;
/**
 * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * @param vehicle
 */
function getActiveVehicleMissionType(vehicle) {
    return _in(0x534aeba6, 0xe5ed4cab, vehicle, _r, _ri);
}
exports.getActiveVehicleMissionType = getActiveVehicleMissionType;
/**
 * Returns current screen resolution.
 * @param x
 * @param y
 */
function getActualScreenResolution() {
    const [x_out, y_out] = _in(0x873c9f31, 0x04101dd3, _i, _i);
    return [x_out, y_out];
}
exports.getActualScreenResolution = getActualScreenResolution;
function getAiPedPedBlipIndex(ped) {
    return _in(0x7cd93401, 0x0e115c2c, ped, _r, _ri);
}
exports.getAiPedPedBlipIndex = getAiPedPedBlipIndex;
/**
 * Returns the current AI BLIP for the specified ped
 * @param ped
 */
function getAiPedVehicleBlipIndex(ped) {
    return _in(0x56176892, 0x826a4fe8, ped, _r, _ri);
}
exports.getAiPedVehicleBlipIndex = getAiPedVehicleBlipIndex;
function getAllVehicles(vehsStruct) {
    const [retval, vehsStruct_out] = _in(0x9b8e1bf0, 0x4b51f2e8, _ii(vehsStruct), _r, _ri);
    return [retval, vehsStruct_out];
}
exports.getAllVehicles = getAllVehicles;
function getAllocatedStackSize() {
    return _in(0x8b3ca62b, 0x1ef19b62, _r, _ri);
}
exports.getAllocatedStackSize = getAllocatedStackSize;
/**
 * Returns profile setting 17.
 */
function getAllowMovementWhileZoomed() {
    return _in(0xfc859e23, 0x74407556, _r);
}
exports.getAllowMovementWhileZoomed = getAllowMovementWhileZoomed;
function getAmbientVoiceNameHash(ped) {
    return _in(0x5e203da2, 0xba15d436, ped, _r, _ri);
}
exports.getAmbientVoiceNameHash = getAmbientVoiceNameHash;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
function getAmmoInClip(ped, weaponHash, ammo) {
    const [retval, ammo_out] = _in(0x2e120224, 0x8937775c, ped, _ch(weaponHash), _ii(ammo), _r);
    return [retval, ammo_out];
}
exports.getAmmoInClip = getAmmoInClip;
/**
 * WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
 *
 * From decompiled scripts
 * Returns total ammo in weapon
 *
 * GTALua Example :
 * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponhash
 */
function getAmmoInPedWeapon(ped, weaponhash) {
    return _in(0x015a5221, 0x36d7f951, ped, _ch(weaponhash), _r, _ri);
}
exports.getAmmoInPedWeapon = getAmmoInPedWeapon;
function getAngleBetween2dVectors(x1, y1, x2, y2) {
    return _in(0x186fc4be, 0x848e1c92, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf);
}
exports.getAngleBetween2dVectors = getAngleBetween2dVectors;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 */
function getAnimDuration(animDict, animName) {
    return _in(0xfeddf04d, 0x62b8d790, _ts(animDict), _ts(animName), _r, _rf);
}
exports.getAnimDuration = getAnimDuration;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
function getAnimInitialOffsetPosition(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) {
    return _mv(_in(0xbe22b26d, 0xd764c040, _ts(animDict), _ts(animName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv));
}
exports.getAnimInitialOffsetPosition = getAnimInitialOffsetPosition;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
function getAnimInitialOffsetRotation(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) {
    return _mv(_in(0x4b805e60, 0x46ee9e47, _ts(animDict), _ts(animName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv));
}
exports.getAnimInitialOffsetRotation = getAnimInitialOffsetRotation;
/**
 * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
function getApproxFloorForArea(x1, y1, x2, y2) {
    return _in(0x3599d741, 0xc9ac6310, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf);
}
exports.getApproxFloorForArea = getApproxFloorForArea;
/**
 * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
 * @param x
 * @param y
 */
function getApproxFloorForPoint(x, y) {
    return _in(0x336511a3, 0x4f2e5185, _fv(x), _fv(y), _r, _rf);
}
exports.getApproxFloorForPoint = getApproxFloorForPoint;
/**
 * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
function getApproxHeightForArea(x1, y1, x2, y2) {
    return _in(0x8abe8608, 0x576d9ce3, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf);
}
exports.getApproxHeightForArea = getApproxHeightForArea;
/**
 * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
 * @param x
 * @param y
 */
function getApproxHeightForPoint(x, y) {
    return _in(0x29c24bfb, 0xed8ab8fb, _fv(x), _fv(y), _r, _rf);
}
exports.getApproxHeightForPoint = getApproxHeightForPoint;
/**
 * Returns true when the bomb bay doors of this plane are open. False if they're closed.
 * @param aircraft
 */
function getAreBombBayDoorsOpen(aircraft) {
    return _in(0xd0917a42, 0x3314bba8, aircraft, _r);
}
exports.getAreBombBayDoorsOpen = getAreBombBayDoorsOpen;
/**
 * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
 *
 * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
 */
function getAreCameraControlsDisabled() {
    return _in(0x7c814d2f, 0xb49f40c0, _r);
}
exports.getAreCameraControlsDisabled = getAreCameraControlsDisabled;
function getAspectRatio(b) {
    return _in(0xf1307ef6, 0x24a80d87, b, _r, _rf);
}
exports.getAspectRatio = getAspectRatio;
/**
 * Gets the position of the cargobob hook, in world coords.
 * @param cargobob
 */
function getAttachedPickUpHookPosition(cargobob) {
    return _mv(_in(0xcbdb9b92, 0x3cacc92d, cargobob, _r, _rv));
}
exports.getAttachedPickUpHookPosition = getAttachedPickUpHookPosition;
function getAudibleMusicTrackTextId() {
    return _in(0x50b196fc, 0x9ed6545b, _r, _ri);
}
exports.getAudibleMusicTrackTextId = getAudibleMusicTrackTextId;
function getBaseElementLocationFromMetadataBlock(p2, p3) {
    const [retval, p0_out, p1_out] = _in(0xb335f761, 0x606db47c, _i, _i, p2, p3, _r);
    return [retval, p0_out, p1_out];
}
exports.getBaseElementLocationFromMetadataBlock = getBaseElementLocationFromMetadataBlock;
/**
 * Returns value of the '-benchmarkIterations' command line option.
 */
function getBenchmarkIterations() {
    return _in(0x4750fc27, 0x570311ec, _r, _ri);
}
exports.getBenchmarkIterations = getBenchmarkIterations;
/**
 * Returns value of the '-benchmarkPass' command line option.
 */
function getBenchmarkPass() {
    return _in(0x1b2366c3, 0xf2a5c8df, _r, _ri);
}
exports.getBenchmarkPass = getBenchmarkPass;
/**
 * p1 is always 0 in the scripts.
 * @param ped
 * @param p1
 */
function getBestPedWeapon(ped, p1) {
    return _in(0x8483e98e, 0x8b888ae2, ped, p1, _r, _ri);
}
exports.getBestPedWeapon = getBestPedWeapon;
/**
 * In percentage: 0.0 - 100.0
 * @param binkMovie
 */
function getBinkMovieTime(binkMovie) {
    return _in(0x8e17ddd6, 0xb9d5bf29, binkMovie, _r, _rf);
}
exports.getBinkMovieTime = getBinkMovieTime;
function getBitsInRange(_var, rangeStart, rangeEnd) {
    return _in(0x53158863, 0xfcc0893a, _var, rangeStart, rangeEnd, _r, _ri);
}
exports.getBitsInRange = getBitsInRange;
function getBlipAlpha(blip) {
    return _in(0x970f608f, 0x0ee6c885, blip, _r, _ri);
}
exports.getBlipAlpha = getBlipAlpha;
function getBlipColour(blip) {
    return _in(0xdf729e8d, 0x20cf7327, blip, _r, _ri);
}
exports.getBlipColour = getBlipColour;
function getBlipCoords(blip) {
    return _mv(_in(0x586afe3f, 0xf72d996e, blip, _r, _rv));
}
exports.getBlipCoords = getBlipCoords;
/**
 * Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
 * @param blip
 */
function getBlipFadeDirection(blip) {
    return _in(0x2c173ae2, 0xbdb9385e, blip, _r, _ri);
}
exports.getBlipFadeDirection = getBlipFadeDirection;
/**
 * Returns the Blip handle of given Entity.
 * @param entity
 */
function getBlipFromEntity(entity) {
    return _in(0xbc8dbdca, 0x2436f7e8, entity, _r, _ri);
}
exports.getBlipFromEntity = getBlipFromEntity;
function getBlipHudColour(blip) {
    return _in(0x729b5f1e, 0xfbc0aaee, blip, _r, _ri);
}
exports.getBlipHudColour = getBlipHudColour;
function getBlipInfoIdCoord(blip) {
    return _mv(_in(0xfa7c7f0a, 0xadf25d09, blip, _r, _rv));
}
exports.getBlipInfoIdCoord = getBlipInfoIdCoord;
function getBlipInfoIdDisplay(blip) {
    return _in(0x1e314167, 0xf701dc3b, blip, _r, _ri);
}
exports.getBlipInfoIdDisplay = getBlipInfoIdDisplay;
function getBlipInfoIdEntityIndex(blip) {
    return _in(0x4ba4e255, 0x3afedc2c, blip, _r, _ri);
}
exports.getBlipInfoIdEntityIndex = getBlipInfoIdEntityIndex;
/**
 * This function is hard-coded to always return 0.
 * @param blip
 */
function getBlipInfoIdPickupIndex(blip) {
    return _in(0x9b6786e4, 0xc03dd382, blip, _r, _ri);
}
exports.getBlipInfoIdPickupIndex = getBlipInfoIdPickupIndex;
/**
 * Returns a value based on what the blip is attached to
 * 1 - Vehicle
 * 2 - Ped
 * 3 - Object
 * 4 - Coord
 * 5 - unk
 * 6 - Pickup
 * 7 - Radius
 * @param blip
 */
function getBlipInfoIdType(blip) {
    return _in(0xbe9b0959, 0xffd0779b, blip, _r, _ri);
}
exports.getBlipInfoIdType = getBlipInfoIdType;
function getBlipRotation(blip) {
    return _in(0x003e92ba, 0x477f9d7f, blip, _r, _ri);
}
exports.getBlipRotation = getBlipRotation;
/**
 * Blips Images + IDs:
 * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
 * @param blip
 */
function getBlipSprite(blip) {
    return _in(0x1fc87746, 0x4a04fc4f, blip, _r, _ri);
}
exports.getBlipSprite = getBlipSprite;
function getBoatBoomPositionRatio(vehicle) {
    return _in(0x6636c535, 0xf6cc2725, vehicle, _r, _rf);
}
exports.getBoatBoomPositionRatio = getBoatBoomPositionRatio;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getBoatVehicleModelAgility(modelHash) {
    return _in(0x5aa3f878, 0xa178c4fc, _ch(modelHash), _r, _rf);
}
exports.getBoatVehicleModelAgility = getBoatVehicleModelAgility;
function getBossGoonUuid(characterSlot, p1, p2) {
    return _in(0x6bc0acd0, 0x673acebe, characterSlot, p1, p2);
}
exports.getBossGoonUuid = getBossGoonUuid;
/**
 * Returns true when both headlights are broken. This does not include extralights.
 * @param vehicle
 */
function getBothVehicleHeadlightsDamaged(vehicle) {
    return _in(0xec69adf9, 0x31aae0c3, vehicle, _r);
}
exports.getBothVehicleHeadlightsDamaged = getBothVehicleHeadlightsDamaged;
/**
 * enum Context
 * {
 * ON_FOOT,
 * IN_VEHICLE,
 * ON_BIKE,
 * IN_BOAT,
 * IN_AIRCRAFT,
 * IN_SUBMARINE,
 * IN_HELI,
 * IN_TURRET
 * };
 */
function getCamActiveViewModeContext() {
    return _in(0x19cafa3c, 0x87f7c2ff, _r, _ri);
}
exports.getCamActiveViewModeContext = getCamActiveViewModeContext;
function getCamAnimCurrentPhase(cam) {
    return _in(0xa10b2db4, 0x9e92a6b0, cam, _r, _rf);
}
exports.getCamAnimCurrentPhase = getCamAnimCurrentPhase;
function getCamCoord(cam) {
    return _mv(_in(0xbac038f7, 0x459ae5ae, cam, _r, _rv));
}
exports.getCamCoord = getCamCoord;
function getCamDofStrength(cam) {
    return _in(0x06d153c0, 0xb99b6128, cam, _r, _rf);
}
exports.getCamDofStrength = getCamDofStrength;
function getCamFarClip(cam) {
    return _in(0xb60a9cfe, 0xb21ca6aa, cam, _r, _rf);
}
exports.getCamFarClip = getCamFarClip;
function getCamFarDof(cam) {
    return _in(0x255f8daf, 0xd540d397, cam, _r, _rf);
}
exports.getCamFarDof = getCamFarDof;
function getCamFov(cam) {
    return _in(0xc3330a45, 0xcccdb26a, cam, _r, _rf);
}
exports.getCamFov = getCamFov;
function getCamNearClip(cam) {
    return _in(0xc520a34d, 0xafbf24b1, cam, _r, _rf);
}
exports.getCamNearClip = getCamNearClip;
function getCamNearDof(cam) {
    return _in(0xc2612d22, 0x3d915a1c, cam, _r, _rf);
}
exports.getCamNearDof = getCamNearDof;
/**
 * The last parameter, as in other "ROT" methods, is usually 2.
 * @param cam
 * @param rotationOrder
 */
function getCamRot(cam, rotationOrder) {
    return _mv(_in(0x7d304c1c, 0x955e3e12, cam, rotationOrder, _r, _rv));
}
exports.getCamRot = getCamRot;
function getCamSplineNodeIndex(cam) {
    return _in(0xb22b17df, 0x858716a6, cam, _r, _ri);
}
exports.getCamSplineNodeIndex = getCamSplineNodeIndex;
/**
 * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
 * @param cam
 */
function getCamSplineNodePhase(cam) {
    return _in(0xd9d0e694, 0xc8282c96, cam, _r, _rf);
}
exports.getCamSplineNodePhase = getCamSplineNodePhase;
/**
 * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
 *
 * (returns 1.0f when no nodes has been added, reached end of non existing spline)
 * @param cam
 */
function getCamSplinePhase(cam) {
    return _in(0xb5349e36, 0xc546509a, cam, _r, _rf);
}
exports.getCamSplinePhase = getCamSplinePhase;
/**
 * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
 * @param context
 */
function getCamViewModeForContext(context) {
    return _in(0xee778f8c, 0x7e1142e2, context, _r, _ri);
}
exports.getCamViewModeForContext = getCamViewModeForContext;
function getCanPedBeGrabbedByScript(ped, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x03ea03af, 0x85a85cb7, ped, p1, p2, p3, p4, p5, p6, p7, p8, _r);
}
exports.getCanPedBeGrabbedByScript = getCanPedBeGrabbedByScript;
/**
 * Used in decompiled scripts in combination with GET_VEHICLE_SIZE
 * p7 is usually 2
 * p8 is usually 1
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p7
 * @param p8
 */
function getCanVehicleBePlacedHere(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8) {
    return _in(0x51f30db6, 0x0626a20e, vehicle, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), p7, p8, _r);
}
exports.getCanVehicleBePlacedHere = getCanVehicleBePlacedHere;
/**
 * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
 * @param vehicle
 */
function getCarHasJump(vehicle) {
    return _in(0x9078c0c5, 0xef8c19e9, vehicle, _r);
}
exports.getCarHasJump = getCarHasJump;
function getCauseOfMostRecentForceCleanup() {
    return _in(0x9a41cf46, 0x74a12272, _r, _ri);
}
exports.getCauseOfMostRecentForceCleanup = getCauseOfMostRecentForceCleanup;
function getCgoffset(entity) {
    return _mv(_in(0x8214a4b5, 0xa7a33612, entity, _r, _rv));
}
exports.getCgoffset = getCgoffset;
/**
 * Returns a substring of a specified length starting at a specified position.
 *
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);
 * @param text
 * @param position
 * @param length
 */
function getCharacterFromAudioConversationFilename(text, position, length) {
    return _in(0x169bd938, 0x2084c8c0, _ts(text), position, length, _r, _s);
}
exports.getCharacterFromAudioConversationFilename = getCharacterFromAudioConversationFilename;
/**
 * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
 *
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);
 * // Overflows are possibly replaced with underscores (needs verification)
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?
 * @param text
 * @param startPosition
 * @param endPosition
 */
function getCharacterFromAudioConversationFilenameBytes(text, startPosition, endPosition) {
    return _in(0xce94aeba, 0x5d82908a, _ts(text), startPosition, endPosition, _r, _s);
}
exports.getCharacterFromAudioConversationFilenameBytes = getCharacterFromAudioConversationFilenameBytes;
/**
 * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
 *
 * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
 *
 * Example:
 * // Condensed example of how Rockstar uses this function
 * strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
 *
 * --
 *
 * "fm_race_creator.ysc", line 85115:
 * // parameters modified for clarity
 * BOOL sub_8e5aa(char *text, int length) {
 * for (i = 0; i <= (length - 2); i += 1) {
 * if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {
 * return FALSE;
 * }
 * }
 * return TRUE;
 * }
 * @param text
 * @param position
 * @param length
 * @param maxLength
 */
function getCharacterFromAudioConversationFilenameWithByteLimit(text, position, length, maxLength) {
    return _in(0xb2798643, 0x312205c5, _ts(text), position, length, maxLength, _r, _s);
}
exports.getCharacterFromAudioConversationFilenameWithByteLimit = getCharacterFromAudioConversationFilenameWithByteLimit;
function getCharacterMenuPedFloatStat(statHash, p2) {
    const [retval, outValue_out] = _in(0x8f08017f, 0x9d7c47bd, _fv(statHash), _f, p2, _r);
    return [retval, outValue_out];
}
exports.getCharacterMenuPedFloatStat = getCharacterMenuPedFloatStat;
function getCharacterMenuPedIntStat(p0, p2) {
    const [retval, p1_out] = _in(0xca6b2f7c, 0xe32ab653, p0, _i, p2, _r);
    return [retval, p1_out];
}
exports.getCharacterMenuPedIntStat = getCharacterMenuPedIntStat;
function getCharacterMenuPedMaskedIntStat(statHash, p2, mask, p4) {
    const [retval, outValue_out] = _in(0x24a49bea, 0xf468dc90, _ch(statHash), _i, p2, mask, p4, _r);
    return [retval, outValue_out];
}
exports.getCharacterMenuPedMaskedIntStat = getCharacterMenuPedMaskedIntStat;
function getCityDensity() {
    return _in(0xd10282b6, 0xe3751ba0, _r, _rf);
}
exports.getCityDensity = getCityDensity;
function getClipSetForScriptedGunTask(gunTaskType) {
    return _in(0x3a8cadc7, 0xd37aacc5, gunTaskType, _r, _s);
}
exports.getClipSetForScriptedGunTask = getClipSetForScriptedGunTask;
function getClockDayOfMonth() {
    return _in(0x3d10bc92, 0xa4db1d35, _r, _ri);
}
exports.getClockDayOfMonth = getClockDayOfMonth;
/**
 * Gets the current day of the week.
 *
 * 0: Sunday
 * 1: Monday
 * 2: Tuesday
 * 3: Wednesday
 * 4: Thursday
 * 5: Friday
 * 6: Saturday
 */
function getClockDayOfWeek() {
    return _in(0xd972e4bd, 0x7aeb235f, _r, _ri);
}
exports.getClockDayOfWeek = getClockDayOfWeek;
/**
 * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
 */
function getClockHours() {
    return _in(0x25223ca6, 0xb4d20b7f, _r, _ri);
}
exports.getClockHours = getClockHours;
/**
 * Gets the current ingame clock minute.
 */
function getClockMinutes() {
    return _in(0x13d2b8ad, 0xd79640f2, _r, _ri);
}
exports.getClockMinutes = getClockMinutes;
function getClockMonth() {
    return _in(0xbbc72712, 0xe80257a1, _r, _ri);
}
exports.getClockMonth = getClockMonth;
/**
 * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
 */
function getClockSeconds() {
    return _in(0x494e97c2, 0xef27c470, _r, _ri);
}
exports.getClockSeconds = getClockSeconds;
function getClockYear() {
    return _in(0x961777e6, 0x4bdaf717, _r, _ri);
}
exports.getClockYear = getClockYear;
function getClosestBlipInfoId(blipSprite) {
    return _in(0xd484bf71, 0x050ca1ee, blipSprite, _r, _ri);
}
exports.getClosestBlipInfoId = getClosestBlipInfoId;
/**
 * Returns TRUE if it found something. FALSE if not.
 * @param outPosition
 * @param x
 * @param y
 * @param z
 */
function getClosestFirePos(x, y, z) {
    const [retval, outPosition_out] = _in(0x352a9f6b, 0xcf90081f, _v, _fv(x), _fv(y), _fv(z), _r);
    return [retval, _mv(outPosition_out)];
}
exports.getClosestFirePos = getClosestFirePos;
/**
 * Get the closest vehicle node to a given position.
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param unknown1
 * @param unknown2
 */
function getClosestMajorVehicleNode(x, y, z, unknown1, unknown2) {
    const [retval, outPosition_out] = _in(0x2eabe3b0, 0x6f58c1be, _fv(x), _fv(y), _fv(z), _v, _fv(unknown1), _fv(unknown2), _r);
    return [retval, _mv(outPosition_out)];
}
exports.getClosestMajorVehicleNode = getClosestMajorVehicleNode;
/**
 * Has 8 params in the latest patches.
 *
 * isMission - if true doesn't return mission objects
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param isMission
 * @param p6
 * @param p7
 */
function getClosestObjectOfType(x, y, z, radius, modelHash, isMission, p6, p7) {
    return _in(0xe143fa22, 0x49364369, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), isMission, p6, p7, _r, _ri);
}
exports.getClosestObjectOfType = getClosestObjectOfType;
/**
 * Gets the closest ped in a radius.
 *
 * Ped Types:
 * Any ped = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 *
 * ------------------
 * P4 P5 P7 P8
 * 1  0  x  x  = return nearest walking Ped
 * 1  x  0  x  = return nearest walking Ped
 * x  1  1  x  = return Ped you are using
 * 0  0  x  x  = no effect
 * 0  x  0  x  = no effect
 *
 * x = can be 1 or 0. Does not have any obvious changes.
 *
 * This function does not return ped who is:
 * 1. Standing still
 * 2. Driving
 * 3. Fleeing
 * 4. Attacking
 *
 * This function only work if the ped is:
 * 1. walking normally.
 * 2. waiting to cross a road.
 *
 * Note: PED::GET_PED_NEARBY_PEDS works for more peds.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param outPed
 * @param p7
 * @param p8
 * @param pedType
 */
function getClosestPed(x, y, z, radius, p4, p5, p7, p8, pedType) {
    const [retval, outPed_out] = _in(0xc33ab876, 0xa77f8164, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, _i, p7, p8, pedType, _r);
    return [retval, outPed_out];
}
exports.getClosestPed = getClosestPed;
/**
 * clamp: sets whether the product should be clamped between the given coordinates
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param clamp
 */
function getClosestPointOnLine(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp) {
    return _mv(_in(0x21c235bc, 0x64831e5a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), clamp, _r, _rv));
}
exports.getClosestPointOnLine = getClosestPointOnLine;
/**
 * p1 seems to be always 1.0f in the scripts
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
function getClosestRoad(x, y, z, p3, p4, p10) {
    const [retval, p5_out, p6_out, p7_out, p8_out, p9_out] = _in(0x132f52bb, 0xa570fe92, _fv(x), _fv(y), _fv(z), _fv(p3), p4, _v, _v, _i, _i, _f, p10, _r);
    return [retval, _mv(p5_out), _mv(p6_out), p7_out, p8_out, p9_out];
}
exports.getClosestRoad = getClosestRoad;
/**
 * Example usage
 * VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)
 *
 * x, y, z: Position to get closest vehicle to.
 * radius: Max radius to get a vehicle.
 * modelHash: Limit to vehicles with this model. 0 for any.
 * flags: The bitwise flags altering the function's behaviour.
 *
 * Does not return police cars or helicopters.
 *
 * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
 *
 * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
 *
 * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
 * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
 *
 * Conversion of found flags to binary: https://pastebin.com/kghNFkRi
 *
 * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
 *
 * It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
 *
 * -------------------------------------------------------------------------
 *
 * Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
function getClosestVehicle(x, y, z, radius, modelHash, flags) {
    return _in(0xf73eb622, 0xc4f1689b, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r, _ri);
}
exports.getClosestVehicle = getClosestVehicle;
/**
 * https://gtaforums.com/topic/843561-pathfind-node-types
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param nodeFlags
 * @param p5
 * @param p6
 */
function getClosestVehicleNode(x, y, z, nodeFlags, p5, p6) {
    const [retval, outPosition_out] = _in(0x240a1869, 0x0ae96513, _fv(x), _fv(y), _fv(z), _v, nodeFlags, _fv(p5), _fv(p6), _r);
    return [retval, _mv(outPosition_out)];
}
exports.getClosestVehicleNode = getClosestVehicleNode;
/**
 * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
 *
 * nodeType: 0 = main roads, 1 = any dry path, 3 = water
 * p6 is always 3.0
 * p7 is always 0
 *
 * gtaforums.com/topic/843561-pathfind-node-types
 *
 * Example of usage, moving vehicle to closest path/road:
 * Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
 * Vector3 closestVehicleNodeCoords;
 * float roadHeading;
 * PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);
 * ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
 * ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
 * VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
 *
 * ------------------------------------------------------------------
 * C# Example (ins1de) : https://pastebin.com/fxtMWAHD
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param outHeading
 * @param nodeType
 * @param p6
 * @param p7
 */
function getClosestVehicleNodeWithHeading(x, y, z, nodeType, p6, p7) {
    const [retval, outPosition_out, outHeading_out] = _in(0xff071fb7, 0x98b803b0, _fv(x), _fv(y), _fv(z), _v, _f, nodeType, _fv(p6), _fv(p7), _r);
    return [retval, _mv(outPosition_out), outHeading_out];
}
exports.getClosestVehicleNodeWithHeading = getClosestVehicleNodeWithHeading;
/**
 * Returns POSIX timestamp, an int representing the cloud time.
 */
function getCloudTimeAsInt() {
    return _in(0x9a73240b, 0x49945c76, _r, _ri);
}
exports.getCloudTimeAsInt = getCloudTimeAsInt;
/**
 * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
 */
function getCloudTimeAsString() {
    return _in(0xf12e6cd0, 0x6c73d69e, _r, _s);
}
exports.getCloudTimeAsString = getCloudTimeAsString;
function getCloudsAlpha() {
    return _in(0x20ac25e7, 0x81ae4a84, _r, _rf);
}
exports.getCloudsAlpha = getCloudsAlpha;
function getCollisionNormalOfLastHitForEntity(entity) {
    return _mv(_in(0xe465d4ab, 0x7ca6ae72, entity, _r, _rv));
}
exports.getCollisionNormalOfLastHitForEntity = getCollisionNormalOfLastHitForEntity;
/**
 * p0: Ped Handle
 * p1: int i | 0 <= i <= 27
 *
 * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
 *
 * <BlindFireChance value="0.1"/>
 * <WeaponShootRateModifier value="1.0"/>
 * <TimeBetweenBurstsInCover value="1.25"/>
 * <BurstDurationInCover value="2.0"/>
 * <TimeBetweenPeeks value="10.0"/>
 * <WeaponAccuracy value="0.18"/>
 * <FightProficiency value="0.8"/>
 * <StrafeWhenMovingChance value="1.0"/>
 * <WalkWhenStrafingChance value="0.0"/>
 * <AttackWindowDistanceForCover value="55.0"/>
 * <TimeToInvalidateInjuredTarget value="9.0"/>
 * <TriggerChargeTime_Near value="4.0"/>
 * <TriggerChargeTime_Far value="10.0"/>
 *
 * -------------Confirmed by editing combatbehavior.meta:
 * p1:
 * 0=BlindFireChance
 * 1=BurstDurationInCover
 * 3=TimeBetweenBurstsInCover
 * 4=TimeBetweenPeeks
 * 5=StrafeWhenMovingChance
 * 8=WalkWhenStrafingChance
 * 11=AttackWindowDistanceForCover
 * 12=TimeToInvalidateInjuredTarget
 * 16=OptimalCoverDistance
 *
 * @param ped
 * @param p1
 */
function getCombatFloat(ped, p1) {
    return _in(0x52dff8a1, 0x0508090a, ped, p1, _r, _rf);
}
exports.getCombatFloat = getCombatFloat;
/**
 * index2 is unused
 * @param index
 * @param index2
 */
function getCommerceItemCat(index, index2) {
    return _in(0x6f44cbf5, 0x6d79fac0, index, index2, _r, _s);
}
exports.getCommerceItemCat = getCommerceItemCat;
function getCommerceItemId(index) {
    return _in(0x66263585, 0x5957c411, index, _r, _s);
}
exports.getCommerceItemId = getCommerceItemId;
function getCommerceItemName(index) {
    return _in(0xb4271092, 0xca7edf48, index, _r, _s);
}
exports.getCommerceItemName = getCommerceItemName;
function getCommerceItemNumCats(index) {
    return _in(0x2a7776c7, 0x09904ab0, index, _r, _ri);
}
exports.getCommerceItemNumCats = getCommerceItemNumCats;
function getCommerceItemTexturename(index) {
    return _in(0x722f5d28, 0xb61c5ea8, index, _r, _s);
}
exports.getCommerceItemTexturename = getCommerceItemTexturename;
function getCommerceProductPrice(index) {
    return _in(0xca94551b, 0x50b4932c, index, _r, _s);
}
exports.getCommerceProductPrice = getCommerceProductPrice;
function getContentIdIndex(contentId) {
    return _in(0xecf04118, 0x6c5a94dc, _ch(contentId), _r, _ri);
}
exports.getContentIdIndex = getContentIdIndex;
/**
 * Returns pointer to an empty string.
 */
function getContentToLoad() {
    return _in(0x24da7d76, 0x67fd7b09, _r, _s);
}
exports.getContentToLoad = getContentToLoad;
/**
 * This function is hard-coded to always return 0.
 */
function getContentToLoadType() {
    return _in(0x8b0c2964, 0xba471961, _r, _ri);
}
exports.getContentToLoadType = getContentToLoadType;
/**
 * control: unused parameter
 * @param control
 * @param controlGroup
 * @param allowXOSwap
 */
function getControlGroupInstructionalButtonsString(control, controlGroup, allowXOSwap) {
    return _in(0x80c2fd58, 0xd720c801, control, controlGroup, allowXOSwap, _r, _s);
}
exports.getControlGroupInstructionalButtonsString = getControlGroupInstructionalButtonsString;
/**
 * Returns time in ms since last input.
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function getControlHowLongAgo(control) {
    return _in(0xd7d22f55, 0x92aed8ba, control, _r, _ri);
}
exports.getControlHowLongAgo = getControlHowLongAgo;
/**
 * allowXOSwap appears to always be true.
 *
 * EG:
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1)  -- [[INPUT_FRONTEND_ACCEPT (e.g. Enter button)]]
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1)  -- [[INPUT_FRONTEND_CANCEL (e.g. ESC button)]]
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1)  -- [[INPUT_CONTEXT (e.g. E button)]]
 *
 * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
 *
 * control: unused parameter
 * @param control
 * @param action
 * @param allowXOSwap
 */
function getControlInstructionalButtonsString(control, action, allowXOSwap) {
    return _in(0x0499d7b0, 0x9fc9b407, control, action, allowXOSwap, _r, _s);
}
exports.getControlInstructionalButtonsString = getControlInstructionalButtonsString;
/**
 * Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function getControlNormal(control, action) {
    return _in(0xec3c9b8d, 0x5327b563, control, action, _r, _rf);
}
exports.getControlNormal = getControlNormal;
/**
 * Seems to return values between -1 and 1 for controls like gas and steering.
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function getControlUnboundNormal(control, action) {
    return _in(0x5b84d09c, 0xec5209c5, control, action, _r, _rf);
}
exports.getControlUnboundNormal = getControlUnboundNormal;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function getControlValue(control, action) {
    return _in(0xd95e79e8, 0x686d2c27, control, action, _r, _ri);
}
exports.getControlValue = getControlValue;
/**
 * 0 -> up
 * 1 -> lowering down
 * 2 -> down
 * 3 -> raising up
 * @param vehicle
 */
function getConvertibleRoofState(vehicle) {
    return _in(0xf8c39792, 0x2fc03f41, vehicle, _r, _ri);
}
exports.getConvertibleRoofState = getConvertibleRoofState;
function getCoordsAndRotationOfClosestObjectOfType(x, y, z, radius, modelHash, rotationOrder) {
    const [retval, outPosition_out, outRotation_out] = _in(0x163f8b58, 0x6bc95f2a, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), _v, _v, rotationOrder, _r);
    return [retval, _mv(outPosition_out), _mv(outRotation_out)];
}
exports.getCoordsAndRotationOfClosestObjectOfType = getCoordsAndRotationOfClosestObjectOfType;
function getCoordsOfProjectileTypeInAngledArea(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, bIsPlayer) {
    const [retval, positionOut_out] = _in(0x3da8c283, 0x46b62ced, _fv(vecAngledAreaPoint1X), _fv(vecAngledAreaPoint1Y), _fv(vecAngledAreaPoint1Z), _fv(vecAngledAreaPoint2X), _fv(vecAngledAreaPoint2Y), _fv(vecAngledAreaPoint2Z), _fv(distanceOfOppositeFace), _ch(weaponType), _v, bIsPlayer, _r);
    return [retval, _mv(positionOut_out)];
}
exports.getCoordsOfProjectileTypeInAngledArea = getCoordsOfProjectileTypeInAngledArea;
function getCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer) {
    const [retval, projectilePos_out] = _in(0x8d7a43ec, 0x6a5fea45, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _ch(projectileHash), _v, ownedByPlayer, _r);
    return [retval, _mv(projectilePos_out)];
}
exports.getCoordsOfProjectileTypeInArea = getCoordsOfProjectileTypeInArea;
function getCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, p4) {
    const [retval, outCoords_out] = _in(0xdfb4138e, 0xefed7b81, ped, _ch(weaponHash), _fv(distance), _v, p4, _r);
    return [retval, _mv(outCoords_out)];
}
exports.getCoordsOfProjectileTypeWithinDistance = getCoordsOfProjectileTypeWithinDistance;
function getCurrWeatherState() {
    const [weatherType1_out, weatherType2_out, percentWeather2_out] = _in(0xf3bbe884, 0xa14bb413, _i, _i, _f);
    return [weatherType1_out, weatherType2_out, percentWeather2_out];
}
exports.getCurrWeatherState = getCurrWeatherState;
/**
 * if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
 */
function getCurrentFrontendMenuVersion() {
    return _in(0x2309595a, 0xd6145265, _r, _ri);
}
exports.getCurrentFrontendMenuVersion = getCurrentFrontendMenuVersion;
/**
 * 0 = american (en-US)
 * 1 = french (fr-FR)
 * 2 = german (de-DE)
 * 3 = italian (it-IT)
 * 4 = spanish (es-ES)
 * 5 = brazilian (pt-BR)
 * 6 = polish (pl-PL)
 * 7 = russian (ru-RU)
 * 8 = korean (ko-KR)
 * 9 = chinesetrad (zh-TW)
 * 10 = japanese (ja-JP)
 * 11 = mexican (es-MX)
 * 12 = chinesesimp (zh-CN)
 */
function getCurrentLanguage() {
    return _in(0x2bdd44cc, 0x428a7eae, _r, _ri);
}
exports.getCurrentLanguage = getCurrentLanguage;
function getCurrentNumberOfCloudPhotos() {
    return _in(0x473151eb, 0xc762c6da, _r, _ri);
}
exports.getCurrentNumberOfCloudPhotos = getCurrentNumberOfCloudPhotos;
/**
 * Example in VB
 *
 * Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
 * Dim arg As New OutputArgument()
 * Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
 * Return arg.GetResult(Of Integer)()
 * End Function
 *
 * Usage:
 * If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
 * Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
 * @param ped
 * @param weaponHash
 */
function getCurrentPedVehicleWeapon(ped, weaponHash) {
    const [retval, weaponHash_out] = _in(0x1017582b, 0xcd3832dc, ped, _i, _r);
    return [retval, weaponHash_out];
}
exports.getCurrentPedVehicleWeapon = getCurrentPedVehicleWeapon;
/**
 * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
 * p2 seems to be 1 most of the time.
 *
 *
 *
 *
 *
 * p2 is not implemented
 *
 * disassembly said that?
 *
 * @param ped
 * @param weaponHash
 * @param p2
 */
function getCurrentPedWeapon(ped, p2) {
    const [retval, weaponHash_out] = _in(0x3a87e44b, 0xb9a01d54, ped, _i, p2, _r);
    return [retval, weaponHash_out];
}
exports.getCurrentPedWeapon = getCurrentPedWeapon;
function getCurrentPedWeaponEntityIndex(ped, p1) {
    return _in(0x3b390a93, 0x9af0b5fc, ped, p1, _r, _ri);
}
exports.getCurrentPedWeaponEntityIndex = getCurrentPedWeaponEntityIndex;
function getCurrentPlaybackForVehicle(vehicle) {
    return _in(0x42bc05c2, 0x7a946054, vehicle, _r, _ri);
}
exports.getCurrentPlaybackForVehicle = getCurrentPlaybackForVehicle;
function getCurrentScriptedConversationLine() {
    return _in(0x480357ee, 0x890c295a, _r, _ri);
}
exports.getCurrentScriptedConversationLine = getCurrentScriptedConversationLine;
function getCurrentTrackPlayTime(radioStationName) {
    return _in(0x3e65cde5, 0x215832c1, _ts(radioStationName), _r, _ri);
}
exports.getCurrentTrackPlayTime = getCurrentTrackPlayTime;
function getCurrentTrackSoundName(radioStationName) {
    return _in(0x34d66bc0, 0x58019ce0, _ts(radioStationName), _r, _ri);
}
exports.getCurrentTrackSoundName = getCurrentTrackSoundName;
function getCurrentTvClipNamehash() {
    return _in(0x30432a01, 0x18736e00, _r, _ri);
}
exports.getCurrentTvClipNamehash = getCurrentTvClipNamehash;
function getCurrentWebpageId() {
    return _in(0x01a358d9, 0x128b7a86, _r, _ri);
}
exports.getCurrentWebpageId = getCurrentWebpageId;
function getCurrentWebsiteId() {
    return _in(0x97d47996, 0xfc48cbad, _r, _ri);
}
exports.getCurrentWebsiteId = getCurrentWebsiteId;
/**
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
function getCutFileConcatCount(cutsceneName) {
    return _in(0x0abc54de, 0x641dc0fc, _ts(cutsceneName), _r, _ri);
}
exports.getCutFileConcatCount = getCutFileConcatCount;
function getCutsceneConcatSectionPlaying() {
    return _in(0x583df8e3, 0xd4afbd98, _r, _ri);
}
exports.getCutsceneConcatSectionPlaying = getCutsceneConcatSectionPlaying;
function getCutsceneEndTime() {
    return _in(0x971d7b15, 0xbcdbef99, _r, _ri);
}
exports.getCutsceneEndTime = getCutsceneEndTime;
function getCutscenePlayDuration() {
    return _in(0x5d583f71, 0xc901f2a3, _r, _ri);
}
exports.getCutscenePlayDuration = getCutscenePlayDuration;
function getCutsceneSectionPlaying() {
    return _in(0x49010a6a, 0x396553d8, _r, _ri);
}
exports.getCutsceneSectionPlaying = getCutsceneSectionPlaying;
function getCutsceneTime() {
    return _in(0xe625beab, 0xbaffdab9, _r, _ri);
}
exports.getCutsceneTime = getCutsceneTime;
function getCutsceneTotalDuration() {
    return _in(0xee53b14a, 0x19e480d4, _r, _ri);
}
exports.getCutsceneTotalDuration = getCutsceneTotalDuration;
function getDeadPedPickupCoords(ped, p1, p2) {
    return _mv(_in(0xcd5003b0, 0x97200f36, ped, _fv(p1), _fv(p2), _r, _rv));
}
exports.getDeadPedPickupCoords = getDeadPedPickupCoords;
function getDebugCam() {
    return _in(0x77c3cec4, 0x6be286f6, _r, _ri);
}
exports.getDebugCam = getDebugCam;
function getDecalWashLevel(decal) {
    return _in(0x323f6476, 0x79a09103, decal, _r, _rf);
}
exports.getDecalWashLevel = getDecalWashLevel;
/**
 * Gets the aggressiveness factor of the ocean waves.
 */
function getDeepOceanScaler() {
    return _in(0x2b2a2cc8, 0x6778b619, _r, _rf);
}
exports.getDeepOceanScaler = getDeepOceanScaler;
function getDefaultAmmoForWeaponPickup(pickupHash) {
    return _in(0xdb41d07a, 0x45a6d4b7, _ch(pickupHash), _r, _ri);
}
exports.getDefaultAmmoForWeaponPickup = getDefaultAmmoForWeaponPickup;
/**
 * This function is hard-coded to always return 1.
 */
function getDefaultScriptRendertargetRenderId() {
    return _in(0x52f0982d, 0x7fd156b6, _r, _ri);
}
exports.getDefaultScriptRendertargetRenderId = getDefaultScriptRendertargetRenderId;
function getDefaultSecondaryTintForBarber(colorID) {
    return _in(0xaaa6a369, 0x8a69e048, colorID, _r, _ri);
}
exports.getDefaultSecondaryTintForBarber = getDefaultSecondaryTintForBarber;
function getDefaultSecondaryTintForCreator(colorId) {
    return _in(0xea9960d0, 0x7dadcf10, colorId, _r, _ri);
}
exports.getDefaultSecondaryTintForCreator = getDefaultSecondaryTintForCreator;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function getDisabledControlNormal(control, action) {
    return _in(0x11e65974, 0xa982637c, control, action, _r, _rf);
}
exports.getDisabledControlNormal = getDisabledControlNormal;
/**
 * The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function getDisabledControlUnboundNormal(control, action) {
    return _in(0x4f8a26a8, 0x90fd62fb, control, action, _r, _rf);
}
exports.getDisabledControlUnboundNormal = getDisabledControlUnboundNormal;
/**
 * Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
 * -----------------------------------------------------------------------------------------------------------------------------------------
 *
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 *
 * Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getDisplayNameFromVehicleModel(modelHash) {
    return _in(0xb215aac3, 0x2d25d019, _ch(modelHash), _r, _s);
}
exports.getDisplayNameFromVehicleModel = getDisplayNameFromVehicleModel;
/**
 * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
 * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
 *
 * Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param useZ
 */
function getDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ) {
    return _in(0xf1b76088, 0x1820c952, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), useZ, _r, _rf);
}
exports.getDistanceBetweenCoords = getDistanceBetweenCoords;
/**
 * dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
 * outData is a struct of 3 8-byte items.
 * The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
 * @param dlcVehicleIndex
 * @param outData
 */
function getDlcVehicleData(dlcVehicleIndex, outData) {
    const [retval, outData_out] = _in(0x33468edc, 0x08e371f6, dlcVehicleIndex, _ii(outData), _r);
    return [retval, outData_out];
}
exports.getDlcVehicleData = getDlcVehicleData;
function getDlcVehicleFlags(dlcVehicleIndex) {
    return _in(0x5549ee11, 0xfa22fcf2, dlcVehicleIndex, _r, _ri);
}
exports.getDlcVehicleFlags = getDlcVehicleFlags;
function getDlcVehicleModLockHash(hash) {
    return _in(0xc0988104, 0x37312fff, _ch(hash), _r, _ri);
}
exports.getDlcVehicleModLockHash = getDlcVehicleModLockHash;
/**
 * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
 * @param dlcVehicleIndex
 */
function getDlcVehicleModel(dlcVehicleIndex) {
    return _in(0xecc01b7c, 0x5763333c, dlcVehicleIndex, _r, _ri);
}
exports.getDlcVehicleModel = getDlcVehicleModel;
/**
 * p0 seems to be the weapon index
 * p1 seems to be the weapon component index
 * struct DlcComponentData{
 * int attachBone;
 * int padding1;
 * int bActiveByDefault;
 * int padding2;
 * int unk;
 * int padding3;
 * int componentHash;
 * int padding4;
 * int unk2;
 * int padding5;
 * int componentCost;
 * int padding6;
 * char nameLabel[64];
 * char descLabel[64];
 * };
 *
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
function getDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr) {
    const [retval, ComponentDataPtr_out] = _in(0x6cf598a2, 0x957c2bf8, dlcWeaponIndex, dlcWeapCompIndex, _ii(ComponentDataPtr), _r);
    return [retval, ComponentDataPtr_out];
}
exports.getDlcWeaponComponentData = getDlcWeaponComponentData;
/**
 * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
function getDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr) {
    const [retval, ComponentDataPtr_out] = _in(0x31d5e073, 0xb6f93cdc, dlcWeaponIndex, dlcWeapCompIndex, _ii(ComponentDataPtr), _r);
    return [retval, ComponentDataPtr_out];
}
exports.getDlcWeaponComponentDataSp = getDlcWeaponComponentDataSp;
/**
 *
 * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
 * struct DlcWeaponData
 * {
 * int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this
 * int padding1;
 * int weaponHash;
 * int padding2;
 * int unk;
 * int padding3;
 * int weaponCost;
 * int padding4;
 * int ammoCost;
 * int padding5;
 * int ammoType;
 * int padding6;
 * int defaultClipSize;
 * int padding7;
 * char nameLabel[64];
 * char descLabel[64];
 * char desc2Label[64]; // usually "the" + name
 * char upperCaseNameLabel[64];
 * };
 * @param dlcWeaponIndex
 * @param outData
 */
function getDlcWeaponData(dlcWeaponIndex, outData) {
    const [retval, outData_out] = _in(0x79923cd2, 0x1bece14e, dlcWeaponIndex, _ii(outData), _r);
    return [retval, outData_out];
}
exports.getDlcWeaponData = getDlcWeaponData;
/**
 * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
 * @param dlcWeaponIndex
 * @param outData
 */
function getDlcWeaponDataSp(dlcWeaponIndex, outData) {
    const [retval, outData_out] = _in(0x310836ee, 0x7129ba33, dlcWeaponIndex, _ii(outData), _r);
    return [retval, outData_out];
}
exports.getDlcWeaponDataSp = getDlcWeaponDataSp;
/**
 * Appears to return true if the vehicle has any damage, including cosmetically.
 * @param vehicle
 */
function getDoesVehicleHaveDamageDecals(vehicle) {
    return _in(0xbcdc5017, 0xd3ce1e9e, vehicle, _r);
}
exports.getDoesVehicleHaveDamageDecals = getDoesVehicleHaveDamageDecals;
/**
 * Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.
 * @param vehicle
 */
function getDoesVehicleHaveTombstone(vehicle) {
    return _in(0x71afb258, 0xcced3a27, vehicle, _r);
}
exports.getDoesVehicleHaveTombstone = getDoesVehicleHaveTombstone;
function getDriftTyresSet(vehicle) {
    return _in(0x2f5a7243, 0x0e78c8d3, vehicle, _r);
}
exports.getDriftTyresSet = getDriftTyresSet;
function getEntityAlpha(entity) {
    return _in(0x5a47b3b5, 0xe63e94c6, entity, _r, _ri);
}
exports.getEntityAlpha = getEntityAlpha;
/**
 * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
 *
 * Example:
 * 0.000000 - mark the starting of animation.
 * 0.500000 - mark the midpoint of the animation.
 * 1.000000 - mark the end of animation.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 */
function getEntityAnimCurrentTime(entity, animDict, animName) {
    return _in(0x346d8150, 0x0d088f42, entity, _ts(animDict), _ts(animName), _r, _rf);
}
exports.getEntityAnimCurrentTime = getEntityAnimCurrentTime;
/**
 * Returns a float value representing animation's total playtime in milliseconds.
 *
 * Example:
 * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
 * return 20800.000000
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 */
function getEntityAnimTotalTime(entity, animDict, animName) {
    return _in(0x50bd2730, 0xb191e360, entity, _ts(animDict), _ts(animName), _r, _rf);
}
exports.getEntityAnimTotalTime = getEntityAnimTotalTime;
function getEntityAttachedTo(entity) {
    return _in(0x48c2bed9, 0x180fe123, entity, _r, _ri);
}
exports.getEntityAttachedTo = getEntityAttachedTo;
function getEntityAttachedToCargobob(p0) {
    return _in(0x99093f60, 0x746708ca, p0, _r, _ri);
}
exports.getEntityAttachedToCargobob = getEntityAttachedToCargobob;
function getEntityAttachedToTowTruck(towTruck) {
    return _in(0xefea18dc, 0xf10f8f75, towTruck, _r, _ri);
}
exports.getEntityAttachedToTowTruck = getEntityAttachedToTowTruck;
function getEntityBoneCount(entity) {
    return _in(0xb328dcc3, 0xa3aa401b, entity, _r, _ri);
}
exports.getEntityBoneCount = getEntityBoneCount;
/**
 * Returns the index of the bone. If the bone was not found, -1 will be returned.
 *
 * list:
 * https://pastebin.com/D7JMnX1g
 *
 * BoneNames:
 * chassis,
 * windscreen,
 * seat_pside_r,
 * seat_dside_r,
 * bodyshell,
 * suspension_lm,
 * suspension_lr,
 * platelight,
 * attach_female,
 * attach_male,
 * bonnet,
 * boot,
 * chassis_dummy,  //Center of the dummy
 * chassis_Control,    //Not found yet
 * door_dside_f,   //Door left, front
 * door_dside_r,   //Door left, back
 * door_pside_f,   //Door right, front
 * door_pside_r,   //Door right, back
 * Gun_GripR,
 * windscreen_f,
 * platelight, //Position where the light above the numberplate is located
 * VFX_Emitter,
 * window_lf,  //Window left, front
 * window_lr,  //Window left, back
 * window_rf,  //Window right, front
 * window_rr,  //Window right, back
 * engine, //Position of the engine
 * gun_ammo,
 * ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
 * wheel_lf,   //Wheel left, front
 * wheel_lr,   //Wheel left, back
 * wheel_rf,   //Wheel right, front
 * wheel_rr,   //Wheel right, back
 * exhaust,    //Exhaust. shows only the position of the stock-exhaust
 * overheat,   //A position on the engine(not exactly sure, how to name it)
 * misc_e, //Not a car-bone.
 * seat_dside_f,   //Driver-seat
 * seat_pside_f,   //Seat next to driver
 * Gun_Nuzzle,
 * seat_r
 *
 * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
 *
 *
 * @param entity
 * @param boneName
 */
function getEntityBoneIndexByName(entity, boneName) {
    return _in(0xfb71170b, 0x7e76acba, entity, _ts(boneName), _r, _ri);
}
exports.getEntityBoneIndexByName = getEntityBoneIndexByName;
function getEntityBoneObjectPostion(entity, boneIndex) {
    return _mv(_in(0xcf1247cc, 0x86961fd6, entity, boneIndex, _r, _rv));
}
exports.getEntityBoneObjectPostion = getEntityBoneObjectPostion;
/**
 * Gets the local rotation of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
function getEntityBoneObjectRotation(entity, boneIndex) {
    return _mv(_in(0xbd8d3255, 0x0e5cebfe, entity, boneIndex, _r, _rv));
}
exports.getEntityBoneObjectRotation = getEntityBoneObjectRotation;
/**
 * Gets the world position of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
function getEntityBonePostion(entity, boneIndex) {
    return _mv(_in(0x46f86969, 0x33a63c9b, entity, boneIndex, _r, _rv));
}
exports.getEntityBonePostion = getEntityBonePostion;
/**
 * Gets the world rotation of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
function getEntityBoneRotation(entity, boneIndex) {
    return _mv(_in(0xce6294a2, 0x32d03786, entity, boneIndex, _r, _rv));
}
exports.getEntityBoneRotation = getEntityBoneRotation;
function getEntityCanBeDamaged(entity) {
    return _in(0xd95cc5d2, 0xab15a09f, entity, _r);
}
exports.getEntityCanBeDamaged = getEntityCanBeDamaged;
function getEntityCollisionDisabled(entity) {
    return _in(0xccf1e97b, 0xefdae480, entity, _r);
}
exports.getEntityCollisionDisabled = getEntityCollisionDisabled;
/**
 * Gets the current coordinates for a specified entity.
 * `entity` = The entity to get the coordinates from.
 * `alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
 * @param entity
 * @param alive
 */
function getEntityCoords(entity, alive) {
    return _mv(_in(0x3fef770d, 0x40960d5a, entity, alive, _r, _rv));
}
exports.getEntityCoords = getEntityCoords;
/**
 * Gets the entity's forward vector.
 * @param entity
 */
function getEntityForwardVector(entity) {
    return _mv(_in(0x0a794a5a, 0x57f8df91, entity, _r, _rv));
}
exports.getEntityForwardVector = getEntityForwardVector;
/**
 * Gets the X-component of the entity's forward vector.
 * @param entity
 */
function getEntityForwardX(entity) {
    return _in(0x8bb4ef42, 0x14e0e6d5, entity, _r, _rf);
}
exports.getEntityForwardX = getEntityForwardX;
/**
 * Gets the Y-component of the entity's forward vector.
 * @param entity
 */
function getEntityForwardY(entity) {
    return _in(0x866a4a5f, 0xae349510, entity, _r, _rf);
}
exports.getEntityForwardY = getEntityForwardY;
/**
 * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
 * @param entity
 */
function getEntityHeading(entity) {
    return _in(0xe83d4f9b, 0xa2a38914, entity, _r, _rf);
}
exports.getEntityHeading = getEntityHeading;
/**
 * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
 *
 * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
 * @param entity
 */
function getEntityHeadingFromEulers(entity) {
    return _in(0x846bf629, 0x1198a71e, entity, _r, _rf);
}
exports.getEntityHeadingFromEulers = getEntityHeadingFromEulers;
/**
 * Returns an integer value of entity's current health.
 *
 * Example of range for ped:
 * - Player [0 to 200]
 * - Ped [100 to 200]
 * - Vehicle [0 to 1000]
 * - Object [0 to 1000]
 *
 * Health is actually a float value but this native casts it to int.
 * In order to get the actual value, do:
 * float health = *(float *)(entityAddress + 0x280);
 * @param entity
 */
function getEntityHealth(entity) {
    return _in(0xeef059fa, 0xd016d209, entity, _r, _ri);
}
exports.getEntityHealth = getEntityHealth;
function getEntityHeight(entity, X, Y, Z, atTop, inWorldCoords) {
    return _in(0x5a504562, 0x485944dd, entity, _fv(X), _fv(Y), _fv(Z), atTop, inWorldCoords, _r, _rf);
}
exports.getEntityHeight = getEntityHeight;
/**
 * Return height (z-dimension) above ground.
 * Example: The pilot in a titan plane is 1.844176 above ground.
 *
 * How can i convert it to meters?
 * Everything seems to be in meters, probably this too.
 * @param entity
 */
function getEntityHeightAboveGround(entity) {
    return _in(0x1dd55701, 0x034110e5, entity, _r, _rf);
}
exports.getEntityHeightAboveGround = getEntityHeightAboveGround;
function getEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash) {
    return _in(0x0a2e9fdb, 0x9a8c62f6, _ts(cutsceneEntName), _ch(modelHash), _r, _ri);
}
exports.getEntityIndexOfCutsceneEntity = getEntityIndexOfCutsceneEntity;
function getEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash) {
    return _in(0xc0741a26, 0x499654cd, _ts(cutsceneEntName), _ch(modelHash), _r, _ri);
}
exports.getEntityIndexOfRegisteredEntity = getEntityIndexOfRegisteredEntity;
/**
 * Returns the LOD distance of an entity.
 * @param entity
 */
function getEntityLodDist(entity) {
    return _in(0x4159c276, 0x2b5791d6, entity, _r, _ri);
}
exports.getEntityLodDist = getEntityLodDist;
function getEntityMatrix(entity) {
    const [forwardVector_out, rightVector_out, upVector_out, position_out] = _in(0xecb2fc72, 0x35a7d137, entity, _v, _v, _v, _v);
    return [_mv(forwardVector_out), _mv(rightVector_out), _mv(upVector_out), _mv(position_out)];
}
exports.getEntityMatrix = getEntityMatrix;
/**
 * Return an integer value of entity's maximum health.
 *
 * Example:
 * - Player = 200
 * - Ped = 150
 * @param entity
 */
function getEntityMaxHealth(entity) {
    return _in(0x15d75760, 0x6d170c3c, entity, _r, _ri);
}
exports.getEntityMaxHealth = getEntityMaxHealth;
/**
 * Returns the model hash from the entity
 * @param entity
 */
function getEntityModel(entity) {
    return _in(0x9f47b058, 0x362c84b5, entity, _r, _ri);
}
exports.getEntityModel = getEntityModel;
/**
 * Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
 * This native does not appear to have anything to do with pickups as in scripts it is used with objects.
 *
 * Example from fm_mission_controller_2020.c:
 *
 * iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));
 * @param entity
 * @param modelHash
 */
function getEntityOfTypeAttachedToEntity(entity, modelHash) {
    return _in(0x1f922734, 0xe259bd26, entity, _ch(modelHash), _r, _ri);
}
exports.getEntityOfTypeAttachedToEntity = getEntityOfTypeAttachedToEntity;
function getEntityPitch(entity) {
    return _in(0xd45dc289, 0x3621e1fe, entity, _r, _rf);
}
exports.getEntityPitch = getEntityPitch;
/**
 * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
 * Returns false if no entity found.
 * @param player
 * @param entity
 */
function getEntityPlayerIsFreeAimingAt(player, entity) {
    const [retval, entity_out] = _in(0x2975c866, 0xe6713290, player, _ii(entity), _r);
    return [retval, entity_out];
}
exports.getEntityPlayerIsFreeAimingAt = getEntityPlayerIsFreeAimingAt;
/**
 * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
 * @param entity
 */
function getEntityPopulationType(entity) {
    return _in(0xf6f5161f, 0x4534edff, entity, _r, _ri);
}
exports.getEntityPopulationType = getEntityPopulationType;
function getEntityProofs(entity) {
    const [retval, bulletProof_out, fireProof_out, explosionProof_out, collisionProof_out, meleeProof_out, steamProof_out, p7_out, drownProof_out] = _in(0xbe8cd9be, 0x829bbebf, entity, _i, _i, _i, _i, _i, _i, _i, _i, _r);
    return [retval, bulletProof_out, fireProof_out, explosionProof_out, collisionProof_out, meleeProof_out, steamProof_out, p7_out, drownProof_out];
}
exports.getEntityProofs = getEntityProofs;
/**
 * w is the correct parameter name!
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
function getEntityQuaternion(entity) {
    const [x_out, y_out, z_out, w_out] = _in(0x7b3703d2, 0xd32dfa18, entity, _f, _f, _f, _f);
    return [x_out, y_out, z_out, w_out];
}
exports.getEntityQuaternion = getEntityQuaternion;
/**
 * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
 * (Sideways Roll) such as a vehicle tipped on its side
 * @param entity
 */
function getEntityRoll(entity) {
    return _in(0x831e0242, 0x595560df, entity, _r, _rf);
}
exports.getEntityRoll = getEntityRoll;
/**
 * rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
 *
 * rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
 * What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
 *
 * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
 *
 * Rotation Orders:
 * 0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
 * 1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
 * 2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
 * 3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
 * 4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
 * 5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
 * @param entity
 * @param rotationOrder
 */
function getEntityRotation(entity, rotationOrder) {
    return _mv(_in(0xafbd61cc, 0x738d9eb9, entity, rotationOrder, _r, _rv));
}
exports.getEntityRotation = getEntityRotation;
function getEntityRotationVelocity(entity) {
    return _mv(_in(0x213b9104, 0x5d09b983, entity, _r, _rv));
}
exports.getEntityRotationVelocity = getEntityRotationVelocity;
/**
 * Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
 * @param entity
 * @param script
 */
function getEntityScript(entity, script) {
    const [retval, script_out] = _in(0xa6e9c38d, 0xb51d7748, entity, _ii(script), _r, _s);
    return [retval, script_out];
}
exports.getEntityScript = getEntityScript;
/**
 * result is in meters per second
 *
 * ------------------------------------------------------------
 * So would the conversion to mph and km/h, be along the lines of this.
 *
 * float speed = GET_ENTITY_SPEED(veh);
 * float kmh = (speed * 3.6);
 * float mph = (speed * 2.236936);
 * ------------------------------------------------------------
 * @param entity
 */
function getEntitySpeed(entity) {
    return _in(0xd5037ba8, 0x2e12416f, entity, _r, _rf);
}
exports.getEntitySpeed = getEntitySpeed;
/**
 * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
 * @param entity
 * @param relative
 */
function getEntitySpeedVector(entity, relative) {
    return _mv(_in(0x9a8d700a, 0x51cb7b0d, entity, relative, _r, _rv));
}
exports.getEntitySpeedVector = getEntitySpeedVector;
/**
 * Get how much of the entity is submerged.  1.0f is whole entity.
 * @param entity
 */
function getEntitySubmergedLevel(entity) {
    return _in(0xe81afc1b, 0xc4cc41ce, entity, _r, _rf);
}
exports.getEntitySubmergedLevel = getEntitySubmergedLevel;
/**
 * Returns:
 * 0 = no entity
 * 1 = ped
 * 2 = vehicle
 * 3 = object
 * @param entity
 */
function getEntityType(entity) {
    return _in(0x8acd3660, 0x38d14505, entity, _r, _ri);
}
exports.getEntityType = getEntityType;
function getEntityUprightValue(entity) {
    return _in(0x95eed5a6, 0x94951f9f, entity, _r, _rf);
}
exports.getEntityUprightValue = getEntityUprightValue;
function getEntityVelocity(entity) {
    return _mv(_in(0x4805d2b1, 0xd8cf94a9, entity, _r, _rv));
}
exports.getEntityVelocity = getEntityVelocity;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
function getEntryPointPosition(vehicle, doorId) {
    return _mv(_in(0xc0572928, 0xc0abfda3, vehicle, doorId, _r, _rv));
}
exports.getEntryPointPosition = getEntryPointPosition;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 * @param eventIndex
 */
function getEventAtIndex(eventGroup, eventIndex) {
    return _in(0xd8f66a3a, 0x60c62153, eventGroup, eventIndex, _r, _ri);
}
exports.getEventAtIndex = getEventAtIndex;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 *
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * @param eventGroup
 * @param eventIndex
 * @param eventData
 * @param eventDataSize
 */
function getEventData(eventGroup, eventIndex, eventDataSize) {
    const [retval, eventData_out] = _in(0x2902843f, 0xcd2b2d79, eventGroup, eventIndex, _i, eventDataSize, _r);
    return [retval, eventData_out];
}
exports.getEventData = getEventData;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 * @param eventIndex
 */
function getEventExists(eventGroup, eventIndex) {
    return _in(0x936e6168, 0xa9bcedb5, eventGroup, eventIndex, _r);
}
exports.getEventExists = getEventExists;
function getEverHadBadPackOrder() {
    return _in(0x8d30f648, 0x014a92b5, _r);
}
exports.getEverHadBadPackOrder = getEverHadBadPackOrder;
/**
 * See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
 * Returns an integer representing the Timecycle modifier
 */
function getExtraTcmodifier() {
    return _in(0xbb0527ec, 0x6341496d, _r, _ri);
}
exports.getExtraTcmodifier = getExtraTcmodifier;
/**
 * This function is hard-coded to always return 0.
 */
function getExtracontentCloudResult() {
    return _in(0x94896593, 0x72a81585, _r, _ri);
}
exports.getExtracontentCloudResult = getExtracontentCloudResult;
/**
 * Getter for SET_FAKE_SPECTATOR_MODE
 */
function getFakeSpectatorMode() {
    return _in(0xc2d2ad9e, 0xaae265b8, _r);
}
exports.getFakeSpectatorMode = getFakeSpectatorMode;
/**
 * Gets the height of the vehicle's suspension.
 * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
 * 0.000 is the stock suspension.
 * 0.008 is Ultra Suspension.
 * @param vehicle
 */
function getFakeSuspensionLoweringAmount(vehicle) {
    return _in(0x53952fd2, 0xbaa19f17, vehicle, _r, _rf);
}
exports.getFakeSuspensionLoweringAmount = getFakeSuspensionLoweringAmount;
function getFakeWantedLevel() {
    return _in(0x4c9296cb, 0xcd1b971e, _r, _ri);
}
exports.getFakeWantedLevel = getFakeWantedLevel;
/**
 * Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.
 * @param labelName
 */
function getFilenameForAudioConversation(labelName) {
    return _in(0x7b5280eb, 0xa9840c72, _ts(labelName), _r, _s);
}
exports.getFilenameForAudioConversation = getFilenameForAudioConversation;
function getFinalRenderedCamCoord() {
    return _mv(_in(0xa200eb1e, 0xe790f448, _r, _rv));
}
exports.getFinalRenderedCamCoord = getFinalRenderedCamCoord;
function getFinalRenderedCamFarClip() {
    return _in(0xdfc8cbc6, 0x06fdb0fc, _r, _rf);
}
exports.getFinalRenderedCamFarClip = getFinalRenderedCamFarClip;
function getFinalRenderedCamFarDof() {
    return _in(0x9780f32b, 0xcaf72431, _r, _rf);
}
exports.getFinalRenderedCamFarDof = getFinalRenderedCamFarDof;
/**
 * Gets some camera fov
 */
function getFinalRenderedCamFov() {
    return _in(0x80ec1146, 0x69daeff4, _r, _rf);
}
exports.getFinalRenderedCamFov = getFinalRenderedCamFov;
function getFinalRenderedCamMotionBlurStrength() {
    return _in(0x162f9d99, 0x5753dc19, _r, _rf);
}
exports.getFinalRenderedCamMotionBlurStrength = getFinalRenderedCamMotionBlurStrength;
function getFinalRenderedCamNearClip() {
    return _in(0xd0082607, 0x100d7193, _r, _rf);
}
exports.getFinalRenderedCamNearClip = getFinalRenderedCamNearClip;
function getFinalRenderedCamNearDof() {
    return _in(0xa03502fc, 0x581f7d9b, _r, _rf);
}
exports.getFinalRenderedCamNearDof = getFinalRenderedCamNearDof;
/**
 * p0 seems to consistently be 2 across scripts
 *
 * Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
 * @param rotationOrder
 */
function getFinalRenderedCamRot(rotationOrder) {
    return _mv(_in(0x5b4e4c81, 0x7fcc2dfb, rotationOrder, _r, _rv));
}
exports.getFinalRenderedCamRot = getFinalRenderedCamRot;
function getFinalRenderedRemotePlayerCamFov(player) {
    return _in(0x5f35f673, 0x2c3fbba0, player, _r, _rf);
}
exports.getFinalRenderedRemotePlayerCamFov = getFinalRenderedRemotePlayerCamFov;
function getFinalRenderedRemotePlayerCamRot(player, rotationOrder) {
    return _mv(_in(0x26903d9c, 0xd1175f2c, player, rotationOrder, _r, _rv));
}
exports.getFinalRenderedRemotePlayerCamRot = getFinalRenderedRemotePlayerCamRot;
function getFirstBlipInfoId(blipSprite) {
    return _in(0x1bede233, 0xe6cd2a1f, blipSprite, _r, _ri);
}
exports.getFirstBlipInfoId = getFirstBlipInfoId;
function getFirstNCharactersOfLiteralString(string, length) {
    return _in(0x98c3cf91, 0x3d895111, _ts(string), length, _r, _s);
}
exports.getFirstNCharactersOfLiteralString = getFirstNCharactersOfLiteralString;
function getFirstPersonAimCamZoomFactor() {
    return _in(0x7ec52cc4, 0x0597d170, _r, _rf);
}
exports.getFirstPersonAimCamZoomFactor = getFirstPersonAimCamZoomFactor;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getFlyingVehicleModelAgility(modelHash) {
    return _in(0xc6ad107d, 0xdc9054cc, _ch(modelHash), _r, _rf);
}
exports.getFlyingVehicleModelAgility = getFlyingVehicleModelAgility;
function getFmFemaleShopPedApparelItemIndex(p0) {
    return _in(0xf033419d, 0x1b81fae8, p0, _r, _ri);
}
exports.getFmFemaleShopPedApparelItemIndex = getFmFemaleShopPedApparelItemIndex;
function getFmMaleShopPedApparelItemIndex(p0) {
    return _in(0x1e77fa7a, 0x62ee6c4c, p0, _r, _ri);
}
exports.getFmMaleShopPedApparelItemIndex = getFmMaleShopPedApparelItemIndex;
function getFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x89215ec7, 0x47df244a, _fv(p0), p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri);
}
exports.getFocusPedOnScreen = getFocusPedOnScreen;
/**
 * See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value
 */
function getFollowPedCamViewMode() {
    return _in(0x8d4d4623, 0x0b2c353a, _r, _ri);
}
exports.getFollowPedCamViewMode = getFollowPedCamViewMode;
function getFollowPedCamZoomLevel() {
    return _in(0x33e6c8ef, 0xd0cd93e9, _r, _ri);
}
exports.getFollowPedCamZoomLevel = getFollowPedCamZoomLevel;
/**
 * Returns the type of camera:
 *
 * enum _viewmode //0xA11D7CA8
 * {
 * THIRD_PERSON_NEAR = 0,
 * THIRD_PERSON_MEDIUM = 1,
 * THIRD_PERSON_FAR = 2,
 * CINEMATIC = 3,
 * FIRST_PERSON = 4
 * };
 */
function getFollowVehicleCamViewMode() {
    return _in(0xa4ff579a, 0xc0e3aaae, _r, _ri);
}
exports.getFollowVehicleCamViewMode = getFollowVehicleCamViewMode;
function getFollowVehicleCamZoomLevel() {
    return _in(0xee82280a, 0xb767b690, _r, _ri);
}
exports.getFollowVehicleCamZoomLevel = getFollowVehicleCamZoomLevel;
function getForcedComponent(componentHash, forcedComponentIndex) {
    const [nameHash_out, enumValue_out, componentType_out] = _in(0x6c93ed8c, 0x2f74859b, _ch(componentHash), forcedComponentIndex, _i, _i, _i);
    return [nameHash_out, enumValue_out, componentType_out];
}
exports.getForcedComponent = getForcedComponent;
function getForcedProp(componentHash, forcedPropIndex) {
    const [nameHash_out, enumValue_out, anchorPoint_out] = _in(0xe1ca84eb, 0xf72e691d, _ch(componentHash), forcedPropIndex, _i, _i, _i);
    return [nameHash_out, enumValue_out, anchorPoint_out];
}
exports.getForcedProp = getForcedProp;
function getFrameCount() {
    return _in(0xfc8202ef, 0xc642e6f2, _r, _ri);
}
exports.getFrameCount = getFrameCount;
function getFrameTime() {
    return _in(0x15c40837, 0x039ffaf7, _r, _rf);
}
exports.getFrameTime = getFrameTime;
function getGameTimer() {
    return _in(0x9cd27b00, 0x45628463, _r, _ri);
}
exports.getGameTimer = getGameTimer;
function getGameplayCamCoord() {
    return _mv(_in(0x14d6f567, 0x8d8f1b37, _r, _rv));
}
exports.getGameplayCamCoord = getGameplayCamCoord;
function getGameplayCamFov() {
    return _in(0x65019750, 0xa0324133, _r, _rf);
}
exports.getGameplayCamFov = getGameplayCamFov;
function getGameplayCamRelativeHeading() {
    return _in(0x74360764, 0x8add4587, _r, _rf);
}
exports.getGameplayCamRelativeHeading = getGameplayCamRelativeHeading;
function getGameplayCamRelativePitch() {
    return _in(0x3a6867b4, 0x845beda2, _r, _rf);
}
exports.getGameplayCamRelativePitch = getGameplayCamRelativePitch;
/**
 * p0 dosen't seem to change much, I tried it with 0, 1, 2:
 * 0-Pitch(X): -70.000092
 * 0-Roll(Y): -0.000001
 * 0-Yaw(Z): -43.886459
 * 1-Pitch(X): -70.000092
 * 1-Roll(Y): -0.000001
 * 1-Yaw(Z): -43.886463
 * 2-Pitch(X): -70.000092
 * 2-Roll(Y): -0.000002
 * 2-Yaw(Z): -43.886467
 * @param rotationOrder
 */
function getGameplayCamRot(rotationOrder) {
    return _mv(_in(0x837765a2, 0x5378f0bb, rotationOrder, _r, _rv));
}
exports.getGameplayCamRot = getGameplayCamRot;
/**
 * Returns the ActionScript flagValue.
 * ActionScript flags are global flags that scaleforms use
 * Flags found during testing
 * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
 * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
 * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
 * 9: Returns the current selection on the mobile phone scaleform
 *
 * There are 20 flags in total.
 * @param flagIndex
 */
function getGlobalActionscriptFlag(flagIndex) {
    return _in(0xe3b05614, 0xdce1d014, flagIndex, _r, _ri);
}
exports.getGlobalActionscriptFlag = getGlobalActionscriptFlag;
function getGlobalWaterFile() {
    return _in(0xf741bd85, 0x3611592d, _r, _ri);
}
exports.getGlobalWaterFile = getGlobalWaterFile;
function getGpsBlipRouteFound() {
    return _in(0x869daacb, 0xbe9fa006, _r);
}
exports.getGpsBlipRouteFound = getGpsBlipRouteFound;
function getGpsBlipRouteLength() {
    return _in(0xbbb45c3c, 0xf5c8aa85, _r, _ri);
}
exports.getGpsBlipRouteLength = getGpsBlipRouteLength;
function getGroundZAndNormalFor3dCoord(x, y, z) {
    const [retval, groundZ_out, normal_out] = _in(0x8bdc7bfc, 0x57a81e76, _fv(x), _fv(y), _fv(z), _f, _v, _r);
    return [retval, groundZ_out, _mv(normal_out)];
}
exports.getGroundZAndNormalFor3dCoord = getGroundZAndNormalFor3dCoord;
function getGroundZExcludingObjectsFor3dCoord(x, y, z, p4, p5) {
    const [retval, groundZ_out] = _in(0x9e82f0f3, 0x62881b29, _fv(x), _fv(y), _fv(z), _f, p4, p5, _r);
    return [retval, groundZ_out];
}
exports.getGroundZExcludingObjectsFor3dCoord = getGroundZExcludingObjectsFor3dCoord;
/**
 * Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
 *
 * x: Position on the X-axis to get ground elevation at.
 * y: Position on the Y-axis to get ground elevation at.
 * z: Position on the Z-axis to get ground elevation at.
 * groundZ: The ground elevation at the specified position.
 * ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
 *
 * Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
 * @param x
 * @param y
 * @param z
 * @param groundZ
 * @param ignoreWater
 * @param p5
 */
function getGroundZFor3dCoord(x, y, z, ignoreWater, p5) {
    const [retval, groundZ_out] = _in(0xc906a7da, 0xb05c8d2b, _fv(x), _fv(y), _fv(z), _f, ignoreWater, p5, _r);
    return [retval, groundZ_out];
}
exports.getGroundZFor3dCoord = getGroundZFor3dCoord;
/**
 * p1 may be a BOOL representing whether or not the group even exists
 * @param groupID
 * @param p1
 * @param sizeInMembers
 */
function getGroupSize(groupID) {
    const [p1_out, sizeInMembers_out] = _in(0x8de69fe3, 0x5ca09a45, groupID, _i, _i);
    return [p1_out, sizeInMembers_out];
}
exports.getGroupSize = getGroupSize;
function getHasObjectBeenCompletelyDestroyed(p0) {
    return _in(0x25422692, 0x91c6ac84, p0, _r);
}
exports.getHasObjectBeenCompletelyDestroyed = getHasObjectBeenCompletelyDestroyed;
function getHasRetractableWheels(vehicle) {
    return _in(0xdca174a4, 0x2133f08c, vehicle, _r);
}
exports.getHasRetractableWheels = getHasRetractableWheels;
function getHasRocketBoost(vehicle) {
    return _in(0x36d782f6, 0x8b309bda, vehicle, _r);
}
exports.getHasRocketBoost = getHasRocketBoost;
function getHasVehicleBeenHitByShunt(vehicle) {
    return _in(0xe8718faf, 0x591fd224, vehicle, _r);
}
exports.getHasVehicleBeenHitByShunt = getHasVehicleBeenHitByShunt;
/**
 * This native converts its past string to hash. It is hashed using jenkins one at a time method.
 * @param string
 */
function getHashKey(string) {
    return _in(0xd24d37cc, 0x275948cc, _ts(string), _r, _ri);
}
exports.getHashKey = getHashKey;
function getHashNameForComponent(entity, componentId, drawableVariant, textureVariant) {
    return _in(0x0368b3a8, 0x38070348, entity, componentId, drawableVariant, textureVariant, _r, _ri);
}
exports.getHashNameForComponent = getHashNameForComponent;
function getHashNameForProp(entity, componentId, propIndex, propTextureIndex) {
    return _in(0x5d616027, 0x5caec8dd, entity, componentId, propIndex, propTextureIndex, _r, _ri);
}
exports.getHashNameForProp = getHashNameForProp;
/**
 * Returns a hash representing which part of the map the given coords are located.
 *
 * Possible return values:
 * (Hash of) city -> -289320599
 * (Hash of) countryside -> 2072609373
 *
 * C# Example :
 *
 * Ped player = Game.Player.Character;
 * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
 * @param x
 * @param y
 * @param z
 */
function getHashOfMapAreaAtCoords(x, y, z) {
    return _in(0x7ee64d51, 0xe8498728, _fv(x), _fv(y), _fv(z), _r, _ri);
}
exports.getHashOfMapAreaAtCoords = getHashOfMapAreaAtCoords;
function getHashOfThisScriptName() {
    return _in(0x8a1c8b17, 0x38ffe87e, _r, _ri);
}
exports.getHashOfThisScriptName = getHashOfThisScriptName;
/**
 * A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
 * @param ped
 */
function getHeadBlendEyeColor(ped) {
    return _in(0x76bba2ce, 0xe66d47e9, ped, _r, _ri);
}
exports.getHeadBlendEyeColor = getHeadBlendEyeColor;
/**
 * dx = x1 - x2
 * dy = y1 - y2
 * @param dx
 * @param dy
 */
function getHeadingFromVector2d(dx, dy) {
    return _in(0x2ffb6b22, 0x4f4b2926, _fv(dx), _fv(dy), _r, _rf);
}
exports.getHeadingFromVector2d = getHeadingFromVector2d;
/**
 * Max 1000.
 * At 0 the main rotor will stall.
 * @param vehicle
 */
function getHeliMainRotorHealth(vehicle) {
    return _in(0xe4cb7541, 0xf413d2c5, vehicle, _r, _rf);
}
exports.getHeliMainRotorHealth = getHeliMainRotorHealth;
/**
 * Max 1000.
 * At -100 both helicopter rotors will stall.
 * @param vehicle
 */
function getHeliTailBoomHealth(vehicle) {
    return _in(0xac51915d, 0x27e4a5f7, vehicle, _r, _rf);
}
exports.getHeliTailBoomHealth = getHeliTailBoomHealth;
/**
 * Max 1000.
 * At 0 the tail rotor will stall.
 * @param vehicle
 */
function getHeliTailRotorHealth(vehicle) {
    return _in(0xae8ce82a, 0x4219ac8c, vehicle, _r, _rf);
}
exports.getHeliTailRotorHealth = getHeliTailRotorHealth;
function getHudColour(hudColorIndex) {
    const [r_out, g_out, b_out, a_out] = _in(0x7c9c91ab, 0x74a0360f, hudColorIndex, _i, _i, _i, _i);
    return [r_out, g_out, b_out, a_out];
}
exports.getHudColour = getHudColour;
function getHudComponentPosition(id) {
    return _mv(_in(0x223ca69a, 0x8c4417fd, id, _r, _rv));
}
exports.getHudComponentPosition = getHudComponentPosition;
/**
 * World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
function getHudScreenPositionFromWorldPosition(worldX, worldY, worldZ) {
    const [retval, screenX_out, screenY_out] = _in(0xf9904d11, 0xf1acbec3, _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r, _ri);
    return [retval, screenX_out, screenY_out];
}
exports.getHudScreenPositionFromWorldPosition = getHudScreenPositionFromWorldPosition;
function getHydraulicSuspensionRaiseFactor(vehicle, wheelId) {
    return _in(0x0bb5cbdd, 0xd0f25ae3, vehicle, wheelId, _r, _rf);
}
exports.getHydraulicSuspensionRaiseFactor = getHydraulicSuspensionRaiseFactor;
function getIdOfThisThread() {
    return _in(0xc30338e8, 0x088e2e21, _r, _ri);
}
exports.getIdOfThisThread = getIdOfThisThread;
/**
 * x1, y1, z1 -- Coords of your ped model
 * x2, y2, z2 -- Coords of the ped you want to switch to
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function getIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2) {
    return _in(0xb5d7b26b, 0x45720e05, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri);
}
exports.getIdealPlayerSwitchType = getIdealPlayerSwitchType;
function getInVehicleClipsetHashForSeat(vehicle, p1) {
    return _in(0xa01bc64d, 0xd4bfbbac, vehicle, p1, _r, _ri);
}
exports.getInVehicleClipsetHashForSeat = getInVehicleClipsetHashForSeat;
function getIndexOfCurrentLevel() {
    return _in(0xcbad6729, 0xf7b1f4fc, _r, _ri);
}
exports.getIndexOfCurrentLevel = getIndexOfCurrentLevel;
function getIndexedItemInItemset(index, itemset) {
    return _in(0x7a197e25, 0x21ee2bab, index, itemset, _r, _ri);
}
exports.getIndexedItemInItemset = getIndexedItemInItemset;
/**
 * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
 *
 * Example for VB.NET
 * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
 * @param x
 * @param y
 * @param z
 */
function getInteriorAtCoords(x, y, z) {
    return _in(0xb0f7f866, 0x3821d9c3, _fv(x), _fv(y), _fv(z), _r, _ri);
}
exports.getInteriorAtCoords = getInteriorAtCoords;
/**
 * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
 *
 * Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
 *
 * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
 *
 * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
 * @param x
 * @param y
 * @param z
 * @param interiorType
 */
function getInteriorAtCoordsWithType(x, y, z, interiorType) {
    return _in(0x05b7a89b, 0xd78797fc, _fv(x), _fv(y), _fv(z), _ts(interiorType), _r, _ri);
}
exports.getInteriorAtCoordsWithType = getInteriorAtCoordsWithType;
/**
 * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
 * @param x
 * @param y
 * @param z
 * @param typeHash
 */
function getInteriorAtCoordsWithTypehash(x, y, z, typeHash) {
    return _in(0xf0f77adb, 0x9f67e79d, _fv(x), _fv(y), _fv(z), _ch(typeHash), _r, _ri);
}
exports.getInteriorAtCoordsWithTypehash = getInteriorAtCoordsWithTypehash;
function getInteriorFromCollision(x, y, z) {
    return _in(0xec4cf9fc, 0xb29a4424, _fv(x), _fv(y), _fv(z), _r, _ri);
}
exports.getInteriorFromCollision = getInteriorFromCollision;
/**
 * Returns the handle of the interior that the entity is in. Returns 0 if outside.
 * @param entity
 */
function getInteriorFromEntity(entity) {
    return _in(0x2107ba50, 0x4071a6bb, entity, _r, _ri);
}
exports.getInteriorFromEntity = getInteriorFromEntity;
/**
 * Returns the current interior id from gameplay camera
 */
function getInteriorFromPrimaryView() {
    return _in(0xe7d267ec, 0x6ca966c3, _r, _ri);
}
exports.getInteriorFromPrimaryView = getInteriorFromPrimaryView;
/**
 * Returns the group ID of the specified interior.
 * 0 = default
 * 1 = subway station, subway tracks, sewers
 * 3 = train tunnel under mirror park
 * 5 = tunnel near del perro
 * 6 = train tunnel near chilliad
 * 7 = train tunnel near josiah
 * 8 = train tunnel in sandy shores
 * 9 = braddock tunnel (near chilliad)
 * 12 = tunnel under fort zancudo
 * 14 = train tunnel under cypress flats
 * 18 = rockford plaza parking garage
 * 19 = arcadius parking garage
 * 20 = union depository parking garage
 * 21 = fib parking garage
 * @param interior
 */
function getInteriorGroupId(interior) {
    return _in(0xe4a84abf, 0x135ef91a, interior, _r, _ri);
}
exports.getInteriorGroupId = getInteriorGroupId;
function getInteriorHeading(interior) {
    return _in(0xf49b5863, 0x1d9e22d9, interior, _r, _rf);
}
exports.getInteriorHeading = getInteriorHeading;
function getInteriorLocationAndNamehash(interior) {
    const [position_out, nameHash_out] = _in(0x252bdc06, 0xb73fa6ea, interior, _v, _i);
    return [_mv(position_out), nameHash_out];
}
exports.getInteriorLocationAndNamehash = getInteriorLocationAndNamehash;
function getIsArticulatedJointAtMaxAngle(p0, p1) {
    return _in(0x3bd770d2, 0x81982db5, p0, p1, _r);
}
exports.getIsArticulatedJointAtMaxAngle = getIsArticulatedJointAtMaxAngle;
function getIsArticulatedJointAtMinAngle(object, p1) {
    return _in(0x43c677f1, 0xe1158005, object, p1, _r);
}
exports.getIsArticulatedJointAtMinAngle = getIsArticulatedJointAtMinAngle;
/**
 * Returns true if profile setting 208 is equal to 0.
 */
function getIsAutoSaveOff() {
    return _in(0x6e04f060, 0x94c87047, _r);
}
exports.getIsAutoSaveOff = getIsAutoSaveOff;
function getIsBoatCapsized(vehicle) {
    return _in(0xba91d045, 0x575699ad, vehicle, _r);
}
exports.getIsBoatCapsized = getIsBoatCapsized;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
function getIsDoorValid(vehicle, doorId) {
    return _in(0x645f4b6e, 0x8499f632, vehicle, doorId, _r);
}
exports.getIsDoorValid = getIsDoorValid;
function getIsEntityAFrag(object) {
    return _in(0x0c112765, 0x300c7e1e, object, _r);
}
exports.getIsEntityAFrag = getIsEntityAFrag;
/**
 * false = Any resolution < 1280x720
 * true = Any resolution >= 1280x720
 */
function getIsHidef() {
    return _in(0x84ed3119, 0x1cc5d2c9, _r);
}
exports.getIsHidef = getIsHidef;
function getIsInitialLoadingScreenActive() {
    return _in(0xc4637a6d, 0x03c24cc3, _r);
}
exports.getIsInitialLoadingScreenActive = getIsInitialLoadingScreenActive;
/**
 * This function is hard-coded to always return 0.
 */
function getIsLaunchFromLiveArea() {
    return _in(0x88b588b4, 0x1ff7868e, _r);
}
exports.getIsLaunchFromLiveArea = getIsLaunchFromLiveArea;
/**
 * From the driver's perspective, is the left headlight broken.
 * @param vehicle
 */
function getIsLeftVehicleHeadlightDamaged(vehicle) {
    return _in(0x5ef77c9a, 0xdd3b11a3, vehicle, _r);
}
exports.getIsLeftVehicleHeadlightDamaged = getIsLeftVehicleHeadlightDamaged;
/**
 * This function is hard-coded to always return 0.
 */
function getIsLiveAreaLaunchWithContent() {
    return _in(0x67fc09bc, 0x554a75e5, _r);
}
exports.getIsLiveAreaLaunchWithContent = getIsLiveAreaLaunchWithContent;
function getIsLoadingScreenActive() {
    return _in(0x10d0a8f2, 0x59e93ec9, _r);
}
exports.getIsLoadingScreenActive = getIsLoadingScreenActive;
/**
 * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
 * @param player
 * @param p1
 */
function getIsMoppingAreaFreeInFrontOfPlayer(player, p1) {
    return _in(0xdd2620b7, 0xb9d16ff1, player, _fv(p1), _r);
}
exports.getIsMoppingAreaFreeInFrontOfPlayer = getIsMoppingAreaFreeInFrontOfPlayer;
/**
 * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * @param ped
 * @param gadgetHash
 */
function getIsPedGadgetEquipped(ped, gadgetHash) {
    return _in(0xf7313320, 0x72f5156c, ped, _ch(gadgetHash), _r);
}
exports.getIsPedGadgetEquipped = getIsPedGadgetEquipped;
function getIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius) {
    return _in(0x2f09f797, 0x6c512404, _fv(xCoord), _fv(yCoord), _fv(zCoord), _fv(radius), _r);
}
exports.getIsPetrolDecalInRange = getIsPetrolDecalInRange;
/**
 * Appears once in "re_dealgonewrong"
 * @param player
 */
function getIsPlayerDrivingOnHighway(player) {
    return _in(0x5fc472c5, 0x01ccadb3, player, _r);
}
exports.getIsPlayerDrivingOnHighway = getIsPlayerDrivingOnHighway;
/**
 * Only 1 occurrence. p1 was 2.
 * @param player
 * @param p1
 */
function getIsPlayerDrivingWreckless(player, p1) {
    return _in(0xf10b44fd, 0x479d69f3, player, p1, _r);
}
exports.getIsPlayerDrivingWreckless = getIsPlayerDrivingWreckless;
/**
 * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
 */
function getIsPlayerInAnimalForm() {
    return _in(0x9689123e, 0x3f213aa5, _r);
}
exports.getIsPlayerInAnimalForm = getIsPlayerInAnimalForm;
function getIsPreloadedConversationReady() {
    return _in(0xe73364db, 0x90778ffa, _r);
}
exports.getIsPreloadedConversationReady = getIsPreloadedConversationReady;
/**
 * From the driver's perspective, is the right headlight broken.
 * @param vehicle
 */
function getIsRightVehicleHeadlightDamaged(vehicle) {
    return _in(0xa7ecb733, 0x55eb2f20, vehicle, _r);
}
exports.getIsRightVehicleHeadlightDamaged = getIsRightVehicleHeadlightDamaged;
/**
 * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
 * @param ped
 * @param taskIndex
 */
function getIsTaskActive(ped, taskIndex) {
    return _in(0xb0760331, 0xc7aa4155, ped, taskIndex, _r);
}
exports.getIsTaskActive = getIsTaskActive;
function getIsTimecycleTransitioningOut() {
    return _in(0x98d18905, 0xbf723b99, _r);
}
exports.getIsTimecycleTransitioningOut = getIsTimecycleTransitioningOut;
/**
 * Returns profile setting 225.
 */
function getIsUsingAlternateDriveby() {
    return _in(0x0f70731b, 0xaccfbb96, _r);
}
exports.getIsUsingAlternateDriveby = getIsUsingAlternateDriveby;
function getIsUsingAlternateHandbrake() {
    return _in(0x25aaa32b, 0xdc98f2a3, _r);
}
exports.getIsUsingAlternateHandbrake = getIsUsingAlternateHandbrake;
/**
 * Returns profile setting 237.
 */
function getIsUsingFpsThirdPersonCover() {
    return _in(0xb9cf1f79, 0x3a9f1bf1, _r);
}
exports.getIsUsingFpsThirdPersonCover = getIsUsingFpsThirdPersonCover;
/**
 * Returns profile setting 243.
 */
function getIsUsingHoodCamera() {
    return _in(0xcb645e85, 0xe97ea48b, _r);
}
exports.getIsUsingHoodCamera = getIsUsingHoodCamera;
/**
 * Returns whether this vehicle is currently disabled by an EMP mine.
 * @param vehicle
 */
function getIsVehicleDisabledByEmp(vehicle) {
    return _in(0x0506ed94, 0x363ad905, vehicle, _r);
}
exports.getIsVehicleDisabledByEmp = getIsVehicleDisabledByEmp;
/**
 * Returns true when in a vehicle, false whilst entering/exiting.
 * @param vehicle
 */
function getIsVehicleEngineRunning(vehicle) {
    return _in(0xae31e7df, 0x9b5b132e, vehicle, _r);
}
exports.getIsVehicleEngineRunning = getIsVehicleEngineRunning;
function getIsVehiclePrimaryColourCustom(vehicle) {
    return _in(0xf095c040, 0x5307b21b, vehicle, _r);
}
exports.getIsVehiclePrimaryColourCustom = getIsVehiclePrimaryColourCustom;
/**
 * Check if Vehicle Secondary is avaliable for customize
 * @param vehicle
 */
function getIsVehicleSecondaryColourCustom(vehicle) {
    return _in(0x910a32e7, 0xaad2656c, vehicle, _r);
}
exports.getIsVehicleSecondaryColourCustom = getIsVehicleSecondaryColourCustom;
function getIsVehicleShunting(vehicle) {
    return _in(0xa2459f72, 0xc14e2e8d, vehicle, _r);
}
exports.getIsVehicleShunting = getIsVehicleShunting;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 */
function getIsWaypointRecordingLoaded(name) {
    return _in(0xcb4e8be8, 0xa0063c5d, _ts(name), _r);
}
exports.getIsWaypointRecordingLoaded = getIsWaypointRecordingLoaded;
function getIsWheelsRetracted(vehicle) {
    return _in(0x1da0da9c, 0xb3f0c8bf, vehicle, _r);
}
exports.getIsWheelsRetracted = getIsWheelsRetracted;
/**
 * Setting Aspect Ratio Manually in game will return:
 *
 * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
 * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
 *
 * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
 */
function getIsWidescreen() {
    return _in(0x30cf4bda, 0x4fcb1905, _r);
}
exports.getIsWidescreen = getIsWidescreen;
function getItemsetSize(itemset) {
    return _in(0xd9127e83, 0xabf7c631, itemset, _r, _ri);
}
exports.getItemsetSize = getItemsetSize;
function getJackTarget(ped) {
    return _in(0x5486a79d, 0x9fbd342d, ped, _r, _ri);
}
exports.getJackTarget = getJackTarget;
/**
 * Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
 * @param entity
 */
function getKeyForEntityInRoom(entity) {
    return _in(0x399685db, 0x942336bc, entity, _r, _ri);
}
exports.getKeyForEntityInRoom = getKeyForEntityInRoom;
/**
 * Landing gear states:
 *
 * 0: Deployed
 * 1: Closing (Retracting)
 * 2: (Landing gear state 2 is never used.)
 * 3: Opening (Deploying)
 * 4: Retracted
 *
 * Returns the current state of the vehicles landing gear.
 * @param vehicle
 */
function getLandingGearState(vehicle) {
    return _in(0x9b0f3dca, 0x3db0f4cd, vehicle, _r, _ri);
}
exports.getLandingGearState = getLandingGearState;
function getLastDrivenVehicle() {
    return _in(0xb2d06fae, 0xde65b577, _r, _ri);
}
exports.getLastDrivenVehicle = getLastDrivenVehicle;
function getLastEntityHitByEntity(entity) {
    return _in(0xa75ee4f6, 0x89b85391, entity, _r, _ri);
}
exports.getLastEntityHitByEntity = getLastEntityHitByEntity;
function getLastMaterialHitByEntity(entity) {
    return _in(0x5c3d0a93, 0x5f535c4c, entity, _r, _ri);
}
exports.getLastMaterialHitByEntity = getLastMaterialHitByEntity;
function getLastPedInVehicleSeat(vehicle, seatIndex) {
    return _in(0x83f969aa, 0x1ee2a664, vehicle, seatIndex, _r, _ri);
}
exports.getLastPedInVehicleSeat = getLastPedInVehicleSeat;
/**
 * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
 * @param vehicle
 */
function getLastShuntVehicle(vehicle) {
    return _in(0x04f2fa6e, 0x234162f7, vehicle, _r, _ri);
}
exports.getLastShuntVehicle = getLastShuntVehicle;
/**
 * Returns the length of the string passed (much like strlen).
 * @param string
 */
function getLengthOfLiteralString(string) {
    return _in(0xf030907c, 0xcbb8a9fd, _ts(string), _r, _ri);
}
exports.getLengthOfLiteralString = getLengthOfLiteralString;
function getLengthOfLiteralStringInBytes(string) {
    return _in(0x43e41111, 0x89e54f0e, _ts(string), _r, _ri);
}
exports.getLengthOfLiteralStringInBytes = getLengthOfLiteralStringInBytes;
/**
 * Returns the string length of the string from the gxt string .
 * @param gxt
 */
function getLengthOfStringWithThisTextLabel(gxt) {
    return _in(0x801bd273, 0xd3a23f74, _ts(gxt), _r, _ri);
}
exports.getLengthOfStringWithThisTextLabel = getLengthOfStringWithThisTextLabel;
function getLightOverrideMaxIntensityScale() {
    return _in(0x393bd227, 0x5ceb7793, _r, _rf);
}
exports.getLightOverrideMaxIntensityScale = getLightOverrideMaxIntensityScale;
function getLinePlaneIntersection(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const [retval, p12_out] = _in(0xf56dfb7b, 0x61be7276, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fi(p12), _r);
    return [retval, p12_out];
}
exports.getLinePlaneIntersection = getLinePlaneIntersection;
/**
 * Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.
 *
 * example
 *
 * int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
 * for (int i = 0; i < count; i++)
 * {
 * const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
 * }
 *
 *
 * this example will work fine to fetch all names
 * for example for Sanchez we get
 *
 * SANC_LV1
 * SANC_LV2
 * SANC_LV3
 * SANC_LV4
 * SANC_LV5
 *
 *
 * Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
 *
 * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
 * @param vehicle
 * @param liveryIndex
 */
function getLiveryName(vehicle, liveryIndex) {
    return _in(0xb4c7a938, 0x37c91a1f, vehicle, liveryIndex, _r, _s);
}
exports.getLiveryName = getLiveryName;
/**
 * Hardcoded to always return 2.
 * @param p0
 */
function getLoadHighQualityPhotoStatus(p0) {
    return _in(0x40afb081, 0xf8add4ee, p0, _r, _ri);
}
exports.getLoadHighQualityPhotoStatus = getLoadHighQualityPhotoStatus;
/**
 * Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.
 */
function getLocalPlayerAimState() {
    return _in(0xbb41afbb, 0xbc0a0287, _r, _ri);
}
exports.getLocalPlayerAimState = getLocalPlayerAimState;
/**
 * Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.
 */
function getLocalPlayerGamepadAimState() {
    return _in(0x59b9a7af, 0x4c95133c, _r, _ri);
}
exports.getLocalPlayerGamepadAimState = getLocalPlayerGamepadAimState;
/**
 * Gets local system time as year, month, day, hour, minute and second.
 *
 * Example usage:
 *
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * or use std::tm struct
 *
 * TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
 *
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
function getLocalTime() {
    const [year_out, month_out, day_out, hour_out, minute_out, second_out] = _in(0x50c7a990, 0x57a69748, _i, _i, _i, _i, _i, _i);
    return [year_out, month_out, day_out, hour_out, minute_out, second_out];
}
exports.getLocalTime = getLocalTime;
function getLockonDistanceOfCurrentPedWeapon(ped) {
    return _in(0x840f03e9, 0x041e2c9c, ped, _r, _rf);
}
exports.getLockonDistanceOfCurrentPedWeapon = getLockonDistanceOfCurrentPedWeapon;
function getLodscale() {
    return _in(0x0c15b0e4, 0x43b2349d, _r, _rf);
}
exports.getLodscale = getLodscale;
function getMainPlayerBlipId() {
    return _in(0xdcd4ec3f, 0x419d02fa, _r, _ri);
}
exports.getMainPlayerBlipId = getMainPlayerBlipId;
/**
 * Will return a vehicle's manufacturer display label.
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getMakeNameFromVehicleModel(modelHash) {
    return _in(0xf7af4f15, 0x9ff99f97, _ch(modelHash), _r, _s);
}
exports.getMakeNameFromVehicleModel = getMakeNameFromVehicleModel;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
function getMaxAmmo(ped, weaponHash, ammo) {
    const [retval, ammo_out] = _in(0xdc16122c, 0x7a20c933, ped, _ch(weaponHash), _ii(ammo), _r);
    return [retval, ammo_out];
}
exports.getMaxAmmo = getMaxAmmo;
/**
 * Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
function getMaxAmmoByType(ped, ammoTypeHash, ammo) {
    const [retval, ammo_out] = _in(0x585847c5, 0xe4e11709, ped, _ch(ammoTypeHash), _ii(ammo), _r);
    return [retval, ammo_out];
}
exports.getMaxAmmoByType = getMaxAmmoByType;
/**
 * p2 is mostly 1 in the scripts.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param p2
 */
function getMaxAmmoInClip(ped, weaponHash, p2) {
    return _in(0xa38dcffc, 0xea8962fa, ped, _ch(weaponHash), p2, _r, _ri);
}
exports.getMaxAmmoInClip = getMaxAmmoInClip;
function getMaxNumNetworkObjects() {
    return _in(0xc7be3352, 0x16b5ec7c, _r, _ri);
}
exports.getMaxNumNetworkObjects = getMaxNumNetworkObjects;
function getMaxNumNetworkPeds() {
    return _in(0x0c1f7d49, 0xc39d2289, _r, _ri);
}
exports.getMaxNumNetworkPeds = getMaxNumNetworkPeds;
function getMaxNumNetworkPickups() {
    return _in(0xa7283506, 0x4dd63e4c, _r, _ri);
}
exports.getMaxNumNetworkPickups = getMaxNumNetworkPickups;
function getMaxNumNetworkVehicles() {
    return _in(0x0afce529, 0xf69b21ff, _r, _ri);
}
exports.getMaxNumNetworkVehicles = getMaxNumNetworkVehicles;
function getMaxRangeOfCurrentPedWeapon(ped) {
    return _in(0x814c9d19, 0xdfd69679, ped, _r, _rf);
}
exports.getMaxRangeOfCurrentPedWeapon = getMaxRangeOfCurrentPedWeapon;
/**
 * Gets the maximum wanted level the player can get.
 * Ranges from 0 to 5.
 */
function getMaxWantedLevel() {
    return _in(0x462e0db9, 0xb137dc5f, _r, _ri);
}
exports.getMaxWantedLevel = getMaxWantedLevel;
/**
 * This function is hard-coded to always return 96.
 */
function getMaximumNumberOfCloudPhotos() {
    return _in(0xdc54a7af, 0x8b3a14ef, _r, _ri);
}
exports.getMaximumNumberOfCloudPhotos = getMaximumNumberOfCloudPhotos;
/**
 * This function is hard-coded to always return 0.
 */
function getMaximumNumberOfPhotos() {
    return _in(0x34d23450, 0xf028b0bf, _r, _ri);
}
exports.getMaximumNumberOfPhotos = getMaximumNumberOfPhotos;
function getMeleeTargetForPed(ped) {
    return _in(0x18a3e9ee, 0x1297fd39, ped, _r, _ri);
}
exports.getMeleeTargetForPed = getMeleeTargetForPed;
/**
 * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
 * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
 * selectedItemUniqueId: this is uniqueID of the currently selected menu item
 *
 * when the pausemenu is closed:
 * lastItemMenuId = -1
 * selectedItemMenuId = -1
 * selectedItemUniqueId = 0
 *
 * when the header gains focus:
 * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
 * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
 * selectedItemUniqueId = -1
 *
 * when focus is moved from the header to a pausemenu page:
 * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
 * selectedItemMenuId = -1
 * selectedItemUniqueId updates as normal
 * @param lastItemMenuId
 * @param selectedItemMenuId
 * @param selectedItemUniqueId
 */
function getMenuLayoutChangedEventDetails() {
    const [lastItemMenuId_out, selectedItemMenuId_out, selectedItemUniqueId_out] = _in(0x7e17be53, 0xe1aaabaf, _i, _i, _i);
    return [lastItemMenuId_out, selectedItemMenuId_out, selectedItemUniqueId_out];
}
exports.getMenuLayoutChangedEventDetails = getMenuLayoutChangedEventDetails;
/**
 * p0 was always 0xAE2602A3.
 * @param statHash
 * @param outValue
 */
function getMenuPedBoolStat(statHash, outValue) {
    const [retval, outValue_out] = _in(0x052991e5, 0x9076e4e4, _ch(statHash), _i, _r);
    return [retval, outValue_out];
}
exports.getMenuPedBoolStat = getMenuPedBoolStat;
function getMenuPedFloatStat(statHash, outValue) {
    const [retval, outValue_out] = _in(0x5fbd7095, 0xfe7ae57f, _ch(statHash), _fi(outValue), _r);
    return [retval, outValue_out];
}
exports.getMenuPedFloatStat = getMenuPedFloatStat;
function getMenuPedIntStat(p0, p1) {
    const [retval, p1_out] = _in(0xef4ced81, 0xcebedc6d, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.getMenuPedIntStat = getMenuPedIntStat;
function getMenuPedMaskedIntStat(statHash, mask, p3) {
    const [retval, outValue_out] = _in(0x90a6526c, 0xf0381030, _ch(statHash), _i, mask, p3, _r);
    return [retval, outValue_out];
}
exports.getMenuPedMaskedIntStat = getMenuPedMaskedIntStat;
function getMenuTriggerEventDetails() {
    const [lastItemMenuId_out, selectedItemUniqueId_out] = _in(0x36c1451a, 0x88a09630, _i, _i);
    return [lastItemMenuId_out, selectedItemUniqueId_out];
}
exports.getMenuTriggerEventDetails = getMenuTriggerEventDetails;
function getMillisecondsPerGameMinute() {
    return _in(0x2f8b4d1c, 0x595b11db, _r, _ri);
}
exports.getMillisecondsPerGameMinute = getMillisecondsPerGameMinute;
function getMinimapFowCoordinateIsRevealed(x, y, z) {
    return _in(0x6e31b911, 0x45873922, _fv(x), _fv(y), _fv(z), _r);
}
exports.getMinimapFowCoordinateIsRevealed = getMinimapFowCoordinateIsRevealed;
function getMinimapFowDiscoveryRatio() {
    return _in(0xe0130b41, 0xd3cf4574, _r, _rf);
}
exports.getMinimapFowDiscoveryRatio = getMinimapFowDiscoveryRatio;
function getMissionFlag() {
    return _in(0xa33cdccd, 0xa663159e, _r);
}
exports.getMissionFlag = getMissionFlag;
function getMobilePhonePosition(position) {
    return _in(0x584fdfda, 0x48805b86, _v);
}
exports.getMobilePhonePosition = getMobilePhonePosition;
function getMobilePhoneRenderId(renderId) {
    return _in(0xb4a53e05, 0xf68b6fa1, _ii(renderId));
}
exports.getMobilePhoneRenderId = getMobilePhoneRenderId;
function getMobilePhoneRotation(p1) {
    return _in(0x1cefb61f, 0x193070ae, _v, p1);
}
exports.getMobilePhoneRotation = getMobilePhoneRotation;
/**
 * Returns the name for the type of vehicle mod(Armour, engine etc)
 *
 * @param vehicle
 * @param modType
 */
function getModSlotName(vehicle, modType) {
    return _in(0x51f0feb9, 0xf6ae98c0, vehicle, modType, _r, _s);
}
exports.getModSlotName = getModSlotName;
/**
 * Returns the text label of a mod type for a given vehicle
 *
 * Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language
 * @param vehicle
 * @param modType
 * @param modValue
 */
function getModTextLabel(vehicle, modType, modValue) {
    return _in(0x8935624f, 0x8c5592cc, vehicle, modType, modValue, _r, _s);
}
exports.getModTextLabel = getModTextLabel;
/**
 * Gets the dimensions of a model.
 *
 * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
 *
 * Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
 * @param modelHash
 * @param minimum
 * @param maximum
 */
function getModelDimensions(modelHash) {
    const [minimum_out, maximum_out] = _in(0x03e8d3d5, 0xf549087a, _ch(modelHash), _v, _v);
    return [_mv(minimum_out), _mv(maximum_out)];
}
exports.getModelDimensions = getModelDimensions;
/**
 * Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
 */
function getMotionblurMaxVelScaler() {
    return _in(0xe59343e9, 0xe96529e7, _r, _rf);
}
exports.getMotionblurMaxVelScaler = getMotionblurMaxVelScaler;
/**
 *
 * Function just returns 0
 * void __fastcall ped__get_mount(NativeContext *a1)
 * {
 * NativeContext *v1; // rbx@1
 *
 * v1 = a1;
 * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
 * v1->Returns->Item1= 0;
 * }
 * @param ped
 */
function getMount(ped) {
    return _in(0xe7e11b8d, 0xcbed1058, ped, _r, _ri);
}
exports.getMount = getMount;
function getMouseEvent(scaleformHandle) {
    const [retval, p1_out, p2_out, p3_out] = _in(0x632b2940, 0xc67f4ea9, scaleformHandle, _i, _i, _i, _r);
    return [retval, p1_out, p2_out, p3_out];
}
exports.getMouseEvent = getMouseEvent;
function getMpLightEnabled(ped) {
    return _in(0x88274c11, 0xcf0d866d, ped, _r);
}
exports.getMpLightEnabled = getMpLightEnabled;
function getMpOutfitDataFromMetadata() {
    const [retval, p0_out, p1_out] = _in(0x9e30e91f, 0xb03a2caf, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.getMpOutfitDataFromMetadata = getMpOutfitDataFromMetadata;
function getMusicPlaytime() {
    return _in(0xe7a0d23d, 0xc414507b, _r, _ri);
}
exports.getMusicPlaytime = getMusicPlaytime;
function getMusicVolSlider() {
    return _in(0x3a48ab44, 0x45d499be, _r, _ri);
}
exports.getMusicVolSlider = getMusicVolSlider;
function getNameOfScriptWithThisId(threadId) {
    return _in(0x05a42ba9, 0xfc8da96b, threadId, _r, _s);
}
exports.getNameOfScriptWithThisId = getNameOfScriptWithThisId;
/**
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 *
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param x
 * @param y
 * @param z
 */
function getNameOfZone(x, y, z) {
    return _in(0xcd90657d, 0x4c30e1ca, _fv(x), _fv(y), _fv(z), _r, _s);
}
exports.getNameOfZone = getNameOfZone;
function getNamedRendertargetRenderId(name) {
    return _in(0x1a6478b6, 0x1c6bdc3b, _ts(name), _r, _ri);
}
exports.getNamedRendertargetRenderId = getNamedRendertargetRenderId;
/**
 * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
 * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
 * Looks like the native returns an int for the path's state:
 * 1 - ???
 * 2 - ???
 * 3 - Finished Generating
 * @param ped
 * @param distanceRemaining
 * @param isPathReady
 */
function getNavmeshRouteDistanceRemaining(ped) {
    const [retval, distanceRemaining_out, isPathReady_out] = _in(0xc6f5c0bc, 0xdc74d62d, ped, _f, _i, _r, _ri);
    return [retval, distanceRemaining_out, isPathReady_out];
}
exports.getNavmeshRouteDistanceRemaining = getNavmeshRouteDistanceRemaining;
/**
 * See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
 * @param ped
 */
function getNavmeshRouteResult(ped) {
    return _in(0x632e831f, 0x382a0fa8, ped, _r, _ri);
}
exports.getNavmeshRouteResult = getNavmeshRouteResult;
function getNearestParticipantToEntity(entity) {
    return _in(0xffbd7052, 0xd65be0ff, entity, _r, _ri);
}
exports.getNearestParticipantToEntity = getNearestParticipantToEntity;
function getNearestPlayerToEntity(entity) {
    return _in(0x7196842c, 0xb375cdb3, entity, _r, _ri);
}
exports.getNearestPlayerToEntity = getNearestPlayerToEntity;
function getNearestPlayerToEntityOnTeam(entity, team) {
    return _in(0x4dc9a62f, 0x844d9337, entity, team, _r, _ri);
}
exports.getNearestPlayerToEntityOnTeam = getNearestPlayerToEntityOnTeam;
/**
 * Could this be used alongside either,
 * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
 * @param soundId
 */
function getNetworkIdFromSoundId(soundId) {
    return _in(0x2de3f0a1, 0x34ffbc0d, soundId, _r, _ri);
}
exports.getNetworkIdFromSoundId = getNetworkIdFromSoundId;
function getNetworkTime() {
    return _in(0x7a5487fe, 0x9faa6b48, _r, _ri);
}
exports.getNetworkTime = getNetworkTime;
/**
 * Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
 * Could be used for benchmarking since it can return times in ticks.
 */
function getNetworkTimeAccurate() {
    return _in(0x89023fbb, 0xf9200e9f, _r, _ri);
}
exports.getNetworkTimeAccurate = getNetworkTimeAccurate;
function getNewSelectedMissionCreatorBlip() {
    return _in(0x5c90988e, 0x7c8e1af4, _r, _ri);
}
exports.getNewSelectedMissionCreatorBlip = getNewSelectedMissionCreatorBlip;
function getNextAudibleBeat() {
    const [retval, out1_out, out2_out, out3_out] = _in(0xc64a06d9, 0x39f826f5, _f, _f, _i, _r);
    return [retval, out1_out, out2_out, out3_out];
}
exports.getNextAudibleBeat = getNextAudibleBeat;
function getNextBlipInfoId(blipSprite) {
    return _in(0x14f96aa5, 0x0d6fbea7, blipSprite, _r, _ri);
}
exports.getNextBlipInfoId = getNextBlipInfoId;
/**
 * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
 */
function getNextGpsDisabledZoneIndex() {
    return _in(0xd3a6a0ef, 0x48823a8c, _r, _ri);
}
exports.getNextGpsDisabledZoneIndex = getNextGpsDisabledZoneIndex;
/**
 * Returns weather name hash
 */
function getNextWeatherTypeHashName() {
    return _in(0x711327cd, 0x09c8f162, _r, _ri);
}
exports.getNextWeatherTypeHashName = getNextWeatherTypeHashName;
function getNoLoadingScreen() {
    return _in(0x18c1270e, 0xa7f199bc, _r);
}
exports.getNoLoadingScreen = getNoLoadingScreen;
function getNorthBlidIndex() {
    return _in(0x3f0cf9cb, 0x7e589b88, _r, _ri);
}
exports.getNorthBlidIndex = getNorthBlidIndex;
function getNthClosestVehicleNode(x, y, z, nthClosest, nodeFlags, unknown1, unknown2) {
    const [retval, outPosition_out] = _in(0xe50e5241, 0x6ccf948b, _fv(x), _fv(y), _fv(z), nthClosest, _v, nodeFlags, _fv(unknown1), _fv(unknown2), _r);
    return [retval, _mv(outPosition_out)];
}
exports.getNthClosestVehicleNode = getNthClosestVehicleNode;
/**
 * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
 *
 * p10 always equals 3.0
 * p11 always equals 0
 * @param x
 * @param y
 * @param z
 * @param desiredX
 * @param desiredY
 * @param desiredZ
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param nodeFlags
 * @param p10
 * @param p11
 */
function getNthClosestVehicleNodeFavourDirection(x, y, z, desiredX, desiredY, desiredZ, nthClosest, nodeFlags, p10, p11) {
    const [retval, outPosition_out, outHeading_out] = _in(0x45905be8, 0x654ae067, _fv(x), _fv(y), _fv(z), _fv(desiredX), _fv(desiredY), _fv(desiredZ), nthClosest, _v, _f, nodeFlags, _fv(p10), _fv(p11), _r);
    return [retval, _mv(outPosition_out), outHeading_out];
}
exports.getNthClosestVehicleNodeFavourDirection = getNthClosestVehicleNodeFavourDirection;
/**
 * Returns the id.
 * @param x
 * @param y
 * @param z
 * @param nth
 * @param nodeFlags
 * @param p5
 * @param p6
 */
function getNthClosestVehicleNodeId(x, y, z, nth, nodeFlags, p5, p6) {
    return _in(0x22d7275a, 0x79fe8215, _fv(x), _fv(y), _fv(z), nth, nodeFlags, _fv(p5), _fv(p6), _r, _ri);
}
exports.getNthClosestVehicleNodeId = getNthClosestVehicleNodeId;
function getNthClosestVehicleNodeIdWithHeading(x, y, z, nthClosest, nodeFlags, p7, p8) {
    const [retval, outPosition_out, outHeading_out] = _in(0x6448050e, 0x9c2a7207, _fv(x), _fv(y), _fv(z), nthClosest, _v, _f, nodeFlags, _fv(p7), _fv(p8), _r, _ri);
    return [retval, _mv(outPosition_out), outHeading_out];
}
exports.getNthClosestVehicleNodeIdWithHeading = getNthClosestVehicleNodeIdWithHeading;
/**
 * Get the nth closest vehicle node and its heading.
 * @param x
 * @param y
 * @param z
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param outNumLanes
 * @param nodeFlags
 * @param unknown3
 * @param unknown4
 */
function getNthClosestVehicleNodeWithHeading(x, y, z, nthClosest, nodeFlags, unknown3, unknown4) {
    const [retval, outPosition_out, outHeading_out, outNumLanes_out] = _in(0x80ca6a8b, 0x6c094cc4, _fv(x), _fv(y), _fv(z), nthClosest, _v, _f, _i, nodeFlags, _fv(unknown3), _fv(unknown4), _r);
    return [retval, _mv(outPosition_out), outHeading_out, outNumLanes_out];
}
exports.getNthClosestVehicleNodeWithHeading = getNthClosestVehicleNodeWithHeading;
function getNumCommerceItems() {
    return _in(0xf2eac213, 0xd5ea0623, _r, _ri);
}
exports.getNumCommerceItems = getNumCommerceItems;
function getNumCreatedMissionObjects(p0) {
    return _in(0x12b6281b, 0x6c6706c0, p0, _r, _ri);
}
exports.getNumCreatedMissionObjects = getNumCreatedMissionObjects;
function getNumCreatedMissionPeds(p0) {
    return _in(0xcb215c4b, 0x56a7fae7, p0, _r, _ri);
}
exports.getNumCreatedMissionPeds = getNumCreatedMissionPeds;
function getNumCreatedMissionVehicles(p0) {
    return _in(0x0cd9ab83, 0x489430ea, p0, _r, _ri);
}
exports.getNumCreatedMissionVehicles = getNumCreatedMissionVehicles;
function getNumDlcVehicles() {
    return _in(0xa7a866d2, 0x1cd2329b, _r, _ri);
}
exports.getNumDlcVehicles = getNumDlcVehicles;
/**
 * Returns the total number of DLC weapon components.
 * @param dlcWeaponIndex
 */
function getNumDlcWeaponComponents(dlcWeaponIndex) {
    return _in(0x40542535, 0x8a7d61fe, dlcWeaponIndex, _r, _ri);
}
exports.getNumDlcWeaponComponents = getNumDlcWeaponComponents;
/**
 * Returns the total number of DLC weapon components that are available in SP.
 * @param dlcWeaponIndex
 */
function getNumDlcWeaponComponentsSp(dlcWeaponIndex) {
    return _in(0xad2a7a6d, 0xff55841b, dlcWeaponIndex, _r, _ri);
}
exports.getNumDlcWeaponComponentsSp = getNumDlcWeaponComponentsSp;
/**
 * Returns the total number of DLC weapons.
 */
function getNumDlcWeapons() {
    return _in(0xee47635f, 0x352da367, _r, _ri);
}
exports.getNumDlcWeapons = getNumDlcWeapons;
/**
 * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
 */
function getNumDlcWeaponsSp() {
    return _in(0x4160b65a, 0xe085b5a9, _r, _ri);
}
exports.getNumDlcWeaponsSp = getNumDlcWeaponsSp;
/**
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 * @param paintType
 * @param p1
 */
function getNumModColors(paintType, p1) {
    return _in(0xa551be18, 0xc11a476d, paintType, p1, _r, _ri);
}
exports.getNumModColors = getNumModColors;
function getNumModKits(vehicle) {
    return _in(0x33f2e3fe, 0x70eaae1d, vehicle, _r, _ri);
}
exports.getNumModKits = getNumModKits;
function getNumNavmeshesExistingInArea(x1, y1, z1, x2, y2, z2) {
    return _in(0x01708e8d, 0xd3ff8c65, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri);
}
exports.getNumNavmeshesExistingInArea = getNumNavmeshesExistingInArea;
function getNumPedHairTints() {
    return _in(0xe5c0cf87, 0x2c2ad150, _r, _ri);
}
exports.getNumPedHairTints = getNumPedHairTints;
function getNumPedMakeupTints() {
    return _in(0xd1f7ca15, 0x35d22818, _r, _ri);
}
exports.getNumPedMakeupTints = getNumPedMakeupTints;
/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
function getNumReservedMissionObjects(p0, p1) {
    return _in(0xaa81b5f1, 0x0bc43ac2, p0, p1, _r, _ri);
}
exports.getNumReservedMissionObjects = getNumReservedMissionObjects;
/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
function getNumReservedMissionPeds(p0, p1) {
    return _in(0x1f13d5ae, 0x5cb17e17, p0, p1, _r, _ri);
}
exports.getNumReservedMissionPeds = getNumReservedMissionPeds;
/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
function getNumReservedMissionVehicles(p0, p1) {
    return _in(0xcf3a9659, 0x06452031, p0, p1, _r, _ri);
}
exports.getNumReservedMissionVehicles = getNumReservedMissionVehicles;
function getNumSuccessfulStuntJumps() {
    return _in(0x996dd1e1, 0xe02f1008, _r, _ri);
}
exports.getNumSuccessfulStuntJumps = getNumSuccessfulStuntJumps;
/**
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * @param character
 */
function getNumTattooShopDlcItems(character) {
    return _in(0x278f76c3, 0xb0a8f109, character, _r, _ri);
}
exports.getNumTattooShopDlcItems = getNumTattooShopDlcItems;
function getNumUnlockedRadioStations() {
    return _in(0xf1620ecb, 0x50e01de7, _r, _ri);
}
exports.getNumUnlockedRadioStations = getNumUnlockedRadioStations;
/**
 * Returns how many possible mods a vehicle has for a given mod type
 * @param vehicle
 * @param modType
 */
function getNumVehicleMods(vehicle, modType) {
    return _in(0xe38e9162, 0xa2500646, vehicle, modType, _r, _ri);
}
exports.getNumVehicleMods = getNumVehicleMods;
function getNumVehicleWindowTints() {
    return _in(0x9d122400, 0x4b3a6707, _r, _ri);
}
exports.getNumVehicleWindowTints = getNumVehicleWindowTints;
function getNumberOfActiveBlips() {
    return _in(0x9a3ff3de, 0x163034e8, _r, _ri);
}
exports.getNumberOfActiveBlips = getNumberOfActiveBlips;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 */
function getNumberOfEvents(eventGroup) {
    return _in(0x5f92a689, 0xa06620aa, eventGroup, _r, _ri);
}
exports.getNumberOfEvents = getNumberOfEvents;
function getNumberOfFiresInRange(x, y, z, radius) {
    return _in(0x50cad495, 0xa460b305, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri);
}
exports.getNumberOfFiresInRange = getNumberOfFiresInRange;
function getNumberOfFreeStacksOfThisSize(stackSize) {
    return _in(0xfead16fc, 0x8f9dfc0f, stackSize, _r, _ri);
}
exports.getNumberOfFreeStacksOfThisSize = getNumberOfFreeStacksOfThisSize;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
function getNumberOfPedDrawableVariations(ped, componentId) {
    return _in(0x27561561, 0x732a7842, ped, componentId, _r, _ri);
}
exports.getNumberOfPedDrawableVariations = getNumberOfPedDrawableVariations;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 */
function getNumberOfPedPropDrawableVariations(ped, propId) {
    return _in(0x5faf9754, 0xe789fb47, ped, propId, _r, _ri);
}
exports.getNumberOfPedPropDrawableVariations = getNumberOfPedPropDrawableVariations;
/**
 * Need to check behavior when drawableId = -1
 *
 * - Doofy.Ass
 * Why this function doesn't work and return nill value?
 * GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
 *
 * tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
 *
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 * @param drawableId
 */
function getNumberOfPedPropTextureVariations(ped, propId, drawableId) {
    return _in(0xa6e7f1ce, 0xb523e171, ped, propId, drawableId, _r, _ri);
}
exports.getNumberOfPedPropTextureVariations = getNumberOfPedPropTextureVariations;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 */
function getNumberOfPedTextureVariations(ped, componentId, drawableId) {
    return _in(0x8f7156a3, 0x142a6bad, ped, componentId, drawableId, _r, _ri);
}
exports.getNumberOfPedTextureVariations = getNumberOfPedTextureVariations;
/**
 * Gets the number of players in the current session.
 * If not multiplayer, always returns 1.
 */
function getNumberOfPlayers() {
    return _in(0x407c7f91, 0xddb46c16, _r, _ri);
}
exports.getNumberOfPlayers = getNumberOfPlayers;
function getNumberOfPlayersInTeam(team) {
    return _in(0x1fc20040, 0x9f10e6f1, team, _r, _ri);
}
exports.getNumberOfPlayersInTeam = getNumberOfPlayersInTeam;
function getNumberOfStreamingRequests() {
    return _in(0x40600572, 0x71cebc89, _r, _ri);
}
exports.getNumberOfStreamingRequests = getNumberOfStreamingRequests;
/**
 * Gets the number of instances of the specified script is currently running.
 *
 * Actually returns numRefs - 1.
 * if (program)
 * v3 = rage::scrProgram::GetNumRefs(program) - 1;
 * return v3;
 * @param scriptHash
 */
function getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash) {
    return _in(0x2c83a9da, 0x6bffc4f9, _ch(scriptHash), _r, _ri);
}
exports.getNumberOfThreadsRunningTheScriptWithThisHash = getNumberOfThreadsRunningTheScriptWithThisHash;
/**
 * Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.
 * @param vehicle
 */
function getNumberOfVehicleColours(vehicle) {
    return _in(0x3b963160, 0xcd65d41e, vehicle, _r, _ri);
}
exports.getNumberOfVehicleColours = getNumberOfVehicleColours;
function getNumberOfVehicleDoors(vehicle) {
    return _in(0x92922a60, 0x7497b14d, vehicle, _r, _ri);
}
exports.getNumberOfVehicleDoors = getNumberOfVehicleDoors;
/**
 * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
 */
function getNumberOfVehicleNumberPlates() {
    return _in(0x4c4d6b26, 0x44f458cb, _r, _ri);
}
exports.getNumberOfVehicleNumberPlates = getNumberOfVehicleNumberPlates;
function getNumberResourcesAllocatedToWantedLevel(dispatchService) {
    return _in(0xeb4a0c2d, 0x56441717, dispatchService, _r, _ri);
}
exports.getNumberResourcesAllocatedToWantedLevel = getNumberResourcesAllocatedToWantedLevel;
function getObjectFragmentDamageHealth(p0, p1) {
    return _in(0xb6fbfd07, 0x9b8d0596, p0, p1, _r, _rf);
}
exports.getObjectFragmentDamageHealth = getObjectFragmentDamageHealth;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
function getObjectIndexFromEntityIndex(entity) {
    return _in(0xd7e3b973, 0x5c0f89d6, entity, _r, _ri);
}
exports.getObjectIndexFromEntityIndex = getObjectIndexFromEntityIndex;
function getObjectTintIndex(object) {
    return _in(0xe84eb937, 0x29c5f36a, object, _r, _ri);
}
exports.getObjectTintIndex = getObjectTintIndex;
function getOffsetFromCoordAndHeadingInWorldCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset) {
    return _mv(_in(0x163e252d, 0xe035a133, _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), _fv(xOffset), _fv(yOffset), _fv(zOffset), _r, _rv));
}
exports.getOffsetFromCoordAndHeadingInWorldCoords = getOffsetFromCoordAndHeadingInWorldCoords;
/**
 * Converts world coords (posX - Z) to coords relative to the entity
 *
 * Example:
 * posX is given as 50
 * entity's x coord is 40
 * the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
 * @param entity
 * @param posX
 * @param posY
 * @param posZ
 */
function getOffsetFromEntityGivenWorldCoords(entity, posX, posY, posZ) {
    return _mv(_in(0x2274bc1c, 0x4885e333, entity, _fv(posX), _fv(posY), _fv(posZ), _r, _rv));
}
exports.getOffsetFromEntityGivenWorldCoords = getOffsetFromEntityGivenWorldCoords;
/**
 * Offset values are relative to the entity.
 *
 * x = left/right
 * y = forward/backward
 * z = up/down
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
function getOffsetFromEntityInWorldCoords(entity, offsetX, offsetY, offsetZ) {
    return _mv(_in(0x1899f328, 0xb0e12848, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv));
}
exports.getOffsetFromEntityInWorldCoords = getOffsetFromEntityInWorldCoords;
function getOffsetFromInteriorInWorldCoords(interior, x, y, z) {
    return _mv(_in(0x9e3b3e6d, 0x66f6e22f, interior, _fv(x), _fv(y), _fv(z), _r, _rv));
}
exports.getOffsetFromInteriorInWorldCoords = getOffsetFromInteriorInWorldCoords;
/**
 * Online version is defined here: update\update.rpf\common\data\version.txt
 *
 * Example:
 *
 * [ONLINE_VERSION_NUMBER]
 * 1.33
 *
 * _GET_ONLINE_VERSION() will return "1.33"
 */
function getOnlineVersion() {
    return _in(0xfca9373e, 0xf340ac0a, _r, _s);
}
exports.getOnlineVersion = getOnlineVersion;
/**
 * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
 */
function getOnscreenKeyboardResult() {
    return _in(0x8362b09b, 0x91893647, _r, _s);
}
exports.getOnscreenKeyboardResult = getOnscreenKeyboardResult;
/**
 * Checks if Chernobog's stabilizers are deployed or not.
 * These are the metal supports that allow it to fire.
 * This native only applies to the Chernobog.
 * @param vehicle
 */
function getOutriggersDeployed(vehicle) {
    return _in(0x3a912835, 0x2eac9e85, vehicle, _r);
}
exports.getOutriggersDeployed = getOutriggersDeployed;
/**
 * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
 *
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 */
function getOwnerOfExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, radius) {
    return _in(0x14ba4ba1, 0x37af6cec, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), _r, _ri);
}
exports.getOwnerOfExplosionInAngledArea = getOwnerOfExplosionInAngledArea;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
function getOwnerOfExplosionInSphere(explosionType, x, y, z, radius) {
    return _in(0xb3cd51e3, 0xdb86f176, explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri);
}
exports.getOwnerOfExplosionInSphere = getOwnerOfExplosionInSphere;
function getPackedIntStatKey(index, spStat, charStat, character) {
    return _in(0x61e111e3, 0x23419e07, index, spStat, charStat, character, _r, _ri);
}
exports.getPackedIntStatKey = getPackedIntStatKey;
/**
 * Needs more research. Gets the stat name of a masked int?
 *
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_INT"
 * "_MP_NGPSTAT_INT"
 * "_MP_LRPSTAT_INT"
 * "_MP_APAPSTAT_INT"
 * "_MP_LR2PSTAT_INT"
 * "_MP_BIKEPSTAT_INT"
 * "_MP_IMPEXPPSTAT_INT"
 * "_MP_GUNRPSTAT_INT"
 * "_NGDLCPSTAT_INT"
 * "_MP_NGDLCPSTAT_INT"
 * "_DLCSMUGCHARPSTAT_INT"
 * "_GANGOPSPSTAT_INT"
 * "_BUSINESSBATPSTAT_INT"
 * "_ARENAWARSPSTAT_INT"
 * "_CASINOPSTAT_INT"
 * "_CASINOHSTPSTAT_INT"
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 * @param section
 */
function getPackedNgIntStatKey(index, spStat, charStat, character, section) {
    return _in(0x2b4cdca6, 0xf07ff3da, index, spStat, charStat, character, _ts(section), _r, _ri);
}
exports.getPackedNgIntStatKey = getPackedNgIntStatKey;
function getPackedStatBoolCode(index, characterSlot) {
    return _in(0xda7ebfc4, 0x9ae3f1b0, index, characterSlot, _r);
}
exports.getPackedStatBoolCode = getPackedStatBoolCode;
function getPackedStatIntCode(index, characterSlot) {
    return _in(0x0bc900a6, 0xfe73770c, index, characterSlot, _r, _ri);
}
exports.getPackedStatIntCode = getPackedStatIntCode;
function getPackedTuIntStatKey(index, spStat, charStat, character) {
    return _in(0xd16c2ad6, 0xb8e32854, index, spStat, charStat, character, _r, _ri);
}
exports.getPackedTuIntStatKey = getPackedTuIntStatKey;
function getPatrolTaskInfo(ped) {
    const [retval, timeLeftAtNode_out, nodeId_out] = _in(0x52f734ce, 0xbe20dfba, ped, _i, _i, _r);
    return [retval, timeLeftAtNode_out, nodeId_out];
}
exports.getPatrolTaskInfo = getPatrolTaskInfo;
function getPauseMenuPosition() {
    return _mv(_in(0x5bff36d6, 0xed83e0ae, _r, _rv));
}
exports.getPauseMenuPosition = getPauseMenuPosition;
/**
 * Returns:
 *
 * 0
 * 5
 * 10
 * 15
 * 20
 * 25
 * 30
 * 35
 *
 */
function getPauseMenuState() {
    return _in(0x272acd84, 0x970869c5, _r, _ri);
}
exports.getPauseMenuState = getPauseMenuState;
function getPedAccuracy(ped) {
    return _in(0x37f4ad56, 0xecbc0cd6, ped, _r, _ri);
}
exports.getPedAccuracy = getPedAccuracy;
/**
 * Returns the ped's alertness (0-3).
 *
 * Values :
 *
 * 0 : Neutral
 * 1 : Heard something (gun shot, hit, etc)
 * 2 : Knows (the origin of the event)
 * 3 : Fully alerted (is facing the event?)
 *
 * If the Ped does not exist, returns -1.
 * @param ped
 */
function getPedAlertness(ped) {
    return _in(0xf6aa1185, 0x30443fd2, ped, _r, _ri);
}
exports.getPedAlertness = getPedAlertness;
function getPedAmmoByType(ped, ammoTypeHash) {
    return _in(0x39d22031, 0x557946c1, ped, _ch(ammoTypeHash), _r, _ri);
}
exports.getPedAmmoByType = getPedAmmoByType;
/**
 * Returns the current ammo type of the specified ped's specified weapon.
 * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
 * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
function getPedAmmoTypeFromWeapon(ped, weaponHash) {
    return _in(0x7fead38b, 0x326b9f74, ped, _ch(weaponHash), _r, _ri);
}
exports.getPedAmmoTypeFromWeapon = getPedAmmoTypeFromWeapon;
function getPedArmour(ped) {
    return _in(0x9483af82, 0x1605b1d8, ped, _r, _ri);
}
exports.getPedArmour = getPedArmour;
function getPedAsGroupLeader(groupID) {
    return _in(0x5cce68db, 0xd5fe93ec, groupID, _r, _ri);
}
exports.getPedAsGroupLeader = getPedAsGroupLeader;
/**
 * from fm_mission_controller.c4 (variable names changed for clarity):
 *
 * int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
 * PED::GET_GROUP_SIZE(group, &unused, &groupSize);
 * if (groupSize >= 1) {
 * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
 * . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
 * . . . . . . . . //and so on
 * @param groupID
 * @param memberNumber
 */
function getPedAsGroupMember(groupID, memberNumber) {
    return _in(0x51455483, 0xcf23ed97, groupID, memberNumber, _r, _ri);
}
exports.getPedAsGroupMember = getPedAsGroupMember;
/**
 * Gets the position of the specified bone of the specified ped.
 *
 * ped: The ped to get the position of a bone from.
 * boneId: The ID of the bone to get the position from. This is NOT the index.
 * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
 * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
 * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
 * @param ped
 * @param boneId
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
function getPedBoneCoords(ped, boneId, offsetX, offsetY, offsetZ) {
    return _mv(_in(0x17c07fc6, 0x40e86b4e, ped, boneId, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv));
}
exports.getPedBoneCoords = getPedBoneCoords;
/**
 * no bone= -1
 *
 * boneIds:
 * SKEL_ROOT = 0x0,
 * SKEL_Pelvis = 0x2e28,
 * SKEL_L_Thigh = 0xe39f,
 * SKEL_L_Calf = 0xf9bb,
 * SKEL_L_Foot = 0x3779,
 * SKEL_L_Toe0 = 0x83c,
 * IK_L_Foot = 0xfedd,
 * PH_L_Foot = 0xe175,
 * MH_L_Knee = 0xb3fe,
 * SKEL_R_Thigh = 0xca72,
 * SKEL_R_Calf = 0x9000,
 * SKEL_R_Foot = 0xcc4d,
 * SKEL_R_Toe0 = 0x512d,
 * IK_R_Foot = 0x8aae,
 * PH_R_Foot = 0x60e6,
 * MH_R_Knee = 0x3fcf,
 * RB_L_ThighRoll = 0x5c57,
 * RB_R_ThighRoll = 0x192a,
 * SKEL_Spine_Root = 0xe0fd,
 * SKEL_Spine0 = 0x5c01,
 * SKEL_Spine1 = 0x60f0,
 * SKEL_Spine2 = 0x60f1,
 * SKEL_Spine3 = 0x60f2,
 * SKEL_L_Clavicle = 0xfcd9,
 * SKEL_L_UpperArm = 0xb1c5,
 * SKEL_L_Forearm = 0xeeeb,
 * SKEL_L_Hand = 0x49d9,
 * SKEL_L_Finger00 = 0x67f2,
 * SKEL_L_Finger01 = 0xff9,
 * SKEL_L_Finger02 = 0xffa,
 * SKEL_L_Finger10 = 0x67f3,
 * SKEL_L_Finger11 = 0x1049,
 * SKEL_L_Finger12 = 0x104a,
 * SKEL_L_Finger20 = 0x67f4,
 * SKEL_L_Finger21 = 0x1059,
 * SKEL_L_Finger22 = 0x105a,
 * SKEL_L_Finger30 = 0x67f5,
 * SKEL_L_Finger31 = 0x1029,
 * SKEL_L_Finger32 = 0x102a,
 * SKEL_L_Finger40 = 0x67f6,
 * SKEL_L_Finger41 = 0x1039,
 * SKEL_L_Finger42 = 0x103a,
 * PH_L_Hand = 0xeb95,
 * IK_L_Hand = 0x8cbd,
 * RB_L_ForeArmRoll = 0xee4f,
 * RB_L_ArmRoll = 0x1470,
 * MH_L_Elbow = 0x58b7,
 * SKEL_R_Clavicle = 0x29d2,
 * SKEL_R_UpperArm = 0x9d4d,
 * SKEL_R_Forearm = 0x6e5c,
 * SKEL_R_Hand = 0xdead,
 * SKEL_R_Finger00 = 0xe5f2,
 * SKEL_R_Finger01 = 0xfa10,
 * SKEL_R_Finger02 = 0xfa11,
 * SKEL_R_Finger10 = 0xe5f3,
 * SKEL_R_Finger11 = 0xfa60,
 * SKEL_R_Finger12 = 0xfa61,
 * SKEL_R_Finger20 = 0xe5f4,
 * SKEL_R_Finger21 = 0xfa70,
 * SKEL_R_Finger22 = 0xfa71,
 * SKEL_R_Finger30 = 0xe5f5,
 * SKEL_R_Finger31 = 0xfa40,
 * SKEL_R_Finger32 = 0xfa41,
 * SKEL_R_Finger40 = 0xe5f6,
 * SKEL_R_Finger41 = 0xfa50,
 * SKEL_R_Finger42 = 0xfa51,
 * PH_R_Hand = 0x6f06,
 * IK_R_Hand = 0x188e,
 * RB_R_ForeArmRoll = 0xab22,
 * RB_R_ArmRoll = 0x90ff,
 * MH_R_Elbow = 0xbb0,
 * SKEL_Neck_1 = 0x9995,
 * SKEL_Head = 0x796e,
 * IK_Head = 0x322c,
 * FACIAL_facialRoot = 0xfe2c,
 * FB_L_Brow_Out_000 = 0xe3db,
 * FB_L_Lid_Upper_000 = 0xb2b6,
 * FB_L_Eye_000 = 0x62ac,
 * FB_L_CheekBone_000 = 0x542e,
 * FB_L_Lip_Corner_000 = 0x74ac,
 * FB_R_Lid_Upper_000 = 0xaa10,
 * FB_R_Eye_000 = 0x6b52,
 * FB_R_CheekBone_000 = 0x4b88,
 * FB_R_Brow_Out_000 = 0x54c,
 * FB_R_Lip_Corner_000 = 0x2ba6,
 * FB_Brow_Centre_000 = 0x9149,
 * FB_UpperLipRoot_000 = 0x4ed2,
 * FB_UpperLip_000 = 0xf18f,
 * FB_L_Lip_Top_000 = 0x4f37,
 * FB_R_Lip_Top_000 = 0x4537,
 * FB_Jaw_000 = 0xb4a0,
 * FB_LowerLipRoot_000 = 0x4324,
 * FB_LowerLip_000 = 0x508f,
 * FB_L_Lip_Bot_000 = 0xb93b,
 * FB_R_Lip_Bot_000 = 0xc33b,
 * FB_Tongue_000 = 0xb987,
 * RB_Neck_1 = 0x8b93,
 * IK_Root = 0xdd1c
 * @param ped
 * @param boneId
 */
function getPedBoneIndex(ped, boneId) {
    return _in(0x3f428d08, 0xbe5aae31, ped, boneId, _r, _ri);
}
exports.getPedBoneIndex = getPedBoneIndex;
/**
 * Returns the hash of the weapon/model/object that killed the ped.
 * @param ped
 */
function getPedCauseOfDeath(ped) {
    return _in(0x16ffe42a, 0xb2d2dc59, ped, _r, _ri);
}
exports.getPedCauseOfDeath = getPedCauseOfDeath;
/**
 * See SET_PED_COMBAT_MOVEMENT
 * @param ped
 */
function getPedCombatMovement(ped) {
    return _in(0xdea92412, 0xfcaeb3f5, ped, _r, _ri);
}
exports.getPedCombatMovement = getPedCombatMovement;
/**
 * See SET_PED_COMBAT_RANGE
 * @param ped
 */
function getPedCombatRange(ped) {
    return _in(0xf9d9f7f2, 0xdb8e2fa0, ped, _r, _ri);
}
exports.getPedCombatRange = getPedCombatRange;
/**
 * See SET_PED_CONFIG_FLAG
 * @param ped
 * @param flagId
 * @param p2
 */
function getPedConfigFlag(ped, flagId, p2) {
    return _in(0x7ee53118, 0xc892b513, ped, flagId, p2, _r);
}
exports.getPedConfigFlag = getPedConfigFlag;
function getPedCurrentMoveBlendRatio(ped) {
    const [retval, speedX_out, speedY_out] = _in(0xf60165e1, 0xd2c5370b, ped, _f, _f, _r);
    return [retval, speedX_out, speedY_out];
}
exports.getPedCurrentMoveBlendRatio = getPedCurrentMoveBlendRatio;
/**
 * Returns the zoneID for the overlay if it is a member of collection.
 * enum ePedDecorationZone
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_MEDALS = 6,
 * ZONE_INVALID = 7
 * };
 *
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param collection
 * @param overlay
 */
function getPedDecorationZoneFromHashes(collection, overlay) {
    return _in(0x9fd452bf, 0xbe7a7a8b, _ch(collection), _ch(overlay), _r, _ri);
}
exports.getPedDecorationZoneFromHashes = getPedDecorationZoneFromHashes;
function getPedDecorationsState(ped) {
    return _in(0x71eab450, 0xd86954a1, ped, _r, _ri);
}
exports.getPedDecorationsState = getPedDecorationsState;
function getPedDefensiveAreaPosition(ped, p1) {
    return _mv(_in(0x3c06b878, 0x6dd94cd1, ped, p1, _r, _rv));
}
exports.getPedDefensiveAreaPosition = getPedDefensiveAreaPosition;
function getPedDesiredMoveBlendRatio(ped) {
    return _in(0x8517d4a6, 0xca8513ed, ped, _r, _rf);
}
exports.getPedDesiredMoveBlendRatio = getPedDesiredMoveBlendRatio;
function getPedDiesInWater(ped) {
    return _in(0x65671a4f, 0xb8218930, ped, _r);
}
exports.getPedDiesInWater = getPedDiesInWater;
/**
 * Ids
 * 0 - Head
 * 1 - Beard
 * 2 - Hair
 * 3 - Torso
 * 4 - Legs
 * 5 - Hands
 * 6 - Foot
 * 7 - ------
 * 8 - Accessories 1
 * 9 - Accessories 2
 * 10- Decals
 * 11 - Auxiliary parts for torso
 * @param ped
 * @param componentId
 */
function getPedDrawableVariation(ped, componentId) {
    return _in(0x67f3780d, 0xd425d4fc, ped, componentId, _r, _ri);
}
exports.getPedDrawableVariation = getPedDrawableVariation;
/**
 * Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
 * Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
 * @param ped
 */
function getPedEmissiveScale(ped) {
    return _in(0x1461b28a, 0x06717d68, ped, _r, _rf);
}
exports.getPedEmissiveScale = getPedEmissiveScale;
function getPedEnveffScale(ped) {
    return _in(0x9c14d303, 0x95a51a3c, ped, _r, _rf);
}
exports.getPedEnveffScale = getPedEnveffScale;
/**
 * Gets the offset the specified ped has moved since the previous tick.
 *
 * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
 *
 * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
 * @param ped
 * @param worldSpace
 */
function getPedExtractedDisplacement(ped, worldSpace) {
    return _mv(_in(0xe0af4140, 0x1adf87e3, ped, worldSpace, _r, _rv));
}
exports.getPedExtractedDisplacement = getPedExtractedDisplacement;
/**
 * Returns the group id of which the specified ped is a member of.
 * @param ped
 */
function getPedGroupIndex(ped) {
    return _in(0xf162e133, 0xb4e7a675, ped, _r, _ri);
}
exports.getPedGroupIndex = getPedGroupIndex;
/**
 * Input: Haircolor index, value between 0 and 63 (inclusive).
 * Output: RGB values for the haircolor specified in the input.
 *
 * This is used with the hair color swatches scaleform.
 * Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
 * @param hairColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
function getPedHairTintColor(hairColorIndex) {
    const [outR_out, outG_out, outB_out] = _in(0x4852fc38, 0x6e2e1bb5, hairColorIndex, _i, _i, _i);
    return [outR_out, outG_out, outB_out];
}
exports.getPedHairTintColor = getPedHairTintColor;
/**
 * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
 * pass this struct in the second parameter
 * struct headBlendData
 * {
 * int shapeFirst;
 * int padding1;
 * int shapeSecond;
 * int padding2;
 * int shapeThird;
 * int padding3;
 * int skinFirst;
 * int padding4;
 * int skinSecond;
 * int padding5;
 * int skinThird;
 * int padding6;
 * float shapeMix;
 * int padding7;
 * float skinMix;
 * int padding8;
 * float thirdMix;
 * int padding9;
 * bool isParent;
 * };
 * @param ped
 * @param headBlendData
 */
function getPedHeadBlendData(ped, headBlendData) {
    const [retval, headBlendData_out] = _in(0x2746bd9d, 0x88c5c5d0, ped, _ii(headBlendData), _r);
    return [retval, headBlendData_out];
}
exports.getPedHeadBlendData = getPedHeadBlendData;
/**
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 *
 * Used when calling SET_PED_HEAD_BLEND_DATA.
 * @param type
 */
function getPedHeadBlendFirstIndex(type) {
    return _in(0x68d353ab, 0x88b97e0c, type, _r, _ri);
}
exports.getPedHeadBlendFirstIndex = getPedHeadBlendFirstIndex;
/**
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * @param type
 */
function getPedHeadBlendNumHeads(type) {
    return _in(0x5ef37013, 0xa6539c9d, type, _r, _ri);
}
exports.getPedHeadBlendNumHeads = getPedHeadBlendNumHeads;
/**
 * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
 *
 * This might be the once removed native GET_PED_HEAD_OVERLAY.
 * @param ped
 * @param overlayID
 */
function getPedHeadOverlay(ped, overlayID) {
    return _in(0xa60ef3b6, 0x461a4d43, ped, overlayID, _r, _ri);
}
exports.getPedHeadOverlay = getPedHeadOverlay;
function getPedHeadOverlayNum(overlayID) {
    return _in(0xcf1ce768, 0xbb43480e, overlayID, _r, _ri);
}
exports.getPedHeadOverlayNum = getPedHeadOverlayNum;
function getPedHelmetStoredHatPropIndex(ped) {
    return _in(0x451294e8, 0x59ecc018, ped, _r, _ri);
}
exports.getPedHelmetStoredHatPropIndex = getPedHelmetStoredHatPropIndex;
function getPedHelmetStoredHatTexIndex(ped) {
    return _in(0x9d728c1e, 0x12bf5518, ped, _r, _ri);
}
exports.getPedHelmetStoredHatTexIndex = getPedHelmetStoredHatTexIndex;
/**
 * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
 *
 * Seat indexes:
 * -1 = Driver
 * 0 = Front Right Passenger
 * 1 = Back Left Passenger
 * 2 = Back Right Passenger
 * 3 = Further Back Left Passenger (vehicles > 4 seats)
 * 4 = Further Back Right Passenger (vehicles > 4 seats)
 * etc.
 *
 * If p2 is true it uses a different GetOccupant function.
 * @param vehicle
 * @param seatIndex
 * @param p2
 */
function getPedInVehicleSeat(vehicle, seatIndex, p2) {
    return _in(0xbb40dd22, 0x70b65366, vehicle, seatIndex, p2, _r, _ri);
}
exports.getPedInVehicleSeat = getPedInVehicleSeat;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
function getPedIndexFromEntityIndex(entity) {
    return _in(0x04a2a40c, 0x73395041, entity, _r, _ri);
}
exports.getPedIndexFromEntityIndex = getPedIndexFromEntityIndex;
function getPedLastDamageBone(ped, outBone) {
    const [retval, outBone_out] = _in(0xd75960f6, 0xbd9ea49c, ped, _ii(outBone), _r);
    return [retval, outBone_out];
}
exports.getPedLastDamageBone = getPedLastDamageBone;
/**
 * Pass ped. Pass address of Vector3.
 * The coord will be put into the Vector3.
 * The return will determine whether there was a coord found or not.
 * @param ped
 * @param coords
 */
function getPedLastWeaponImpactCoord(ped, coords) {
    const [retval, coords_out] = _in(0x6c4d0409, 0xba1a2bc2, ped, _v, _r);
    return [retval, _mv(coords_out)];
}
exports.getPedLastWeaponImpactCoord = getPedLastWeaponImpactCoord;
/**
 * Input: Makeup color index, value between 0 and 63 (inclusive).
 * Output: RGB values for the makeup color specified in the input.
 *
 * This is used with the makeup color swatches scaleform.
 * Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
 * @param makeupColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
function getPedMakeupTintColor(makeupColorIndex) {
    const [outR_out, outG_out, outB_out] = _in(0x013e5cfc, 0x38cd5387, makeupColorIndex, _i, _i, _i);
    return [outR_out, outG_out, outB_out];
}
exports.getPedMakeupTintColor = getPedMakeupTintColor;
function getPedMaxHealth(ped) {
    return _in(0x4700a416, 0xe8324ef3, ped, _r, _ri);
}
exports.getPedMaxHealth = getPedMaxHealth;
function getPedMoney(ped) {
    return _in(0x3f69145b, 0xba87bae7, ped, _r, _ri);
}
exports.getPedMoney = getPedMoney;
/**
 * sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
 * ignore - ped type to ignore
 *
 * Return value is the number of peds found and added to the array passed.
 *
 * -----------------------------------
 *
 * To make this work in most menu bases at least in C++ do it like so,
 *
 * Formatted Example: https://pastebin.com/D8an9wwp
 *
 * -----------------------------------
 *
 * Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
 * @param ped
 * @param sizeAndPeds
 * @param ignore
 */
function getPedNearbyPeds(ped, ignore) {
    const [retval, sizeAndPeds_out] = _in(0x23f8f5fc, 0x7e8c4a6b, ped, _i, ignore, _r, _ri);
    return [retval, sizeAndPeds_out];
}
exports.getPedNearbyPeds = getPedNearbyPeds;
/**
 * Returns size of array, passed into the second variable.
 *
 * See below for usage information.
 *
 * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
 *
 * //Setup the array
 * const int numElements = 10;
 * const int arrSize = numElements * 2 + 2;
 * Any veh[arrSize];
 * //0 index is the size of the array
 * veh[0] = numElements;
 *
 * int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
 *
 * if (veh != NULL)
 * {
 * //Simple loop to go through results
 * for (int i = 0; i < count; i++)
 * {
 * int offsettedID = i * 2 + 2;
 * //Make sure it exists
 * if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
 * {
 * //Do something
 * }
 * }
 * }
 * @param ped
 * @param sizeAndVehs
 */
function getPedNearbyVehicles(ped, sizeAndVehs) {
    const [retval, sizeAndVehs_out] = _in(0xcff869cb, 0xfa210d82, ped, _ii(sizeAndVehs), _r, _ri);
    return [retval, sizeAndVehs_out];
}
exports.getPedNearbyVehicles = getPedNearbyVehicles;
/**
 * Returns the base/default ammo type of the specified ped's specified weapon.
 * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
function getPedOriginalAmmoTypeFromWeapon(ped, weaponHash) {
    return _in(0xf489b44d, 0xd5af4bd9, ped, _ch(weaponHash), _r, _ri);
}
exports.getPedOriginalAmmoTypeFromWeapon = getPedOriginalAmmoTypeFromWeapon;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
function getPedPaletteVariation(ped, componentId) {
    return _in(0xe3dd5f2a, 0x84b42281, ped, componentId, _r, _ri);
}
exports.getPedPaletteVariation = getPedPaletteVariation;
/**
 * -1: no landing
 * 0: landing on both feet
 * 1: stumbling
 * 2: rolling
 * 3: ragdoll
 * @param ped
 */
function getPedParachuteLandingType(ped) {
    return _in(0x8b9f1fc6, 0xae8166c0, ped, _r, _ri);
}
exports.getPedParachuteLandingType = getPedParachuteLandingType;
/**
 * Returns:
 *
 * -1: Normal
 * 0: Wearing parachute on back
 * 1: Parachute opening
 * 2: Parachute open
 * 3: Falling to doom (e.g. after exiting parachute)
 *
 * Normal means no parachute?
 * @param ped
 */
function getPedParachuteState(ped) {
    return _in(0x79cfd982, 0x7cc979b6, ped, _r, _ri);
}
exports.getPedParachuteState = getPedParachuteState;
function getPedParachuteTintIndex(ped, outTintIndex) {
    return _in(0xeaf5f7e5, 0xae7c6c9d, ped, _ii(outTintIndex));
}
exports.getPedParachuteTintIndex = getPedParachuteTintIndex;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param p2
 */
function getPedPropIndex(ped, componentId, p2) {
    return _in(0x898cc20e, 0xa75bacd8, ped, componentId, p2, _r, _ri);
}
exports.getPedPropIndex = getPedPropIndex;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
function getPedPropTextureIndex(ped, componentId) {
    return _in(0xe131a286, 0x26f81ab2, ped, componentId, _r, _ri);
}
exports.getPedPropTextureIndex = getPedPropTextureIndex;
function getPedRagdollBoneIndex(ped, bone) {
    return _in(0x2057ef81, 0x3397a772, ped, bone, _r, _ri);
}
exports.getPedRagdollBoneIndex = getPedRagdollBoneIndex;
function getPedRelationshipGroupDefaultHash(ped) {
    return _in(0x42fdd0f0, 0x17b1e38e, ped, _r, _ri);
}
exports.getPedRelationshipGroupDefaultHash = getPedRelationshipGroupDefaultHash;
function getPedRelationshipGroupHash(ped) {
    return _in(0x7dbdd048, 0x62d95f04, ped, _r, _ri);
}
exports.getPedRelationshipGroupHash = getPedRelationshipGroupHash;
function getPedResetFlag(ped, flagId) {
    return _in(0xaf9e59b1, 0xb1fbf2a0, ped, flagId, _r);
}
exports.getPedResetFlag = getPedResetFlag;
/**
 * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
 *
 * Is best to check if the Ped is dead before asking for its killer.
 * @param ped
 */
function getPedSourceOfDeath(ped) {
    return _in(0x93c8b64d, 0xeb84728c, ped, _r, _ri);
}
exports.getPedSourceOfDeath = getPedSourceOfDeath;
/**
 * Returns whether the entity is in stealth mode
 * @param ped
 */
function getPedStealthMovement(ped) {
    return _in(0x7c2ac9ca, 0x66575fbf, ped, _r);
}
exports.getPedStealthMovement = getPedStealthMovement;
function getPedTargetFromCombatPed(ped, p1) {
    return _in(0x32c27a11, 0x307b01cc, ped, p1, _r, _ri);
}
exports.getPedTargetFromCombatPed = getPedTargetFromCombatPed;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
function getPedTextureVariation(ped, componentId) {
    return _in(0x04a355e0, 0x41e004e6, ped, componentId, _r, _ri);
}
exports.getPedTextureVariation = getPedTextureVariation;
function getPedTimeOfDeath(ped) {
    return _in(0x1e98817b, 0x311ae98a, ped, _r, _ri);
}
exports.getPedTimeOfDeath = getPedTimeOfDeath;
/**
 * https://alloc8or.re/gta5/doc/enums/ePedType.txt
 * @param ped
 */
function getPedType(ped) {
    return _in(0xff059e1e, 0x4c01e63c, ped, _r, _ri);
}
exports.getPedType = getPedType;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doord
 */
function getPedUsingVehicleDoor(vehicle, doord) {
    return _in(0x218297bf, 0x0cfd853b, vehicle, doord, _r, _ri);
}
exports.getPedUsingVehicleDoor = getPedUsingVehicleDoor;
function getPedVisualFieldCenterAngle(ped) {
    return _in(0xef2c71a3, 0x2cad5fbd, ped, _r, _rf);
}
exports.getPedVisualFieldCenterAngle = getPedVisualFieldCenterAngle;
function getPedWaypointDistance(p0) {
    return _in(0xe6a877c6, 0x4caf1bc5, p0, _r, _rf);
}
exports.getPedWaypointDistance = getPedWaypointDistance;
function getPedWaypointProgress(ped) {
    return _in(0x2720aaa7, 0x5001e094, ped, _r, _ri);
}
exports.getPedWaypointProgress = getPedWaypointProgress;
function getPedWeaponCamoIndex(ped, weaponHash) {
    return _in(0xa2c9ac24, 0xb4061285, ped, _ch(weaponHash), _r, _ri);
}
exports.getPedWeaponCamoIndex = getPedWeaponCamoIndex;
/**
 * Returns -1 if camoComponentHash is invalid/not attached to the weapon.
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 */
function getPedWeaponComponentTintIndex(ped, weaponHash, camoComponentHash) {
    return _in(0xf0a60040, 0xbe558f2d, ped, _ch(weaponHash), _ch(camoComponentHash), _r, _ri);
}
exports.getPedWeaponComponentTintIndex = getPedWeaponComponentTintIndex;
/**
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
function getPedWeaponTintIndex(ped, weaponHash) {
    return _in(0x2b9eedc0, 0x7bd06b9f, ped, _ch(weaponHash), _r, _ri);
}
exports.getPedWeaponTintIndex = getPedWeaponTintIndex;
function getPedWeapontypeInSlot(ped, weaponSlot) {
    return _in(0xeffed78e, 0x9011134d, ped, _ch(weaponSlot), _r, _ri);
}
exports.getPedWeapontypeInSlot = getPedWeapontypeInSlot;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
function getPedheadshotTxdString(id) {
    return _in(0xdb4eacd4, 0xad0a5d6b, id, _r, _s);
}
exports.getPedheadshotTxdString = getPedheadshotTxdString;
function getPedsJacker(ped) {
    return _in(0x9b128dc3, 0x6c1e04cf, ped, _r, _ri);
}
exports.getPedsJacker = getPedsJacker;
function getPhoneGestureAnimCurrentTime(ped) {
    return _in(0x47619abe, 0x8b268c60, ped, _r, _rf);
}
exports.getPhoneGestureAnimCurrentTime = getPhoneGestureAnimCurrentTime;
function getPhoneGestureAnimTotalTime(ped) {
    return _in(0x1ee0f68a, 0x7c25dec6, ped, _r, _rf);
}
exports.getPhoneGestureAnimTotalTime = getPhoneGestureAnimTotalTime;
function getPickupCoords(pickup) {
    return _mv(_in(0x225b8b35, 0xc88029b3, pickup, _r, _rv));
}
exports.getPickupCoords = getPickupCoords;
function getPickupGenerationRangeMultiplier() {
    return _in(0xb3eca65c, 0x7317f174, _r, _rf);
}
exports.getPickupGenerationRangeMultiplier = getPickupGenerationRangeMultiplier;
function getPickupObject(pickup) {
    return _in(0x5099bc55, 0x630b25ae, pickup, _r, _ri);
}
exports.getPickupObject = getPickupObject;
/**
 * Returns the pickup hash for the given weapon hash
 * @param weaponHash
 */
function getPickupTypeFromWeaponHash(weaponHash) {
    return _in(0xd6429a01, 0x6084f1a5, _ch(weaponHash), _r, _ri);
}
exports.getPickupTypeFromWeaponHash = getPickupTypeFromWeaponHash;
function getPlayerCurrentStealthNoise(player) {
    return _in(0x2f395d61, 0xf3a1f877, player, _r, _rf);
}
exports.getPlayerCurrentStealthNoise = getPlayerCurrentStealthNoise;
/**
 * Always returns false.
 * @param player
 */
function getPlayerDebugInvincible(player) {
    return _in(0xdcc07526, 0xb8ec45af, player, _r);
}
exports.getPlayerDebugInvincible = getPlayerDebugInvincible;
function getPlayerFakeWantedLevel(player) {
    return _in(0x56105e59, 0x9cab0efa, player, _r, _ri);
}
exports.getPlayerFakeWantedLevel = getPlayerFakeWantedLevel;
/**
 * Returns the group ID the player is member of.
 * @param player
 */
function getPlayerGroup(player) {
    return _in(0x0d127585, 0xf77030af, player, _r, _ri);
}
exports.getPlayerGroup = getPlayerGroup;
function getPlayerHasDrivenAllVehicles() {
    return _in(0x5ead2bf6, 0x484852e4, _r);
}
exports.getPlayerHasDrivenAllVehicles = getPlayerHasDrivenAllVehicles;
function getPlayerHasReserveParachute(player) {
    return _in(0x5ddfe2ff, 0x727f3ca3, player, _r);
}
exports.getPlayerHasReserveParachute = getPlayerHasReserveParachute;
function getPlayerHealthRechargeMaxPercent(player) {
    return _in(0x8bc515ba, 0xe4aaf8ff, player, _r, _rf);
}
exports.getPlayerHealthRechargeMaxPercent = getPlayerHealthRechargeMaxPercent;
/**
 * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
 */
function getPlayerIndex() {
    return _in(0xa5edc40e, 0xf369b48d, _r, _ri);
}
exports.getPlayerIndex = getPlayerIndex;
/**
 * Returns the Player's Invincible status.
 *
 * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
 *
 * bool IsPlayerInvincible(Player player)
 * {
 * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
 *
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 *
 * return false;
 * }
 *
 *
 * @param player
 */
function getPlayerInvincible(player) {
    return _in(0xb721981b, 0x2b939e07, player, _r);
}
exports.getPlayerInvincible = getPlayerInvincible;
function getPlayerMaxArmour(player) {
    return _in(0x92659b4c, 0xe1863cb3, player, _r, _ri);
}
exports.getPlayerMaxArmour = getPlayerMaxArmour;
function getPlayerName(player) {
    return _in(0x6d0de6a7, 0xb5da71f8, player, _r, _s);
}
exports.getPlayerName = getPlayerName;
function getPlayerParachuteModelOverride(player) {
    return _in(0xc219887c, 0xa3e65c41, player, _r, _ri);
}
exports.getPlayerParachuteModelOverride = getPlayerParachuteModelOverride;
function getPlayerParachutePackTintIndex(player, tintIndex) {
    return _in(0x6e9c742f, 0x340ce5a2, player, _ii(tintIndex));
}
exports.getPlayerParachutePackTintIndex = getPlayerParachutePackTintIndex;
function getPlayerParachuteSmokeTrailColor(player) {
    const [r_out, g_out, b_out] = _in(0xef56dbab, 0xd3cd4887, player, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getPlayerParachuteSmokeTrailColor = getPlayerParachuteSmokeTrailColor;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param tintIndex
 */
function getPlayerParachuteTintIndex(player, tintIndex) {
    return _in(0x75d3f7a1, 0xb0d9b145, player, _ii(tintIndex));
}
exports.getPlayerParachuteTintIndex = getPlayerParachuteTintIndex;
/**
 * Gets the ped for a specified player index.
 * @param player
 */
function getPlayerPed(player) {
    return _in(0x43a66c31, 0xc68491c0, player, _r, _ri);
}
exports.getPlayerPed = getPlayerPed;
function getPlayerPedIsFollowing(ped) {
    return _in(0x6a3975de, 0xa89f9a17, ped, _r, _ri);
}
exports.getPlayerPedIsFollowing = getPlayerPedIsFollowing;
/**
 * Does the same like PLAYER::GET_PLAYER_PED
 * @param player
 */
function getPlayerPedScriptIndex(player) {
    return _in(0x50fac3a3, 0xe030a6e1, player, _r, _ri);
}
exports.getPlayerPedScriptIndex = getPlayerPedScriptIndex;
function getPlayerRadioStationGenre() {
    return _in(0xa571991a, 0x7fe6cceb, _r, _ri);
}
exports.getPlayerRadioStationGenre = getPlayerRadioStationGenre;
/**
 * Returns 255 (radio off index) if the function fails.
 */
function getPlayerRadioStationIndex() {
    return _in(0xe8af77c4, 0xc06adc93, _r, _ri);
}
exports.getPlayerRadioStationIndex = getPlayerRadioStationIndex;
/**
 * Returns active radio station name
 */
function getPlayerRadioStationName() {
    return _in(0xf6d733c3, 0x2076ad03, _r, _s);
}
exports.getPlayerRadioStationName = getPlayerRadioStationName;
function getPlayerReceivedBattleEventRecently(player, p1, p2) {
    return _in(0xbc0753c9, 0xca14b506, player, p1, p2, _r);
}
exports.getPlayerReceivedBattleEventRecently = getPlayerReceivedBattleEventRecently;
function getPlayerReserveParachuteModelOverride(player) {
    return _in(0x37faaa68, 0xdca9d08d, player, _r, _ri);
}
exports.getPlayerReserveParachuteModelOverride = getPlayerReserveParachuteModelOverride;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param index
 */
function getPlayerReserveParachuteTintIndex(player, index) {
    return _in(0xd5a016bc, 0x3c09cf40, player, _ii(index));
}
exports.getPlayerReserveParachuteTintIndex = getPlayerReserveParachuteTintIndex;
function getPlayerRgbColour(player) {
    const [r_out, g_out, b_out] = _in(0xe902ef95, 0x1dce178f, player, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getPlayerRgbColour = getPlayerRgbColour;
function getPlayerShortSwitchState() {
    return _in(0x20f898a5, 0xd9782800, _r, _ri);
}
exports.getPlayerShortSwitchState = getPlayerShortSwitchState;
function getPlayerSprintStaminaRemaining(player) {
    return _in(0x3f9f16f8, 0xe65a7ed7, player, _r, _rf);
}
exports.getPlayerSprintStaminaRemaining = getPlayerSprintStaminaRemaining;
function getPlayerSprintTimeRemaining(player) {
    return _in(0x1885bc9b, 0x108b4c99, player, _r, _rf);
}
exports.getPlayerSprintTimeRemaining = getPlayerSprintTimeRemaining;
function getPlayerSwitchInterpOutCurrentTime() {
    return _in(0x5b48a06d, 0xd0e792a5, _r, _ri);
}
exports.getPlayerSwitchInterpOutCurrentTime = getPlayerSwitchInterpOutCurrentTime;
function getPlayerSwitchInterpOutDuration() {
    return _in(0x08c2d6c5, 0x2a3104bb, _r, _ri);
}
exports.getPlayerSwitchInterpOutDuration = getPlayerSwitchInterpOutDuration;
function getPlayerSwitchJumpCutIndex() {
    return _in(0x78c0d932, 0x53149435, _r, _ri);
}
exports.getPlayerSwitchJumpCutIndex = getPlayerSwitchJumpCutIndex;
function getPlayerSwitchState() {
    return _in(0x47055530, 0x0d10b2a5, _r, _ri);
}
exports.getPlayerSwitchState = getPlayerSwitchState;
function getPlayerSwitchType() {
    return _in(0xb3c94a90, 0xd9fc9e62, _r, _ri);
}
exports.getPlayerSwitchType = getPlayerSwitchType;
/**
 * Assigns the handle of locked-on melee target to *entity that you pass it.
 * Returns false if no entity found.
 * @param player
 * @param entity
 */
function getPlayerTargetEntity(player, entity) {
    const [retval, entity_out] = _in(0x13ede1a5, 0xdbf797c9, player, _ii(entity), _r);
    return [retval, entity_out];
}
exports.getPlayerTargetEntity = getPlayerTargetEntity;
/**
 * Gets the player's team.
 * Does nothing in singleplayer.
 * @param player
 */
function getPlayerTeam(player) {
    return _in(0x37039302, 0xf4e0a008, player, _r, _ri);
}
exports.getPlayerTeam = getPlayerTeam;
function getPlayerUnderwaterTimeRemaining(player) {
    return _in(0xa1fcf8e6, 0xaf40b731, player, _r, _rf);
}
exports.getPlayerUnderwaterTimeRemaining = getPlayerUnderwaterTimeRemaining;
function getPlayerWantedCentrePosition(player) {
    return _mv(_in(0x0c92ba89, 0xf1af26f8, player, _r, _rv));
}
exports.getPlayerWantedCentrePosition = getPlayerWantedCentrePosition;
function getPlayerWantedLevel(player) {
    return _in(0xe28e5478, 0x8ce8f12d, player, _r, _ri);
}
exports.getPlayerWantedLevel = getPlayerWantedLevel;
/**
 * Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
 */
function getPlayersLastVehicle() {
    return _in(0xb6997a7e, 0xb3f5c8c0, _r, _ri);
}
exports.getPlayersLastVehicle = getPlayersLastVehicle;
function getPmPlayerCrewColor() {
    const [retval, r_out, g_out, b_out] = _in(0xa238192f, 0x33110615, _i, _i, _i, _r);
    return [retval, r_out, g_out, b_out];
}
exports.getPmPlayerCrewColor = getPmPlayerCrewColor;
function getPointAreaOverlap(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    return _in(0xa0ad167e, 0x4b39d9a2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, _r);
}
exports.getPointAreaOverlap = getPointAreaOverlap;
/**
 * p3 can be 0, 1 or 2.
 * @param result
 * @param p1
 * @param p2
 * @param p3
 */
function getPosAlongGpsTypeRoute(p1, p2, p3) {
    const [retval, result_out] = _in(0xf3162836, 0xc28f9da5, _v, p1, _fv(p2), p3, _r);
    return [retval, _mv(result_out)];
}
exports.getPosAlongGpsTypeRoute = getPosAlongGpsTypeRoute;
function getPosFromFiredEvent(ped, eventType, outData) {
    const [retval, outData_out] = _in(0xba656a3b, 0xb01bdea3, ped, eventType, _ii(outData), _r);
    return [retval, outData_out];
}
exports.getPosFromFiredEvent = getPosFromFiredEvent;
function getPositionBySideOfRoad(x, y, z, p3, outPosition) {
    const [retval, outPosition_out] = _in(0x16f46fb1, 0x8c8009e4, _fv(x), _fv(y), _fv(z), p3, _v, _r);
    return [retval, _mv(outPosition_out)];
}
exports.getPositionBySideOfRoad = getPositionBySideOfRoad;
/**
 * Distance traveled in the vehicles current recording.
 * @param vehicle
 */
function getPositionInRecording(vehicle) {
    return _in(0x2dacd605, 0xfc681475, vehicle, _r, _rf);
}
exports.getPositionInRecording = getPositionInRecording;
/**
 * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
 *
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param time
 * @param script
 */
function getPositionOfVehicleRecordingAtTime(recording, time, script) {
    return _mv(_in(0xd242728a, 0xa6f0fba2, recording, _fv(time), _ts(script), _r, _rv));
}
exports.getPositionOfVehicleRecordingAtTime = getPositionOfVehicleRecordingAtTime;
function getPositionOfVehicleRecordingIdAtTime(id, time) {
    return _mv(_in(0x92523b76, 0x657a517d, id, _fv(time), _r, _rv));
}
exports.getPositionOfVehicleRecordingIdAtTime = getPositionOfVehicleRecordingIdAtTime;
/**
 * Gets system time as year, month, day, hour, minute and second.
 *
 * Example usage:
 *
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 *
 * TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
 *
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
function getPosixTime() {
    const [year_out, month_out, day_out, hour_out, minute_out, second_out] = _in(0xda488f29, 0x9a5b164e, _i, _i, _i, _i, _i, _i);
    return [year_out, month_out, day_out, hour_out, minute_out, second_out];
}
exports.getPosixTime = getPosixTime;
/**
 * Returns current weather name hash
 */
function getPrevWeatherTypeHashName() {
    return _in(0x564b884a, 0x05ec45a3, _r, _ri);
}
exports.getPrevWeatherTypeHashName = getPrevWeatherTypeHashName;
function getProfileSetting(profileSetting) {
    return _in(0xc488ff23, 0x56ea7791, profileSetting, _r, _ri);
}
exports.getProfileSetting = getProfileSetting;
function getProjectileOfProjectileTypeWithinDistance(ped, weaponHash, distance, p5) {
    const [retval, outCoords_out, outProjectile_out] = _in(0x82fde6a5, 0x7ee4ee44, ped, _ch(weaponHash), _fv(distance), _v, _i, p5, _r);
    return [retval, _mv(outCoords_out), outProjectile_out];
}
exports.getProjectileOfProjectileTypeWithinDistance = getProjectileOfProjectileTypeWithinDistance;
/**
 * Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.
 * @param radioStation
 */
function getRadioStationName(radioStation) {
    return _in(0xb28eca15, 0x046ca8b9, radioStation, _r, _s);
}
exports.getRadioStationName = getRadioStationName;
function getRainLevel() {
    return _in(0x96695e36, 0x8ad855f3, _r, _rf);
}
exports.getRainLevel = getRainLevel;
function getRandomEventFlag() {
    return _in(0xd2d57f1d, 0x764117b1, _r);
}
exports.getRandomEventFlag = getRandomEventFlag;
function getRandomFloatInRange(startRange, endRange) {
    return _in(0x313ce587, 0x9ceb6fcd, _fv(startRange), _fv(endRange), _r, _rf);
}
exports.getRandomFloatInRange = getRandomFloatInRange;
function getRandomIntInRange(startRange, endRange) {
    return _in(0xd53343aa, 0x4fb7dd28, startRange, endRange, _r, _ri);
}
exports.getRandomIntInRange = getRandomIntInRange;
function getRandomMwcIntInRange(startRange, endRange) {
    return _in(0xf2d49816, 0xa804d134, startRange, endRange, _r, _ri);
}
exports.getRandomMwcIntInRange = getRandomMwcIntInRange;
/**
 * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
 *
 * Ped Types:
 * Any = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * @param x
 * @param y
 * @param z
 * @param xRadius
 * @param yRadius
 * @param zRadius
 * @param pedType
 */
function getRandomPedAtCoord(x, y, z, xRadius, yRadius, zRadius, pedType) {
    return _in(0x876046a8, 0xe3a4b71c, _fv(x), _fv(y), _fv(z), _fv(xRadius), _fv(yRadius), _fv(zRadius), pedType, _r, _ri);
}
exports.getRandomPedAtCoord = getRandomPedAtCoord;
function getRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0xb50807ea, 0xbe20a8dc, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, _r, _ri);
}
exports.getRandomVehicleBackBumperInSphere = getRandomVehicleBackBumperInSphere;
function getRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0xc5574e0a, 0xeb86ba68, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, _r, _ri);
}
exports.getRandomVehicleFrontBumperInSphere = getRandomVehicleFrontBumperInSphere;
/**
 * Gets a random vehicle in a sphere at the specified position, of the specified radius.
 *
 * x: The X-component of the position of the sphere.
 * y: The Y-component of the position of the sphere.
 * z: The Z-component of the position of the sphere.
 * radius: The radius of the sphere. Max is 9999.9004.
 * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
 * flags: The bitwise flags that modifies the behaviour of this function.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
function getRandomVehicleInSphere(x, y, z, radius, modelHash, flags) {
    return _in(0x386f6ce5, 0xbaf6091c, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r, _ri);
}
exports.getRandomVehicleInSphere = getRandomVehicleInSphere;
/**
 * Not present in the retail version! It's just a nullsub.
 *
 * p0 always true (except in one case)
 * successIndicator: 0 if success, -1 if failed
 * @param p0
 * @param modelHash
 * @param successIndicator
 */
function getRandomVehicleModelInMemory(p0) {
    const [modelHash_out, successIndicator_out] = _in(0x055bf0ac, 0x0c34f4fd, p0, _i, _i);
    return [modelHash_out, successIndicator_out];
}
exports.getRandomVehicleModelInMemory = getRandomVehicleModelInMemory;
function getRandomVehicleNode(x, y, z, radius, p4, p5, p6) {
    const [retval, outPosition_out, nodeId_out] = _in(0x93e0db84, 0x40b73a7d, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, _v, _i, _r);
    return [retval, _mv(outPosition_out), nodeId_out];
}
exports.getRandomVehicleNode = getRandomVehicleNode;
/**
 * returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param clamp
 */
function getRatioOfClosestPointOnLine(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp) {
    return _in(0x7f8f6405, 0xf4777af6, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), clamp, _r, _rf);
}
exports.getRatioOfClosestPointOnLine = getRatioOfClosestPointOnLine;
/**
 * Example:
 * OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param name
 */
function getRayfireMapObject(x, y, z, radius, name) {
    return _in(0xb48fced8, 0x98292e52, _fv(x), _fv(y), _fv(z), _fv(radius), _ts(name), _r, _ri);
}
exports.getRayfireMapObject = getRayfireMapObject;
/**
 * `object`: The des-object handle to get the animation progress from.
 * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
 * @param object
 */
function getRayfireMapObjectAnimPhase(object) {
    return _in(0x260ee4fd, 0xbdf4db01, object, _r, _rf);
}
exports.getRayfireMapObjectAnimPhase = getRayfireMapObjectAnimPhase;
/**
 * GET_GAME_TIMER() / 1000
 */
function getRealWorldTime() {
    return _in(0x3f60413f, 0x5df65748, _r, _ri);
}
exports.getRealWorldTime = getRealWorldTime;
/**
 * Gets the relationship between two groups. This should be called twice (once for each group).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 *
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
 * @param group1
 * @param group2
 */
function getRelationshipBetweenGroups(group1, group2) {
    return _in(0x9e6b7006, 0x1662ae5c, _ch(group1), _ch(group2), _r, _ri);
}
exports.getRelationshipBetweenGroups = getRelationshipBetweenGroups;
/**
 * Gets the relationship between two peds. This should be called twice (once for each ped).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 *
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
 * @param ped1
 * @param ped2
 */
function getRelationshipBetweenPeds(ped1, ped2) {
    return _in(0xeba5ad3a, 0x0eaf7121, ped1, ped2, _r, _ri);
}
exports.getRelationshipBetweenPeds = getRelationshipBetweenPeds;
/**
 * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
 * @param size
 * @param font
 */
function getRenderedCharacterHeight(size, font) {
    return _in(0xdb88a374, 0x83346780, _fv(size), font, _r, _rf);
}
exports.getRenderedCharacterHeight = getRenderedCharacterHeight;
function getRenderingCam() {
    return _in(0x5234f9f1, 0x0919eaba, _r, _ri);
}
exports.getRenderingCam = getRenderingCam;
function getReplayStatAtIndex(index) {
    return _in(0x8098c8d6, 0x597aae18, index, _r, _ri);
}
exports.getReplayStatAtIndex = getReplayStatAtIndex;
function getReplayStatCount() {
    return _in(0xdc9274a7, 0xef6b2867, _r, _ri);
}
exports.getReplayStatCount = getReplayStatCount;
function getReplayStatMissionId() {
    return _in(0x5b1f2e32, 0x7b6b6fe1, _r, _ri);
}
exports.getReplayStatMissionId = getReplayStatMissionId;
function getReplayStatMissionType() {
    return _in(0x2b626a01, 0x50e4d449, _r, _ri);
}
exports.getReplayStatMissionType = getReplayStatMissionType;
function getRequestingnightvision() {
    return _in(0x35fb78dc, 0x42b7bd21, _r);
}
exports.getRequestingnightvision = getRequestingnightvision;
function getReservedMissionEntitiesInArea(x, y, z, p3) {
    const [out1_out, out2_out, out3_out] = _in(0xe42d626e, 0xec94e5d9, _fv(x), _fv(y), _fv(z), p3, _i, _i, _i);
    return [out1_out, out2_out, out3_out];
}
exports.getReservedMissionEntitiesInArea = getReservedMissionEntitiesInArea;
function getRoadBoundaryUsingHeading(x, y, z, heading, outPosition) {
    const [retval, outPosition_out] = _in(0xa0f8a751, 0x7a273c05, _fv(x), _fv(y), _fv(z), _fv(heading), _v, _r);
    return [retval, _mv(outPosition_out)];
}
exports.getRoadBoundaryUsingHeading = getRoadBoundaryUsingHeading;
function getRoomKeyForGameViewport() {
    return _in(0xa6575914, 0xd2a0b450, _r, _ri);
}
exports.getRoomKeyForGameViewport = getRoomKeyForGameViewport;
/**
 * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
 * @param entity
 */
function getRoomKeyFromEntity(entity) {
    return _in(0x47c2a06d, 0x4f5f424b, entity, _r, _ri);
}
exports.getRoomKeyFromEntity = getRoomKeyFromEntity;
function getRopeLastVertexCoord(ropeId) {
    return _mv(_in(0x21bb0fbd, 0x3e217c2d, ropeId, _r, _rv));
}
exports.getRopeLastVertexCoord = getRopeLastVertexCoord;
function getRopeVertexCoord(ropeId, vertex) {
    return _mv(_in(0xea61ca8e, 0x80f09e4d, ropeId, vertex, _r, _rv));
}
exports.getRopeVertexCoord = getRopeVertexCoord;
function getRopeVertexCount(ropeId) {
    return _in(0x3655f544, 0xcd30f0b5, ropeId, _r, _ri);
}
exports.getRopeVertexCount = getRopeVertexCount;
/**
 * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
 *
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param time
 * @param script
 */
function getRotationOfVehicleRecordingAtTime(recording, time, script) {
    return _mv(_in(0x2058206f, 0xbe79a8ad, recording, _fv(time), _ts(script), _r, _rv));
}
exports.getRotationOfVehicleRecordingAtTime = getRotationOfVehicleRecordingAtTime;
function getRotationOfVehicleRecordingIdAtTime(id, time) {
    return _mv(_in(0xf0f2103e, 0xfaf8cba7, id, _fv(time), _r, _rv));
}
exports.getRotationOfVehicleRecordingIdAtTime = getRotationOfVehicleRecordingIdAtTime;
/**
 * Flags are:
 * 1 = 1 = B02_IsFootpath
 * 2 = 4 = !B15_InteractionUnk
 * 4 = 0x20 = !B14_IsInterior
 * 8 = 0x40 = !B07_IsWater
 * 16 = 0x200 = B17_IsFlatGround
 * When onGround == true outPosition is a position located on the nearest pavement.
 *
 * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
 *
 * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
 *
 * 16 works for me, 0 crashed the script.
 * @param x
 * @param y
 * @param z
 * @param onGround
 * @param outPosition
 * @param flags
 */
function getSafeCoordForPed(x, y, z, onGround, flags) {
    const [retval, outPosition_out] = _in(0xb61c8e87, 0x8a4199ca, _fv(x), _fv(y), _fv(z), onGround, _v, flags, _r);
    return [retval, _mv(outPosition_out)];
}
exports.getSafeCoordForPed = getSafeCoordForPed;
function getSafePickupCoords(x, y, z, p3, p4) {
    return _mv(_in(0x6e16bc25, 0x03ff1ff0, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(p4), _r, _rv));
}
exports.getSafePickupCoords = getSafePickupCoords;
/**
 * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
 */
function getSafeZoneSize() {
    return _in(0xbaf107b6, 0xbb2c97f0, _r, _rf);
}
exports.getSafeZoneSize = getSafeZoneSize;
function getSaveHouseDetailsAfterSuccessfulLoad() {
    const [retval, p0_out, p1_out, fadeInAfterLoad_out, p3_out] = _in(0xa4a0065e, 0x39c9f25c, _v, _f, _i, _i, _r);
    return [retval, _mv(p0_out), p1_out, fadeInAfterLoad_out, p3_out];
}
exports.getSaveHouseDetailsAfterSuccessfulLoad = getSaveHouseDetailsAfterSuccessfulLoad;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * @param methodReturn
 */
function getScaleformMovieMethodReturnValueBool(methodReturn) {
    return _in(0xd80a8034, 0x6a45d761, methodReturn, _r);
}
exports.getScaleformMovieMethodReturnValueBool = getScaleformMovieMethodReturnValueBool;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
 * @param methodReturn
 */
function getScaleformMovieMethodReturnValueInt(methodReturn) {
    return _in(0x2de7efa6, 0x6b906036, methodReturn, _r, _ri);
}
exports.getScaleformMovieMethodReturnValueInt = getScaleformMovieMethodReturnValueInt;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
 * @param methodReturn
 */
function getScaleformMovieMethodReturnValueString(methodReturn) {
    return _in(0xe1e25882, 0x9a885245, methodReturn, _r, _s);
}
exports.getScaleformMovieMethodReturnValueString = getScaleformMovieMethodReturnValueString;
function getScreenAspectRatio() {
    return _in(0xb2ebe8cb, 0xc58b90e9, _r, _rf);
}
exports.getScreenAspectRatio = getScreenAspectRatio;
function getScreenCodeWantsScriptToControl() {
    return _in(0x593feae1, 0xf73392d4, _r, _ri);
}
exports.getScreenCodeWantsScriptToControl = getScreenCodeWantsScriptToControl;
/**
 * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
 *
 * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
 *
 *
 * For .NET users...
 *
 * VB:
 * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
 *
 * Dim x2dp, y2dp As New Native.OutputArgument
 *
 * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
 * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
 *
 * End Function
 *
 * C#:
 * Vector2 World3DToScreen2d(Vector3 pos)
 * {
 * var x2dp = new OutputArgument();
 * var y2dp = new OutputArgument();
 *
 * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
 * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
 * }
 * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
 *
 * Used to be called _WORLD3D_TO_SCREEN2D
 *
 * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
function getScreenCoordFromWorldCoord(worldX, worldY, worldZ) {
    const [retval, screenX_out, screenY_out] = _in(0x34e82f05, 0xdf2974f5, _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r);
    return [retval, screenX_out, screenY_out];
}
exports.getScreenCoordFromWorldCoord = getScreenCoordFromWorldCoord;
/**
 * int screenresx,screenresy;
 * GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
 * @param x
 * @param y
 */
function getScreenResolution() {
    const [x_out, y_out] = _in(0x888d57e4, 0x07e63624, _i, _i);
    return [x_out, y_out];
}
exports.getScreenResolution = getScreenResolution;
function getScreenblurFadeCurrentTime() {
    return _in(0x5ccabffc, 0xa31dde33, _r, _rf);
}
exports.getScreenblurFadeCurrentTime = getScreenblurFadeCurrentTime;
/**
 * Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
 * @param x
 * @param y
 * @param calculatedX
 * @param calculatedY
 */
function getScriptGfxAlignPosition(x, y) {
    const [calculatedX_out, calculatedY_out] = _in(0x6dd8f5aa, 0x635eb4b2, _fv(x), _fv(y), _f, _f);
    return [calculatedX_out, calculatedY_out];
}
exports.getScriptGfxAlignPosition = getScriptGfxAlignPosition;
/**
 * Gets the status of a script-assigned task.
 * taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
 * @param ped
 * @param taskHash
 */
function getScriptTaskStatus(ped, taskHash) {
    return _in(0x77f1beb8, 0x863288d5, ped, _ch(taskHash), _r, _ri);
}
exports.getScriptTaskStatus = getScriptTaskStatus;
function getScriptedCoverPointCoords(coverpoint) {
    return _mv(_in(0x594a1028, 0xfc2a3e85, coverpoint, _r, _rv));
}
exports.getScriptedCoverPointCoords = getScriptedCoverPointCoords;
function getSeatPedIsTryingToEnter(ped) {
    return _in(0x6f4c85ac, 0xd641bcd2, ped, _r, _ri);
}
exports.getSeatPedIsTryingToEnter = getSeatPedIsTryingToEnter;
/**
 * Returns the hash of the weapon.
 *
 * var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
 * sub_27D3(num7);
 * switch (num7)
 * {
 * case 0x24B17070:
 *
 * Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
 *
 * -------------------------------------------------------------------------
 *
 * The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 */
function getSelectedPedWeapon(ped) {
    return _in(0x0a6db496, 0x5674d243, ped, _r, _ri);
}
exports.getSelectedPedWeapon = getSelectedPedWeapon;
/**
 * returned values:
 * 0 to 7 = task that's currently in progress, 0 meaning the first one.
 * -1 no task sequence in progress.
 * @param ped
 */
function getSequenceProgress(ped) {
    return _in(0x00a9010c, 0xfe1e3533, ped, _r, _ri);
}
exports.getSequenceProgress = getSequenceProgress;
/**
 * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
 *
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param entityHit
 */
function getShapeTestResult(shapeTestHandle) {
    const [retval, hit_out, endCoords_out, surfaceNormal_out, entityHit_out] = _in(0x3d87450e, 0x15d98694, shapeTestHandle, _i, _v, _v, _i, _r, _ri);
    return [retval, hit_out, _mv(endCoords_out), _mv(surfaceNormal_out), entityHit_out];
}
exports.getShapeTestResult = getShapeTestResult;
/**
 * Returns the result of a shape test, also returning the material of any touched surface.
 *
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 *
 * Unless the return value is 2, the other return values are undefined.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param materialHash
 * @param entityHit
 */
function getShapeTestResultIncludingMaterial(shapeTestHandle) {
    const [retval, hit_out, endCoords_out, surfaceNormal_out, materialHash_out, entityHit_out] = _in(0x65287525, 0xd951f6be, shapeTestHandle, _i, _v, _v, _i, _i, _r, _ri);
    return [retval, hit_out, _mv(endCoords_out), _mv(surfaceNormal_out), materialHash_out, entityHit_out];
}
exports.getShapeTestResultIncludingMaterial = getShapeTestResultIncludingMaterial;
/**
 * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
 * @param componentHash
 */
function getShopPedApparelForcedComponentCount(componentHash) {
    return _in(0xc6b9db42, 0xc04dd8c3, _ch(componentHash), _r, _ri);
}
exports.getShopPedApparelForcedComponentCount = getShopPedApparelForcedComponentCount;
/**
 * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
 * @param componentHash
 */
function getShopPedApparelForcedPropCount(componentHash) {
    return _in(0x017568a8, 0x182d98a6, _ch(componentHash), _r, _ri);
}
exports.getShopPedApparelForcedPropCount = getShopPedApparelForcedPropCount;
function getShopPedApparelVariantComponentCount(componentHash) {
    return _in(0xc17ad0e5, 0x752becda, _ch(componentHash), _r, _ri);
}
exports.getShopPedApparelVariantComponentCount = getShopPedApparelVariantComponentCount;
/**
 * `propHash`: Ped helmet prop hash?
 * This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
 * @param propHash
 */
function getShopPedApparelVariantPropCount(propHash) {
    return _in(0xd40aac51, 0xe8e4c663, _ch(propHash), _r, _ri);
}
exports.getShopPedApparelVariantPropCount = getShopPedApparelVariantPropCount;
/**
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * @param componentHash
 * @param outComponent
 */
function getShopPedComponent(componentHash, outComponent) {
    return _in(0x74c0e2a5, 0x7ec66760, _ch(componentHash), _ii(outComponent));
}
exports.getShopPedComponent = getShopPedComponent;
function getShopPedOutfit(p0, p1) {
    return _in(0xb7952076, 0xe444979d, p0, _ii(p1));
}
exports.getShopPedOutfit = getShopPedOutfit;
/**
 * See https://git.io/JtcBH for example and structs.
 * @param outfitHash
 * @param variantIndex
 * @param outComponentVariant
 */
function getShopPedOutfitComponentVariant(outfitHash, variantIndex, outComponentVariant) {
    const [retval, outComponentVariant_out] = _in(0x19f2a026, 0xedf0013f, _ch(outfitHash), variantIndex, _ii(outComponentVariant), _r);
    return [retval, outComponentVariant_out];
}
exports.getShopPedOutfitComponentVariant = getShopPedOutfitComponentVariant;
function getShopPedOutfitLocate(p0) {
    return _in(0x073ca26b, 0x079f956e, p0, _r, _ri);
}
exports.getShopPedOutfitLocate = getShopPedOutfitLocate;
/**
 * See https://git.io/JtcBH for example and structs.
 * @param outfitHash
 * @param variantIndex
 * @param outPropVariant
 */
function getShopPedOutfitPropVariant(outfitHash, variantIndex, outPropVariant) {
    const [retval, outPropVariant_out] = _in(0xa9f9c2e0, 0xfde11cbb, _ch(outfitHash), variantIndex, _ii(outPropVariant), _r);
    return [retval, outPropVariant_out];
}
exports.getShopPedOutfitPropVariant = getShopPedOutfitPropVariant;
/**
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * @param componentHash
 * @param outProp
 */
function getShopPedProp(componentHash, outProp) {
    return _in(0x5d5caff6, 0x61ddf6fc, _ch(componentHash), _ii(outProp));
}
exports.getShopPedProp = getShopPedProp;
/**
 * See https://git.io/JtcRf for example and structs.
 * @param componentId
 * @param outComponent
 */
function getShopPedQueryComponent(componentId, outComponent) {
    return _in(0x249e310b, 0x2d920699, componentId, _ii(outComponent));
}
exports.getShopPedQueryComponent = getShopPedQueryComponent;
/**
 * Returns some sort of index/offset for components.
 * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
 * @param componentHash
 */
function getShopPedQueryComponentIndex(componentHash) {
    return _in(0x96e29292, 0x92a4db77, _ch(componentHash), _r, _ri);
}
exports.getShopPedQueryComponentIndex = getShopPedQueryComponentIndex;
/**
 * outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
 * See https://git.io/JtcB8 for example and outfit struct.
 * @param outfitIndex
 * @param outfit
 */
function getShopPedQueryOutfit(outfitIndex, outfit) {
    return _in(0x6d793f03, 0xa631fe56, outfitIndex, _ii(outfit));
}
exports.getShopPedQueryOutfit = getShopPedQueryOutfit;
/**
 * See https://git.io/JtcRf for example and structs.
 * @param componentId
 * @param outProp
 */
function getShopPedQueryProp(componentId, outProp) {
    return _in(0xde44a009, 0x99b2837d, componentId, _ii(outProp));
}
exports.getShopPedQueryProp = getShopPedQueryProp;
/**
 * Returns some sort of index/offset for props.
 * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
 * @param componentHash
 */
function getShopPedQueryPropIndex(componentHash) {
    return _in(0x6cebe002, 0xe58dee97, _ch(componentHash), _r, _ri);
}
exports.getShopPedQueryPropIndex = getShopPedQueryPropIndex;
function getSizeOfSaveData(p0) {
    return _in(0xa09f896c, 0xe912481f, p0, _r, _ri);
}
exports.getSizeOfSaveData = getSizeOfSaveData;
function getSnowLevel() {
    return _in(0xc5868a96, 0x6e5be3ae, _r, _rf);
}
exports.getSnowLevel = getSnowLevel;
function getSoundId() {
    return _in(0x430386fe, 0x9bf80b45, _r, _ri);
}
exports.getSoundId = getSoundId;
function getSoundIdFromNetworkId(netId) {
    return _in(0x75262fd1, 0x2d0a1c84, netId, _r, _ri);
}
exports.getSoundIdFromNetworkId = getSoundIdFromNetworkId;
function getSpawnCoordsForVehicleNode(nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ) {
    const [retval, centrePoint_out, heading_out] = _in(0x809549af, 0xc7aec597, nodeAddress, _fv(towardsCoorsX), _fv(towardsCoorsY), _fv(towardsCoorsZ), _v, _f, _r, _rv);
    return [_mv(retval), _mv(centrePoint_out), heading_out];
}
exports.getSpawnCoordsForVehicleNode = getSpawnCoordsForVehicleNode;
function getStandardBlipEnumId() {
    return _in(0x4a992338, 0x5bdb9dad, _r, _ri);
}
exports.getStandardBlipEnumId = getStandardBlipEnumId;
/**
 * Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData
 * @param dataType
 * @param statIndex
 * @param charSlot
 */
function getStatHashForCharacterStat(dataType, statIndex, charSlot) {
    return _in(0xd69ce161, 0xfe614531, dataType, statIndex, charSlot, _r, _ri);
}
exports.getStatHashForCharacterStat = getStatHashForCharacterStat;
/**
 * locked is 0 if no door is found
 * locked is 0 if door is unlocked
 * locked is 1 if door is found and unlocked.
 *
 * -------------
 * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 */
function getStateOfClosestDoorOfType(type, x, y, z) {
    const [locked_out, heading_out] = _in(0xedc1a5b8, 0x4aef33ff, _ch(type), _fv(x), _fv(y), _fv(z), _i, _f);
    return [locked_out, heading_out];
}
exports.getStateOfClosestDoorOfType = getStateOfClosestDoorOfType;
/**
 * Get a destructible object's state.
 * Substract 1 to get the real state.
 * See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
 * For example, if the object just spawned (state 2), the native will return 3.
 * @param object
 */
function getStateOfRayfireMapObject(object) {
    return _in(0x899ba936, 0x634a322e, object, _r, _ri);
}
exports.getStateOfRayfireMapObject = getStateOfRayfireMapObject;
function getStatusOfCreateLowQualityCopyOfPhoto(p0) {
    return _in(0xcb82a0bf, 0x0e3e3265, p0, _r, _ri);
}
exports.getStatusOfCreateLowQualityCopyOfPhoto = getStatusOfCreateLowQualityCopyOfPhoto;
function getStatusOfCreateMissionCreatorPhotoPreview() {
    return _in(0x5b031676, 0x2afd4a64, _r, _ri);
}
exports.getStatusOfCreateMissionCreatorPhotoPreview = getStatusOfCreateMissionCreatorPhotoPreview;
function getStatusOfLoadMissionCreatorPhoto(p0) {
    const [retval, p0_out] = _in(0x1670f8d0, 0x5056f257, _ii(p0), _r, _ri);
    return [retval, p0_out];
}
exports.getStatusOfLoadMissionCreatorPhoto = getStatusOfLoadMissionCreatorPhoto;
function getStatusOfManualSave() {
    return _in(0x397baa01, 0x068baa96, _r, _ri);
}
exports.getStatusOfManualSave = getStatusOfManualSave;
function getStatusOfMissionRepeatSave() {
    return _in(0x2b5e102e, 0x4a42f2bf, _r, _ri);
}
exports.getStatusOfMissionRepeatSave = getStatusOfMissionRepeatSave;
function getStatusOfSaveHighQualityPhoto() {
    return _in(0x0c0c4e81, 0xe1ac60a0, _r, _ri);
}
exports.getStatusOfSaveHighQualityPhoto = getStatusOfSaveHighQualityPhoto;
/**
 * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
 * appcamera, appmedia, and cellphone_controller.
 * @param p0
 */
function getStatusOfSortedListOperation(p0) {
    return _in(0xf5bed327, 0xcea362b1, p0, _r, _ri);
}
exports.getStatusOfSortedListOperation = getStatusOfSortedListOperation;
function getStatusOfTakeHighQualityPhoto() {
    return _in(0x0d6ca79e, 0xeebd8ca3, _r, _ri);
}
exports.getStatusOfTakeHighQualityPhoto = getStatusOfTakeHighQualityPhoto;
function getStatusOfTakeMissionCreatorPhoto() {
    return _in(0x90a78eca, 0xa4e78453, _r, _ri);
}
exports.getStatusOfTakeMissionCreatorPhoto = getStatusOfTakeMissionCreatorPhoto;
/**
 * 0 = succeeded
 * 1 = pending
 * 2 = failed
 * @param p0
 */
function getStatusOfTextureDownload(p0) {
    return _in(0x8bd6c6de, 0xa20e82c6, p0, _r, _ri);
}
exports.getStatusOfTextureDownload = getStatusOfTextureDownload;
function getStreamPlayTime() {
    return _in(0x4e72bbdb, 0xca58a3db, _r, _ri);
}
exports.getStreamPlayTime = getStreamPlayTime;
/**
 * Determines the name of the street which is the closest to the given coordinates.
 *
 * x,y,z - the coordinates of the street
 * streetName - returns a hash to the name of the street the coords are on
 * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
 *
 * Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
 * @param x
 * @param y
 * @param z
 * @param streetName
 * @param crossingRoad
 */
function getStreetNameAtCoord(x, y, z) {
    const [streetName_out, crossingRoad_out] = _in(0x2eb41072, 0xb4c1e4c0, _fv(x), _fv(y), _fv(z), _i, _i);
    return [streetName_out, crossingRoad_out];
}
exports.getStreetNameAtCoord = getStreetNameAtCoord;
/**
 * This functions converts the hash of a street name into a readable string.
 *
 * For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
 * @param hash
 */
function getStreetNameFromHashKey(hash) {
    return _in(0xd0ef8a95, 0x9b8a4cb9, _ch(hash), _r, _s);
}
exports.getStreetNameFromHashKey = getStreetNameFromHashKey;
function getSubmarineIsUnderDesignDepth(submarine) {
    return _in(0x3e71d0b3, 0x00b7aa79, submarine, _r);
}
exports.getSubmarineIsUnderDesignDepth = getSubmarineIsUnderDesignDepth;
function getSubmarineNumberOfAirLeaks(submarine) {
    return _in(0x093d6ddc, 0xa5b8fbae, submarine, _r, _ri);
}
exports.getSubmarineNumberOfAirLeaks = getSubmarineNumberOfAirLeaks;
function getSynchronizedScenePhase(sceneID) {
    return _in(0xe4a310b1, 0xd7fa73cc, sceneID, _r, _rf);
}
exports.getSynchronizedScenePhase = getSynchronizedScenePhase;
function getSynchronizedSceneRate(sceneID) {
    return _in(0xd80932d5, 0x77274d40, sceneID, _r, _rf);
}
exports.getSynchronizedSceneRate = getSynchronizedSceneRate;
function getSystemTimeStep() {
    return _in(0xe599a503, 0xb3837e1b, _r, _rf);
}
exports.getSystemTimeStep = getSystemTimeStep;
function getTaskMoveNetworkEvent(ped, eventName) {
    return _in(0xb4f47213, 0xdf45a64c, ped, _ts(eventName), _r);
}
exports.getTaskMoveNetworkEvent = getTaskMoveNetworkEvent;
function getTaskMoveNetworkSignalBool(ped, signalName) {
    return _in(0xa7ffba49, 0x8e4aaf67, ped, _ts(signalName), _r);
}
exports.getTaskMoveNetworkSignalBool = getTaskMoveNetworkSignalBool;
function getTaskMoveNetworkSignalFloat(ped, signalName) {
    return _in(0x44ab0b3a, 0xfecce242, ped, _ts(signalName), _r, _rf);
}
exports.getTaskMoveNetworkSignalFloat = getTaskMoveNetworkSignalFloat;
function getTaskMoveNetworkState(ped) {
    return _in(0x717e4d1f, 0x2048376d, ped, _r, _s);
}
exports.getTaskMoveNetworkState = getTaskMoveNetworkState;
function getTaskRappelDownWallState(ped) {
    return _in(0x9d252648, 0x778160df, ped, _r, _ri);
}
exports.getTaskRappelDownWallState = getTaskRappelDownWallState;
/**
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 *
 *
 * enum TattooZoneData
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_UNKNOWN = 6,
 * ZONE_NONE = 7,
 * };
 * struct outComponent
 * {
 * // these vars are suffixed with 4 bytes of padding each.
 * uint unk;
 * int unk2;
 * uint tattooCollectionHash;
 * uint tattooNameHash;
 * int unk3;
 * TattooZoneData zoneId;
 * uint unk4;
 * uint unk5;
 * // maybe more, not sure exactly, decompiled scripts are very vague around this part.
 * }
 * @param characterType
 * @param decorationIndex
 * @param outComponent
 */
function getTattooShopDlcItemData(characterType, decorationIndex, outComponent) {
    const [retval, outComponent_out] = _in(0xff563818, 0x74f82086, characterType, decorationIndex, _ii(outComponent), _r);
    return [retval, outComponent_out];
}
exports.getTattooShopDlcItemData = getTattooShopDlcItemData;
/**
 * Returns some sort of index/offset for overlays/decorations.
 *
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * @param overlayHash
 * @param p1
 * @param character
 */
function getTattooShopDlcItemIndex(overlayHash, p1, character) {
    return _in(0x10144267, 0xdd22866c, _ch(overlayHash), p1, character, _r, _ri);
}
exports.getTattooShopDlcItemIndex = getTattooShopDlcItemIndex;
function getTennisSwingAnimCanBeInterrupted(ped) {
    return _in(0x19bfed04, 0x5c647c49, ped, _r);
}
exports.getTennisSwingAnimCanBeInterrupted = getTennisSwingAnimCanBeInterrupted;
function getTennisSwingAnimComplete(ped) {
    return _in(0x17df68d7, 0x20aa77f8, ped, _r);
}
exports.getTennisSwingAnimComplete = getTennisSwingAnimComplete;
function getTennisSwingAnimSwung(ped) {
    return _in(0xe95b0c7d, 0x5ba3b96b, ped, _r);
}
exports.getTennisSwingAnimSwung = getTennisSwingAnimSwung;
/**
 * Returns the texture resolution of the passed texture dict+name.
 *
 * Note: Most texture resolutions are doubled compared to the console version of the game.
 * @param textureDict
 * @param textureName
 */
function getTextureResolution(textureDict, textureName) {
    return _mv(_in(0x35736ee6, 0x5bd00c11, _ts(textureDict), _ts(textureName), _r, _rv));
}
exports.getTextureResolution = getTextureResolution;
function getThisScriptName() {
    return _in(0x442e0a7e, 0xde4a738a, _r, _s);
}
exports.getThisScriptName = getThisScriptName;
function getTimeAsString(time) {
    return _in(0x9e23b177, 0x7a927dad, time, _r, _s);
}
exports.getTimeAsString = getTimeAsString;
/**
 * Subtracts the second argument from the first.
 * @param timeA
 * @param timeB
 */
function getTimeDifference(timeA, timeB) {
    return _in(0xa2c6fc03, 0x1d46fff0, timeA, timeB, _r, _ri);
}
exports.getTimeDifference = getTimeDifference;
/**
 * Adds the first argument to the second.
 * @param timeA
 * @param timeB
 */
function getTimeOffset(timeA, timeB) {
    return _in(0x017008cc, 0xdad48503, timeA, timeB, _r, _ri);
}
exports.getTimeOffset = getTimeOffset;
function getTimePedDamagedByWeapon(ped, weaponHash) {
    return _in(0x36b77bb8, 0x4687c318, ped, _ch(weaponHash), _r, _ri);
}
exports.getTimePedDamagedByWeapon = getTimePedDamagedByWeapon;
/**
 * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
 * @param vehicle
 */
function getTimePositionInRecording(vehicle) {
    return _in(0x5746f3a7, 0xab7fe544, vehicle, _r, _rf);
}
exports.getTimePositionInRecording = getTimePositionInRecording;
/**
 * Returns the time since the character was arrested in (ms) milliseconds.
 *
 * example
 *
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
 *
 * UI.DrawSubtitle(time.ToString());
 *
 * if player has not been arrested, the int returned will be -1.
 */
function getTimeSinceLastArrest() {
    return _in(0x5063f92f, 0x07c2a316, _r, _ri);
}
exports.getTimeSinceLastArrest = getTimeSinceLastArrest;
/**
 * Returns the time since the character died in (ms) milliseconds.
 *
 * example
 *
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
 *
 * UI.DrawSubtitle(time.ToString());
 *
 * if player has not died, the int returned will be -1.
 */
function getTimeSinceLastDeath() {
    return _in(0xc7034807, 0x558ddfca, _r, _ri);
}
exports.getTimeSinceLastDeath = getTimeSinceLastDeath;
function getTimeSincePlayerDroveAgainstTraffic(player) {
    return _in(0xdb89591e, 0x290d9182, player, _r, _ri);
}
exports.getTimeSincePlayerDroveAgainstTraffic = getTimeSincePlayerDroveAgainstTraffic;
function getTimeSincePlayerDroveOnPavement(player) {
    return _in(0xd559d2be, 0x9e37853b, player, _r, _ri);
}
exports.getTimeSincePlayerDroveOnPavement = getTimeSincePlayerDroveOnPavement;
function getTimeSincePlayerHitPed(player) {
    return _in(0xe36a2532, 0x2dc35f42, player, _r, _ri);
}
exports.getTimeSincePlayerHitPed = getTimeSincePlayerHitPed;
function getTimeSincePlayerHitVehicle(player) {
    return _in(0x5d35ecf3, 0xa81a0ee0, player, _r, _ri);
}
exports.getTimeSincePlayerHitVehicle = getTimeSincePlayerHitVehicle;
/**
 * Only use for this in the PC scripts is:
 *
 * if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
 */
function getTimecycleModifierIndex() {
    return _in(0xfdf3d97c, 0x674afb66, _r, _ri);
}
exports.getTimecycleModifierIndex = getTimecycleModifierIndex;
function getTimecycleTransitionModifierIndex() {
    return _in(0x459fd2c8, 0xd0ab78bc, _r, _ri);
}
exports.getTimecycleTransitionModifierIndex = getTimecycleTransitionModifierIndex;
function getTintIndexForLastGenHairTexture(modelHash, drawableId, textureId) {
    return _in(0xc56fbf2f, 0x228e1dac, _ch(modelHash), drawableId, textureId, _r, _ri);
}
exports.getTintIndexForLastGenHairTexture = getTintIndexForLastGenHairTexture;
function getTogglePausedRenderphasesStatus() {
    return _in(0xeb3dac2c, 0x86001e5e, _r);
}
exports.getTogglePausedRenderphasesStatus = getTogglePausedRenderphasesStatus;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
function getTotalDurationOfVehicleRecording(recording, script) {
    return _in(0x0e48d1c2, 0x62390950, recording, _ts(script), _r, _rf);
}
exports.getTotalDurationOfVehicleRecording = getTotalDurationOfVehicleRecording;
function getTotalDurationOfVehicleRecordingId(id) {
    return _in(0x102d1254, 0x11a7b6e6, id, _r, _rf);
}
exports.getTotalDurationOfVehicleRecordingId = getTotalDurationOfVehicleRecordingId;
function getTotalSuccessfulStuntJumps() {
    return _in(0x6856ec3d, 0x35c81ea4, _r, _ri);
}
exports.getTotalSuccessfulStuntJumps = getTotalSuccessfulStuntJumps;
function getTrackedPedPixelcount(ped) {
    return _in(0x511f1a68, 0x3387c7e2, ped, _r, _ri);
}
exports.getTrackedPedPixelcount = getTrackedPedPixelcount;
/**
 * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
 * @param train
 * @param trailerNumber
 */
function getTrainCarriage(train, trailerNumber) {
    return _in(0x08aafd08, 0x14722bc3, train, trailerNumber, _r, _ri);
}
exports.getTrainCarriage = getTrainCarriage;
function getTvChannel() {
    return _in(0xfc1e275a, 0x90d39995, _r, _ri);
}
exports.getTvChannel = getTvChannel;
function getTvVolume() {
    return _in(0x2170813d, 0x3dd8661b, _r, _rf);
}
exports.getTvVolume = getTvVolume;
/**
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 */
function getTyreHealth(vehicle, wheelIndex) {
    return _in(0x55eab010, 0xfaee9380, vehicle, wheelIndex, _r, _rf);
}
exports.getTyreHealth = getTyreHealth;
/**
 * Returns the multiplier value from SET_TYRE_WEAR_RATE
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 */
function getTyreWearRate(vehicle, wheelIndex) {
    return _in(0x6e387895, 0x952f4f71, vehicle, wheelIndex, _r, _rf);
}
exports.getTyreWearRate = getTyreWearRate;
/**
 * 0.0 = no memory used
 * 1.0 = all memory used
 *
 * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
 */
function getUsedCreatorBudget() {
    return _in(0x3d3d8b3b, 0xe5a83d35, _r, _rf);
}
exports.getUsedCreatorBudget = getUsedCreatorBudget;
/**
 * Checks some commerce stuff
 */
function getUserPremiumAccess() {
    return _in(0x75461549, 0x0a029508, _r, _ri);
}
exports.getUserPremiumAccess = getUserPremiumAccess;
/**
 * Checks some commerce stuff
 */
function getUserStarterAccess() {
    return _in(0x155467ac, 0xa0f55705, _r, _ri);
}
exports.getUserStarterAccess = getUserStarterAccess;
function getUsingnightvision() {
    return _in(0x2202a3f4, 0x2c8e5f79, _r);
}
exports.getUsingnightvision = getUsingnightvision;
function getUsingseethrough() {
    return _in(0x44b80aba, 0xb9d80bd3, _r);
}
exports.getUsingseethrough = getUsingseethrough;
/**
 * Gets current UTC time
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
function getUtcTime() {
    const [year_out, month_out, day_out, hour_out, minute_out, second_out] = _in(0x8117e09a, 0x19eef4d3, _i, _i, _i, _i, _i, _i);
    return [year_out, month_out, day_out, hour_out, minute_out, second_out];
}
exports.getUtcTime = getUtcTime;
function getVariantComponent(componentHash, variantComponentIndex) {
    const [nameHash_out, enumValue_out, componentType_out] = _in(0x6e11f282, 0xf11863b6, _ch(componentHash), variantComponentIndex, _i, _i, _i);
    return [nameHash_out, enumValue_out, componentType_out];
}
exports.getVariantComponent = getVariantComponent;
function getVariantProp(componentHash, variantPropIndex) {
    const [nameHash_out, enumValue_out, anchorPoint_out] = _in(0xd81b7f27, 0xbc773e66, _ch(componentHash), variantPropIndex, _i, _i, _i);
    return [nameHash_out, enumValue_out, anchorPoint_out];
}
exports.getVariantProp = getVariantProp;
function getVariationChosenForScriptedLine(p0) {
    const [retval, p0_out] = _in(0xaa19f557, 0x2c38b564, _ii(p0), _r, _ri);
    return [retval, p0_out];
}
exports.getVariationChosenForScriptedLine = getVariationChosenForScriptedLine;
/**
 * static - max acceleration
 * @param vehicle
 */
function getVehicleAcceleration(vehicle) {
    return _in(0x5dd35c8d, 0x074e57ae, vehicle, _r, _rf);
}
exports.getVehicleAcceleration = getVehicleAcceleration;
/**
 * Returns attached vehicle (Vehicle in parameter must be cargobob)
 * @param cargobob
 */
function getVehicleAttachedToCargobob(cargobob) {
    return _in(0x873b82d4, 0x2ac2b9e5, cargobob, _r, _ri);
}
exports.getVehicleAttachedToCargobob = getVehicleAttachedToCargobob;
/**
 * Seems related to vehicle health, like the one in IV.
 * Max 1000, min 0.
 * Vehicle does not necessarily explode or become undrivable at 0.
 * @param vehicle
 */
function getVehicleBodyHealth(vehicle) {
    return _in(0xf271147e, 0xb7b40f12, vehicle, _r, _rf);
}
exports.getVehicleBodyHealth = getVehicleBodyHealth;
/**
 * Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * @param vehicle
 */
function getVehicleBombAmmo(vehicle) {
    return _in(0xea12bd13, 0x0d7569a1, vehicle, _r, _ri);
}
exports.getVehicleBombAmmo = getVehicleBombAmmo;
function getVehicleCanDeployParachute(vehicle) {
    return _in(0xa916396d, 0xf4154ee3, vehicle, _r);
}
exports.getVehicleCanDeployParachute = getVehicleCanDeployParachute;
/**
 * iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
 * if (iVar3 == joaat("weapon_stickybomb"))
 * {
 * func_171(726);
 * iLocal_260 = 1;
 * }
 * @param vehicle
 */
function getVehicleCauseOfDestruction(vehicle) {
    return _in(0xe495d1ef, 0x4c91fd20, vehicle, _r, _ri);
}
exports.getVehicleCauseOfDestruction = getVehicleCauseOfDestruction;
/**
 * Returns an int
 *
 * Vehicle Classes:
 * 0: Compacts
 * 1: Sedans
 * 2: SUVs
 * 3: Coupes
 * 4: Muscle
 * 5: Sports Classics
 * 6: Sports
 * 7: Super
 * 8: Motorcycles
 * 9: Off-road
 * 10: Industrial
 * 11: Utility
 * 12: Vans
 * 13: Cycles
 * 14: Boats
 * 15: Helicopters
 * 16: Planes
 * 17: Service
 * 18: Emergency
 * 19: Military
 * 20: Commercial
 * 21: Trains
 *
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
 *
 * const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
 * @param vehicle
 */
function getVehicleClass(vehicle) {
    return _in(0x29439776, 0xaaa00a62, vehicle, _r, _ri);
}
exports.getVehicleClass = getVehicleClass;
function getVehicleClassEstimatedMaxSpeed(vehicleClass) {
    return _in(0x00c09f24, 0x6abedd82, vehicleClass, _r, _rf);
}
exports.getVehicleClassEstimatedMaxSpeed = getVehicleClassEstimatedMaxSpeed;
/**
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
 *
 * const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleClassFromName(modelHash) {
    return _in(0xdedf1c8b, 0xd47c2200, _ch(modelHash), _r, _ri);
}
exports.getVehicleClassFromName = getVehicleClassFromName;
function getVehicleClassMaxAcceleration(vehicleClass) {
    return _in(0x2f83e7e4, 0x5d9ea7ae, vehicleClass, _r, _rf);
}
exports.getVehicleClassMaxAcceleration = getVehicleClassMaxAcceleration;
function getVehicleClassMaxAgility(vehicleClass) {
    return _in(0x4f930ad0, 0x22d6de3b, vehicleClass, _r, _rf);
}
exports.getVehicleClassMaxAgility = getVehicleClassMaxAgility;
function getVehicleClassMaxBraking(vehicleClass) {
    return _in(0x4bf54c16, 0xec8fec03, vehicleClass, _r, _rf);
}
exports.getVehicleClassMaxBraking = getVehicleClassMaxBraking;
function getVehicleClassMaxTraction(vehicleClass) {
    return _in(0xdbc86d85, 0xc5059461, vehicleClass, _r, _rf);
}
exports.getVehicleClassMaxTraction = getVehicleClassMaxTraction;
/**
 * What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
function getVehicleColor(vehicle) {
    const [r_out, g_out, b_out] = _in(0xf3cc740d, 0x36221548, vehicle, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getVehicleColor = getVehicleColor;
/**
 * Returns the index of the color combination found in the vehicle's carvariations.meta entry.
 * @param vehicle
 */
function getVehicleColourCombination(vehicle) {
    return _in(0x6a842d19, 0x7f845d56, vehicle, _r, _ri);
}
exports.getVehicleColourCombination = getVehicleColourCombination;
function getVehicleColours(vehicle) {
    const [colorPrimary_out, colorSecondary_out] = _in(0xa19435f1, 0x93e081ac, vehicle, _i, _i);
    return [colorPrimary_out, colorSecondary_out];
}
exports.getVehicleColours = getVehicleColours;
/**
 * Some kind of flags.
 * @param vehicle
 */
function getVehicleColoursWhichCanBeSet(vehicle) {
    return _in(0xeebfc7a7, 0xefdc35b4, vehicle, _r, _ri);
}
exports.getVehicleColoursWhichCanBeSet = getVehicleColoursWhichCanBeSet;
/**
 * Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
 * Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
 * @param vehicle
 */
function getVehicleCountermeasureAmmo(vehicle) {
    return _in(0xf846aa63, 0xdf56b804, vehicle, _r, _ri);
}
exports.getVehicleCountermeasureAmmo = getVehicleCountermeasureAmmo;
function getVehicleCrewEmblemRequestState(vehicle, p1) {
    return _in(0xfe26117a, 0x5841b2ff, vehicle, p1, _r, _ri);
}
exports.getVehicleCrewEmblemRequestState = getVehicleCrewEmblemRequestState;
/**
 * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
 * @param vehicle
 */
function getVehicleCurrentTimeInSlipStream(vehicle) {
    return _in(0x36492c2f, 0x0d134c56, vehicle, _r, _rf);
}
exports.getVehicleCurrentTimeInSlipStream = getVehicleCurrentTimeInSlipStream;
function getVehicleCustomPrimaryColour(vehicle) {
    const [r_out, g_out, b_out] = _in(0xb64cf2cc, 0xa9d95f52, vehicle, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getVehicleCustomPrimaryColour = getVehicleCustomPrimaryColour;
function getVehicleCustomSecondaryColour(vehicle) {
    const [r_out, g_out, b_out] = _in(0x8389cd56, 0xca8072dc, vehicle, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getVehicleCustomSecondaryColour = getVehicleCustomSecondaryColour;
/**
 * Returns hash of default vehicle horn
 *
 * Hash is stored in audVehicleAudioEntity
 * @param vehicle
 */
function getVehicleDefaultHorn(vehicle) {
    return _in(0x02165d55, 0x000219ac, vehicle, _r, _ri);
}
exports.getVehicleDefaultHorn = getVehicleDefaultHorn;
function getVehicleDefaultHornIgnoreMods(vehicle) {
    return _in(0xacb5dcca, 0x1ec76840, vehicle, _r, _ri);
}
exports.getVehicleDefaultHornIgnoreMods = getVehicleDefaultHornIgnoreMods;
/**
 * The only example I can find of this function in the scripts, is this:
 *
 * struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
 *
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * PC scripts:
 *
 * v_5 -- [[{3}]]  = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
function getVehicleDeformationAtPos(vehicle, offsetX, offsetY, offsetZ) {
    return _mv(_in(0x4ec6cfbc, 0x7b2e9536, vehicle, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv));
}
exports.getVehicleDeformationAtPos = getVehicleDeformationAtPos;
/**
 * Dirt level does not become greater than 15.0
 * @param vehicle
 */
function getVehicleDirtLevel(vehicle) {
    return _in(0x8f17bc8b, 0xa08da62b, vehicle, _r, _rf);
}
exports.getVehicleDirtLevel = getVehicleDirtLevel;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
function getVehicleDoorAngleRatio(vehicle, doorId) {
    return _in(0xfe3f9c29, 0xf7b32bd5, vehicle, doorId, _r, _rf);
}
exports.getVehicleDoorAngleRatio = getVehicleDoorAngleRatio;
/**
 * enum VehicleLockStatus = {
 * None = 0,
 * Unlocked = 1,
 * Locked = 2,
 * LockedForPlayer = 3,
 * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
 * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
 * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
 * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
 * }
 * @param vehicle
 */
function getVehicleDoorLockStatus(vehicle) {
    return _in(0x25bc98a5, 0x9c2ea962, vehicle, _r, _ri);
}
exports.getVehicleDoorLockStatus = getVehicleDoorLockStatus;
function getVehicleDoorsLockedForPlayer(vehicle, player) {
    return _in(0xf6af6cb3, 0x41349015, vehicle, player, _r);
}
exports.getVehicleDoorsLockedForPlayer = getVehicleDoorsLockedForPlayer;
/**
 * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
 *
 * Minimum: -4000
 * Maximum: 1000
 *
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * @param vehicle
 */
function getVehicleEngineHealth(vehicle) {
    return _in(0xc45d23ba, 0xf168aab8, vehicle, _r, _rf);
}
exports.getVehicleEngineHealth = getVehicleEngineHealth;
/**
 * The result is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 */
function getVehicleEnveffScale(vehicle) {
    return _in(0xa82819ca, 0xc9c4c403, vehicle, _r, _rf);
}
exports.getVehicleEnveffScale = getVehicleEnveffScale;
function getVehicleEstimatedMaxSpeed(vehicle) {
    return _in(0x53af99ba, 0xa671ca47, vehicle, _r, _rf);
}
exports.getVehicleEstimatedMaxSpeed = getVehicleEstimatedMaxSpeed;
function getVehicleExtraColour5(vehicle, color) {
    return _in(0x7d1464d4, 0x72d32136, vehicle, _ii(color));
}
exports.getVehicleExtraColour5 = getVehicleExtraColour5;
function getVehicleExtraColour6(vehicle, color) {
    return _in(0xb7635e80, 0xa5c31bff, vehicle, _ii(color));
}
exports.getVehicleExtraColour6 = getVehicleExtraColour6;
function getVehicleExtraColours(vehicle) {
    const [pearlescentColor_out, wheelColor_out] = _in(0x3bc42459, 0x33a166f7, vehicle, _i, _i);
    return [pearlescentColor_out, wheelColor_out];
}
exports.getVehicleExtraColours = getVehicleExtraColours;
function getVehicleFlightNozzlePosition(plane) {
    return _in(0xda62027c, 0x8bdb326e, plane, _r, _rf);
}
exports.getVehicleFlightNozzlePosition = getVehicleFlightNozzlePosition;
/**
 * Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
 * @param vehicle
 */
function getVehicleHasKers(vehicle) {
    return _in(0x50634e34, 0x8c8d44ef, vehicle, _r);
}
exports.getVehicleHasKers = getVehicleHasKers;
function getVehicleHasLandingGear(vehicle) {
    return _in(0xe43701c3, 0x6caff1a4, vehicle, _r);
}
exports.getVehicleHasLandingGear = getVehicleHasLandingGear;
function getVehicleHasParachute(vehicle) {
    return _in(0xbc9cff38, 0x1338cb4f, vehicle, _r);
}
exports.getVehicleHasParachute = getVehicleHasParachute;
/**
 * 0 min 100 max
 * starts at 100
 * Seams to have health zones
 * Front of vehicle when damaged goes from 100-50 and stops at 50.
 * Rear can be damaged from 100-0
 * Only tested with two cars.
 *
 * any idea how this differs from the first one?
 *
 * --
 * May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
 *
 * example:
 *
 * v_F = ENTITY::GET_ENTITY_MODEL(v_3);
 * if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
 * if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {
 * NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
 * }
 * }
 * @param vehicle
 * @param maxEngineHealth
 * @param maxPetrolTankHealth
 * @param maxBodyHealth
 * @param maxMainRotorHealth
 * @param maxTailRotorHealth
 * @param maxUnkHealth
 */
function getVehicleHealthPercentage(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth) {
    return _in(0xb8ef6120, 0x7c2393a9, vehicle, _fv(maxEngineHealth), _fv(maxPetrolTankHealth), _fv(maxBodyHealth), _fv(maxMainRotorHealth), _fv(maxTailRotorHealth), _fv(maxUnkHealth), _r, _rf);
}
exports.getVehicleHealthPercentage = getVehicleHealthPercentage;
function getVehicleHomingLockedontoState(p0) {
    return _in(0x6eaaefc7, 0x6acc311f, p0, _r, _ri);
}
exports.getVehicleHomingLockedontoState = getVehicleHomingLockedontoState;
/**
 * Returns a value depending on the lock-on state of vehicle weapons.
 * 0: not locked on
 * 1: locking on
 * 2: locked on
 * @param vehicle
 */
function getVehicleHomingLockonState(vehicle) {
    return _in(0xe6b0e8cf, 0xc3633bf0, vehicle, _r, _ri);
}
exports.getVehicleHomingLockonState = getVehicleHomingLockonState;
function getVehicleHornSoundIndex(vehicle) {
    return _in(0xd53f3a29, 0xbce2580e, vehicle, _r, _ri);
}
exports.getVehicleHornSoundIndex = getVehicleHornSoundIndex;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
function getVehicleIndexFromEntityIndex(entity) {
    return _in(0x4b53f929, 0x32adfac0, entity, _r, _ri);
}
exports.getVehicleIndexFromEntityIndex = getVehicleIndexFromEntityIndex;
/**
 * Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
 * @param vehicle
 * @param doorId
 */
function getVehicleIndividualDoorLockStatus(vehicle, doorId) {
    return _in(0xca4ac3ea, 0xae46ec7b, vehicle, doorId, _r, _ri);
}
exports.getVehicleIndividualDoorLockStatus = getVehicleIndividualDoorLockStatus;
function getVehicleIsDummy(p0) {
    return _in(0x8533cafd, 0xe1f0f336, p0, _r);
}
exports.getVehicleIsDummy = getVehicleIsDummy;
function getVehicleIsMercenary(vehicle) {
    return _in(0xd4c4642c, 0xb7f50b5d, vehicle, _r);
}
exports.getVehicleIsMercenary = getVehicleIsMercenary;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param vehicle
 */
function getVehicleLayoutHash(vehicle) {
    return _in(0x28d37d4f, 0x71ac5c58, vehicle, _r, _ri);
}
exports.getVehicleLayoutHash = getVehicleLayoutHash;
function getVehicleLightsState(vehicle) {
    const [retval, lightsOn_out, highbeamsOn_out] = _in(0xb91b4c20, 0x085bd12f, vehicle, _i, _i, _r);
    return [retval, lightsOn_out, highbeamsOn_out];
}
exports.getVehicleLightsState = getVehicleLightsState;
/**
 * -1 = no livery
 * @param vehicle
 */
function getVehicleLivery(vehicle) {
    return _in(0x2bb92305, 0x90da5e8a, vehicle, _r, _ri);
}
exports.getVehicleLivery = getVehicleLivery;
/**
 * Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.
 * @param vehicle
 */
function getVehicleLivery2(vehicle) {
    return _in(0x60190048, 0xc0764a26, vehicle, _r, _ri);
}
exports.getVehicleLivery2 = getVehicleLivery2;
/**
 * Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.
 * @param vehicle
 */
function getVehicleLivery2Count(vehicle) {
    return _in(0x5ecb4026, 0x9053c0d4, vehicle, _r, _ri);
}
exports.getVehicleLivery2Count = getVehicleLivery2Count;
/**
 * Returns -1 if the vehicle has no livery
 * @param vehicle
 */
function getVehicleLiveryCount(vehicle) {
    return _in(0x87b63e25, 0xa529d526, vehicle, _r, _ri);
}
exports.getVehicleLiveryCount = getVehicleLiveryCount;
function getVehicleLockOnTarget(vehicle, entity) {
    const [retval, entity_out] = _in(0x8f5ebab1, 0xf260cfce, vehicle, _ii(entity), _r);
    return [retval, entity_out];
}
exports.getVehicleLockOnTarget = getVehicleLockOnTarget;
function getVehicleMaxBraking(vehicle) {
    return _in(0xad7e85fc, 0x227197c4, vehicle, _r, _rf);
}
exports.getVehicleMaxBraking = getVehicleMaxBraking;
function getVehicleMaxNumberOfPassengers(vehicle) {
    return _in(0xa7c4f2c6, 0xe744a550, vehicle, _r, _ri);
}
exports.getVehicleMaxNumberOfPassengers = getVehicleMaxNumberOfPassengers;
function getVehicleMaxTraction(vehicle) {
    return _in(0xa132fb53, 0x70554db0, vehicle, _r, _rf);
}
exports.getVehicleMaxTraction = getVehicleMaxTraction;
/**
 * In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
 *
 * Returns -1 if the vehicle mod is stock
 * @param vehicle
 * @param modType
 */
function getVehicleMod(vehicle, modType) {
    return _in(0x77296029, 0x8da26fdb, vehicle, modType, _r, _ri);
}
exports.getVehicleMod = getVehicleMod;
function getVehicleModColor1(vehicle) {
    const [paintType_out, color_out, pearlescentColor_out] = _in(0xe8d65ca7, 0x00c9a693, vehicle, _i, _i, _i);
    return [paintType_out, color_out, pearlescentColor_out];
}
exports.getVehicleModColor1 = getVehicleModColor1;
/**
 * Returns a string which is the codename of the vehicle's currently selected primary color
 *
 * p1 is always 0
 * @param vehicle
 * @param p1
 */
function getVehicleModColor1Name(vehicle, p1) {
    return _in(0xb45085b7, 0x21efd38c, vehicle, p1, _r, _s);
}
exports.getVehicleModColor1Name = getVehicleModColor1Name;
function getVehicleModColor2(vehicle) {
    const [paintType_out, color_out] = _in(0x81592be4, 0xe3878728, vehicle, _i, _i);
    return [paintType_out, color_out];
}
exports.getVehicleModColor2 = getVehicleModColor2;
/**
 * Returns a string which is the codename of the vehicle's currently selected secondary color
 * @param vehicle
 */
function getVehicleModColor2Name(vehicle) {
    return _in(0x4967a516, 0xed23a5a1, vehicle, _r, _s);
}
exports.getVehicleModColor2Name = getVehicleModColor2Name;
/**
 * Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
 * @param vehicle
 * @param modType
 * @param modIndex
 */
function getVehicleModIdentifierHash(vehicle, modType, modIndex) {
    return _in(0x4593cf82, 0xaa179706, vehicle, modType, modIndex, _r, _ri);
}
exports.getVehicleModIdentifierHash = getVehicleModIdentifierHash;
function getVehicleModKit(vehicle) {
    return _in(0x6325d1a0, 0x44ae510d, vehicle, _r, _ri);
}
exports.getVehicleModKit = getVehicleModKit;
function getVehicleModKitType(vehicle) {
    return _in(0xfc058f51, 0x21e54c32, vehicle, _r, _ri);
}
exports.getVehicleModKitType = getVehicleModKitType;
function getVehicleModModifierValue(vehicle, modType, modIndex) {
    return _in(0x90a38e98, 0x38e0a8c1, vehicle, modType, modIndex, _r, _ri);
}
exports.getVehicleModModifierValue = getVehicleModModifierValue;
/**
 * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
 * @param vehicle
 * @param modType
 */
function getVehicleModVariation(vehicle, modType) {
    return _in(0xb3924ecd, 0x70e095dc, vehicle, modType, _r, _ri);
}
exports.getVehicleModVariation = getVehicleModVariation;
/**
 * Returns the acceleration of the specified model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelAcceleration(modelHash) {
    return _in(0x8c044c5c, 0x84505b6a, _ch(modelHash), _r, _rf);
}
exports.getVehicleModelAcceleration = getVehicleModelAcceleration;
/**
 * 9.8 * thrust if air vehicle, else 0.38 + drive force?
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelAccelerationMaxMods(modelHash) {
    return _in(0x53409b51, 0x63d5b846, _ch(modelHash), _r, _rf);
}
exports.getVehicleModelAccelerationMaxMods = getVehicleModelAccelerationMaxMods;
/**
 * Returns max speed (without mods) of the specified vehicle model in m/s.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelEstimatedMaxSpeed(modelHash) {
    return _in(0xf417c250, 0x2fffed43, _ch(modelHash), _r, _rf);
}
exports.getVehicleModelEstimatedMaxSpeed = getVehicleModelEstimatedMaxSpeed;
/**
 * Returns max braking of the specified vehicle model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelMaxBraking(modelHash) {
    return _in(0xdc53fd41, 0xb4ed944c, _ch(modelHash), _r, _rf);
}
exports.getVehicleModelMaxBraking = getVehicleModelMaxBraking;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelMaxBrakingMaxMods(modelHash) {
    return _in(0xbfba3ba7, 0x9cff7ebf, _ch(modelHash), _r, _rf);
}
exports.getVehicleModelMaxBrakingMaxMods = getVehicleModelMaxBrakingMaxMods;
/**
 * Returns max traction of the specified vehicle model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelMaxTraction(modelHash) {
    return _in(0x539de94d, 0x44fdfd0d, _ch(modelHash), _r, _rf);
}
exports.getVehicleModelMaxTraction = getVehicleModelMaxTraction;
/**
 * Returns max number of passengers (including the driver) for the specified vehicle model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function getVehicleModelNumberOfSeats(modelHash) {
    return _in(0x2ad93716, 0xf184eda4, _ch(modelHash), _r, _ri);
}
exports.getVehicleModelNumberOfSeats = getVehicleModelNumberOfSeats;
/**
 * Returns `nMonetaryValue` from handling.meta for specific model.
 * @param vehicleModel
 */
function getVehicleModelValue(vehicleModel) {
    return _in(0x5873c14a, 0x52d74236, _ch(vehicleModel), _r, _ri);
}
exports.getVehicleModelValue = getVehicleModelValue;
/**
 * Gets the color of the neon lights of the specified vehicle.
 *
 * See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
function getVehicleNeonColour(vehicle) {
    const [r_out, g_out, b_out] = _in(0x7619eee8, 0xc886757f, vehicle, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getVehicleNeonColour = getVehicleNeonColour;
/**
 * indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * @param vehicle
 * @param index
 */
function getVehicleNeonEnabled(vehicle, index) {
    return _in(0x8c4b9255, 0x3e4766a5, vehicle, index, _r);
}
exports.getVehicleNeonEnabled = getVehicleNeonEnabled;
/**
 * Returns false for nodes that aren't used for GPS routes.
 * Example:
 * Nodes in Fort Zancudo and LSIA are false
 * @param nodeID
 */
function getVehicleNodeIsGpsAllowed(nodeID) {
    return _in(0xa2ae5c47, 0x8b96e3b6, nodeID, _r);
}
exports.getVehicleNodeIsGpsAllowed = getVehicleNodeIsGpsAllowed;
/**
 * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
 * Normal roads where plenty of Peds spawn will return false
 * @param nodeID
 */
function getVehicleNodeIsSwitchedOff(nodeID) {
    return _in(0x4f5070aa, 0x58f69279, nodeID, _r);
}
exports.getVehicleNodeIsSwitchedOff = getVehicleNodeIsSwitchedOff;
/**
 * Calling this with an invalid node id, will crash the game.
 * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
 * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
 * @param nodeId
 * @param outPosition
 */
function getVehicleNodePosition(nodeId, outPosition) {
    return _in(0x703123e5, 0xe7d429c2, nodeId, _v);
}
exports.getVehicleNodePosition = getVehicleNodePosition;
/**
 * Gets the density and flags of the closest node to the specified position.
 * Density is a value between 0 and 15, indicating how busy the road is.
 * Flags is a bit field.
 * @param x
 * @param y
 * @param z
 * @param density
 * @param flags
 */
function getVehicleNodeProperties(x, y, z) {
    const [retval, density_out, flags_out] = _in(0x0568566a, 0xcbb5dedc, _fv(x), _fv(y), _fv(z), _i, _i, _r);
    return [retval, density_out, flags_out];
}
exports.getVehicleNodeProperties = getVehicleNodeProperties;
function getVehicleNumOfBrokenLoosenParts(vehicle) {
    return _in(0x2c8cbfe1, 0xea5fc631, vehicle, _r, _ri);
}
exports.getVehicleNumOfBrokenLoosenParts = getVehicleNumOfBrokenLoosenParts;
/**
 * Also includes some "turnOffBones" when vehicle mods are installed.
 * @param vehicle
 */
function getVehicleNumOfBrokenOffParts(vehicle) {
    return _in(0x42a4beb3, 0x5d372407, vehicle, _r, _ri);
}
exports.getVehicleNumOfBrokenOffParts = getVehicleNumOfBrokenOffParts;
/**
 * Gets the number of passengers.
 *
 * This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
 *
 * To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
 * @param vehicle
 * @param includeDriver
 * @param includeDeadOccupants
 */
function getVehicleNumberOfPassengers(vehicle, includeDriver, includeDeadOccupants) {
    return _in(0x24cb2137, 0x731ffe89, vehicle, includeDriver, includeDeadOccupants, _r, _ri);
}
exports.getVehicleNumberOfPassengers = getVehicleNumberOfPassengers;
/**
 * Returns the license plate text from a vehicle. 8 chars maximum.
 * @param vehicle
 */
function getVehicleNumberPlateText(vehicle) {
    return _in(0x7ce1ccb9, 0xb293020e, vehicle, _r, _s);
}
exports.getVehicleNumberPlateText = getVehicleNumberPlateText;
/**
 * Returns the PlateType of a vehicle
 * Blue_on_White_1 = 3,
 * Blue_on_White_2 = 0,
 * Blue_on_White_3 = 4,
 * Yellow_on_Blue = 2,
 * Yellow_on_Black = 1,
 * North_Yankton = 5,
 * @param vehicle
 */
function getVehicleNumberPlateTextIndex(vehicle) {
    return _in(0xf11bc2dd, 0x9a3e7195, vehicle, _r, _ri);
}
exports.getVehicleNumberPlateTextIndex = getVehicleNumberPlateTextIndex;
function getVehiclePedIsEntering(ped) {
    return _in(0xf92691ae, 0xd837a5fc, ped, _r, _ri);
}
exports.getVehiclePedIsEntering = getVehiclePedIsEntering;
/**
 * Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
 * @param ped
 * @param includeEntering
 */
function getVehiclePedIsIn(ped, includeEntering) {
    return _in(0x9a9112a0, 0xfe9a4713, ped, includeEntering, _r, _ri);
}
exports.getVehiclePedIsIn = getVehiclePedIsIn;
function getVehiclePedIsTryingToEnter(ped) {
    return _in(0x814fa8be, 0x5449445d, ped, _r, _ri);
}
exports.getVehiclePedIsTryingToEnter = getVehiclePedIsTryingToEnter;
/**
 * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
 * @param ped
 */
function getVehiclePedIsUsing(ped) {
    return _in(0x6094ad01, 0x1a2ea87d, ped, _r, _ri);
}
exports.getVehiclePedIsUsing = getVehiclePedIsUsing;
/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs
 * @param vehicle
 */
function getVehiclePetrolTankHealth(vehicle) {
    return _in(0x7d5dabe8, 0x88d2d074, vehicle, _r, _rf);
}
exports.getVehiclePetrolTankHealth = getVehiclePetrolTankHealth;
function getVehiclePlateType(vehicle) {
    return _in(0x9ccc9525, 0xbf2408e0, vehicle, _r, _ri);
}
exports.getVehiclePlateType = getVehiclePlateType;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
function getVehicleRecordingId(recording, script) {
    return _in(0x21543c61, 0x2379db3c, recording, _ts(script), _r, _ri);
}
exports.getVehicleRecordingId = getVehicleRecordingId;
/**
 * Outputs 2 Vector3's.
 * Scripts check if out2.x - out1.x > someshit.x
 * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
 * @param vehicle
 * @param out1
 * @param out2
 */
function getVehicleSize(vehicle) {
    const [out1_out, out2_out] = _in(0xdf7e3eeb, 0x29642c38, vehicle, _v, _v);
    return [_mv(out1_out), _mv(out2_out)];
}
exports.getVehicleSize = getVehicleSize;
function getVehicleTrailerParentVehicle(trailer) {
    return _in(0x80d9d326, 0x36369c92, trailer, _r, _ri);
}
exports.getVehicleTrailerParentVehicle = getVehicleTrailerParentVehicle;
/**
 * Gets the trailer of a vehicle and puts it into the trailer parameter.
 * @param vehicle
 * @param trailer
 */
function getVehicleTrailerVehicle(vehicle, trailer) {
    const [retval, trailer_out] = _in(0x1cdd6bad, 0xc297830d, vehicle, _ii(trailer), _r);
    return [retval, trailer_out];
}
exports.getVehicleTrailerVehicle = getVehicleTrailerVehicle;
function getVehicleTyreSmokeColor(vehicle) {
    const [r_out, g_out, b_out] = _in(0xb635392a, 0x4938b3c3, vehicle, _i, _i, _i);
    return [r_out, g_out, b_out];
}
exports.getVehicleTyreSmokeColor = getVehicleTyreSmokeColor;
function getVehicleTyresCanBurst(vehicle) {
    return _in(0x678b9bb8, 0xc3f58feb, vehicle, _r);
}
exports.getVehicleTyresCanBurst = getVehicleTyresCanBurst;
function getVehicleWaypointProgress(vehicle) {
    return _in(0x9824cff8, 0xfc66e159, vehicle, _r, _ri);
}
exports.getVehicleWaypointProgress = getVehicleWaypointProgress;
function getVehicleWaypointTargetPoint(vehicle) {
    return _in(0x416b62ac, 0x8b9e5bbd, vehicle, _r, _ri);
}
exports.getVehicleWaypointTargetPoint = getVehicleWaypointTargetPoint;
function getVehicleWeaponRestrictedAmmo(vehicle, weaponIndex) {
    return _in(0x8181ce2f, 0x25cb9bb7, vehicle, weaponIndex, _r, _ri);
}
exports.getVehicleWeaponRestrictedAmmo = getVehicleWeaponRestrictedAmmo;
/**
 * Returns an int
 *
 * Wheel Types:
 * 0: Sport
 * 1: Muscle
 * 2: Lowrider
 * 3: SUV
 * 4: Offroad
 * 5: Tuner
 * 6: Bike Wheels
 * 7: High End
 * 8: Benny's Originals
 * 9: Benny's Bespoke
 * 10: Racing
 * 11: Street
 * 12: Track
 *
 * Tested in Los Santos Customs
 * @param vehicle
 */
function getVehicleWheelType(vehicle) {
    return _in(0xb3ed1bfb, 0x4be636dc, vehicle, _r, _ri);
}
exports.getVehicleWheelType = getVehicleWheelType;
function getVehicleWindowTint(vehicle) {
    return _in(0x0ee21293, 0xdad47c95, vehicle, _r, _ri);
}
exports.getVehicleWindowTint = getVehicleWindowTint;
/**
 * Returns the headlight color index from the vehicle. Value between 0, 12.
 * Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
 * Must enable xenon headlights before it'll take affect.
 *
 * Returns an int, value between 0-12 or 255 if no color is set.
 * @param vehicle
 */
function getVehicleXenonLightColorIndex(vehicle) {
    return _in(0x3dff319a, 0x831e0cdb, vehicle, _r, _ri);
}
exports.getVehicleXenonLightColorIndex = getVehicleXenonLightColorIndex;
/**
 * Remnant from GTA IV. Does nothing in GTA V.
 * @param player
 */
function getWantedLevelRadius(player) {
    return _in(0x085deb49, 0x3be80812, player, _r, _rf);
}
exports.getWantedLevelRadius = getWantedLevelRadius;
/**
 * Drft
 * @param wantedLevel
 */
function getWantedLevelThreshold(wantedLevel) {
    return _in(0xfdd179ea, 0xf45b556c, wantedLevel, _r, _ri);
}
exports.getWantedLevelThreshold = getWantedLevelThreshold;
function getWantedLevelTimeToEscape() {
    return _in(0xa72200f5, 0x1875fea4, _r, _ri);
}
exports.getWantedLevelTimeToEscape = getWantedLevelTimeToEscape;
/**
 * Has to do with the confirmation overlay (E.g. confirm exit)
 */
function getWarningScreenMessageHash() {
    return _in(0x81df9aba, 0x6c83dff9, _r, _ri);
}
exports.getWarningScreenMessageHash = getWarningScreenMessageHash;
/**
 * This function set height to the value of z-axis of the water surface.
 *
 * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
 *
 * note: seems to return true when you are in water
 * @param x
 * @param y
 * @param z
 * @param height
 */
function getWaterHeight(x, y, z, height) {
    const [retval, height_out] = _in(0xf6829842, 0xc06ae524, _fv(x), _fv(y), _fv(z), _fi(height), _r);
    return [retval, height_out];
}
exports.getWaterHeight = getWaterHeight;
function getWaterHeightNoWaves(x, y, z, height) {
    const [retval, height_out] = _in(0x8ee6b53c, 0xe13a9794, _fv(x), _fv(y), _fv(z), _fi(height), _r);
    return [retval, height_out];
}
exports.getWaterHeightNoWaves = getWaterHeightNoWaves;
function getWaypointBlipEnumId() {
    return _in(0x186e5d25, 0x2fa50e7d, _r, _ri);
}
exports.getWaypointBlipEnumId = getWaypointBlipEnumId;
function getWaypointDistanceAlongRoute(name, point) {
    return _in(0xa5b76905, 0x8763e497, _ts(name), point, _r, _rf);
}
exports.getWaypointDistanceAlongRoute = getWaypointDistanceAlongRoute;
/**
 * // Returns the size of the default weapon component clip.
 *
 * Use it like this:
 *
 * char cClipSize[32];
 * Hash cur;
 * if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
 * {
 * if (WEAPON::IS_WEAPON_VALID(cur))
 * {
 * int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
 * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
 * vDrawString(cClipSize, 0.5f, 0.5f);
 * }
 * }
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
function getWeaponClipSize(weaponHash) {
    return _in(0x583be370, 0xb1ec6eb4, _ch(weaponHash), _r, _ri);
}
exports.getWeaponClipSize = getWeaponClipSize;
function getWeaponComponentHudStats(componentHash, outData) {
    const [retval, outData_out] = _in(0xb3caf387, 0xae12e9f8, _ch(componentHash), _ii(outData), _r);
    return [retval, outData_out];
}
exports.getWeaponComponentHudStats = getWeaponComponentHudStats;
function getWeaponComponentTypeModel(componentHash) {
    return _in(0x0db57b41, 0xec1db083, _ch(componentHash), _r, _ri);
}
exports.getWeaponComponentTypeModel = getWeaponComponentTypeModel;
/**
 * Returns the amount of extra components the specified component has.
 * Returns -1 if the component isn't of type CWeaponComponentVariantModel.
 * @param componentHash
 */
function getWeaponComponentVariantExtraCount(componentHash) {
    return _in(0x6558ac7c, 0x17bfef58, _ch(componentHash), _r, _ri);
}
exports.getWeaponComponentVariantExtraCount = getWeaponComponentVariantExtraCount;
/**
 * Returns the model hash of the extra component at specified index.
 * @param componentHash
 * @param extraComponentIndex
 */
function getWeaponComponentVariantExtraModel(componentHash, extraComponentIndex) {
    return _in(0x4d1cb8dc, 0x40208a17, _ch(componentHash), extraComponentIndex, _r, _ri);
}
exports.getWeaponComponentVariantExtraModel = getWeaponComponentVariantExtraModel;
/**
 * This native does not return damages of weapons from the melee and explosive group.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param componentHash
 */
function getWeaponDamage(weaponHash, componentHash) {
    return _in(0x3133b907, 0xd8b32053, _ch(weaponHash), _ch(componentHash), _r, _rf);
}
exports.getWeaponDamage = getWeaponDamage;
/**
 * enum class eDamageType
 * {
 * UNKNOWN = 0,
 * NONE = 1,
 * MELEE = 2,
 * BULLET = 3,
 * BULLET_RUBBER = 4,
 * EXPLOSIVE = 5,
 * FIRE = 6,
 * COLLISION = 7,
 * FALL = 8,
 * DROWN = 9,
 * ELECTRIC = 10,
 * BARBED_WIRE = 11,
 * FIRE_EXTINGUISHER = 12,
 * SMOKE = 13,
 * WATER_CANNON = 14,
 * TRANQUILIZER = 15,
 * };
 *
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
function getWeaponDamageType(weaponHash) {
    return _in(0x3be0bb12, 0xd25fb305, _ch(weaponHash), _r, _ri);
}
exports.getWeaponDamageType = getWeaponDamageType;
/**
 * struct WeaponHudStatsData
 * {
 * BYTE hudDamage; // 0x0000
 * char _0x0001[0x7]; // 0x0001
 * BYTE hudSpeed; // 0x0008
 * char _0x0009[0x7]; // 0x0009
 * BYTE hudCapacity; // 0x0010
 * char _0x0011[0x7]; // 0x0011
 * BYTE hudAccuracy; // 0x0018
 * char _0x0019[0x7]; // 0x0019
 * BYTE hudRange; // 0x0020
 * };
 *
 * Usage:
 *
 * WeaponHudStatsData data;
 * if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
 * {
 * // BYTE damagePercentage = data.hudDamage and so on
 * }
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param outData
 */
function getWeaponHudStats(weaponHash, outData) {
    const [retval, outData_out] = _in(0xd92c739e, 0xe34c9eba, _ch(weaponHash), _ii(outData), _r);
    return [retval, outData_out];
}
exports.getWeaponHudStats = getWeaponHudStats;
/**
 * Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponObject
 * @param camoComponentHash
 */
function getWeaponObjectComponentTintIndex(weaponObject, camoComponentHash) {
    return _in(0xb3ea4fea, 0xbf41464b, weaponObject, _ch(camoComponentHash), _r, _ri);
}
exports.getWeaponObjectComponentTintIndex = getWeaponObjectComponentTintIndex;
/**
 * Drops the current weapon and returns the object
 *
 * Unknown behavior when unarmed.
 * @param ped
 * @param p1
 */
function getWeaponObjectFromPed(ped, p1) {
    return _in(0xcae1dc9a, 0x0e22a16d, ped, p1, _r, _ri);
}
exports.getWeaponObjectFromPed = getWeaponObjectFromPed;
function getWeaponObjectTintIndex(weapon) {
    return _in(0xcd183314, 0xf7cd2e57, weapon, _r, _ri);
}
exports.getWeaponObjectTintIndex = getWeaponObjectTintIndex;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
function getWeaponTimeBetweenShots(weaponHash) {
    return _in(0x065d2aac, 0xad8cf7a4, _ch(weaponHash), _r, _rf);
}
exports.getWeaponTimeBetweenShots = getWeaponTimeBetweenShots;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
function getWeaponTintCount(weaponHash) {
    return _in(0x5dcf6c5c, 0xab2e9bf7, _ch(weaponHash), _r, _ri);
}
exports.getWeaponTintCount = getWeaponTintCount;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
function getWeaponTypeFromPickupType(pickupHash) {
    return _in(0x08f96ca6, 0xc551ad51, _ch(pickupHash), _r, _ri);
}
exports.getWeaponTypeFromPickupType = getWeaponTypeFromPickupType;
function getWeapontypeGroup(weaponHash) {
    return _in(0xc3287ee3, 0x050fb74c, _ch(weaponHash), _r, _ri);
}
exports.getWeapontypeGroup = getWeapontypeGroup;
/**
 * Returns the model of any weapon.
 *
 * Can also take an ammo hash?
 * sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
 * @param weaponHash
 */
function getWeapontypeModel(weaponHash) {
    return _in(0xf46cdc33, 0x180fda94, _ch(weaponHash), _r, _ri);
}
exports.getWeapontypeModel = getWeapontypeModel;
function getWeapontypeSlot(weaponHash) {
    return _in(0x4215460b, 0x9b8b7fa0, _ch(weaponHash), _r, _ri);
}
exports.getWeapontypeSlot = getWeapontypeSlot;
function getWindDirection() {
    return _mv(_in(0x1f400fef, 0x721170da, _r, _rv));
}
exports.getWindDirection = getWindDirection;
function getWindSpeed() {
    return _in(0xa8cf1cc0, 0xafcd3f12, _r, _rf);
}
exports.getWindSpeed = getWindSpeed;
/**
 * Returns the coordinates of an entity-bone.
 * @param entity
 * @param boneIndex
 */
function getWorldPositionOfEntityBone(entity, boneIndex) {
    return _mv(_in(0x44a8fcb8, 0xed227738, entity, boneIndex, _r, _rv));
}
exports.getWorldPositionOfEntityBone = getWorldPositionOfEntityBone;
function getZoneAtCoords(x, y, z) {
    return _in(0x27040c25, 0xde6cb2f4, _fv(x), _fv(y), _fv(z), _r, _ri);
}
exports.getZoneAtCoords = getZoneAtCoords;
/**
 * 'zoneName' corresponds to an entry in 'popzone.ipl'.
 *
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 *
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param zoneName
 */
function getZoneFromNameId(zoneName) {
    return _in(0x98cd1d29, 0x34b76cc1, _ts(zoneName), _r, _ri);
}
exports.getZoneFromNameId = getZoneFromNameId;
function getZonePopschedule(zoneId) {
    return _in(0x4334bc40, 0xaa0cb4bb, zoneId, _r, _ri);
}
exports.getZonePopschedule = getZonePopschedule;
/**
 * cellphone range 1- 5 used for signal bar in iFruit phone
 * @param zoneId
 */
function getZoneScumminess(zoneId) {
    return _in(0x5f7b268d, 0x15ba0739, zoneId, _r, _ri);
}
exports.getZoneScumminess = getZoneScumminess;
/**
 * 1 - Welcome to Los Santos
 * 2 - A Friendship Resurrected
 * 3 - A Fair Day's Pay
 * 4 - The Moment of Truth
 * 5 - To Live or Die in Los Santos
 * 6 - Diamond Hard
 * 7 - Subversive
 * 8 - Blitzed
 * 9 - Small Town, Big Job
 * 10 - The Government Gimps
 * 11 - The Big One!
 * 12 - Solid Gold, Baby!
 * 13 - Career Criminal
 * 14 - San Andreas Sightseer
 * 15 - All's Fare in Love and War
 * 16 - TP Industries Arms Race
 * 17 - Multi-Disciplined
 * 18 - From Beyond the Stars
 * 19 - A Mystery, Solved
 * 20 - Waste Management
 * 21 - Red Mist
 * 22 - Show Off
 * 23 - Kifflom!
 * 24 - Three Man Army
 * 25 - Out of Your Depth
 * 26 - Altruist Acolyte
 * 27 - A Lot of Cheddar
 * 28 - Trading Pure Alpha
 * 29 - Pimp My Sidearm
 * 30 - Wanted: Alive Or Alive
 * 31 - Los Santos Customs
 * 32 - Close Shave
 * 33 - Off the Plane
 * 34 - Three-Bit Gangster
 * 35 - Making Moves
 * 36 - Above the Law
 * 37 - Numero Uno
 * 38 - The Midnight Club
 * 39 - Unnatural Selection
 * 40 - Backseat Driver
 * 41 - Run Like The Wind
 * 42 - Clean Sweep
 * 43 - Decorated
 * 44 - Stick Up Kid
 * 45 - Enjoy Your Stay
 * 46 - Crew Cut
 * 47 - Full Refund
 * 48 - Dialling Digits
 * 49 - American Dream
 * 50 - A New Perspective
 * 51 - Be Prepared
 * 52 - In the Name of Science
 * 53 - Dead Presidents
 * 54 - Parole Day
 * 55 - Shot Caller
 * 56 - Four Way
 * 57 - Live a Little
 * 58 - Can't Touch This
 * 59 - Mastermind
 * 60 - Vinewood Visionary
 * 61 - Majestic
 * 62 - Humans of Los Santos
 * 63 - First Time Director
 * 64 - Animal Lover
 * 65 - Ensemble Piece
 * 66 - Cult Movie
 * 67 - Location Scout
 * 68 - Method Actor
 * 69 - Cryptozoologist
 * 70 - Getting Started
 * 71 - The Data Breaches
 * 72 - The Bogdan Problem
 * 73 - The Doomsday Scenario
 * 74 - A World Worth Saving
 * 75 - Orbital Obliteration
 * 76 - Elitist
 * 77 - Masterminds
 * @param achievementId
 */
function giveAchievementToPlayer(achievementId) {
    return _in(0xbec7076d, 0x64130195, achievementId, _r);
}
exports.giveAchievementToPlayer = giveAchievementToPlayer;
/**
 * Gives a weapon to PED with a delay, example:
 *
 * WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param bForceInHand
 */
function giveDelayedWeaponToPed(ped, weaponHash, ammoCount, bForceInHand) {
    return _in(0xb282dc6e, 0xbd803c75, ped, _ch(weaponHash), ammoCount, bForceInHand);
}
exports.giveDelayedWeaponToPed = giveDelayedWeaponToPed;
/**
 * Gives the specified loadout to the specified ped.
 * Loadouts are defined in common.rpf\data\ai\loadouts.meta
 * @param ped
 * @param loadoutHash
 */
function giveLoadoutToPed(ped, loadoutHash) {
    return _in(0x68f8be6a, 0xf5cdf8a6, ped, _ch(loadoutHash));
}
exports.giveLoadoutToPed = giveLoadoutToPed;
/**
 * PoliceMotorcycleHelmet   1024
 * RegularMotorcycleHelmet   4096
 * FiremanHelmet 16384
 * PilotHeadset  32768
 * PilotHelmet   65536
 * --
 * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
 * @param ped
 * @param cannotRemove
 * @param helmetFlag
 * @param textureIndex
 */
function givePedHelmet(ped, cannotRemove, helmetFlag, textureIndex) {
    return _in(0x54c7c4a9, 0x4367717e, ped, cannotRemove, helmetFlag, textureIndex);
}
exports.givePedHelmet = givePedHelmet;
/**
 * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
 *
 * If a message hasn't been created already, this function does nothing.
 * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
 * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 *
 * Call order:
 * SET_PED_TO_RAGDOLL
 * CREATE_NM_MESSAGE
 * GIVE_PED_NM_MESSAGE
 *
 * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
 * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * @param ped
 */
function givePedNmMessage(ped) {
    return _in(0xb158dfcc, 0xc56e5c5b, ped);
}
exports.givePedNmMessage = givePedNmMessage;
/**
 * p1 is either 1 or 2 in the PC scripts.
 * @param ped
 * @param p1
 */
function givePedToPauseMenu(ped, p1) {
    return _in(0xac0bfbdc, 0x3be00e14, ped, p1);
}
exports.givePedToPauseMenu = givePedToPauseMenu;
function givePlayerRagdollControl(player, toggle) {
    return _in(0x3c49c870, 0xe66f0a28, player, toggle);
}
exports.givePlayerRagdollControl = givePlayerRagdollControl;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
function giveWeaponComponentToPed(ped, weaponHash, componentHash) {
    return _in(0xd966d51a, 0xa5b28bb9, ped, _ch(weaponHash), _ch(componentHash));
}
exports.giveWeaponComponentToPed = giveWeaponComponentToPed;
/**
 * componentHash:
 * (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
 * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
 * @param weaponObject
 * @param componentHash
 */
function giveWeaponComponentToWeaponObject(weaponObject, componentHash) {
    return _in(0x33e17943, 0x6c0b31db, weaponObject, _ch(componentHash));
}
exports.giveWeaponComponentToWeaponObject = giveWeaponComponentToWeaponObject;
function giveWeaponObjectToPed(weaponObject, ped) {
    return _in(0xb1fa6137, 0x1af7c4b7, weaponObject, ped);
}
exports.giveWeaponObjectToPed = giveWeaponObjectToPed;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param isHidden
 * @param bForceInHand
 */
function giveWeaponToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand) {
    return _in(0xbf0fd6e5, 0x6c964fcb, ped, _ch(weaponHash), ammoCount, isHidden, bForceInHand);
}
exports.giveWeaponToPed = giveWeaponToPed;
function golfTrailGetMaxHeight() {
    return _in(0xa4819f5e, 0x23e2ffad, _r, _rf);
}
exports.golfTrailGetMaxHeight = golfTrailGetMaxHeight;
function golfTrailGetVisualControlPoint(p0) {
    return _mv(_in(0xa4664972, 0xa9b8f8ba, p0, _r, _rv));
}
exports.golfTrailGetVisualControlPoint = golfTrailGetVisualControlPoint;
function golfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    return _in(0x12995f2e, 0x53ffa601, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
}
exports.golfTrailSetColour = golfTrailSetColour;
function golfTrailSetEnabled(toggle) {
    return _in(0xa51c4b86, 0xb71652ae, toggle);
}
exports.golfTrailSetEnabled = golfTrailSetEnabled;
function golfTrailSetFacing(p0) {
    return _in(0x06f761ea, 0x47c1d3ed, p0);
}
exports.golfTrailSetFacing = golfTrailSetFacing;
/**
 * 12 matches across 4 scripts. All 4 scripts were job creators.
 *
 * type ranged from 0 - 2.
 * p4 was always 0.2f. Likely scale.
 * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
 *
 * Tested but noticed nothing.
 * @param type
 * @param xPos
 * @param yPos
 * @param zPos
 * @param p4
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function golfTrailSetFixedControlPoint(type, xPos, yPos, zPos, p4, red, green, blue, alpha) {
    return _in(0xb1bb0374, 0x2917a5d6, type, _fv(xPos), _fv(yPos), _fv(zPos), _fv(p4), red, green, blue, alpha);
}
exports.golfTrailSetFixedControlPoint = golfTrailSetFixedControlPoint;
function golfTrailSetFixedControlPointEnable(p0) {
    return _in(0xc0416b06, 0x1f2b7e5e, p0);
}
exports.golfTrailSetFixedControlPointEnable = golfTrailSetFixedControlPointEnable;
/**
 * p8 seems to always be false.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
function golfTrailSetPath(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x312342e1, 0xa4874f3f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8);
}
exports.golfTrailSetPath = golfTrailSetPath;
function golfTrailSetRadius(p0, p1, p2) {
    return _in(0x2485d34e, 0x50a22e84, _fv(p0), _fv(p1), _fv(p2));
}
exports.golfTrailSetRadius = golfTrailSetRadius;
/**
 * Only appeared in Golf & Golf_mp. Parameters were all ptrs
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
function golfTrailSetShaderParams(p0, p1, p2, p3, p4) {
    return _in(0x9cfdd90b, 0x2b844bf7, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4));
}
exports.golfTrailSetShaderParams = golfTrailSetShaderParams;
function golfTrailSetTessellation(p0, p1) {
    return _in(0xdbaa5ec8, 0x48ba2d46, p0, p1);
}
exports.golfTrailSetTessellation = golfTrailSetTessellation;
function grabPausemenuOwnership() {
    return _in(0x851cd923, 0x176eba7c);
}
exports.grabPausemenuOwnership = grabPausemenuOwnership;
function grassbatchDisableFlattening() {
    return _in(0x302c91ab, 0x2d477f7e);
}
exports.grassbatchDisableFlattening = grassbatchDisableFlattening;
function grassbatchEnableFlatteningExtInSphere(x, y, z, p3, p4, p5, p6, scale) {
    return _in(0xaae9be70, 0xec7c69ab, _fv(x), _fv(y), _fv(z), p3, _fv(p4), _fv(p5), _fv(p6), _fv(scale));
}
exports.grassbatchEnableFlatteningExtInSphere = grassbatchEnableFlatteningExtInSphere;
/**
 * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 */
function grassbatchEnableFlatteningInSphere(x, y, z, radius, p4, p5, p6) {
    return _in(0x6d955f6a, 0x9e0295b1, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p4), _fv(p5), _fv(p6));
}
exports.grassbatchEnableFlatteningInSphere = grassbatchEnableFlatteningInSphere;
/**
 * Example from am_mp_drone script:
 *
 * CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);
 * @param cam
 * @param entity
 * @param xRot
 * @param yRot
 * @param zRot
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
function hardAttachCamToEntity(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative) {
    return _in(0x202a5ed9, 0xce01d6e7, cam, entity, _fv(xRot), _fv(yRot), _fv(zRot), _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative);
}
exports.hardAttachCamToEntity = hardAttachCamToEntity;
function hardAttachCamToPedBone(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0x149916f5, 0x0c34a40d, cam, ped, boneIndex, _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9);
}
exports.hardAttachCamToPedBone = hardAttachCamToPedBone;
/**
 * See GIVE_ACHIEVEMENT_TO_PLAYER
 * @param achievementId
 */
function hasAchievementBeenPassed(achievementId) {
    return _in(0x867365e1, 0x11a3b6eb, achievementId, _r);
}
exports.hasAchievementBeenPassed = hasAchievementBeenPassed;
function hasActionModeAssetLoaded(asset) {
    return _in(0xe4b5f4bf, 0x2cb24e65, _ts(asset), _r);
}
exports.hasActionModeAssetLoaded = hasActionModeAssetLoaded;
function hasAdditionalTextLoaded(slot) {
    return _in(0x02245fe4, 0xbed318b8, slot, _r);
}
exports.hasAdditionalTextLoaded = hasAdditionalTextLoaded;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
function hasAnimDictLoaded(animDict) {
    return _in(0xd031a916, 0x2d01088c, _ts(animDict), _r);
}
exports.hasAnimDictLoaded = hasAnimDictLoaded;
/**
 * if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
 * @param entity
 * @param actionHash
 */
function hasAnimEventFired(entity, actionHash) {
    return _in(0xeaf4cd9e, 0xa3e7e922, entity, _ch(actionHash), _r);
}
exports.hasAnimEventFired = hasAnimEventFired;
/**
 * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 *
 * Animation set and clip set are synonymous.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
function hasAnimSetLoaded(animSet) {
    return _in(0xc4ea073d, 0x86fb29b0, _ts(animSet), _r);
}
exports.hasAnimSetLoaded = hasAnimSetLoaded;
/**
 * Hardcoded to always return true.
 */
function hasAsyncInstallFinished() {
    return _in(0x14832bf2, 0xaba53fc5, _r);
}
exports.hasAsyncInstallFinished = hasAsyncInstallFinished;
/**
 * p3 - possibly radius?
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 */
function hasBulletImpactedInArea(x, y, z, p3, p4, p5) {
    return _in(0x9870acfb, 0x89a90995, _fv(x), _fv(y), _fv(z), _fv(p3), p4, p5, _r);
}
exports.hasBulletImpactedInArea = hasBulletImpactedInArea;
function hasBulletImpactedInBox(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0xdc8c5d7c, 0xfeab8394, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, _r);
}
exports.hasBulletImpactedInBox = hasBulletImpactedInBox;
/**
 * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
 *
 * INT_SCORES_SCORTED was a hash collision
 * @param hash
 * @param amount
 */
function hasCheatWithHashBeenActivated(hash, amount) {
    return _in(0x071e2a83, 0x9de82d90, _ch(hash), amount, _r);
}
exports.hasCheatWithHashBeenActivated = hasCheatWithHashBeenActivated;
/**
 * Alias for HAS_ANIM_SET_LOADED.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
function hasClipSetLoaded(clipSet) {
    return _in(0x318234f4, 0xf3738af3, _ts(clipSet), _r);
}
exports.hasClipSetLoaded = hasClipSetLoaded;
function hasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5) {
    return _in(0x761b0e69, 0xac4d007e, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _ch(modelHash), p5, _r);
}
exports.hasClosestObjectOfTypeBeenBroken = hasClosestObjectOfTypeBeenBroken;
function hasClosestObjectOfTypeBeenCompletelyDestroyed(x, y, z, radius, modelHash, p5) {
    return _in(0x46494a24, 0x75701343, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5, _r);
}
exports.hasClosestObjectOfTypeBeenCompletelyDestroyed = hasClosestObjectOfTypeBeenCompletelyDestroyed;
/**
 * Sets the value of the specified variable to 0.
 * Always returns true.
 * @param p0
 * @param unused
 */
function hasCloudRequestsFinished(unused) {
    const [retval, p0_out] = _in(0x46e2b844, 0x905bc5f0, _i, unused, _r);
    return [retval, p0_out];
}
exports.hasCloudRequestsFinished = hasCloudRequestsFinished;
function hasCodeRequestedAutosave() {
    return _in(0x2107a377, 0x3771186d, _r);
}
exports.hasCodeRequestedAutosave = hasCodeRequestedAutosave;
function hasCollisionForModelLoaded(model) {
    return _in(0x22cca434, 0xe368f03a, _ch(model), _r);
}
exports.hasCollisionForModelLoaded = hasCollisionForModelLoaded;
function hasCollisionLoadedAroundEntity(entity) {
    return _in(0xe9676f61, 0xbc0b3321, entity, _r);
}
exports.hasCollisionLoadedAroundEntity = hasCollisionLoadedAroundEntity;
/**
 * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
function hasCutFileLoaded(cutsceneName) {
    return _in(0xa1c996c2, 0xa744262e, _ts(cutsceneName), _r);
}
exports.hasCutFileLoaded = hasCutFileLoaded;
/**
 * Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
 */
function hasCutsceneCutThisFrame() {
    return _in(0x708bdd8c, 0xd795b043, _r);
}
exports.hasCutsceneCutThisFrame = hasCutsceneCutThisFrame;
function hasCutsceneFinished() {
    return _in(0x7c0a8930, 0x88881d57, _r);
}
exports.hasCutsceneFinished = hasCutsceneFinished;
function hasCutsceneLoaded() {
    return _in(0xc59f528e, 0x9ab9f339, _r);
}
exports.hasCutsceneLoaded = hasCutsceneLoaded;
function hasDirectorModeBeenLaunchedByCode() {
    return _in(0xa277800a, 0x9eae340e, _r);
}
exports.hasDirectorModeBeenLaunchedByCode = hasDirectorModeBeenLaunchedByCode;
/**
 * P3 is always 3 as far as i cant tell
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 * @param p3
 */
function hasEntityAnimFinished(entity, animDict, animName, p3) {
    return _in(0x20b71166, 0x2962b472, entity, _ts(animDict), _ts(animName), p3, _r);
}
exports.hasEntityAnimFinished = hasEntityAnimFinished;
function hasEntityBeenDamagedByAnyObject(entity) {
    return _in(0x95eb9964, 0xff5c5c65, entity, _r);
}
exports.hasEntityBeenDamagedByAnyObject = hasEntityBeenDamagedByAnyObject;
function hasEntityBeenDamagedByAnyPed(entity) {
    return _in(0x605f5a14, 0x0f202491, entity, _r);
}
exports.hasEntityBeenDamagedByAnyPed = hasEntityBeenDamagedByAnyPed;
function hasEntityBeenDamagedByAnyVehicle(entity) {
    return _in(0xdfd5033f, 0xdba0a9c8, entity, _r);
}
exports.hasEntityBeenDamagedByAnyVehicle = hasEntityBeenDamagedByAnyVehicle;
/**
 * Entity 1 = Victim
 * Entity 2 = Attacker
 *
 * p2 seems to always be 1
 * @param entity1
 * @param entity2
 * @param p2
 */
function hasEntityBeenDamagedByEntity(entity1, entity2, p2) {
    return _in(0xc86d67d5, 0x2a707cf8, entity1, entity2, p2, _r);
}
exports.hasEntityBeenDamagedByEntity = hasEntityBeenDamagedByEntity;
/**
 * It determines what weapons caused damage:
 *
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param entity
 * @param weaponHash
 * @param weaponType
 */
function hasEntityBeenDamagedByWeapon(entity, weaponHash, weaponType) {
    return _in(0x131d4013, 0x34815e94, entity, _ch(weaponHash), weaponType, _r);
}
exports.hasEntityBeenDamagedByWeapon = hasEntityBeenDamagedByWeapon;
/**
 * traceType is always 17 in the scripts.
 *
 * There is other codes used for traceType:
 * 19 - in jewelry_prep1a
 * 126 - in am_hunt_the_beast
 * 256 & 287 - in fm_mission_controller
 * @param entity1
 * @param entity2
 * @param traceType
 */
function hasEntityClearLosToEntity(entity1, entity2, traceType) {
    return _in(0xfcdff7b7, 0x2d23a1ac, entity1, entity2, traceType, _r);
}
exports.hasEntityClearLosToEntity = hasEntityClearLosToEntity;
function hasEntityClearLosToEntityAdjustForCover(entity1, entity2, traceType) {
    return _in(0x394bde2a, 0x7bba031e, entity1, entity2, traceType, _r);
}
exports.hasEntityClearLosToEntityAdjustForCover = hasEntityClearLosToEntityAdjustForCover;
/**
 * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
 * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
 * @param entity1
 * @param entity2
 */
function hasEntityClearLosToEntityInFront(entity1, entity2) {
    return _in(0x0267d00a, 0xf114f17a, entity1, entity2, _r);
}
exports.hasEntityClearLosToEntityInFront = hasEntityClearLosToEntityInFront;
/**
 * Called on tick.
 * Tested with vehicles, returns true whenever the vehicle is touching any entity.
 *
 * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
 * @param entity
 */
function hasEntityCollidedWithAnything(entity) {
    return _in(0x8bad02f0, 0x368d9e14, entity, _r);
}
exports.hasEntityCollidedWithAnything = hasEntityCollidedWithAnything;
function hasForceCleanupOccurred(cleanupFlags) {
    return _in(0xc968670b, 0xface42d9, cleanupFlags, _r);
}
exports.hasForceCleanupOccurred = hasForceCleanupOccurred;
function hasGameInstalledThisSession() {
    return _in(0x6fddf453, 0xc0c756ec, _r);
}
exports.hasGameInstalledThisSession = hasGameInstalledThisSession;
function hasInstantFillVehiclePopulationFinished() {
    return _in(0x91d6dd29, 0x0888cbab, _r);
}
exports.hasInstantFillVehiclePopulationFinished = hasInstantFillVehiclePopulationFinished;
function hasLoadedMpDataSet() {
    return _in(0x544810ed, 0x9db6bbe6, _r);
}
exports.hasLoadedMpDataSet = hasLoadedMpDataSet;
function hasLoadedSpDataSet() {
    return _in(0x5b50abb1, 0xfe3746f4, _r);
}
exports.hasLoadedSpDataSet = hasLoadedSpDataSet;
function hasMenuLayoutChangedEventOccurred() {
    return _in(0x2e22fefa, 0x0100275e, _r);
}
exports.hasMenuLayoutChangedEventOccurred = hasMenuLayoutChangedEventOccurred;
function hasMenuTriggerEventOccurred() {
    return _in(0xf284ac67, 0x940c6812, _r);
}
exports.hasMenuTriggerEventOccurred = hasMenuTriggerEventOccurred;
/**
 * Checks if the specified model has loaded into memory.
 * @param model
 */
function hasModelLoaded(model) {
    return _in(0x98a4eb5d, 0x89a0c952, _ch(model), _r);
}
exports.hasModelLoaded = hasModelLoaded;
function hasNamedPtfxAssetLoaded(fxName) {
    return _in(0x8702416e, 0x512ec454, _ts(fxName), _r);
}
exports.hasNamedPtfxAssetLoaded = hasNamedPtfxAssetLoaded;
function hasNetworkTimeStarted() {
    return _in(0x46718ace, 0xedeafc84, _r);
}
exports.hasNetworkTimeStarted = hasNetworkTimeStarted;
function hasObjectBeenBroken(object, p1) {
    return _in(0x8abfb70c, 0x49cc43e2, object, p1, _r);
}
exports.hasObjectBeenBroken = hasObjectBeenBroken;
/**
 * Get inputted "Cheat code", for example:
 *
 * while (TRUE)
 * {
 * if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))
 * {
 * // Do something.
 * }
 * SYSTEM::WAIT(0);
 * }
 *
 * Calling this will also set the last saved string hash to zero.
 *
 * @param hash
 */
function hasPcCheatWithHashBeenActivated(hash) {
    return _in(0x557e43c4, 0x47e700a8, _ch(hash), _r);
}
exports.hasPcCheatWithHashBeenActivated = hasPcCheatWithHashBeenActivated;
/**
 * It determines what weapons caused damage:
 *
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param weaponType
 */
function hasPedBeenDamagedByWeapon(ped, weaponHash, weaponType) {
    return _in(0x2d343d22, 0x19cd027a, ped, _ch(weaponHash), weaponType, _r);
}
exports.hasPedBeenDamagedByWeapon = hasPedBeenDamagedByWeapon;
/**
 * p2 should be FALSE, otherwise it seems to always return FALSE
 *
 * Bool does not check if the weapon is current equipped, unfortunately.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param p2
 */
function hasPedGotWeapon(ped, weaponHash, p2) {
    return _in(0x8decb02f, 0x88f428bc, ped, _ch(weaponHash), p2, _r);
}
exports.hasPedGotWeapon = hasPedGotWeapon;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
function hasPedGotWeaponComponent(ped, weaponHash, componentHash) {
    return _in(0xc5932124, 0x75fae340, ped, _ch(weaponHash), _ch(componentHash), _r);
}
exports.hasPedGotWeaponComponent = hasPedGotWeaponComponent;
function hasPedHeadBlendFinished(ped) {
    return _in(0x654cd0a8, 0x25161131, ped, _r);
}
exports.hasPedHeadBlendFinished = hasPedHeadBlendFinished;
function hasPedPreloadPropDataFinished(ped) {
    return _in(0x784002a6, 0x32822099, ped, _r);
}
exports.hasPedPreloadPropDataFinished = hasPedPreloadPropDataFinished;
function hasPedPreloadVariationDataFinished(ped) {
    return _in(0x66680a92, 0x700f43df, ped, _r);
}
exports.hasPedPreloadVariationDataFinished = hasPedPreloadVariationDataFinished;
function hasPedReceivedEvent(ped, eventId) {
    return _in(0x8507bcb7, 0x10fa6dc0, ped, eventId, _r);
}
exports.hasPedReceivedEvent = hasPedReceivedEvent;
function hasPedheadshotImgUploadFailed() {
    return _in(0x876928dd, 0xdfccc9cd, _r);
}
exports.hasPedheadshotImgUploadFailed = hasPedheadshotImgUploadFailed;
function hasPedheadshotImgUploadSucceeded() {
    return _in(0xe8a169e6, 0x66cbc541, _r);
}
exports.hasPedheadshotImgUploadSucceeded = hasPedheadshotImgUploadSucceeded;
function hasPickupBeenCollected(pickup) {
    return _in(0x80ec48e6, 0x679313f9, pickup, _r);
}
exports.hasPickupBeenCollected = hasPickupBeenCollected;
function hasPlayerBeenSpottedInStolenVehicle(player) {
    return _in(0xd705740b, 0xb0a1cf4c, player, _r);
}
exports.hasPlayerBeenSpottedInStolenVehicle = hasPlayerBeenSpottedInStolenVehicle;
function hasPlayerDamagedAtLeastOneNonAnimalPed(player) {
    return _in(0xe4b90f36, 0x7bd81752, player, _r);
}
exports.hasPlayerDamagedAtLeastOneNonAnimalPed = hasPlayerDamagedAtLeastOneNonAnimalPed;
function hasPlayerDamagedAtLeastOnePed(player) {
    return _in(0x20ce80b0, 0xc2bf4acc, player, _r);
}
exports.hasPlayerDamagedAtLeastOnePed = hasPlayerDamagedAtLeastOnePed;
function hasPlayerLeftTheWorld(player) {
    return _in(0xd55ddfb4, 0x7991a294, player, _r);
}
exports.hasPlayerLeftTheWorld = hasPlayerLeftTheWorld;
function hasPreloadModsFinished(vehicle) {
    return _in(0x06f43e51, 0x75eb6d96, vehicle, _r);
}
exports.hasPreloadModsFinished = hasPreloadModsFinished;
function hasPtfxAssetLoaded() {
    return _in(0xca7d9b86, 0xeca7481b, _r);
}
exports.hasPtfxAssetLoaded = hasPtfxAssetLoaded;
/**
 * Hardcoded to return false.
 */
function hasResumedFromSuspend() {
    return _in(0xe8b9c0ec, 0x9e183f35, _r);
}
exports.hasResumedFromSuspend = hasResumedFromSuspend;
function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle) {
    return _in(0x8217150e, 0x1217ebfd, scaleformHandle, _r);
}
exports.hasScaleformContainerMovieLoadedIntoParent = hasScaleformContainerMovieLoadedIntoParent;
/**
 * Only values used in the scripts are:
 *
 * "heist_mp"
 * "heistmap_mp"
 * "instructional_buttons"
 * "heist_pre"
 * @param scaleformName
 */
function hasScaleformMovieFilenameLoaded(scaleformName) {
    return _in(0x0c1c5d75, 0x6fb5f337, _ts(scaleformName), _r);
}
exports.hasScaleformMovieFilenameLoaded = hasScaleformMovieFilenameLoaded;
function hasScaleformMovieLoaded(scaleformHandle) {
    return _in(0x85f01b8d, 0x5b90570e, scaleformHandle, _r);
}
exports.hasScaleformMovieLoaded = hasScaleformMovieLoaded;
function hasScaleformScriptHudMovieLoaded(hudComponent) {
    return _in(0xdf6e5987, 0xd2b4d140, hudComponent, _r);
}
exports.hasScaleformScriptHudMovieLoaded = hasScaleformScriptHudMovieLoaded;
function hasScriptHiddenHelpThisFrame() {
    return _in(0x214cd562, 0xa939246a, _r);
}
exports.hasScriptHiddenHelpThisFrame = hasScriptHiddenHelpThisFrame;
/**
 * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
 * @param scriptName
 */
function hasScriptLoaded(scriptName) {
    return _in(0xe6cc9f3b, 0xa0fb9ef1, _ts(scriptName), _r);
}
exports.hasScriptLoaded = hasScriptLoaded;
function hasScriptWithNameHashLoaded(scriptHash) {
    return _in(0x5f0f0c78, 0x3eb16c04, _ch(scriptHash), _r);
}
exports.hasScriptWithNameHashLoaded = hasScriptWithNameHashLoaded;
function hasSoundFinished(soundId) {
    return _in(0xfcbdce71, 0x4a7c88e5, soundId, _r);
}
exports.hasSoundFinished = hasSoundFinished;
function hasStealthModeAssetLoaded(asset) {
    return _in(0xe977fc5b, 0x08af3441, _ts(asset), _r);
}
exports.hasStealthModeAssetLoaded = hasStealthModeAssetLoaded;
function hasStreamedTextureDictLoaded(textureDict) {
    return _in(0x0145f696, 0xaaaad2e4, _ts(textureDict), _r);
}
exports.hasStreamedTextureDictLoaded = hasStreamedTextureDictLoaded;
/**
 * Checks if the specified gxt has loaded into the passed slot.
 * @param gxt
 * @param slot
 */
function hasThisAdditionalTextLoaded(gxt, slot) {
    return _in(0xadbf060e, 0x2b30c5bc, _ts(gxt), slot, _r);
}
exports.hasThisAdditionalTextLoaded = hasThisAdditionalTextLoaded;
/**
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
function hasThisCutsceneLoaded(cutsceneName) {
    return _in(0x228d3d94, 0xf8a11c3c, _ts(cutsceneName), _r);
}
exports.hasThisCutsceneLoaded = hasThisCutsceneLoaded;
/**
 * This function is hard-coded to always return 1.
 * @param p0
 */
function hasVcWithdrawalCompleted(p0) {
    return _in(0xe154b48b, 0x68ef72bc, p0, _r);
}
exports.hasVcWithdrawalCompleted = hasVcWithdrawalCompleted;
function hasVehicleAssetLoaded(vehicleAsset) {
    return _in(0x1bbe0523, 0xb8db9a21, vehicleAsset, _r);
}
exports.hasVehicleAssetLoaded = hasVehicleAssetLoaded;
/**
 * Fourth Parameter = unsure, almost always -1
 * @param driver
 * @param vehicle
 * @param weaponHash
 * @param p3
 */
function hasVehicleGotProjectileAttached(driver, vehicle, weaponHash, p3) {
    return _in(0x717c8481, 0x234e3b88, driver, vehicle, _ch(weaponHash), p3, _r);
}
exports.hasVehicleGotProjectileAttached = hasVehicleGotProjectileAttached;
function hasVehiclePetroltankSetOnFireByEntity(p0, p1) {
    return _in(0x5ba68a08, 0x40d546ac, p0, p1, _r);
}
exports.hasVehiclePetroltankSetOnFireByEntity = hasVehiclePetroltankSetOnFireByEntity;
function hasVehiclePhoneExplosiveDevice() {
    return _in(0x6adaabd3, 0x068c5235, _r);
}
exports.hasVehiclePhoneExplosiveDevice = hasVehiclePhoneExplosiveDevice;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
function hasVehicleRecordingBeenLoaded(recording, script) {
    return _in(0x300d614a, 0x4c785fc4, recording, _ts(script), _r);
}
exports.hasVehicleRecordingBeenLoaded = hasVehicleRecordingBeenLoaded;
function hasWeaponAssetLoaded(weaponHash) {
    return _in(0x36e35327, 0x1f0e90ee, _ch(weaponHash), _r);
}
exports.hasWeaponAssetLoaded = hasWeaponAssetLoaded;
/**
 * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
 * @param weapon
 * @param componentHash
 */
function hasWeaponGotWeaponComponent(weapon, componentHash) {
    return _in(0x76a18844, 0xe743bf91, weapon, _ch(componentHash), _r);
}
exports.hasWeaponGotWeaponComponent = hasWeaponGotWeaponComponent;
function haveAllStreamingRequestsCompleted(ped) {
    return _in(0x73508234, 0x73013c02, ped, _r);
}
exports.haveAllStreamingRequestsCompleted = haveAllStreamingRequestsCompleted;
/**
 * control: unused parameter
 * @param control
 */
function haveControlsChanged(control) {
    return _in(0x6cd79468, 0xa1e595c6, control, _r);
}
exports.haveControlsChanged = haveControlsChanged;
function haveCreditsReachedEnd() {
    return _in(0x075f1d57, 0x402c93ba, _r);
}
exports.haveCreditsReachedEnd = haveCreditsReachedEnd;
function haveReplayStatsBeenStored() {
    return _in(0xd642319c, 0x54aadeb6, _r);
}
exports.haveReplayStatsBeenStored = haveReplayStatsBeenStored;
function haveVehicleModsStreamedIn(vehicle) {
    return _in(0x9a83f5f9, 0x963775ef, vehicle, _r);
}
exports.haveVehicleModsStreamedIn = haveVehicleModsStreamedIn;
function haveVehicleRearDoorsBeenBlownOpenByStickybomb(vehicle) {
    return _in(0x6b407f25, 0x25e93644, vehicle, _r);
}
exports.haveVehicleRearDoorsBeenBlownOpenByStickybomb = haveVehicleRearDoorsBeenBlownOpenByStickybomb;
function hideHelpTextThisFrame() {
    return _in(0xd46923fc, 0x481ca285);
}
exports.hideHelpTextThisFrame = hideHelpTextThisFrame;
/**
 * Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
 */
function hideHudAndRadarThisFrame() {
    return _in(0x719ff505, 0xf097fd20);
}
exports.hideHudAndRadarThisFrame = hideHudAndRadarThisFrame;
/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * - 1 : WANTED_STARS
 * - 2 : WEAPON_ICON
 * - 3 : CASH
 * - 4 : MP_CASH
 * - 5 : MP_MESSAGE
 * - 6 : VEHICLE_NAME
 * - 7 : AREA_NAME
 * - 8 : VEHICLE_CLASS
 * - 9 : STREET_NAME
 * - 10 : HELP_TEXT
 * - 11 : FLOATING_HELP_TEXT_1
 * - 12 : FLOATING_HELP_TEXT_2
 * - 13 : CASH_CHANGE
 * - 14 : RETICLE
 * - 15 : SUBTITLE_TEXT
 * - 16 : RADIO_STATIONS
 * - 17 : SAVING_GAME
 * - 18 : GAME_STREAM
 * - 19 : WEAPON_WHEEL
 * - 20 : WEAPON_WHEEL_STATS
 * - 21 : HUD_COMPONENTS
 * - 22 : HUD_WEAPONS
 *
 * These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
 * @param id
 */
function hideHudComponentThisFrame(id) {
    return _in(0x6806c51a, 0xd12b83b8, id);
}
exports.hideHudComponentThisFrame = hideHudComponentThisFrame;
function hideHudmarkersThisFrame() {
    return _in(0x243296a5, 0x10b562b6);
}
exports.hideHudmarkersThisFrame = hideHudmarkersThisFrame;
function hideLoadingOnFadeThisFrame() {
    return _in(0x4b0311d3, 0xcdc4648f);
}
exports.hideLoadingOnFadeThisFrame = hideLoadingOnFadeThisFrame;
function hideMinimapExteriorMapThisFrame() {
    return _in(0x5fbae526, 0x203990c9);
}
exports.hideMinimapExteriorMapThisFrame = hideMinimapExteriorMapThisFrame;
function hideMinimapInteriorMapThisFrame() {
    return _in(0x20fe7fdf, 0xeead38c0);
}
exports.hideMinimapInteriorMapThisFrame = hideMinimapInteriorMapThisFrame;
function hideNumberOnBlip(blip) {
    return _in(0x532cff63, 0x7ef80148, blip);
}
exports.hideNumberOnBlip = hideNumberOnBlip;
function hidePedBloodDamageByZone(ped, p1, p2) {
    return _in(0x62ab7931, 0x44de75dc, ped, p1, p2);
}
exports.hidePedBloodDamageByZone = hidePedBloodDamageByZone;
/**
 * Hides the players weapon during a cutscene.
 * @param ped
 * @param toggle
 */
function hidePedWeaponForScriptedCutscene(ped, toggle) {
    return _in(0x6f6981d2, 0x253c208f, ped, toggle);
}
exports.hidePedWeaponForScriptedCutscene = hidePedWeaponForScriptedCutscene;
function hidePortablePickupWhenDetached(pickupObject, toggle) {
    return _in(0x86745825, 0x1d47ccb2, pickupObject, toggle);
}
exports.hidePortablePickupWhenDetached = hidePortablePickupWhenDetached;
function hideScriptedHudComponentThisFrame(id) {
    return _in(0xe374c498, 0xd8badc14, id);
}
exports.hideScriptedHudComponentThisFrame = hideScriptedHudComponentThisFrame;
/**
 * Hides area and vehicle name HUD components for one frame.
 */
function hideStreetAndCarNamesThisFrame() {
    return _in(0xa4dede28, 0xb1814289);
}
exports.hideStreetAndCarNamesThisFrame = hideStreetAndCarNamesThisFrame;
/**
 * Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
 * @param vehicle
 * @param toggle
 */
function hideTombstone(vehicle, toggle) {
    return _in(0xae71fb65, 0x6c600587, vehicle, toggle);
}
exports.hideTombstone = hideTombstone;
/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
function hintAmbientAudioBank(audioBank, p1, p2) {
    return _in(0x8f8c0e37, 0x0ae62f5c, _ts(audioBank), p1, p2, _r);
}
exports.hintAmbientAudioBank = hintAmbientAudioBank;
/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
function hintMissionAudioBank(audioBank, p1, p2) {
    return _in(0x40763ea7, 0xb9b783e7, _ts(audioBank), p1, p2, _r);
}
exports.hintMissionAudioBank = hintMissionAudioBank;
/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
function hintScriptAudioBank(audioBank, p1, p2) {
    return _in(0xfb380a29, 0x641ec31a, _ts(audioBank), p1, p2, _r);
}
exports.hintScriptAudioBank = hintScriptAudioBank;
function hiredLimo(p0, p1) {
    return _in(0x792271ab, 0x35c356a4, p0, p1);
}
exports.hiredLimo = hiredLimo;
/**
 * Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
 */
function hudForceSpecialVehicleWeaponWheel() {
    return _in(0x48804384, 0x1bbe156f);
}
exports.hudForceSpecialVehicleWeaponWheel = hudForceSpecialVehicleWeaponWheel;
/**
 * Forces the weapon wheel to show/hide.
 * @param show
 */
function hudForceWeaponWheel(show) {
    return _in(0xeb354e53, 0x76bc81a7, show);
}
exports.hudForceWeaponWheel = hudForceWeaponWheel;
/**
 * Returns the weapon hash to the selected/highlighted weapon in the wheel
 */
function hudGetWeaponWheelCurrentlyHighlighted() {
    return _in(0xa4893118, 0x5f0536fe, _r, _ri);
}
exports.hudGetWeaponWheelCurrentlyHighlighted = hudGetWeaponWheelCurrentlyHighlighted;
/**
 * Returns the weapon hash active in a specific weapon wheel slotList
 * @param weaponTypeIndex
 */
function hudGetWeaponWheelTopSlot(weaponTypeIndex) {
    return _in(0xa13e9340, 0x3f26c812, weaponTypeIndex, _r, _ri);
}
exports.hudGetWeaponWheelTopSlot = hudGetWeaponWheelTopSlot;
/**
 * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
 * @param weaponHash
 */
function hudSetWeaponWheelTopSlot(weaponHash) {
    return _in(0x72c1056d, 0x678bb7d8, _ch(weaponHash));
}
exports.hudSetWeaponWheelTopSlot = hudSetWeaponWheelTopSlot;
/**
 * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
 * @param toggle
 */
function hudShowingCharacterSwitchSelection(toggle) {
    return _in(0x14c9fdcc, 0x41f81f63, toggle);
}
exports.hudShowingCharacterSwitchSelection = hudShowingCharacterSwitchSelection;
/**
 * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
 */
function hudSuppressWeaponWheelResultsThisFrame() {
    return _in(0x0afc4af5, 0x10774b47);
}
exports.hudSuppressWeaponWheelResultsThisFrame = hudSuppressWeaponWheelResultsThisFrame;
function ignoreMenuPreferenceForBonnetCameraThisUpdate() {
    return _in(0x7b8a361c, 0x1813fbef);
}
exports.ignoreMenuPreferenceForBonnetCameraThisUpdate = ignoreMenuPreferenceForBonnetCameraThisUpdate;
function ignoreNextRestart(toggle) {
    return _in(0x21ffb63d, 0x8c615361, toggle);
}
exports.ignoreNextRestart = ignoreNextRestart;
function increasePlayerJumpSuppressionRange(player) {
    return _in(0x9edd76e8, 0x7d5d51ba, player);
}
exports.increasePlayerJumpSuppressionRange = increasePlayerJumpSuppressionRange;
function informCodeOfContentIdOfCurrentUgcMission(p0) {
    return _in(0x8d74e26f, 0x54b4e5c3, _ts(p0));
}
exports.informCodeOfContentIdOfCurrentUgcMission = informCodeOfContentIdOfCurrentUgcMission;
function initCreatorBudget() {
    return _in(0xb5a4db34, 0xfe89b88a);
}
exports.initCreatorBudget = initCreatorBudget;
/**
 * Used in carsteal3 script with schemeName = "Carsteal4_spycar".
 * @param schemeName
 */
function initPcScriptedControls(schemeName) {
    return _in(0x3d42b925, 0x63939375, _ts(schemeName), _r);
}
exports.initPcScriptedControls = initPcScriptedControls;
function initShopPedComponent(outComponent) {
    return _in(0x1e8c308f, 0xd312c036, _ii(outComponent));
}
exports.initShopPedComponent = initShopPedComponent;
function initShopPedProp(outProp) {
    return _in(0xeb0a2b75, 0x8f7b850f, _ii(outProp));
}
exports.initShopPedProp = initShopPedProp;
function initSynchSceneAudioWithEntity(audioEvent, entity) {
    return _in(0x950a154b, 0x8dab6185, _ts(audioEvent), entity);
}
exports.initSynchSceneAudioWithEntity = initSynchSceneAudioWithEntity;
function initSynchSceneAudioWithPosition(audioEvent, x, y, z) {
    return _in(0xc8ede9bd, 0xbccba6d4, _ts(audioEvent), _fv(x), _fv(y), _fv(z));
}
exports.initSynchSceneAudioWithPosition = initSynchSceneAudioWithPosition;
function instantlyFillPedPopulation() {
    return _in(0x4759cc73, 0x0f947c81);
}
exports.instantlyFillPedPopulation = instantlyFillPedPopulation;
function instantlyFillVehiclePopulation() {
    return _in(0x48adc8a7, 0x73564670);
}
exports.instantlyFillVehiclePopulation = instantlyFillVehiclePopulation;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * --------------------------------------------------------
 * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
 *
 * @param value
 */
function intToParticipantindex(value) {
    return _in(0x9ec66038, 0x12c24710, value, _r, _ri);
}
exports.intToParticipantindex = intToParticipantindex;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param value
 */
function intToPlayerindex(value) {
    return _in(0x41bd2a6b, 0x006af756, value, _r, _ri);
}
exports.intToPlayerindex = intToPlayerindex;
/**
 * Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
 * Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
 * @param ped
 * @param voiceline
 * @param speaker
 */
function interruptConversation(ped, voiceline, speaker) {
    return _in(0xa018a12e, 0x5c5c2fa6, ped, _ts(voiceline), _ts(speaker));
}
exports.interruptConversation = interruptConversation;
/**
 * One call found in the b617d scripts:
 *
 * AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0 -- [[1]] ]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
 * @param ped
 * @param p1
 * @param speaker
 */
function interruptConversationAndPause(ped, p1, speaker) {
    return _in(0x8a694d7a, 0x68f8dc38, ped, _ts(p1), _ts(speaker));
}
exports.interruptConversationAndPause = interruptConversationAndPause;
/**
 * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
 */
function invalidateCinematicVehicleIdleMode() {
    return _in(0x9e4cfff9, 0x89258472);
}
exports.invalidateCinematicVehicleIdleMode = invalidateCinematicVehicleIdleMode;
/**
 * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
 */
function invalidateIdleCam() {
    return _in(0xf4f2c0d4, 0xee209e20);
}
exports.invalidateIdleCam = invalidateIdleCam;
function iplGroupSwapCancel() {
    return _in(0x63eb2b97, 0x2a218cac);
}
exports.iplGroupSwapCancel = iplGroupSwapCancel;
function iplGroupSwapFinish() {
    return _in(0xf4a0dadb, 0x70f57fa6);
}
exports.iplGroupSwapFinish = iplGroupSwapFinish;
function iplGroupSwapIsActive() {
    return _in(0x5068f488, 0xddb54dd8, _r);
}
exports.iplGroupSwapIsActive = iplGroupSwapIsActive;
function iplGroupSwapIsReady() {
    return _in(0xfb199266, 0x061f820a, _r);
}
exports.iplGroupSwapIsReady = iplGroupSwapIsReady;
function iplGroupSwapStart(iplName1, iplName2) {
    return _in(0x95a7dabd, 0xdbb78ae7, _ts(iplName1), _ts(iplName2));
}
exports.iplGroupSwapStart = iplGroupSwapStart;
/**
 * val is 1-20 (0 will return false)
 * @param val
 */
function isActiveScaleformMovieDeleting(val) {
    return _in(0x2fcb133c, 0xa50a49eb, val, _r);
}
exports.isActiveScaleformMovieDeleting = isActiveScaleformMovieDeleting;
function isAimCamActive() {
    return _in(0x68edda28, 0xa5976d07, _r);
}
exports.isAimCamActive = isAimCamActive;
function isAimCamActiveInAccurateMode() {
    return _in(0x74bd83ea, 0x840f6bc9, _r);
}
exports.isAimCamActiveInAccurateMode = isAimCamActiveInAccurateMode;
function isAirDefenceSphereInArea(x, y, z, radius, outZoneId) {
    const [retval, outZoneId_out] = _in(0xdab96383, 0x1dbfd3f4, _fv(x), _fv(y), _fv(z), _fv(radius), _ii(outZoneId), _r);
    return [retval, outZoneId_out];
}
exports.isAirDefenceSphereInArea = isAirDefenceSphereInArea;
/**
 * Example:
 *
 * bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 */
function isAlarmPlaying(alarmName) {
    return _in(0x226435cb, 0x96ccfc8c, _ts(alarmName), _r);
}
exports.isAlarmPlaying = isAlarmPlaying;
function isAllowedIndependentCameraModes() {
    return _in(0xeaf0fa79, 0x3d05c592, _r);
}
exports.isAllowedIndependentCameraModes = isAllowedIndependentCameraModes;
/**
 * Common in the scripts:
 * AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
 * @param ped
 */
function isAmbientSpeechDisabled(ped) {
    return _in(0x932c2d09, 0x6a2c3fff, ped, _r);
}
exports.isAmbientSpeechDisabled = isAmbientSpeechDisabled;
function isAmbientSpeechPlaying(ped) {
    return _in(0x9072c8b4, 0x9907bfad, ped, _r);
}
exports.isAmbientSpeechPlaying = isAmbientSpeechPlaying;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 */
function isAmbientZoneEnabled(ambientZone) {
    return _in(0x01e2817a, 0x479a7f9b, _ts(ambientZone), _r);
}
exports.isAmbientZoneEnabled = isAmbientZoneEnabled;
function isAnEntity(handle) {
    return _in(0x731ec8a9, 0x16bd11a1, handle, _r);
}
exports.isAnEntity = isAnEntity;
function isAnimalVocalizationPlaying(pedHandle) {
    return _in(0xc265df9f, 0xb44a9fbd, pedHandle, _r);
}
exports.isAnimalVocalizationPlaying = isAnimalVocalizationPlaying;
function isAnyEntityAttachedToHandlerFrame(vehicle) {
    return _in(0x62ca17b7, 0x4c435651, vehicle, _r);
}
exports.isAnyEntityAttachedToHandlerFrame = isAnyEntityAttachedToHandlerFrame;
function isAnyEntityEntirelyInsideGarage(garageHash, p1, p2, p3, p4) {
    return _in(0x673ed815, 0xd6e323b7, _ch(garageHash), p1, p2, p3, p4, _r);
}
exports.isAnyEntityEntirelyInsideGarage = isAnyEntityEntirelyInsideGarage;
function isAnyHostilePedNearPoint(ped, x, y, z, radius) {
    return _in(0x68772db2, 0xb2526f9f, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.isAnyHostilePedNearPoint = isAnyHostilePedNearPoint;
function isAnyObjectNearPoint(x, y, z, range, p4) {
    return _in(0x397dc58f, 0xf00298d1, _fv(x), _fv(y), _fv(z), _fv(range), p4, _r);
}
exports.isAnyObjectNearPoint = isAnyObjectNearPoint;
function isAnyPedNearPoint(x, y, z, radius) {
    return _in(0x08396149, 0x8679dc9f, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.isAnyPedNearPoint = isAnyPedNearPoint;
function isAnyPedRappellingFromHeli(vehicle) {
    return _in(0x291e373d, 0x483e7ee7, vehicle, _r);
}
exports.isAnyPedRappellingFromHeli = isAnyPedRappellingFromHeli;
function isAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, p6, p7) {
    return _in(0xa0d3d71e, 0xa1086c55, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, _r);
}
exports.isAnyPedShootingInArea = isAnyPedShootingInArea;
function isAnyPositionalSpeechPlaying() {
    return _in(0x30ca2ef9, 0x1d15adf8, _r);
}
exports.isAnyPositionalSpeechPlaying = isAnyPositionalSpeechPlaying;
function isAnySpeechPlaying(ped) {
    return _in(0x72907235, 0x5fa39ec9, ped, _r);
}
exports.isAnySpeechPlaying = isAnySpeechPlaying;
function isAnyVehicleNearPoint(x, y, z, radius) {
    return _in(0x61e1dd61, 0x25a3eee6, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.isAnyVehicleNearPoint = isAnyVehicleNearPoint;
function isAreaOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    return _in(0xa61b4df5, 0x33dcb56e, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, p8, p9, p10, p11, p12, _r);
}
exports.isAreaOccupied = isAreaOccupied;
function isAreaOccupiedSlow(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    return _in(0x39455bf4, 0xf4f55186, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, _r);
}
exports.isAreaOccupiedSlow = isAreaOccupiedSlow;
/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
function isAudioSceneActive(scene) {
    return _in(0xb65b6055, 0x6e2a9225, _ts(scene), _r);
}
exports.isAudioSceneActive = isAudioSceneActive;
/**
 * Used to block some of the prostitute stuff due to laws in Australia.
 */
function isAussieVersion() {
    return _in(0x9f1935ca, 0x1f724008, _r);
}
exports.isAussieVersion = isAussieVersion;
function isAutoSaveInProgress() {
    return _in(0x69240733, 0x738c19a0, _r);
}
exports.isAutoSaveInProgress = isAutoSaveInProgress;
/**
 * Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
 * @param vehicle
 */
function isBigVehicle(vehicle) {
    return _in(0x9f243d39, 0x19f442fe, vehicle, _r);
}
exports.isBigVehicle = isBigVehicle;
function isBlipFlashing(blip) {
    return _in(0xa5e41fd8, 0x3ad6cef0, blip, _r);
}
exports.isBlipFlashing = isBlipFlashing;
function isBlipOnMinimap(blip) {
    return _in(0xe41ca530, 0x51197a27, blip, _r);
}
exports.isBlipOnMinimap = isBlipOnMinimap;
function isBlipShortRange(blip) {
    return _in(0xda5f8727, 0xeb75b926, blip, _r);
}
exports.isBlipShortRange = isBlipShortRange;
function isBoatAnchored(vehicle) {
    return _in(0xb0ad1238, 0xa709b1a2, vehicle, _r);
}
exports.isBoatAnchored = isBoatAnchored;
function isBonnetCinematicCamRendering() {
    return _in(0xd7360051, 0xc885628b, _r);
}
exports.isBonnetCinematicCamRendering = isBonnetCinematicCamRendering;
/**
 * For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param ownedByPlayer
 */
function isBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer) {
    return _in(0x1a8b5f3c, 0x01e2b477, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), ownedByPlayer, _r);
}
exports.isBulletInAngledArea = isBulletInAngledArea;
function isBulletInArea(x, y, z, radius, ownedByPlayer) {
    return _in(0x3f202399, 0x9ad51c1f, _fv(x), _fv(y), _fv(z), _fv(radius), ownedByPlayer, _r);
}
exports.isBulletInArea = isBulletInArea;
function isBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
    return _in(0xde0f6d74, 0x50d37351, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r);
}
exports.isBulletInBox = isBulletInBox;
/**
 * Returns whether or not the passed camera handle is active.
 * @param cam
 */
function isCamActive(cam) {
    return _in(0xdfb2b516, 0x207d3534, cam, _r);
}
exports.isCamActive = isCamActive;
function isCamInterpolating(cam) {
    return _in(0x036f97c9, 0x08c2b52c, cam, _r);
}
exports.isCamInterpolating = isCamInterpolating;
function isCamPlayingAnim(cam, animName, animDictionary) {
    return _in(0xc90621d8, 0xa0ceecf2, cam, _ts(animName), _ts(animDictionary), _r);
}
exports.isCamPlayingAnim = isCamPlayingAnim;
function isCamRendering(cam) {
    return _in(0x02ec0af5, 0xc5a49b7a, cam, _r);
}
exports.isCamRendering = isCamRendering;
function isCamShaking(cam) {
    return _in(0x6b24bfe8, 0x3a2be47b, cam, _r);
}
exports.isCamShaking = isCamShaking;
function isCamSplinePaused(cam) {
    return _in(0x0290f35c, 0x0ad97864, cam, _r);
}
exports.isCamSplinePaused = isCamSplinePaused;
/**
 * Tests some cinematic camera flags
 */
function isCinematicCamInputActive() {
    return _in(0xf5f1e89a, 0x970b7796, _r);
}
exports.isCinematicCamInputActive = isCinematicCamInputActive;
function isCinematicCamRendering() {
    return _in(0xb15162cb, 0x5826e9e8, _r);
}
exports.isCinematicCamRendering = isCinematicCamRendering;
function isCinematicCamShaking() {
    return _in(0xbbc08f6b, 0x4cb8ff0a, _r);
}
exports.isCinematicCamShaking = isCinematicCamShaking;
function isCinematicFirstPersonVehicleInteriorCamRendering() {
    return _in(0x4f32c0d5, 0xa90a9b40, _r);
}
exports.isCinematicFirstPersonVehicleInteriorCamRendering = isCinematicFirstPersonVehicleInteriorCamRendering;
function isCinematicIdleCamRendering() {
    return _in(0xca9d2aa3, 0xe326d720, _r);
}
exports.isCinematicIdleCamRendering = isCinematicIdleCamRendering;
/**
 * Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
 * @param p0
 */
function isCinematicShotActive(p0) {
    return _in(0xcc9f3371, 0xa7c28bc9, _ch(p0), _r);
}
exports.isCinematicShotActive = isCinematicShotActive;
function isCodeGameplayHintActive() {
    return _in(0xbf72910d, 0x0f26f025, _r);
}
exports.isCodeGameplayHintActive = isCodeGameplayHintActive;
/**
 * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
 * @param x
 * @param y
 * @param z
 */
function isCollisionMarkedOutside(x, y, z) {
    return _in(0xeea5ac2e, 0xda7c33e8, _fv(x), _fv(y), _fv(z), _r);
}
exports.isCollisionMarkedOutside = isCollisionMarkedOutside;
/**
 * Returns true if command line option '-benchmark' is set.
 */
function isCommandlineEndUserBenchmark() {
    return _in(0xa049a5be, 0x0f04f2f8, _r);
}
exports.isCommandlineEndUserBenchmark = isCommandlineEndUserBenchmark;
function isCommerceDataFetchInProgress() {
    return _in(0x1d4dc17c, 0x38feaff0, _r);
}
exports.isCommerceDataFetchInProgress = isCommerceDataFetchInProgress;
function isCommerceDataValid() {
    return _in(0xea14eef5, 0xb7cd2c30, _r);
}
exports.isCommerceDataValid = isCommerceDataValid;
function isCommerceStoreOpen() {
    return _in(0x2eac52b4, 0x019e2782, _r);
}
exports.isCommerceStoreOpen = isCommerceStoreOpen;
function isContentItemLocked(itemHash) {
    return _in(0xd4d7b033, 0xc3aa243c, _ch(itemHash), _r);
}
exports.isContentItemLocked = isContentItemLocked;
/**
 * control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
 * For more info, see https://docs.fivem.net/docs/game-references/controls/
 * @param control
 * @param action
 */
function isControlEnabled(control, action) {
    return _in(0x1cea6bfd, 0xf248e5d9, control, action, _r);
}
exports.isControlEnabled = isControlEnabled;
/**
 * Returns whether a control was newly pressed since the last check.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isControlJustPressed(control, action) {
    return _in(0x58041710, 0x1ddb492f, control, action, _r);
}
exports.isControlJustPressed = isControlJustPressed;
/**
 * Returns whether a control was newly released since the last check.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isControlJustReleased(control, action) {
    return _in(0x50f94025, 0x9d3841e6, control, action, _r);
}
exports.isControlJustReleased = isControlJustReleased;
/**
 * Returns whether a control is currently pressed.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isControlPressed(control, action) {
    return _in(0xf3a21bcd, 0x95725a4a, control, action, _r);
}
exports.isControlPressed = isControlPressed;
/**
 * Returns whether a control is currently _not_ pressed.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isControlReleased(control, action) {
    return _in(0x648ee3e7, 0xf38877dd, control, action, _r);
}
exports.isControlReleased = isControlReleased;
function isControlledVehicleUnableToGetToRoad(ped) {
    return _in(0x3e38e28a, 0x1d80ddf6, ped, _r);
}
exports.isControlledVehicleUnableToGetToRoad = isControlledVehicleUnableToGetToRoad;
function isConversationPedDead(ped) {
    return _in(0xe0a0aec2, 0x14b1faba, ped, _r);
}
exports.isConversationPedDead = isConversationPedDead;
/**
 * xyz - relative to the world origin.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function isCopPedInArea3d(x1, y1, z1, x2, y2, z2) {
    return _in(0x16ec4839, 0x969f9f5e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
}
exports.isCopPedInArea3d = isCopPedInArea3d;
/**
 * Usage:
 *
 * public bool isCopInRange(Vector3 Location, float Range)
 * {
 * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
 * }
 * @param x1
 * @param x2
 * @param y1
 * @param y2
 * @param z1
 * @param z2
 */
function isCopVehicleInArea3d(x1, x2, y1, y2, z1, z2) {
    return _in(0x7eef65d5, 0xf153e26a, _fv(x1), _fv(x2), _fv(y1), _fv(y2), _fv(z1), _fv(z2), _r);
}
exports.isCopVehicleInArea3d = isCopVehicleInArea3d;
function isCurrentHeadPropAHelmet(p0) {
    return _in(0xf2385935, 0xbffd4d92, p0, _r);
}
exports.isCurrentHeadPropAHelmet = isCurrentHeadPropAHelmet;
function isCutsceneActive() {
    return _in(0x991251af, 0xc3981f84, _r);
}
exports.isCutsceneActive = isCutsceneActive;
/**
 * This function is hard-coded to always return 1.
 * @param cutsceneName
 */
function isCutsceneAuthorized(cutsceneName) {
    return _in(0x4cebc1ed, 0x31e8925e, _ts(cutsceneName), _r);
}
exports.isCutsceneAuthorized = isCutsceneAuthorized;
function isCutscenePlaybackFlagSet(flag) {
    return _in(0x71b74d2a, 0xe19338d0, flag, _r);
}
exports.isCutscenePlaybackFlagSet = isCutscenePlaybackFlagSet;
function isCutscenePlaying() {
    return _in(0xd3c2e180, 0xa40f031e, _r);
}
exports.isCutscenePlaying = isCutscenePlaying;
function isDamageTrackerActiveOnNetworkId(netID) {
    return _in(0x6e192e33, 0xad436366, netID, _r);
}
exports.isDamageTrackerActiveOnNetworkId = isDamageTrackerActiveOnNetworkId;
function isDamageTrackerActiveOnPlayer(player) {
    return _in(0xb2092a1e, 0xaa7fd45f, player, _r);
}
exports.isDamageTrackerActiveOnPlayer = isDamageTrackerActiveOnPlayer;
function isDecalAlive(decal) {
    return _in(0xc694d749, 0x49cafd0c, decal, _r);
}
exports.isDecalAlive = isDecalAlive;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isDisabledControlJustPressed(control, action) {
    return _in(0x91aef906, 0xbca88877, control, action, _r);
}
exports.isDisabledControlJustPressed = isDisabledControlJustPressed;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isDisabledControlJustReleased(control, action) {
    return _in(0x305c8dcd, 0x79da8b0f, control, action, _r);
}
exports.isDisabledControlJustReleased = isDisabledControlJustReleased;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isDisabledControlPressed(control, action) {
    return _in(0xe2587f8c, 0xbbd87b1d, control, action, _r);
}
exports.isDisabledControlPressed = isDisabledControlPressed;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function isDisabledControlReleased(control, action) {
    return _in(0xfb6c4072, 0xe9a32e92, control, action, _r);
}
exports.isDisabledControlReleased = isDisabledControlReleased;
/**
 * Returns true if the given DLC pack is present.
 * @param dlcHash
 */
function isDlcPresent(dlcHash) {
    return _in(0x812595a0, 0x644ce1de, _ch(dlcHash), _r);
}
exports.isDlcPresent = isDlcPresent;
function isDlcVehicleMod(hash) {
    return _in(0x0564b9ff, 0x9631b82c, _ch(hash), _r);
}
exports.isDlcVehicleMod = isDlcVehicleMod;
function isDoorClosed(doorHash) {
    return _in(0xc531ee8a, 0x1145a149, _ch(doorHash), _r);
}
exports.isDoorClosed = isDoorClosed;
/**
 * if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))
 * {
 * OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
 * }
 * @param doorHash
 */
function isDoorRegisteredWithSystem(doorHash) {
    return _in(0xc153c43e, 0xa202c8c1, _ch(doorHash), _r);
}
exports.isDoorRegisteredWithSystem = isDoorRegisteredWithSystem;
function isDrivebyTaskUnderneathDrivingTask(ped) {
    return _in(0x8785e6e4, 0x0c7a8818, ped, _r);
}
exports.isDrivebyTaskUnderneathDrivingTask = isDrivebyTaskUnderneathDrivingTask;
/**
 * XBOX ONE
 */
function isDurangoVersion() {
    return _in(0x4d982adb, 0x1978442d, _r);
}
exports.isDurangoVersion = isDurangoVersion;
function isEntityAGhost(entity) {
    return _in(0x21d04d7b, 0xc538c146, entity, _r);
}
exports.isEntityAGhost = isEntityAGhost;
function isEntityAMissionEntity(entity) {
    return _in(0x0a7b2709, 0x12999b3c, entity, _r);
}
exports.isEntityAMissionEntity = isEntityAMissionEntity;
function isEntityAPed(entity) {
    return _in(0x524ac5ec, 0xea15343e, entity, _r);
}
exports.isEntityAPed = isEntityAPed;
function isEntityAVehicle(entity) {
    return _in(0x6ac7003f, 0xa6e5575e, entity, _r);
}
exports.isEntityAVehicle = isEntityAVehicle;
function isEntityAnObject(entity) {
    return _in(0x8d68c8fd, 0x0faca94e, entity, _r);
}
exports.isEntityAnObject = isEntityAnObject;
/**
 * Checks if entity is within x/y/zSize distance of x/y/z.
 *
 * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p7
 * @param p8
 * @param p9
 */
function isEntityAtCoord(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
    return _in(0x20b60995, 0x556d004f, entity, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xSize), _fv(ySize), _fv(zSize), p7, p8, p9, _r);
}
exports.isEntityAtCoord = isEntityAtCoord;
/**
 * Checks if entity1 is within the box defined by x/y/zSize of entity2.
 *
 * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
 * @param entity1
 * @param entity2
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p5
 * @param p6
 * @param p7
 */
function isEntityAtEntity(entity1, entity2, xSize, ySize, zSize, p5, p6, p7) {
    return _in(0x751b70c3, 0xd034e187, entity1, entity2, _fv(xSize), _fv(ySize), _fv(zSize), p5, p6, p7, _r);
}
exports.isEntityAtEntity = isEntityAtEntity;
/**
 * Whether the entity is attached to any other entity.
 * @param entity
 */
function isEntityAttached(entity) {
    return _in(0xb346476e, 0xf1a64897, entity, _r);
}
exports.isEntityAttached = isEntityAttached;
function isEntityAttachedToAnyObject(entity) {
    return _in(0xcf511840, 0xceede0cc, entity, _r);
}
exports.isEntityAttachedToAnyObject = isEntityAttachedToAnyObject;
function isEntityAttachedToAnyPed(entity) {
    return _in(0xb1632e9a, 0x5f988d11, entity, _r);
}
exports.isEntityAttachedToAnyPed = isEntityAttachedToAnyPed;
function isEntityAttachedToAnyVehicle(entity) {
    return _in(0x26aa915a, 0xd89bfb4b, entity, _r);
}
exports.isEntityAttachedToAnyVehicle = isEntityAttachedToAnyVehicle;
function isEntityAttachedToEntity(from, to) {
    return _in(0xefbe7189, 0x8a993728, from, to, _r);
}
exports.isEntityAttachedToEntity = isEntityAttachedToEntity;
function isEntityAttachedToHandlerFrame(vehicle, entity) {
    return _in(0x57715966, 0x069157ad, vehicle, entity, _r);
}
exports.isEntityAttachedToHandlerFrame = isEntityAttachedToHandlerFrame;
function isEntityDead(entity, p1) {
    return _in(0x5f9532f3, 0xb5cc2551, entity, p1, _r);
}
exports.isEntityDead = isEntityDead;
function isEntityFocus(entity) {
    return _in(0x2ddff3fb, 0x9075d747, entity, _r);
}
exports.isEntityFocus = isEntityFocus;
function isEntityInAir(entity) {
    return _in(0x886e37ec, 0x497200b6, entity, _r);
}
exports.isEntityInAir = isEntityInAir;
/**
 * `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
 * `p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param entity
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includeZ
 * @param p10
 */
function isEntityInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10) {
    return _in(0x51210ced, 0x3da1c78a, entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), debug, includeZ, p10, _r);
}
exports.isEntityInAngledArea = isEntityInAngledArea;
function isEntityInArea(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    return _in(0x54736aa4, 0x0e271165, entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, p9, _r);
}
exports.isEntityInArea = isEntityInArea;
function isEntityInGhostCollision(entity) {
    return _in(0x7ef7649b, 0x64d7ff10, entity, _r);
}
exports.isEntityInGhostCollision = isEntityInGhostCollision;
function isEntityInWater(entity) {
    return _in(0xcfb0a0d8, 0xedd145a3, entity, _r);
}
exports.isEntityInWater = isEntityInWater;
/**
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param entity
 * @param zone
 */
function isEntityInZone(entity, zone) {
    return _in(0xb6463cf6, 0xaf527071, entity, _ts(zone), _r);
}
exports.isEntityInZone = isEntityInZone;
function isEntityOccluded(entity) {
    return _in(0xe31c2c72, 0xb8692b64, entity, _r);
}
exports.isEntityOccluded = isEntityOccluded;
function isEntityOnFire(entity) {
    return _in(0x28d3fed7, 0x190d3a0b, entity, _r);
}
exports.isEntityOnFire = isEntityOnFire;
/**
 * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
 * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
 * Chipping
 * @param entity
 */
function isEntityOnScreen(entity) {
    return _in(0xe659e47a, 0xf827484b, entity, _r);
}
exports.isEntityOnScreen = isEntityOnScreen;
/**
 * See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
 *
 * Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
 *
 * p4 is always 3 in the scripts.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 * @param taskFlag
 */
function isEntityPlayingAnim(entity, animDict, animName, taskFlag) {
    return _in(0x1f0b7922, 0x8e461ec9, entity, _ts(animDict), _ts(animName), taskFlag, _r);
}
exports.isEntityPlayingAnim = isEntityPlayingAnim;
/**
 * a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
 *
 * how can I make an entity static???
 * @param entity
 */
function isEntityStatic(entity) {
    return _in(0x1218e688, 0x6d3d8327, entity, _r);
}
exports.isEntityStatic = isEntityStatic;
function isEntityTouchingEntity(entity, targetEntity) {
    return _in(0x17ffc1b2, 0xba35a494, entity, targetEntity, _r);
}
exports.isEntityTouchingEntity = isEntityTouchingEntity;
function isEntityTouchingModel(entity, modelHash) {
    return _in(0x0f423237, 0x98a58c8c, entity, _ch(modelHash), _r);
}
exports.isEntityTouchingModel = isEntityTouchingModel;
function isEntityUpright(entity, angle) {
    return _in(0x5333f526, 0xf6ab19aa, entity, _fv(angle), _r);
}
exports.isEntityUpright = isEntityUpright;
function isEntityUpsidedown(entity) {
    return _in(0x1dbd5882, 0x0fa61d71, entity, _r);
}
exports.isEntityUpsidedown = isEntityUpsidedown;
function isEntityVisible(entity) {
    return _in(0x47d6f43d, 0x77935c75, entity, _r);
}
exports.isEntityVisible = isEntityVisible;
function isEntityVisibleToScript(entity) {
    return _in(0xd796cb5b, 0xa8f20e32, entity, _r);
}
exports.isEntityVisibleToScript = isEntityVisibleToScript;
function isEntityWaitingForWorldCollision(entity) {
    return _in(0xd05bff0c, 0x0a12c68f, entity, _r);
}
exports.isEntityWaitingForWorldCollision = isEntityWaitingForWorldCollision;
/**
 * Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
 *
 * seatIndex  = -1 being the driver seat.
 * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
 * side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
 * onEnter = check if you can enter (true) or exit (false) a vehicle.
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param side
 * @param onEnter
 */
function isEntryPointForSeatClear(ped, vehicle, seatIndex, side, onEnter) {
    return _in(0x639431e8, 0x95b9aa57, ped, vehicle, seatIndex, side, onEnter, _r);
}
exports.isEntryPointForSeatClear = isEntryPointForSeatClear;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function isExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2) {
    return _in(0x6070104b, 0x699b2ef4, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
}
exports.isExplosionActiveInArea = isExplosionActiveInArea;
/**
 * explosionType: See ADD_EXPLOSION, -1 for any explosion type
 *
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
function isExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width) {
    return _in(0xa079a6c5, 0x1525dc4b, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r);
}
exports.isExplosionInAngledArea = isExplosionInAngledArea;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function isExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2) {
    return _in(0x2e2eba0e, 0xe7ced0e0, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
}
exports.isExplosionInArea = isExplosionInArea;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
function isExplosionInSphere(explosionType, x, y, z, radius) {
    return _in(0xab0f8168, 0x85b0e483, explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.isExplosionInSphere = isExplosionInSphere;
/**
 * Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
 * @param vehicle
 * @param extraId
 */
function isExtraBrokenOff(vehicle, extraId) {
    return _in(0x534e36d4, 0xdb9ecc5d, vehicle, extraId, _r);
}
exports.isExtraBrokenOff = isExtraBrokenOff;
function isFirstPersonAimCamActive() {
    return _in(0x5e346d93, 0x4122613f, _r);
}
exports.isFirstPersonAimCamActive = isFirstPersonAimCamActive;
function isFlashLightOn(ped) {
    return _in(0x4b7620c4, 0x7217126c, ped, _r);
}
exports.isFlashLightOn = isFlashLightOn;
function isFloatingHelpTextOnScreen(hudIndex) {
    return _in(0x2432784a, 0xca090da4, hudIndex, _r);
}
exports.isFloatingHelpTextOnScreen = isFloatingHelpTextOnScreen;
function isFollowPedCamActive() {
    return _in(0xc6d3d268, 0x10c8e0f9, _r);
}
exports.isFollowPedCamActive = isFollowPedCamActive;
function isFollowVehicleCamActive() {
    return _in(0xcbbde6d3, 0x35d6d496, _r);
}
exports.isFollowVehicleCamActive = isFollowVehicleCamActive;
/**
 * This function is hard-coded to always return 0.
 */
function isFrontendFading() {
    return _in(0x7ea2b6af, 0x97eca6ed, _r);
}
exports.isFrontendFading = isFrontendFading;
function isFrontendReadyForControl() {
    return _in(0x3bab9a4e, 0x4f2ff5c7, _r);
}
exports.isFrontendReadyForControl = isFrontendReadyForControl;
/**
 * Hardcoded to return 1
 */
function isGameInControlOfMusic() {
    return _in(0x6d28dc16, 0x71e334fd, _r);
}
exports.isGameInControlOfMusic = isGameInControlOfMusic;
function isGameplayCamLookingBehind() {
    return _in(0x70fda869, 0xf3317ea9, _r);
}
exports.isGameplayCamLookingBehind = isGameplayCamLookingBehind;
/**
 * Examples when this function will return 0 are:
 * - During busted screen.
 * - When player is coming out from a hospital.
 * - When player is coming out from a police station.
 * - When player is buying gun from AmmuNation.
 */
function isGameplayCamRendering() {
    return _in(0x39b5d1b1, 0x0383f0c8, _r);
}
exports.isGameplayCamRendering = isGameplayCamRendering;
function isGameplayCamShaking() {
    return _in(0x016c0906, 0x30df1f89, _r);
}
exports.isGameplayCamShaking = isGameplayCamShaking;
function isGameplayHintActive() {
    return _in(0xe520ff1a, 0xd2785b40, _r);
}
exports.isGameplayHintActive = isGameplayHintActive;
function isGarageEmpty(garageHash, p1, p2) {
    return _in(0x90e47239, 0xea1980b8, _ch(garageHash), p1, p2, _r);
}
exports.isGarageEmpty = isGarageEmpty;
function isHandlerFrameLinedUpWithContainer(vehicle, entity) {
    return _in(0x89d630cf, 0x5ea96d23, vehicle, entity, _r);
}
exports.isHandlerFrameLinedUpWithContainer = isHandlerFrameLinedUpWithContainer;
function isHeliLandingAreaBlocked(vehicle) {
    return _in(0x63414874, 0x4f385576, vehicle, _r);
}
exports.isHeliLandingAreaBlocked = isHeliLandingAreaBlocked;
function isHeliPartBroken(vehicle, p1, p2, p3) {
    return _in(0xbc74b4be, 0x25eb6c8a, vehicle, p1, p2, p3, _r);
}
exports.isHeliPartBroken = isHeliPartBroken;
function isHelpMessageBeingDisplayed() {
    return _in(0x4d79439a, 0x6b55ac67, _r);
}
exports.isHelpMessageBeingDisplayed = isHelpMessageBeingDisplayed;
function isHelpMessageFadingOut() {
    return _in(0x327edeee, 0xac55c369, _r);
}
exports.isHelpMessageFadingOut = isHelpMessageFadingOut;
function isHelpMessageOnScreen() {
    return _in(0xdad37f45, 0x428801ae, _r);
}
exports.isHelpMessageOnScreen = isHelpMessageOnScreen;
/**
 * Checks whether the horn of a vehicle is currently played.
 * @param vehicle
 */
function isHornActive(vehicle) {
    return _in(0x9d6bfc12, 0xb05c6121, vehicle, _r);
}
exports.isHornActive = isHornActive;
function isHoveringOverMissionCreatorBlip() {
    return _in(0x4167efe0, 0x527d706e, _r);
}
exports.isHoveringOverMissionCreatorBlip = isHoveringOverMissionCreatorBlip;
/**
 * Full list of components below
 *
 * HUD = 0;
 * HUD_WANTED_STARS = 1;
 * HUD_WEAPON_ICON = 2;
 * HUD_CASH = 3;
 * HUD_MP_CASH = 4;
 * HUD_MP_MESSAGE = 5;
 * HUD_VEHICLE_NAME = 6;
 * HUD_AREA_NAME = 7;
 * HUD_VEHICLE_CLASS = 8;
 * HUD_STREET_NAME = 9;
 * HUD_HELP_TEXT = 10;
 * HUD_FLOATING_HELP_TEXT_1 = 11;
 * HUD_FLOATING_HELP_TEXT_2 = 12;
 * HUD_CASH_CHANGE = 13;
 * HUD_RETICLE = 14;
 * HUD_SUBTITLE_TEXT = 15;
 * HUD_RADIO_STATIONS = 16;
 * HUD_SAVING_GAME = 17;
 * HUD_GAME_STREAM = 18;
 * HUD_WEAPON_WHEEL = 19;
 * HUD_WEAPON_WHEEL_STATS = 20;
 * MAX_HUD_COMPONENTS = 21;
 * MAX_HUD_WEAPONS = 22;
 * MAX_SCRIPTED_HUD_COMPONENTS = 141;
 * @param id
 */
function isHudComponentActive(id) {
    return _in(0xbc4c9ea5, 0x391ecc0d, id, _r);
}
exports.isHudComponentActive = isHudComponentActive;
function isHudHidden() {
    return _in(0xa86478c6, 0x958735c5, _r);
}
exports.isHudHidden = isHudHidden;
function isHudPreferenceSwitchedOn() {
    return _in(0x1930dfa7, 0x31813ec4, _r);
}
exports.isHudPreferenceSwitchedOn = isHudPreferenceSwitchedOn;
function isImeInProgress() {
    return _in(0x801879a9, 0xb4f4b2fb, _r);
}
exports.isImeInProgress = isImeInProgress;
function isInItemset(item, itemset) {
    return _in(0x2d0fc594, 0xd1e9c107, item, itemset, _r);
}
exports.isInItemset = isInItemset;
function isInVehicleMobilePhoneCameraRendering() {
    return _in(0x1f2300cb, 0x7fa7b7f6, _r);
}
exports.isInVehicleMobilePhoneCameraRendering = isInVehicleMobilePhoneCameraRendering;
/**
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * @param incidentId
 */
function isIncidentValid(incidentId) {
    return _in(0xc8bc6461, 0xe629beaa, incidentId, _r);
}
exports.isIncidentValid = isIncidentValid;
function isInteriorCapped(interior) {
    return _in(0x92bac8ac, 0xf88cec26, interior, _r);
}
exports.isInteriorCapped = isInteriorCapped;
function isInteriorDisabled(interior) {
    return _in(0xbc5115a5, 0xa939dd15, interior, _r);
}
exports.isInteriorDisabled = isInteriorDisabled;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
function isInteriorEntitySetActive(interior, entitySetName) {
    return _in(0x35f7dd45, 0xe8c0a16d, interior, _ts(entitySetName), _r);
}
exports.isInteriorEntitySetActive = isInteriorEntitySetActive;
function isInteriorReady(interior) {
    return _in(0x6726bdcc, 0xc1932f0e, interior, _r);
}
exports.isInteriorReady = isInteriorReady;
function isInteriorScene() {
    return _in(0xbc72b5d7, 0xa1cbd54d, _r);
}
exports.isInteriorScene = isInteriorScene;
function isInterpolatingFromScriptCams() {
    return _in(0x3044240d, 0x2e0fa842, _r);
}
exports.isInterpolatingFromScriptCams = isInterpolatingFromScriptCams;
function isInterpolatingToScriptCams() {
    return _in(0x705a276e, 0xbff3133d, _r);
}
exports.isInterpolatingToScriptCams = isInterpolatingToScriptCams;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param iplName
 */
function isIplActive(iplName) {
    return _in(0x88a741e4, 0x4a2b3495, _ts(iplName), _r);
}
exports.isIplActive = isIplActive;
function isItemsetValid(itemset) {
    return _in(0xb1b1ea59, 0x6344dfab, itemset, _r);
}
exports.isItemsetValid = isItemsetValid;
function isJapaneseVersion() {
    return _in(0xb8c0bb75, 0xd8a77db3, _r);
}
exports.isJapaneseVersion = isJapaneseVersion;
function isLookInverted() {
    return _in(0x77b61253, 0x1280010d, _r);
}
exports.isLookInverted = isLookInverted;
function isMemoryCardInUse() {
    return _in(0x8a75ce29, 0x56274add, _r);
}
exports.isMemoryCardInUse = isMemoryCardInUse;
function isMessageBeingDisplayed() {
    return _in(0x7984c03a, 0xa5cc2f41, _r);
}
exports.isMessageBeingDisplayed = isMessageBeingDisplayed;
function isMinigameInProgress() {
    return _in(0x2b4a15e4, 0x4de0f478, _r);
}
exports.isMinigameInProgress = isMinigameInProgress;
function isMinimapRendering() {
    return _in(0xaf754f20, 0xeb5cd51a, _r);
}
exports.isMinimapRendering = isMinimapRendering;
function isMissionCompletePlaying() {
    return _in(0x19a30c23, 0xf5827f8a, _r);
}
exports.isMissionCompletePlaying = isMissionCompletePlaying;
function isMissionCompleteReadyForUi() {
    return _in(0x6f259f82, 0xd873b8b8, _r);
}
exports.isMissionCompleteReadyForUi = isMissionCompleteReadyForUi;
function isMissionCreatorBlip(blip) {
    return _in(0x26f49bf3, 0x381d933d, blip, _r);
}
exports.isMissionCreatorBlip = isMissionCreatorBlip;
function isMissionNewsStoryUnlocked(newsStory) {
    return _in(0x66e49bf5, 0x5b4b1874, newsStory, _r);
}
exports.isMissionNewsStoryUnlocked = isMissionNewsStoryUnlocked;
function isMissionTrain(train) {
    return _in(0xad464f2e, 0x18836bfc, train, _r);
}
exports.isMissionTrain = isMissionTrain;
function isMobileInterferenceActive() {
    return _in(0xc8b1b242, 0x5604cdd0, _r);
}
exports.isMobileInterferenceActive = isMobileInterferenceActive;
function isMobilePhoneCallOngoing() {
    return _in(0x7497d2ce, 0x2c30d24c, _r);
}
exports.isMobilePhoneCallOngoing = isMobilePhoneCallOngoing;
function isMobilePhoneRadioActive() {
    return _in(0xb35ce999, 0xe8ef317e, _r);
}
exports.isMobilePhoneRadioActive = isMobilePhoneRadioActive;
function isMobilePhoneToPedEar(ped) {
    return _in(0xa3f3564a, 0x5b3646c0, ped, _r);
}
exports.isMobilePhoneToPedEar = isMobilePhoneToPedEar;
function isModelAPed(model) {
    return _in(0x75816577, 0xfea6dad5, _ch(model), _r);
}
exports.isModelAPed = isModelAPed;
/**
 * Returns whether the specified model represents a vehicle.
 * @param model
 */
function isModelAVehicle(model) {
    return _in(0x19aac8f0, 0x7bfec53e, _ch(model), _r);
}
exports.isModelAVehicle = isModelAVehicle;
/**
 * Check if model is in cdimage(rpf)
 * @param model
 */
function isModelInCdimage(model) {
    return _in(0x35b9e080, 0x3292b641, _ch(model), _r);
}
exports.isModelInCdimage = isModelInCdimage;
/**
 * Returns whether the specified model exists in the game.
 * @param model
 */
function isModelValid(model) {
    return _in(0xc0296a2e, 0xdf545e92, _ch(model), _r);
}
exports.isModelValid = isModelValid;
function isMountedWeaponTaskUnderneathDrivingTask(ped) {
    return _in(0xa320ef04, 0x6186fa3b, ped, _r);
}
exports.isMountedWeaponTaskUnderneathDrivingTask = isMountedWeaponTaskUnderneathDrivingTask;
/**
 * Used with IS_LOOK_INVERTED() and negates its affect.
 *
 * --
 *
 * Not sure how the person above got that description, but here's an actual example:
 *
 * if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {
 * if (a_5) {
 * if (PAD::IS_LOOK_INVERTED()) {
 * a_3 *= -1;
 * }
 * if (PAD::IS_MOUSE_LOOK_INVERTED()) {
 * a_3 *= -1;
 * }
 * }
 * }
 */
function isMouseLookInverted() {
    return _in(0xe1615ec0, 0x3b3bb4fd, _r);
}
exports.isMouseLookInverted = isMouseLookInverted;
/**
 * Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
 */
function isMouseRolledOverInstructionalButtons() {
    return _in(0x3d9acb1e, 0xb139e702, _r);
}
exports.isMouseRolledOverInstructionalButtons = isMouseRolledOverInstructionalButtons;
function isMoveBlendRatioRunning(ped) {
    return _in(0xd4d8636c, 0x0199a939, ped, _r);
}
exports.isMoveBlendRatioRunning = isMoveBlendRatioRunning;
function isMoveBlendRatioSprinting(ped) {
    return _in(0x24a2ad74, 0xfa9814e2, ped, _r);
}
exports.isMoveBlendRatioSprinting = isMoveBlendRatioSprinting;
function isMoveBlendRatioStill(ped) {
    return _in(0x349ce7b5, 0x6dafd95c, ped, _r);
}
exports.isMoveBlendRatioStill = isMoveBlendRatioStill;
function isMoveBlendRatioWalking(ped) {
    return _in(0xf133bbbe, 0x91e1691f, ped, _r);
}
exports.isMoveBlendRatioWalking = isMoveBlendRatioWalking;
function isMpGamerTagActive(gamerTagId) {
    return _in(0x4e929e7a, 0x5796fd26, gamerTagId, _r);
}
exports.isMpGamerTagActive = isMpGamerTagActive;
function isMpGamerTagFree(gamerTagId) {
    return _in(0x595b5178, 0xe412e199, gamerTagId, _r);
}
exports.isMpGamerTagFree = isMpGamerTagFree;
function isMpGamerTagMovieActive() {
    return _in(0x6e0eb3eb, 0x47c8d7aa, _r);
}
exports.isMpGamerTagMovieActive = isMpGamerTagMovieActive;
/**
 * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
 */
function isMpTextChatTyping() {
    return _in(0xb118af58, 0xb5f332a1, _r);
}
exports.isMpTextChatTyping = isMpTextChatTyping;
function isMultiheadFadeUp() {
    return _in(0xa0fe7616, 0x8a189ddb, _r);
}
exports.isMultiheadFadeUp = isMultiheadFadeUp;
function isMusicOneshotPlaying() {
    return _in(0xa097ab27, 0x5061fb21, _r);
}
exports.isMusicOneshotPlaying = isMusicOneshotPlaying;
function isNamedRendertargetLinked(modelHash) {
    return _in(0x11375053, 0x8fa31298, _ch(modelHash), _r);
}
exports.isNamedRendertargetLinked = isNamedRendertargetLinked;
function isNamedRendertargetRegistered(name) {
    return _in(0x78dcdc15, 0xc9f116b4, _ts(name), _r);
}
exports.isNamedRendertargetRegistered = isNamedRendertargetRegistered;
function isNavigatingMenuContent() {
    return _in(0x4e3cd0ef, 0x8a489541, _r);
}
exports.isNavigatingMenuContent = isNavigatingMenuContent;
/**
 * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
 *
 * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function isNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2) {
    return _in(0xf813c7e6, 0x3f9062a5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
}
exports.isNavmeshLoadedInArea = isNavmeshLoadedInArea;
function isNavmeshRequiredRegionInUse() {
    return _in(0x705a8440, 0x02b39dc0, _r);
}
exports.isNavmeshRequiredRegionInUse = isNavmeshRequiredRegionInUse;
function isNetworkIdOwnedByParticipant(netId) {
    return _in(0xa1607996, 0x431332df, netId, _r);
}
exports.isNetworkIdOwnedByParticipant = isNetworkIdOwnedByParticipant;
function isNetworkLoadingScene() {
    return _in(0x41ca5a33, 0x160ea4ab, _r);
}
exports.isNetworkLoadingScene = isNetworkLoadingScene;
function isNetworkVehicleRunningRespotTimer(networkID) {
    return _in(0xdd7cef5b, 0x3a4da8a6, networkID, _r);
}
exports.isNetworkVehicleRunningRespotTimer = isNetworkVehicleRunningRespotTimer;
function isNewLoadSceneActive() {
    return _in(0xa41a05b6, 0xcb741b85, _r);
}
exports.isNewLoadSceneActive = isNewLoadSceneActive;
function isNewLoadSceneLoaded() {
    return _in(0x01b8247a, 0x7a8b9ad1, _r);
}
exports.isNewLoadSceneLoaded = isNewLoadSceneLoaded;
function isNextWeatherType(weatherType) {
    return _in(0x2faa3a30, 0xbec0f25d, _ts(weatherType), _r);
}
exports.isNextWeatherType = isNextWeatherType;
function isObjectAPickup(object) {
    return _in(0xfc481c64, 0x1ebbd27d, object, _r);
}
exports.isObjectAPickup = isObjectAPickup;
function isObjectAPortablePickup(object) {
    return _in(0x0378c085, 0x04160d0d, object, _r);
}
exports.isObjectAPortablePickup = isObjectAPortablePickup;
/**
 * Despite the name, it does work for any entity type.
 * @param garageHash
 * @param entity
 * @param p2
 * @param p3
 */
function isObjectEntirelyInsideGarage(garageHash, entity, p2, p3) {
    return _in(0x372ef669, 0x9146a1e4, _ch(garageHash), entity, _fv(p2), p3, _r);
}
exports.isObjectEntirelyInsideGarage = isObjectEntirelyInsideGarage;
function isObjectNearPoint(objectHash, x, y, z, range) {
    return _in(0x8c90fe4b, 0x381ba60a, _ch(objectHash), _fv(x), _fv(y), _fv(z), _fv(range), _r);
}
exports.isObjectNearPoint = isObjectNearPoint;
/**
 * Despite the name, it does work for any entity type.
 * @param garageHash
 * @param entity
 * @param p2
 */
function isObjectPartiallyInsideGarage(garageHash, entity, p2) {
    return _in(0xf0eed5a6, 0xbc7b237a, _ch(garageHash), entity, p2, _r);
}
exports.isObjectPartiallyInsideGarage = isObjectPartiallyInsideGarage;
function isObjectVisible(object) {
    return _in(0x8b32ace6, 0x326a7546, object, _r);
}
exports.isObjectVisible = isObjectVisible;
function isObjectWithinBrainActivationRange(object) {
    return _in(0xccba1542, 0x09823057, object, _r);
}
exports.isObjectWithinBrainActivationRange = isObjectWithinBrainActivationRange;
/**
 * Returns the same as IS_SOCIAL_CLUB_ACTIVE
 */
function isOnlinePoliciesMenuActive() {
    return _in(0x6f72cd94, 0xf7b5b68c, _r);
}
exports.isOnlinePoliciesMenuActive = isOnlinePoliciesMenuActive;
/**
 * PS4
 */
function isOrbisVersion() {
    return _in(0xa72bc0b6, 0x75b1519e, _r);
}
exports.isOrbisVersion = isOrbisVersion;
function isPauseMenuActive() {
    return _in(0xb0034a22, 0x3497ffcb, _r);
}
exports.isPauseMenuActive = isPauseMenuActive;
function isPauseMenuRestarting() {
    return _in(0x1c491717, 0x107431c7, _r);
}
exports.isPauseMenuRestarting = isPauseMenuRestarting;
function isPausemapInInteriorMode() {
    return _in(0x9049fe33, 0x9d5f6f6f, _r);
}
exports.isPausemapInInteriorMode = isPausemapInInteriorMode;
function isPcVersion() {
    return _in(0x48af3644, 0x4b965238, _r);
}
exports.isPcVersion = isPcVersion;
/**
 * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
 * @param ped
 */
function isPedAPlayer(ped) {
    return _in(0x12534c34, 0x8c6cb68b, ped, _r);
}
exports.isPedAPlayer = isPedAPlayer;
function isPedActiveInScenario(ped) {
    return _in(0xaa135f94, 0x82c82cc3, ped, _r);
}
exports.isPedActiveInScenario = isPedActiveInScenario;
function isPedAimingFromCover(ped) {
    return _in(0x3998b127, 0x6a3300e5, ped, _r);
}
exports.isPedAimingFromCover = isPedAimingFromCover;
/**
 * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
 *
 * Type flag bit values:
 * 1 = Melee weapons
 * 2 = Explosive weapons
 * 4 = Any other weapons
 *
 * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
 * 7 returns true if you are equipped with any weapon except your fists.
 * 6 returns true if you are equipped with any weapon except melee weapons.
 * 5 returns true if you are equipped with any weapon except the Explosives weapon group.
 * 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
 * 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
 * 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
 * 1 returns true only if you are equipped with any Melee weapon.
 * 0 never returns true.
 *
 * Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
 * @param ped
 * @param typeFlags
 */
function isPedArmed(ped, typeFlags) {
    return _in(0x475768a9, 0x75d5ad17, ped, typeFlags, _r);
}
exports.isPedArmed = isPedArmed;
/**
 * This function is hard-coded to always return 0.
 * @param ped
 */
function isPedBeingArrested(ped) {
    return _in(0x90a09f3a, 0x45fed688, ped, _r);
}
exports.isPedBeingArrested = isPedBeingArrested;
function isPedBeingJacked(ped) {
    return _in(0x9a497fe2, 0xdf198913, ped, _r);
}
exports.isPedBeingJacked = isPedBeingJacked;
function isPedBeingStealthKilled(ped) {
    return _in(0x863b23ef, 0xde9c5df2, ped, _r);
}
exports.isPedBeingStealthKilled = isPedBeingStealthKilled;
/**
 * p1 is always 0
 * @param ped
 * @param p1
 */
function isPedBeingStunned(ped, p1) {
    return _in(0x4fbacce3, 0xb4138ee8, ped, p1, _r);
}
exports.isPedBeingStunned = isPedBeingStunned;
function isPedBlushFacepaintTintForBarber(colorId) {
    return _in(0x09e7eca9, 0x81d9b210, colorId, _r);
}
exports.isPedBlushFacepaintTintForBarber = isPedBlushFacepaintTintForBarber;
function isPedBlushTintForBarber(colorID) {
    return _in(0x604e8101, 0x89ee3a59, colorID, _r);
}
exports.isPedBlushTintForBarber = isPedBlushTintForBarber;
function isPedBlushTintForCreator(colorId) {
    return _in(0xf41b5d29, 0x0c99a3d6, colorId, _r);
}
exports.isPedBlushTintForCreator = isPedBlushTintForCreator;
function isPedClimbing(ped) {
    return _in(0x53e8cb4f, 0x48bfe623, ped, _r);
}
exports.isPedClimbing = isPedClimbing;
/**
 * Checks if the component variation is valid, this works great for randomizing components using loops.
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 *
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 */
function isPedComponentVariationValid(ped, componentId, drawableId, textureId) {
    return _in(0xe825f6b6, 0xcea7671d, ped, componentId, drawableId, textureId, _r);
}
exports.isPedComponentVariationValid = isPedComponentVariationValid;
function isPedCuffed(ped) {
    return _in(0x74e559b3, 0xbc910685, ped, _r);
}
exports.isPedCuffed = isPedCuffed;
/**
 * This native returns a true or false value.
 *
 * Ped ped = The ped whose weapon you want to check.
 * @param ped
 */
function isPedCurrentWeaponSilenced(ped) {
    return _in(0x65f0c5ae, 0x05943ec7, ped, _r);
}
exports.isPedCurrentWeaponSilenced = isPedCurrentWeaponSilenced;
/**
 * Seems to consistently return true if the ped is dead.
 *
 * p1 is always passed 1 in the scripts.
 *
 * I suggest to remove "OR_DYING" part, because it does not detect dying phase.
 *
 * That's what the devs call it, cry about it.
 *
 * lol
 * @param ped
 * @param p1
 */
function isPedDeadOrDying(ped, p1) {
    return _in(0x3317dedb, 0x88c95038, ped, p1, _r);
}
exports.isPedDeadOrDying = isPedDeadOrDying;
function isPedDefensiveAreaActive(ped, p1) {
    return _in(0xba63d9fe, 0x45412247, ped, p1, _r);
}
exports.isPedDefensiveAreaActive = isPedDefensiveAreaActive;
function isPedDiving(ped) {
    return _in(0x5527b824, 0x6fef9b11, ped, _r);
}
exports.isPedDiving = isPedDiving;
function isPedDoingABeastJump(p0) {
    return _in(0x451d0501, 0x2ccec234, p0, _r);
}
exports.isPedDoingABeastJump = isPedDoingABeastJump;
function isPedDoingDriveby(ped) {
    return _in(0xb2c086cc, 0x1bf8f2bf, ped, _r);
}
exports.isPedDoingDriveby = isPedDoingDriveby;
function isPedDucking(ped) {
    return _in(0xd125ae74, 0x8725c6bc, ped, _r);
}
exports.isPedDucking = isPedDucking;
/**
 * Presumably returns the Entity that the Ped is currently diving out of the way of.
 *
 * var num3;
 * if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
 * if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
 * @param ped
 * @param evadingEntity
 */
function isPedEvasiveDiving(ped, evadingEntity) {
    const [retval, evadingEntity_out] = _in(0x414641c2, 0x6e105898, ped, _ii(evadingEntity), _r);
    return [retval, evadingEntity_out];
}
exports.isPedEvasiveDiving = isPedEvasiveDiving;
function isPedExclusiveDriverOfVehicle(ped, vehicle, outIndex) {
    const [retval, outIndex_out] = _in(0xb09d25e7, 0x7c33eb3f, ped, vehicle, _ii(outIndex), _r);
    return [retval, outIndex_out];
}
exports.isPedExclusiveDriverOfVehicle = isPedExclusiveDriverOfVehicle;
/**
 * angle is ped's view cone
 * @param ped
 * @param otherPed
 * @param angle
 */
function isPedFacingPed(ped, otherPed, angle) {
    return _in(0xd71649db, 0x0a545aa3, ped, otherPed, _fv(angle), _r);
}
exports.isPedFacingPed = isPedFacingPed;
function isPedFalling(ped) {
    return _in(0xfb92a102, 0xf1c4dfa3, ped, _r);
}
exports.isPedFalling = isPedFalling;
/**
 * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
 * If the handle is invalid, the function returns true.
 * @param ped
 */
function isPedFatallyInjured(ped) {
    return _in(0xd8394507, 0x56ed5a80, ped, _r);
}
exports.isPedFatallyInjured = isPedFatallyInjured;
function isPedFleeing(ped) {
    return _in(0xbbcce00b, 0x381f8482, ped, _r);
}
exports.isPedFleeing = isPedFleeing;
function isPedGesturing(p0) {
    return _in(0xc30bdaee, 0x47256c13, p0, _r);
}
exports.isPedGesturing = isPedGesturing;
function isPedGettingIntoAVehicle(ped) {
    return _in(0xbb062b2b, 0x5722478e, ped, _r);
}
exports.isPedGettingIntoAVehicle = isPedGettingIntoAVehicle;
function isPedGettingUp(ped) {
    return _in(0x2a74e1d5, 0xf2f00eec, ped, _r);
}
exports.isPedGettingUp = isPedGettingUp;
function isPedGoingIntoCover(ped) {
    return _in(0x9f65dbc5, 0x37e59ad5, ped, _r);
}
exports.isPedGoingIntoCover = isPedGoingIntoCover;
function isPedGroupMember(ped, groupId) {
    return _in(0x9bb01e38, 0x34671191, ped, groupId, _r);
}
exports.isPedGroupMember = isPedGroupMember;
function isPedHairTintForBarber(colorID) {
    return _in(0xe0d36e5d, 0x9e99cc21, colorID, _r);
}
exports.isPedHairTintForBarber = isPedHairTintForBarber;
function isPedHairTintForCreator(colorId) {
    return _in(0xed6d8e27, 0xa43b8cde, colorId, _r);
}
exports.isPedHairTintForCreator = isPedHairTintForCreator;
function isPedHangingOnToVehicle(ped) {
    return _in(0x1c86d8ae, 0xf8254b78, ped, _r);
}
exports.isPedHangingOnToVehicle = isPedHangingOnToVehicle;
function isPedHeadingTowardsPosition(ped, x, y, z, p4) {
    return _in(0xfcf37a45, 0x7cb96dc0, ped, _fv(x), _fv(y), _fv(z), _fv(p4), _r);
}
exports.isPedHeadingTowardsPosition = isPedHeadingTowardsPosition;
function isPedHeadtrackingEntity(ped, entity) {
    return _in(0x813a0a7c, 0x9d2e831f, ped, entity, _r);
}
exports.isPedHeadtrackingEntity = isPedHeadtrackingEntity;
function isPedHeadtrackingPed(ped1, ped2) {
    return _in(0x5cd3cb88, 0xa7f8850d, ped1, ped2, _r);
}
exports.isPedHeadtrackingPed = isPedHeadtrackingPed;
function isPedHelmetVisorUp(ped) {
    return _in(0xb9496ce4, 0x7546db2c, ped, _r);
}
exports.isPedHelmetVisorUp = isPedHelmetVisorUp;
/**
 * Returns true/false if the ped is/isn't humanoid.
 * @param ped
 */
function isPedHuman(ped) {
    return _in(0xb980061d, 0xa992779d, ped, _r);
}
exports.isPedHuman = isPedHuman;
/**
 * Returns whether the specified ped is hurt.
 * @param ped
 */
function isPedHurt(ped) {
    return _in(0x5983bb44, 0x9d7fdb12, ped, _r);
}
exports.isPedHurt = isPedHurt;
function isPedInAnyBoat(ped) {
    return _in(0x2e0e1c2b, 0x4f6cb339, ped, _r);
}
exports.isPedInAnyBoat = isPedInAnyBoat;
function isPedInAnyHeli(ped) {
    return _in(0x298b91ae, 0x825e5705, ped, _r);
}
exports.isPedInAnyHeli = isPedInAnyHeli;
function isPedInAnyPlane(ped) {
    return _in(0x5fff4cfc, 0x74d8fb80, ped, _r);
}
exports.isPedInAnyPlane = isPedInAnyPlane;
function isPedInAnyPoliceVehicle(ped) {
    return _in(0x0bd04e29, 0x640c9c12, ped, _r);
}
exports.isPedInAnyPoliceVehicle = isPedInAnyPoliceVehicle;
function isPedInAnySub(ped) {
    return _in(0xfbfc01cc, 0xfb35d99e, ped, _r);
}
exports.isPedInAnySub = isPedInAnySub;
function isPedInAnyTaxi(ped) {
    return _in(0x6e575d6a, 0x898ab852, ped, _r);
}
exports.isPedInAnyTaxi = isPedInAnyTaxi;
function isPedInAnyTrain(ped) {
    return _in(0x6f972c1a, 0xb75a1ed0, ped, _r);
}
exports.isPedInAnyTrain = isPedInAnyTrain;
/**
 * Gets a value indicating whether the specified ped is in any vehicle.
 *
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * @param ped
 * @param atGetIn
 */
function isPedInAnyVehicle(ped, atGetIn) {
    return _in(0x997abd67, 0x1d25ca0b, ped, atGetIn, _r);
}
exports.isPedInAnyVehicle = isPedInAnyVehicle;
/**
 * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
 *
 * p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4 -- [[14]] ], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
 * @param ped
 * @param target
 */
function isPedInCombat(ped, target) {
    return _in(0x4859f1fc, 0x66a6278e, ped, target, _r);
}
exports.isPedInCombat = isPedInCombat;
/**
 * p1 is nearly always 0 in the scripts.
 * @param ped
 * @param exceptUseWeapon
 */
function isPedInCover(ped, exceptUseWeapon) {
    return _in(0x60dfd069, 0x1a170b88, ped, exceptUseWeapon, _r);
}
exports.isPedInCover = isPedInCover;
function isPedInCoverFacingLeft(ped) {
    return _in(0x845333b3, 0x150583ab, ped, _r);
}
exports.isPedInCoverFacingLeft = isPedInCoverFacingLeft;
function isPedInCurrentConversation(ped) {
    return _in(0x049e937f, 0x18f4020c, ped, _r);
}
exports.isPedInCurrentConversation = isPedInCurrentConversation;
function isPedInFlyingVehicle(ped) {
    return _in(0x91348735, 0x37fa419c, ped, _r);
}
exports.isPedInFlyingVehicle = isPedInFlyingVehicle;
function isPedInGroup(ped) {
    return _in(0x5891cac5, 0xd4acff74, ped, _r);
}
exports.isPedInGroup = isPedInGroup;
function isPedInHighCover(ped) {
    return _in(0x6a03bf94, 0x3d767c93, ped, _r);
}
exports.isPedInHighCover = isPedInHighCover;
/**
 * Notes: The function only returns true while the ped is:
 * A.) Swinging a random melee attack (including pistol-whipping)
 *
 * B.) Reacting to being hit by a melee attack (including pistol-whipping)
 *
 * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
 *
 * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
 * @param ped
 */
function isPedInMeleeCombat(ped) {
    return _in(0x4e209b2c, 0x1ead5159, ped, _r);
}
exports.isPedInMeleeCombat = isPedInMeleeCombat;
function isPedInModel(ped, modelHash) {
    return _in(0x796d90ef, 0xb19aa332, ped, _ch(modelHash), _r);
}
exports.isPedInModel = isPedInModel;
function isPedInParachuteFreeFall(ped) {
    return _in(0x7dce8bda, 0x0f1c1200, ped, _r);
}
exports.isPedInParachuteFreeFall = isPedInParachuteFreeFall;
/**
 * Gets a value indicating whether the specified ped is in the specified vehicle.
 *
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * @param ped
 * @param vehicle
 * @param atGetIn
 */
function isPedInVehicle(ped, vehicle, atGetIn) {
    return _in(0xa3ee4a07, 0x279bb9db, ped, vehicle, atGetIn, _r);
}
exports.isPedInVehicle = isPedInVehicle;
/**
 * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
 * Returns `true` if the ped is in writhe, `false` otherwise.
 * @param ped
 */
function isPedInWrithe(ped) {
    return _in(0xdeb6d521, 0x26e7d640, ped, _r);
}
exports.isPedInWrithe = isPedInWrithe;
/**
 * Gets a value indicating whether this ped's health is below its injured threshold.
 *
 * The default threshold is 100.
 * @param ped
 */
function isPedInjured(ped) {
    return _in(0x84a2dd9a, 0xc37c35c1, ped, _r);
}
exports.isPedInjured = isPedInjured;
function isPedJacking(ped) {
    return _in(0x4ae4ff91, 0x1dfb61da, ped, _r);
}
exports.isPedJacking = isPedJacking;
function isPedJumping(ped) {
    return _in(0xcedabc59, 0x00a0bf97, ped, _r);
}
exports.isPedJumping = isPedJumping;
function isPedJumpingOutOfVehicle(ped) {
    return _in(0x433ddffe, 0x2044b636, ped, _r);
}
exports.isPedJumpingOutOfVehicle = isPedJumpingOutOfVehicle;
function isPedLanding(p0) {
    return _in(0x412f1364, 0xfa066cfb, p0, _r);
}
exports.isPedLanding = isPedLanding;
function isPedLipstickTintForBarber(colorID) {
    return _in(0x0525a2c2, 0x562f3cd4, colorID, _r);
}
exports.isPedLipstickTintForBarber = isPedLipstickTintForBarber;
function isPedLipstickTintForCreator(colorId) {
    return _in(0x3e802f11, 0xfbe27674, colorId, _r);
}
exports.isPedLipstickTintForCreator = isPedLipstickTintForCreator;
/**
 * Returns true/false if the ped is/isn't male.
 * @param ped
 */
function isPedMale(ped) {
    return _in(0x6d9f5faa, 0x7488ba46, ped, _r);
}
exports.isPedMale = isPedMale;
function isPedModel(ped, modelHash) {
    return _in(0xc9d55b1a, 0x358a5bf7, ped, _ch(modelHash), _r);
}
exports.isPedModel = isPedModel;
function isPedOnAnyBike(ped) {
    return _in(0x94495889, 0xe22c6479, ped, _r);
}
exports.isPedOnAnyBike = isPedOnAnyBike;
function isPedOnFoot(ped) {
    return _in(0x01fee67d, 0xb37f59b2, ped, _r);
}
exports.isPedOnFoot = isPedOnFoot;
/**
 * Same function call as PED::GET_MOUNT, aka just returns 0
 * @param ped
 */
function isPedOnMount(ped) {
    return _in(0x460bc76a, 0x0e10655e, ped, _r);
}
exports.isPedOnMount = isPedOnMount;
function isPedOnSpecificVehicle(ped, vehicle) {
    return _in(0xec5f66e4, 0x59af3bb2, ped, vehicle, _r);
}
exports.isPedOnSpecificVehicle = isPedOnSpecificVehicle;
/**
 * Gets a value indicating whether the specified ped is on top of any vehicle.
 *
 * Return 1 when ped is on vehicle.
 * Return 0 when ped is not on a vehicle.
 *
 * @param ped
 */
function isPedOnVehicle(ped) {
    return _in(0x67722aeb, 0x798e5fab, ped, _r);
}
exports.isPedOnVehicle = isPedOnVehicle;
/**
 * Returns true if the ped is currently opening a door (CTaskOpenDoor).
 * @param ped
 */
function isPedOpeningDoor(ped) {
    return _in(0x26af0e8e, 0x30bd2a2c, ped, _r);
}
exports.isPedOpeningDoor = isPedOpeningDoor;
function isPedPerformingACounterAttack(ped) {
    return _in(0xebd0edba, 0x5be957cf, ped, _r);
}
exports.isPedPerformingACounterAttack = isPedPerformingACounterAttack;
function isPedPerformingMeleeAction(ped) {
    return _in(0xdcca191d, 0xf9980fd7, ped, _r);
}
exports.isPedPerformingMeleeAction = isPedPerformingMeleeAction;
function isPedPerformingStealthKill(ped) {
    return _in(0xfd4ccdbc, 0xc59941b7, ped, _r);
}
exports.isPedPerformingStealthKill = isPedPerformingStealthKill;
function isPedPlantingBomb(ped) {
    return _in(0xc70b5fae, 0x151982d8, ped, _r);
}
exports.isPedPlantingBomb = isPedPlantingBomb;
/**
 * Used only once (am_mp_property_int)
 *
 * ped was PLAYER_PED_ID()
 *
 * Related to CTaskAmbientClips.
 * @param ped
 */
function isPedPlayingBaseClipInScenario(ped) {
    return _in(0x621c6e47, 0x29388e41, ped, _r);
}
exports.isPedPlayingBaseClipInScenario = isPedPlayingBaseClipInScenario;
function isPedProne(ped) {
    return _in(0xd6a86331, 0xa537a7b9, ped, _r);
}
exports.isPedProne = isPedProne;
/**
 * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
 * @param ped
 */
function isPedRagdoll(ped) {
    return _in(0x47e4e977, 0x581c5b55, ped, _r);
}
exports.isPedRagdoll = isPedRagdoll;
/**
 * Returns whether the specified ped is reloading.
 * @param ped
 */
function isPedReloading(ped) {
    return _in(0x24b100c6, 0x8c645951, ped, _r);
}
exports.isPedReloading = isPedReloading;
function isPedRespondingToEvent(ped, event) {
    return _in(0x625b774d, 0x75c87068, ped, event, _r);
}
exports.isPedRespondingToEvent = isPedRespondingToEvent;
function isPedRingtonePlaying(ped) {
    return _in(0x1e8e5e20, 0x937e3137, ped, _r);
}
exports.isPedRingtonePlaying = isPedRingtonePlaying;
function isPedRunning(ped) {
    return _in(0xc5286ffc, 0x176f28a2, ped, _r);
}
exports.isPedRunning = isPedRunning;
function isPedRunningArrestTask(ped) {
    return _in(0x3dc52677, 0x769b4ae0, ped, _r);
}
exports.isPedRunningArrestTask = isPedRunningArrestTask;
function isPedRunningMeleeTask(ped) {
    return _in(0xd1871251, 0xf3b5acd7, ped, _r);
}
exports.isPedRunningMeleeTask = isPedRunningMeleeTask;
function isPedRunningMobilePhoneTask(ped) {
    return _in(0x2afe52f7, 0x82f25775, ped, _r);
}
exports.isPedRunningMobilePhoneTask = isPedRunningMobilePhoneTask;
function isPedRunningRagdollTask(ped) {
    return _in(0xe3b6097c, 0xc25aa69e, ped, _r);
}
exports.isPedRunningRagdollTask = isPedRunningRagdollTask;
function isPedShaderReady(ped) {
    return _in(0x81aa517f, 0xbba05d39, ped, _r);
}
exports.isPedShaderReady = isPedShaderReady;
function isPedSheltered(ped) {
    return _in(0xb8b52e49, 0x8014f5b0, ped, _r);
}
exports.isPedSheltered = isPedSheltered;
/**
 * Returns whether the specified ped is shooting.
 * @param ped
 */
function isPedShooting(ped) {
    return _in(0x34616828, 0xcd07f1a1, ped, _r);
}
exports.isPedShooting = isPedShooting;
function isPedShootingInArea(ped, x1, y1, z1, x2, y2, z2, p7, p8) {
    return _in(0x7e9dfe24, 0xac1e58ef, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, _r);
}
exports.isPedShootingInArea = isPedShootingInArea;
/**
 * Detect if ped is in any vehicle
 * [True/False]
 * @param ped
 */
function isPedSittingInAnyVehicle(ped) {
    return _in(0x826aa586, 0xedb9fef8, ped, _r);
}
exports.isPedSittingInAnyVehicle = isPedSittingInAnyVehicle;
/**
 * Detect if ped is sitting in the specified vehicle
 * [True/False]
 * @param ped
 * @param vehicle
 */
function isPedSittingInVehicle(ped, vehicle) {
    return _in(0xa808aa1d, 0x79230fc2, ped, vehicle, _r);
}
exports.isPedSittingInVehicle = isPedSittingInVehicle;
function isPedSprinting(ped) {
    return _in(0x57e457cd, 0x2c0fc168, ped, _r);
}
exports.isPedSprinting = isPedSprinting;
function isPedStill(ped) {
    return _in(0xac29253e, 0xef8f0180, ped, _r);
}
exports.isPedStill = isPedStill;
/**
 * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
 * @param ped
 */
function isPedStopped(ped) {
    return _in(0x530944f6, 0xf4b8a214, ped, _r);
}
exports.isPedStopped = isPedStopped;
/**
 * What's strafing?
 * @param ped
 */
function isPedStrafing(ped) {
    return _in(0xe45b7f22, 0x2de47e09, ped, _r);
}
exports.isPedStrafing = isPedStrafing;
function isPedSwimming(ped) {
    return _in(0x9de32763, 0x1295b4c2, ped, _r);
}
exports.isPedSwimming = isPedSwimming;
function isPedSwimmingUnderWater(ped) {
    return _in(0xc024869a, 0x53992f34, ped, _r);
}
exports.isPedSwimmingUnderWater = isPedSwimmingUnderWater;
function isPedSwitchingWeapon(Ped) {
    return _in(0x3795688a, 0x307e1eb6, Ped, _r);
}
exports.isPedSwitchingWeapon = isPedSwitchingWeapon;
function isPedTakingOffHelmet(ped) {
    return _in(0x14590ddb, 0xedb1ec85, ped, _r);
}
exports.isPedTakingOffHelmet = isPedTakingOffHelmet;
function isPedTracked(ped) {
    return _in(0x4c5e1f08, 0x7cd10bb7, ped, _r);
}
exports.isPedTracked = isPedTracked;
function isPedTryingToEnterALockedVehicle(ped) {
    return _in(0x44d28d5d, 0xdfe5f68c, ped, _r);
}
exports.isPedTryingToEnterALockedVehicle = isPedTryingToEnterALockedVehicle;
function isPedUsingActionMode(ped) {
    return _in(0x00e73468, 0xd085f745, ped, _r);
}
exports.isPedUsingActionMode = isPedUsingActionMode;
function isPedUsingAnyScenario(ped) {
    return _in(0x57ab4a30, 0x80f85143, ped, _r);
}
exports.isPedUsingAnyScenario = isPedUsingAnyScenario;
/**
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * @param ped
 * @param scenario
 */
function isPedUsingScenario(ped, scenario) {
    return _in(0x1bf09473, 0x6dd62c2e, ped, _ts(scenario), _r);
}
exports.isPedUsingScenario = isPedUsingScenario;
function isPedVaulting(ped) {
    return _in(0x117c70d1, 0xf5730b5e, ped, _r);
}
exports.isPedVaulting = isPedVaulting;
function isPedWalking(ped) {
    return _in(0xde4c184b, 0x2b9b071a, ped, _r);
}
exports.isPedWalking = isPedWalking;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
function isPedWeaponComponentActive(ped, weaponHash, componentHash) {
    return _in(0x0d78de05, 0x72d3969e, ped, _ch(weaponHash), _ch(componentHash), _r);
}
exports.isPedWeaponComponentActive = isPedWeaponComponentActive;
function isPedWeaponReadyToShoot(ped) {
    return _in(0xb80ca294, 0xf2f26749, ped, _r);
}
exports.isPedWeaponReadyToShoot = isPedWeaponReadyToShoot;
/**
 * Returns true if the ped passed through the parenthesis is wearing a helmet.
 * @param ped
 */
function isPedWearingHelmet(ped) {
    return _in(0xf33bdfe1, 0x9b309b19, ped, _r);
}
exports.isPedWearingHelmet = isPedWearingHelmet;
function isPedheadshotImgUploadAvailable() {
    return _in(0xebb37677, 0x9a760aa8, _r);
}
exports.isPedheadshotImgUploadAvailable = isPedheadshotImgUploadAvailable;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
function isPedheadshotReady(id) {
    return _in(0x70852288, 0x42b13a67, id, _r);
}
exports.isPedheadshotReady = isPedheadshotReady;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
function isPedheadshotValid(id) {
    return _in(0xa0a9668f, 0x158129a2, id, _r);
}
exports.isPedheadshotValid = isPedheadshotValid;
function isPickupWeaponObjectValid(object) {
    return _in(0x11d1e53a, 0x726891fe, object, _r);
}
exports.isPickupWeaponObjectValid = isPickupWeaponObjectValid;
function isPlaneLandingGearIntact(plane) {
    return _in(0x4198ab00, 0x22b15f87, plane, _r);
}
exports.isPlaneLandingGearIntact = isPlaneLandingGearIntact;
function isPlaybackGoingOnForVehicle(vehicle) {
    return _in(0x1c8a4c2c, 0x19e68eec, vehicle, _r);
}
exports.isPlaybackGoingOnForVehicle = isPlaybackGoingOnForVehicle;
function isPlaybackUsingAiGoingOnForVehicle(vehicle) {
    return _in(0xaea8fd59, 0x1fad4106, vehicle, _r);
}
exports.isPlaybackUsingAiGoingOnForVehicle = isPlaybackUsingAiGoingOnForVehicle;
/**
 * Returns true if an unk value is greater than 0.0f
 * @param player
 */
function isPlayerBattleAware(player) {
    return _in(0x38d28da8, 0x1e4e9bf9, player, _r);
}
exports.isPlayerBattleAware = isPlayerBattleAware;
/**
 * Return true while player is being arrested / busted.
 *
 * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
 *
 * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
 * @param player
 * @param atArresting
 */
function isPlayerBeingArrested(player, atArresting) {
    return _in(0x388a47c5, 0x1abdac8e, player, atArresting, _r);
}
exports.isPlayerBeingArrested = isPlayerBeingArrested;
function isPlayerBluetoothEnable(player) {
    return _in(0x65faee42, 0x5de637b0, player, _r);
}
exports.isPlayerBluetoothEnable = isPlayerBluetoothEnable;
/**
 * Returns TRUE if the player ('s ped) is climbing at the moment.
 * @param player
 */
function isPlayerClimbing(player) {
    return _in(0x95e8f73d, 0xc65efb9c, player, _r);
}
exports.isPlayerClimbing = isPlayerClimbing;
/**
 * Can the player control himself, used to disable controls for player for things like a cutscene.
 *
 * ---
 *
 * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
 * @param player
 */
function isPlayerControlOn(player) {
    return _in(0x49c32d60, 0x007afa47, player, _r);
}
exports.isPlayerControlOn = isPlayerControlOn;
function isPlayerDead(player) {
    return _in(0x424d4687, 0xfa1e5652, player, _r);
}
exports.isPlayerDead = isPlayerDead;
function isPlayerEntirelyInsideGarage(garageHash, player, p2, p3) {
    return _in(0x024a60de, 0xb0ea69f0, _ch(garageHash), player, _fv(p2), p3, _r);
}
exports.isPlayerEntirelyInsideGarage = isPlayerEntirelyInsideGarage;
/**
 * Gets a value indicating whether the specified player is currently aiming freely.
 * @param player
 */
function isPlayerFreeAiming(player) {
    return _in(0x2e397fd2, 0xecd37c87, player, _r);
}
exports.isPlayerFreeAiming = isPlayerFreeAiming;
/**
 * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
 * @param player
 * @param entity
 */
function isPlayerFreeAimingAtEntity(player, entity) {
    return _in(0x3c06b5c8, 0x39b38f7b, player, entity, _r);
}
exports.isPlayerFreeAimingAtEntity = isPlayerFreeAimingAtEntity;
function isPlayerFreeForAmbientTask(player) {
    return _in(0xdccfd3f1, 0x06c36ab4, player, _r);
}
exports.isPlayerFreeForAmbientTask = isPlayerFreeForAmbientTask;
function isPlayerInCutscene(player) {
    return _in(0xe73092f4, 0x157cd126, player, _r);
}
exports.isPlayerInCutscene = isPlayerInCutscene;
/**
 * this function is hard-coded to always return 0.
 */
function isPlayerLoggingInNp() {
    return _in(0x74556e14, 0x20867eca, _r);
}
exports.isPlayerLoggingInNp = isPlayerLoggingInNp;
/**
 * Returns TRUE if the game is in online mode and FALSE if in offline mode.
 *
 * This is an alias for NETWORK_IS_SIGNED_ONLINE.
 */
function isPlayerOnline() {
    return _in(0xf25d331d, 0xc2627bbc, _r);
}
exports.isPlayerOnline = isPlayerOnline;
function isPlayerPartiallyInsideGarage(garageHash, player, p2) {
    return _in(0x1761dc5d, 0x8471cbaa, _ch(garageHash), player, p2, _r);
}
exports.isPlayerPartiallyInsideGarage = isPlayerPartiallyInsideGarage;
/**
 * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
 * @param player
 */
function isPlayerPlaying(player) {
    return _in(0x5e9564d8, 0x246b909a, player, _r);
}
exports.isPlayerPlaying = isPlayerPlaying;
function isPlayerPressingHorn(player) {
    return _in(0xfa1e2bf8, 0xb10598f9, player, _r);
}
exports.isPlayerPressingHorn = isPlayerPressingHorn;
function isPlayerReadyForCutscene(player) {
    return _in(0x908cbecc, 0x2caa3690, player, _r);
}
exports.isPlayerReadyForCutscene = isPlayerReadyForCutscene;
/**
 * Returns true if the player is riding a train.
 * @param player
 */
function isPlayerRidingTrain(player) {
    return _in(0x4ec12697, 0x209f2196, player, _r);
}
exports.isPlayerRidingTrain = isPlayerRidingTrain;
function isPlayerScriptControlOn(player) {
    return _in(0x8a876a65, 0x283dd7d7, player, _r);
}
exports.isPlayerScriptControlOn = isPlayerScriptControlOn;
/**
 * Returns true if the player is currently switching, false otherwise.
 * (When the camera is in the sky moving from Trevor to Franklin for example)
 */
function isPlayerSwitchInProgress() {
    return _in(0xd9d2cfff, 0x49fab35f, _r);
}
exports.isPlayerSwitchInProgress = isPlayerSwitchInProgress;
function isPlayerTargettingAnything(player) {
    return _in(0x78cfe518, 0x96b6b8a4, player, _r);
}
exports.isPlayerTargettingAnything = isPlayerTargettingAnything;
function isPlayerTargettingEntity(player, entity) {
    return _in(0x7912f7fc, 0x4f6264b6, player, entity, _r);
}
exports.isPlayerTargettingEntity = isPlayerTargettingEntity;
function isPlayerTeleportActive() {
    return _in(0x02b15662, 0xd7f8886f, _r);
}
exports.isPlayerTeleportActive = isPlayerTeleportActive;
function isPlayerVehRadioEnable() {
    return _in(0x5f43d83f, 0xd6738741, _r);
}
exports.isPlayerVehRadioEnable = isPlayerVehRadioEnable;
function isPlayerVehicleWeaponToggledToNonHoming(p0) {
    return _in(0x6e4361ff, 0x3e8cd7ca, p0, _r);
}
exports.isPlayerVehicleWeaponToggledToNonHoming = isPlayerVehicleWeaponToggledToNonHoming;
function isPlayerWantedLevelGreater(player, wantedLevel) {
    return _in(0x238db2a2, 0xc23ee9ef, player, wantedLevel, _r);
}
exports.isPlayerWantedLevelGreater = isPlayerWantedLevelGreater;
function isPlayingPhoneGestureAnim(ped) {
    return _in(0xb8ebb1e9, 0xd3588c10, ped, _r);
}
exports.isPlayingPhoneGestureAnim = isPlayingPhoneGestureAnim;
function isPlaylistOnChannel(tvChannel, p1) {
    return _in(0x1f710bff, 0x7dae6261, tvChannel, p1, _r);
}
exports.isPlaylistOnChannel = isPlaylistOnChannel;
/**
 * An angled area is an X-Z oriented rectangle with three parameters:
 * 1. origin: the mid-point along a base edge of the rectangle;
 * 2. extent: the mid-point of opposite base edge on the other Z;
 * 3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
 *
 * The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
 * 1. golf_mp https://i.imgur.com/JhsQAK9.png
 * 2. am_taxi https://i.imgur.com/TJWCZaT.jpg
 * @param xPos
 * @param yPos
 * @param zPos
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includeZ
 */
function isPointInAngledArea(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ) {
    return _in(0x2a70bae8, 0x883e4c81, _fv(xPos), _fv(yPos), _fv(zPos), _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), debug, includeZ, _r);
}
exports.isPointInAngledArea = isPointInAngledArea;
function isPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0xe54e209c, 0x35ffa18d, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r);
}
exports.isPointObscuredByAMissionEntity = isPointObscuredByAMissionEntity;
/**
 * Gets a value indicating whether the specified position is on a road.
 * The vehicle parameter is not implemented (ignored).
 * @param x
 * @param y
 * @param z
 * @param vehicle
 */
function isPointOnRoad(x, y, z, vehicle) {
    return _in(0x125bf4ab, 0xfc536b09, _fv(x), _fv(y), _fv(z), vehicle, _r);
}
exports.isPointOnRoad = isPointOnRoad;
function isPopMultiplierAreaNetworked(id) {
    return _in(0x1312f4b2, 0x42609ce3, id, _r);
}
exports.isPopMultiplierAreaNetworked = isPopMultiplierAreaNetworked;
/**
 * `range`: The range, seems to not be very accurate during testing.
 * `p4`: Unknown, when set to true it seems to always return true no matter what I try.
 * `checkVehicle`: Check for any vehicles in that area.
 * `checkPeds`: Check for any peds in that area.
 * `ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
 * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
 *
 * Returns true if there is anything in that location matching the provided parameters.
 * @param x
 * @param y
 * @param z
 * @param range
 * @param p4
 * @param checkVehicles
 * @param checkPeds
 * @param p7
 * @param p8
 * @param ignoreEntity
 * @param p10
 */
function isPositionOccupied(x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10) {
    return _in(0xadcde75e, 0x1c60f32d, _fv(x), _fv(y), _fv(z), _fv(range), p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10, _r);
}
exports.isPositionOccupied = isPositionOccupied;
function isPrevWeatherType(weatherType) {
    return _in(0x44f28f86, 0x433b10a9, _ts(weatherType), _r);
}
exports.isPrevWeatherType = isPrevWeatherType;
/**
 * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
 *
 * - Nacorpio
 *
 *
 * ownedByPlayer = only projectiles fired by the player will be detected.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param ownedByPlayer
 */
function isProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
    return _in(0x5270a8fb, 0xc098c3f8, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r);
}
exports.isProjectileInArea = isProjectileInArea;
/**
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 * @param ownedByPlayer
 */
function isProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer) {
    return _in(0xf0bc1240, 0x1061dea0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7, ownedByPlayer, _r);
}
exports.isProjectileTypeInAngledArea = isProjectileTypeInAngledArea;
/**
 * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param type
 * @param ownedByPlayer
 */
function isProjectileTypeInArea(x1, y1, z1, x2, y2, z2, type, ownedByPlayer) {
    return _in(0x2e0dc353, 0x342c4a6d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), type, ownedByPlayer, _r);
}
exports.isProjectileTypeInArea = isProjectileTypeInArea;
function isProjectileTypeWithinDistance(x, y, z, projectileHash, radius, ownedByPlayer) {
    return _in(0x34318593, 0x248c8fb2, _fv(x), _fv(y), _fv(z), _ch(projectileHash), _fv(radius), ownedByPlayer, _r);
}
exports.isProjectileTypeWithinDistance = isProjectileTypeWithinDistance;
function isPropLightOverriden(object) {
    return _in(0xadf084fb, 0x8f075d06, object, _r);
}
exports.isPropLightOverriden = isPropLightOverriden;
/**
 * PS5 (Prospero) version...
 */
function isProsperoVersion() {
    return _in(0x807abe1a, 0xb65c24d2, _r);
}
exports.isProsperoVersion = isProsperoVersion;
function isPs3Version() {
    return _in(0xcca1072c, 0x29d096c2, _r);
}
exports.isPs3Version = isPs3Version;
function isRadarHidden() {
    return _in(0x157f93b0, 0x36700462, _r);
}
exports.isRadarHidden = isRadarHidden;
function isRadarPreferenceSwitchedOn() {
    return _in(0x9eb6522e, 0xa68f22fe, _r);
}
exports.isRadarPreferenceSwitchedOn = isRadarPreferenceSwitchedOn;
function isRadioFadedOut() {
    return _in(0x0626a247, 0xd2405330, _r);
}
exports.isRadioFadedOut = isRadioFadedOut;
function isRadioRetuning() {
    return _in(0xa151a739, 0x4a214e65, _r);
}
exports.isRadioRetuning = isRadioRetuning;
function isRadioStationFavourited(radioStation) {
    return _in(0x2b1784db, 0x08afea79, _ts(radioStation), _r);
}
exports.isRadioStationFavourited = isRadioStationFavourited;
function isRemotePlayerInNonClonedVehicle(player) {
    return _in(0x690a61a6, 0xd13583f6, player, _r);
}
exports.isRemotePlayerInNonClonedVehicle = isRemotePlayerInNonClonedVehicle;
function isReplayAvailable() {
    return _in(0x4282e081, 0x74868be3, _r);
}
exports.isReplayAvailable = isReplayAvailable;
function isReplayInitialized() {
    return _in(0xdf4b952f, 0x7d381b95, _r);
}
exports.isReplayInitialized = isReplayInitialized;
function isReplayRecordSpaceAvailable(p0) {
    return _in(0x33d47e85, 0xb476abcd, p0, _r);
}
exports.isReplayRecordSpaceAvailable = isReplayRecordSpaceAvailable;
/**
 * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
 *
 * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
 * retn
 */
function isReplayRecording() {
    return _in(0x1897ca71, 0x995a90b4, _r);
}
exports.isReplayRecording = isReplayRecording;
function isReportugcMenuOpen() {
    return _in(0x9135584d, 0x09a3437e, _r);
}
exports.isReportugcMenuOpen = isReportugcMenuOpen;
function isRocketBoostActive(vehicle) {
    return _in(0x3d34e80e, 0xed4ae3be, vehicle, _r);
}
exports.isRocketBoostActive = isRocketBoostActive;
function isRopeAttachedAtBothEnds(ropeId) {
    const [retval, ropeId_out] = _in(0x84de3b5f, 0xb3e666f0, _ii(ropeId), _r);
    return [retval, ropeId_out];
}
exports.isRopeAttachedAtBothEnds = isRopeAttachedAtBothEnds;
function isSafeToStartPlayerSwitch() {
    return _in(0x71e7b2e6, 0x57449aad, _r);
}
exports.isSafeToStartPlayerSwitch = isSafeToStartPlayerSwitch;
/**
 * val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
 * @param val
 */
function isScaleformMovieDeleting(val) {
    return _in(0x86255b1f, 0xc929e33e, val, _r);
}
exports.isScaleformMovieDeleting = isScaleformMovieDeleting;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
 * @param methodReturn
 */
function isScaleformMovieMethodReturnValueReady(methodReturn) {
    return _in(0x768ff896, 0x1ba904d6, methodReturn, _r);
}
exports.isScaleformMovieMethodReturnValueReady = isScaleformMovieMethodReturnValueReady;
/**
 * Xbox Series (Scarlett) version...
 */
function isScarlettVersion() {
    return _in(0xc545ab1c, 0xf97abb34, _r);
}
exports.isScarlettVersion = isScarlettVersion;
function isScePlatform() {
    return _in(0xf911e695, 0xc1eb8518, _r);
}
exports.isScePlatform = isScePlatform;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts:
 *
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "BLIMP",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "KORTZ_SECURITY",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5",
 * "Rampage1",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE"
 *
 * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 * @param scenarioGroup
 */
function isScenarioGroupEnabled(scenarioGroup) {
    return _in(0x367a09de, 0xd4e05b99, _ts(scenarioGroup), _r);
}
exports.isScenarioGroupEnabled = isScenarioGroupEnabled;
function isScenarioOccupied(x, y, z, maxRange, onlyUsersActuallyAtScenario) {
    return _in(0x788756d7, 0x3ac2e07c, _fv(x), _fv(y), _fv(z), _fv(maxRange), onlyUsersActuallyAtScenario, _r);
}
exports.isScenarioOccupied = isScenarioOccupied;
/**
 * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * Occurrences in the b617d scripts:
 * "PROP_HUMAN_SEAT_CHAIR",
 * "WORLD_HUMAN_DRINKING",
 * "WORLD_HUMAN_HANG_OUT_STREET",
 * "WORLD_HUMAN_SMOKING",
 * "WORLD_MOUNTAIN_LION_WANDER",
 * "WORLD_HUMAN_DRINKING"
 *
 * Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.
 *
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 *
 * @param scenarioType
 */
function isScenarioTypeEnabled(scenarioType) {
    return _in(0x3a815db3, 0xea088722, _ts(scenarioType), _r);
}
exports.isScenarioTypeEnabled = isScenarioTypeEnabled;
function isScreenFadedIn() {
    return _in(0x5a859503, 0xb0c08678, _r);
}
exports.isScreenFadedIn = isScreenFadedIn;
function isScreenFadedOut() {
    return _in(0xb16fce9d, 0xdc7ba182, _r);
}
exports.isScreenFadedOut = isScreenFadedOut;
function isScreenFadingIn() {
    return _in(0x5c544bc6, 0xc57ac575, _r);
}
exports.isScreenFadingIn = isScreenFadingIn;
function isScreenFadingOut() {
    return _in(0x797ac7cb, 0x535ba28f, _r);
}
exports.isScreenFadingOut = isScreenFadingOut;
/**
 * Returns whether screen transition to blur/from blur is running.
 */
function isScreenblurFadeRunning() {
    return _in(0x7b226c78, 0x5a52a0a9, _r);
}
exports.isScreenblurFadeRunning = isScreenblurFadeRunning;
/**
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 */
function isScriptGlobalShaking() {
    return _in(0xc912af07, 0x8af19212, _r);
}
exports.isScriptGlobalShaking = isScriptGlobalShaking;
function isScriptedConversationLoaded() {
    return _in(0xdf0d54be, 0x7a776737, _r);
}
exports.isScriptedConversationLoaded = isScriptedConversationLoaded;
function isScriptedConversationOngoing() {
    return _in(0x16754c55, 0x6d2ede3d, _r);
}
exports.isScriptedConversationOngoing = isScriptedConversationOngoing;
function isScriptedHudComponentActive(id) {
    return _in(0xdd100eb1, 0x7a94ff65, id, _r);
}
exports.isScriptedHudComponentActive = isScriptedHudComponentActive;
function isScriptedHudComponentHiddenThisFrame(id) {
    return _in(0x09c0403e, 0xd9a751c2, id, _r);
}
exports.isScriptedHudComponentHiddenThisFrame = isScriptedHudComponentHiddenThisFrame;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param anim
 */
function isScriptedScenarioPedUsingConditionalAnim(ped, animDict, anim) {
    return _in(0x6ec47a34, 0x4923e1ed, ped, _ts(animDict), _ts(anim), _r);
}
exports.isScriptedScenarioPedUsingConditionalAnim = isScriptedScenarioPedUsingConditionalAnim;
function isScriptedSpeechPlaying(p0) {
    return _in(0xcc9aa18d, 0xcc7084f4, p0, _r);
}
exports.isScriptedSpeechPlaying = isScriptedSpeechPlaying;
function isSeatWarpOnly(vehicle, seatIndex) {
    return _in(0xf7f203e3, 0x1f96f6a1, vehicle, seatIndex, _r);
}
exports.isSeatWarpOnly = isSeatWarpOnly;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
function isShockingEventInSphere(eventType, x, y, z, radius) {
    return _in(0x1374abb7, 0xc15bab92, eventType, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.isShockingEventInSphere = isShockingEventInSphere;
/**
 * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function isSniperBulletInArea(x1, y1, z1, x2, y2, z2) {
    return _in(0xfefcf11b, 0x01287125, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
}
exports.isSniperBulletInArea = isSniperBulletInArea;
/**
 * This function is hard-coded to always return 0.
 */
function isSniperInverted() {
    return _in(0x61a23b7e, 0xda9bda24, _r);
}
exports.isSniperInverted = isSniperInverted;
function isSocialClubActive() {
    return _in(0xc406be34, 0x3fc4b9af, _r);
}
exports.isSocialClubActive = isSocialClubActive;
function isSpecialAbilityActive(player, p1) {
    return _in(0x3e5f7fc8, 0x5d854e15, player, p1, _r);
}
exports.isSpecialAbilityActive = isSpecialAbilityActive;
function isSpecialAbilityEnabled(player, p1) {
    return _in(0xb1d200fe, 0x26aef3cb, player, p1, _r);
}
exports.isSpecialAbilityEnabled = isSpecialAbilityEnabled;
function isSpecialAbilityMeterFull(player, p1) {
    return _in(0x05a1fe50, 0x4b7f2587, player, p1, _r);
}
exports.isSpecialAbilityMeterFull = isSpecialAbilityMeterFull;
function isSpecialAbilityUnlocked(playerModel) {
    return _in(0xc6017f6a, 0x6cdfa694, _ch(playerModel), _r);
}
exports.isSpecialAbilityUnlocked = isSpecialAbilityUnlocked;
function isSphereVisible(x, y, z, radius) {
    return _in(0xe33d59da, 0x70b58fdf, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
}
exports.isSphereVisible = isSphereVisible;
function isSphereVisibleToAnotherMachine(p0, p1, p2, p3) {
    return _in(0xd82cf8e6, 0x4c8729d8, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _r);
}
exports.isSphereVisibleToAnotherMachine = isSphereVisibleToAnotherMachine;
function isSphereVisibleToPlayer(p0, p1, p2, p3, p4) {
    return _in(0xdc3a3102, 0x19e5da62, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _r);
}
exports.isSphereVisibleToPlayer = isSphereVisibleToPlayer;
/**
 * Returns true when the srl from BEGIN_SRL is loaded.
 */
function isSrlLoaded() {
    return _in(0xd0263801, 0xa4c5b0bb, _r);
}
exports.isSrlLoaded = isSrlLoaded;
function isSteamVersion() {
    return _in(0x0a27b2b6, 0x282f7169, _r);
}
exports.isSteamVersion = isSteamVersion;
function isStoreAvailableToUser() {
    return _in(0x883d79c4, 0x071e18b3, _r);
}
exports.isStoreAvailableToUser = isStoreAvailableToUser;
function isStorePendingNetworkShutdownToOpen() {
    return _in(0x2f057596, 0xf2bd0061, _r);
}
exports.isStorePendingNetworkShutdownToOpen = isStorePendingNetworkShutdownToOpen;
function isStreamPlaying() {
    return _in(0xd11fa52e, 0xb849d978, _r);
}
exports.isStreamPlaying = isStreamPlaying;
function isStreamingAdditionalText(p0) {
    return _in(0x8b6817b7, 0x1b85ebf0, p0, _r);
}
exports.isStreamingAdditionalText = isStreamingAdditionalText;
function isStreamvolActive() {
    return _in(0xbc9823ab, 0x80a3dcac, _r);
}
exports.isStreamvolActive = isStreamvolActive;
function isStringNull(string) {
    return _in(0xf22b6c47, 0xc6eab066, _ts(string), _r);
}
exports.isStringNull = isStringNull;
function isStringNullOrEmpty(string) {
    return _in(0xca042b69, 0x57743895, _ts(string), _r);
}
exports.isStringNullOrEmpty = isStringNullOrEmpty;
function isStuntJumpInProgress() {
    return _in(0x7a3f1970, 0x0a4d0525, _r);
}
exports.isStuntJumpInProgress = isStuntJumpInProgress;
function isStuntJumpMessageShowing() {
    return _in(0x2272b0a1, 0x343129f4, _r);
}
exports.isStuntJumpMessageShowing = isStuntJumpMessageShowing;
function isSubtitlePreferenceSwitchedOn() {
    return _in(0xad6daca4, 0xba53e0a4, _r);
}
exports.isSubtitlePreferenceSwitchedOn = isSubtitlePreferenceSwitchedOn;
function isSwitchReadyForDescent() {
    return _in(0xdfa80cb2, 0x5d0a19b3, _r);
}
exports.isSwitchReadyForDescent = isSwitchReadyForDescent;
function isSwitchSkippingDescent() {
    return _in(0x5b74ea8c, 0xfd5e3e7e, _r);
}
exports.isSwitchSkippingDescent = isSwitchSkippingDescent;
function isSwitchToMultiFirstpartFinished() {
    return _in(0x933bbeeb, 0x8c61b5f4, _r);
}
exports.isSwitchToMultiFirstpartFinished = isSwitchToMultiFirstpartFinished;
function isSynchronizedSceneHoldLastFrame(sceneID) {
    return _in(0x7f2f4f13, 0xac5257ef, sceneID, _r);
}
exports.isSynchronizedSceneHoldLastFrame = isSynchronizedSceneHoldLastFrame;
function isSynchronizedSceneLooped(sceneID) {
    return _in(0x62522002, 0xe0c391ba, sceneID, _r);
}
exports.isSynchronizedSceneLooped = isSynchronizedSceneLooped;
/**
 * Returns true if a synchronized scene is running
 * @param sceneId
 */
function isSynchronizedSceneRunning(sceneId) {
    return _in(0x25d39b93, 0x5a038a26, sceneId, _r);
}
exports.isSynchronizedSceneRunning = isSynchronizedSceneRunning;
function isSystemUiBeingDisplayed() {
    return _in(0x5d511e38, 0x67c87139, _r);
}
exports.isSystemUiBeingDisplayed = isSystemUiBeingDisplayed;
function isTargetPedInPerceptionArea(ped, targetPed, p2, p3, p4, p5) {
    return _in(0x06087579, 0xe7aa85a9, ped, targetPed, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _r);
}
exports.isTargetPedInPerceptionArea = isTargetPedInPerceptionArea;
function isTaskMoveNetworkActive(ped) {
    return _in(0x921ce12c, 0x489c4c41, ped, _r);
}
exports.isTaskMoveNetworkActive = isTaskMoveNetworkActive;
function isTaskMoveNetworkReadyForTransition(ped) {
    return _in(0x30ed88d5, 0xe0c56a37, ped, _r);
}
exports.isTaskMoveNetworkReadyForTransition = isTaskMoveNetworkReadyForTransition;
function isTaxiLightOn(vehicle) {
    return _in(0x7504c0f1, 0x13ab50fc, vehicle, _r);
}
exports.isTaxiLightOn = isTaxiLightOn;
function isTennisMode(ped) {
    return _in(0x5d5479d1, 0x15290c3f, ped, _r);
}
exports.isTennisMode = isTennisMode;
function isThisAMinigameScript() {
    return _in(0x7b30f65d, 0x7b710098, _r);
}
exports.isThisAMinigameScript = isThisAMinigameScript;
function isThisModelABicycle(model) {
    return _in(0xbf94dd42, 0xf63bded2, _ch(model), _r);
}
exports.isThisModelABicycle = isThisModelABicycle;
function isThisModelABike(model) {
    return _in(0xb50c0b0c, 0xedc6ce84, _ch(model), _r);
}
exports.isThisModelABike = isThisModelABike;
function isThisModelABoat(model) {
    return _in(0x45a91879, 0x28f4b9e3, _ch(model), _r);
}
exports.isThisModelABoat = isThisModelABoat;
/**
 * To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
 * @param model
 */
function isThisModelACar(model) {
    return _in(0x7f6db52e, 0xefc96df8, _ch(model), _r);
}
exports.isThisModelACar = isThisModelACar;
function isThisModelAHeli(model) {
    return _in(0xdce43347, 0x88af94ea, _ch(model), _r);
}
exports.isThisModelAHeli = isThisModelAHeli;
/**
 * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
 * @param model
 */
function isThisModelAJetski(model) {
    return _in(0x95370974, 0x12cf75fe, _ch(model), _r);
}
exports.isThisModelAJetski = isThisModelAJetski;
function isThisModelAPlane(model) {
    return _in(0xa0948ab4, 0x2d7ba0de, _ch(model), _r);
}
exports.isThisModelAPlane = isThisModelAPlane;
function isThisModelAQuadbike(model) {
    return _in(0x39dac362, 0xee65fa28, _ch(model), _r);
}
exports.isThisModelAQuadbike = isThisModelAQuadbike;
function isThisModelATrain(model) {
    return _in(0xab935175, 0xb22e822b, _ch(model), _r);
}
exports.isThisModelATrain = isThisModelATrain;
function isThisModelAnAmphibiousCar(model) {
    return _in(0x633f6f44, 0xa537ebb6, _ch(model), _r);
}
exports.isThisModelAnAmphibiousCar = isThisModelAnAmphibiousCar;
function isThisModelAnAmphibiousQuadbike(model) {
    return _in(0xa1a9fc1c, 0x76a6730d, _ch(model), _r);
}
exports.isThisModelAnAmphibiousQuadbike = isThisModelAnAmphibiousQuadbike;
function isThreadActive(threadId) {
    return _in(0x46e9ae36, 0xd8fa6417, threadId, _r);
}
exports.isThreadActive = isThreadActive;
/**
 * Returns true if the two times are equal; otherwise returns false.
 * @param timeA
 * @param timeB
 */
function isTimeEqualTo(timeA, timeB) {
    return _in(0xf5bc9585, 0x7bd6d512, timeA, timeB, _r);
}
exports.isTimeEqualTo = isTimeEqualTo;
/**
 * Subtracts the second argument from the first, then returns whether the result is negative.
 * @param timeA
 * @param timeB
 */
function isTimeLessThan(timeA, timeB) {
    return _in(0xcb2cf514, 0x8012c8d0, timeA, timeB, _r);
}
exports.isTimeLessThan = isTimeLessThan;
/**
 * Subtracts the first argument from the second, then returns whether the result is negative.
 * @param timeA
 * @param timeB
 */
function isTimeMoreThan(timeA, timeB) {
    return _in(0xde350f86, 0x51e4346c, timeA, timeB, _r);
}
exports.isTimeMoreThan = isTimeMoreThan;
function isToggleModOn(vehicle, modType) {
    return _in(0x84b233a8, 0xc8fc8ae7, vehicle, modType, _r);
}
exports.isToggleModOn = isToggleModOn;
/**
 * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
 *
 *
 * Target needs to be tracked.. won't work otherwise.
 * @param ped
 */
function isTrackedPedVisible(ped) {
    return _in(0x91c8e617, 0xf64188ac, ped, _r);
}
exports.isTrackedPedVisible = isTrackedPedVisible;
function isTrackedPointVisible(point) {
    return _in(0xc45ccdaa, 0xc9221ca8, point, _r);
}
exports.isTrackedPointVisible = isTrackedPointVisible;
function isTurretSeat(vehicle, seatIndex) {
    return _in(0xe33ffa90, 0x6ce74880, vehicle, seatIndex, _r);
}
exports.isTurretSeat = isTurretSeat;
function isTvshowCurrentlyPlaying(videoCliphash) {
    return _in(0x0ad973ca, 0x1e077b60, _ch(videoCliphash), _r);
}
exports.isTvshowCurrentlyPlaying = isTvshowCurrentlyPlaying;
function isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId) {
    return _in(0xeb709a36, 0x958abe0d, gamerTagId, _r);
}
exports.isUpdatingMpGamerTagNameAndCrewDetails = isUpdatingMpGamerTagNameAndCrewDetails;
function isUserOldEnoughToAccessStore() {
    return _in(0x59328eb0, 0x8c5ceb2b, _r);
}
exports.isUserOldEnoughToAccessStore = isUserOldEnoughToAccessStore;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function isUsingCursor(control) {
    return _in(0x13337b38, 0xdb572509, control, _r);
}
exports.isUsingCursor = isUsingCursor;
/**
 * control: unused parameter
 * @param control
 */
function isUsingKeyboardAndMouse(control) {
    return _in(0xa571d467, 0x27e2b718, control, _r);
}
exports.isUsingKeyboardAndMouse = isUsingKeyboardAndMouse;
function isUsingPedScubaGearVariation(p0) {
    return _in(0xfec9a3b1, 0x820f3331, p0, _r);
}
exports.isUsingPedScubaGearVariation = isUsingPedScubaGearVariation;
/**
 * control: see IS_CONTROL_ENABLED
 *
 * Hardcoded to return false.
 * @param control
 */
function isUsingRemotePlay(control) {
    return _in(0x23f09ead, 0xc01449d6, control, _r);
}
exports.isUsingRemotePlay = isUsingRemotePlay;
function isValidInterior(interior) {
    return _in(0x26b0e73d, 0x7eaaf4d3, interior, _r);
}
exports.isValidInterior = isValidInterior;
/**
 * Returns true if the vehicle has a convertible roof.
 *
 * p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
 * @param vehicle
 * @param p1
 */
function isVehicleAConvertible(vehicle, p1) {
    return _in(0x52f357a3, 0x0698bcce, vehicle, p1, _r);
}
exports.isVehicleAConvertible = isVehicleAConvertible;
function isVehicleAlarmActivated(vehicle) {
    return _in(0x4319e335, 0xb71fff34, vehicle, _r);
}
exports.isVehicleAlarmActivated = isVehicleAlarmActivated;
function isVehicleAttachedToCargobob(cargobob, vehicleAttached) {
    return _in(0xd40148f2, 0x2e81a1d9, cargobob, vehicleAttached, _r);
}
exports.isVehicleAttachedToCargobob = isVehicleAttachedToCargobob;
/**
 * Scripts verify that towTruck is the first parameter, not the second.
 * @param towTruck
 * @param vehicle
 */
function isVehicleAttachedToTowTruck(towTruck, vehicle) {
    return _in(0x146df9ec, 0x4c4b9fd4, towTruck, vehicle, _r);
}
exports.isVehicleAttachedToTowTruck = isVehicleAttachedToTowTruck;
function isVehicleAttachedToTrailer(vehicle) {
    return _in(0xe7cf3c4f, 0x9f489f0c, vehicle, _r);
}
exports.isVehicleAttachedToTrailer = isVehicleAttachedToTrailer;
function isVehicleAudiblyDamaged(vehicle) {
    return _in(0x5db8010e, 0xe71fdef2, vehicle, _r);
}
exports.isVehicleAudiblyDamaged = isVehicleAudiblyDamaged;
/**
 * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
 * @param vehicle
 */
function isVehicleBeingBroughtToHalt(vehicle) {
    return _in(0xc69bb1d8, 0x32a710ef, vehicle, _r);
}
exports.isVehicleBeingBroughtToHalt = isVehicleBeingBroughtToHalt;
function isVehicleBumperBouncing(vehicle, frontBumper) {
    return _in(0x27b92677, 0x9deb502d, vehicle, frontBumper, _r);
}
exports.isVehicleBumperBouncing = isVehicleBumperBouncing;
function isVehicleBumperBrokenOff(vehicle, frontBumper) {
    return _in(0x468056a6, 0xbb6f3846, vehicle, frontBumper, _r);
}
exports.isVehicleBumperBrokenOff = isVehicleBumperBrokenOff;
/**
 * doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
 * @param veh
 * @param doorID
 */
function isVehicleDoorDamaged(veh, doorID) {
    return _in(0xb8e181e5, 0x59464527, veh, doorID, _r);
}
exports.isVehicleDoorDamaged = isVehicleDoorDamaged;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
function isVehicleDoorFullyOpen(vehicle, doorId) {
    return _in(0x3e933cff, 0x7b111c22, vehicle, doorId, _r);
}
exports.isVehicleDoorFullyOpen = isVehicleDoorFullyOpen;
/**
 * p1 is always 0 in the scripts.
 *
 * p1 = check if vehicle is on fire
 * @param vehicle
 * @param isOnFireCheck
 */
function isVehicleDriveable(vehicle, isOnFireCheck) {
    return _in(0x4c241e39, 0xb23df959, vehicle, isOnFireCheck, _r);
}
exports.isVehicleDriveable = isVehicleDriveable;
function isVehicleExtraTurnedOn(vehicle, extraId) {
    return _in(0xd2e6822d, 0xbfd6c8bd, vehicle, extraId, _r);
}
exports.isVehicleExtraTurnedOn = isVehicleExtraTurnedOn;
function isVehicleHighDetail(vehicle) {
    return _in(0x1f25887f, 0x3c104278, vehicle, _r);
}
exports.isVehicleHighDetail = isVehicleHighDetail;
/**
 * Returns whether the specified vehicle is currently in a burnout.
 *
 *
 * vb.net
 * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
 * End Function
 * @param vehicle
 */
function isVehicleInBurnout(vehicle) {
    return _in(0x1297a88e, 0x081430eb, vehicle, _r);
}
exports.isVehicleInBurnout = isVehicleInBurnout;
/**
 * garageName example "Michael - Beverly Hills"
 *
 * Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
 * @param garageName
 * @param vehicle
 */
function isVehicleInGarageArea(garageName, vehicle) {
    return _in(0xcee4490c, 0xd57bb3c2, _ts(garageName), vehicle, _r);
}
exports.isVehicleInGarageArea = isVehicleInGarageArea;
function isVehicleInSubmarineMode(vehicle) {
    return _in(0xa77dc70b, 0xd689a1e5, vehicle, _r);
}
exports.isVehicleInSubmarineMode = isVehicleInSubmarineMode;
/**
 * Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
 * @param vehicle
 * @param modType
 * @param modIndex
 */
function isVehicleModGen9Exclusive(vehicle, modType, modIndex) {
    return _in(0x00834eac, 0x4a96e010, vehicle, modType, modIndex, _r);
}
exports.isVehicleModGen9Exclusive = isVehicleModGen9Exclusive;
function isVehicleModel(vehicle, model) {
    return _in(0x423e8de3, 0x7d934d89, vehicle, _ch(model), _r);
}
exports.isVehicleModel = isVehicleModel;
/**
 * Returns true if the id is non zero.
 * @param vehicleNodeId
 */
function isVehicleNodeIdValid(vehicleNodeId) {
    return _in(0x1eaf30fc, 0xfbf5af74, vehicleNodeId, _r);
}
exports.isVehicleNodeIdValid = isVehicleNodeIdValid;
/**
 * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
 * End Function
 *
 * @param vehicle
 */
function isVehicleOnAllWheels(vehicle) {
    return _in(0xb104cd1b, 0xabf302e2, vehicle, _r);
}
exports.isVehicleOnAllWheels = isVehicleOnAllWheels;
function isVehicleParachuteDeployed(vehicle) {
    return _in(0x3de51e9c, 0x80b116cf, vehicle, _r);
}
exports.isVehicleParachuteDeployed = isVehicleParachuteDeployed;
/**
 * Returns true if the vehicle is being slipstreamed by another vehicle
 * @param vehicle
 */
function isVehicleProducingSlipStream(vehicle) {
    return _in(0x48c633e9, 0x4a8142a7, vehicle, _r);
}
exports.isVehicleProducingSlipStream = isVehicleProducingSlipStream;
function isVehicleRadioOn(vehicle) {
    return _in(0x0be4be94, 0x6463f917, vehicle, _r);
}
exports.isVehicleRadioOn = isVehicleRadioOn;
/**
 * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
 *
 * @Author Nac
 * @param vehicle
 */
function isVehicleSearchlightOn(vehicle) {
    return _in(0xc0f97fce, 0x55094987, vehicle, _r);
}
exports.isVehicleSearchlightOn = isVehicleSearchlightOn;
/**
 * Check if a vehicle seat is free.
 *
 * seatIndex  = -1 being the driver seat.
 * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
 * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
 * @param vehicle
 * @param seatIndex
 * @param isTaskRunning
 */
function isVehicleSeatFree(vehicle, seatIndex, isTaskRunning) {
    return _in(0x22ac59a8, 0x70e6a669, vehicle, seatIndex, isTaskRunning, _r);
}
exports.isVehicleSeatFree = isVehicleSeatFree;
function isVehicleSirenAudioOn(vehicle) {
    return _in(0xb5cc40fb, 0xcb586380, vehicle, _r);
}
exports.isVehicleSirenAudioOn = isVehicleSirenAudioOn;
function isVehicleSirenOn(vehicle) {
    return _in(0x4c9bf537, 0xbe2634b2, vehicle, _r);
}
exports.isVehicleSirenOn = isVehicleSirenOn;
/**
 * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
 * @param vehicle
 */
function isVehicleSprayable(vehicle) {
    return _in(0x8d474c8f, 0xaeff6cde, vehicle, _r);
}
exports.isVehicleSprayable = isVehicleSprayable;
/**
 * Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
 * @param vehicle
 */
function isVehicleStolen(vehicle) {
    return _in(0x4af9bd80, 0xeebeb453, vehicle, _r);
}
exports.isVehicleStolen = isVehicleStolen;
/**
 * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
 *
 * For some vehicles it returns true if the current speed is <= 0.00039999999.
 * @param vehicle
 */
function isVehicleStopped(vehicle) {
    return _in(0x5721b434, 0xad84d57a, vehicle, _r);
}
exports.isVehicleStopped = isVehicleStopped;
function isVehicleStoppedAtTrafficLights(vehicle) {
    return _in(0x2959f696, 0xae390a99, vehicle, _r);
}
exports.isVehicleStoppedAtTrafficLights = isVehicleStoppedAtTrafficLights;
function isVehicleStuckOnRoof(vehicle) {
    return _in(0xb497f06b, 0x288dcfdf, vehicle, _r);
}
exports.isVehicleStuckOnRoof = isVehicleStuckOnRoof;
/**
 * p1 can be anywhere from 0 to 3 in the scripts.
 * p2 being how long in milliseconds the vehicle has been stuck
 * @param vehicle
 * @param p1
 * @param ms
 */
function isVehicleStuckTimerUp(vehicle, p1, ms) {
    return _in(0x679be1da, 0xf71da874, vehicle, p1, ms, _r);
}
exports.isVehicleStuckTimerUp = isVehicleStuckTimerUp;
/**
 * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
 * completely - is to check if tire completely gone from rim.
 *
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param wheelID
 * @param completely
 */
function isVehicleTyreBurst(vehicle, wheelID, completely) {
    return _in(0xba291848, 0xa0815ca9, vehicle, wheelID, completely, _r);
}
exports.isVehicleTyreBurst = isVehicleTyreBurst;
/**
 * must be called after TRACK_VEHICLE_VISIBILITY
 *
 * it's not instant so probabilly must pass an 'update' to see correct result.
 * @param vehicle
 */
function isVehicleVisible(vehicle) {
    return _in(0xaa0a52d2, 0x4fb98293, vehicle, _r);
}
exports.isVehicleVisible = isVehicleVisible;
/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
function isVehicleWeaponDisabled(weaponHash, vehicle, owner) {
    return _in(0x563b65a6, 0x43ed072e, _ch(weaponHash), vehicle, owner, _r);
}
exports.isVehicleWeaponDisabled = isVehicleWeaponDisabled;
/**
 * This will return false if the window is broken, or rolled down.
 * Window indexes:
 * 0 = Front Right Window
 * 1 = Front Left Window
 * 2 = Back Right Window
 * 3 = Back Left Window
 *
 *
 * Those numbers go on for vehicles that have more than 4 doors with windows.
 * @param vehicle
 * @param windowIndex
 */
function isVehicleWindowIntact(vehicle, windowIndex) {
    return _in(0x46e571a0, 0xe20d01f1, vehicle, windowIndex, _r);
}
exports.isVehicleWindowIntact = isVehicleWindowIntact;
function isWantedAndHasBeenSeenByCops(player) {
    return _in(0x7e07c789, 0x25d5fd96, player, _r);
}
exports.isWantedAndHasBeenSeenByCops = isWantedAndHasBeenSeenByCops;
function isWarningMessageActive() {
    return _in(0xe18b138f, 0xabc53103, _r);
}
exports.isWarningMessageActive = isWarningMessageActive;
function isWarningMessageReadyForControl() {
    return _in(0xaf42195a, 0x42c63bba, _r);
}
exports.isWarningMessageReadyForControl = isWarningMessageReadyForControl;
function isWaypointActive() {
    return _in(0x1dd1f58f, 0x493f1da5, _r);
}
exports.isWaypointActive = isWaypointActive;
function isWaypointPlaybackGoingOnForPed(ped) {
    return _in(0xe03b3f2d, 0x3dc59b64, ped, _r);
}
exports.isWaypointPlaybackGoingOnForPed = isWaypointPlaybackGoingOnForPed;
function isWaypointPlaybackGoingOnForVehicle(vehicle) {
    return _in(0xf5134943, 0xea29868c, vehicle, _r);
}
exports.isWaypointPlaybackGoingOnForVehicle = isWaypointPlaybackGoingOnForVehicle;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
function isWeaponValid(weaponHash) {
    return _in(0x937c7116, 0x5cf334b3, _ch(weaponHash), _r);
}
exports.isWeaponValid = isWeaponValid;
/**
 * Gets whether the world point the calling script is registered to is within desired range of the player.
 */
function isWorldPointWithinBrainActivationRange() {
    return _in(0xc5042cc6, 0xf5e3d450, _r);
}
exports.isWorldPointWithinBrainActivationRange = isWorldPointWithinBrainActivationRange;
function isXbox360Version() {
    return _in(0xf6201b4d, 0xaf662a9d, _r);
}
exports.isXbox360Version = isXbox360Version;
function isXboxPlatform() {
    return _in(0x138679ca, 0x01e21f53, _r);
}
exports.isXboxPlatform = isXboxPlatform;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
function knockOffPedProp(ped, p1, p2, p3, p4) {
    return _in(0x6fd7816a, 0x36615f48, ped, p1, p2, p3, p4);
}
exports.knockOffPedProp = knockOffPedProp;
function knockPedOffVehicle(ped) {
    return _in(0x45bbcba7, 0x7c29a841, ped);
}
exports.knockPedOffVehicle = knockPedOffVehicle;
/**
 * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
 */
function landingScreenStartedEndUserBenchmark() {
    return _in(0x3bbbd13e, 0x5041a79e, _r);
}
exports.landingScreenStartedEndUserBenchmark = landingScreenStartedEndUserBenchmark;
function leaderboards2ReadByHandle() {
    const [retval, p0_out, p1_out] = _in(0xc30713a3, 0x83bfbf0e, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.leaderboards2ReadByHandle = leaderboards2ReadByHandle;
function leaderboards2ReadByPlaform(gamerHandleCsv, platformName) {
    const [retval, p0_out] = _in(0xf1ae5dcd, 0xbfca2721, _i, _ts(gamerHandleCsv), _ts(platformName), _r);
    return [retval, p0_out];
}
exports.leaderboards2ReadByPlaform = leaderboards2ReadByPlaform;
function leaderboards2ReadByRadius(p1) {
    const [retval, p0_out, p2_out] = _in(0x5ce587fb, 0x5a42c8c4, _i, p1, _i, _r);
    return [retval, p0_out, p2_out];
}
exports.leaderboards2ReadByRadius = leaderboards2ReadByRadius;
function leaderboards2ReadByRank(p1, p2) {
    const [retval, p0_out] = _in(0xba2c7db0, 0xc129449a, _i, p1, p2, _r);
    return [retval, p0_out];
}
exports.leaderboards2ReadByRank = leaderboards2ReadByRank;
function leaderboards2ReadByRow(p2, p4, p6) {
    const [retval, p0_out, p1_out, p3_out, p5_out] = _in(0xa9cdb1e3, 0xf0a49883, _i, _i, p2, _i, p4, _i, p6, _r);
    return [retval, p0_out, p1_out, p3_out, p5_out];
}
exports.leaderboards2ReadByRow = leaderboards2ReadByRow;
function leaderboards2ReadByScoreFloat(p1, p2) {
    const [retval, p0_out] = _in(0xe662c8b7, 0x59d08f3c, _i, _fv(p1), p2, _r);
    return [retval, p0_out];
}
exports.leaderboards2ReadByScoreFloat = leaderboards2ReadByScoreFloat;
function leaderboards2ReadByScoreInt(p1, p2) {
    const [retval, p0_out] = _in(0x7eec7e4f, 0x6984a16a, _i, p1, p2, _r);
    return [retval, p0_out];
}
exports.leaderboards2ReadByScoreInt = leaderboards2ReadByScoreInt;
function leaderboards2ReadFriendsByRow(p2, p3, p4, p5) {
    const [retval, p0_out, p1_out] = _in(0x918b1016, 0x66f9cb83, _i, _i, p2, p3, p4, p5, _r);
    return [retval, p0_out, p1_out];
}
exports.leaderboards2ReadFriendsByRow = leaderboards2ReadFriendsByRow;
function leaderboards2ReadGetRowDataEnd() {
    return _in(0x71b00805, 0x6e5692d6);
}
exports.leaderboards2ReadGetRowDataEnd = leaderboards2ReadGetRowDataEnd;
function leaderboards2ReadGetRowDataFloat(p0, p1) {
    return _in(0x38491439, 0xb6ba7f7d, p0, p1, _r, _rf);
}
exports.leaderboards2ReadGetRowDataFloat = leaderboards2ReadGetRowDataFloat;
function leaderboards2ReadGetRowDataInfo(p0, p1) {
    const [retval, p1_out] = _in(0x34770b9c, 0xe0e03b91, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.leaderboards2ReadGetRowDataInfo = leaderboards2ReadGetRowDataInfo;
function leaderboards2ReadGetRowDataInt(p0, p1) {
    return _in(0x88578f6e, 0xc36b4a3a, p0, p1, _r, _ri);
}
exports.leaderboards2ReadGetRowDataInt = leaderboards2ReadGetRowDataInt;
function leaderboards2ReadGetRowDataStart(p0) {
    const [retval, p0_out] = _in(0xa0f93d54, 0x65b3094d, _ii(p0), _r);
    return [retval, p0_out];
}
exports.leaderboards2ReadGetRowDataStart = leaderboards2ReadGetRowDataStart;
function leaderboards2ReadRankPrediction() {
    const [retval, p0_out, p1_out, p2_out] = _in(0xc38dc1e9, 0x0d22547c, _i, _i, _i, _r);
    return [retval, p0_out, p1_out, p2_out];
}
exports.leaderboards2ReadRankPrediction = leaderboards2ReadRankPrediction;
function leaderboards2WriteData(p0) {
    const [retval, p0_out] = _in(0xae220654, 0x5888ae49, _ii(p0), _r);
    return [retval, p0_out];
}
exports.leaderboards2WriteData = leaderboards2WriteData;
function leaderboards2WriteDataForEventType() {
    const [retval, p0_out, p1_out] = _in(0xc980e62e, 0x33df1d5c, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.leaderboards2WriteDataForEventType = leaderboards2WriteDataForEventType;
function leaderboardsCacheDataRow(p0) {
    const [retval, p0_out] = _in(0xb9bb18e2, 0xc40142ed, _ii(p0), _r);
    return [retval, p0_out];
}
exports.leaderboardsCacheDataRow = leaderboardsCacheDataRow;
function leaderboardsClearCacheData() {
    return _in(0xd4b02a6b, 0x476e1fdc);
}
exports.leaderboardsClearCacheData = leaderboardsClearCacheData;
function leaderboardsClearCacheDataId(p0) {
    return _in(0x8ec74ceb, 0x042e7cff, p0);
}
exports.leaderboardsClearCacheDataId = leaderboardsClearCacheDataId;
function leaderboardsGetCacheDataRow(p0, p1, p2) {
    const [retval, p2_out] = _in(0x9120e8db, 0xa3d69273, p0, p1, _ii(p2), _r);
    return [retval, p2_out];
}
exports.leaderboardsGetCacheDataRow = leaderboardsGetCacheDataRow;
function leaderboardsGetCacheExists(p0) {
    return _in(0x9c51349b, 0xe6cdfe2c, p0, _r);
}
exports.leaderboardsGetCacheExists = leaderboardsGetCacheExists;
function leaderboardsGetCacheNumberOfRows(p0) {
    return _in(0x58a651cd, 0x201d89ad, p0, _r, _ri);
}
exports.leaderboardsGetCacheNumberOfRows = leaderboardsGetCacheNumberOfRows;
function leaderboardsGetCacheTime(p0) {
    return _in(0xf04c1c27, 0xda35f6c8, p0, _r, _ri);
}
exports.leaderboardsGetCacheTime = leaderboardsGetCacheTime;
function leaderboardsGetColumnId(p0, p1, p2) {
    return _in(0xc4b5467a, 0x1886ea7e, p0, p1, p2, _r, _ri);
}
exports.leaderboardsGetColumnId = leaderboardsGetColumnId;
function leaderboardsGetColumnType(p0, p1, p2) {
    return _in(0xbf4fef46, 0xdb7894d3, p0, p1, p2, _r, _ri);
}
exports.leaderboardsGetColumnType = leaderboardsGetColumnType;
function leaderboardsGetNumberOfColumns(p0, p1) {
    return _in(0x117b4515, 0x6d7eff2e, p0, p1, _r, _ri);
}
exports.leaderboardsGetNumberOfColumns = leaderboardsGetNumberOfColumns;
function leaderboardsReadAnyPending() {
    return _in(0xa31fd151, 0x97b192bd, _r);
}
exports.leaderboardsReadAnyPending = leaderboardsReadAnyPending;
function leaderboardsReadClear(p0, p1, p2) {
    return _in(0x7cce5c73, 0x7a665701, p0, p1, p2, _r, _ri);
}
exports.leaderboardsReadClear = leaderboardsReadClear;
function leaderboardsReadClearAll() {
    return _in(0xa34cb6e6, 0xf0df4a0b, _r, _ri);
}
exports.leaderboardsReadClearAll = leaderboardsReadClearAll;
function leaderboardsReadPending(p0, p1, p2) {
    return _in(0xac392c84, 0x83342ac2, p0, p1, p2, _r);
}
exports.leaderboardsReadPending = leaderboardsReadPending;
function leaderboardsReadSuccessful(p0, p1, p2) {
    return _in(0x2fb19228, 0x983e832c, p0, p1, p2, _r);
}
exports.leaderboardsReadSuccessful = leaderboardsReadSuccessful;
function leaderboardsWriteAddColumn(p0, p1, p2) {
    return _in(0x0bca1d2c, 0x47b0d269, p0, p1, _fv(p2));
}
exports.leaderboardsWriteAddColumn = leaderboardsWriteAddColumn;
function leaderboardsWriteAddColumnLong(p0, p1, p2) {
    return _in(0x2e652486, 0x09523599, p0, p1, p2);
}
exports.leaderboardsWriteAddColumnLong = leaderboardsWriteAddColumnLong;
function linkNamedRendertarget(modelHash) {
    return _in(0xf6c09e27, 0x6aeb3f2d, _ch(modelHash));
}
exports.linkNamedRendertarget = linkNamedRendertarget;
/**
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param entity
 */
function linkStaticEmitterToEntity(emitterName, entity) {
    return _in(0x651d3228, 0x960d08af, _ts(emitterName), entity);
}
exports.linkStaticEmitterToEntity = linkStaticEmitterToEntity;
function loadAllObjectsNow() {
    return _in(0xbd6e8463, 0x2dd4cb3f);
}
exports.loadAllObjectsNow = loadAllObjectsNow;
function loadAllPathNodes(set) {
    return _in(0xc2ab6bfe, 0x34e92f8b, set, _r);
}
exports.loadAllPathNodes = loadAllPathNodes;
/**
 * The following cloudhats are useable:
 * altostratus
 * Cirrus
 * cirrocumulus
 * Clear 01
 * Cloudy 01
 * Contrails
 * Horizon
 * horizonband1
 * horizonband2
 * horizonband3
 * horsey
 * Nimbus
 * Puffs
 * RAIN
 * Snowy 01
 * Stormy 01
 * stratoscumulus
 * Stripey
 * shower
 * Wispy
 *
 * @param name
 * @param transitionTime
 */
function loadCloudHat(name, transitionTime) {
    return _in(0xfc4842a3, 0x4657bfcb, _ts(name), _fv(transitionTime));
}
exports.loadCloudHat = loadCloudHat;
/**
 * 0 - default
 * 1 - HeistIsland
 * @param waterType
 */
function loadGlobalWaterFile(waterType) {
    return _in(0x7e3f55ed, 0x251b76d3, waterType);
}
exports.loadGlobalWaterFile = loadGlobalWaterFile;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
function loadHighQualityPhoto(p0) {
    return _in(0xec72c258, 0x667be5ea, p0, _r);
}
exports.loadHighQualityPhoto = loadHighQualityPhoto;
function loadMissionCreatorPhoto(p1, p2, p3) {
    const [retval, p0_out] = _in(0x4862437a, 0x486f91b0, _i, p1, p2, p3, _r);
    return [retval, p0_out];
}
exports.loadMissionCreatorPhoto = loadMissionCreatorPhoto;
function loadMovieMeshSet(movieMeshSetName) {
    return _in(0xb6606445, 0x2270e8f1, _ts(movieMeshSetName), _r, _ri);
}
exports.loadMovieMeshSet = loadMovieMeshSet;
/**
 * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
 * @param ropeId
 * @param rope_preset
 */
function loadRopeData(ropeId, rope_preset) {
    return _in(0xcbb203c0, 0x4d1abd27, ropeId, _ts(rope_preset));
}
exports.loadRopeData = loadRopeData;
function loadScene(x, y, z) {
    return _in(0x4448eb75, 0xb4904bdb, _fv(x), _fv(y), _fv(z));
}
exports.loadScene = loadScene;
/**
 * Example:
 * AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
 *
 * All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
 *
 * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
 *
 * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param streamName
 * @param soundSet
 */
function loadStream(streamName, soundSet) {
    return _in(0x1f1f9571, 0x54ec51df, _ts(streamName), _ts(soundSet), _r);
}
exports.loadStream = loadStream;
/**
 * Example:
 * AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
 *
 * Only called a few times in the scripts.
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param streamName
 * @param startOffset
 * @param soundSet
 */
function loadStreamWithStartOffset(streamName, startOffset, soundSet) {
    return _in(0x59c16b79, 0xf53b3712, _ts(streamName), startOffset, _ts(soundSet), _r);
}
exports.loadStreamWithStartOffset = loadStreamWithStartOffset;
function lobbyAutoMultiplayerEvent() {
    return _in(0x8aa464d4, 0xe0f6accd, _r);
}
exports.lobbyAutoMultiplayerEvent = lobbyAutoMultiplayerEvent;
function lobbyAutoMultiplayerFreemode() {
    return _in(0xef7d17bc, 0x6c85264c, _r);
}
exports.lobbyAutoMultiplayerFreemode = lobbyAutoMultiplayerFreemode;
/**
 * This function is hard-coded to always return 0.
 */
function lobbyAutoMultiplayerMenu() {
    return _in(0xf2ca003f, 0x167e21d2, _r);
}
exports.lobbyAutoMultiplayerMenu = lobbyAutoMultiplayerMenu;
function lobbyAutoMultiplayerRandomJob() {
    return _in(0xc6dc8232, 0x53fbb366, _r);
}
exports.lobbyAutoMultiplayerRandomJob = lobbyAutoMultiplayerRandomJob;
function lobbySetAutoMpRandomJob(toggle) {
    return _in(0xc7e7181c, 0x09f33b69, toggle);
}
exports.lobbySetAutoMpRandomJob = lobbySetAutoMpRandomJob;
function lobbySetAutoMultiplayer(toggle) {
    return _in(0xb0c56bd3, 0xd808d863, toggle);
}
exports.lobbySetAutoMultiplayer = lobbySetAutoMultiplayer;
function lobbySetAutoMultiplayerEvent(toggle) {
    return _in(0xfc309e94, 0x546fcdb5, toggle);
}
exports.lobbySetAutoMultiplayerEvent = lobbySetAutoMultiplayerEvent;
/**
 * Possible return values: 0, 1, 2
 */
function localizationGetSystemDateType() {
    return _in(0xa8ae43ae, 0xc1a61314, _r, _ri);
}
exports.localizationGetSystemDateType = localizationGetSystemDateType;
/**
 * Same return values as GET_CURRENT_LANGUAGE
 */
function localizationGetSystemLanguage() {
    return _in(0x497420e0, 0x22796b3f, _r, _ri);
}
exports.localizationGetSystemLanguage = localizationGetSystemLanguage;
function lockDoorsWhenNoLongerNeeded(vehicle) {
    return _in(0xcfd778e7, 0x904c255e, vehicle);
}
exports.lockDoorsWhenNoLongerNeeded = lockDoorsWhenNoLongerNeeded;
/**
 * Locks the minimap to the specified angle in integer degrees.
 *
 * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
 * @param angle
 */
function lockMinimapAngle(angle) {
    return _in(0x299faebb, 0x108ae05b, angle);
}
exports.lockMinimapAngle = lockMinimapAngle;
/**
 * Locks the minimap to the specified world position.
 * @param x
 * @param y
 */
function lockMinimapPosition(x, y) {
    return _in(0x1279e861, 0xa329e73f, _fv(x), _fv(y));
}
exports.lockMinimapPosition = lockMinimapPosition;
/**
 * Disables the radio station (hides it from the radio wheel).
 * @param radioStationName
 * @param toggle
 */
function lockRadioStation(radioStationName, toggle) {
    return _in(0x477d9db4, 0x8f889591, _ts(radioStationName), toggle);
}
exports.lockRadioStation = lockRadioStation;
function lockRadioStationTrackList(radioStation, trackListName) {
    return _in(0xff5e5ea2, 0xdceeacf3, _ts(radioStation), _ts(trackListName));
}
exports.lockRadioStationTrackList = lockRadioStationTrackList;
function log10(value) {
    return _in(0xe816e655, 0xde37fe20, _fv(value), _r, _rf);
}
exports.log10 = log10;
function lowerConvertibleRoof(vehicle, instantlyLower) {
    return _in(0xded51f70, 0x3d0fa83d, vehicle, instantlyLower);
}
exports.lowerConvertibleRoof = lowerConvertibleRoof;
function lowerForkliftForks(forklift) {
    return _in(0x923a2933, 0x61df44e5, forklift);
}
exports.lowerForkliftForks = lowerForkliftForks;
/**
 * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
 * @param ped
 */
function makePedReload(ped) {
    return _in(0x20ae33f3, 0xac9c0033, ped, _r);
}
exports.makePedReload = makePedReload;
function markPedDecorationsAsClonedFromLocalPlayer(ped, p1) {
    return _in(0x2b694afc, 0xf64e6994, ped, p1);
}
exports.markPedDecorationsAsClonedFromLocalPlayer = markPedDecorationsAsClonedFromLocalPlayer;
function modifyVehicleTopSpeed(vehicle, value) {
    return _in(0x93a39963, 0x68c94158, vehicle, _fv(value));
}
exports.modifyVehicleTopSpeed = modifyVehicleTopSpeed;
/**
 * Sets the water height for a given position and radius.
 *
 * @param x
 * @param y
 * @param radius
 * @param height
 */
function modifyWater(x, y, radius, height) {
    return _in(0xc443fd75, 0x7c3ba637, _fv(x), _fv(y), _fv(radius), _fv(height));
}
exports.modifyWater = modifyWater;
function moveVehicleDecals(p0, p1) {
    return _in(0x84c8d7c2, 0xd30d3280, p0, p1);
}
exports.moveVehicleDecals = moveVehicleDecals;
/**
 * Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
 * @param toggle
 */
function mpTextChatDisable(toggle) {
    return _in(0x1db21a44, 0xb09e8ba3, toggle);
}
exports.mpTextChatDisable = mpTextChatDisable;
function mpTextChatIsTeamJob(p0) {
    return _in(0x7c226d53, 0x46d4d10a, p0);
}
exports.mpTextChatIsTeamJob = mpTextChatIsTeamJob;
function netGameserverBasketAddItem(quantity) {
    const [retval, itemData_out] = _in(0xf3098071, 0x8c8ed876, _i, quantity, _r);
    return [retval, itemData_out];
}
exports.netGameserverBasketAddItem = netGameserverBasketAddItem;
function netGameserverBasketApplyServerData(p0, p1) {
    const [retval, p1_out] = _in(0xe1a0450e, 0xd46a7812, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.netGameserverBasketApplyServerData = netGameserverBasketApplyServerData;
function netGameserverBasketEnd() {
    return _in(0xfa336e7f, 0x40c0a0d0, _r);
}
exports.netGameserverBasketEnd = netGameserverBasketEnd;
function netGameserverBasketIsActive() {
    return _in(0xa6556812, 0x1df2ea26, _r);
}
exports.netGameserverBasketIsActive = netGameserverBasketIsActive;
function netGameserverBasketIsFull() {
    return _in(0x27f76cc6, 0xc55ad30e, _r);
}
exports.netGameserverBasketIsFull = netGameserverBasketIsFull;
function netGameserverBasketStart(categoryHash, actionHash, flags) {
    const [retval, transactionId_out] = _in(0x279f08b1, 0xa4b29b7e, _i, _ch(categoryHash), _ch(actionHash), flags, _r);
    return [retval, transactionId_out];
}
exports.netGameserverBasketStart = netGameserverBasketStart;
function netGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags) {
    const [retval, transactionId_out] = _in(0x3c5fd37b, 0x5499582e, _i, _ch(categoryHash), _ch(itemHash), _ch(actionTypeHash), value, flags, _r);
    return [retval, transactionId_out];
}
exports.netGameserverBeginService = netGameserverBeginService;
function netGameserverCatalogIsValid() {
    return _in(0x3c448746, 0x1e9b0dcb, _r);
}
exports.netGameserverCatalogIsValid = netGameserverCatalogIsValid;
function netGameserverCatalogItemIsValid(name) {
    return _in(0xbd4d7eaf, 0x8a30f637, _ts(name), _r);
}
exports.netGameserverCatalogItemIsValid = netGameserverCatalogItemIsValid;
function netGameserverCatalogItemKeyIsValid(hash) {
    return _in(0x247f0f73, 0xa182ea0b, _ch(hash), _r);
}
exports.netGameserverCatalogItemKeyIsValid = netGameserverCatalogItemKeyIsValid;
function netGameserverCheckoutStart(transactionId) {
    return _in(0x39be7cea, 0x8d9cc8e6, transactionId, _r);
}
exports.netGameserverCheckoutStart = netGameserverCheckoutStart;
function netGameserverClearSession(p0) {
    return _in(0x74a0fd06, 0x88f1ee45, p0, _r);
}
exports.netGameserverClearSession = netGameserverClearSession;
function netGameserverDeleteCharacter(slot, transfer, reason) {
    return _in(0x51f1a8e4, 0x8c3d2f6d, slot, transfer, _ch(reason), _r);
}
exports.netGameserverDeleteCharacter = netGameserverDeleteCharacter;
function netGameserverDeleteCharacterGetStatus() {
    return _in(0x0a6d923d, 0xffc9bd89, _r, _ri);
}
exports.netGameserverDeleteCharacterGetStatus = netGameserverDeleteCharacterGetStatus;
function netGameserverDeleteSetTelemetryNonceSeed() {
    return _in(0x112cef16, 0x15a1139f, _r);
}
exports.netGameserverDeleteSetTelemetryNonceSeed = netGameserverDeleteSetTelemetryNonceSeed;
function netGameserverEndService(transactionId) {
    return _in(0xe2a99a9b, 0x524befff, transactionId, _r);
}
exports.netGameserverEndService = netGameserverEndService;
function netGameserverGetCatalogCloudCrc() {
    return _in(0x85f6c9ab, 0xa1de2bcf, _r, _ri);
}
exports.netGameserverGetCatalogCloudCrc = netGameserverGetCatalogCloudCrc;
/**
 * bool is always true in game scripts
 * @param itemHash
 * @param categoryHash
 * @param p2
 */
function netGameserverGetPrice(itemHash, categoryHash, p2) {
    return _in(0xc2700942, 0x2fcca88d, _ch(itemHash), _ch(categoryHash), p2, _r, _ri);
}
exports.netGameserverGetPrice = netGameserverGetPrice;
function netGameserverGetSessionStateAndStatus() {
    const [retval, p0_out, p1_out] = _in(0x897433d2, 0x92b44130, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.netGameserverGetSessionStateAndStatus = netGameserverGetSessionStateAndStatus;
function netGameserverInitSession() {
    return _in(0xe3e5a7c6, 0x4ca2c6ed, _r);
}
exports.netGameserverInitSession = netGameserverInitSession;
function netGameserverIsCatalogCurrent() {
    return _in(0x2b949a1e, 0x6aec8f6a, _r);
}
exports.netGameserverIsCatalogCurrent = netGameserverIsCatalogCurrent;
function netGameserverIsSessionRefreshPending() {
    return _in(0x810e8431, 0xc0614bf9, _r);
}
exports.netGameserverIsSessionRefreshPending = netGameserverIsSessionRefreshPending;
function netGameserverIsSessionValid(charSlot) {
    return _in(0xb24f0944, 0xda203d9e, charSlot, _r);
}
exports.netGameserverIsSessionValid = netGameserverIsSessionValid;
function netGameserverRefreshServerCatalog() {
    return _in(0x357b152e, 0xf96c30b6, _r);
}
exports.netGameserverRefreshServerCatalog = netGameserverRefreshServerCatalog;
function netGameserverRetrieveCatalogRefreshStatus(state) {
    const [retval, state_out] = _in(0xcf38dafb, 0xb49ede5e, _ii(state), _r);
    return [retval, state_out];
}
exports.netGameserverRetrieveCatalogRefreshStatus = netGameserverRetrieveCatalogRefreshStatus;
function netGameserverRetrieveInitSessionStatus(p0) {
    const [retval, p0_out] = _in(0x0395cb47, 0xb022e62c, _ii(p0), _r);
    return [retval, p0_out];
}
exports.netGameserverRetrieveInitSessionStatus = netGameserverRetrieveInitSessionStatus;
function netGameserverRetrieveSessionErrorCode(p0) {
    const [retval, p0_out] = _in(0xc13c38e4, 0x7ea5df31, _ii(p0), _r);
    return [retval, p0_out];
}
exports.netGameserverRetrieveSessionErrorCode = netGameserverRetrieveSessionErrorCode;
function netGameserverRetrieveStartSessionStatus(p0) {
    const [retval, p0_out] = _in(0x17091009, 0x3218c8b9, _ii(p0), _r);
    return [retval, p0_out];
}
exports.netGameserverRetrieveStartSessionStatus = netGameserverRetrieveStartSessionStatus;
function netGameserverSessionApplyReceivedData(charSlot) {
    return _in(0x2f41d51b, 0xa3bcd1f1, charSlot, _r);
}
exports.netGameserverSessionApplyReceivedData = netGameserverSessionApplyReceivedData;
function netGameserverSetTelemetryNonceSeed(p0) {
    return _in(0x9507d427, 0x1988e1ae, p0, _r);
}
exports.netGameserverSetTelemetryNonceSeed = netGameserverSetTelemetryNonceSeed;
function netGameserverStartSession(charSlot) {
    return _in(0xa135ac89, 0x2a58fc07, charSlot, _r);
}
exports.netGameserverStartSession = netGameserverStartSession;
function netGameserverStartSessionPending() {
    return _in(0x72eb7ba9, 0xb69bf6ab, _r);
}
exports.netGameserverStartSessionPending = netGameserverStartSessionPending;
/**
 * Note: only one of the arguments can be set to true at a time
 * @param inventory
 * @param playerbalance
 */
function netGameserverStartSessionRestart(inventory, playerbalance) {
    return _in(0x35a1b3e1, 0xd1315cfa, inventory, playerbalance, _r);
}
exports.netGameserverStartSessionRestart = netGameserverStartSessionRestart;
function netGameserverTransactionInProgress() {
    return _in(0x613f125b, 0xa3bd2eb9, _r);
}
exports.netGameserverTransactionInProgress = netGameserverTransactionInProgress;
function netGameserverTransferBankToWallet(charSlot, amount) {
    return _in(0xd47a2c1b, 0xa117471d, charSlot, amount, _r);
}
exports.netGameserverTransferBankToWallet = netGameserverTransferBankToWallet;
/**
 * Same as 0x350AA5EBC03D3BD2
 */
function netGameserverTransferBankToWalletGetStatus() {
    return _in(0x23789e77, 0x7d14ce44, _r, _ri);
}
exports.netGameserverTransferBankToWalletGetStatus = netGameserverTransferBankToWalletGetStatus;
/**
 * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
 */
function netGameserverTransferCashSetTelemetryNonceSeed() {
    return _in(0x498c1e05, 0xce5f7877, _r);
}
exports.netGameserverTransferCashSetTelemetryNonceSeed = netGameserverTransferCashSetTelemetryNonceSeed;
function netGameserverTransferWalletToBank(charSlot, amount) {
    return _in(0xc2f7fe53, 0x09181c7d, charSlot, amount, _r);
}
exports.netGameserverTransferWalletToBank = netGameserverTransferWalletToBank;
/**
 * Same as 0x23789E777D14CE44
 */
function netGameserverTransferWalletToBankGetStatus() {
    return _in(0x350aa5eb, 0xc03d3bd2, _r, _ri);
}
exports.netGameserverTransferWalletToBankGetStatus = netGameserverTransferWalletToBankGetStatus;
function netGameserverUseServerTransactions() {
    return _in(0x7d270879, 0x6355b20b, _r);
}
exports.netGameserverUseServerTransactions = netGameserverUseServerTransactions;
/**
 * gets the entity id of a network id
 * @param netHandle
 */
function netToEnt(netHandle) {
    return _in(0xbffeab45, 0xa9a9094a, netHandle, _r, _ri);
}
exports.netToEnt = netToEnt;
/**
 * gets the object id of a network id
 * @param netHandle
 */
function netToObj(netHandle) {
    return _in(0xd8515f5f, 0xea14cb3f, netHandle, _r, _ri);
}
exports.netToObj = netToObj;
/**
 * gets the ped id of a network id
 * @param netHandle
 */
function netToPed(netHandle) {
    return _in(0xbdcd95fc, 0x216a8b3e, netHandle, _r, _ri);
}
exports.netToPed = netToPed;
function netToVeh(netHandle) {
    return _in(0x367b9366, 0x10ba360c, netHandle, _r, _ri);
}
exports.netToVeh = netToVeh;
function networkAcceptPresenceInvite(p0) {
    return _in(0xfa91550d, 0xf9318b22, p0, _r);
}
exports.networkAcceptPresenceInvite = networkAcceptPresenceInvite;
function networkAccessTunableBool(tunableContext, tunableName) {
    return _in(0xaa6a47a5, 0x73abb75a, _ts(tunableContext), _ts(tunableName), _r);
}
exports.networkAccessTunableBool = networkAccessTunableBool;
function networkAccessTunableBoolHash(tunableContext, tunableName) {
    return _in(0xea16b69d, 0x93d71a45, _ch(tunableContext), _ch(tunableName), _r);
}
exports.networkAccessTunableBoolHash = networkAccessTunableBoolHash;
function networkAccessTunableBoolModificationDetectionRegistrationHash(contextHash, nameHash, value) {
    const [retval, value_out] = _in(0x697f5088, 0x61875b42, _ch(contextHash), _ch(nameHash), _i, _r);
    return [retval, value_out];
}
exports.networkAccessTunableBoolModificationDetectionRegistrationHash = networkAccessTunableBoolModificationDetectionRegistrationHash;
function networkAccessTunableFloat(tunableContext, tunableName, value) {
    const [retval, value_out] = _in(0xe5608ca7, 0xbc163a5f, _ts(tunableContext), _ts(tunableName), _fi(value), _r);
    return [retval, value_out];
}
exports.networkAccessTunableFloat = networkAccessTunableFloat;
function networkAccessTunableFloatHash(tunableContext, tunableName, value) {
    const [retval, value_out] = _in(0x972bc203, 0xbbc4c4d5, _ch(tunableContext), _ch(tunableName), _fi(value), _r);
    return [retval, value_out];
}
exports.networkAccessTunableFloatHash = networkAccessTunableFloatHash;
function networkAccessTunableFloatModificationDetectionRegistrationHash(contextHash, nameHash, value) {
    const [retval, value_out] = _in(0x1950dae9, 0x848a4739, _ch(contextHash), _ch(nameHash), _fi(value), _r);
    return [retval, value_out];
}
exports.networkAccessTunableFloatModificationDetectionRegistrationHash = networkAccessTunableFloatModificationDetectionRegistrationHash;
function networkAccessTunableInt(tunableContext, tunableName, value) {
    const [retval, value_out] = _in(0x8be1146d, 0xfd5d4468, _ts(tunableContext), _ts(tunableName), _ii(value), _r);
    return [retval, value_out];
}
exports.networkAccessTunableInt = networkAccessTunableInt;
function networkAccessTunableIntHash(tunableContext, tunableName, value) {
    const [retval, value_out] = _in(0x40fce03e, 0x50e8dbe8, _ch(tunableContext), _ch(tunableName), _ii(value), _r);
    return [retval, value_out];
}
exports.networkAccessTunableIntHash = networkAccessTunableIntHash;
function networkAccessTunableIntModificationDetectionRegistrationHash(contextHash, nameHash, value) {
    const [retval, value_out] = _in(0x3a8b55fd, 0xa4c8ddef, _ch(contextHash), _ch(nameHash), _ii(value), _r);
    return [retval, value_out];
}
exports.networkAccessTunableIntModificationDetectionRegistrationHash = networkAccessTunableIntModificationDetectionRegistrationHash;
function networkAccessTunableModificationDetectionClear() {
    return _in(0xfafc23ae, 0xe23868db, _r);
}
exports.networkAccessTunableModificationDetectionClear = networkAccessTunableModificationDetectionClear;
function networkActionFollowInvite() {
    return _in(0xc88156eb, 0xb786f8d5, _r);
}
exports.networkActionFollowInvite = networkActionFollowInvite;
function networkAddClientEntityAngledArea(x1, y1, z1, x2, y2, z2, radius) {
    return _in(0x2b1c6238, 0x23db0d9d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), _r, _ri);
}
exports.networkAddClientEntityAngledArea = networkAddClientEntityAngledArea;
function networkAddClientEntityArea(x1, y1, z1, x2, y2, z2) {
    return _in(0x25b99872, 0xd588a101, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri);
}
exports.networkAddClientEntityArea = networkAddClientEntityArea;
/**
 * To remove, see: NETWORK_REMOVE_ENTITY_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
function networkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width) {
    return _in(0x376c6375, 0xba60293a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r, _ri);
}
exports.networkAddEntityAngledArea = networkAddEntityAngledArea;
function networkAddEntityArea(x1, y1, z1, x2, y2, z2) {
    return _in(0x494c8fb2, 0x99290269, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri);
}
exports.networkAddEntityArea = networkAddEntityArea;
function networkAddEntityToSynchronisedScene(entity, netScene, animDict, animName, speed, speedMulitiplier, flag) {
    return _in(0xf2404d68, 0xcbc855fa, entity, netScene, _ts(animDict), _ts(animName), _fv(speed), _fv(speedMulitiplier), flag);
}
exports.networkAddEntityToSynchronisedScene = networkAddEntityToSynchronisedScene;
/**
 * ..
 * @param p0
 * @param p1
 */
function networkAddFollowers(p1) {
    return _in(0x236406f6, 0x0cf216d6, _i, p1);
}
exports.networkAddFollowers = networkAddFollowers;
function networkAddFriend(message) {
    const [retval, gamerHandle_out] = _in(0x8e02d739, 0x14064223, _i, _ts(message), _r);
    return [retval, gamerHandle_out];
}
exports.networkAddFriend = networkAddFriend;
function networkAddInvalidObjectModel(modelHash) {
    return _in(0x7f562dbc, 0x212e81f9, _ch(modelHash));
}
exports.networkAddInvalidObjectModel = networkAddInvalidObjectModel;
/**
 * Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
 * In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
 * @param netScene
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param flags
 */
function networkAddMapEntityToSynchronisedScene(netScene, modelHash, x, y, z, p5, p6, p7, p8, flags) {
    return _in(0x45f35c0e, 0xdc33b03b, netScene, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(p5), _ts(p6), _fv(p7), _fv(p8), flags);
}
exports.networkAddMapEntityToSynchronisedScene = networkAddMapEntityToSynchronisedScene;
function networkAddPedToSynchronisedScene(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    return _in(0x742a6374, 0x71bcecd9, ped, netScene, _ts(animDict), _ts(animnName), _fv(speed), _fv(speedMultiplier), duration, flag, _fv(playbackRate), p9);
}
exports.networkAddPedToSynchronisedScene = networkAddPedToSynchronisedScene;
function networkAddPedToSynchronisedSceneWithIk(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0xa5eafe47, 0x3e45c442, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
exports.networkAddPedToSynchronisedSceneWithIk = networkAddPedToSynchronisedSceneWithIk;
function networkAddSynchronisedSceneCamera(netScene, animDict, animName) {
    return _in(0xcf8bd3b0, 0xbd6d42d7, netScene, _ts(animDict), _ts(animName));
}
exports.networkAddSynchronisedSceneCamera = networkAddSynchronisedSceneCamera;
function networkAllowCloningWhileInTutorial(p0, p1) {
    return _in(0x0f1a4b45, 0xb7693b95, p0, p1);
}
exports.networkAllowCloningWhileInTutorial = networkAllowCloningWhileInTutorial;
/**
 * teamId must be < 3, instanceId must be < 64
 * @param teamId
 * @param instanceId
 */
function networkAllowGangToJoinTutorialSession(teamId, instanceId) {
    return _in(0xfb680d40, 0x3909dc70, teamId, instanceId);
}
exports.networkAllowGangToJoinTutorialSession = networkAllowGangToJoinTutorialSession;
function networkAllowInviteProcessInPlayerSwitch(p0) {
    return _in(0x6b07b9ce, 0x4d390375, p0);
}
exports.networkAllowInviteProcessInPlayerSwitch = networkAllowInviteProcessInPlayerSwitch;
function networkAllowRemoteAttachmentModification(entity, toggle) {
    return _in(0x267c78c6, 0x0e806b9a, entity, toggle);
}
exports.networkAllowRemoteAttachmentModification = networkAllowRemoteAttachmentModification;
function networkAllowRemoteSyncedSceneLocalPlayerRequests(p0) {
    return _in(0x144da052, 0x257ae7d8, p0);
}
exports.networkAllowRemoteSyncedSceneLocalPlayerRequests = networkAllowRemoteSyncedSceneLocalPlayerRequests;
function networkAmIBlockedByGamer(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x15337c7c, 0x268a27b2, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkAmIBlockedByGamer = networkAmIBlockedByGamer;
function networkAmIBlockedByPlayer(player) {
    return _in(0x87f395d9, 0x57d4353d, player, _r);
}
exports.networkAmIBlockedByPlayer = networkAmIBlockedByPlayer;
function networkAmIMutedByGamer(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xdf02a2c9, 0x3f1f26da, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkAmIMutedByGamer = networkAmIMutedByGamer;
function networkAmIMutedByPlayer(player) {
    return _in(0x9d6981df, 0xc91a8604, player, _r);
}
exports.networkAmIMutedByPlayer = networkAmIMutedByPlayer;
function networkApplyCachedPlayerHeadBlendData(ped, player) {
    return _in(0x99b72c7a, 0xbde5c910, ped, player, _r);
}
exports.networkApplyCachedPlayerHeadBlendData = networkApplyCachedPlayerHeadBlendData;
function networkApplyPedScarData(ped, p1) {
    return _in(0xe66c6902, 0x48f11150, ped, p1);
}
exports.networkApplyPedScarData = networkApplyPedScarData;
function networkApplyTransitionParameter(p0, p1) {
    return _in(0x521638ad, 0xa1ba0d18, p0, p1);
}
exports.networkApplyTransitionParameter = networkApplyTransitionParameter;
function networkApplyTransitionParameterString(p0, string, p2) {
    return _in(0xebefc2e7, 0x7084f599, p0, _ts(string), p2);
}
exports.networkApplyTransitionParameterString = networkApplyTransitionParameterString;
function networkApplyVoiceProximityOverride(x, y, z) {
    return _in(0xdbd20566, 0x52689917, _fv(x), _fv(y), _fv(z));
}
exports.networkApplyVoiceProximityOverride = networkApplyVoiceProximityOverride;
function networkAreHandlesTheSame() {
    const [retval, gamerHandle1_out, gamerHandle2_out] = _in(0x57dba049, 0xe110f217, _i, _i, _r);
    return [retval, gamerHandle1_out, gamerHandle2_out];
}
exports.networkAreHandlesTheSame = networkAreHandlesTheSame;
function networkArePlayersInSameTutorialSession(player, index) {
    return _in(0x9de986fc, 0x9a87c474, player, index, _r);
}
exports.networkArePlayersInSameTutorialSession = networkArePlayersInSameTutorialSession;
function networkAreSocialClubPoliciesCurrent() {
    return _in(0xba977557, 0x0db788cf, _r);
}
exports.networkAreSocialClubPoliciesCurrent = networkAreSocialClubPoliciesCurrent;
function networkAreTransitionDetailsValid(p0) {
    return _in(0x2615aa2a, 0x695930c1, p0, _r);
}
exports.networkAreTransitionDetailsValid = networkAreTransitionDetailsValid;
function networkAttachSynchronisedSceneToEntity(netScene, entity, bone) {
    return _in(0x478dcbd2, 0xa98b705a, netScene, entity, bone);
}
exports.networkAttachSynchronisedSceneToEntity = networkAttachSynchronisedSceneToEntity;
function networkBail(p0, p1, p2) {
    return _in(0x95914459, 0xa87eba28, p0, p1, p2);
}
exports.networkBail = networkBail;
function networkBailTransition(p0, p1, p2) {
    return _in(0xeaa57203, 0x6990cd1b, p0, p1, p2);
}
exports.networkBailTransition = networkBailTransition;
function networkBlockInvites(toggle) {
    return _in(0x34f9e904, 0x9454a7a0, toggle);
}
exports.networkBlockInvites = networkBlockInvites;
function networkBlockJoinQueueInvites(toggle) {
    return _in(0xcfeb8af2, 0x4fc1d0bb, toggle);
}
exports.networkBlockJoinQueueInvites = networkBlockJoinQueueInvites;
function networkBlockProxyMigrationBetweenTutorialSessions(p0) {
    return _in(0xfea7a352, 0xddb34d52, p0);
}
exports.networkBlockProxyMigrationBetweenTutorialSessions = networkBlockProxyMigrationBetweenTutorialSessions;
/**
 * p1 = 0 (always)
 * p2 = 1 (always)
 * @param cost
 * @param p1
 * @param p2
 * @param p3
 */
function networkBuyAirstrike(cost, p1, p2, p3) {
    return _in(0x763b4bd3, 0x05338f19, cost, p1, p2, p3);
}
exports.networkBuyAirstrike = networkBuyAirstrike;
function networkBuyBackupGang(p0, p1, p2, p3, npcProvider) {
    return _in(0xa3eddaa4, 0x2411d3b9, p0, p1, p2, p3, npcProvider);
}
exports.networkBuyBackupGang = networkBuyBackupGang;
/**
 * p1 is just an assumption. p2 was false and p3 was true.
 * @param amount
 * @param victim
 * @param p2
 * @param p3
 * @param p4
 */
function networkBuyBounty(amount, victim, p2, p3, p4) {
    return _in(0x7b718e19, 0x7453f2d9, amount, victim, p2, p3, p4);
}
exports.networkBuyBounty = networkBuyBounty;
function networkBuyContrabandMission(p0, p1, p2, p3, p4) {
    return _in(0x30fd873e, 0xce50e9f6, p0, p1, _ch(p2), p3, p4);
}
exports.networkBuyContrabandMission = networkBuyContrabandMission;
/**
 * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
 *
 * The last 3 parameters are,
 * 2,0,1 in the am_ferriswheel.c
 * 1,0,1 in the am_rollercoaster.c
 *
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
function networkBuyFairgroundRide(amount, p1, p2, p3, p4) {
    return _in(0x8a7b3952, 0xdd64d2b5, amount, p1, p2, p3, p4);
}
exports.networkBuyFairgroundRide = networkBuyFairgroundRide;
function networkBuyHealthcare(cost, p1, p2) {
    return _in(0xd9b067e5, 0x5253e3dd, cost, p1, p2);
}
exports.networkBuyHealthcare = networkBuyHealthcare;
/**
 * p1 = 0 (always)
 * p2 = 1 (always)
 * @param cost
 * @param p1
 * @param p2
 * @param p3
 */
function networkBuyHeliStrike(cost, p1, p2, p3) {
    return _in(0x81aa4610, 0xe3fd3a69, cost, p1, p2, p3);
}
exports.networkBuyHeliStrike = networkBuyHeliStrike;
function networkBuyItem(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9) {
    return _in(0xf0077c79, 0x7f66a355, amount, _ch(item), p2, p3, p4, _ts(item_name), p6, p7, p8, p9);
}
exports.networkBuyItem = networkBuyItem;
function networkBuyProperty(cost, propertyName, p2, p3) {
    return _in(0x650a08a2, 0x80870af6, cost, _ch(propertyName), p2, p3);
}
exports.networkBuyProperty = networkBuyProperty;
function networkBuySmokes(p0, p1, p2) {
    return _in(0x75af80e6, 0x1248eebd, p0, p1, p2);
}
exports.networkBuySmokes = networkBuySmokes;
function networkCacheLocalPlayerHeadBlendData() {
    return _in(0xbd0be0bf, 0xc927eac1);
}
exports.networkCacheLocalPlayerHeadBlendData = networkCacheLocalPlayerHeadBlendData;
/**
 * 11 - Need to download tunables.
 * 12 - Need to download background script.
 *
 * Returns 1 if the multiplayer is loaded, otherwhise 0.
 * @param loadingState
 */
function networkCanAccessMultiplayer(loadingState) {
    const [retval, loadingState_out] = _in(0xaf50da1a, 0x3f8b1ba4, _ii(loadingState), _r);
    return [retval, loadingState_out];
}
exports.networkCanAccessMultiplayer = networkCanAccessMultiplayer;
function networkCanBail() {
    return _in(0x580ce443, 0x8479cc61, _r);
}
exports.networkCanBail = networkCanBail;
function networkCanBet(amount) {
    return _in(0x3a54e336, 0x60ded67f, amount, _r);
}
exports.networkCanBet = networkCanBet;
function networkCanCommunicateWithGamer(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x8f5d1ad8, 0x32aeb06c, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanCommunicateWithGamer = networkCanCommunicateWithGamer;
function networkCanEnterMultiplayer() {
    return _in(0x7e782a91, 0x0c362c25, _r);
}
exports.networkCanEnterMultiplayer = networkCanEnterMultiplayer;
function networkCanGamerPlayMultiplayerWithMe(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x135f9b7b, 0x7add2185, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanGamerPlayMultiplayerWithMe = networkCanGamerPlayMultiplayerWithMe;
function networkCanPlayMultiplayerWithGamer(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x07dd29d5, 0xe22763f1, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanPlayMultiplayerWithGamer = networkCanPlayMultiplayerWithGamer;
function networkCanQueueForPreviousSessionJoin() {
    return _in(0x2bf66d2e, 0x7414f686, _r);
}
exports.networkCanQueueForPreviousSessionJoin = networkCanQueueForPreviousSessionJoin;
function networkCanReceiveLocalInvite(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x421e34c5, 0x5f125964, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanReceiveLocalInvite = networkCanReceiveLocalInvite;
function networkCanReceivePlayerCash(p0, p1, p2, p3) {
    return _in(0x5d17be59, 0xd2123284, p0, p1, p2, p3, _r);
}
exports.networkCanReceivePlayerCash = networkCanReceivePlayerCash;
function networkCanSendLocalInvite(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x021abcbd, 0x98ec4320, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanSendLocalInvite = networkCanSendLocalInvite;
function networkCanSessionEnd() {
    return _in(0x4eebc369, 0x4e49c572, _r);
}
exports.networkCanSessionEnd = networkCanSessionEnd;
function networkCanSetWaypoint() {
    return _in(0xc927ec22, 0x9934af60, _r);
}
exports.networkCanSetWaypoint = networkCanSetWaypoint;
function networkCanShareJobCash() {
    return _in(0x1c247330, 0x1b1c66ba, _r);
}
exports.networkCanShareJobCash = networkCanShareJobCash;
function networkCanSpendMoney(p0, p1, p2, p3, p4, p5) {
    return _in(0xab3caa6b, 0x422164da, p0, p1, p2, p3, p4, p5, _r);
}
exports.networkCanSpendMoney = networkCanSpendMoney;
function networkCanSpendMoney2(p0, p1, p2, p3, p5, p6) {
    const [retval, p4_out] = _in(0x7303e27c, 0xc6532080, p0, p1, p2, p3, _i, p5, p6, _r);
    return [retval, p4_out];
}
exports.networkCanSpendMoney2 = networkCanSpendMoney2;
function networkCanTextChatWithGamer(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xa150a4f0, 0x65806b1f, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanTextChatWithGamer = networkCanTextChatWithGamer;
function networkCanViewGamerUserContent(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xb57a4954, 0x5ba53ce7, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCanViewGamerUserContent = networkCanViewGamerUserContent;
function networkCancelRespawnSearch() {
    return _in(0xfb8f2a6f, 0x3df08cbe);
}
exports.networkCancelRespawnSearch = networkCancelRespawnSearch;
function networkCancelTransitionMatchmaking() {
    return _in(0x023782ef, 0xc70585ee);
}
exports.networkCancelTransitionMatchmaking = networkCancelTransitionMatchmaking;
/**
 * Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
 * @param p0
 */
function networkCapEmptyCrowdingVehiclesRemoval(p0) {
    return _in(0xa4a9a4c4, 0x0e615885, p0);
}
exports.networkCapEmptyCrowdingVehiclesRemoval = networkCapEmptyCrowdingVehiclesRemoval;
function networkCasinoBuyChips(p0, p1) {
    return _in(0x3bd10147, 0x1c7f9eec, p0, p1, _r);
}
exports.networkCasinoBuyChips = networkCasinoBuyChips;
/**
 * GTAO_CASINO_HOUSE
 * GTAO_CASINO_INSIDETRACK
 * GTAO_CASINO_LUCKYWHEEL
 * GTAO_CASINO_BLACKJACK
 * GTAO_CASINO_ROULETTE
 * GTAO_CASINO_SLOTS
 * GTAO_CASINO_PURCHASE_CHIPS
 *
 * NETWORK_C*
 * @param hash
 */
function networkCasinoCanBet(hash) {
    return _in(0x158c16f5, 0xe4cf41f8, _ch(hash), _r);
}
exports.networkCasinoCanBet = networkCasinoCanBet;
function networkCasinoCanBetAmount(p0) {
    return _in(0xf62f6d95, 0x28358fe4, p0, _r);
}
exports.networkCasinoCanBetAmount = networkCasinoCanBetAmount;
function networkCasinoCanBetPvc() {
    return _in(0x394dcdb9, 0xe836b7a9, _r);
}
exports.networkCasinoCanBetPvc = networkCasinoCanBetPvc;
function networkCasinoCanBuyChipsPvc() {
    return _in(0x8968d4d8, 0xc6c40c11, _r);
}
exports.networkCasinoCanBuyChipsPvc = networkCasinoCanBuyChipsPvc;
function networkCasinoSellChips(p0, p1) {
    return _in(0xed44897c, 0xb336f480, p0, p1, _r);
}
exports.networkCasinoSellChips = networkCasinoSellChips;
function networkChangeTransitionSlots(p0, p1) {
    return _in(0xeeeda5e6, 0xd7080987, p0, p1);
}
exports.networkChangeTransitionSlots = networkChangeTransitionSlots;
function networkCheckCommunicationPrivileges(p0, p1, p2) {
    return _in(0x83f28ce4, 0x9fbbffba, p0, p1, p2, _r);
}
exports.networkCheckCommunicationPrivileges = networkCheckCommunicationPrivileges;
function networkCheckDataManagerForHandle(p0, gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x4ad490ae, 0x1536933b, p0, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCheckDataManagerForHandle = networkCheckDataManagerForHandle;
function networkCheckDataManagerSucceededForHandle(p0, gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x44b37cdc, 0xae765aae, p0, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkCheckDataManagerSucceededForHandle = networkCheckDataManagerSucceededForHandle;
function networkCheckOnlinePrivileges(p0, p1) {
    return _in(0x78321bea, 0x235fd8cd, p0, p1, _r);
}
exports.networkCheckOnlinePrivileges = networkCheckOnlinePrivileges;
function networkCheckPrivileges(p0, p1, p2) {
    return _in(0x0cf6cc51, 0xaa18f0f8, p0, p1, p2, _r);
}
exports.networkCheckPrivileges = networkCheckPrivileges;
/**
 * Returns true if profile setting 901 is set to true and sets it to false.
 */
function networkCheckRosLinkWentdownNotNet() {
    return _in(0x60edd13e, 0xb3ac1ff3, _r);
}
exports.networkCheckRosLinkWentdownNotNet = networkCheckRosLinkWentdownNotNet;
function networkCheckTextCommunicationPrivileges(p0, p1, p2) {
    return _in(0x07eab372, 0xc8841d99, p0, p1, p2, _r);
}
exports.networkCheckTextCommunicationPrivileges = networkCheckTextCommunicationPrivileges;
function networkCheckUserContentPrivileges(p0, p1, p2) {
    return _in(0x595f0286, 0x98072dd9, p0, p1, p2, _r);
}
exports.networkCheckUserContentPrivileges = networkCheckUserContentPrivileges;
function networkClanAnyDownloadMembershipPending() {
    return _in(0xb3f64a6a, 0x91432477, _r);
}
exports.networkClanAnyDownloadMembershipPending = networkClanAnyDownloadMembershipPending;
function networkClanCrewinfoGetCrewranktitle(p0, p1) {
    return _in(0x2b51edbe, 0xfc301339, p0, _ts(p1), _r);
}
exports.networkClanCrewinfoGetCrewranktitle = networkClanCrewinfoGetCrewranktitle;
/**
 * Only documented...
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 */
function networkClanCrewinfoGetStringValue(animDict, animName) {
    return _in(0x729e3401, 0xf0430686, _ts(animDict), _ts(animName), _r);
}
exports.networkClanCrewinfoGetStringValue = networkClanCrewinfoGetStringValue;
function networkClanDownloadMembership(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xa989044e, 0x70010abe, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkClanDownloadMembership = networkClanDownloadMembership;
function networkClanDownloadMembershipPending(p0) {
    const [retval, p0_out] = _in(0x5b9e023d, 0xc6ebedc0, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkClanDownloadMembershipPending = networkClanDownloadMembershipPending;
function networkClanGetEmblemTxdName(txdName) {
    const [retval, netHandle_out] = _in(0x5835d9cd, 0x92e83184, _i, _ts(txdName), _r);
    return [retval, netHandle_out];
}
exports.networkClanGetEmblemTxdName = networkClanGetEmblemTxdName;
function networkClanGetLocalMembershipsCount() {
    return _in(0x1f471b79, 0xacc90bef, _r, _ri);
}
exports.networkClanGetLocalMembershipsCount = networkClanGetLocalMembershipsCount;
function networkClanGetMembership(p2) {
    const [retval, p0_out, clanMembership_out] = _in(0xc8bc2011, 0xf67b3411, _i, _i, p2, _r);
    return [retval, p0_out, clanMembership_out];
}
exports.networkClanGetMembership = networkClanGetMembership;
function networkClanGetMembershipCount(p0) {
    const [retval, p0_out] = _in(0xaab11f6c, 0x4adbc2c1, _ii(p0), _r, _ri);
    return [retval, p0_out];
}
exports.networkClanGetMembershipCount = networkClanGetMembershipCount;
function networkClanGetMembershipDesc(p1) {
    const [retval, memberDesc_out] = _in(0x48de78af, 0x2c8885b8, _i, p1, _r);
    return [retval, memberDesc_out];
}
exports.networkClanGetMembershipDesc = networkClanGetMembershipDesc;
function networkClanGetMembershipValid(p1) {
    const [retval, p0_out] = _in(0x48a59cf8, 0x8d43df0e, _i, p1, _r);
    return [retval, p0_out];
}
exports.networkClanGetMembershipValid = networkClanGetMembershipValid;
/**
 * bufferSize is 35 in the scripts.
 * @param clanDesc
 * @param bufferSize
 * @param formattedTag
 */
function networkClanGetUiFormattedTag(bufferSize, formattedTag) {
    return _in(0xf4535242, 0x6ff3a4f0, _i, bufferSize, _ts(formattedTag));
}
exports.networkClanGetUiFormattedTag = networkClanGetUiFormattedTag;
function networkClanHasCrewinfoMetadataBeenReceived() {
    return _in(0xc32ea7a2, 0xf6ca7557, _r);
}
exports.networkClanHasCrewinfoMetadataBeenReceived = networkClanHasCrewinfoMetadataBeenReceived;
function networkClanIsEmblemReady(p0, p1) {
    const [retval, p1_out] = _in(0xa134777f, 0xf7f33331, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.networkClanIsEmblemReady = networkClanIsEmblemReady;
/**
 * bufferSize is 35 in the scripts.
 * @param clanDesc
 * @param bufferSize
 */
function networkClanIsRockstarClan(bufferSize) {
    const [retval, clanDesc_out] = _in(0x7543bb43, 0x9f63792b, _i, bufferSize, _r);
    return [retval, clanDesc_out];
}
exports.networkClanIsRockstarClan = networkClanIsRockstarClan;
function networkClanJoin(clanDesc) {
    return _in(0x9faaa4f4, 0xfc71f87f, clanDesc, _r);
}
exports.networkClanJoin = networkClanJoin;
/**
 * bufferSize is 35 in the scripts.
 *
 * bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
 *
 * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
 *
 * https://pastebin.com/cSZniHak
 * @param clanDesc
 * @param bufferSize
 * @param gamerHandle
 */
function networkClanPlayerGetDesc(bufferSize) {
    const [retval, clanDesc_out, gamerHandle_out] = _in(0xeee6eacb, 0xe8874fba, _i, bufferSize, _i, _r);
    return [retval, clanDesc_out, gamerHandle_out];
}
exports.networkClanPlayerGetDesc = networkClanPlayerGetDesc;
function networkClanPlayerIsActive(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xb124b57f, 0x571d8f18, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkClanPlayerIsActive = networkClanPlayerIsActive;
function networkClanReleaseEmblem(p0) {
    return _in(0x113e6e3e, 0x50e286b0, p0);
}
exports.networkClanReleaseEmblem = networkClanReleaseEmblem;
function networkClanRemoteMembershipsAreInCache(p0) {
    const [retval, p0_out] = _in(0xbb6e6fee, 0x99d866b2, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkClanRemoteMembershipsAreInCache = networkClanRemoteMembershipsAreInCache;
function networkClanRequestEmblem(p0) {
    return _in(0x13518ff1, 0xc6b28938, p0, _r);
}
exports.networkClanRequestEmblem = networkClanRequestEmblem;
function networkClanServiceIsValid() {
    return _in(0x579cced0, 0x265d4896, _r);
}
exports.networkClanServiceIsValid = networkClanServiceIsValid;
function networkClearCharacterWallet(characterSlot) {
    return _in(0xa921ded1, 0x5fdf28f5, characterSlot);
}
exports.networkClearCharacterWallet = networkClearCharacterWallet;
function networkClearClockTimeOverride() {
    return _in(0xd972df67, 0x326f966e);
}
exports.networkClearClockTimeOverride = networkClearClockTimeOverride;
function networkClearFollowInvite() {
    return _in(0x439bfde3, 0xcd0610f6, _r);
}
exports.networkClearFollowInvite = networkClearFollowInvite;
function networkClearFollowers() {
    return _in(0x058f43ec, 0x59a8631a);
}
exports.networkClearFollowers = networkClearFollowers;
function networkClearFoundGamers() {
    return _in(0x6d14ccee, 0x1b40381a);
}
exports.networkClearFoundGamers = networkClearFoundGamers;
function networkClearGetGamerStatus() {
    return _in(0x86e0660e, 0x4f5c956d);
}
exports.networkClearGetGamerStatus = networkClearGetGamerStatus;
function networkClearGroupActivity() {
    return _in(0x18886949, 0x23ef4591);
}
exports.networkClearGroupActivity = networkClearGroupActivity;
function networkClearInvalidObjectModels() {
    return _in(0x03b2f03a, 0x53d85e41);
}
exports.networkClearInvalidObjectModels = networkClearInvalidObjectModels;
function networkClearOfflineInvitePending() {
    return _in(0x140e6a44, 0x870a11ce);
}
exports.networkClearOfflineInvitePending = networkClearOfflineInvitePending;
function networkClearPropertyId() {
    return _in(0xc2b82527, 0xca77053e);
}
exports.networkClearPropertyId = networkClearPropertyId;
function networkClearQueuedJoinRequest() {
    return _in(0x6ce50e47, 0xf5543d0c);
}
exports.networkClearQueuedJoinRequest = networkClearQueuedJoinRequest;
function networkClearTransitionCreatorHandle() {
    return _in(0xfb327222, 0x9a82c759);
}
exports.networkClearTransitionCreatorHandle = networkClearTransitionCreatorHandle;
function networkClearVoiceChannel() {
    return _in(0xe036a705, 0xf989e049);
}
exports.networkClearVoiceChannel = networkClearVoiceChannel;
function networkClearVoiceProximityOverride() {
    return _in(0xf0375569, 0x6450470c);
}
exports.networkClearVoiceProximityOverride = networkClearVoiceProximityOverride;
function networkCloseTransitionMatchmaking() {
    return _in(0x43f4dba6, 0x9710e01e);
}
exports.networkCloseTransitionMatchmaking = networkCloseTransitionMatchmaking;
function networkConcealEntity(entity, toggle) {
    return _in(0x1632be0a, 0xc1e62876, entity, toggle);
}
exports.networkConcealEntity = networkConcealEntity;
function networkConcealPlayer(player, toggle, p2) {
    return _in(0xbbdf0662, 0x52829606, player, toggle, p2);
}
exports.networkConcealPlayer = networkConcealPlayer;
function networkCreateSynchronisedScene(x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11) {
    return _in(0x7cd6bc4c, 0x2bbdd526, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), rotationOrder, useOcclusionPortal, looped, _fv(p9), _fv(animTime), _fv(p11), _r, _ri);
}
exports.networkCreateSynchronisedScene = networkCreateSynchronisedScene;
function networkDeductCash(amount, p1, p2, p3, p4, p5) {
    return _in(0x18b7ae22, 0x4b087e26, amount, _ts(p1), _ts(p2), p3, p4, p5);
}
exports.networkDeductCash = networkDeductCash;
/**
 * Does nothing (it's a nullsub).
 */
function networkDeferCashTransactionsUntilShopSave() {
    return _in(0xcd0f5b5d, 0x932ae473);
}
exports.networkDeferCashTransactionsUntilShopSave = networkDeferCashTransactionsUntilShopSave;
/**
 * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
 * @param characterSlot
 * @param p1
 * @param p2
 */
function networkDeleteCharacter(characterSlot, p1, p2) {
    return _in(0x05a50af3, 0x8947eb8d, characterSlot, p1, p2);
}
exports.networkDeleteCharacter = networkDeleteCharacter;
function networkDidFindGamersSucceed() {
    return _in(0xf9b83b77, 0x929d8863, _r);
}
exports.networkDidFindGamersSucceed = networkDidFindGamersSucceed;
function networkDidGetGamerStatusSucceed() {
    return _in(0x5ae17c6b, 0x0134b7f1, _r);
}
exports.networkDidGetGamerStatusSucceed = networkDidGetGamerStatusSucceed;
function networkDisableInvincibleFlashing(player, toggle) {
    return _in(0x9dd368bf, 0x06983221, player, toggle);
}
exports.networkDisableInvincibleFlashing = networkDisableInvincibleFlashing;
function networkDisableLeaveRemotePedBehind(toggle) {
    return _in(0xc505036a, 0x35afd01b, toggle);
}
exports.networkDisableLeaveRemotePedBehind = networkDisableLeaveRemotePedBehind;
function networkDisableProximityMigration(netID) {
    return _in(0x407091cf, 0x6037118e, netID);
}
exports.networkDisableProximityMigration = networkDisableProximityMigration;
function networkDisableRealtimeMultiplayer() {
    return _in(0x236905c7, 0x00fdb54d);
}
exports.networkDisableRealtimeMultiplayer = networkDisableRealtimeMultiplayer;
function networkDisableVoiceBandwidthRestriction(player) {
    return _in(0xca575c39, 0x1fea25cc, player);
}
exports.networkDisableVoiceBandwidthRestriction = networkDisableVoiceBandwidthRestriction;
/**
 * Hardcoded to return -1.
 * @param p0
 * @param p1
 */
function networkDisplaynamesFromHandlesStart(p1) {
    const [retval, p0_out] = _in(0xd66c9e72, 0xb3cc4982, _i, p1, _r, _ri);
    return [retval, p0_out];
}
exports.networkDisplaynamesFromHandlesStart = networkDisplaynamesFromHandlesStart;
function networkDoTransitionQuickmatch(p0, p1, p2, p3, p4, p5) {
    return _in(0x71fb0ebc, 0xd4915d56, p0, p1, p2, p3, p4, p5, _r);
}
exports.networkDoTransitionQuickmatch = networkDoTransitionQuickmatch;
function networkDoTransitionQuickmatchAsync(p0, p1, p2, p3, p4, p5) {
    return _in(0xa091a5e4, 0x4f0072e5, p0, p1, p2, p3, p4, p5, _r);
}
exports.networkDoTransitionQuickmatchAsync = networkDoTransitionQuickmatchAsync;
function networkDoTransitionQuickmatchWithGroup(p0, p1, p2, p3, p5, p6, p7) {
    const [retval, p4_out] = _in(0x9c4ab584, 0x91fdc98a, p0, p1, p2, p3, _i, p5, p6, p7, _r);
    return [retval, p4_out];
}
exports.networkDoTransitionQuickmatchWithGroup = networkDoTransitionQuickmatchWithGroup;
/**
 * p2 is true 3/4 of the occurrences I found.
 * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
 * @param p0
 * @param p1
 * @param p2
 * @param players
 * @param p4
 */
function networkDoTransitionToFreemode(p1, p2, players, p4) {
    const [retval, p0_out] = _in(0x3aad8b2f, 0xca1e289f, _i, p1, p2, players, p4, _r);
    return [retval, p0_out];
}
exports.networkDoTransitionToFreemode = networkDoTransitionToFreemode;
function networkDoTransitionToGame(p0, maxPlayers) {
    return _in(0x3e9bb381, 0x02a589b0, p0, maxPlayers, _r);
}
exports.networkDoTransitionToGame = networkDoTransitionToGame;
function networkDoTransitionToNewFreemode(p1, players, p3, p4, p5) {
    const [retval, p0_out] = _in(0x9e80a5ba, 0x8109f974, _i, p1, players, p3, p4, p5, _r);
    return [retval, p0_out];
}
exports.networkDoTransitionToNewFreemode = networkDoTransitionToNewFreemode;
function networkDoTransitionToNewGame(p0, maxPlayers, p2) {
    return _in(0x4665f51e, 0xfed00034, p0, maxPlayers, p2, _r);
}
exports.networkDoTransitionToNewGame = networkDoTransitionToNewGame;
function networkDoesEntityExistWithNetworkId(netId) {
    return _in(0x18a47d07, 0x4708fd68, netId, _r);
}
exports.networkDoesEntityExistWithNetworkId = networkDoesEntityExistWithNetworkId;
function networkDoesNetworkIdExist(netId) {
    return _in(0x38ce16c9, 0x6bd11344, netId, _r);
}
exports.networkDoesNetworkIdExist = networkDoesNetworkIdExist;
function networkDoesTunableExist(tunableContext, tunableName) {
    return _in(0x85e5f8b9, 0xb898b20a, _ts(tunableContext), _ts(tunableName), _r);
}
exports.networkDoesTunableExist = networkDoesTunableExist;
function networkDoesTunableExistHash(tunableContext, tunableName) {
    return _in(0xe4e53e14, 0x19d81127, _ch(tunableContext), _ch(tunableName), _r);
}
exports.networkDoesTunableExistHash = networkDoesTunableExistHash;
/**
 * Does nothing (it's a nullsub).
 */
function networkDumpNetIfConfig() {
    return _in(0xaedf1bc1, 0xc133d6e3);
}
exports.networkDumpNetIfConfig = networkDumpNetIfConfig;
function networkEarnAgency(p0, p1, p2, p3) {
    return _in(0x0cb1be06, 0x33c024a8, p0, p1, p2, p3);
}
exports.networkEarnAgency = networkEarnAgency;
function networkEarnAgencyContract(p0, p1) {
    return _in(0x38482ad4, 0x9cb905c7, p0, p1);
}
exports.networkEarnAgencyContract = networkEarnAgencyContract;
function networkEarnAgencyPhone(p0, p1, p2) {
    return _in(0xe29f3d5f, 0xa63b1b82, p0, p1, p2);
}
exports.networkEarnAgencyPhone = networkEarnAgencyPhone;
function networkEarnAgencySafe(p0) {
    return _in(0x663b4b9d, 0x11742a12, p0);
}
exports.networkEarnAgencySafe = networkEarnAgencySafe;
function networkEarnArcade(p0, p1, p2, p3, p4) {
    return _in(0xd29334ed, 0x1a256dbf, p0, p1, p2, p3, p4);
}
exports.networkEarnArcade = networkEarnArcade;
function networkEarnArenaCareerProgression(amount, p1) {
    return _in(0x0f99f70c, 0x61f14619, amount, p1);
}
exports.networkEarnArenaCareerProgression = networkEarnArenaCareerProgression;
function networkEarnArenaSkillLevelProgression(amount, p1) {
    return _in(0xe08256f9, 0x72c7bb2c, amount, p1);
}
exports.networkEarnArenaSkillLevelProgression = networkEarnArenaSkillLevelProgression;
function networkEarnArenaWar(amount, p1, p2, p3) {
    return _in(0x631f1cb8, 0xfb4130aa, amount, p1, p2, p3);
}
exports.networkEarnArenaWar = networkEarnArenaWar;
function networkEarnArenaWarAssassinateTarget(amount) {
    return _in(0x5e7ae8aa, 0xbe8b7c0d, amount);
}
exports.networkEarnArenaWarAssassinateTarget = networkEarnArenaWarAssassinateTarget;
function networkEarnArenaWarEventCargo(amount) {
    return _in(0xa8295906, 0x2361b259, amount);
}
exports.networkEarnArenaWarEventCargo = networkEarnArenaWarEventCargo;
function networkEarnAssassinateTargetKilled(amount) {
    return _in(0xfa700d8a, 0x9905f78a, amount);
}
exports.networkEarnAssassinateTargetKilled = networkEarnAssassinateTargetKilled;
function networkEarnAutoshopBusiness(p0, p1, p2) {
    return _in(0x36a7fd5a, 0x7194b03e, p0, p1, p2);
}
exports.networkEarnAutoshopBusiness = networkEarnAutoshopBusiness;
function networkEarnAutoshopIncome(p0, p1) {
    return _in(0xc66d1cf9, 0x9ed7fe25, p0, p1);
}
exports.networkEarnAutoshopIncome = networkEarnAutoshopIncome;
/**
 * Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS
 * @param amount
 * @param p1
 */
function networkEarnAvenger(amount, p1) {
    return _in(0x55f006b9, 0xd4a46c1d, amount, p1);
}
exports.networkEarnAvenger = networkEarnAvenger;
function networkEarnAwardAcidLab(p0, p1) {
    return _in(0xd1a81657, 0x67ad2d23, p0, p1);
}
exports.networkEarnAwardAcidLab = networkEarnAwardAcidLab;
function networkEarnAwardContract(p0, p1) {
    return _in(0x146d4eb6, 0xd22a403f, p0, p1);
}
exports.networkEarnAwardContract = networkEarnAwardContract;
function networkEarnAwardDailyStash(p0, p1) {
    return _in(0xc30650fa, 0x74a19d02, p0, p1);
}
exports.networkEarnAwardDailyStash = networkEarnAwardDailyStash;
function networkEarnAwardDeadDrop(p0, p1) {
    return _in(0xd01ebaea, 0x1f905ef6, p0, p1);
}
exports.networkEarnAwardDeadDrop = networkEarnAwardDeadDrop;
function networkEarnAwardFixerMission(p0, p1) {
    return _in(0x88d6c327, 0xd6c57c45, p0, p1);
}
exports.networkEarnAwardFixerMission = networkEarnAwardFixerMission;
function networkEarnAwardJuggaloMission(p0, p1) {
    return _in(0xddf04757, 0x7f1a02a7, p0, p1);
}
exports.networkEarnAwardJuggaloMission = networkEarnAwardJuggaloMission;
function networkEarnAwardPhone(p0, p1) {
    return _in(0x7397a115, 0x030f1be3, p0, p1);
}
exports.networkEarnAwardPhone = networkEarnAwardPhone;
function networkEarnAwardRandomEvent(p0, p1) {
    return _in(0xbeafbb1b, 0x98b7ef55, p0, p1);
}
exports.networkEarnAwardRandomEvent = networkEarnAwardRandomEvent;
function networkEarnAwardShortTrip(p0, p1) {
    return _in(0x5b4dbded, 0x84d6a420, p0, p1);
}
exports.networkEarnAwardShortTrip = networkEarnAwardShortTrip;
function networkEarnAwardTaxi(p0, p1) {
    return _in(0xa914768a, 0xd35cd3a5, p0, p1);
}
exports.networkEarnAwardTaxi = networkEarnAwardTaxi;
function networkEarnBbEventBonus(amount) {
    return _in(0xfdd8d244, 0x0daf1590, amount);
}
exports.networkEarnBbEventBonus = networkEarnBbEventBonus;
function networkEarnBeachPartyLostFound(p0, p1, p2) {
    return _in(0xa51338e0, 0xdccd4065, p0, p1, p2);
}
exports.networkEarnBeachPartyLostFound = networkEarnBeachPartyLostFound;
function networkEarnBiker(p0) {
    return _in(0x71bec32f, 0xa466e105, p0);
}
exports.networkEarnBiker = networkEarnBiker;
function networkEarnBikerShop(p0, p1) {
    return _in(0x2c5809eb, 0x9df57257, p0, p1);
}
exports.networkEarnBikerShop = networkEarnBikerShop;
function networkEarnBonusObjective(amount, p1, p2) {
    return _in(0xdcef983c, 0x24191997, amount, p1, p2);
}
exports.networkEarnBonusObjective = networkEarnBonusObjective;
function networkEarnBoss(p0, p1, p2) {
    return _in(0x08b0ca7a, 0x6ab3ac32, p0, p1, p2);
}
exports.networkEarnBoss = networkEarnBoss;
function networkEarnBountyHunterReward(p0) {
    return _in(0xf6b170f9, 0xa02e9e87, p0);
}
exports.networkEarnBountyHunterReward = networkEarnBountyHunterReward;
function networkEarnCarclubMembership(p0) {
    return _in(0xbc622779, 0x2a188e2e, p0);
}
exports.networkEarnCarclubMembership = networkEarnCarclubMembership;
function networkEarnCasinoAward(amount, hash) {
    return _in(0x973a9781, 0xa34f8deb, amount, _ch(hash));
}
exports.networkEarnCasinoAward = networkEarnCasinoAward;
function networkEarnCasinoCollectableCompletedCollection(amount) {
    return _in(0x83ad64f5, 0x3f4e9483, amount);
}
exports.networkEarnCasinoCollectableCompletedCollection = networkEarnCasinoCollectableCompletedCollection;
function networkEarnCasinoHeist(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x72e7c7b9, 0x615fa3c3, p0, p1, p2, p3, p4, p5, p6);
}
exports.networkEarnCasinoHeist = networkEarnCasinoHeist;
function networkEarnCasinoHeistAwards(p0, p1, p2, p3, p4) {
    return _in(0x3ec7471e, 0x6909798a, p0, p1, p2, p3, p4);
}
exports.networkEarnCasinoHeistAwards = networkEarnCasinoHeistAwards;
function networkEarnCasinoMissionParticipation(amount) {
    return _in(0x09e8f186, 0x41be2575, amount);
}
exports.networkEarnCasinoMissionParticipation = networkEarnCasinoMissionParticipation;
function networkEarnCasinoMissionReward(amount) {
    return _in(0x566fd402, 0xb25787de, amount);
}
exports.networkEarnCasinoMissionReward = networkEarnCasinoMissionReward;
function networkEarnCasinoStoryMissionReward(amount) {
    return _in(0xac95ed55, 0x2157e092, amount);
}
exports.networkEarnCasinoStoryMissionReward = networkEarnCasinoStoryMissionReward;
function networkEarnCasinoTimeTrialWin(amount) {
    return _in(0x0819db99, 0xfd2fbbd8, amount);
}
exports.networkEarnCasinoTimeTrialWin = networkEarnCasinoTimeTrialWin;
function networkEarnChallenge(amount, p1, p2) {
    return _in(0x0dd362f1, 0x4f18942a, amount, p1, p2);
}
exports.networkEarnChallenge = networkEarnChallenge;
function networkEarnCollectableCompletedCollection(amount, p1) {
    return _in(0x5c9b198a, 0xf5a54fa6, amount, p1);
}
exports.networkEarnCollectableCompletedCollection = networkEarnCollectableCompletedCollection;
function networkEarnCollectableItem(amount, p1) {
    return _in(0x84ff63bd, 0x4966f33d, amount, p1);
}
exports.networkEarnCollectableItem = networkEarnCollectableItem;
function networkEarnCollectables(p0, p1, p2) {
    return _in(0xa95cfb4e, 0x02390842, p0, p1, p2);
}
exports.networkEarnCollectables = networkEarnCollectables;
function networkEarnCollectablesActionFigures(amount) {
    return _in(0x5517f900, 0x43466049, amount);
}
exports.networkEarnCollectablesActionFigures = networkEarnCollectablesActionFigures;
function networkEarnDailyObjectiveEvent(amount) {
    return _in(0x5128df14, 0xa5bb86fc, amount);
}
exports.networkEarnDailyObjectiveEvent = networkEarnDailyObjectiveEvent;
function networkEarnDailyStashHouseCompleted(p0, p1) {
    return _in(0xcabc9874, 0xafa70d6d, p0, p1);
}
exports.networkEarnDailyStashHouseCompleted = networkEarnDailyStashHouseCompleted;
function networkEarnDailyStashHouseParticipation(p0, p1) {
    return _in(0x9c0c6bd0, 0xf94ce391, p0, p1);
}
exports.networkEarnDailyStashHouseParticipation = networkEarnDailyStashHouseParticipation;
function networkEarnDailyVehicle(p0, p1) {
    return _in(0x533073e8, 0xa596008c, p0, p1);
}
exports.networkEarnDailyVehicle = networkEarnDailyVehicle;
function networkEarnDailyVehicleBonus(p0) {
    return _in(0xfe65afe7, 0x308e32b2, p0);
}
exports.networkEarnDailyVehicleBonus = networkEarnDailyVehicleBonus;
function networkEarnDarChallenge(amount, p1) {
    return _in(0xcac67208, 0x7b4a24ab, amount, p1);
}
exports.networkEarnDarChallenge = networkEarnDarChallenge;
function networkEarnDispatchCall(amount, p1) {
    return _in(0xe2e244ab, 0x823b4483, amount, p1);
}
exports.networkEarnDispatchCall = networkEarnDispatchCall;
function networkEarnDoomsdayFinaleBonus(amount, vehicleHash) {
    return _in(0x128a747f, 0x4a230952, amount, _ch(vehicleHash));
}
exports.networkEarnDoomsdayFinaleBonus = networkEarnDoomsdayFinaleBonus;
function networkEarnFirstTimeBonus(p0, p1, p2) {
    return _in(0x11b0a20c, 0x493f7e36, p0, p1, p2);
}
exports.networkEarnFirstTimeBonus = networkEarnFirstTimeBonus;
function networkEarnFixerAgencyShortTrip(p0, p1) {
    return _in(0xf4a8e574, 0x60bf2037, p0, p1);
}
exports.networkEarnFixerAgencyShortTrip = networkEarnFixerAgencyShortTrip;
function networkEarnFixerFinale(p0, p1) {
    return _in(0xba154373, 0xc5fe51e8, p0, p1);
}
exports.networkEarnFixerFinale = networkEarnFixerFinale;
function networkEarnFixerPrep(p0, p1) {
    return _in(0x6283e5de, 0x4c4460c6, p0, p1);
}
exports.networkEarnFixerPrep = networkEarnFixerPrep;
function networkEarnFixerRivalDelivery(p0, p1) {
    return _in(0x235d4121, 0x0b3a1a5e, p0, p1);
}
exports.networkEarnFixerRivalDelivery = networkEarnFixerRivalDelivery;
function networkEarnFmbbWageBonus(p0) {
    return _in(0xfffba1b1, 0xf7c0b6f4, p0);
}
exports.networkEarnFmbbWageBonus = networkEarnFmbbWageBonus;
/**
 * JUGGALO_PHONE_MISSION...
 * @param p0
 * @param p1
 */
function networkEarnFooliganJob(p0, p1) {
    return _in(0xce4452ae, 0x85f5e252, p0, p1);
}
exports.networkEarnFooliganJob = networkEarnFooliganJob;
/**
 * JUGGALO_PHONE_MISSION_PARTICIPATION...
 * @param p0
 * @param p1
 */
function networkEarnFooliganJobParticipation(p0, p1) {
    return _in(0xc376b92d, 0x0e060970, p0, p1);
}
exports.networkEarnFooliganJobParticipation = networkEarnFooliganJobParticipation;
/**
 * DSPORT
 * @param p0
 * @param p1
 */
function networkEarnFromAiTargetKill(p0, p1) {
    return _in(0x515b4a22, 0xe4d3c6d7, p0, p1);
}
exports.networkEarnFromAiTargetKill = networkEarnFromAiTargetKill;
/**
 * Example for p1: "AM_DISTRACT_COPS"
 * @param p0
 * @param p1
 * @param p2
 */
function networkEarnFromAmbientJob(p0, p1, p2) {
    return _in(0xfb6db092, 0xfbae29e6, p0, _ts(p1), _ii(p2));
}
exports.networkEarnFromAmbientJob = networkEarnFromAmbientJob;
function networkEarnFromBendJob(amount, heistHash) {
    return _in(0x61326ee6, 0xdf15b0ca, amount, _ts(heistHash));
}
exports.networkEarnFromBendJob = networkEarnFromBendJob;
function networkEarnFromBetting(amount, p1) {
    return _in(0x827a5ba1, 0xa44aca6d, amount, _ts(p1));
}
exports.networkEarnFromBetting = networkEarnFromBetting;
function networkEarnFromBounty(amount, p3) {
    const [gamerHandle_out, p2_out] = _in(0x131bb5da, 0x15453acf, amount, _i, _i, p3);
    return [gamerHandle_out, p2_out];
}
exports.networkEarnFromBounty = networkEarnFromBounty;
function networkEarnFromBusinessBattle(p0) {
    return _in(0x42fce14f, 0x50f27291, p0);
}
exports.networkEarnFromBusinessBattle = networkEarnFromBusinessBattle;
function networkEarnFromBusinessHubSell(p0, p1, p2) {
    return _in(0x0b39cf0d, 0x53f1c883, p0, p1, p2);
}
exports.networkEarnFromBusinessHubSell = networkEarnFromBusinessHubSell;
function networkEarnFromBusinessProduct(amount, p1, p2, p3) {
    return _in(0x85867897, 0x30b10caf, amount, p1, p2, p3);
}
exports.networkEarnFromBusinessProduct = networkEarnFromBusinessProduct;
function networkEarnFromCashingOut(amount) {
    return _in(0x718fbbf6, 0x7414fa36, amount);
}
exports.networkEarnFromCashingOut = networkEarnFromCashingOut;
function networkEarnFromChallengeWin(p0, p2) {
    return _in(0x2b171e6b, 0x2f64d8df, p0, _i, p2);
}
exports.networkEarnFromChallengeWin = networkEarnFromChallengeWin;
function networkEarnFromClubManagementParticipation(p0, p1) {
    return _in(0xa75eac69, 0xf59e96e7, p0, p1);
}
exports.networkEarnFromClubManagementParticipation = networkEarnFromClubManagementParticipation;
function networkEarnFromContraband(amount, p1) {
    return _in(0xeca658ce, 0x2a4e5a72, amount, p1);
}
exports.networkEarnFromContraband = networkEarnFromContraband;
function networkEarnFromCrateDrop(amount) {
    return _in(0xb1cc1b9e, 0xc3007a2a, amount);
}
exports.networkEarnFromCrateDrop = networkEarnFromCrateDrop;
function networkEarnFromCriminalMastermind(p0, p1, p2) {
    return _in(0xfa009a62, 0x990671d4, p0, p1, p2);
}
exports.networkEarnFromCriminalMastermind = networkEarnFromCriminalMastermind;
/**
 * type either Monthly,Weekly,Daily
 * @param amount
 * @param type
 * @param characterSlot
 */
function networkEarnFromDailyObjectives(amount, type, characterSlot) {
    return _in(0x6ea318c9, 0x1c1a8786, amount, _ts(type), characterSlot);
}
exports.networkEarnFromDailyObjectives = networkEarnFromDailyObjectives;
function networkEarnFromDestroyingContraband(p0, p1, p2) {
    return _in(0x84c0116d, 0x012e8fc2, p0, p1, p2);
}
exports.networkEarnFromDestroyingContraband = networkEarnFromDestroyingContraband;
function networkEarnFromFmbbBossWork(p0) {
    return _in(0x1fda0aa6, 0x79c9919b, p0);
}
exports.networkEarnFromFmbbBossWork = networkEarnFromFmbbBossWork;
function networkEarnFromFmbbPhonecallMission(p0) {
    return _in(0xc5156361, 0xf26e2212, p0);
}
exports.networkEarnFromFmbbPhonecallMission = networkEarnFromFmbbPhonecallMission;
function networkEarnFromGangattackPickup(amount) {
    return _in(0xa03d4ace, 0x0a3284ce, amount);
}
exports.networkEarnFromGangattackPickup = networkEarnFromGangattackPickup;
function networkEarnFromHangarTrade(p0, p1) {
    return _in(0x31ba138f, 0x6304fb9f, p0, p1);
}
exports.networkEarnFromHangarTrade = networkEarnFromHangarTrade;
function networkEarnFromHoldups(amount) {
    return _in(0x45b8154e, 0x077d9e4d, amount);
}
exports.networkEarnFromHoldups = networkEarnFromHoldups;
function networkEarnFromImportExport(amount, modelHash) {
    return _in(0xf92a014a, 0x634442d6, amount, _ch(modelHash));
}
exports.networkEarnFromImportExport = networkEarnFromImportExport;
function networkEarnFromIslandHeistDjMission(p0, p1) {
    return _in(0xe2bb399d, 0x90942091, p0, p1);
}
exports.networkEarnFromIslandHeistDjMission = networkEarnFromIslandHeistDjMission;
function networkEarnFromJob(amount, p1) {
    return _in(0xb2cc4836, 0x834e8a98, amount, _ts(p1));
}
exports.networkEarnFromJob = networkEarnFromJob;
function networkEarnFromJobBonus(p0) {
    const [p1_out, p2_out] = _in(0x6816fb44, 0x16760775, p0, _i, _i);
    return [p1_out, p2_out];
}
exports.networkEarnFromJobBonus = networkEarnFromJobBonus;
function networkEarnFromJobx2(amount, p1) {
    return _in(0xdebbf584, 0x665411d0, amount, _ts(p1));
}
exports.networkEarnFromJobx2 = networkEarnFromJobx2;
function networkEarnFromNotBadsport(amount) {
    return _in(0x4337511f, 0xa8221d36, amount);
}
exports.networkEarnFromNotBadsport = networkEarnFromNotBadsport;
function networkEarnFromPersonalVehicle(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x3f4d0016, 0x7e41e0ad, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
exports.networkEarnFromPersonalVehicle = networkEarnFromPersonalVehicle;
function networkEarnFromPickup(amount) {
    return _in(0xed1517d3, 0xaf17c698, amount);
}
exports.networkEarnFromPickup = networkEarnFromPickup;
function networkEarnFromPremiumJob(amount, p1) {
    return _in(0xc8407624, 0xcef2354b, amount, _ts(p1));
}
exports.networkEarnFromPremiumJob = networkEarnFromPremiumJob;
function networkEarnFromProperty(amount, propertyName) {
    return _in(0x84964834, 0x9d77f5c5, amount, _ch(propertyName));
}
exports.networkEarnFromProperty = networkEarnFromProperty;
/**
 * For the money bags that drop a max of $40,000. Often called 40k bags.
 *
 * Most likely NETWORK_EARN_FROM_ROB***
 * @param amount
 */
function networkEarnFromRobArmoredCars(amount) {
    return _in(0xf514621e, 0x8ea463d0, amount);
}
exports.networkEarnFromRobArmoredCars = networkEarnFromRobArmoredCars;
function networkEarnFromSellBunker(amount, bunkerHash) {
    return _in(0x9251b6ab, 0xf2d0a5b4, amount, _ch(bunkerHash));
}
exports.networkEarnFromSellBunker = networkEarnFromSellBunker;
function networkEarnFromSmugglerWork(p0, p1, p2, p3, p4, p5) {
    return _in(0x6b7e4fb5, 0x0d5f3d65, p0, p1, p2, p3, p4, p5);
}
exports.networkEarnFromSmugglerWork = networkEarnFromSmugglerWork;
function networkEarnFromVehicle(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0xb539bd8a, 0x4c1eecf8, p0, p1, p2, p3, p4, p5, p6, p7);
}
exports.networkEarnFromVehicle = networkEarnFromVehicle;
function networkEarnFromVehicleExport(amount, p1, p2) {
    return _in(0xedead9a9, 0x1ec768b3, amount, p1, p2);
}
exports.networkEarnFromVehicleExport = networkEarnFromVehicleExport;
function networkEarnFromWarehouse(amount, id) {
    return _in(0x3e4adaff, 0x1830f146, amount, id);
}
exports.networkEarnFromWarehouse = networkEarnFromWarehouse;
function networkEarnGangopsAward(amount, p1, p2) {
    return _in(0xa9a31475, 0xf530dfda, amount, _ts(p1), p2);
}
exports.networkEarnGangopsAward = networkEarnGangopsAward;
function networkEarnGangopsElite(amount, p1, actIndex) {
    return _in(0x2597a0d4, 0xa4fc2c77, amount, _ts(p1), actIndex);
}
exports.networkEarnGangopsElite = networkEarnGangopsElite;
function networkEarnGangopsFinale(amount, p1) {
    return _in(0x1c121fc9, 0x545e0d52, amount, _ts(p1));
}
exports.networkEarnGangopsFinale = networkEarnGangopsFinale;
function networkEarnGangopsPrepParticipation(amount) {
    return _in(0xed26584f, 0x6bdcbbfd, amount);
}
exports.networkEarnGangopsPrepParticipation = networkEarnGangopsPrepParticipation;
function networkEarnGangopsSetup(amount, p1) {
    return _in(0xa9160796, 0xd47a2cf8, amount, _ts(p1));
}
exports.networkEarnGangopsSetup = networkEarnGangopsSetup;
function networkEarnGangopsWages(amount, p1) {
    return _in(0x2dcb19ab, 0xab0380a8, amount, p1);
}
exports.networkEarnGangopsWages = networkEarnGangopsWages;
function networkEarnGangopsWagesBonus(amount, p1) {
    return _in(0x15bb2a5c, 0x757eb91f, amount, p1);
}
exports.networkEarnGangopsWagesBonus = networkEarnGangopsWagesBonus;
function networkEarnGoon(p0, p1, p2) {
    return _in(0xcda1c62b, 0xe2777802, p0, p1, p2);
}
exports.networkEarnGoon = networkEarnGoon;
function networkEarnHackerTruck(p0, amount, p2, p3) {
    return _in(0xe8815fe9, 0x93896ad3, p0, amount, p2, p3);
}
exports.networkEarnHackerTruck = networkEarnHackerTruck;
function networkEarnHeistAward(p0, p1, p2) {
    return _in(0x9d4fdbb0, 0x35229669, p0, p1, p2);
}
exports.networkEarnHeistAward = networkEarnHeistAward;
function networkEarnIslandHeist(amount1, p1, p2, p3, amount2, p5) {
    return _in(0xd21d111c, 0x46ba9f15, amount1, p1, p2, p3, amount2, p5);
}
exports.networkEarnIslandHeist = networkEarnIslandHeist;
function networkEarnJuggaloStoryMission(p0, p1) {
    return _in(0xe01d10ba, 0x8cd53621, p0, p1);
}
exports.networkEarnJuggaloStoryMission = networkEarnJuggaloStoryMission;
function networkEarnJuggaloStoryMissionParticipation(p0, p1) {
    return _in(0x40ff6ccc, 0xc476185c, p0, p1);
}
exports.networkEarnJuggaloStoryMissionParticipation = networkEarnJuggaloStoryMissionParticipation;
function networkEarnNightclub(p0) {
    return _in(0xe0f82d68, 0xc7039158, p0);
}
exports.networkEarnNightclub = networkEarnNightclub;
function networkEarnNightclubAndWarehouse(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0xc6e74cf8, 0xc884c880, p0, p1, p2, p3, p4, p5, p6);
}
exports.networkEarnNightclubAndWarehouse = networkEarnNightclubAndWarehouse;
function networkEarnNightclubDancing(p0) {
    return _in(0xb4deae67, 0xf35e2acd, p0);
}
exports.networkEarnNightclubDancing = networkEarnNightclubDancing;
function networkEarnProgressHub(p0, p1) {
    return _in(0xf8332b06, 0xf0eecc9c, p0, p1);
}
exports.networkEarnProgressHub = networkEarnProgressHub;
function networkEarnPurchaseClubHouse(p0, p1) {
    return _in(0x55a1e095, 0xdb052fa5, p0, p1);
}
exports.networkEarnPurchaseClubHouse = networkEarnPurchaseClubHouse;
function networkEarnRcTimeTrial(amount) {
    return _in(0xdff49ee9, 0x84e7aae8, amount);
}
exports.networkEarnRcTimeTrial = networkEarnRcTimeTrial;
function networkEarnRdrBonus(amount, p1) {
    return _in(0x7a5349b7, 0x73584675, amount, p1);
}
exports.networkEarnRdrBonus = networkEarnRdrBonus;
function networkEarnSellAcid(p0, p1) {
    return _in(0x79b65693, 0x7df6df5d, p0, p1);
}
exports.networkEarnSellAcid = networkEarnSellAcid;
function networkEarnSellBase(amount, baseNameHash) {
    return _in(0x0e1e2ff3, 0xf4ec11aa, amount, _ch(baseNameHash));
}
exports.networkEarnSellBase = networkEarnSellBase;
function networkEarnSellParticipationAcidLab(p0, p1) {
    return _in(0xca3ef9b0, 0x9a8d76b4, p0, p1);
}
exports.networkEarnSellParticipationAcidLab = networkEarnSellParticipationAcidLab;
function networkEarnSellPrizeVehicle(amount, p1, p2) {
    return _in(0x8bcb27a0, 0x57df7b7f, amount, p1, p2);
}
exports.networkEarnSellPrizeVehicle = networkEarnSellPrizeVehicle;
function networkEarnSetupParticipationAcidLab(p0, p1) {
    return _in(0xe3942d59, 0xe8a7f70d, p0, p1);
}
exports.networkEarnSetupParticipationAcidLab = networkEarnSetupParticipationAcidLab;
function networkEarnSightseeingReward(p0, p1, p2, p3) {
    return _in(0x45087ae4, 0x80b233ac, p0, p1, p2, p3);
}
exports.networkEarnSightseeingReward = networkEarnSightseeingReward;
function networkEarnSmugglerAgency(amount, p1, p2, p3) {
    return _in(0xdee612f2, 0xd71b0308, amount, p1, p2, p3);
}
exports.networkEarnSmugglerAgency = networkEarnSmugglerAgency;
function networkEarnSmugglerOps(p0, p1, p2) {
    return _in(0xdea273d5, 0xf8a9661a, p0, p1, p2);
}
exports.networkEarnSmugglerOps = networkEarnSmugglerOps;
function networkEarnSourceParticipationAcidLab(p0, p1) {
    return _in(0x136f11b5, 0xdf1b304d, p0, p1);
}
exports.networkEarnSourceParticipationAcidLab = networkEarnSourceParticipationAcidLab;
function networkEarnSpinTheWheelCash(amount) {
    return _in(0x676c4877, 0x6cacbb5a, amount);
}
exports.networkEarnSpinTheWheelCash = networkEarnSpinTheWheelCash;
function networkEarnStreetDealer(p0, p1) {
    return _in(0xa81017ee, 0x1324fdfe, p0, p1);
}
exports.networkEarnStreetDealer = networkEarnStreetDealer;
function networkEarnTargetRefund(amount, p1) {
    return _in(0x5b669cf2, 0x299a271f, amount, p1);
}
exports.networkEarnTargetRefund = networkEarnTargetRefund;
function networkEarnTaxiJob(p0, p1) {
    return _in(0x991e1588, 0xfad9019d, p0, p1);
}
exports.networkEarnTaxiJob = networkEarnTaxiJob;
function networkEarnTunerAward(p0, p1, p2) {
    return _in(0xb846f547, 0xd3792df6, p0, p1, p2);
}
exports.networkEarnTunerAward = networkEarnTunerAward;
function networkEarnTunerRobbery(p0, p1, p2, p3, p4) {
    return _in(0xbcb26624, 0x7193ac61, p0, p1, p2, p3, p4);
}
exports.networkEarnTunerRobbery = networkEarnTunerRobbery;
function networkEarnUpgradeAgency(p0, p1) {
    return _in(0xd07c7c3f, 0x1995108c, p0, p1);
}
exports.networkEarnUpgradeAgency = networkEarnUpgradeAgency;
function networkEarnUpgradeArcade(p0, p1, p2) {
    return _in(0x4c3b7569, 0x4f7e0d9c, p0, p1, p2);
}
exports.networkEarnUpgradeArcade = networkEarnUpgradeArcade;
function networkEarnUpgradeAutoshop(p0, p1) {
    return _in(0xc10322a8, 0xd3e061ee, p0, p1);
}
exports.networkEarnUpgradeAutoshop = networkEarnUpgradeAutoshop;
function networkEarnWagePayment(amount, p1) {
    return _in(0x35f8da0e, 0x8a31ef1b, amount, p1);
}
exports.networkEarnWagePayment = networkEarnWagePayment;
function networkEarnWagePaymentBonus(amount) {
    return _in(0x005aca71, 0x00bd101d, amount);
}
exports.networkEarnWagePaymentBonus = networkEarnWagePaymentBonus;
function networkEarnYatchMission(amount, p1) {
    return _in(0xde68e30d, 0x89f97132, amount, p1);
}
exports.networkEarnYatchMission = networkEarnYatchMission;
function networkEconomyHasFixedCrazyNumbers() {
    return _in(0x7c4fccd2, 0xe4deb394, _r);
}
exports.networkEconomyHasFixedCrazyNumbers = networkEconomyHasFixedCrazyNumbers;
function networkEnableEmptyCrowdingVehiclesRemoval(toggle) {
    return _in(0x51db102f, 0x4a3ba5e0, toggle);
}
exports.networkEnableEmptyCrowdingVehiclesRemoval = networkEnableEmptyCrowdingVehiclesRemoval;
function networkEnableExtraVehicleOrientationBlendChecks(netId, toggle) {
    return _in(0xe6717e65, 0x2b8c8d8a, netId, toggle);
}
exports.networkEnableExtraVehicleOrientationBlendChecks = networkEnableExtraVehicleOrientationBlendChecks;
function networkEnableVoiceBandwidthRestriction(player) {
    return _in(0x5e3aa4ca, 0x2b6fb0ee, player);
}
exports.networkEnableVoiceBandwidthRestriction = networkEnableVoiceBandwidthRestriction;
function networkEndTutorialSession() {
    return _in(0xd0afaff5, 0xa51d72f7);
}
exports.networkEndTutorialSession = networkEndTutorialSession;
function networkEntityAreaDoesExist(areaHandle) {
    return _in(0xe64a3ca0, 0x8dfa37a9, areaHandle, _r);
}
exports.networkEntityAreaDoesExist = networkEntityAreaDoesExist;
function networkEntityAreaHaveAllReplied(areaHandle) {
    return _in(0x4df7cfff, 0x471a7fb1, areaHandle, _r);
}
exports.networkEntityAreaHaveAllReplied = networkEntityAreaHaveAllReplied;
function networkEntityAreaIsOccupied(areaHandle) {
    return _in(0x4a2d4e8b, 0xf4265b0f, areaHandle, _r);
}
exports.networkEntityAreaIsOccupied = networkEntityAreaIsOccupied;
function networkEntityGetObjectId(entity) {
    return _in(0x815f18ad, 0x865f057f, entity, _r, _ri);
}
exports.networkEntityGetObjectId = networkEntityGetObjectId;
function networkEntityUseHighPrecisionRotation(netId, toggle) {
    return _in(0x95baf97c, 0x82464629, netId, toggle);
}
exports.networkEntityUseHighPrecisionRotation = networkEntityUseHighPrecisionRotation;
function networkExplodeHeli(vehicle, isAudible, isInvisible, netId) {
    return _in(0x2a5e0621, 0xdd815a9a, vehicle, isAudible, isInvisible, netId);
}
exports.networkExplodeHeli = networkExplodeHeli;
/**
 * In the console script dumps, this is only referenced once.
 * NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
 *
 * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
 * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
 *
 * am_plane_takedown.c
 * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
 *
 * armenian2.c
 * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
 *
 * fm_horde_controler.c
 * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
 *
 * fm_mission_controller.c, has 6 hits so not going to list them.
 *
 * Side note, setting the first parameter to 0 seems to mute sound or so?
 *
 * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
 *
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 * @param netId
 */
function networkExplodeVehicle(vehicle, isAudible, isInvisible, netId) {
    return _in(0x301a4215, 0x3c9ad707, vehicle, isAudible, isInvisible, netId, _r);
}
exports.networkExplodeVehicle = networkExplodeVehicle;
/**
 * state - 0 does 5 fades
 * state - 1 does 6 fades
 *
 * p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
 * @param entity
 * @param state
 * @param p2
 */
function networkFadeInEntity(entity, state, p2) {
    return _in(0x1f4ed342, 0xacefe62d, entity, state, p2);
}
exports.networkFadeInEntity = networkFadeInEntity;
/**
 * normal - transition like when your coming out of LSC
 * slow - transition like when you walk into a mission
 *
 * @param entity
 * @param normal
 * @param slow
 */
function networkFadeOutEntity(entity, normal, slow) {
    return _in(0xde564951, 0xf95e09ed, entity, normal, slow);
}
exports.networkFadeOutEntity = networkFadeOutEntity;
function networkFindGamersInCrew(crewId) {
    return _in(0xe532d681, 0x1b3a4d2a, crewId, _r);
}
exports.networkFindGamersInCrew = networkFindGamersInCrew;
/**
 * p0 is always 0. p1 is pointing to a global.
 * @param p0
 * @param p1
 */
function networkFindLargestBunchOfPlayers(p0, p1) {
    return _in(0xfb1f9381, 0xe80fa13f, p0, p1, _r);
}
exports.networkFindLargestBunchOfPlayers = networkFindLargestBunchOfPlayers;
/**
 * Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
 * There can be up to 15 attributes, they are as follows:
 *
 * 0 = Races
 * 1 = Parachuting
 * 2 = Horde
 * 3 = Darts
 * 4 = Arm Wrestling
 * 5 = Tennis
 * 6 = Golf
 * 7 = Shooting Range
 * 8 = Deathmatch
 * 9 = MPPLY_MCMWIN/MPPLY_CRMISSION
 * @param attribute
 * @param fallbackLimit
 * @param lowerLimit
 * @param upperLimit
 */
function networkFindMatchedGamers(attribute, fallbackLimit, lowerLimit, upperLimit) {
    return _in(0xf7b2cfde, 0x5c9f700d, attribute, _fv(fallbackLimit), _fv(lowerLimit), _fv(upperLimit), _r);
}
exports.networkFindMatchedGamers = networkFindMatchedGamers;
function networkFinishBroadcastingData() {
    return _in(0x64f62afb, 0x081e260d);
}
exports.networkFinishBroadcastingData = networkFinishBroadcastingData;
/**
 * NETWORK_F[I-O]
 */
function networkForceLocalPlayerScarSync() {
    return _in(0xb7c7f6ad, 0x6424304b);
}
exports.networkForceLocalPlayerScarSync = networkForceLocalPlayerScarSync;
function networkForceLocalUseOfSyncedSceneCamera(netScene) {
    return _in(0xc9b43a33, 0xd09cada7, netScene);
}
exports.networkForceLocalUseOfSyncedSceneCamera = networkForceLocalUseOfSyncedSceneCamera;
function networkGamerHasHeadset(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xf2fd55cb, 0x574bcc55, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkGamerHasHeadset = networkGamerHasHeadset;
function networkGamertagFromHandlePending() {
    return _in(0xb071e279, 0x58ef4cf0, _r);
}
exports.networkGamertagFromHandlePending = networkGamertagFromHandlePending;
function networkGamertagFromHandleStart(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x9f0c0a98, 0x1d73fa56, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkGamertagFromHandleStart = networkGamertagFromHandleStart;
function networkGamertagFromHandleSucceeded() {
    return _in(0xfd00798d, 0xba7523dd, _r);
}
exports.networkGamertagFromHandleSucceeded = networkGamertagFromHandleSucceeded;
function networkGetActivityPlayerNum(p0) {
    return _in(0x73e2b500, 0x410da5a2, p0, _r, _ri);
}
exports.networkGetActivityPlayerNum = networkGetActivityPlayerNum;
function networkGetAgeGroup() {
    return _in(0x9614b71f, 0x8adb982b, _r, _ri);
}
exports.networkGetAgeGroup = networkGetAgeGroup;
function networkGetAssistedDamageOfEntity(player, entity, p2) {
    const [retval, p2_out] = _in(0x4caca844, 0x40fa26f6, player, entity, _ii(p2), _r);
    return [retval, p2_out];
}
exports.networkGetAssistedDamageOfEntity = networkGetAssistedDamageOfEntity;
/**
 * NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
 * @param player
 * @param entity
 * @param p2
 */
function networkGetAssistedKillOfEntity(player, entity, p2) {
    const [retval, p2_out] = _in(0x83660b73, 0x4994124d, player, entity, _ii(p2), _r);
    return [retval, p2_out];
}
exports.networkGetAssistedKillOfEntity = networkGetAssistedKillOfEntity;
function networkGetAverageLatency(player) {
    return _in(0xd414be12, 0x9bb81b32, player, _r, _rf);
}
exports.networkGetAverageLatency = networkGetAverageLatency;
function networkGetAveragePacketLoss(player) {
    return _in(0x350c2394, 0x9e43686c, player, _r, _rf);
}
exports.networkGetAveragePacketLoss = networkGetAveragePacketLoss;
/**
 * Same as NETWORK_GET_AVERAGE_LATENCY
 * @param player
 */
function networkGetAveragePing(player) {
    return _in(0x0e3a041e, 0xd6ac2b45, player, _r, _rf);
}
exports.networkGetAveragePing = networkGetAveragePing;
function networkGetBoneIdOfFatalHit() {
    return _in(0x7db53b37, 0xa2f211a0, _r, _ri);
}
exports.networkGetBoneIdOfFatalHit = networkGetBoneIdOfFatalHit;
/**
 * Returns true if bank balance >= amount.
 * @param amount
 */
function networkGetCanSpendFromBank(amount) {
    return _in(0xa31fd6a0, 0x865b6d14, amount, _r);
}
exports.networkGetCanSpendFromBank = networkGetCanSpendFromBank;
/**
 * Returns true if bank balance + wallet balance >= amount.
 * @param amount
 * @param characterSlot
 */
function networkGetCanSpendFromBankAndWallet(amount, characterSlot) {
    return _in(0xdc18531d, 0x7019a535, amount, characterSlot, _r);
}
exports.networkGetCanSpendFromBankAndWallet = networkGetCanSpendFromBankAndWallet;
/**
 * Returns true if wallet balance >= amount.
 * @param amount
 * @param characterSlot
 */
function networkGetCanSpendFromWallet(amount, characterSlot) {
    return _in(0xed5ab886, 0x0415baba, amount, characterSlot, _r);
}
exports.networkGetCanSpendFromWallet = networkGetCanSpendFromWallet;
/**
 * Returns false if amount > wallet balance or daily transfer limit has been hit.
 * @param amount
 */
function networkGetCanTransferCash(amount) {
    return _in(0x08e8eead, 0xfd0dc4a0, amount, _r);
}
exports.networkGetCanTransferCash = networkGetCanTransferCash;
/**
 * Return the content modifier id (the tunables context if you want) of a specific content.
 *
 * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
 *
 * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
 *
 * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
 *
 * @param contentHash
 */
function networkGetContentModifierListId(contentHash) {
    return _in(0x187382f8, 0xa3e0a6c3, _ch(contentHash), _r, _ri);
}
exports.networkGetContentModifierListId = networkGetContentModifierListId;
function networkGetCurrentlySelectedGamerHandleFromInviteMenu(p0) {
    const [retval, p0_out] = _in(0x74881e6b, 0xcae2327c, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkGetCurrentlySelectedGamerHandleFromInviteMenu = networkGetCurrentlySelectedGamerHandleFromInviteMenu;
function networkGetDestroyerOfEntity(entity, weaponHash) {
    const [retval, weaponHash_out] = _in(0xc434133d, 0x9ba52777, entity, _i, _r, _ri);
    return [retval, weaponHash_out];
}
exports.networkGetDestroyerOfEntity = networkGetDestroyerOfEntity;
function networkGetDestroyerOfNetworkId(netId, weaponHash) {
    const [retval, weaponHash_out] = _in(0x7a1adeef, 0x01740a24, netId, _i, _r, _ri);
    return [retval, weaponHash_out];
}
exports.networkGetDestroyerOfNetworkId = networkGetDestroyerOfNetworkId;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 * @param p1
 * @param p2
 */
function networkGetDisplaynamesFromHandles(p0, p1, p2) {
    return _in(0x58cc1817, 0x19256197, p0, p1, p2, _r, _ri);
}
exports.networkGetDisplaynamesFromHandles = networkGetDisplaynamesFromHandles;
function networkGetEntityFromNetworkId(netId) {
    return _in(0xce4e5d9b, 0x0a4ff560, netId, _r, _ri);
}
exports.networkGetEntityFromNetworkId = networkGetEntityFromNetworkId;
/**
 * I've had this return the player's ped handle sometimes, but also other random entities.
 * Whatever p0 is, it's at least not synced to other players.
 * At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
 * But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
 *
 * Returns an entity handle or -1, value changes based on p0's value.
 * @param p0
 */
function networkGetEntityFromObjectId(p0) {
    return _in(0x37d5f739, 0xfd494675, p0, _r, _ri);
}
exports.networkGetEntityFromObjectId = networkGetEntityFromObjectId;
function networkGetEntityIsLocal(entity) {
    return _in(0x0991549d, 0xe4d64762, entity, _r);
}
exports.networkGetEntityIsLocal = networkGetEntityIsLocal;
function networkGetEntityIsNetworked(entity) {
    return _in(0xc7827959, 0x479dcc78, entity, _r);
}
exports.networkGetEntityIsNetworked = networkGetEntityIsNetworked;
function networkGetEntityKillerOfPlayer(player, weaponHash) {
    const [retval, weaponHash_out] = _in(0x42b2daa6, 0xb596f5f8, player, _i, _r, _ri);
    return [retval, weaponHash_out];
}
exports.networkGetEntityKillerOfPlayer = networkGetEntityKillerOfPlayer;
function networkGetEvcBalance() {
    return _in(0x5d1e75f9, 0x1c07dee5, _r, _ri);
}
exports.networkGetEvcBalance = networkGetEvcBalance;
function networkGetFoundGamer(p1) {
    const [retval, p0_out] = _in(0x9dcff2af, 0xb68b3476, _i, p1, _r);
    return [retval, p0_out];
}
exports.networkGetFoundGamer = networkGetFoundGamer;
function networkGetFriendCount() {
    return _in(0x203f1cfd, 0x823b27a4, _r, _ri);
}
exports.networkGetFriendCount = networkGetFriendCount;
function networkGetFriendDisplayName(friendIndex) {
    return _in(0x4164f227, 0xd052e293, friendIndex, _r, _s);
}
exports.networkGetFriendDisplayName = networkGetFriendDisplayName;
function networkGetFriendName(friendIndex) {
    return _in(0xe11ebbb2, 0xa783fe8b, friendIndex, _r, _s);
}
exports.networkGetFriendName = networkGetFriendName;
function networkGetGameMode() {
    return _in(0x4c903416, 0x2368e206, _r, _ri);
}
exports.networkGetGameMode = networkGetGameMode;
function networkGetGamerStatusFromQueue() {
    return _in(0x2cc848a8, 0x61d01493, _r);
}
exports.networkGetGamerStatusFromQueue = networkGetGamerStatusFromQueue;
function networkGetGamerStatusResult(p1) {
    const [retval, p0_out] = _in(0x02a8bec6, 0xfd9af660, _i, p1, _r);
    return [retval, p0_out];
}
exports.networkGetGamerStatusResult = networkGetGamerStatusResult;
function networkGetGamertagFromHandle(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x42614116, 0x2ebe5cdb, _ii(gamerHandle), _r, _s);
    return [retval, gamerHandle_out];
}
exports.networkGetGamertagFromHandle = networkGetGamertagFromHandle;
function networkGetGlobalMultiplayerClock() {
    const [hours_out, minutes_out, seconds_out] = _in(0x6d03bfbd, 0x643b2a02, _i, _i, _i);
    return [hours_out, minutes_out, seconds_out];
}
exports.networkGetGlobalMultiplayerClock = networkGetGlobalMultiplayerClock;
function networkGetHighestReliableResendCount(player) {
    return _in(0x52c1eada, 0xf7b10302, player, _r, _ri);
}
exports.networkGetHighestReliableResendCount = networkGetHighestReliableResendCount;
/**
 * scriptName examples:
 * "freemode", "AM_CR_SecurityVan", ...
 *
 * Most of the time, these values are used:
 * instance_id = -1
 * position_hash = 0
 * @param scriptName
 * @param instance_id
 * @param position_hash
 */
function networkGetHostOfScript(scriptName, instance_id, position_hash) {
    return _in(0x1d6a14f1, 0xf9a736fc, _ts(scriptName), instance_id, position_hash, _r, _ri);
}
exports.networkGetHostOfScript = networkGetHostOfScript;
function networkGetHostOfThisScript() {
    return _in(0xc7b4d79b, 0x01fa7a5c, _r, _ri);
}
exports.networkGetHostOfThisScript = networkGetHostOfThisScript;
function networkGetHostPlayerIndex() {
    return _in(0x8251fb94, 0xdc4fdfc8, _r, _ri);
}
exports.networkGetHostPlayerIndex = networkGetHostPlayerIndex;
function networkGetInstanceIdOfThisScript() {
    return _in(0x638a3a81, 0x733086db, _r, _ri);
}
exports.networkGetInstanceIdOfThisScript = networkGetInstanceIdOfThisScript;
function networkGetInviteReplyStatus(p0) {
    return _in(0x3855fb5e, 0xb2c5e8b2, p0, _r, _ri);
}
exports.networkGetInviteReplyStatus = networkGetInviteReplyStatus;
function networkGetKillerOfPlayer(player, weaponHash) {
    const [retval, weaponHash_out] = _in(0x2da41ed6, 0xe1fcd7a5, player, _i, _r, _ri);
    return [retval, weaponHash_out];
}
exports.networkGetKillerOfPlayer = networkGetKillerOfPlayer;
function networkGetLastEntityPosReceivedOverNetwork(entity) {
    return _mv(_in(0x64d77965, 0x9bc37b19, entity, _r, _rv));
}
exports.networkGetLastEntityPosReceivedOverNetwork = networkGetLastEntityPosReceivedOverNetwork;
/**
 * Returns the coordinates of another player.
 * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
 * @param player
 */
function networkGetLastPlayerPosReceivedOverNetwork(player) {
    return _mv(_in(0x125e6d63, 0x8b8605d4, player, _r, _rv));
}
exports.networkGetLastPlayerPosReceivedOverNetwork = networkGetLastPlayerPosReceivedOverNetwork;
/**
 * Used by NetBlender
 * @param entity
 */
function networkGetLastVelReceivedOverNetwork(entity) {
    return _mv(_in(0x33de49ed, 0xf4dde77a, entity, _r, _rv));
}
exports.networkGetLastVelReceivedOverNetwork = networkGetLastVelReceivedOverNetwork;
function networkGetLocalHandle(gamerHandleSize) {
    return _in(0xe8605178, 0x6b66cd8e, _i, gamerHandleSize);
}
exports.networkGetLocalHandle = networkGetLocalHandle;
function networkGetLocalSceneFromNetworkId(netId) {
    return _in(0x02c40bf8, 0x85c567b6, netId, _r, _ri);
}
exports.networkGetLocalSceneFromNetworkId = networkGetLocalSceneFromNetworkId;
function networkGetMaxFriends() {
    return _in(0xafebb0d5, 0xd8f687d2, _r, _ri);
}
exports.networkGetMaxFriends = networkGetMaxFriends;
function networkGetMaxNumParticipants() {
    return _in(0xa6c90fbc, 0x38e395ee, _r, _ri);
}
exports.networkGetMaxNumParticipants = networkGetMaxNumParticipants;
/**
 * NETWORK_GET_M[A-U]
 * @param p0
 * @param p1
 * @param p2
 */
function networkGetMuteCountForPlayer(p0) {
    const [p1_out, p2_out] = _in(0xadb57e5b, 0x663cca8b, p0, _f, _f);
    return [p1_out, p2_out];
}
exports.networkGetMuteCountForPlayer = networkGetMuteCountForPlayer;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
function networkGetNetStatisticsInfo(p0) {
    return _in(0x6fd992c4, 0xa1c1b986, _ii(p0));
}
exports.networkGetNetStatisticsInfo = networkGetNetStatisticsInfo;
function networkGetNetworkIdFromEntity(entity) {
    return _in(0xa1170068, 0x2f3ad45c, entity, _r, _ri);
}
exports.networkGetNetworkIdFromEntity = networkGetNetworkIdFromEntity;
/**
 * Hardcoded to return zero.
 *
 * ==== PS4 specific info ====
 *
 * Returns some sort of unavailable reason:
 * -1 = REASON_INVALID
 * 0 = REASON_OTHER
 * 1 = REASON_SYSTEM_UPDATE
 * 2 = REASON_GAME_UPDATE
 * 3 = REASON_SIGNED_OUT
 * 4 = REASON_AGE
 * 5 = REASON_CONNECTION
 *
 * =================================
 */
function networkGetNpUnavailableReason() {
    return _in(0x74fb3e29, 0xe6d10fa9, _r, _ri);
}
exports.networkGetNpUnavailableReason = networkGetNpUnavailableReason;
/**
 * Returns the amount of players connected in the current session. Only works when connected to a session/server.
 */
function networkGetNumConnectedPlayers() {
    return _in(0xa4a79dd2, 0xd9600654, _r, _ri);
}
exports.networkGetNumConnectedPlayers = networkGetNumConnectedPlayers;
function networkGetNumFoundGamers() {
    return _in(0xa1b043ee, 0x79a916fb, _r, _ri);
}
exports.networkGetNumFoundGamers = networkGetNumFoundGamers;
function networkGetNumParticipants() {
    return _in(0x18d0456e, 0x86604654, _r, _ri);
}
exports.networkGetNumParticipants = networkGetNumParticipants;
function networkGetNumPresenceInvites() {
    return _in(0xcefa9689, 0x12d0f78d, _r, _ri);
}
exports.networkGetNumPresenceInvites = networkGetNumPresenceInvites;
function networkGetNumScriptParticipants(scriptName, instance_id, position_hash) {
    return _in(0x3658e8cd, 0x94fc121a, _ts(scriptName), instance_id, position_hash, _r, _ri);
}
exports.networkGetNumScriptParticipants = networkGetNumScriptParticipants;
function networkGetNumTransitionNonAsyncGamers() {
    return _in(0x617f49c2, 0x668e6155, _r, _ri);
}
exports.networkGetNumTransitionNonAsyncGamers = networkGetNumTransitionNonAsyncGamers;
function networkGetNumUnackedReliables(player) {
    return _in(0xff8fcf9f, 0xfc458a1c, player, _r, _ri);
}
exports.networkGetNumUnackedReliables = networkGetNumUnackedReliables;
function networkGetNumberBodyTrackerHits() {
    return _in(0xd38c4a6d, 0x047c019d, _r, _ri);
}
exports.networkGetNumberBodyTrackerHits = networkGetNumberBodyTrackerHits;
function networkGetParticipantIndex(index) {
    return _in(0x1b84df6a, 0xf2a46938, index, _r, _ri);
}
exports.networkGetParticipantIndex = networkGetParticipantIndex;
function networkGetPlatformPartyMemberCount() {
    return _in(0x01abce5e, 0x7cbda196, _r, _ri);
}
exports.networkGetPlatformPartyMemberCount = networkGetPlatformPartyMemberCount;
function networkGetPlatformPartyMembers(dataSize) {
    const [retval, data_out] = _in(0x120364de, 0x2845daf8, _i, dataSize, _r, _ri);
    return [retval, data_out];
}
exports.networkGetPlatformPartyMembers = networkGetPlatformPartyMembers;
function networkGetPlayerAccountId(player) {
    return _in(0xdb663cc9, 0xff3407a9, player, _r, _ri);
}
exports.networkGetPlayerAccountId = networkGetPlayerAccountId;
function networkGetPlayerFromGamerHandle(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xce5f689c, 0xf5a0a49d, _ii(gamerHandle), _r, _ri);
    return [retval, gamerHandle_out];
}
exports.networkGetPlayerFromGamerHandle = networkGetPlayerFromGamerHandle;
function networkGetPlayerIndex(player) {
    return _in(0x24fb80d1, 0x07371267, player, _r, _ri);
}
exports.networkGetPlayerIndex = networkGetPlayerIndex;
/**
 * Returns the Player associated to a given Ped when in an online session.
 * @param ped
 */
function networkGetPlayerIndexFromPed(ped) {
    return _in(0x6c0e2e01, 0x25610278, ped, _r, _ri);
}
exports.networkGetPlayerIndexFromPed = networkGetPlayerIndexFromPed;
function networkGetPlayerIsHighEarner() {
    return _in(0xfb2456b2, 0x040a6a67, _r);
}
exports.networkGetPlayerIsHighEarner = networkGetPlayerIsHighEarner;
function networkGetPlayerLoudness(player) {
    return _in(0x21a1684a, 0x25c2867f, player, _r, _rf);
}
exports.networkGetPlayerLoudness = networkGetPlayerLoudness;
function networkGetPlayerOwnsWaypoint(player) {
    return _in(0x82377b65, 0xe943f72d, player, _r);
}
exports.networkGetPlayerOwnsWaypoint = networkGetPlayerOwnsWaypoint;
function networkGetPlayerTutorialSessionInstance(player) {
    return _in(0x3b392367, 0x46714134, player, _r, _ri);
}
exports.networkGetPlayerTutorialSessionInstance = networkGetPlayerTutorialSessionInstance;
function networkGetPositionHashOfThisScript() {
    return _in(0x257ed0fa, 0xdf750bcf, _r, _ri);
}
exports.networkGetPositionHashOfThisScript = networkGetPositionHashOfThisScript;
function networkGetPredictedVelocity(entity, maxSpeedToPredict) {
    return _mv(_in(0xaa5fafcd, 0x2c5f5e47, entity, _fv(maxSpeedToPredict), _r, _rv));
}
exports.networkGetPredictedVelocity = networkGetPredictedVelocity;
function networkGetPresenceInviteContentId(p0) {
    return _in(0x24409fc4, 0xc55cb22d, p0, _r, _s);
}
exports.networkGetPresenceInviteContentId = networkGetPresenceInviteContentId;
function networkGetPresenceInviteFromAdmin(p0) {
    return _in(0x3dbf2df0, 0xaeb7d289, p0, _r);
}
exports.networkGetPresenceInviteFromAdmin = networkGetPresenceInviteFromAdmin;
function networkGetPresenceInviteHandle(p0, p1) {
    const [retval, p1_out] = _in(0x38d5b0fe, 0xbb086f75, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.networkGetPresenceInviteHandle = networkGetPresenceInviteHandle;
function networkGetPresenceInviteId(p0) {
    return _in(0xdff09646, 0xe12ec386, p0, _r, _ri);
}
exports.networkGetPresenceInviteId = networkGetPresenceInviteId;
function networkGetPresenceInviteIndexById(p0) {
    return _in(0x742b58f7, 0x23233ed9, p0, _r, _ri);
}
exports.networkGetPresenceInviteIndexById = networkGetPresenceInviteIndexById;
function networkGetPresenceInviteInviter(p0) {
    return _in(0x4962cc4a, 0xa2f345b7, p0, _r, _s);
}
exports.networkGetPresenceInviteInviter = networkGetPresenceInviteInviter;
function networkGetPresenceInviteIsTournament(p0) {
    return _in(0x8806cebf, 0xabd3ce05, p0, _r);
}
exports.networkGetPresenceInviteIsTournament = networkGetPresenceInviteIsTournament;
function networkGetPresenceInvitePlaylistCurrent(p0) {
    return _in(0x728c4cc7, 0x920cd102, p0, _r, _ri);
}
exports.networkGetPresenceInvitePlaylistCurrent = networkGetPresenceInvitePlaylistCurrent;
function networkGetPresenceInvitePlaylistLength(p0) {
    return _in(0xd39b3fff, 0x8ffdd5bf, p0, _r, _ri);
}
exports.networkGetPresenceInvitePlaylistLength = networkGetPresenceInvitePlaylistLength;
function networkGetPresenceInviteSessionId(p0) {
    return _in(0x26e1cd96, 0xb0903d60, p0, _r, _ri);
}
exports.networkGetPresenceInviteSessionId = networkGetPresenceInviteSessionId;
function networkGetPrimaryClanDataCancel() {
    return _in(0x042e4b70, 0xb93e6054);
}
exports.networkGetPrimaryClanDataCancel = networkGetPrimaryClanDataCancel;
function networkGetPrimaryClanDataClear() {
    return _in(0x9aa46bad, 0xad0e27ed, _r);
}
exports.networkGetPrimaryClanDataClear = networkGetPrimaryClanDataClear;
function networkGetPrimaryClanDataNew() {
    const [retval, p0_out, p1_out] = _in(0xc080ff65, 0x8b2e41da, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.networkGetPrimaryClanDataNew = networkGetPrimaryClanDataNew;
function networkGetPrimaryClanDataPending() {
    return _in(0xb5074db8, 0x04e28ce7, _r);
}
exports.networkGetPrimaryClanDataPending = networkGetPrimaryClanDataPending;
function networkGetPrimaryClanDataStart(p1) {
    const [retval, p0_out] = _in(0xce86d819, 0x1b762107, _i, p1, _r);
    return [retval, p0_out];
}
exports.networkGetPrimaryClanDataStart = networkGetPrimaryClanDataStart;
function networkGetPrimaryClanDataSuccess() {
    return _in(0x5b4f04f1, 0x9376a0ba, _r);
}
exports.networkGetPrimaryClanDataSuccess = networkGetPrimaryClanDataSuccess;
function networkGetPvcBalance() {
    return _in(0x4f54f3b6, 0xc202fb4e, _r, _ri);
}
exports.networkGetPvcBalance = networkGetPvcBalance;
/**
 * Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
 */
function networkGetPvcTransferBalance() {
    return _in(0x13a8de2f, 0xd77d04f3, _r, _ri);
}
exports.networkGetPvcTransferBalance = networkGetPvcTransferBalance;
function networkGetRandomFloatRanged(rangeStart, rangeEnd) {
    return _in(0x04bd27b5, 0xacb67067, _fv(rangeStart), _fv(rangeEnd), _r, _rf);
}
exports.networkGetRandomFloatRanged = networkGetRandomFloatRanged;
function networkGetRandomInt() {
    return _in(0x599e4fa1, 0xf87eb5ff, _r, _ri);
}
exports.networkGetRandomInt = networkGetRandomInt;
/**
 * Same as GET_RANDOM_INT_IN_RANGE
 * @param rangeStart
 * @param rangeEnd
 */
function networkGetRandomIntRanged(rangeStart, rangeEnd) {
    return _in(0xe30cf56f, 0x1efa5f43, rangeStart, rangeEnd, _r, _ri);
}
exports.networkGetRandomIntRanged = networkGetRandomIntRanged;
/**
 * Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
 */
function networkGetRemainingTransferBalance() {
    return _in(0xea560ac9, 0xeeb1e19b, _r, _ri);
}
exports.networkGetRemainingTransferBalance = networkGetRemainingTransferBalance;
/**
 * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
 * @param randomInt
 * @param coordinates
 * @param heading
 */
function networkGetRespawnResult(randomInt) {
    const [coordinates_out, heading_out] = _in(0x371ea436, 0x92861cf1, randomInt, _v, _f);
    return [_mv(coordinates_out), heading_out];
}
exports.networkGetRespawnResult = networkGetRespawnResult;
function networkGetRespawnResultFlags(p0) {
    return _in(0x6c34f120, 0x8b8923fd, p0, _r, _ri);
}
exports.networkGetRespawnResultFlags = networkGetRespawnResultFlags;
function networkGetScriptStatus() {
    return _in(0x57d15864, 0x7a6bfabf, _r, _ri);
}
exports.networkGetScriptStatus = networkGetScriptStatus;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
function networkGetSignallingInfo(p0) {
    return _in(0x2555cf7d, 0xa5473794, _ii(p0));
}
exports.networkGetSignallingInfo = networkGetSignallingInfo;
function networkGetStringBankBalance() {
    return _in(0xa6fa3979, 0xbed01b81, _r, _s);
}
exports.networkGetStringBankBalance = networkGetStringBankBalance;
function networkGetStringBankWalletBalance(character) {
    return _in(0x700af71a, 0xe615e6dd, character, _r, _s);
}
exports.networkGetStringBankWalletBalance = networkGetStringBankWalletBalance;
function networkGetStringWalletBalance(characterSlot) {
    return _in(0xf9b10b52, 0x9dcfb33b, characterSlot, _r, _s);
}
exports.networkGetStringWalletBalance = networkGetStringWalletBalance;
function networkGetTalkerProximity() {
    return _in(0x84f0f131, 0x20b4e098, _r, _rf);
}
exports.networkGetTalkerProximity = networkGetTalkerProximity;
function networkGetThisScriptIsNetworkScript() {
    return _in(0x29106699, 0x69e9535e, _r);
}
exports.networkGetThisScriptIsNetworkScript = networkGetThisScriptIsNetworkScript;
function networkGetTimeoutTime() {
    return _in(0x5ed0356a, 0x0ce3a34f, _r, _ri);
}
exports.networkGetTimeoutTime = networkGetTimeoutTime;
function networkGetTotalNumPlayers() {
    return _in(0xcf61d4b4, 0x702ee9eb, _r, _ri);
}
exports.networkGetTotalNumPlayers = networkGetTotalNumPlayers;
function networkGetTransitionHost(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x65042b97, 0x74c4435e, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkGetTransitionHost = networkGetTransitionHost;
/**
 * Returns count.
 * @param data
 * @param dataCount
 */
function networkGetTransitionMembers(dataCount) {
    const [retval, data_out] = _in(0x73b000f7, 0xfbc55829, _i, dataCount, _r, _ri);
    return [retval, data_out];
}
exports.networkGetTransitionMembers = networkGetTransitionMembers;
/**
 * Actually returns the version (TUNABLE_VERSION)
 */
function networkGetTunableCloudCrc() {
    return _in(0x10bd227a, 0x753b0d84, _r, _ri);
}
exports.networkGetTunableCloudCrc = networkGetTunableCloudCrc;
function networkGetUnreliableResendCount(player) {
    return _in(0x3765c3a3, 0xe8192e10, player, _r, _ri);
}
exports.networkGetUnreliableResendCount = networkGetUnreliableResendCount;
function networkGetVcBalance() {
    return _in(0x5cbad97e, 0x059e1b94, _r, _ri);
}
exports.networkGetVcBalance = networkGetVcBalance;
function networkGetVcBankBalance() {
    return _in(0x76ef28da, 0x05ea395a, _r, _ri);
}
exports.networkGetVcBankBalance = networkGetVcBankBalance;
function networkGetVcWalletBalance(characterSlot) {
    return _in(0xa40f9c26, 0x23f6a8b5, characterSlot, _r, _ri);
}
exports.networkGetVcWalletBalance = networkGetVcWalletBalance;
function networkGivePlayerJobshareCash(amount, gamerHandle) {
    return _in(0xfb18df9c, 0xb95e0105, amount, _ii(gamerHandle));
}
exports.networkGivePlayerJobshareCash = networkGivePlayerJobshareCash;
function networkHandleFromFriend(friendIndex, gamerHandleSize) {
    return _in(0xd45cb817, 0xd7e177d2, friendIndex, _i, gamerHandleSize);
}
exports.networkHandleFromFriend = networkHandleFromFriend;
function networkHandleFromMemberId(memberId, gamerHandleSize) {
    return _in(0xa0fd21be, 0xd61e5c4c, _ts(memberId), _i, gamerHandleSize);
}
exports.networkHandleFromMemberId = networkHandleFromMemberId;
function networkHandleFromPlayer(player, gamerHandleSize) {
    return _in(0x388eb2b8, 0x6c73b6b3, player, _i, gamerHandleSize);
}
exports.networkHandleFromPlayer = networkHandleFromPlayer;
function networkHandleFromUserId(userId, gamerHandleSize) {
    return _in(0xdcd51dd8, 0xf87aec5c, _ts(userId), _i, gamerHandleSize);
}
exports.networkHandleFromUserId = networkHandleFromUserId;
function networkHasAgeRestrictions() {
    return _in(0x1353f87e, 0x89946207, _r);
}
exports.networkHasAgeRestrictions = networkHasAgeRestrictions;
function networkHasAutomuteOverride() {
    return _in(0x26f07dd8, 0x3a5f7f98, _r);
}
exports.networkHasAutomuteOverride = networkHasAutomuteOverride;
function networkHasBoneBeenHitByKiller(boneIndex) {
    return _in(0x2e0bf682, 0xcc778d49, boneIndex, _r);
}
exports.networkHasBoneBeenHitByKiller = networkHasBoneBeenHitByKiller;
function networkHasCachedPlayerHeadBlendData(player) {
    return _in(0x237d5336, 0xa9a54108, player, _r);
}
exports.networkHasCachedPlayerHeadBlendData = networkHasCachedPlayerHeadBlendData;
function networkHasConfirmedInvite() {
    return _in(0xc42dd763, 0x159f3461, _r);
}
exports.networkHasConfirmedInvite = networkHasConfirmedInvite;
function networkHasControlOfDoor(doorHash) {
    return _in(0xcb3c68ad, 0xb06195df, _ch(doorHash), _r);
}
exports.networkHasControlOfDoor = networkHasControlOfDoor;
function networkHasControlOfEntity(entity) {
    return _in(0x01bf60a5, 0x00e28887, entity, _r);
}
exports.networkHasControlOfEntity = networkHasControlOfEntity;
function networkHasControlOfNetworkId(netId) {
    return _in(0x4d36070f, 0xe0215186, netId, _r);
}
exports.networkHasControlOfNetworkId = networkHasControlOfNetworkId;
function networkHasControlOfPickup(pickup) {
    return _in(0x5bc9495f, 0x0b3b6fa6, pickup, _r);
}
exports.networkHasControlOfPickup = networkHasControlOfPickup;
function networkHasEntityBeenRegisteredWithThisThread(entity) {
    return _in(0xb07d3185, 0xe11657a5, entity, _r);
}
exports.networkHasEntityBeenRegisteredWithThisThread = networkHasEntityBeenRegisteredWithThisThread;
function networkHasFollowInvite() {
    return _in(0x76d9b976, 0xc4c09fde, _r);
}
exports.networkHasFollowInvite = networkHasFollowInvite;
function networkHasHeadset() {
    return _in(0xe870f9f1, 0xf7b4f1fa, _r);
}
exports.networkHasHeadset = networkHasHeadset;
function networkHasInvitedGamer(p0) {
    const [retval, p0_out] = _in(0x4d86cd31, 0xe8976ece, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkHasInvitedGamer = networkHasInvitedGamer;
function networkHasInvitedGamerToTransition(p0) {
    const [retval, p0_out] = _in(0x7284a47b, 0x3540e6cf, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkHasInvitedGamerToTransition = networkHasInvitedGamerToTransition;
function networkHasMadeInviteDecision(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x71dc455f, 0x5cd1c2b1, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkHasMadeInviteDecision = networkHasMadeInviteDecision;
function networkHasPendingInvite() {
    return _in(0xac8c7b9b, 0x88c4a668, _r);
}
exports.networkHasPendingInvite = networkHasPendingInvite;
function networkHasPlayerStartedTransition(player) {
    return _in(0x9ac9ccbf, 0xa8c29795, player, _r);
}
exports.networkHasPlayerStartedTransition = networkHasPlayerStartedTransition;
function networkHasReceivedHostBroadcastData() {
    return _in(0x5d10b379, 0x5f3fc886, _r);
}
exports.networkHasReceivedHostBroadcastData = networkHasReceivedHostBroadcastData;
/**
 * index is always 18 in scripts
 * @param index
 */
function networkHasRosPrivilege(index) {
    return _in(0xa699957e, 0x60d80214, index, _r);
}
exports.networkHasRosPrivilege = networkHasRosPrivilege;
function networkHasRosPrivilegeEndDate(privilege) {
    const [retval, banType_out, timeData_out] = _in(0xc22912b1, 0xd85f26b1, privilege, _i, _i, _r);
    return [retval, banType_out, timeData_out];
}
exports.networkHasRosPrivilegeEndDate = networkHasRosPrivilegeEndDate;
function networkHasRosPrivilegePlayedLastGen() {
    return _in(0x593570c2, 0x89a77688, _r);
}
exports.networkHasRosPrivilegePlayedLastGen = networkHasRosPrivilegePlayedLastGen;
function networkHasRosPrivilegeSpecialEditionContent() {
    return _in(0x91b87c55, 0x093de351, _r);
}
exports.networkHasRosPrivilegeSpecialEditionContent = networkHasRosPrivilegeSpecialEditionContent;
function networkHasSocialClubAccount() {
    return _in(0x67a55896, 0x28e0cff6, _r);
}
exports.networkHasSocialClubAccount = networkHasSocialClubAccount;
function networkHasSocialNetworkingSharingPriv() {
    return _in(0x76bf03fa, 0xdbf154f5, _r);
}
exports.networkHasSocialNetworkingSharingPriv = networkHasSocialNetworkingSharingPriv;
function networkHasTransitionInviteBeenAcked(p0) {
    const [retval, p0_out] = _in(0x3f9990bf, 0x5f22759c, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkHasTransitionInviteBeenAcked = networkHasTransitionInviteBeenAcked;
/**
 * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
 */
function networkHasValidRosCredentials() {
    return _in(0x85443ff4, 0xc328f53b, _r);
}
exports.networkHasValidRosCredentials = networkHasValidRosCredentials;
function networkHasViewGamerUserContentResult(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xcca4318e, 0x1ab03f1f, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkHasViewGamerUserContentResult = networkHasViewGamerUserContentResult;
function networkHashFromGamerHandle(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x58575ac3, 0xcf2ca8ec, _ii(gamerHandle), _r, _ri);
    return [retval, gamerHandle_out];
}
exports.networkHashFromGamerHandle = networkHashFromGamerHandle;
function networkHashFromPlayerHandle(player) {
    return _in(0xbc1d768f, 0x2f5d6c05, player, _r, _ri);
}
exports.networkHashFromPlayerHandle = networkHashFromPlayerHandle;
function networkHaveCommunicationPrivileges(p0, player) {
    return _in(0xaeef48cd, 0xf5b6ce7c, p0, player, _r);
}
exports.networkHaveCommunicationPrivileges = networkHaveCommunicationPrivileges;
function networkHaveOnlinePrivileges() {
    return _in(0x25cb5a9f, 0x37bfd063, _r);
}
exports.networkHaveOnlinePrivileges = networkHaveOnlinePrivileges;
function networkHavePlatformSubscription() {
    return _in(0x5ea784d1, 0x97556507, _r);
}
exports.networkHavePlatformSubscription = networkHavePlatformSubscription;
function networkHaveRosBannedPriv() {
    return _in(0x8020a738, 0x47e0ca7d, _r);
}
exports.networkHaveRosBannedPriv = networkHaveRosBannedPriv;
function networkHaveRosCreateTicketPriv() {
    return _in(0xa0ad7e2a, 0xf5349f61, _r);
}
exports.networkHaveRosCreateTicketPriv = networkHaveRosCreateTicketPriv;
function networkHaveRosLeaderboardWritePriv() {
    return _in(0x422d396f, 0x80a96547, _r);
}
exports.networkHaveRosLeaderboardWritePriv = networkHaveRosLeaderboardWritePriv;
function networkHaveRosMultiplayerPriv() {
    return _in(0x5f91d5d0, 0xb36aa310, _r);
}
exports.networkHaveRosMultiplayerPriv = networkHaveRosMultiplayerPriv;
function networkHaveRosSocialClubPriv() {
    return _in(0x606e4d3e, 0x3cccf3eb, _r);
}
exports.networkHaveRosSocialClubPriv = networkHaveRosSocialClubPriv;
function networkHaveScsPrivateMsgPriv() {
    return _in(0x66b59cff, 0xd78467af, _r);
}
exports.networkHaveScsPrivateMsgPriv = networkHaveScsPrivateMsgPriv;
function networkHaveUserContentPrivileges(p0) {
    return _in(0x72d918c9, 0x9bcacc54, p0, _r);
}
exports.networkHaveUserContentPrivileges = networkHaveUserContentPrivileges;
function networkHideProjectileInCutscene() {
    return _in(0xfac18e73, 0x56bd3210);
}
exports.networkHideProjectileInCutscene = networkHideProjectileInCutscene;
/**
 * p0: Unknown int
 * p1: Unknown int
 * p2: Unknown int
 * p3: Unknown int
 * p4: Unknown always 0 in decompiled scripts
 * p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
 * p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
 * p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
 * p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
 * p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
 *
 * From what I can tell it looks like it does the following:
 * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
 * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
function networkHostTransition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0xa60bb5ce, 0x242bb254, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, _r);
}
exports.networkHostTransition = networkHostTransition;
function networkIgnoreRemoteWaypoints() {
    return _in(0x4c2a9fdc, 0x22377075);
}
exports.networkIgnoreRemoteWaypoints = networkIgnoreRemoteWaypoints;
function networkInitializeCash(wallet, bank) {
    return _in(0x3da5ecd1, 0xa56cba6d, wallet, bank);
}
exports.networkInitializeCash = networkInitializeCash;
function networkInviteGamers(p1, p3) {
    const [retval, p0_out, p2_out] = _in(0x9d80cd1d, 0x0e6327de, _i, p1, _i, p3, _r);
    return [retval, p0_out, p2_out];
}
exports.networkInviteGamers = networkInviteGamers;
function networkInviteGamersToTransition(p1) {
    const [retval, p0_out] = _in(0x4a595c32, 0xf77dff76, _i, p1, _r);
    return [retval, p0_out];
}
exports.networkInviteGamersToTransition = networkInviteGamersToTransition;
function networkIsActivitySession() {
    return _in(0x05095437, 0x424397fa, _r);
}
exports.networkIsActivitySession = networkIsActivitySession;
function networkIsActivitySpectator() {
    return _in(0x12103b9e, 0x0c9f92fb, _r);
}
exports.networkIsActivitySpectator = networkIsActivitySpectator;
function networkIsActivitySpectatorFromHandle(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x2763bbaa, 0x72a7bcb9, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsActivitySpectatorFromHandle = networkIsActivitySpectatorFromHandle;
function networkIsAddingFriend() {
    return _in(0x6ea10160, 0x6f6e4d81, _r);
}
exports.networkIsAddingFriend = networkIsAddingFriend;
function networkIsAnyPlayerNear(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x2e4c123d, 0x1c8a710e, p0, p1, p2, p3, p4, p5, p6, _r);
}
exports.networkIsAnyPlayerNear = networkIsAnyPlayerNear;
function networkIsCableConnected() {
    return _in(0xeffb2545, 0x3d8600f9, _r);
}
exports.networkIsCableConnected = networkIsCableConnected;
/**
 * This would be nice to see if someone is in party chat, but 2 sad notes.
 * 1) It only becomes true if said person is speaking in that party at the time.
 * 2) It will never, become true unless you are in that party with said person.
 * @param gamerHandle
 */
function networkIsChattingInPlatformParty(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x8de9945b, 0xcc9aec52, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsChattingInPlatformParty = networkIsChattingInPlatformParty;
function networkIsClockTimeOverridden() {
    return _in(0xd7c95d32, 0x2ff57522, _r);
}
exports.networkIsClockTimeOverridden = networkIsClockTimeOverridden;
function networkIsCloudAvailable() {
    return _in(0x9a4cf4f4, 0x8ad77302, _r);
}
exports.networkIsCloudAvailable = networkIsCloudAvailable;
function networkIsCloudBackgroundScriptRequestPending() {
    return _in(0x8132c0eb, 0x8b2b3293, _r);
}
exports.networkIsCloudBackgroundScriptRequestPending = networkIsCloudBackgroundScriptRequestPending;
function networkIsConnectedViaRelay(player) {
    return _in(0x16d3d499, 0x02f697bb, player, _r);
}
exports.networkIsConnectedViaRelay = networkIsConnectedViaRelay;
/**
 * This function is hard-coded to always return 1.
 */
function networkIsConnetedToNpPresence() {
    return _in(0x7808619f, 0x31ff22db, _r);
}
exports.networkIsConnetedToNpPresence = networkIsConnetedToNpPresence;
function networkIsDoorNetworked(doorHash) {
    return _in(0xc01e93fa, 0xc20c3346, _ch(doorHash), _r);
}
exports.networkIsDoorNetworked = networkIsDoorNetworked;
/**
 * Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
 * @param entity
 */
function networkIsEntityConcealed(entity) {
    return _in(0x71302ec7, 0x0689052a, entity, _r);
}
exports.networkIsEntityConcealed = networkIsEntityConcealed;
function networkIsEntityFading(entity) {
    return _in(0x422f32cc, 0x7e56abad, entity, _r);
}
exports.networkIsEntityFading = networkIsEntityFading;
function networkIsFindingGamers() {
    return _in(0xdddf64c9, 0x1bfcf0aa, _r);
}
exports.networkIsFindingGamers = networkIsFindingGamers;
function networkIsFriend(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x1a24a179, 0xf9b31654, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsFriend = networkIsFriend;
function networkIsFriendHandleOnline(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x87eb7a3f, 0xfcb314db, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsFriendHandleOnline = networkIsFriendHandleOnline;
function networkIsFriendInMultiplayer(friendName) {
    return _in(0x57005c18, 0x827f3a28, _ts(friendName), _r);
}
exports.networkIsFriendInMultiplayer = networkIsFriendInMultiplayer;
/**
 * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
 * @param friendName
 */
function networkIsFriendInSameTitle(friendName) {
    return _in(0x2ea9a3be, 0xdf3f17b8, _ts(friendName), _r);
}
exports.networkIsFriendInSameTitle = networkIsFriendInSameTitle;
function networkIsFriendIndexOnline(friendIndex) {
    return _in(0xbad8f2a4, 0x2b844821, friendIndex, _r);
}
exports.networkIsFriendIndexOnline = networkIsFriendIndexOnline;
function networkIsFriendOnline(name) {
    return _in(0x425a4453, 0x3437b64d, _ts(name), _r);
}
exports.networkIsFriendOnline = networkIsFriendOnline;
function networkIsGameInProgress() {
    return _in(0x10fab354, 0x28ccc9d7, _r);
}
exports.networkIsGameInProgress = networkIsGameInProgress;
function networkIsGamerBlockedByMe(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xe944c4f5, 0xaf1b5883, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsGamerBlockedByMe = networkIsGamerBlockedByMe;
function networkIsGamerInMySession(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x0f10b05d, 0xdf8d16e9, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsGamerInMySession = networkIsGamerInMySession;
function networkIsGamerMutedByMe(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xce60de01, 0x1b6c7978, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsGamerMutedByMe = networkIsGamerMutedByMe;
function networkIsGamerTalking(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x71c33b22, 0x606cd88a, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsGamerTalking = networkIsGamerTalking;
function networkIsGettingGamerStatus() {
    return _in(0x94a8394d, 0x150b013a, _r);
}
exports.networkIsGettingGamerStatus = networkIsGettingGamerStatus;
function networkIsHandleValid(gamerHandleSize) {
    const [retval, gamerHandle_out] = _in(0x6f79b93b, 0x0a8e4133, _i, gamerHandleSize, _r);
    return [retval, gamerHandle_out];
}
exports.networkIsHandleValid = networkIsHandleValid;
/**
 * If you are host, returns true else returns false.
 */
function networkIsHost() {
    return _in(0x8db296b8, 0x14edda07, _r);
}
exports.networkIsHost = networkIsHost;
function networkIsHostOfThisScript() {
    return _in(0x83cd99a1, 0xe6061ab5, _r);
}
exports.networkIsHostOfThisScript = networkIsHostOfThisScript;
function networkIsInMpCutscene() {
    return _in(0x6cc27c9f, 0xa2040220, _r);
}
exports.networkIsInMpCutscene = networkIsInMpCutscene;
/**
 * Hardcoded to return false.
 */
function networkIsInPlatformParty() {
    return _in(0x2fc5650b, 0x0271cb57, _r);
}
exports.networkIsInPlatformParty = networkIsInPlatformParty;
/**
 * Hardcoded to return false.
 */
function networkIsInPlatformPartyChat() {
    return _in(0xfd8b834a, 0x8ba05048, _r);
}
exports.networkIsInPlatformPartyChat = networkIsInPlatformPartyChat;
function networkIsInSession() {
    return _in(0xca972461, 0x03b63917, _r);
}
exports.networkIsInSession = networkIsInSession;
function networkIsInSpectatorMode() {
    return _in(0x048746e3, 0x88762e11, _r);
}
exports.networkIsInSpectatorMode = networkIsInSpectatorMode;
function networkIsInTransition() {
    return _in(0x68049aef, 0xf83d8f0a, _r);
}
exports.networkIsInTransition = networkIsInTransition;
function networkIsInTutorialSession() {
    return _in(0xada24309, 0xfe08dacf, _r);
}
exports.networkIsInTutorialSession = networkIsInTutorialSession;
function networkIsInactiveProfile(p0) {
    const [retval, p0_out] = _in(0x7e587455, 0x04313a2e, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkIsInactiveProfile = networkIsInactiveProfile;
function networkIsLocalPlayerInvincible() {
    return _in(0x8a8694b4, 0x8715b000, _r);
}
exports.networkIsLocalPlayerInvincible = networkIsLocalPlayerInvincible;
/**
 * This function is hard-coded to always return 0.
 */
function networkIsLoggedInToPsn() {
    return _in(0xa0fa4ec6, 0xa05da44e, _r);
}
exports.networkIsLoggedInToPsn = networkIsLoggedInToPsn;
function networkIsMultiplayerDisabled() {
    return _in(0x97472928, 0x07126eda, _r);
}
exports.networkIsMultiplayerDisabled = networkIsMultiplayerDisabled;
/**
 * Returns true if the specified network id is controlled by someone else.
 * @param netId
 */
function networkIsNetworkIdRemotelyControlled(netId) {
    return _in(0x7242f8b7, 0x41ce1086, netId, _r);
}
exports.networkIsNetworkIdRemotelyControlled = networkIsNetworkIdRemotelyControlled;
/**
 * This function is hard-coded to always return 1.
 */
function networkIsNpAvailable() {
    return _in(0xbd545d44, 0xcce70597, _r);
}
exports.networkIsNpAvailable = networkIsNpAvailable;
/**
 * This function is hard-coded to always return 1.
 */
function networkIsNpPending() {
    return _in(0xebcab9e5, 0x048434f4, _r);
}
exports.networkIsNpPending = networkIsNpPending;
function networkIsOfflineInvitePending() {
    return _in(0x74698374, 0xc45701d2, _r);
}
exports.networkIsOfflineInvitePending = networkIsOfflineInvitePending;
function networkIsParticipantActive(p0) {
    return _in(0x6ff8ff40, 0xb6357d45, p0, _r);
}
exports.networkIsParticipantActive = networkIsParticipantActive;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
function networkIsPendingFriend(p0) {
    return _in(0x0be73da6, 0x984a6e33, p0, _r);
}
exports.networkIsPendingFriend = networkIsPendingFriend;
function networkIsPlatformSubscriptionCheckPending() {
    return _in(0xa8acb645, 0x9542a8c8, _r);
}
exports.networkIsPlatformSubscriptionCheckPending = networkIsPlatformSubscriptionCheckPending;
function networkIsPlayerAParticipant(player) {
    return _in(0x3ca58f6c, 0xb7cbd784, player, _r);
}
exports.networkIsPlayerAParticipant = networkIsPlayerAParticipant;
function networkIsPlayerAParticipantOnScript(player, script, instance_id) {
    return _in(0x1ad5b715, 0x86b94820, player, _ts(script), instance_id, _r);
}
exports.networkIsPlayerAParticipantOnScript = networkIsPlayerAParticipantOnScript;
function networkIsPlayerActive(player) {
    return _in(0xb8dfd30d, 0x6973e135, player, _r);
}
exports.networkIsPlayerActive = networkIsPlayerActive;
function networkIsPlayerBlockedByMe(player) {
    return _in(0x57af1f8e, 0x27483721, player, _r);
}
exports.networkIsPlayerBlockedByMe = networkIsPlayerBlockedByMe;
function networkIsPlayerConcealed(player) {
    return _in(0x919b3c98, 0xed8292f9, player, _r);
}
exports.networkIsPlayerConcealed = networkIsPlayerConcealed;
function networkIsPlayerConnected(player) {
    return _in(0x93dc1be4, 0xe1abe9d1, player, _r);
}
exports.networkIsPlayerConnected = networkIsPlayerConnected;
function networkIsPlayerFading(player) {
    return _in(0x631dc5df, 0xf4b110e3, player, _r);
}
exports.networkIsPlayerFading = networkIsPlayerFading;
function networkIsPlayerInMpCutscene(player) {
    return _in(0x63f9ee20, 0x3c3619f2, player, _r);
}
exports.networkIsPlayerInMpCutscene = networkIsPlayerInMpCutscene;
function networkIsPlayerMutedByMe(player) {
    return _in(0x8c71288a, 0xe68ede39, player, _r);
}
exports.networkIsPlayerMutedByMe = networkIsPlayerMutedByMe;
function networkIsPlayerOnBlocklist(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xad4326fc, 0xa30d62f8, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsPlayerOnBlocklist = networkIsPlayerOnBlocklist;
/**
 * returns true if someone is screaming or talking in a microphone
 * @param player
 */
function networkIsPlayerTalking(player) {
    return _in(0x031e11f3, 0xd447647e, player, _r);
}
exports.networkIsPlayerTalking = networkIsPlayerTalking;
/**
 * Hardcoded to return false.
 */
function networkIsPrivilegeCheckInProgress() {
    return _in(0x64e5c4cc, 0x82847b73, _r);
}
exports.networkIsPrivilegeCheckInProgress = networkIsPrivilegeCheckInProgress;
function networkIsPushToTalkActive() {
    return _in(0xc0d2af00, 0xbcc234ca, _r);
}
exports.networkIsPushToTalkActive = networkIsPushToTalkActive;
function networkIsQueuingForSessionJoin() {
    return _in(0x14922ed3, 0xe38761f0, _r);
}
exports.networkIsQueuingForSessionJoin = networkIsQueuingForSessionJoin;
function networkIsRefreshingRosCredentials() {
    return _in(0x8d11e61a, 0x4abf49cc, _r);
}
exports.networkIsRefreshingRosCredentials = networkIsRefreshingRosCredentials;
function networkIsScriptActive(scriptName, instance_id, p2, position_hash) {
    return _in(0x9d40df90, 0xfad26098, _ts(scriptName), instance_id, p2, position_hash, _r);
}
exports.networkIsScriptActive = networkIsScriptActive;
function networkIsScriptActiveByHash(scriptHash, p1, p2, p3) {
    return _in(0xda7de67f, 0x5fe5ee13, _ch(scriptHash), p1, p2, p3, _r);
}
exports.networkIsScriptActiveByHash = networkIsScriptActiveByHash;
function networkIsSessionActive() {
    return _in(0xd83c2b94, 0xe7508980, _r);
}
exports.networkIsSessionActive = networkIsSessionActive;
function networkIsSessionBusy() {
    return _in(0xf4435d66, 0xa8e2905e, _r);
}
exports.networkIsSessionBusy = networkIsSessionBusy;
/**
 * This checks if player is playing on gta online or not.
 * Please add an if and block your mod if this is "true".
 */
function networkIsSessionStarted() {
    return _in(0x9de624d2, 0xfc4b603f, _r);
}
exports.networkIsSessionStarted = networkIsSessionStarted;
function networkIsShowingSystemUiOrRecentlyRequestedUpsell() {
    return _in(0x7788dfe1, 0x5016a182, _r);
}
exports.networkIsShowingSystemUiOrRecentlyRequestedUpsell = networkIsShowingSystemUiOrRecentlyRequestedUpsell;
/**
 * Returns whether the player is signed into Social Club.
 */
function networkIsSignedIn() {
    return _in(0x054354a9, 0x9211eb96, _r);
}
exports.networkIsSignedIn = networkIsSignedIn;
/**
 * Returns whether the game is not in offline mode.
 *
 * seemed not to work for some ppl
 */
function networkIsSignedOnline() {
    return _in(0x1077788e, 0x268557c2, _r);
}
exports.networkIsSignedOnline = networkIsSignedOnline;
function networkIsThreadANetworkScript(threadId) {
    return _in(0x560b423d, 0x73015e77, threadId, _r);
}
exports.networkIsThreadANetworkScript = networkIsThreadANetworkScript;
/**
 * This function is hard-coded to always return 0.
 */
function networkIsTitleUpdateRequired() {
    return _in(0x6fb7bb36, 0x07d27fa2, _r);
}
exports.networkIsTitleUpdateRequired = networkIsTitleUpdateRequired;
function networkIsTransitionBusy() {
    return _in(0x520f3282, 0xa53d26b7, _r);
}
exports.networkIsTransitionBusy = networkIsTransitionBusy;
function networkIsTransitionClosedCrew() {
    return _in(0x0dbd5d7e, 0x3c5bec3b, _r);
}
exports.networkIsTransitionClosedCrew = networkIsTransitionClosedCrew;
function networkIsTransitionClosedFriends() {
    return _in(0x6512765e, 0x3be78c50, _r);
}
exports.networkIsTransitionClosedFriends = networkIsTransitionClosedFriends;
function networkIsTransitionHost() {
    return _in(0x0b824797, 0xc9bf2159, _r);
}
exports.networkIsTransitionHost = networkIsTransitionHost;
function networkIsTransitionHostFromHandle(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x6b5c83ba, 0x3efe6a10, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkIsTransitionHostFromHandle = networkIsTransitionHostFromHandle;
function networkIsTransitionLeavePostponed() {
    return _in(0xc571d0e7, 0x7d8bbc29, _r);
}
exports.networkIsTransitionLeavePostponed = networkIsTransitionLeavePostponed;
function networkIsTransitionMatchmaking() {
    return _in(0x292564c7, 0x35375edf, _r);
}
exports.networkIsTransitionMatchmaking = networkIsTransitionMatchmaking;
function networkIsTransitionOpenToMatchmaking() {
    return _in(0x37a44944, 0x83b9f5c9, _r);
}
exports.networkIsTransitionOpenToMatchmaking = networkIsTransitionOpenToMatchmaking;
function networkIsTransitionPrivate() {
    return _in(0x5a6aa44f, 0xf8e931e6, _r);
}
exports.networkIsTransitionPrivate = networkIsTransitionPrivate;
function networkIsTransitionSolo() {
    return _in(0x5dc57720, 0x1723960a, _r);
}
exports.networkIsTransitionSolo = networkIsTransitionSolo;
function networkIsTransitionStarted() {
    return _in(0x53fa8340, 0x1d9c07fe, _r);
}
exports.networkIsTransitionStarted = networkIsTransitionStarted;
function networkIsTransitionToGame() {
    return _in(0x9d7696d8, 0xf4fa6cb7, _r);
}
exports.networkIsTransitionToGame = networkIsTransitionToGame;
function networkIsTransitionVisibilityLocked() {
    return _in(0xd0a484cb, 0x2f829fbe, _r);
}
exports.networkIsTransitionVisibilityLocked = networkIsTransitionVisibilityLocked;
function networkIsTunableCloudRequestPending() {
    return _in(0x0467c11e, 0xd88b7d28, _r);
}
exports.networkIsTunableCloudRequestPending = networkIsTunableCloudRequestPending;
function networkIsTutorialSessionChangePending() {
    return _in(0x35f0b98a, 0x8387274d, _r);
}
exports.networkIsTutorialSessionChangePending = networkIsTutorialSessionChangePending;
function networkIsUsingOnlinePromotion() {
    return _in(0x906ca41a, 0x4b74eca4, _r);
}
exports.networkIsUsingOnlinePromotion = networkIsUsingOnlinePromotion;
function networkJoinGroupActivity() {
    return _in(0xa06509a6, 0x91d12be4, _r);
}
exports.networkJoinGroupActivity = networkJoinGroupActivity;
function networkJoinPreviouslyFailedSession() {
    return _in(0x59df7931, 0x7f85a7e0, _r);
}
exports.networkJoinPreviouslyFailedSession = networkJoinPreviouslyFailedSession;
function networkJoinPreviouslyFailedTransition() {
    return _in(0xffe1e5b7, 0x92d92b34, _r);
}
exports.networkJoinPreviouslyFailedTransition = networkJoinPreviouslyFailedTransition;
/**
 * int handle[76];
 * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
 * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
 * NETWORK_JOIN_TRANSITION(uVar2);
 * nothing doin.
 * @param player
 */
function networkJoinTransition(player) {
    return _in(0x9d060b08, 0xcd63321a, player, _r);
}
exports.networkJoinTransition = networkJoinTransition;
function networkKeepEntityCollisionDisabledAfterAnimScene(p0, p1) {
    return _in(0x17c9e241, 0x111a674d, p0, p1);
}
exports.networkKeepEntityCollisionDisabledAfterAnimScene = networkKeepEntityCollisionDisabledAfterAnimScene;
function networkLaunchTransition() {
    return _in(0x2dcf46cb, 0x1a4f0884, _r);
}
exports.networkLaunchTransition = networkLaunchTransition;
function networkLeavePedBehindBeforeCutscene(player, p1) {
    return _in(0xbf22e0f3, 0x2968e967, player, p1);
}
exports.networkLeavePedBehindBeforeCutscene = networkLeavePedBehindBeforeCutscene;
/**
 * p4 and p5 are always 0 in scripts
 * @param player
 * @param x
 * @param y
 * @param z
 * @param p4
 * @param p5
 */
function networkLeavePedBehindBeforeWarp(player, x, y, z, p4, p5) {
    return _in(0x9769f811, 0xd1785b03, player, _fv(x), _fv(y), _fv(z), p4, p5);
}
exports.networkLeavePedBehindBeforeWarp = networkLeavePedBehindBeforeWarp;
function networkLeaveTransition() {
    return _in(0xd23a1a81, 0x5d21db19, _r);
}
exports.networkLeaveTransition = networkLeaveTransition;
function networkManualDeleteCharacter(characterSlot) {
    return _in(0x821418c7, 0x27fcacd7, characterSlot);
}
exports.networkManualDeleteCharacter = networkManualDeleteCharacter;
function networkMarkAsPreferredActivity(p0) {
    return _in(0x261e97ad, 0x7bcf3d40, p0);
}
exports.networkMarkAsPreferredActivity = networkMarkAsPreferredActivity;
function networkMarkAsWaitingAsync(p0) {
    return _in(0x39917e1b, 0x4cb0f911, p0);
}
exports.networkMarkAsWaitingAsync = networkMarkAsWaitingAsync;
function networkMarkTransitionGamerAsFullyJoined(p0) {
    const [retval, p0_out] = _in(0x5728bb6d, 0x63e3ff1d, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkMarkTransitionGamerAsFullyJoined = networkMarkTransitionGamerAsFullyJoined;
function networkMemberIdFromGamerHandle(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0xc8263013, 0x2081bb6f, _ii(gamerHandle), _r, _s);
    return [retval, gamerHandle_out];
}
exports.networkMemberIdFromGamerHandle = networkMemberIdFromGamerHandle;
function networkMoneyCanBet(amount, p1, p2) {
    return _in(0x81404f3d, 0xc124fe5b, amount, p1, p2, _r);
}
exports.networkMoneyCanBet = networkMoneyCanBet;
function networkNeedToStartNewGameButBlocked() {
    return _in(0x53c10c8b, 0xd774f2c9, _r);
}
exports.networkNeedToStartNewGameButBlocked = networkNeedToStartNewGameButBlocked;
function networkOnReturnToSinglePlayer() {
    return _in(0x283b6062, 0xa2c01e9b);
}
exports.networkOnReturnToSinglePlayer = networkOnReturnToSinglePlayer;
function networkOpenTransitionMatchmaking() {
    return _in(0x2b3a8f7c, 0xa3a38fde);
}
exports.networkOpenTransitionMatchmaking = networkOpenTransitionMatchmaking;
/**
 * Could possibly bypass being muted or automatically muted
 * @param player
 * @param toggle
 */
function networkOverrideChatRestrictions(player, toggle) {
    return _in(0x3039ae5a, 0xd2c9c0c4, player, toggle);
}
exports.networkOverrideChatRestrictions = networkOverrideChatRestrictions;
function networkOverrideClockRate(ms) {
    return _in(0x42bf1d2e, 0x723b6d7e, ms);
}
exports.networkOverrideClockRate = networkOverrideClockRate;
/**
 * Works in Singleplayer too.
 * Passing wrong data (e.g. hours above 23) will cause the game to crash.
 * @param hours
 * @param minutes
 * @param seconds
 */
function networkOverrideClockTime(hours, minutes, seconds) {
    return _in(0xe679e3e0, 0x6e363892, hours, minutes, seconds);
}
exports.networkOverrideClockTime = networkOverrideClockTime;
function networkOverrideCoordsAndHeading(entity, x, y, z, heading) {
    return _in(0xa7e30de9, 0x272b6d49, entity, _fv(x), _fv(y), _fv(z), _fv(heading));
}
exports.networkOverrideCoordsAndHeading = networkOverrideCoordsAndHeading;
/**
 * R* uses this to hear all player when spectating.
 * It allows you to hear other online players when their chat is on none, crew and or friends
 * @param player
 * @param toggle
 */
function networkOverrideReceiveRestrictions(player, toggle) {
    return _in(0xddf73e2b, 0x1fec5ab4, player, toggle);
}
exports.networkOverrideReceiveRestrictions = networkOverrideReceiveRestrictions;
/**
 * p0 is always false in scripts.
 * @param toggle
 */
function networkOverrideReceiveRestrictionsAll(toggle) {
    return _in(0x0ff2862b, 0x61a58af9, toggle);
}
exports.networkOverrideReceiveRestrictionsAll = networkOverrideReceiveRestrictionsAll;
/**
 * This is used alongside the native,
 * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
 * @param player
 * @param toggle
 */
function networkOverrideSendRestrictions(player, toggle) {
    return _in(0x97dd4c59, 0x44cc2e6a, player, toggle);
}
exports.networkOverrideSendRestrictions = networkOverrideSendRestrictions;
function networkOverrideSendRestrictionsAll(toggle) {
    return _in(0x57b192b4, 0xd4ad23d5, toggle);
}
exports.networkOverrideSendRestrictionsAll = networkOverrideSendRestrictionsAll;
function networkOverrideTeamRestrictions(team, toggle) {
    return _in(0x6f697a66, 0xce78674e, team, toggle);
}
exports.networkOverrideTeamRestrictions = networkOverrideTeamRestrictions;
function networkOverrideTransitionChat(p0) {
    return _in(0xaf66059a, 0x131aa269, p0);
}
exports.networkOverrideTransitionChat = networkOverrideTransitionChat;
function networkPatchPostCutsceneHs4fTunEnt(ped) {
    return _in(0xf0bc9bcd, 0x24a511d5, ped);
}
exports.networkPatchPostCutsceneHs4fTunEnt = networkPatchPostCutsceneHs4fTunEnt;
function networkPayEmployeeWage(p0, p1, p2) {
    return _in(0x5fd5ed82, 0xcbbe9989, p0, p1, p2);
}
exports.networkPayEmployeeWage = networkPayEmployeeWage;
function networkPayMatchEntryFee(amount, matchId, p2, p3) {
    return _in(0x9346e14f, 0x2af74d46, amount, _ts(matchId), p2, p3);
}
exports.networkPayMatchEntryFee = networkPayMatchEntryFee;
function networkPermissionsHasGamerRecord(gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x559ebf90, 0x1a8c68e0, _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkPermissionsHasGamerRecord = networkPermissionsHasGamerRecord;
function networkPlayerGetCheaterReason() {
    return _in(0x172f75b6, 0xee2233ba, _r, _ri);
}
exports.networkPlayerGetCheaterReason = networkPlayerGetCheaterReason;
/**
 * Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
 * @param player
 */
function networkPlayerGetName(player) {
    return _in(0x7718d2e2, 0x060837d2, player, _r, _s);
}
exports.networkPlayerGetName = networkPlayerGetName;
/**
 * Returns a string of the player's Rockstar Id.
 * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
 * @param player
 * @param userID
 */
function networkPlayerGetUserid(player, userID) {
    const [retval, userID_out] = _in(0x4927fc39, 0xcd0869a0, player, _ii(userID), _r, _s);
    return [retval, userID_out];
}
exports.networkPlayerGetUserid = networkPlayerGetUserid;
function networkPlayerHasHeadset(player) {
    return _in(0x3fb99a8b, 0x08d18fd6, player, _r);
}
exports.networkPlayerHasHeadset = networkPlayerHasHeadset;
/**
 * Does exactly the same thing as PLAYER_ID()
 */
function networkPlayerIdToInt() {
    return _in(0xee68096f, 0x9f37341e, _r, _ri);
}
exports.networkPlayerIdToInt = networkPlayerIdToInt;
function networkPlayerIndexIsCheater(player) {
    return _in(0x565e430d, 0xb3b05bec, player, _r);
}
exports.networkPlayerIndexIsCheater = networkPlayerIndexIsCheater;
function networkPlayerIsBadsport() {
    return _in(0x19d8da0e, 0x5a68045a, _r);
}
exports.networkPlayerIsBadsport = networkPlayerIsBadsport;
function networkPlayerIsCheater() {
    return _in(0x655b91f1, 0x495a9090, _r);
}
exports.networkPlayerIsCheater = networkPlayerIsCheater;
/**
 * Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
 * Returns always false in Singleplayer.
 *
 * No longer used for dev checks since first mods were released on PS3 & 360.
 * R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
 * if that is present it will unlock dev stuff.
 * @param player
 */
function networkPlayerIsRockstarDev(player) {
    return _in(0x544abdda, 0x3b409b6d, player, _r);
}
exports.networkPlayerIsRockstarDev = networkPlayerIsRockstarDev;
function networkPreventScriptHostMigration() {
    return _in(0x2302c026, 0x4ea58d31);
}
exports.networkPreventScriptHostMigration = networkPreventScriptHostMigration;
function networkQueryRespawnResults(p0) {
    const [retval, p0_out] = _in(0x3c891a25, 0x1567dfce, _ii(p0), _r, _ri);
    return [retval, p0_out];
}
exports.networkQueryRespawnResults = networkQueryRespawnResults;
function networkQueueGamerForStatus(p0) {
    const [retval, p0_out] = _in(0x85a0ef54, 0xa500882c, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkQueueGamerForStatus = networkQueueGamerForStatus;
function networkQuitMpToDesktop() {
    return _in(0x45a83257, 0xed02d9bc);
}
exports.networkQuitMpToDesktop = networkQuitMpToDesktop;
function networkReceivePlayerJobshareCash(value, gamerHandle) {
    return _in(0x56a3b519, 0x44c50598, value, _ii(gamerHandle));
}
exports.networkReceivePlayerJobshareCash = networkReceivePlayerJobshareCash;
/**
 * index
 * -------
 * See function sub_1005 in am_boat_taxi.ysc
 *
 * context
 * ----------
 * "BACKUP_VAGOS"
 * "BACKUP_LOST"
 * "BACKUP_FAMILIES"
 * "HIRE_MUGGER"
 * "HIRE_MERCENARY"
 * "BUY_CARDROPOFF"
 * "HELI_PICKUP"
 * "BOAT_PICKUP"
 * "CLEAR_WANTED"
 * "HEAD_2_HEAD"
 * "CHALLENGE"
 * "SHARE_LAST_JOB"
 * "DEFAULT"
 *
 * reason
 * ---------
 * "NOTREACHTARGET"
 * "TARGET_ESCAPE"
 * "DELIVERY_FAIL"
 * "NOT_USED"
 * "TEAM_QUIT"
 * "SERVER_ERROR"
 * "RECEIVE_LJ_L"
 * "CHALLENGE_PLAYER_LEFT"
 * "DEFAULT"
 *
 * unk
 * -----
 * Unknown bool value
 *
 *
 * @param index
 * @param context
 * @param reason
 * @param p3
 */
function networkRefundCash(index, context, reason, p3) {
    return _in(0xf9c812cd, 0x7c46e817, index, _ts(context), _ts(reason), p3);
}
exports.networkRefundCash = networkRefundCash;
function networkRegisterEntityAsNetworked(entity) {
    return _in(0x06faacd6, 0x25d80caa, entity);
}
exports.networkRegisterEntityAsNetworked = networkRegisterEntityAsNetworked;
function networkRegisterHighFrequencyHostBroadcastVariables(p0, p1, p2) {
    return _in(0xea8c0ddb, 0x10e2822a, p0, p1, p2);
}
exports.networkRegisterHighFrequencyHostBroadcastVariables = networkRegisterHighFrequencyHostBroadcastVariables;
function networkRegisterHighFrequencyPlayerBroadcastVariables(p0, p1, p2) {
    return _in(0xd6d7478c, 0xa62b8d41, p0, p1, p2);
}
exports.networkRegisterHighFrequencyPlayerBroadcastVariables = networkRegisterHighFrequencyPlayerBroadcastVariables;
function networkRegisterHostBroadcastVariables(numVars, debugName) {
    return _in(0x3e9b2f01, 0xc50df595, _i, numVars, _ts(debugName));
}
exports.networkRegisterHostBroadcastVariables = networkRegisterHostBroadcastVariables;
function networkRegisterPlayerBroadcastVariables(numVars, debugName) {
    return _in(0x3364aa97, 0x340ca215, _i, numVars, _ts(debugName));
}
exports.networkRegisterPlayerBroadcastVariables = networkRegisterPlayerBroadcastVariables;
function networkRemainInGameChat(p0) {
    return _in(0xcfeb46dc, 0xd7d8d5eb, p0);
}
exports.networkRemainInGameChat = networkRemainInGameChat;
function networkRemoveAllQueuedJoinRequests() {
    return _in(0x25d990f8, 0xe0e3f13c);
}
exports.networkRemoveAllQueuedJoinRequests = networkRemoveAllQueuedJoinRequests;
function networkRemoveAllTransitionInvite() {
    return _in(0x726e0375, 0xc7a26368);
}
exports.networkRemoveAllTransitionInvite = networkRemoveAllTransitionInvite;
function networkRemoveAndCancelAllInvites() {
    return _in(0xebf8284d, 0x8cadeb53);
}
exports.networkRemoveAndCancelAllInvites = networkRemoveAndCancelAllInvites;
function networkRemoveAndCancelAllTransitionInvites() {
    return _in(0xf083835b, 0x70ba9bfe);
}
exports.networkRemoveAndCancelAllTransitionInvites = networkRemoveAndCancelAllTransitionInvites;
function networkRemoveEntityArea(areaHandle) {
    return _in(0x93cf869b, 0xaa0c4874, areaHandle, _r);
}
exports.networkRemoveEntityArea = networkRemoveEntityArea;
function networkRemoveInvalidObjectModel(modelHash) {
    return _in(0x791edb58, 0x03b2f468, _ch(modelHash));
}
exports.networkRemoveInvalidObjectModel = networkRemoveInvalidObjectModel;
function networkRemovePresenceInvite(p0) {
    return _in(0xf0210268, 0xdb0974b1, p0, _r);
}
exports.networkRemovePresenceInvite = networkRemovePresenceInvite;
function networkRemoveTransitionInvite(p0) {
    return _in(0x7524b431, 0xb2e6f7ee, _ii(p0));
}
exports.networkRemoveTransitionInvite = networkRemoveTransitionInvite;
function networkReportCodeTamper() {
    return _in(0x5626d9d6, 0x810730d5);
}
exports.networkReportCodeTamper = networkReportCodeTamper;
function networkRequestCloudBackgroundScripts() {
    return _in(0x924426bf, 0xfd82e915, _r);
}
exports.networkRequestCloudBackgroundScripts = networkRequestCloudBackgroundScripts;
function networkRequestCloudTunables() {
    return _in(0x42fb3b53, 0x2d526e6c);
}
exports.networkRequestCloudTunables = networkRequestCloudTunables;
function networkRequestControlOfDoor(doorID) {
    return _in(0x870ddfd5, 0xa4a796e4, doorID, _r);
}
exports.networkRequestControlOfDoor = networkRequestControlOfDoor;
function networkRequestControlOfEntity(entity) {
    return _in(0xb69317bf, 0x5e782347, entity, _r);
}
exports.networkRequestControlOfEntity = networkRequestControlOfEntity;
function networkRequestControlOfNetworkId(netId) {
    return _in(0xa670b366, 0x2faffbd0, netId, _r);
}
exports.networkRequestControlOfNetworkId = networkRequestControlOfNetworkId;
/**
 * Triggers a CEventNetworkInviteConfirmed event
 */
function networkRequestInviteConfirmedEvent() {
    return _in(0x62a0296c, 0x1bb1ceb3, _r);
}
exports.networkRequestInviteConfirmedEvent = networkRequestInviteConfirmedEvent;
function networkRequestToBeHostOfThisScript() {
    return _in(0x741a3d83, 0x80319a81);
}
exports.networkRequestToBeHostOfThisScript = networkRequestToBeHostOfThisScript;
function networkResetBodyTracker() {
    return _in(0x72433699, 0xb4e6dd64);
}
exports.networkResetBodyTracker = networkResetBodyTracker;
/**
 * Hardcoded to return true.
 */
function networkResolvePrivilegeUserContent() {
    return _in(0xde922585, 0x4f37bf72, _r);
}
exports.networkResolvePrivilegeUserContent = networkResolvePrivilegeUserContent;
function networkResurrectLocalPlayer(x, y, z, heading, p4, changetime, p6, p7, p8) {
    return _in(0xea23c49e, 0xaa83acfb, _fv(x), _fv(y), _fv(z), _fv(heading), p4, changetime, p6, p7, p8);
}
exports.networkResurrectLocalPlayer = networkResurrectLocalPlayer;
function networkRetainActivityGroup() {
    return _in(0xb13e88e6, 0x55e5a3bc);
}
exports.networkRetainActivityGroup = networkRetainActivityGroup;
function networkSeedRandomNumberGenerator(seed) {
    return _in(0xf1b84178, 0xf8674195, seed);
}
exports.networkSeedRandomNumberGenerator = networkSeedRandomNumberGenerator;
/**
 * Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
 * @param gamerHandle
 * @param p1
 * @param dataCount
 * @param p3
 */
function networkSendImportantTransitionInviteViaPresence(p1, dataCount, p3) {
    const [retval, gamerHandle_out] = _in(0x1171a97a, 0x3d3981b6, _i, _ts(p1), dataCount, p3, _r);
    return [retval, gamerHandle_out];
}
exports.networkSendImportantTransitionInviteViaPresence = networkSendImportantTransitionInviteViaPresence;
function networkSendInviteViaPresence(p1, dataCount, p3) {
    const [retval, gamerHandle_out] = _in(0xc3c7a6af, 0xdb244624, _i, _ts(p1), dataCount, p3, _r);
    return [retval, gamerHandle_out];
}
exports.networkSendInviteViaPresence = networkSendInviteViaPresence;
function networkSendQueuedJoinRequest() {
    return _in(0xfa2888e3, 0x833c8e96);
}
exports.networkSendQueuedJoinRequest = networkSendQueuedJoinRequest;
/**
 * Message is limited to 64 characters.
 * @param message
 * @param gamerHandle
 */
function networkSendTextMessage(message, gamerHandle) {
    const [retval, gamerHandle_out] = _in(0x3a214f2e, 0xc889b100, _ts(message), _ii(gamerHandle), _r);
    return [retval, gamerHandle_out];
}
exports.networkSendTextMessage = networkSendTextMessage;
function networkSendTransitionGamerInstruction(p1, p2, p3, p4) {
    const [retval, gamerHandle_out] = _in(0x31d1d2b8, 0x58d25e6b, _i, _ts(p1), p2, p3, p4, _r);
    return [retval, gamerHandle_out];
}
exports.networkSendTransitionGamerInstruction = networkSendTransitionGamerInstruction;
function networkSendTransitionInviteViaPresence(p1, dataCount, p3) {
    const [retval, gamerHandle_out] = _in(0xc116ff9b, 0x4d488291, _i, _ts(p1), dataCount, p3, _r);
    return [retval, gamerHandle_out];
}
exports.networkSendTransitionInviteViaPresence = networkSendTransitionInviteViaPresence;
function networkServiceEarnGangopsRivalDelivery(earnedMoney) {
    return _in(0x1b882107, 0xc23a9022, earnedMoney);
}
exports.networkServiceEarnGangopsRivalDelivery = networkServiceEarnGangopsRivalDelivery;
/**
 * groupId range: [0, 4]
 * @param groupId
 */
function networkSessionAddActiveMatchmakingGroup(groupId) {
    return _in(0xcae55f48, 0xd3d7875c, groupId);
}
exports.networkSessionAddActiveMatchmakingGroup = networkSessionAddActiveMatchmakingGroup;
function networkSessionBlockJoinRequests(toggle) {
    return _in(0xa7366748, 0x4d7037c3, toggle);
}
exports.networkSessionBlockJoinRequests = networkSessionBlockJoinRequests;
function networkSessionCancelInvite() {
    return _in(0x2fbf47b1, 0xb36d36f9);
}
exports.networkSessionCancelInvite = networkSessionCancelInvite;
/**
 * num player slots allowed in session, seems to work? 32 max
 * @param slots
 * @param p1
 */
function networkSessionChangeSlots(slots, p1) {
    return _in(0xb4ab419e, 0x0d86acae, slots, p1);
}
exports.networkSessionChangeSlots = networkSessionChangeSlots;
function networkSessionDoActivityQuickmatch(p0, p1, p2, p3, p4) {
    return _in(0xbe3e347a, 0x87aceb82, p0, p1, p2, p3, p4, _r);
}
exports.networkSessionDoActivityQuickmatch = networkSessionDoActivityQuickmatch;
/**
 * p4 seems to be unused in 1.60/build 2628
 * @param crewId
 * @param p1
 * @param p2
 * @param maxPlayers
 */
function networkSessionDoCrewMatchmaking(crewId, p1, p2, maxPlayers) {
    return _in(0x94bc51e9, 0x449d917f, crewId, p1, p2, maxPlayers, _r);
}
exports.networkSessionDoCrewMatchmaking = networkSessionDoCrewMatchmaking;
function networkSessionDoFreeroamQuickmatch(p0, p1, p2) {
    return _in(0x330ed4d0, 0x5491934f, p0, p1, p2, _r);
}
exports.networkSessionDoFreeroamQuickmatch = networkSessionDoFreeroamQuickmatch;
function networkSessionDoFriendMatchmaking(p0, p1, p2) {
    return _in(0x2cfc76e0, 0xd087c994, p0, p1, p2, _r);
}
exports.networkSessionDoFriendMatchmaking = networkSessionDoFriendMatchmaking;
/**
 * p0 is always false and p1 varies.
 * NETWORK_SESSION_END(0, 1)
 * NETWORK_SESSION_END(0, 0)
 * Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
 * @param p0
 * @param p1
 */
function networkSessionEnd(p0, p1) {
    return _in(0xa02e5956, 0x2d711006, p0, p1, _r);
}
exports.networkSessionEnd = networkSessionEnd;
function networkSessionForceCancelInvite() {
    return _in(0xa29177f7, 0x703b5644);
}
exports.networkSessionForceCancelInvite = networkSessionForceCancelInvite;
function networkSessionGetHostAimPreference() {
    return _in(0xdffa5be8, 0x381c3314, _r, _ri);
}
exports.networkSessionGetHostAimPreference = networkSessionGetHostAimPreference;
function networkSessionGetInviter(gamerHandle) {
    return _in(0xe57397b4, 0xa3429dd0, _ii(gamerHandle));
}
exports.networkSessionGetInviter = networkSessionGetInviter;
function networkSessionGetKickVote(player) {
    return _in(0xd6d09a6f, 0x32f49ef1, player, _r);
}
exports.networkSessionGetKickVote = networkSessionGetKickVote;
function networkSessionGetMatchmakingGroupFree(p0) {
    return _in(0x56ce8208, 0x30ef040b, p0, _r, _ri);
}
exports.networkSessionGetMatchmakingGroupFree = networkSessionGetMatchmakingGroupFree;
function networkSessionGetPrivateSlots() {
    return _in(0x53afd64c, 0x6758f2f9, _r, _ri);
}
exports.networkSessionGetPrivateSlots = networkSessionGetPrivateSlots;
/**
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * @param p0
 * @param maxPlayers
 * @param p2
 */
function networkSessionHost(p0, maxPlayers, p2) {
    return _in(0x6f3d4ed9, 0xbee4e61d, p0, maxPlayers, p2, _r);
}
exports.networkSessionHost = networkSessionHost;
function networkSessionHostClosed(p0, maxPlayers) {
    return _in(0xed34c0c0, 0x2c098bb7, p0, maxPlayers, _r);
}
exports.networkSessionHostClosed = networkSessionHostClosed;
/**
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * @param p0
 * @param maxPlayers
 */
function networkSessionHostFriendsOnly(p0, maxPlayers) {
    return _in(0xb9cfd27a, 0x5d578d83, p0, maxPlayers, _r);
}
exports.networkSessionHostFriendsOnly = networkSessionHostFriendsOnly;
/**
 * Loads up the map that is loaded when beeing in mission creator
 * Player gets placed in a mix between online/offline mode
 * p0 is always 2 in R* scripts.
 *
 * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
 * @param p0
 */
function networkSessionHostSinglePlayer(p0) {
    return _in(0xc74c33fc, 0xa52856d5, p0);
}
exports.networkSessionHostSinglePlayer = networkSessionHostSinglePlayer;
/**
 * Seems to be true while "Getting GTA Online session details" shows up.
 */
function networkSessionIsAwaitingInviteResponse() {
    return _in(0xd313de83, 0x394af134, _r);
}
exports.networkSessionIsAwaitingInviteResponse = networkSessionIsAwaitingInviteResponse;
function networkSessionIsClosedCrew() {
    return _in(0x74732c6c, 0xa90da2b4, _r);
}
exports.networkSessionIsClosedCrew = networkSessionIsClosedCrew;
function networkSessionIsClosedFriends() {
    return _in(0xfbcfa2ea, 0x2e206890, _r);
}
exports.networkSessionIsClosedFriends = networkSessionIsClosedFriends;
function networkSessionIsDisplayingInviteConfirmation() {
    return _in(0xbdb6f89c, 0x729cf388, _r);
}
exports.networkSessionIsDisplayingInviteConfirmation = networkSessionIsDisplayingInviteConfirmation;
function networkSessionIsInVoiceSession() {
    return _in(0x855bc388, 0x18f6f684, _r);
}
exports.networkSessionIsInVoiceSession = networkSessionIsInVoiceSession;
function networkSessionIsPrivate() {
    return _in(0xcef70aa5, 0xb3f89ba1, _r);
}
exports.networkSessionIsPrivate = networkSessionIsPrivate;
function networkSessionIsSolo() {
    return _in(0xf3929c23, 0x79b60cce, _r);
}
exports.networkSessionIsSolo = networkSessionIsSolo;
function networkSessionIsVisible() {
    return _in(0xba416d68, 0xc631496a, _r);
}
exports.networkSessionIsVisible = networkSessionIsVisible;
function networkSessionIsVoiceSessionActive() {
    return _in(0xb5d3453c, 0x98456528, _r);
}
exports.networkSessionIsVoiceSessionActive = networkSessionIsVoiceSessionActive;
function networkSessionIsVoiceSessionBusy() {
    return _in(0xef0912dd, 0xf7c4cb4b, _r);
}
exports.networkSessionIsVoiceSessionBusy = networkSessionIsVoiceSessionBusy;
function networkSessionJoinInvite() {
    return _in(0xc6f8ab8a, 0x4189cf3a);
}
exports.networkSessionJoinInvite = networkSessionJoinInvite;
/**
 * Only works as host.
 * @param player
 */
function networkSessionKickPlayer(player) {
    return _in(0xfa8904dc, 0x5f304220, player);
}
exports.networkSessionKickPlayer = networkSessionKickPlayer;
function networkSessionLeave(p0) {
    return _in(0xb9351a07, 0xa0d458b1, p0, _r);
}
exports.networkSessionLeave = networkSessionLeave;
function networkSessionLeaveSinglePlayer() {
    return _in(0x34427754, 0x28fd2daa);
}
exports.networkSessionLeaveSinglePlayer = networkSessionLeaveSinglePlayer;
function networkSessionMarkVisible(toggle) {
    return _in(0x271cc6ab, 0x59ebf9a5, toggle);
}
exports.networkSessionMarkVisible = networkSessionMarkVisible;
function networkSessionReserveSlotsTransition(p0, p1, p2) {
    return _in(0x041c7f2a, 0x6c9894e6, p0, p1, p2, _r);
}
exports.networkSessionReserveSlotsTransition = networkSessionReserveSlotsTransition;
function networkSessionSetCrewLimitMaxMembersTransition(p0) {
    return _in(0x702bc4d6, 0x05522539, p0);
}
exports.networkSessionSetCrewLimitMaxMembersTransition = networkSessionSetCrewLimitMaxMembersTransition;
function networkSessionSetGamemode(p0) {
    return _in(0x600f8cb3, 0x1c7aab6e, p0);
}
exports.networkSessionSetGamemode = networkSessionSetGamemode;
function networkSessionSetMatchmakingGroup(matchmakingGroup) {
    return _in(0x49ec8030, 0xf5015f8b, matchmakingGroup);
}
exports.networkSessionSetMatchmakingGroup = networkSessionSetMatchmakingGroup;
/**
 * playerType is an unsigned int from 0 to 4
 * 0 = regular joiner
 * 4 = spectator
 * @param playerType
 * @param playerCount
 */
function networkSessionSetMatchmakingGroupMax(playerType, playerCount) {
    return _in(0x8b6a4dd0, 0xaf9ce215, playerType, playerCount);
}
exports.networkSessionSetMatchmakingGroupMax = networkSessionSetMatchmakingGroupMax;
/**
 * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
 * @param p0
 */
function networkSessionSetMatchmakingMentalState(p0) {
    return _in(0xf1eea2dd, 0xa9ffa69d, p0);
}
exports.networkSessionSetMatchmakingMentalState = networkSessionSetMatchmakingMentalState;
function networkSessionSetMatchmakingPropertyId(p0) {
    return _in(0x3f52e880, 0xaaf6c8ca, p0);
}
exports.networkSessionSetMatchmakingPropertyId = networkSessionSetMatchmakingPropertyId;
function networkSessionSetNumBosses(num) {
    return _in(0x59d42168, 0x3d31835a, num);
}
exports.networkSessionSetNumBosses = networkSessionSetNumBosses;
function networkSessionSetScriptValidateJoin() {
    return _in(0x1153fa02, 0xa659051c);
}
exports.networkSessionSetScriptValidateJoin = networkSessionSetScriptValidateJoin;
function networkSessionSetUniqueCrewLimit(p0) {
    return _in(0xf49abc20, 0xd8552257, p0);
}
exports.networkSessionSetUniqueCrewLimit = networkSessionSetUniqueCrewLimit;
function networkSessionSetUniqueCrewLimitTransition(p0) {
    return _in(0x4811bbac, 0x21c5fcd5, p0);
}
exports.networkSessionSetUniqueCrewLimitTransition = networkSessionSetUniqueCrewLimitTransition;
function networkSessionSetUniqueCrewOnlyCrewsTransition(p0) {
    return _in(0x5539c3eb, 0xf104a53a, p0);
}
exports.networkSessionSetUniqueCrewOnlyCrewsTransition = networkSessionSetUniqueCrewOnlyCrewsTransition;
function networkSessionValidateJoin(p0) {
    return _in(0xc19f6c8e, 0x7865a6ff, p0);
}
exports.networkSessionValidateJoin = networkSessionValidateJoin;
function networkSessionVoiceConnectToPlayer(gamerHandle) {
    return _in(0xabd5e88b, 0x8a2d3db2, _ii(gamerHandle));
}
exports.networkSessionVoiceConnectToPlayer = networkSessionVoiceConnectToPlayer;
function networkSessionVoiceHost() {
    return _in(0x9c155670, 0x5f864230, _r);
}
exports.networkSessionVoiceHost = networkSessionVoiceHost;
function networkSessionVoiceLeave() {
    return _in(0x6793e42b, 0xe02b575d, _r);
}
exports.networkSessionVoiceLeave = networkSessionVoiceLeave;
function networkSessionVoiceRespondToRequest(p0, p1) {
    return _in(0x7f8413b7, 0xfc2aa6b9, p0, p1);
}
exports.networkSessionVoiceRespondToRequest = networkSessionVoiceRespondToRequest;
function networkSessionVoiceSetTimeout(timeout) {
    return _in(0x5b8ed3db, 0x018927b1, timeout);
}
exports.networkSessionVoiceSetTimeout = networkSessionVoiceSetTimeout;
function networkSessionWasInvited() {
    return _in(0x23dfb504, 0x655d0ce4, _r);
}
exports.networkSessionWasInvited = networkSessionWasInvited;
function networkSetActivityPlayerMax(p0) {
    return _in(0x0e4f77f7, 0xb9d74d84, p0);
}
exports.networkSetActivityPlayerMax = networkSetActivityPlayerMax;
function networkSetActivitySpectator(toggle) {
    return _in(0x75138790, 0xb4359a74, toggle);
}
exports.networkSetActivitySpectator = networkSetActivitySpectator;
function networkSetActivitySpectatorMax(maxSpectators) {
    return _in(0x9d277b76, 0xd1d12222, maxSpectators);
}
exports.networkSetActivitySpectatorMax = networkSetActivitySpectatorMax;
function networkSetAntagonisticToPlayer(toggle, player) {
    return _in(0x5c707a66, 0x7df8b9fa, toggle, player);
}
exports.networkSetAntagonisticToPlayer = networkSetAntagonisticToPlayer;
function networkSetAttributeDamageToPlayer(ped, player) {
    return _in(0x0ede326d, 0x47cd0f3e, ped, player, _r);
}
exports.networkSetAttributeDamageToPlayer = networkSetAttributeDamageToPlayer;
function networkSetCanReceiveRsInvites(p0) {
    return _in(0x68980414, 0x688f7f9d, p0);
}
exports.networkSetCanReceiveRsInvites = networkSetCanReceiveRsInvites;
function networkSetCurrentChatOption(newChatOption) {
    return _in(0x3dad0026, 0x5fbf356b, newChatOption);
}
exports.networkSetCurrentChatOption = networkSetCurrentChatOption;
function networkSetCurrentDataManagerHandle(p0) {
    const [retval, p0_out] = _in(0x796a87b3, 0xb68d1f3d, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkSetCurrentDataManagerHandle = networkSetCurrentDataManagerHandle;
function networkSetCurrentPublicContentId(missionId) {
    return _in(0x2c863acd, 0xcd12b3db, _ts(missionId));
}
exports.networkSetCurrentPublicContentId = networkSetCurrentPublicContentId;
/**
 * mpSettingSpawn:
 *
 * enum eMpSettingSpawn
 * {
 * MP_SETTING_SPAWN_NULL,
 * MP_SETTING_SPAWN_PROPERTY,
 * MP_SETTING_SPAWN_LAST_POSITION,
 * MP_SETTING_SPAWN_GARAGE,
 * MP_SETTING_SPAWN_RANDOM,
 * MP_SETTING_SPAWN_PRIVATE_YACHT,
 * MP_SETTING_SPAWN_OFFICE,
 * MP_SETTING_SPAWN_CLUBHOUSE,
 * MP_SETTING_SPAWN_IE_WAREHOUSE,
 * MP_SETTING_SPAWN_BUNKER,
 * MP_SETTING_SPAWN_HANGAR,
 * MP_SETTING_SPAWN_DEFUNCT_BASE,
 * MP_SETTING_SPAWN_NIGHTCLUB,
 * MP_SETTING_SPAWN_ARENA_GARAGE,
 * MP_SETTING_SPAWN_CASINO_APARTMENT,
 * MP_SETTING_SPAWN_ARCADE,
 * MP_SETTING_SPAWN_SUBMARINE,
 * MP_SETTING_SPAWN_CAR_MEET,
 * MP_SETTING_SPAWN_AUTO_SHOP,
 * MP_SETTING_SPAWN_FIXER_HQ,
 * MP_SETTING_SPAWN_MAX,
 * };
 * @param mpSettingSpawn
 */
function networkSetCurrentSpawnLocationOption(mpSettingSpawn) {
    return _in(0xaa6d5451, 0xdc3448b6, _ch(mpSettingSpawn));
}
exports.networkSetCurrentSpawnLocationOption = networkSetCurrentSpawnLocationOption;
function networkSetCurrentlySelectedGamerHandleFromInviteMenu(p0) {
    const [retval, p0_out] = _in(0x7206f674, 0xf2a3b1bb, _ii(p0), _r);
    return [retval, p0_out];
}
exports.networkSetCurrentlySelectedGamerHandleFromInviteMenu = networkSetCurrentlySelectedGamerHandleFromInviteMenu;
function networkSetCustomArenaBallParams(netId) {
    return _in(0xa6fceccf, 0x4721d679, netId);
}
exports.networkSetCustomArenaBallParams = networkSetCustomArenaBallParams;
/**
 * Appears to set whether a transition should be started when the session is migrating.
 * @param toggle
 */
function networkSetDoNotLaunchFromJoinAsMigratedHost(toggle) {
    return _in(0xa2e9c1ab, 0x8a92e8cd, toggle);
}
exports.networkSetDoNotLaunchFromJoinAsMigratedHost = networkSetDoNotLaunchFromJoinAsMigratedHost;
function networkSetEntityCanBlend(entity, toggle) {
    return _in(0xd830567d, 0x88a1e873, entity, toggle);
}
exports.networkSetEntityCanBlend = networkSetEntityCanBlend;
/**
 * if set to true other network players can't see it
 * if set to false other network player can see it
 * =========================================
 * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
 *
 * pc or last gen?
 *
 * ^^ last-gen
 * @param entity
 * @param toggle
 */
function networkSetEntityOnlyExistsForParticipants(entity, toggle) {
    return _in(0xf1ca12b1, 0x8aef5298, entity, toggle);
}
exports.networkSetEntityOnlyExistsForParticipants = networkSetEntityOnlyExistsForParticipants;
function networkSetFriendlyFireOption(toggle) {
    return _in(0xf808475f, 0xa571d823, toggle);
}
exports.networkSetFriendlyFireOption = networkSetFriendlyFireOption;
function networkSetGamerInvitedToTransition(gamerHandle) {
    return _in(0xca2c8073, 0x411ecdb6, _ii(gamerHandle));
}
exports.networkSetGamerInvitedToTransition = networkSetGamerInvitedToTransition;
function networkSetIgnoreSpectatorChatLimitsSameTeam(toggle) {
    return _in(0x6a5d89d7, 0x769a40d8, toggle);
}
exports.networkSetIgnoreSpectatorChatLimitsSameTeam = networkSetIgnoreSpectatorChatLimitsSameTeam;
function networkSetInFreeCamMode(toggle) {
    return _in(0xfc18db55, 0xae19e046, toggle);
}
exports.networkSetInFreeCamMode = networkSetInFreeCamMode;
function networkSetInMpCutscene(p0, p1) {
    return _in(0x9ca5de65, 0x5269fec4, p0, p1);
}
exports.networkSetInMpCutscene = networkSetInMpCutscene;
function networkSetInProgressFinishTime(p0) {
    return _in(0x2ce9d95e, 0x4051aecd, p0);
}
exports.networkSetInProgressFinishTime = networkSetInProgressFinishTime;
function networkSetInSpectatorMode(toggle, playerPed) {
    return _in(0x423de385, 0x4bb50894, toggle, playerPed);
}
exports.networkSetInSpectatorMode = networkSetInSpectatorMode;
function networkSetInSpectatorModeExtended(toggle, playerPed, p2) {
    return _in(0x419594e1, 0x37637120, toggle, playerPed, p2);
}
exports.networkSetInSpectatorModeExtended = networkSetInSpectatorModeExtended;
function networkSetInviteFailedMessageForInviteMenu() {
    const [p0_out, p1_out] = _in(0x0d77a82d, 0xc2d0da59, _i, _i);
    return [p0_out, p1_out];
}
exports.networkSetInviteFailedMessageForInviteMenu = networkSetInviteFailedMessageForInviteMenu;
function networkSetInviteOnCallForInviteMenu(p0) {
    return _in(0x66f010a4, 0xb031a331, _ii(p0));
}
exports.networkSetInviteOnCallForInviteMenu = networkSetInviteOnCallForInviteMenu;
function networkSetLocalPlayerInvincibleTime(time) {
    return _in(0x2d95c7e2, 0xd7e07307, time);
}
exports.networkSetLocalPlayerInvincibleTime = networkSetLocalPlayerInvincibleTime;
function networkSetLocalPlayerSyncLookAt(toggle) {
    return _in(0x524ff0ae, 0xff9c3973, toggle);
}
exports.networkSetLocalPlayerSyncLookAt = networkSetLocalPlayerSyncLookAt;
function networkSetLookAtTalkers(p0) {
    return _in(0x7d395ea6, 0x1622e116, p0);
}
exports.networkSetLookAtTalkers = networkSetLookAtTalkers;
function networkSetMinimumRankForMission(p0) {
    return _in(0x94538037, 0xee44f5cf, p0);
}
exports.networkSetMinimumRankForMission = networkSetMinimumRankForMission;
function networkSetMissionFinished() {
    return _in(0x3b3d11cd, 0x9ffcdfc9);
}
exports.networkSetMissionFinished = networkSetMissionFinished;
/**
 * Stops current cutscene with a fade transition
 * p0: always true in R* Scripts
 * You will need to manually fade the screen back in
 * SET_CUTSCENE_INPUTS_PARTIALLY_FADE?
 * @param p0
 */
function networkSetMocapCutsceneCanBeSkipped(p0) {
    return _in(0x2f137b50, 0x8de238f2, p0);
}
exports.networkSetMocapCutsceneCanBeSkipped = networkSetMocapCutsceneCanBeSkipped;
function networkSetNoLongerNeeded(entity, toggle) {
    return _in(0x3fc79569, 0x1834481d, entity, toggle);
}
exports.networkSetNoLongerNeeded = networkSetNoLongerNeeded;
function networkSetNoSpectatorChat(toggle) {
    return _in(0xf46a1e03, 0xe8755980, toggle);
}
exports.networkSetNoSpectatorChat = networkSetNoSpectatorChat;
function networkSetObjectCanBlendWhenFixed(object, toggle) {
    return _in(0x0379daf8, 0x9ba09aa5, object, toggle);
}
exports.networkSetObjectCanBlendWhenFixed = networkSetObjectCanBlendWhenFixed;
function networkSetObjectScopeDistance(object, range) {
    return _in(0xba7f0b77, 0xd80a4eb7, object, _fv(range));
}
exports.networkSetObjectScopeDistance = networkSetObjectScopeDistance;
function networkSetOverrideSpectatorMode(toggle) {
    return _in(0x70da3bf8, 0xdacd3210, toggle);
}
exports.networkSetOverrideSpectatorMode = networkSetOverrideSpectatorMode;
function networkSetOverrideTutorialSessionChat(toggle) {
    return _in(0x3c5c1e2c, 0x2ff814b1, toggle);
}
exports.networkSetOverrideTutorialSessionChat = networkSetOverrideTutorialSessionChat;
function networkSetPlayerIsPassive(toggle) {
    return _in(0x1b857666, 0x604b1a74, toggle);
}
exports.networkSetPlayerIsPassive = networkSetPlayerIsPassive;
/**
 * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
 * @param p0
 */
function networkSetPlayerMentalState(p0) {
    return _in(0x367ef5e2, 0xf439b4c6, p0);
}
exports.networkSetPlayerMentalState = networkSetPlayerMentalState;
/**
 * Does nothing. It's just a nullsub.
 * @param toggle
 */
function networkSetPresenceSessionInvitesBlocked(toggle) {
    return _in(0x4a9fde3a, 0x5a6d0437, toggle);
}
exports.networkSetPresenceSessionInvitesBlocked = networkSetPresenceSessionInvitesBlocked;
function networkSetPrivilegeCheckResultNotNeeded() {
    return _in(0x1f7bc353, 0x9f9e0224);
}
exports.networkSetPrivilegeCheckResultNotNeeded = networkSetPrivilegeCheckResultNotNeeded;
/**
 * value must be < 255
 * @param id
 */
function networkSetPropertyId(id) {
    return _in(0x1775961c, 0x2fbbcb5c, id);
}
exports.networkSetPropertyId = networkSetPropertyId;
function networkSetProximityAffectsTeam(toggle) {
    return _in(0x9d7afcbf, 0x21c51712, toggle);
}
exports.networkSetProximityAffectsTeam = networkSetProximityAffectsTeam;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
function networkSetRichPresence(p0, p1, p2, p3) {
    return _in(0x1dccacdc, 0xfc569362, p0, p1, p2, p3);
}
exports.networkSetRichPresence = networkSetRichPresence;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param textLabel
 */
function networkSetRichPresenceString(p0, textLabel) {
    return _in(0x3e200c2b, 0xcf4164eb, p0, _ts(textLabel));
}
exports.networkSetRichPresenceString = networkSetRichPresenceString;
function networkSetSameTeamAsLocalPlayer(p0, p1) {
    return _in(0x4348bfda, 0x56023a2f, p0, p1, _r);
}
exports.networkSetSameTeamAsLocalPlayer = networkSetSameTeamAsLocalPlayer;
function networkSetScriptAutomuted(p0) {
    return _in(0xb309ebea, 0x797e001f, p0, _r);
}
exports.networkSetScriptAutomuted = networkSetScriptAutomuted;
function networkSetScriptControllingTeams(p0) {
    return _in(0x265559da, 0x40b3f327, p0);
}
exports.networkSetScriptControllingTeams = networkSetScriptControllingTeams;
function networkSetScriptIsSafeForNetworkGame() {
    return _in(0x9243bac9, 0x6d64c050);
}
exports.networkSetScriptIsSafeForNetworkGame = networkSetScriptIsSafeForNetworkGame;
function networkSetScriptReadyForEvents(toggle) {
    return _in(0x7ac75210, 0x3856fb20, toggle);
}
exports.networkSetScriptReadyForEvents = networkSetScriptReadyForEvents;
function networkSetSpectatorToNonSpectatorTextChat(toggle) {
    return _in(0x8ef52aca, 0xecc51d9c, toggle);
}
exports.networkSetSpectatorToNonSpectatorTextChat = networkSetSpectatorToNonSpectatorTextChat;
function networkSetTalkerProximity(value) {
    return _in(0xcbf12d65, 0xf95ad686, _fv(value));
}
exports.networkSetTalkerProximity = networkSetTalkerProximity;
/**
 * A value between 1.0 and 5.0
 *
 * _NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?
 * @param p0
 */
function networkSetTaskCutsceneInscopeMultipler(p0) {
    return _in(0xc6fcee21, 0xc6fcee21, p0);
}
exports.networkSetTaskCutsceneInscopeMultipler = networkSetTaskCutsceneInscopeMultipler;
function networkSetTeamOnlyChat(toggle) {
    return _in(0xd5b4883a, 0xc32f24c3, toggle);
}
exports.networkSetTeamOnlyChat = networkSetTeamOnlyChat;
function networkSetThisScriptIsNetworkScript(maxNumMissionParticipants, p1, instanceId) {
    return _in(0x1ca59e30, 0x6ecb80a5, maxNumMissionParticipants, p1, instanceId);
}
exports.networkSetThisScriptIsNetworkScript = networkSetThisScriptIsNetworkScript;
function networkSetTransitionActivityId(p0) {
    return _in(0x30de938b, 0x516f0ad2, p0);
}
exports.networkSetTransitionActivityId = networkSetTransitionActivityId;
function networkSetTransitionCreatorHandle(p0) {
    return _in(0xef26739b, 0xcd9907d5, _ii(p0));
}
exports.networkSetTransitionCreatorHandle = networkSetTransitionCreatorHandle;
function networkSetTransitionVisibilityLock(p0, p1) {
    return _in(0x0c978fda, 0x19692c2c, p0, p1);
}
exports.networkSetTransitionVisibilityLock = networkSetTransitionVisibilityLock;
/**
 * Used by MetricVEHICLE_DIST_DRIVEN
 * @param toggle
 */
function networkSetVehicleDrivenInTestDrive(toggle) {
    return _in(0x8c70252f, 0xc40f320b, toggle);
}
exports.networkSetVehicleDrivenInTestDrive = networkSetVehicleDrivenInTestDrive;
/**
 * Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN
 * @param location
 */
function networkSetVehicleDrivenLocation(location) {
    return _in(0xa0ce91e4, 0x7531d3bb, _ch(location));
}
exports.networkSetVehicleDrivenLocation = networkSetVehicleDrivenLocation;
function networkSetVoiceActive(toggle) {
    return _in(0xbabec9e6, 0x9a91c57b, toggle);
}
exports.networkSetVoiceActive = networkSetVoiceActive;
function networkSetVoiceChannel(channel) {
    return _in(0xef6212c2, 0xefef1a23, channel);
}
exports.networkSetVoiceChannel = networkSetVoiceChannel;
function networkShouldShowPromotionAlertScreen() {
    return _in(0x023acab2, 0xdc9dc4a4, _r);
}
exports.networkShouldShowPromotionAlertScreen = networkShouldShowPromotionAlertScreen;
/**
 * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
 */
function networkShouldShowStrictNatWarning() {
    return _in(0x82a2b386, 0x716608f1, _r);
}
exports.networkShouldShowStrictNatWarning = networkShouldShowStrictNatWarning;
function networkShowAccountUpgradeUi() {
    return _in(0x83fe8d72, 0x29593017);
}
exports.networkShowAccountUpgradeUi = networkShowAccountUpgradeUi;
/**
 * Does nothing (it's a nullsub).
 * @param player
 */
function networkShowChatRestrictionMsc(player) {
    return _in(0x6bff5f84, 0x102df80a, player);
}
exports.networkShowChatRestrictionMsc = networkShowChatRestrictionMsc;
function networkShowProfileUi(gamerHandle) {
    return _in(0x859ed1ce, 0xa343fca8, _ii(gamerHandle));
}
exports.networkShowProfileUi = networkShowProfileUi;
/**
 * This native does absolutely nothing, just a nullsub
 */
function networkShowPsnUgcRestriction() {
    return _in(0x5c497525, 0xf803486b);
}
exports.networkShowPsnUgcRestriction = networkShowPsnUgcRestriction;
function networkSkipRadioResetNextClose() {
    return _in(0x9465e683, 0xb12d3f6b);
}
exports.networkSkipRadioResetNextClose = networkSkipRadioResetNextClose;
function networkSkipRadioResetNextOpen() {
    return _in(0xca59ccae, 0x5d01e4ce);
}
exports.networkSkipRadioResetNextOpen = networkSkipRadioResetNextOpen;
/**
 * Returns true if dinput8.dll is present in the game directory.
 * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
 */
function networkSkipRadioWarning() {
    return _in(0x659cf2ef, 0x7f550c4f, _r);
}
exports.networkSkipRadioWarning = networkSkipRadioWarning;
function networkSpendAgency(p0, p1, p2, p3, p4) {
    return _in(0x1b212040, 0x5080125c, p0, p1, p2, p3, p4);
}
exports.networkSpendAgency = networkSpendAgency;
function networkSpendApartmentUtilities(amount, p1, p2, data) {
    return _in(0x1254b5b3, 0x925efd3d, amount, p1, p2, _ii(data));
}
exports.networkSpendApartmentUtilities = networkSpendApartmentUtilities;
function networkSpendArcade(p0, p1, p2, p3, p4) {
    return _in(0x43aa7fac, 0x4e6d6687, p0, p1, p2, p3, p4);
}
exports.networkSpendArcade = networkSpendArcade;
function networkSpendArcadeMgmt(p0, p1, p2, p3, p4) {
    return _in(0xb5b58e24, 0x868cb09e, p0, p1, p2, p3, p4);
}
exports.networkSpendArcadeMgmt = networkSpendArcadeMgmt;
function networkSpendArenaPremium(amount, p1, p2) {
    return _in(0x619496d8, 0x37efd920, amount, p1, p2);
}
exports.networkSpendArenaPremium = networkSpendArenaPremium;
/**
 * type either, 1 for cam spectate, 2 for drone
 * @param amount
 * @param type
 * @param p2
 * @param p3
 */
function networkSpendArenaSpectatorBox(amount, type, p2, p3) {
    return _in(0x7049bf85, 0x8601dc0f, amount, type, p2, p3);
}
exports.networkSpendArenaSpectatorBox = networkSpendArenaSpectatorBox;
function networkSpendAutoshopModify(p0, p1, p2, p3, p4) {
    return _in(0x9bea350d, 0x7c48061b, p0, p1, p2, p3, p4);
}
exports.networkSpendAutoshopModify = networkSpendAutoshopModify;
function networkSpendBeachParty(p0) {
    return _in(0x54aba22f, 0xa6371249, p0);
}
exports.networkSpendBeachParty = networkSpendBeachParty;
function networkSpendBikeShop(p0, p1, p2, p3) {
    return _in(0x923aea8e, 0x78f8df0b, p0, p1, p2, p3);
}
exports.networkSpendBikeShop = networkSpendBikeShop;
function networkSpendBoss(p0, p1, p2) {
    return _in(0xdbc966a0, 0x1c02bca7, p0, p1, p2);
}
exports.networkSpendBoss = networkSpendBoss;
function networkSpendBountyHunterMission(amount, p1, p2) {
    return _in(0x1bea0cd9, 0x3470bb1f, amount, p1, p2);
}
exports.networkSpendBountyHunterMission = networkSpendBountyHunterMission;
function networkSpendBusinessPropertyFees(p0, p1, p2, p3) {
    return _in(0x92d1cfda, 0x1227ff1c, p0, p1, p2, p3);
}
exports.networkSpendBusinessPropertyFees = networkSpendBusinessPropertyFees;
function networkSpendBuyAcidLab(p0, p1, p2, p3) {
    return _in(0xf1e26a79, 0x24327152, p0, p1, p2, p3);
}
exports.networkSpendBuyAcidLab = networkSpendBuyAcidLab;
function networkSpendBuyAgency(p0, p1, p2, p3) {
    return _in(0xea8cd3c9, 0xb3c35884, p0, p1, p2, p3);
}
exports.networkSpendBuyAgency = networkSpendBuyAgency;
function networkSpendBuyArcade(p0, p1, p2, p3) {
    return _in(0x870289a5, 0x58348378, p0, p1, p2, p3);
}
exports.networkSpendBuyArcade = networkSpendBuyArcade;
function networkSpendBuyArena(amount, p1, p2, p3) {
    return _in(0x40d5da95, 0x50b7cb46, amount, p1, p2, _ts(p3));
}
exports.networkSpendBuyArena = networkSpendBuyArena;
function networkSpendBuyAutoshop(p0, p1, p2, p3) {
    return _in(0xeeb7e5d1, 0xfeb20869, p0, p1, p2, p3);
}
exports.networkSpendBuyAutoshop = networkSpendBuyAutoshop;
function networkSpendBuyCasino(amount, p1, p2, data) {
    return _in(0x34a6fc4d, 0x06c4da0f, amount, p1, p2, _ii(data));
}
exports.networkSpendBuyCasino = networkSpendBuyCasino;
function networkSpendBuyMfgarage(p0, p1, p2, p3) {
    return _in(0xa2ed36dc, 0xf0fca413, p0, p1, p2, p3);
}
exports.networkSpendBuyMfgarage = networkSpendBuyMfgarage;
function networkSpendBuySub(p0, p1, p2, p3) {
    return _in(0x90cd7c68, 0x71fbf1b4, p0, p1, p2, p3);
}
exports.networkSpendBuySub = networkSpendBuySub;
function networkSpendBuySupplies(p0, p1, p2, p3) {
    return _in(0xb48185c0, 0xca67b16b, p0, p1, p2, p3);
}
exports.networkSpendBuySupplies = networkSpendBuySupplies;
function networkSpendCarClubBar(p0, p1, p2, p3) {
    return _in(0x92522780, 0x3a0eaa1b, p0, p1, p2, p3);
}
exports.networkSpendCarClubBar = networkSpendCarClubBar;
function networkSpendCarClubMembership(amount1, p1, p2, amount2, p4) {
    return _in(0x1464e172, 0x07cd36e2, amount1, p1, p2, amount2, p4);
}
exports.networkSpendCarClubMembership = networkSpendCarClubMembership;
function networkSpendCarClubTakeover(p0, p1, p2, p3) {
    return _in(0xd1e46824, 0xe6fb92b5, p0, p1, p2, p3);
}
exports.networkSpendCarClubTakeover = networkSpendCarClubTakeover;
function networkSpendCasinoClub(amount1, p1, p2, p3, p4, p5, p6, amount2, p8) {
    return _in(0xc991c255, 0xaa6d90b2, amount1, p1, p2, p3, p4, p5, p6, amount2, p8);
}
exports.networkSpendCasinoClub = networkSpendCasinoClub;
function networkSpendCasinoGeneric(amount, p1, p2, p3, p4) {
    return _in(0x88bf9b61, 0x2b84d3c3, amount, p1, p2, p3, p4);
}
exports.networkSpendCasinoGeneric = networkSpendCasinoGeneric;
function networkSpendCasinoHeist(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    return _in(0xd30e8392, 0xf407c328, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
exports.networkSpendCasinoHeist = networkSpendCasinoHeist;
function networkSpendCasinoHeistSkipMission(p0, p1, p2, p3) {
    return _in(0x487009dd, 0x91d93429, p0, p1, p2, p3);
}
exports.networkSpendCasinoHeistSkipMission = networkSpendCasinoHeistSkipMission;
function networkSpendCasinoMembership(amount, p1, p2, p3) {
    return _in(0xfbbe0570, 0xedf39d46, amount, p1, p2, p3);
}
exports.networkSpendCasinoMembership = networkSpendCasinoMembership;
function networkSpendCompSuv(p0, p1, p2, p3) {
    return _in(0xd86581f9, 0xe7cda383, p0, p1, p2, p3);
}
exports.networkSpendCompSuv = networkSpendCompSuv;
/**
 * Hardcoded to return 0.
 * @param amount
 */
function networkSpendEarnedFromBankAndWallets(amount) {
    return _in(0x9b5016a6, 0x433a68c5, amount, _r, _ri);
}
exports.networkSpendEarnedFromBankAndWallets = networkSpendEarnedFromBankAndWallets;
function networkSpendGangopsCannon(p0, p1, p2, p3) {
    return _in(0x771adb0e, 0x7635b7bf, p0, p1, p2, p3);
}
exports.networkSpendGangopsCannon = networkSpendGangopsCannon;
function networkSpendGangopsRepairCost(p0, p1, p2) {
    return _in(0x2a7cec72, 0xc3443bcc, p0, p1, p2);
}
exports.networkSpendGangopsRepairCost = networkSpendGangopsRepairCost;
function networkSpendGangopsSkipMission(p0, p1, p2, p3) {
    return _in(0xda947ae8, 0x880d5c18, p0, p1, p2, p3);
}
exports.networkSpendGangopsSkipMission = networkSpendGangopsSkipMission;
function networkSpendGangopsStartStrand(type, amount, p2, p3) {
    return _in(0xa19ec078, 0x6e326e06, type, amount, p2, p3);
}
exports.networkSpendGangopsStartStrand = networkSpendGangopsStartStrand;
function networkSpendGangopsTripSkip(amount, p1, p2) {
    return _in(0x5ece6fd7, 0xb4ec8d6a, amount, p1, p2);
}
exports.networkSpendGangopsTripSkip = networkSpendGangopsTripSkip;
function networkSpendGoon(p0, p1, amount) {
    return _in(0x08a1b82b, 0x91900682, p0, p1, amount);
}
exports.networkSpendGoon = networkSpendGoon;
function networkSpendGunrunning(p0, p1, p2, p3) {
    return _in(0x2ceb0e0b, 0xc2a77c05, p0, p1, p2, p3);
}
exports.networkSpendGunrunning = networkSpendGunrunning;
function networkSpendHidden(p0, p1, p2, p3) {
    return _in(0xbf8793b9, 0x1ea094a7, p0, p1, p2, p3);
}
exports.networkSpendHidden = networkSpendHidden;
function networkSpendInteractionMenuAbility(p0, p1, p2, p3) {
    return _in(0x93aa4165, 0xcb67e925, p0, p1, p2, p3);
}
exports.networkSpendInteractionMenuAbility = networkSpendInteractionMenuAbility;
function networkSpendIslandHeist(p0, p1, p2, p3) {
    return _in(0xe86689e5, 0xf82de429, p0, p1, p2, p3);
}
exports.networkSpendIslandHeist = networkSpendIslandHeist;
function networkSpendMakeItRain(amount, p1, p2) {
    return _in(0xe5f5a060, 0x439c2f5d, amount, p1, p2);
}
exports.networkSpendMakeItRain = networkSpendMakeItRain;
function networkSpendNightclubAndWarehouse(p0, p1, p2, p3) {
    return _in(0x65482bfd, 0x0923c8a1, p0, p1, p2, p3);
}
exports.networkSpendNightclubAndWarehouse = networkSpendNightclubAndWarehouse;
function networkSpendNightclubBarDrink(amount, p1, p2, p3) {
    return _in(0xdd21b016, 0xe4289465, amount, p1, p2, p3);
}
exports.networkSpendNightclubBarDrink = networkSpendNightclubBarDrink;
function networkSpendPlayArcade(p0, p1, p2, p3, p4) {
    return _in(0xead3d81f, 0x2c3a1458, p0, p1, p2, p3, p4);
}
exports.networkSpendPlayArcade = networkSpendPlayArcade;
function networkSpendRenameAcidLab(p0, p1, p2, p3) {
    return _in(0x842b1c5a, 0xf61acde9, p0, p1, p2, p3);
}
exports.networkSpendRenameAcidLab = networkSpendRenameAcidLab;
function networkSpendRenameAcidProduct(p0, p1, p2, p3) {
    return _in(0x446798f7, 0x495dd7d8, p0, p1, p2, p3);
}
exports.networkSpendRenameAcidProduct = networkSpendRenameAcidProduct;
function networkSpendSetCommonFields(p0, p1, p2, p3) {
    return _in(0xb9f7a469, 0x460e7a4a, p0, p1, p2, p3);
}
exports.networkSpendSetCommonFields = networkSpendSetCommonFields;
function networkSpendSetDiscount(p0) {
    return _in(0x7e2f4e8f, 0x44caf4e0, p0);
}
exports.networkSpendSetDiscount = networkSpendSetDiscount;
function networkSpendSourceBike(p0, p1, p2, p3) {
    return _in(0xd9df467c, 0xbe4398c8, p0, p1, p2, p3);
}
exports.networkSpendSourceBike = networkSpendSourceBike;
function networkSpendSpinTheWheelPayment(amount, p1, p2) {
    return _in(0x9a5bd1d0, 0x000b339c, amount, p1, p2);
}
exports.networkSpendSpinTheWheelPayment = networkSpendSpinTheWheelPayment;
function networkSpendSubmarine(p0, p1, p2, p3, p4, p5) {
    return _in(0x6c8bc148, 0x8527aaab, p0, p1, p2, p3, p4, p5);
}
exports.networkSpendSubmarine = networkSpendSubmarine;
function networkSpendSupply(p0, p1, p2, p3) {
    return _in(0xebd482b8, 0x2acb8bad, p0, p1, p2, p3);
}
exports.networkSpendSupply = networkSpendSupply;
function networkSpendSuvFstTrvl(p0, p1, p2, p3) {
    return _in(0x61a2df64, 0xed2d396e, p0, p1, p2, p3);
}
exports.networkSpendSuvFstTrvl = networkSpendSuvFstTrvl;
function networkSpendUpgradeAcidLabArmor(p0, p1, p2, p3) {
    return _in(0xa7d541c9, 0xacd63133, p0, p1, p2, p3);
}
exports.networkSpendUpgradeAcidLabArmor = networkSpendUpgradeAcidLabArmor;
function networkSpendUpgradeAcidLabEquipment(p0, p1, p2, p3) {
    return _in(0x110ee9d4, 0x86c23126, p0, p1, p2, p3);
}
exports.networkSpendUpgradeAcidLabEquipment = networkSpendUpgradeAcidLabEquipment;
function networkSpendUpgradeAcidLabMines(p0, p1, p2, p3) {
    return _in(0x4b99ab08, 0xc92c54e4, p0, p1, p2, p3);
}
exports.networkSpendUpgradeAcidLabMines = networkSpendUpgradeAcidLabMines;
function networkSpendUpgradeAcidLabScoop(p0, p1, p2, p3) {
    return _in(0x2940558e, 0x05bcc2ec, p0, p1, p2, p3);
}
exports.networkSpendUpgradeAcidLabScoop = networkSpendUpgradeAcidLabScoop;
function networkSpendUpgradeAgency(p0, p1, p2, p3) {
    return _in(0x6cca6484, 0x0589a3b6, p0, p1, p2, p3);
}
exports.networkSpendUpgradeAgency = networkSpendUpgradeAgency;
function networkSpendUpgradeArcade(p0, p1, p2, p3) {
    return _in(0x55746376, 0x81911fda, p0, p1, p2, p3);
}
exports.networkSpendUpgradeArcade = networkSpendUpgradeArcade;
function networkSpendUpgradeArena(amount, p1, p2, p3) {
    return _in(0x037abb06, 0x825d7ab1, amount, p1, p2, _ts(p3));
}
exports.networkSpendUpgradeArena = networkSpendUpgradeArena;
function networkSpendUpgradeAutoshop(p0, p1, p2, p3) {
    return _in(0xdd829aa1, 0x98fdc46c, p0, p1, p2, p3);
}
exports.networkSpendUpgradeAutoshop = networkSpendUpgradeAutoshop;
function networkSpendUpgradeCasino(amount, p1, p2, data) {
    return _in(0x4740d62b, 0xc1b4ebea, amount, p1, p2, _ii(data));
}
exports.networkSpendUpgradeCasino = networkSpendUpgradeCasino;
function networkSpendUpgradeMfgarage(p0, p1, p2, p3) {
    return _in(0xcf8f346d, 0xddc66643, p0, p1, p2, p3);
}
exports.networkSpendUpgradeMfgarage = networkSpendUpgradeMfgarage;
function networkSpendUpgradeSub(p0, p1, p2, p3) {
    return _in(0x89049a84, 0x065ce68e, p0, p1, p2, p3);
}
exports.networkSpendUpgradeSub = networkSpendUpgradeSub;
function networkSpendVehicleRequested(p0, p1, p2, p3, p4) {
    return _in(0x02d24a35, 0xa9cc3503, p0, p1, p2, p3, p4);
}
exports.networkSpendVehicleRequested = networkSpendVehicleRequested;
function networkSpentAirFreight(hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot) {
    return _in(0x8c7e8d6f, 0x96c9e948, hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot);
}
exports.networkSpentAirFreight = networkSpentAirFreight;
function networkSpentAmmoDrop(p0, p1, p2, p3) {
    return _in(0xb162dc95, 0xc0a3317b, p0, p1, p2, p3);
}
exports.networkSpentAmmoDrop = networkSpentAmmoDrop;
function networkSpentArenaJoinSpectator(amount, p1, p2, p3) {
    return _in(0x14eaea58, 0xf93b55af, amount, p1, p2, p3);
}
exports.networkSpentArenaJoinSpectator = networkSpentArenaJoinSpectator;
function networkSpentArrestBail(p0, p1, p2) {
    return _in(0x812f5488, 0xb1b2a299, p0, p1, p2);
}
exports.networkSpentArrestBail = networkSpentArrestBail;
function networkSpentBallisticEquipment(amount, p1, p2) {
    return _in(0x5d97630a, 0x8a0ef123, amount, p1, p2);
}
exports.networkSpentBallisticEquipment = networkSpentBallisticEquipment;
function networkSpentBankInterest(p0, p1, p2) {
    return _in(0xca230c96, 0x82556cf1, p0, p1, p2);
}
exports.networkSpentBankInterest = networkSpentBankInterest;
function networkSpentBetting(amount, p1, matchId, p3, p4) {
    return _in(0x1c436fd1, 0x1ffa692f, amount, p1, _ts(matchId), p3, p4);
}
exports.networkSpentBetting = networkSpentBetting;
function networkSpentBoatPickup(p0, p1, p2, p3) {
    return _in(0x524ee43a, 0x37232c00, p0, p1, p2, p3);
}
exports.networkSpentBoatPickup = networkSpentBoatPickup;
function networkSpentBossGoon(amount, p1, p2) {
    return _in(0xffbe02cd, 0x385356bd, amount, p1, p2, _r);
}
exports.networkSpentBossGoon = networkSpentBossGoon;
function networkSpentBounty(p0, p1, p2) {
    return _in(0x29b260b8, 0x4947dfcc, p0, p1, p2);
}
exports.networkSpentBounty = networkSpentBounty;
function networkSpentBullShark(p0, p1, p2, p3) {
    return _in(0xa6dd8458, 0xce24012c, p0, p1, p2, p3);
}
exports.networkSpentBullShark = networkSpentBullShark;
function networkSpentBuyBase(p0, p1, p2, p3) {
    return _in(0x4ea3f425, 0xc7744d21, p0, p1, p2, p3);
}
exports.networkSpentBuyBase = networkSpentBuyBase;
function networkSpentBuyBunker(p0, p1, p2, p3) {
    return _in(0x12d148d2, 0x6538d0f9, p0, p1, p2, p3);
}
exports.networkSpentBuyBunker = networkSpentBuyBunker;
function networkSpentBuyOfftheradar(p0, p1, p2, p3) {
    return _in(0xa628a745, 0xe2275c5d, p0, p1, p2, p3);
}
exports.networkSpentBuyOfftheradar = networkSpentBuyOfftheradar;
function networkSpentBuyPassiveMode(p0, p1, p2, p3) {
    return _in(0x6d3a430d, 0x1a809179, p0, p1, p2, p3);
}
exports.networkSpentBuyPassiveMode = networkSpentBuyPassiveMode;
function networkSpentBuyRevealPlayers(p0, p1, p2, p3) {
    return _in(0x6e176f1b, 0x18bc0637, p0, p1, p2, p3);
}
exports.networkSpentBuyRevealPlayers = networkSpentBuyRevealPlayers;
function networkSpentBuyTiltrotor(p0, p1, p2, p3) {
    return _in(0x0cce73bc, 0x7a11e885, p0, p1, p2, p3);
}
exports.networkSpentBuyTiltrotor = networkSpentBuyTiltrotor;
function networkSpentBuyTruck(p0, p1, p2, p3) {
    return _in(0xac272c0a, 0xe01b4bd8, p0, p1, p2, p3);
}
exports.networkSpentBuyTruck = networkSpentBuyTruck;
function networkSpentBuyWantedlevel(p0, p2, p3, p4) {
    return _in(0xe1b13771, 0xa843c4f6, p0, _i, p2, p3, p4);
}
exports.networkSpentBuyWantedlevel = networkSpentBuyWantedlevel;
function networkSpentCallPlayer(p0, p2, p3) {
    return _in(0xacde7185, 0xb374177c, p0, _i, p2, p3);
}
exports.networkSpentCallPlayer = networkSpentCallPlayer;
function networkSpentCargoSourcing(p0, p1, p2, p3, p4, p5) {
    return _in(0x948705f6, 0xf9c50824, p0, p1, p2, p3, p4, p5);
}
exports.networkSpentCargoSourcing = networkSpentCargoSourcing;
function networkSpentCarwash(p0, p1, p2, p3, p4) {
    return _in(0xec03c719, 0xdb2f4306, p0, p1, p2, p3, p4);
}
exports.networkSpentCarwash = networkSpentCarwash;
function networkSpentCashDrop(amount, p1, p2) {
    return _in(0x289016ec, 0x778d60e0, amount, p1, p2);
}
exports.networkSpentCashDrop = networkSpentCashDrop;
function networkSpentChangeAppearance(p0, p1, p2) {
    return _in(0x5f456788, 0xb05faeac, p0, p1, p2);
}
exports.networkSpentChangeAppearance = networkSpentChangeAppearance;
function networkSpentCinema(p0, p1, p2, p3) {
    return _in(0x6b38ecb0, 0x5a63a685, p0, p1, p2, p3);
}
exports.networkSpentCinema = networkSpentCinema;
function networkSpentEmployAssassins(p0, p1, p2, p3) {
    return _in(0x5bbbd921, 0x86e1f1c5, p0, p1, p2, p3);
}
exports.networkSpentEmployAssassins = networkSpentEmployAssassins;
function networkSpentFromRockstar(p0, p1, p2) {
    return _in(0x6a445b64, 0xed7abeb5, p0, p1, p2);
}
exports.networkSpentFromRockstar = networkSpentFromRockstar;
function networkSpentHangarStaffCharges(amount, p1, p2) {
    return _in(0xb1f1346f, 0xd57685d7, amount, p1, p2);
}
exports.networkSpentHangarStaffCharges = networkSpentHangarStaffCharges;
function networkSpentHangarUtilityCharges(amount, p1, p2) {
    return _in(0xb18ac2ec, 0xbb15cb6a, amount, p1, p2);
}
exports.networkSpentHangarUtilityCharges = networkSpentHangarUtilityCharges;
function networkSpentHeliPickup(p0, p1, p2, p3) {
    return _in(0x7bf1d73d, 0xb2eca492, p0, p1, p2, p3);
}
exports.networkSpentHeliPickup = networkSpentHeliPickup;
function networkSpentHireMercenary(p0, p1, p2, p3) {
    return _in(0xe7b80e2b, 0xf9d80bd6, p0, p1, p2, p3);
}
exports.networkSpentHireMercenary = networkSpentHireMercenary;
/**
 * Only used once in a script (am_contact_requests)
 * p1 = 0
 * p2 = 1
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
function networkSpentHireMugger(p0, p1, p2, p3) {
    return _in(0xe404bfb9, 0x81665bf0, p0, p1, p2, p3);
}
exports.networkSpentHireMugger = networkSpentHireMugger;
function networkSpentHoldups(p0, p1, p2) {
    return _in(0xd9b86b98, 0x72039763, p0, p1, p2);
}
exports.networkSpentHoldups = networkSpentHoldups;
function networkSpentImportExportRepair(p0, p1, p2) {
    return _in(0xc1952f37, 0x73ba18fe, p0, p1, p2);
}
exports.networkSpentImportExportRepair = networkSpentImportExportRepair;
function networkSpentInStripclub(p0, p1, p2, p3) {
    return _in(0xee99784e, 0x4467689c, p0, p1, p2, p3);
}
exports.networkSpentInStripclub = networkSpentInStripclub;
function networkSpentJobSkip(amount, matchId, p2, p3) {
    return _in(0x28f174a6, 0x7b8d0c2f, amount, _ts(matchId), p2, p3);
}
exports.networkSpentJobSkip = networkSpentJobSkip;
function networkSpentJukebox(p0, p1, p2, p3) {
    return _in(0x5bcde0f6, 0x40c773d2, p0, p1, p2, p3);
}
exports.networkSpentJukebox = networkSpentJukebox;
function networkSpentMcAbility(p0, p1, p2, p3, p4) {
    return _in(0xd7cccba2, 0x8c4ecaf0, p0, p1, p2, p3, p4);
}
exports.networkSpentMcAbility = networkSpentMcAbility;
/**
 * Hash p3 = MISSILE_JAMMER
 * @param amount
 * @param fromBank
 * @param fromBankAndWallet
 * @param p3
 */
function networkSpentMissileJammer(amount, fromBank, fromBankAndWallet, p3) {
    return _in(0xd687100f, 0x616163f4, amount, fromBank, fromBankAndWallet, _ch(p3));
}
exports.networkSpentMissileJammer = networkSpentMissileJammer;
function networkSpentMoveSubmarine(p0, p1, p2) {
    return _in(0xcd4d66b4, 0x3b1dd28d, p0, p1, p2);
}
exports.networkSpentMoveSubmarine = networkSpentMoveSubmarine;
function networkSpentMoveYacht(amount, p1, p2) {
    return _in(0xe7df4e05, 0x45dfb56e, amount, p1, p2);
}
exports.networkSpentMoveYacht = networkSpentMoveYacht;
function networkSpentNightclubEntryFee(player, amount, p1, p2, p3) {
    return _in(0x87605668, 0x4281655d, player, amount, p1, p2, p3);
}
exports.networkSpentNightclubEntryFee = networkSpentNightclubEntryFee;
function networkSpentNoCops(p0, p1, p2, p3) {
    return _in(0xd5bb406f, 0x4e04019f, p0, p1, p2, p3);
}
exports.networkSpentNoCops = networkSpentNoCops;
function networkSpentOrderBodyguardVehicle(p0, p1, p2, p3) {
    return _in(0xe8b0b270, 0xb6e7c76e, p0, p1, p2, p3);
}
exports.networkSpentOrderBodyguardVehicle = networkSpentOrderBodyguardVehicle;
function networkSpentOrderWarehouseVehicle(p0, p1, p2, p3) {
    return _in(0x05f04155, 0xa226fbbf, p0, p1, p2, p3);
}
exports.networkSpentOrderWarehouseVehicle = networkSpentOrderWarehouseVehicle;
function networkSpentPaHeliPickup(p0, p1, p2, p3) {
    return _in(0x0fe8e1fc, 0xd2b86b33, p0, p1, p2, p3);
}
exports.networkSpentPaHeliPickup = networkSpentPaHeliPickup;
function networkSpentPaServiceDancer(p0, p1, p2, p3) {
    return _in(0xb49eca12, 0x2467d05f, p0, p1, p2, p3);
}
exports.networkSpentPaServiceDancer = networkSpentPaServiceDancer;
function networkSpentPaServiceHeli(p0, p1, p2, p3) {
    return _in(0x112209ce, 0x0290c03a, p0, p1, p2, p3);
}
exports.networkSpentPaServiceHeli = networkSpentPaServiceHeli;
function networkSpentPaServiceImpound(p0, p1, p2) {
    return _in(0xe23adc6f, 0xcb1f29ae, p0, p1, p2);
}
exports.networkSpentPaServiceImpound = networkSpentPaServiceImpound;
function networkSpentPaServiceSnack(p0, p1, p2, p3) {
    return _in(0x0d30eb83, 0x668e63c5, p0, p1, p2, p3);
}
exports.networkSpentPaServiceSnack = networkSpentPaServiceSnack;
function networkSpentPaServiceVehicle(p0, p1, p2, p3) {
    return _in(0xed5fd7af, 0x10f5e262, p0, p1, p2, p3);
}
exports.networkSpentPaServiceVehicle = networkSpentPaServiceVehicle;
function networkSpentPayBusinessSupplies(p0, p1, p2, p3) {
    return _in(0x0035bb91, 0x4316f1e3, p0, p1, p2, p3);
}
exports.networkSpentPayBusinessSupplies = networkSpentPayBusinessSupplies;
/**
 * According to how I understood this in the freemode script alone,
 * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
 *
 * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
 *
 * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
 *
 * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
 *
 * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
 * bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
 * @param amount
 * @param vehicleModel
 * @param gamerHandle
 * @param notBankrupt
 * @param hasTheMoney
 */
function networkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney) {
    return _in(0x9ff28d88, 0xc766e3e8, amount, _ch(vehicleModel), _i, notBankrupt, hasTheMoney);
}
exports.networkSpentPayVehicleInsurancePremium = networkSpentPayVehicleInsurancePremium;
function networkSpentPlayerHealthcare(p0, p1, p2, p3) {
    return _in(0x7c99101f, 0x7fce2ee5, p0, p1, p2, p3);
}
exports.networkSpentPlayerHealthcare = networkSpentPlayerHealthcare;
function networkSpentProstitutes(p0, p1, p2) {
    return _in(0xb21b8950, 0x1cfac79e, p0, p1, p2);
}
exports.networkSpentProstitutes = networkSpentProstitutes;
function networkSpentPurchaseBusinessProperty(p0, p1, p2, p3) {
    return _in(0x6fd97159, 0xfe3c971a, p0, p1, p2, p3);
}
exports.networkSpentPurchaseBusinessProperty = networkSpentPurchaseBusinessProperty;
function networkSpentPurchaseClubHouse(p0, p1, p2, p3) {
    return _in(0x998e18ce, 0xb44487fc, p0, p1, p2, p3);
}
exports.networkSpentPurchaseClubHouse = networkSpentPurchaseClubHouse;
function networkSpentPurchaseHackerTruck(p0, p1, p2, p3) {
    return _in(0x2a93c46a, 0xab1eacc9, p0, p1, p2, p3);
}
exports.networkSpentPurchaseHackerTruck = networkSpentPurchaseHackerTruck;
function networkSpentPurchaseHangar(p0, p1, p2, p3) {
    return _in(0xccb339cc, 0x970452da, p0, p1, p2, p3);
}
exports.networkSpentPurchaseHangar = networkSpentPurchaseHangar;
function networkSpentPurchaseImpexpWarehouseProperty(amount, p2, p3) {
    return _in(0x33981d68, 0x04e62f49, amount, _i, p2, p3);
}
exports.networkSpentPurchaseImpexpWarehouseProperty = networkSpentPurchaseImpexpWarehouseProperty;
function networkSpentPurchaseNightclubAndWarehouse(p0, p1, p2, p3) {
    return _in(0xed76d195, 0xe6e3bf7f, p0, p1, p2, p3);
}
exports.networkSpentPurchaseNightclubAndWarehouse = networkSpentPurchaseNightclubAndWarehouse;
function networkSpentPurchaseOfficeGarage(p0, p1, p2, p3) {
    return _in(0xb4c2ec46, 0x3672474e, p0, p1, p2, p3);
}
exports.networkSpentPurchaseOfficeGarage = networkSpentPurchaseOfficeGarage;
function networkSpentPurchaseOfficeProperty(p0, p1, p2, p3, p4) {
    return _in(0x69ef772b, 0x192614c1, p0, p1, p2, p3, p4);
}
exports.networkSpentPurchaseOfficeProperty = networkSpentPurchaseOfficeProperty;
function networkSpentPurchaseWarehouseProperty(p0, p1, p2, p3) {
    return _in(0xbd0efb25, 0xcca8f97a, p0, p1, p2, p3);
}
exports.networkSpentPurchaseWarehouseProperty = networkSpentPurchaseWarehouseProperty;
function networkSpentRdrHatchetBonus(amount, p1, p2) {
    return _in(0xe284d46f, 0xfdb82e36, amount, p1, p2);
}
exports.networkSpentRdrHatchetBonus = networkSpentRdrHatchetBonus;
function networkSpentRehireDj(amount, p1, p2, p3) {
    return _in(0xf6c8a544, 0xe4cf14fc, amount, p1, p2, p3);
}
exports.networkSpentRehireDj = networkSpentRehireDj;
function networkSpentRenameOrganization(p0, p1, p2, p3) {
    return _in(0xfc4ee00a, 0x7b3bfb76, p0, p1, p2, p3);
}
exports.networkSpentRenameOrganization = networkSpentRenameOrganization;
function networkSpentRequestHeist(p0, p1, p2, p3) {
    return _in(0x9d26502b, 0xb97bfe62, p0, p1, p2, p3);
}
exports.networkSpentRequestHeist = networkSpentRequestHeist;
function networkSpentRequestJob(p0, p1, p2, p3) {
    return _in(0x8204da79, 0x34df3155, p0, p1, p2, p3);
}
exports.networkSpentRequestJob = networkSpentRequestJob;
function networkSpentRobbedByMugger(amount, p1, p2, p3) {
    return _in(0x995a65f1, 0x5f581359, amount, p1, p2, p3);
}
exports.networkSpentRobbedByMugger = networkSpentRobbedByMugger;
function networkSpentSkipCargoSourceSetup(amount, fromBank, fromBankAndWallet, cost) {
    return _in(0xed1b407b, 0xada42cec, amount, fromBank, fromBankAndWallet, cost);
}
exports.networkSpentSkipCargoSourceSetup = networkSpentSkipCargoSourceSetup;
/**
 * Hash p3 = STEALTH_MODULE
 * @param amount
 * @param fromBank
 * @param fromBankAndWallet
 * @param p3
 */
function networkSpentStealthModule(amount, fromBank, fromBankAndWallet, p3) {
    return _in(0x95ce79a6, 0x939c537a, amount, fromBank, fromBankAndWallet, _ch(p3));
}
exports.networkSpentStealthModule = networkSpentStealthModule;
function networkSpentTaxi(amount, p1, p2, p3, p4) {
    return _in(0x17c3a7d3, 0x1eae39f9, amount, p1, p2, p3, p4);
}
exports.networkSpentTaxi = networkSpentTaxi;
function networkSpentTelescope(p0, p1, p2) {
    return _in(0x7fe61782, 0xad94cc09, p0, p1, p2);
}
exports.networkSpentTelescope = networkSpentTelescope;
function networkSpentTradeBusinessProperty(p0, p1, p2, p3) {
    return _in(0xa51b086b, 0x0b2c0f7a, p0, p1, p2, p3);
}
exports.networkSpentTradeBusinessProperty = networkSpentTradeBusinessProperty;
function networkSpentTradeImpexpWarehouseProperty(p0, p1, p2, p3) {
    return _in(0x2fab6614, 0xce22e196, p0, p1, p2, p3);
}
exports.networkSpentTradeImpexpWarehouseProperty = networkSpentTradeImpexpWarehouseProperty;
function networkSpentUpgradeBase(p0, p1, p2, p3) {
    return _in(0x3dd3f33a, 0x5d55ea6f, p0, p1, p2, p3);
}
exports.networkSpentUpgradeBase = networkSpentUpgradeBase;
function networkSpentUpgradeBusinessProperty(p0, p1, p2, p3) {
    return _in(0x675d19c6, 0x067cae08, p0, p1, p2, p3);
}
exports.networkSpentUpgradeBusinessProperty = networkSpentUpgradeBusinessProperty;
function networkSpentUpgradeClubHouse(p0, p1, p2, p3) {
    return _in(0xfa07759e, 0x6fddd7cf, p0, p1, p2, p3);
}
exports.networkSpentUpgradeClubHouse = networkSpentUpgradeClubHouse;
function networkSpentUpgradeHackerTruck(p0, p1, p2, p3) {
    return _in(0x226c284c, 0x830d0ca8, p0, p1, p2, p3);
}
exports.networkSpentUpgradeHackerTruck = networkSpentUpgradeHackerTruck;
function networkSpentUpgradeHangar(p0, p1, p2, p3) {
    return _in(0x615eb504, 0xb0788daf, p0, p1, p2, p3);
}
exports.networkSpentUpgradeHangar = networkSpentUpgradeHangar;
function networkSpentUpgradeImpexpWarehouseProperty(p0, p1, p2, p3) {
    return _in(0x41284642, 0x31e3ca0b, p0, p1, p2, p3);
}
exports.networkSpentUpgradeImpexpWarehouseProperty = networkSpentUpgradeImpexpWarehouseProperty;
function networkSpentUpgradeNightclubAndWarehouse(p0, p1, p2, p3) {
    return _in(0x1dc9b749, 0xe7ae282b, p0, p1, p2, p3);
}
exports.networkSpentUpgradeNightclubAndWarehouse = networkSpentUpgradeNightclubAndWarehouse;
function networkSpentUpgradeOfficeGarage(p0, p1, p2, p3) {
    return _in(0x2afc2d19, 0xb50797f2, p0, p1, p2, p3);
}
exports.networkSpentUpgradeOfficeGarage = networkSpentUpgradeOfficeGarage;
function networkSpentUpgradeOfficeProperty(p0, p1, p2, p3, p4) {
    return _in(0x8e243837, 0x643d9583, p0, p1, p2, p3, p4);
}
exports.networkSpentUpgradeOfficeProperty = networkSpentUpgradeOfficeProperty;
function networkSpentUpgradeTiltrotor(p0, p1, p2, p3) {
    return _in(0x165e135d, 0x6dfa2907, p0, p1, p2, p3);
}
exports.networkSpentUpgradeTiltrotor = networkSpentUpgradeTiltrotor;
function networkSpentUpgradeTruck(p0, p1, p2, p3) {
    return _in(0x365e877c, 0x61d6988b, p0, p1, p2, p3);
}
exports.networkSpentUpgradeTruck = networkSpentUpgradeTruck;
function networkSpentUpgradeWarehouseProperty(p0, p1, p2, p3) {
    return _in(0xa95f667a, 0x755725da, p0, p1, p2, p3);
}
exports.networkSpentUpgradeWarehouseProperty = networkSpentUpgradeWarehouseProperty;
function networkSpentUpradeBunker(p0, p1, p2, p3) {
    return _in(0x0c82d21a, 0x77c22d49, p0, p1, p2, p3);
}
exports.networkSpentUpradeBunker = networkSpentUpradeBunker;
function networkSpentVehicleExportMods(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0xa75ccf58, 0xa60a5fd1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
exports.networkSpentVehicleExportMods = networkSpentVehicleExportMods;
function networkSpentWager(p0, p1, amount) {
    return _in(0xd99db210, 0x089617fe, p0, p1, amount);
}
exports.networkSpentWager = networkSpentWager;
function networkStartCommunicationPermissionsCheck(p0) {
    return _in(0x36391f39, 0x7731595d, p0, _r, _ri);
}
exports.networkStartCommunicationPermissionsCheck = networkStartCommunicationPermissionsCheck;
/**
 * One of the first things it does is get the players ped.
 * Then it calls a function that is used in some tasks and ped based functions.
 * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 * @param p6
 * @param p7
 * @param flags
 */
function networkStartRespawnSearchForPlayer(player, x, y, z, radius, p5, p6, p7, flags) {
    return _in(0x5a6ffa24, 0x33e2f14c, player, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p5), _fv(p6), _fv(p7), flags, _r);
}
exports.networkStartRespawnSearchForPlayer = networkStartRespawnSearchForPlayer;
/**
 * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
 * @param player
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p8
 * @param p9
 * @param p10
 * @param flags
 */
function networkStartRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags) {
    return _in(0x4ba92a18, 0x502bca61, player, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _fv(p8), _fv(p9), _fv(p10), flags, _r);
}
exports.networkStartRespawnSearchInAngledAreaForPlayer = networkStartRespawnSearchInAngledAreaForPlayer;
function networkStartSoloTutorialSession() {
    return _in(0x17e0198b, 0x3882c2cb);
}
exports.networkStartSoloTutorialSession = networkStartSoloTutorialSession;
function networkStartSynchronisedScene(netScene) {
    return _in(0x9a1b3fcd, 0xb36c8697, netScene);
}
exports.networkStartSynchronisedScene = networkStartSynchronisedScene;
/**
 * Always returns -1. Seems to be XB1 specific.
 * @param netHandle
 */
function networkStartUserContentPermissionsCheck(netHandle) {
    const [retval, netHandle_out] = _in(0xdeb2b99a, 0x1af1a2a6, _ii(netHandle), _r, _ri);
    return [retval, netHandle_out];
}
exports.networkStartUserContentPermissionsCheck = networkStartUserContentPermissionsCheck;
function networkStopSynchronisedScene(netScene) {
    return _in(0xc254481a, 0x4574cb2f, netScene);
}
exports.networkStopSynchronisedScene = networkStopSynchronisedScene;
function networkStoreInviteThroughRestart() {
    return _in(0xf814fec6, 0xa19fd6e0);
}
exports.networkStoreInviteThroughRestart = networkStoreInviteThroughRestart;
function networkSuppressInvite(toggle) {
    return _in(0xa0682d67, 0xef1fba3d, toggle);
}
exports.networkSuppressInvite = networkSuppressInvite;
/**
 * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
 */
function networkTextChatIsTyping() {
    return _in(0x5fcf4d70, 0x69b09026, _r);
}
exports.networkTextChatIsTyping = networkTextChatIsTyping;
function networkTransitionAddStage(hash, p1, p2, state, p4) {
    return _in(0xc3bfed92, 0x026a2aad, _ch(hash), p1, p2, state, p4, _r);
}
exports.networkTransitionAddStage = networkTransitionAddStage;
function networkTransitionBlockJoinRequests(p0) {
    return _in(0x973d76aa, 0x760a6cb6, p0);
}
exports.networkTransitionBlockJoinRequests = networkTransitionBlockJoinRequests;
function networkTransitionFinish(p0, p1, p2) {
    return _in(0x04918a41, 0xbc9b8157, p0, p1, p2, _r);
}
exports.networkTransitionFinish = networkTransitionFinish;
function networkTransitionSetActivityIsland(p0) {
    return _in(0xf6f4383b, 0x7c92f11a, p0);
}
exports.networkTransitionSetActivityIsland = networkTransitionSetActivityIsland;
function networkTransitionSetContentCreator(p0) {
    return _in(0x1f8e00fb, 0x18239600, p0);
}
exports.networkTransitionSetContentCreator = networkTransitionSetContentCreator;
function networkTransitionSetInProgress(p0) {
    return _in(0x1398582b, 0x7f72b3ed, p0);
}
exports.networkTransitionSetInProgress = networkTransitionSetInProgress;
function networkTransitionStart(p0, p1, p2, p3) {
    return _in(0x8b4ffc79, 0x0ca131ef, p0, p1, p2, p3, _r);
}
exports.networkTransitionStart = networkTransitionStart;
/**
 * Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
 * @param entity
 * @param toggle
 */
function networkTriggerDamageEventForZeroDamage(entity, toggle) {
    return _in(0x890e2c5a, 0xbed7236d, entity, toggle);
}
exports.networkTriggerDamageEventForZeroDamage = networkTriggerDamageEventForZeroDamage;
function networkTriggerDamageEventForZeroWeaponHash(entity, toggle) {
    return _in(0x38b7c51a, 0xb1edc7d8, entity, toggle);
}
exports.networkTriggerDamageEventForZeroWeaponHash = networkTriggerDamageEventForZeroWeaponHash;
/**
 * Returns defaultValue if the tunable doesn't exist.
 * @param tunableContext
 * @param tunableName
 * @param defaultValue
 */
function networkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue) {
    return _in(0xc7420099, 0x936ce286, _ch(tunableContext), _ch(tunableName), defaultValue, _r);
}
exports.networkTryAccessTunableBoolHash = networkTryAccessTunableBoolHash;
function networkTryToSetThisScriptIsNetworkScript(p0, p1, p2) {
    return _in(0xd1110739, 0xeeadb592, p0, p1, p2, _r);
}
exports.networkTryToSetThisScriptIsNetworkScript = networkTryToSetThisScriptIsNetworkScript;
function networkUgcNav(p0, p1) {
    return _in(0xc1447451, 0xddb512f0, p0, p1);
}
exports.networkUgcNav = networkUgcNav;
function networkUnregisterNetworkedEntity(entity) {
    return _in(0x7368e683, 0xbb9038d6, entity);
}
exports.networkUnregisterNetworkedEntity = networkUnregisterNetworkedEntity;
function networkUpdateLoadScene() {
    return _in(0xc4582015, 0x556d1c46, _r);
}
exports.networkUpdateLoadScene = networkUpdateLoadScene;
function networkUseHighPrecisionBlending(netID, toggle) {
    return _in(0x2b1813ab, 0xa29016c5, netID, toggle);
}
exports.networkUseHighPrecisionBlending = networkUseHighPrecisionBlending;
/**
 * Implemented only for trains.
 * @param vehicle
 * @param toggle
 */
function networkUseHighPrecisionTrainBlending(vehicle, toggle) {
    return _in(0xec0c1d49, 0x22af9754, vehicle, toggle);
}
exports.networkUseHighPrecisionTrainBlending = networkUseHighPrecisionTrainBlending;
function networkUseLogarithmicBlendingThisFrame(entity) {
    return _in(0xcd71a4ec, 0xab22709e, entity);
}
exports.networkUseLogarithmicBlendingThisFrame = networkUseLogarithmicBlendingThisFrame;
function networkWaitingPopClearTutorialSession() {
    return _in(0xb37e4e6a, 0x2388ca7b, _r);
}
exports.networkWaitingPopClearTutorialSession = networkWaitingPopClearTutorialSession;
function networkWasGameSuspended() {
    return _in(0x4237e822, 0x315d8ba9, _r);
}
exports.networkWasGameSuspended = networkWasGameSuspended;
function networkYohanSourceGoods(p0, p1, p2, p3) {
    return _in(0x59498bc8, 0xb1c8b15c, p0, p1, p2, p3);
}
exports.networkYohanSourceGoods = networkYohanSourceGoods;
/**
 * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
 * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
 * Returns True if success, used only 7 times in decompiled scripts of 1868
 * @param posX
 * @param posY
 * @param posZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param radius
 * @param p7
 */
function newLoadSceneStart(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7) {
    return _in(0x212a8d0d, 0x2babfac2, _fv(posX), _fv(posY), _fv(posZ), _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(radius), p7, _r);
}
exports.newLoadSceneStart = newLoadSceneStart;
function newLoadSceneStartSphere(x, y, z, radius, p4) {
    return _in(0xaccfb4ac, 0xf53551b0, _fv(x), _fv(y), _fv(z), _fv(radius), p4, _r);
}
exports.newLoadSceneStartSphere = newLoadSceneStartSphere;
function newLoadSceneStop() {
    return _in(0xc197616d, 0x221ff4a4);
}
exports.newLoadSceneStop = newLoadSceneStop;
/**
 * p0 was always 2 in R* scripts.
 * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
 * @param p0
 */
function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0) {
    return _in(0x3ed1438c, 0x1f5c6612, p0);
}
exports.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts = nextOnscreenKeyboardResultWillDisplayUsingTheseFonts;
/**
 * Lets objects spawn online simply do it like this:
 *
 * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
 * @param object
 */
function objToNet(object) {
    return _in(0x99bfdc94, 0xa603e541, object, _r, _ri);
}
exports.objToNet = objToNet;
/**
 * This loads the GTA:O dlc map parts (high end garages, apartments).
 * Works in singleplayer.
 * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
 */
function onEnterMp() {
    return _in(0x0888c350, 0x2dbbeef5);
}
exports.onEnterMp = onEnterMp;
/**
 * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
 * Works in singleplayer.
 */
function onEnterSp() {
    return _in(0xd7c10c4a, 0x637992c9);
}
exports.onEnterSp = onEnterSp;
/**
 * is this like setting is as no longer needed?
 * @param object
 */
function onlyCleanUpObjectWhenOutOfRange(object) {
    return _in(0xadbe4809, 0xf19f927a, object);
}
exports.onlyCleanUpObjectWhenOutOfRange = onlyCleanUpObjectWhenOutOfRange;
function openAllBarriersForRace(p0) {
    return _in(0xc7f29ca0, 0x0f46350e, p0);
}
exports.openAllBarriersForRace = openAllBarriersForRace;
function openBombBayDoors(vehicle) {
    return _in(0x87e7f242, 0x70732cb1, vehicle);
}
exports.openBombBayDoors = openBombBayDoors;
function openCommerceStore(p0, p1, p2) {
    return _in(0x58c21165, 0xf6545892, _ts(p0), _ts(p1), p2);
}
exports.openCommerceStore = openCommerceStore;
function openOnlinePoliciesMenu() {
    return _in(0x805d7cbb, 0x36fd6c4c);
}
exports.openOnlinePoliciesMenu = openOnlinePoliciesMenu;
/**
 * patrolRoutes found in the b617d scripts:
 * "miss_Ass0",
 * "miss_Ass1",
 * "miss_Ass2",
 * "miss_Ass3",
 * "miss_Ass4",
 * "miss_Ass5",
 * "miss_Ass6",
 * "MISS_PATROL_6",
 * "MISS_PATROL_7",
 * "MISS_PATROL_8",
 * "MISS_PATROL_9",
 * "miss_Tower_01",
 * "miss_Tower_02",
 * "miss_Tower_03",
 * "miss_Tower_04",
 * "miss_Tower_05",
 * "miss_Tower_06",
 * "miss_Tower_07",
 * "miss_Tower_08",
 * "miss_Tower_10"
 * @param patrolRoute
 */
function openPatrolRoute(patrolRoute) {
    return _in(0xa36bfb5e, 0xe89f3d82, _ts(patrolRoute));
}
exports.openPatrolRoute = openPatrolRoute;
/**
 * Shows a menu for reporting UGC content.
 */
function openReportugcMenu() {
    return _in(0x523a590c, 0x1a3cc0d3);
}
exports.openReportugcMenu = openReportugcMenu;
function openSequenceTask(taskSequenceId) {
    return _in(0xe8854a43, 0x26b9e12b, _ii(taskSequenceId));
}
exports.openSequenceTask = openSequenceTask;
/**
 * Uses the `SOCIAL_CLUB2` scaleform.
 * menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS
 * @param menu
 */
function openSocialClubMenu(menu) {
    return _in(0x75d36917, 0x13c3b05a, _ch(menu));
}
exports.openSocialClubMenu = openSocialClubMenu;
function orderBossVehicle(p0, p1, vehicleHash) {
    return _in(0xcea553e3, 0x5c2246e1, p0, p1, _ch(vehicleHash));
}
exports.orderBossVehicle = orderBossVehicle;
/**
 * Max value for p1 is 15.
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
function overrideCamSplineMotionBlur(cam, p1, p2, p3) {
    return _in(0x7dcf7c70, 0x8d292d55, cam, p1, _fv(p2), _fv(p3));
}
exports.overrideCamSplineMotionBlur = overrideCamSplineMotionBlur;
function overrideCamSplineVelocity(cam, p1, p2, p3) {
    return _in(0x40b62fa0, 0x33eb0346, cam, p1, _fv(p2), _fv(p3));
}
exports.overrideCamSplineVelocity = overrideCamSplineVelocity;
function overrideFreezeFlags(p0) {
    return _in(0xfa3ffb0e, 0xebc288a3, p0);
}
exports.overrideFreezeFlags = overrideFreezeFlags;
function overrideInteriorSmokeEnd() {
    return _in(0xefb55e7c, 0x25d3b3be);
}
exports.overrideInteriorSmokeEnd = overrideInteriorSmokeEnd;
function overrideInteriorSmokeLevel(level) {
    return _in(0x1600fd8c, 0xf72ebc12, _fv(level));
}
exports.overrideInteriorSmokeLevel = overrideInteriorSmokeLevel;
function overrideInteriorSmokeName(name) {
    return _in(0x2a2a5282, 0x4db96700, _ts(name));
}
exports.overrideInteriorSmokeName = overrideInteriorSmokeName;
/**
 * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
 * Max scaling seems to be 200.0, normal is 1.0
 * See https://gfycat.com/DetailedHauntingIncatern
 * @param scaling
 */
function overrideLodscaleThisFrame(scaling) {
    return _in(0xa76359fc, 0x80b2438e, _fv(scaling));
}
exports.overrideLodscaleThisFrame = overrideLodscaleThisFrame;
/**
 * Sets audio flag "OverrideMicrophoneSettings"
 * @param hash
 * @param toggle
 */
function overrideMicrophoneSettings(hash, toggle) {
    return _in(0x75773e11, 0xba459e90, _ch(hash), toggle);
}
exports.overrideMicrophoneSettings = overrideMicrophoneSettings;
function overrideMpTextChatColor(p0, hudColor) {
    return _in(0xf47e567b, 0x3630dd12, p0, hudColor);
}
exports.overrideMpTextChatColor = overrideMpTextChatColor;
function overrideMpTextChatTeamString(gxtEntryHash) {
    return _in(0x6a1738b4, 0x323fe2d9, _ch(gxtEntryHash));
}
exports.overrideMpTextChatTeamString = overrideMpTextChatTeamString;
function overrideNightvisionLightRange(p0) {
    return _in(0x43fa7cbe, 0x20dab219, _fv(p0));
}
exports.overrideNightvisionLightRange = overrideNightvisionLightRange;
/**
 * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
 * @param ped
 * @param txd
 * @param txn
 */
function overridePedCrewLogoTexture(ped, txd, txn) {
    return _in(0x95eb5e34, 0xf821babe, ped, _ts(txd), _ts(txn), _r);
}
exports.overridePedCrewLogoTexture = overridePedCrewLogoTexture;
/**
 * Used for helis.
 * @param vehicle
 * @param health
 */
function overridePlaneDamageThrehsold(vehicle, health) {
    return _in(0x5ee5632f, 0x47ae9695, vehicle, _fv(health));
}
exports.overridePlaneDamageThrehsold = overridePlaneDamageThrehsold;
/**
 * Sets audio flag "OverridePlayerGroundMaterial"
 * @param hash
 * @param toggle
 */
function overridePlayerGroundMaterial(hash, toggle) {
    return _in(0xd2cc78cd, 0x3d0b50f9, _ch(hash), toggle);
}
exports.overridePlayerGroundMaterial = overridePlayerGroundMaterial;
/**
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 *
 * Modified example from "am_imp_exp.c4", line 6406:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]]
 * ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
 * STREAMING::REQUEST_MODEL(vehicleHash);
 * @param scheduleId
 * @param vehicleHash
 */
function overridePopscheduleVehicleModel(scheduleId, vehicleHash) {
    return _in(0x5f7d596b, 0xac2e7777, scheduleId, _ch(vehicleHash));
}
exports.overridePopscheduleVehicleModel = overridePopscheduleVehicleModel;
function overrideSaveHouse(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0x1162ea8a, 0xe9d24eea, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), p5, _fv(p6), _fv(p7), _r);
}
exports.overrideSaveHouse = overrideSaveHouse;
/**
 * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
 * @param voiceEffect
 */
function overrideTrevorRage(voiceEffect) {
    return _in(0x13ad6650, 0x62541a7e, _ts(voiceEffect));
}
exports.overrideTrevorRage = overrideTrevorRage;
function overrideUnderwaterStream(p0, p1) {
    return _in(0xf2a9cdab, 0xcea04bd6, _ts(p0), p1);
}
exports.overrideUnderwaterStream = overrideUnderwaterStream;
/**
 * Overrides the vehicle's horn hash.
 * When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
 *
 * vehicle - the vehicle whose horn should be overwritten
 * mute - p1 seems to be an option for muting the horn
 * p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
 * @param vehicle
 * @param override
 * @param hornHash
 */
function overrideVehHorn(vehicle, override, hornHash) {
    return _in(0x3cdc1e62, 0x2cce0356, vehicle, override, hornHash);
}
exports.overrideVehHorn = overrideVehHorn;
/**
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
 * @param p0
 */
function packedStatGetIntStatIndex(p0) {
    return _in(0x94f12abf, 0x9c79e339, p0, _r, _ri);
}
exports.packedStatGetIntStatIndex = packedStatGetIntStatIndex;
/**
 * Return the local Participant ID
 */
function participantId() {
    return _in(0x90986e88, 0x76ce0a83, _r, _ri);
}
exports.participantId = participantId;
/**
 * Return the local Participant ID.
 *
 * This native is exactly the same as 'PARTICIPANT_ID' native.
 */
function participantIdToInt() {
    return _in(0x57a3bdda, 0xd8e5aa0a, _r, _ri);
}
exports.participantIdToInt = participantIdToInt;
function passKeyboardInputToScaleform(scaleformHandle) {
    return _in(0xd1c7cb17, 0x5e012964, scaleformHandle, _r);
}
exports.passKeyboardInputToScaleform = passKeyboardInputToScaleform;
function patchDecalDiffuseMap(decalType, textureDict, textureName) {
    return _in(0x8a35c742, 0x130c6080, decalType, _ts(textureDict), _ts(textureName));
}
exports.patchDecalDiffuseMap = patchDecalDiffuseMap;
function pauseClock(toggle) {
    return _in(0x4055e40b, 0xd2dbec1d, toggle);
}
exports.pauseClock = pauseClock;
function pauseDeathArrestRestart(toggle) {
    return _in(0x2c2b3493, 0xfbf51c71, toggle);
}
exports.pauseDeathArrestRestart = pauseDeathArrestRestart;
/**
 * Activates the specified frontend menu context.
 * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
 * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
 * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
 * This basically allows you to hide certain menu sections, or things like instructional buttons.
 * @param contextHash
 */
function pauseMenuActivateContext(contextHash) {
    return _in(0xdd564bdd, 0x0472c936, _ch(contextHash));
}
exports.pauseMenuActivateContext = pauseMenuActivateContext;
function pauseMenuDeactivateContext(contextHash) {
    return _in(0x444d8cf2, 0x41ec25c5, _ch(contextHash));
}
exports.pauseMenuDeactivateContext = pauseMenuDeactivateContext;
function pauseMenuGetHairColourIndex() {
    return _in(0xde03620f, 0x8703a9df, _r, _ri);
}
exports.pauseMenuGetHairColourIndex = pauseMenuGetHairColourIndex;
function pauseMenuGetMouseClickEvent() {
    const [retval, p0_out, p1_out, p2_out] = _in(0xc8e10711, 0x77a23be5, _i, _i, _i, _r);
    return [retval, p0_out, p1_out, p2_out];
}
exports.pauseMenuGetMouseClickEvent = pauseMenuGetMouseClickEvent;
function pauseMenuGetMouseHoverIndex() {
    return _in(0x359af31a, 0x4b52f5ed, _r, _ri);
}
exports.pauseMenuGetMouseHoverIndex = pauseMenuGetMouseHoverIndex;
function pauseMenuGetMouseHoverUniqueId() {
    return _in(0x13c4b962, 0x653a5280, _r, _ri);
}
exports.pauseMenuGetMouseHoverUniqueId = pauseMenuGetMouseHoverUniqueId;
function pauseMenuIsContextActive(contextHash) {
    return _in(0x84698ab3, 0x8d0c6636, _ch(contextHash), _r);
}
exports.pauseMenuIsContextActive = pauseMenuIsContextActive;
function pauseMenuIsContextMenuActive() {
    return _in(0x2a25adc4, 0x8f87841f, _r);
}
exports.pauseMenuIsContextMenuActive = pauseMenuIsContextMenuActive;
function pauseMenuRedrawInstructionalButtons(p0) {
    return _in(0x4895bdea, 0x16e7c080, p0);
}
exports.pauseMenuRedrawInstructionalButtons = pauseMenuRedrawInstructionalButtons;
function pauseMenuSetBusySpinner(p0, position, spinnerIndex) {
    return _in(0xc78e239a, 0xc5b2ddb9, p0, position, spinnerIndex);
}
exports.pauseMenuSetBusySpinner = pauseMenuSetBusySpinner;
function pauseMenuSetWarnOnTabChange(p0) {
    return _in(0xf06ebb91, 0xa81e09e3, p0);
}
exports.pauseMenuSetWarnOnTabChange = pauseMenuSetWarnOnTabChange;
function pauseMenuceptionGoDeeper(page) {
    return _in(0x77f16b44, 0x7824da6c, page);
}
exports.pauseMenuceptionGoDeeper = pauseMenuceptionGoDeeper;
function pauseMenuceptionTheKick() {
    return _in(0xcdca26e8, 0x0faecb8f);
}
exports.pauseMenuceptionTheKick = pauseMenuceptionTheKick;
function pausePlaybackRecordedVehicle(vehicle) {
    return _in(0x632a689b, 0xf42301b1, vehicle);
}
exports.pausePlaybackRecordedVehicle = pausePlaybackRecordedVehicle;
function pauseScriptedConversation(p0) {
    return _in(0x8530ad77, 0x6cd72b12, p0);
}
exports.pauseScriptedConversation = pauseScriptedConversation;
function pauseToggleFullscreenMap(p0) {
    return _in(0x2de6c5e2, 0xe996f178, p0);
}
exports.pauseToggleFullscreenMap = pauseToggleFullscreenMap;
/**
 * Checks if the specified sexiness flag is set
 *
 * enum eSexinessFlags
 * {
 * SF_JEER_AT_HOT_PED = 0,
 * SF_HURRIEDFEMALES_SEXY = 1,
 * SF_HOT_PERSON = 2,
 * };
 * @param ped
 * @param sexinessFlag
 */
function pedHasSexinessFlagSet(ped, sexinessFlag) {
    return _in(0x46b05bca, 0xe43856b0, ped, sexinessFlag, _r);
}
exports.pedHasSexinessFlagSet = pedHasSexinessFlagSet;
function pedHasUseScenarioTask(ped) {
    return _in(0x295e3cce, 0xc879ccd7, ped, _r);
}
exports.pedHasUseScenarioTask = pedHasUseScenarioTask;
/**
 * gets the network id of a ped
 * @param ped
 */
function pedToNet(ped) {
    return _in(0x0edec3c2, 0x76198689, ped, _r, _ri);
}
exports.pedToNet = pedToNet;
function phonephotoeditorIsActive() {
    return _in(0xbcedb009, 0x461da156, _r);
}
exports.phonephotoeditorIsActive = phonephotoeditorIsActive;
function phonephotoeditorSetFrameTxd(textureDict, p1) {
    return _in(0x27feb525, 0x4759cde3, _ts(textureDict), p1, _r);
}
exports.phonephotoeditorSetFrameTxd = phonephotoeditorSetFrameTxd;
function phonephotoeditorToggle(p0) {
    return _in(0x7ac24eab, 0x6d74118d, p0, _r);
}
exports.phonephotoeditorToggle = phonephotoeditorToggle;
function pinInteriorInMemory(interior) {
    return _in(0x2ca429c0, 0x29ccf247, interior);
}
exports.pinInteriorInMemory = pinInteriorInMemory;
function pinRopeVertex(ropeId, vertex, x, y, z) {
    return _in(0x2b320cf1, 0x4146b69a, ropeId, vertex, _fv(x), _fv(y), _fv(z));
}
exports.pinRopeVertex = pinRopeVertex;
function placeObjectOnGroundOrObjectProperly(object) {
    return _in(0xd76eeef7, 0x46057fd6, object, _r);
}
exports.placeObjectOnGroundOrObjectProperly = placeObjectOnGroundOrObjectProperly;
function placeObjectOnGroundProperly(object) {
    return _in(0x58a850ea, 0xee20faa3, object, _r);
}
exports.placeObjectOnGroundProperly = placeObjectOnGroundProperly;
/**
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param speechName
 * @param voiceName
 * @param x
 * @param y
 * @param z
 * @param speechParam
 */
function playAmbientSpeechFromPositionNative(speechName, voiceName, x, y, z, speechParam) {
    return _in(0xed640017, 0xed337e45, _ts(speechName), _ts(voiceName), _fv(x), _fv(y), _fv(z), _ts(speechParam));
}
exports.playAmbientSpeechFromPositionNative = playAmbientSpeechFromPositionNative;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 */
function playAnimOnRunningScenario(ped, animDict, animName) {
    return _in(0x74804046, 0x0f8df5dc, ped, _ts(animDict), _ts(animName));
}
exports.playAnimOnRunningScenario = playAnimOnRunningScenario;
/**
 * Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
 * This native is works only when you call it on the ped with right model (ac_chop only ?)
 * Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
 * @param pedHandle
 * @param p1
 * @param speechName
 */
function playAnimalVocalization(pedHandle, p1, speechName) {
    return _in(0xee066c70, 0x06c49c0a, pedHandle, p1, _ts(speechName));
}
exports.playAnimalVocalization = playAnimalVocalization;
function playBinkMovie(binkMovie) {
    return _in(0x70d2cc8a, 0x542a973c, binkMovie);
}
exports.playBinkMovie = playBinkMovie;
/**
 * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
 *
 * p9 is unknown at this time.
 * p10 throughout all the X360 Scripts is always 2.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param cam
 * @param animName
 * @param animDictionary
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param p10
 */
function playCamAnim(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10) {
    return _in(0x9a2d0fb2, 0xe7852392, cam, _ts(animName), _ts(animDictionary), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), p9, p10, _r);
}
exports.playCamAnim = playCamAnim;
/**
 * Only call found in the b617d scripts:
 *
 * AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundName
 * @param soundsetName
 */
function playDeferredSoundFrontend(soundName, soundsetName) {
    return _in(0xcada5a0d, 0x0702381e, _ts(soundName), _ts(soundsetName));
}
exports.playDeferredSoundFrontend = playDeferredSoundFrontend;
function playEndCreditsMusic(play) {
    return _in(0xcd536c4d, 0x33dcc900, play);
}
exports.playEndCreditsMusic = playEndCreditsMusic;
/**
 * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
 *
 * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animName
 * @param animDict
 * @param p3
 * @param loop
 * @param stayInAnim
 * @param p6
 * @param delta
 * @param bitset
 */
function playEntityAnim(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
    return _in(0x7fb21826, 0x2b810701, entity, _ts(animName), _ts(animDict), _fv(p3), loop, stayInAnim, p6, _fv(delta), bitset, _r);
}
exports.playEntityAnim = playEntityAnim;
function playEntityScriptedAnim(entity, blendInDelta, blendOutDelta) {
    const [priorityLowData_out, priorityMidData_out, priorityHighData_out] = _in(0x77a1eec5, 0x47e7fcf1, entity, _i, _i, _i, _fv(blendInDelta), _fv(blendOutDelta));
    return [priorityLowData_out, priorityMidData_out, priorityHighData_out];
}
exports.playEntityScriptedAnim = playEntityScriptedAnim;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animName
 * @param animDict
 */
function playFacialAnim(ped, animName, animDict) {
    return _in(0xe1e65ca8, 0xac9c00ed, ped, _ts(animName), _ts(animDict));
}
exports.playFacialAnim = playFacialAnim;
/**
 * Called 38 times in the scripts. There are 5 different audioNames used.
 * One unknown removed below.
 *
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
 * @param audioName
 */
function playMissionCompleteAudio(audioName) {
    return _in(0xb138aab8, 0xa70d3c69, _ts(audioName));
}
exports.playMissionCompleteAudio = playMissionCompleteAudio;
function playObjectAutoStartAnim(p0) {
    return _in(0x006e4b04, 0x0ed37ec3, p0);
}
exports.playObjectAutoStartAnim = playObjectAutoStartAnim;
/**
 * Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
 *
 * Last 2 parameters always seem to be 0.
 *
 * EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
 *
 * Known Pain IDs
 * ________________________
 *
 * 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
 * 6 - Scream (Short)
 * 7 - Scared Scream (Kinda Long)
 * 8 - On Fire
 *
 * @param ped
 * @param painID
 * @param p1
 * @param p3
 */
function playPain(ped, painID, p1, p3) {
    return _in(0xbc9ae166, 0x038a5cec, ped, painID, p1, p3);
}
exports.playPain = playPain;
/**
 * Plays ambient speech. See also _0x5C57B85D.
 *
 * See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
 *
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param speechParam
 * @param p3
 */
function playPedAmbientSpeechAndCloneNative(ped, speechName, speechParam, p3) {
    return _in(0xc6941b4a, 0x3a8fbbb9, ped, _ts(speechName), _ts(speechParam), p3);
}
exports.playPedAmbientSpeechAndCloneNative = playPedAmbientSpeechAndCloneNative;
/**
 * Plays ambient speech. See also _0x444180DB.
 *
 * ped: The ped to play the ambient speech.
 * speechName: Name of the speech to play, eg. "GENERIC_HI".
 * speechParam: Can be one of the following:
 * SPEECH_PARAMS_STANDARD
 * SPEECH_PARAMS_ALLOW_REPEAT
 * SPEECH_PARAMS_BEAT
 * SPEECH_PARAMS_FORCE
 * SPEECH_PARAMS_FORCE_FRONTEND
 * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
 * SPEECH_PARAMS_FORCE_NORMAL
 * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
 * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
 * SPEECH_PARAMS_FORCE_SHOUTED
 * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
 * SPEECH_PARAMS_MEGAPHONE
 * SPEECH_PARAMS_HELI
 * SPEECH_PARAMS_FORCE_MEGAPHONE
 * SPEECH_PARAMS_FORCE_HELI
 * SPEECH_PARAMS_INTERRUPT
 * SPEECH_PARAMS_INTERRUPT_SHOUTED
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE
 * SPEECH_PARAMS_INTERRUPT_FRONTEND
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
 * SPEECH_PARAMS_ADD_BLIP
 * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
 * SPEECH_PARAMS_ADD_BLIP_FORCE
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
 * SPEECH_PARAMS_SHOUTED
 * SPEECH_PARAMS_SHOUTED_CLEAR
 * SPEECH_PARAMS_SHOUTED_CRITICAL
 *
 * Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
 *
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param speechParam
 * @param p3
 */
function playPedAmbientSpeechNative(ped, speechName, speechParam, p3) {
    return _in(0x8e04fedd, 0x28d42462, ped, _ts(speechName), _ts(speechParam), p3);
}
exports.playPedAmbientSpeechNative = playPedAmbientSpeechNative;
/**
 * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
 *
 * EX (C#):
 * GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
 *
 * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
 *
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param voiceName
 * @param speechParam
 * @param p4
 */
function playPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, p4) {
    return _in(0x35236342, 0x55fc3318, ped, _ts(speechName), _ts(voiceName), _ts(speechParam), p4);
}
exports.playPedAmbientSpeechWithVoiceNative = playPedAmbientSpeechWithVoiceNative;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
 *
 * AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 * AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 *
 * @param ringtoneName
 * @param ped
 * @param p2
 */
function playPedRingtone(ringtoneName, ped, p2) {
    return _in(0xf9e56683, 0xca8e11a5, _ts(ringtoneName), ped, p2);
}
exports.playPedRingtone = playPedRingtone;
/**
 * Plays the given police radio message.
 *
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
 * Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
 * @param name
 * @param p1
 */
function playPoliceReport(name, p1) {
    return _in(0xdfebd56d, 0x9bd1eb16, _ts(name), _fv(p1), _r, _ri);
}
exports.playPoliceReport = playPoliceReport;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 * @param p4
 * @param p5
 */
function playSound(soundId, audioName, audioRef, p3, p4, p5) {
    return _in(0x7ff4944c, 0xc209192d, soundId, _ts(audioName), _ts(audioRef), p3, p4, p5);
}
exports.playSound = playSound;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
 *
 * gtaforums.com/topic/795622-audio-for-mods
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param x
 * @param y
 * @param z
 * @param audioRef
 * @param isNetwork
 * @param range
 * @param p8
 */
function playSoundFromCoord(soundId, audioName, x, y, z, audioRef, isNetwork, range, p8) {
    return _in(0x8d8686b6, 0x22b88120, soundId, _ts(audioName), _fv(x), _fv(y), _fv(z), _ts(audioRef), isNetwork, range, p8);
}
exports.playSoundFromCoord = playSoundFromCoord;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0
 * No changes made in b678d.
 *
 * gtaforums.com/topic/795622-audio-for-mods
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param entity
 * @param audioRef
 * @param isNetwork
 * @param p5
 */
function playSoundFromEntity(soundId, audioName, entity, audioRef, isNetwork, p5) {
    return _in(0xe65f427e, 0xb70ab1ed, soundId, _ts(audioName), entity, _ts(audioRef), isNetwork, p5);
}
exports.playSoundFromEntity = playSoundFromEntity;
/**
 * Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
 * p1 is always the model of p2
 * @param soundId
 * @param model
 * @param entity
 * @param soundSetHash
 * @param p4
 * @param p5
 */
function playSoundFromEntityHash(soundId, model, entity, soundSetHash, p4, p5) {
    return _in(0x5b985329, 0x6731e88d, soundId, _ch(model), entity, _ch(soundSetHash), p4, p5);
}
exports.playSoundFromEntityHash = playSoundFromEntityHash;
/**
 * List: https://pastebin.com/DCeRiaLJ
 *
 * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 */
function playSoundFrontend(soundId, audioName, audioRef, p3) {
    return _in(0x67c540aa, 0x08e4a6f5, soundId, _ts(audioName), _ts(audioRef), p3);
}
exports.playSoundFrontend = playSoundFrontend;
/**
 * Used with AUDIO::LOAD_STREAM
 *
 * Example from finale_heist2b.c4:
 * TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2 -- [[14]] ], l_4C8[2 -- [[14]] ]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
 * PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2 -- [[14]] ]._f7, 0.0);
 * PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2 -- [[14]] ], 0, 0);
 * PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2 -- [[14]] ], 38, 1);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2 -- [[14]] ], 1);
 * if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
 * AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0 -- [[1]] ]);
 * }
 * @param object
 */
function playStreamFromObject(object) {
    return _in(0xebaa9b64, 0xd76356fd, object);
}
exports.playStreamFromObject = playStreamFromObject;
function playStreamFromPed(ped) {
    return _in(0x89049dd6, 0x3c08b5d1, ped);
}
exports.playStreamFromPed = playStreamFromPed;
function playStreamFromPosition(x, y, z) {
    return _in(0x21442f41, 0x2e8de56b, _fv(x), _fv(y), _fv(z));
}
exports.playStreamFromPosition = playStreamFromPosition;
function playStreamFromVehicle(vehicle) {
    return _in(0xb70374a7, 0x58007dfa, vehicle);
}
exports.playStreamFromVehicle = playStreamFromVehicle;
function playStreamFrontend() {
    return _in(0x58fce434, 0x88f9f5f4);
}
exports.playStreamFrontend = playStreamFrontend;
function playSynchronizedAudioEvent(sceneID) {
    return _in(0x8b2fd456, 0x0e55dd2d, sceneID, _r);
}
exports.playSynchronizedAudioEvent = playSynchronizedAudioEvent;
/**
 * Examples:
 *
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
 *
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7 -- [[1]] ], l_F4D[15 -- [[1]] ], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
 * @param p0
 * @param p1
 * @param animName
 * @param animDictionary
 */
function playSynchronizedCamAnim(p0, p1, animName, animDictionary) {
    return _in(0xe32efe9a, 0xb4a9aa0c, p0, p1, _ts(animName), _ts(animDictionary), _r);
}
exports.playSynchronizedCamAnim = playSynchronizedCamAnim;
/**
 * p4 and p7 are usually 1000.0f.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param syncedScene
 * @param animation
 * @param propName
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
function playSynchronizedEntityAnim(entity, syncedScene, animation, propName, p4, p5, p6, p7) {
    return _in(0xc77720a1, 0x2fe14a86, entity, syncedScene, _ts(animation), _ts(propName), _fv(p4), _fv(p5), p6, _fv(p7), _r);
}
exports.playSynchronizedEntityAnim = playSynchronizedEntityAnim;
/**
 * p6,p7 probably animname and animdict
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
function playSynchronizedMapEntityAnim(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10, p11) {
    return _in(0xb9c54555, 0xed30fbc4, _fv(x1), _fv(y1), _fv(z1), _fv(x2), y2, _fv(z2), _ts(p6), _ts(p7), _fv(p8), _fv(p9), p10, _fv(p11), _r);
}
exports.playSynchronizedMapEntityAnim = playSynchronizedMapEntityAnim;
function playTennisDiveAnim(ped, p1, p2, p3, p4, p5) {
    return _in(0x8fa9c42f, 0xc5d7c64b, ped, p1, _fv(p2), _fv(p3), _fv(p4), p5);
}
exports.playTennisDiveAnim = playTennisDiveAnim;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 * @param p5
 */
function playTennisSwingAnim(ped, animDict, animName, p3, p4, p5) {
    return _in(0xe266ed23, 0x311f24d4, ped, _ts(animDict), _ts(animName), _fv(p3), _fv(p4), p5);
}
exports.playTennisSwingAnim = playTennisSwingAnim;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
function playVehicleDoorCloseSound(vehicle, doorId) {
    return _in(0x62a456aa, 0x4769ef34, vehicle, doorId);
}
exports.playVehicleDoorCloseSound = playVehicleDoorCloseSound;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
function playVehicleDoorOpenSound(vehicle, doorId) {
    return _in(0x3a539d52, 0x857ea82d, vehicle, doorId);
}
exports.playVehicleDoorOpenSound = playVehicleDoorOpenSound;
/**
 * Only 1 match. ob_sofa_michael.
 *
 * PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
function playerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0xed51733d, 0xc73aed51, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7));
}
exports.playerAttachVirtualBound = playerAttachVirtualBound;
/**
 * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 */
function playerDetachVirtualBound() {
    return _in(0x1dd5897e, 0x2fa6e7c9);
}
exports.playerDetachVirtualBound = playerDetachVirtualBound;
/**
 * This returns YOUR 'identity' as a Player type.
 *
 * Always returns 0 in story mode.
 */
function playerId() {
    return _in(0x4f8644af, 0x03d0e0d6, _r, _ri);
}
exports.playerId = playerId;
/**
 * Returns current player ped
 */
function playerPedId() {
    return _in(0xd80958fc, 0x74e988a6, _r, _ri);
}
exports.playerPedId = playerPedId;
function playstatsAbandonedMc(p0, p1, p2, p3, p4) {
    return _in(0xd558bec0, 0xbba7e8d2, p0, p1, p2, p3, p4);
}
exports.playstatsAbandonedMc = playstatsAbandonedMc;
function playstatsAcidMissionEnd(p0) {
    return _in(0x8a23d132, 0x4f6b2bac, p0);
}
exports.playstatsAcidMissionEnd = playstatsAcidMissionEnd;
function playstatsAcidRnd(p0) {
    return _in(0xceaccf05, 0x50fdc5ba, p0);
}
exports.playstatsAcidRnd = playstatsAcidRnd;
function playstatsAcquiredHiddenPackage(p0) {
    return _in(0x79ab33f0, 0xfbfac40c, p0);
}
exports.playstatsAcquiredHiddenPackage = playstatsAcquiredHiddenPackage;
function playstatsActivityDone(p0, activityId) {
    return _in(0xa071e0ed, 0x98f91286, p0, activityId);
}
exports.playstatsActivityDone = playstatsActivityDone;
function playstatsAppendDirectorMetric(p0) {
    return _in(0x46326e13, 0xda4e0546, _ii(p0));
}
exports.playstatsAppendDirectorMetric = playstatsAppendDirectorMetric;
function playstatsArcadeCabinet(p0) {
    return _in(0xf9096193, 0xdf1f99d4, p0);
}
exports.playstatsArcadeCabinet = playstatsArcadeCabinet;
function playstatsArcadeGame(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x533a7d1e, 0xa58df958, p0, p1, p2, p3, p4, p5, p6);
}
exports.playstatsArcadeGame = playstatsArcadeGame;
function playstatsArcadeLoveMatch(p0, p1) {
    return _in(0x4fcdbd3f, 0x0a813c25, p0, p1);
}
exports.playstatsArcadeLoveMatch = playstatsArcadeLoveMatch;
function playstatsArenaWarsEnded(data) {
    return _in(0xb479d9f0, 0xd48a1bc5, _ii(data));
}
exports.playstatsArenaWarsEnded = playstatsArenaWarsEnded;
function playstatsArenaWarsSpectator(p0, p1, p2, p3, p4) {
    return _in(0x6f4f5997, 0x53f8200a, p0, p1, p2, p3, p4);
}
exports.playstatsArenaWarsSpectator = playstatsArenaWarsSpectator;
function playstatsAttritionStageEnd(p0) {
    return _in(0xbd642335, 0xa732f1a8, p0);
}
exports.playstatsAttritionStageEnd = playstatsAttritionStageEnd;
function playstatsAwardBadSport(id) {
    return _in(0x47b32f56, 0x11e6e483, id);
}
exports.playstatsAwardBadSport = playstatsAwardBadSport;
function playstatsAwardNav(p0, p1, p2, p3) {
    return _in(0x70f52471, 0xe758ebae, p0, p1, p2, p3);
}
exports.playstatsAwardNav = playstatsAwardNav;
function playstatsAwardXp(amount, type, category) {
    return _in(0x46f917f6, 0xb4128fe4, amount, _ch(type), _ch(category));
}
exports.playstatsAwardXp = playstatsAwardXp;
function playstatsBackgroundScriptAction(action, value) {
    return _in(0x5009dfd7, 0x41329729, _ts(action), value);
}
exports.playstatsBackgroundScriptAction = playstatsBackgroundScriptAction;
function playstatsBanAlert(p0) {
    return _in(0x516fc96e, 0xb88eefe5, p0);
}
exports.playstatsBanAlert = playstatsBanAlert;
function playstatsBcCarJacking(p0) {
    return _in(0x7b18da61, 0xf6bae9d5, p0);
}
exports.playstatsBcCarJacking = playstatsBcCarJacking;
function playstatsBcCashing(p0) {
    return _in(0x53cae13e, 0x9b426993, p0);
}
exports.playstatsBcCashing = playstatsBcCashing;
function playstatsBcFindersKeepers(p0) {
    return _in(0xe3261d79, 0x1eb44acb, p0);
}
exports.playstatsBcFindersKeepers = playstatsBcFindersKeepers;
function playstatsBcMostWanted(p0) {
    return _in(0x930f5042, 0x03f561c9, p0);
}
exports.playstatsBcMostWanted = playstatsBcMostWanted;
function playstatsBcPointToPoint(p0) {
    return _in(0x73001e34, 0xf85137f8, p0);
}
exports.playstatsBcPointToPoint = playstatsBcPointToPoint;
function playstatsBcProtectionRacket(p0) {
    return _in(0x14eda9ee, 0x27bd1626, p0);
}
exports.playstatsBcProtectionRacket = playstatsBcProtectionRacket;
function playstatsBcSalvage(p0) {
    return _in(0x7d362911, 0x61859389, p0);
}
exports.playstatsBcSalvage = playstatsBcSalvage;
function playstatsBcSmashAndGrab(p0) {
    return _in(0x06eaf70a, 0xe066441e, p0);
}
exports.playstatsBcSmashAndGrab = playstatsBcSmashAndGrab;
function playstatsBusinessBattleEnded(p0) {
    return _in(0x316db59c, 0xd14c1774, p0);
}
exports.playstatsBusinessBattleEnded = playstatsBusinessBattleEnded;
function playstatsBuyContrabandMission(data) {
    return _in(0xd6781e42, 0x755531f7, _ii(data));
}
exports.playstatsBuyContrabandMission = playstatsBuyContrabandMission;
function playstatsBwAirFreight(p0) {
    return _in(0xf06a6f41, 0xcb445443, p0);
}
exports.playstatsBwAirFreight = playstatsBwAirFreight;
function playstatsBwAssault(p0) {
    return _in(0x678f86d8, 0xfc040bdb, p0);
}
exports.playstatsBwAssault = playstatsBwAssault;
function playstatsBwBellyOfTheBeast(p0) {
    return _in(0xa6f54bb2, 0xffca35ea, p0);
}
exports.playstatsBwBellyOfTheBeast = playstatsBwBellyOfTheBeast;
function playstatsBwBossonbossdeathmatch(p0) {
    return _in(0x8d8adb56, 0x2f09a245, p0);
}
exports.playstatsBwBossonbossdeathmatch = playstatsBwBossonbossdeathmatch;
function playstatsBwFragileGoods(p0) {
    return _in(0x282b6739, 0x644f4347, p0);
}
exports.playstatsBwFragileGoods = playstatsBwFragileGoods;
function playstatsBwHeadHunter(p0) {
    return _in(0x5ff2c33b, 0x13a02a11, p0);
}
exports.playstatsBwHeadHunter = playstatsBwHeadHunter;
function playstatsBwHuntTheBoss(p0) {
    return _in(0x88087ee1, 0xf28024ae, p0);
}
exports.playstatsBwHuntTheBoss = playstatsBwHuntTheBoss;
function playstatsBwSightseer(p0) {
    return _in(0xfcc228e0, 0x7217fcac, p0);
}
exports.playstatsBwSightseer = playstatsBwSightseer;
function playstatsBwYatchattack(p0) {
    return _in(0xd1a1ee3b, 0x4fa8e760, p0);
}
exports.playstatsBwYatchattack = playstatsBwYatchattack;
function playstatsCarclubChallenge(p0, p1, p2, p3) {
    return _in(0x1187cb58, 0xd7f3bed7, p0, p1, p2, p3);
}
exports.playstatsCarclubChallenge = playstatsCarclubChallenge;
function playstatsCarclubPoints(p0) {
    return _in(0xff14d6fe, 0xec507bbe, p0);
}
exports.playstatsCarclubPoints = playstatsCarclubPoints;
function playstatsCarclubPrize(p0, vehicleModel) {
    return _in(0x69c922b6, 0x77621428, p0, _ch(vehicleModel));
}
exports.playstatsCarclubPrize = playstatsCarclubPrize;
function playstatsCasinoBlackjack(p0) {
    return _in(0x3eae9730, 0x9727e7ad, p0);
}
exports.playstatsCasinoBlackjack = playstatsCasinoBlackjack;
function playstatsCasinoBlackjackLight(p0) {
    return _in(0xd5451c7b, 0xf151eb6f, p0);
}
exports.playstatsCasinoBlackjackLight = playstatsCasinoBlackjackLight;
function playstatsCasinoChip(p0) {
    return _in(0x0999f3f0, 0x90ec5012, p0);
}
exports.playstatsCasinoChip = playstatsCasinoChip;
function playstatsCasinoInsideTrack(p0) {
    return _in(0x049f0596, 0x25058a86, p0);
}
exports.playstatsCasinoInsideTrack = playstatsCasinoInsideTrack;
function playstatsCasinoInsideTrackLight(p0) {
    return _in(0x23a3cbcd, 0x50d54e47, p0);
}
exports.playstatsCasinoInsideTrackLight = playstatsCasinoInsideTrackLight;
function playstatsCasinoLuckySeven(p0) {
    return _in(0x0c432c14, 0x35f5e4fa, p0);
}
exports.playstatsCasinoLuckySeven = playstatsCasinoLuckySeven;
function playstatsCasinoRoulette(p0) {
    return _in(0x95101c44, 0x3a84e7f1, p0);
}
exports.playstatsCasinoRoulette = playstatsCasinoRoulette;
function playstatsCasinoRouletteLight(p0) {
    return _in(0x6572aba3, 0xde1197fc, p0);
}
exports.playstatsCasinoRouletteLight = playstatsCasinoRouletteLight;
function playstatsCasinoSlotMachine(p0) {
    return _in(0xef5ec67d, 0x392b830a, p0);
}
exports.playstatsCasinoSlotMachine = playstatsCasinoSlotMachine;
function playstatsCasinoSlotMachineLight(p0) {
    return _in(0xe60054a0, 0xfae8227f, p0);
}
exports.playstatsCasinoSlotMachineLight = playstatsCasinoSlotMachineLight;
function playstatsCasinoStoryMissionEnded(p0, p1) {
    return _in(0xfcccac2b, 0xd3c1f180, p0, p1);
}
exports.playstatsCasinoStoryMissionEnded = playstatsCasinoStoryMissionEnded;
function playstatsCasinoThreeCardPoker(p0) {
    return _in(0xf740fb33, 0x9d471c35, p0);
}
exports.playstatsCasinoThreeCardPoker = playstatsCasinoThreeCardPoker;
function playstatsCasinoThreeCardPokerLight(p0) {
    return _in(0xc9001364, 0xb4388f22, p0);
}
exports.playstatsCasinoThreeCardPokerLight = playstatsCasinoThreeCardPokerLight;
function playstatsChangeMcOutfit(p0, p1, p2, p3, p4) {
    return _in(0x28ecb8ac, 0x2f607db2, p0, p1, p2, p3, p4);
}
exports.playstatsChangeMcOutfit = playstatsChangeMcOutfit;
function playstatsChangeMcRole(p0, p1, p2, p3, role, p5, p6) {
    return _in(0x0b565b0a, 0xae56a0e8, p0, p1, p2, p3, role, p5, p6);
}
exports.playstatsChangeMcRole = playstatsChangeMcRole;
function playstatsCheatApplied(cheat) {
    return _in(0x6058665d, 0x72302d3f, _ts(cheat));
}
exports.playstatsCheatApplied = playstatsCheatApplied;
function playstatsClothChange(p0, p1, p2, p3, p4) {
    return _in(0x34b97304, 0x7a2268b9, p0, p1, p2, p3, p4);
}
exports.playstatsClothChange = playstatsClothChange;
function playstatsCollectiblePickedUp(p0, objectHash, p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10) {
    return _in(0xcd0a8a93, 0x38681cf2, p0, _ch(objectHash), p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10);
}
exports.playstatsCollectiblePickedUp = playstatsCollectiblePickedUp;
function playstatsCopyRankIntoNewSlot(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0xb7257ba2, 0x550ea10a, p0, p1, p2, p3, p4, p5, p6);
}
exports.playstatsCopyRankIntoNewSlot = playstatsCopyRankIntoNewSlot;
function playstatsCrateCreated(p0, p1, p2) {
    return _in(0xafc7e5e0, 0x75a96f46, _fv(p0), _fv(p1), _fv(p2));
}
exports.playstatsCrateCreated = playstatsCrateCreated;
function playstatsCrateDropMissionDone(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0x1cae5d2e, 0x3f9a07f0, p0, p1, p2, p3, p4, p5, p6, p7);
}
exports.playstatsCrateDropMissionDone = playstatsCrateDropMissionDone;
function playstatsCreateMatchHistoryId2() {
    const [retval, playerAccountId_out, posixTime_out] = _in(0x6dee77af, 0xf8c21bd1, _i, _i, _r);
    return [retval, playerAccountId_out, posixTime_out];
}
exports.playstatsCreateMatchHistoryId2 = playstatsCreateMatchHistoryId2;
function playstatsDarCheckpoint(data) {
    return _in(0x0bc254ff, 0x3a911501, _ii(data));
}
exports.playstatsDarCheckpoint = playstatsDarCheckpoint;
function playstatsDefendContrabandMission(data) {
    return _in(0x2605663b, 0xd4f23b5d, _ii(data));
}
exports.playstatsDefendContrabandMission = playstatsDefendContrabandMission;
function playstatsDjMissionEnded(p0) {
    return _in(0xd6ca58b3, 0xb53a0f22, p0);
}
exports.playstatsDjMissionEnded = playstatsDjMissionEnded;
function playstatsDjUsage(p0, p1) {
    return _in(0xb26f6706, 0x85631727, p0, p1);
}
exports.playstatsDjUsage = playstatsDjUsage;
function playstatsDroneUsage(p0, p1, p2) {
    return _in(0x66c7bb24, 0x16ed3fce, p0, p1, p2);
}
exports.playstatsDroneUsage = playstatsDroneUsage;
function playstatsDupeDetected(data) {
    return _in(0x848b6610, 0x0ee33b05, _ii(data));
}
exports.playstatsDupeDetected = playstatsDupeDetected;
function playstatsEarnedMcPoints(p0, p1, p2, p3, p4, p5) {
    return _in(0x50147885, 0x5a6074ce, p0, p1, p2, p3, p4, p5);
}
exports.playstatsEarnedMcPoints = playstatsEarnedMcPoints;
function playstatsEnterSessionPack(data) {
    return _in(0x878ff156, 0xd36e9956, _ii(data));
}
exports.playstatsEnterSessionPack = playstatsEnterSessionPack;
function playstatsExtraEvent(p0) {
    return _in(0xfa5b74ba, 0xb8a7ef99, p0);
}
exports.playstatsExtraEvent = playstatsExtraEvent;
function playstatsFastTrvl(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    return _in(0x4dc416f2, 0x46a41fc8, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
exports.playstatsFastTrvl = playstatsFastTrvl;
/**
 * p3: VehicleConversion, SCAdminCashGift
 * p4: 0
 * @param posX
 * @param posY
 * @param posZ
 * @param p3
 * @param p4
 * @param amount
 */
function playstatsFlowLow(posX, posY, posZ, p3, p4, amount) {
    return _in(0xe6a27cda, 0x42887f93, _fv(posX), _fv(posY), _fv(posZ), _ts(p3), p4, amount);
}
exports.playstatsFlowLow = playstatsFlowLow;
function playstatsFmEventAtob(p0) {
    return _in(0xbaa2f049, 0x0e146be8, p0);
}
exports.playstatsFmEventAtob = playstatsFmEventAtob;
function playstatsFmEventChallenges(p0) {
    return _in(0x6a60e439, 0x98228229, p0);
}
exports.playstatsFmEventChallenges = playstatsFmEventChallenges;
function playstatsFmEventCheckpointcollection(p0) {
    return _in(0x3de3aa51, 0x6fb126a4, p0);
}
exports.playstatsFmEventCheckpointcollection = playstatsFmEventCheckpointcollection;
function playstatsFmEventCompetitiveurbanwarfare(p0) {
    return _in(0x6551b1f7, 0xf6cd46ea, p0);
}
exports.playstatsFmEventCompetitiveurbanwarfare = playstatsFmEventCompetitiveurbanwarfare;
function playstatsFmEventCriminaldamage(p0) {
    return _in(0xedbf6c9b, 0x0d2c65c8, p0);
}
exports.playstatsFmEventCriminaldamage = playstatsFmEventCriminaldamage;
function playstatsFmEventDeaddrop(p0) {
    return _in(0x0a9c7f36, 0xe5d7b683, p0);
}
exports.playstatsFmEventDeaddrop = playstatsFmEventDeaddrop;
function playstatsFmEventHotproperty(p0) {
    return _in(0x84dfc579, 0xc2fc214c, p0);
}
exports.playstatsFmEventHotproperty = playstatsFmEventHotproperty;
function playstatsFmEventHuntbeast(p0) {
    return _in(0x2cd90358, 0xf67d0aa8, p0);
}
exports.playstatsFmEventHuntbeast = playstatsFmEventHuntbeast;
function playstatsFmEventKingofthecastle(p0) {
    return _in(0x164c5ff6, 0x63790845, p0);
}
exports.playstatsFmEventKingofthecastle = playstatsFmEventKingofthecastle;
function playstatsFmEventPasstheparcel(p0) {
    return _in(0x41961548, 0x6bbf1956, p0);
}
exports.playstatsFmEventPasstheparcel = playstatsFmEventPasstheparcel;
function playstatsFmEventPennedin(p0) {
    return _in(0x1a7ce7cd, 0x3e653485, p0);
}
exports.playstatsFmEventPennedin = playstatsFmEventPennedin;
function playstatsFmEventUrbanwarfare(p0) {
    return _in(0x8c9d1160, 0x5e59d955, p0);
}
exports.playstatsFmEventUrbanwarfare = playstatsFmEventUrbanwarfare;
function playstatsFmEventVehicletarget(p0) {
    return _in(0xbfafdb5f, 0xaaa5c5ab, p0);
}
exports.playstatsFmEventVehicletarget = playstatsFmEventVehicletarget;
function playstatsFmHeistPrepEnded(data) {
    return _in(0xd8afb345, 0xa9c5ccbb, _ii(data));
}
exports.playstatsFmHeistPrepEnded = playstatsFmHeistPrepEnded;
function playstatsFmMissionEnd(p0, p1, p2) {
    return _in(0x46a70777, 0xbe6ceab9, p0, p1, p2);
}
exports.playstatsFmMissionEnd = playstatsFmMissionEnd;
function playstatsFreemodeCasinoMissionEnded(data) {
    return _in(0x1a0d4a6c, 0x336b7bc5, _ii(data));
}
exports.playstatsFreemodeCasinoMissionEnded = playstatsFreemodeCasinoMissionEnded;
function playstatsFriendActivity(p0, p1) {
    return _in(0x0f71de29, 0xab2258f1, p0, p1);
}
exports.playstatsFriendActivity = playstatsFriendActivity;
function playstatsGunrunningMissionEnded(data) {
    return _in(0x0eacdf84, 0x87d5155a, _ii(data));
}
exports.playstatsGunrunningMissionEnded = playstatsGunrunningMissionEnded;
function playstatsGunrunningRnd(p0) {
    return _in(0xdaf80797, 0xfc534bec, p0);
}
exports.playstatsGunrunningRnd = playstatsGunrunningRnd;
function playstatsHeist3Drone(p0) {
    return _in(0xdfbd93bf, 0x2943e29b, p0);
}
exports.playstatsHeist3Drone = playstatsHeist3Drone;
function playstatsHeist3Finale(p0) {
    return _in(0x2e0259ba, 0xbc27a327, p0);
}
exports.playstatsHeist3Finale = playstatsHeist3Finale;
function playstatsHeist3Hack(p0, p1, p2, p3, p4, p5) {
    return _in(0x92fc0eed, 0xfac04a14, p0, p1, p2, p3, p4, p5);
}
exports.playstatsHeist3Hack = playstatsHeist3Hack;
function playstatsHeist3Prep(p0) {
    return _in(0x53c31853, 0xec9531ff, p0);
}
exports.playstatsHeist3Prep = playstatsHeist3Prep;
function playstatsHeist4Finale(p0) {
    return _in(0xc1e963c5, 0x8664b556, p0);
}
exports.playstatsHeist4Finale = playstatsHeist4Finale;
function playstatsHeist4Hack(p0, p1, p2, p3, p4) {
    return _in(0x2fa31734, 0x80008493, p0, p1, p2, p3, p4);
}
exports.playstatsHeist4Hack = playstatsHeist4Hack;
function playstatsHeist4Prep(p0) {
    return _in(0xdfcdb143, 0x17a9b361, p0);
}
exports.playstatsHeist4Prep = playstatsHeist4Prep;
function playstatsHeistSaveCheat(hash, p1) {
    return _in(0xf4ff020a, 0x08bc8863, _ch(hash), p1);
}
exports.playstatsHeistSaveCheat = playstatsHeistSaveCheat;
function playstatsHitContrabandDestroyLimit(p0) {
    return _in(0x60eedc12, 0xaf66e846, p0);
}
exports.playstatsHitContrabandDestroyLimit = playstatsHitContrabandDestroyLimit;
function playstatsHoldUpMissionDone(p0, p1, p2, p3) {
    return _in(0xcb00196b, 0x31c39eb1, p0, p1, p2, p3);
}
exports.playstatsHoldUpMissionDone = playstatsHoldUpMissionDone;
function playstatsHubEntry(p0) {
    return _in(0x2818ff66, 0x38cb09de, p0);
}
exports.playstatsHubEntry = playstatsHubEntry;
function playstatsHubExit(p0) {
    return _in(0x5a46ace5, 0xc4661132, p0);
}
exports.playstatsHubExit = playstatsHubExit;
function playstatsIdle(p0, p1, p2) {
    return _in(0xec9553a1, 0x78e8f1d1, p0, p1, p2);
}
exports.playstatsIdle = playstatsIdle;
function playstatsIdleKick(msStoodIdle) {
    return _in(0x5da3a8de, 0x8cb6226f, msStoodIdle);
}
exports.playstatsIdleKick = playstatsIdleKick;
function playstatsImpexpMissionEnded(p0) {
    return _in(0x7d8ba056, 0x88ad64c7, p0);
}
exports.playstatsImpexpMissionEnded = playstatsImpexpMissionEnded;
function playstatsImportExportMissionDone(p0, p1, p2, p3) {
    return _in(0x2b69f507, 0x4c894811, p0, p1, p2, p3);
}
exports.playstatsImportExportMissionDone = playstatsImportExportMissionDone;
function playstatsInstMissionEnd(p0) {
    return _in(0xfea3f7e8, 0x3c0610fa, p0);
}
exports.playstatsInstMissionEnd = playstatsInstMissionEnd;
function playstatsInstancedHeistEnded(p1, p2, p3) {
    return _in(0x1e1497d0, 0xd2108115, _i, p1, p2, p3);
}
exports.playstatsInstancedHeistEnded = playstatsInstancedHeistEnded;
function playstatsInventory(p0) {
    return _in(0x887dad63, 0xcf5b7908, p0);
}
exports.playstatsInventory = playstatsInventory;
function playstatsJobActivityEnd() {
    const [p0_out, p1_out, p2_out, p3_out] = _in(0xf8c54a46, 0x1c3e11dc, _i, _i, _i, _i);
    return [p0_out, p1_out, p2_out, p3_out];
}
exports.playstatsJobActivityEnd = playstatsJobActivityEnd;
function playstatsJobBend() {
    const [p0_out, p1_out, p2_out, p3_out] = _in(0xf5bb8dac, 0x426a52c0, _i, _i, _i, _i);
    return [p0_out, p1_out, p2_out, p3_out];
}
exports.playstatsJobBend = playstatsJobBend;
function playstatsJobLtsEnd() {
    const [p0_out, p1_out, p2_out, p3_out] = _in(0xa736cf7f, 0xb7c5bff4, _i, _i, _i, _i);
    return [p0_out, p1_out, p2_out, p3_out];
}
exports.playstatsJobLtsEnd = playstatsJobLtsEnd;
function playstatsJobLtsRoundEnd() {
    const [p0_out, p1_out, p2_out, p3_out] = _in(0x14e0b2d1, 0xad1044e0, _i, _i, _i, _i);
    return [p0_out, p1_out, p2_out, p3_out];
}
exports.playstatsJobLtsRoundEnd = playstatsJobLtsRoundEnd;
function playstatsKillYourself() {
    return _in(0x4aff7e02, 0xe485e92b);
}
exports.playstatsKillYourself = playstatsKillYourself;
function playstatsLeaveJobChain(p0, p1, p2, p3, p4) {
    return _in(0xc5be134e, 0xc7ba96a0, p0, p1, p2, p3, p4);
}
exports.playstatsLeaveJobChain = playstatsLeaveJobChain;
function playstatsMasterControl(p0, p1, p2, p3) {
    return _in(0x810b5fcc, 0x52ec7ff0, p0, p1, p2, p3);
}
exports.playstatsMasterControl = playstatsMasterControl;
function playstatsMatchStarted(p0, p1, p2) {
    return _in(0xbc80e22d, 0xed931e3d, p0, p1, p2);
}
exports.playstatsMatchStarted = playstatsMatchStarted;
function playstatsMcClubhouseActivity(p0, p1, p2, p3, p4, p5, p6, p7) {
    return _in(0x8989cbd7, 0xb4e82534, p0, p1, p2, p3, p4, p5, p6, p7);
}
exports.playstatsMcClubhouseActivity = playstatsMcClubhouseActivity;
function playstatsMcFormationEnds(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x03c2eebb, 0x04b3fb72, p0, p1, p2, p3, p4, p5, p6);
}
exports.playstatsMcFormationEnds = playstatsMcFormationEnds;
function playstatsMcKilledRivalMcMember(p0, p1, p2, p3, p4) {
    return _in(0xf534d94d, 0xfa2ead26, p0, p1, p2, p3, p4);
}
exports.playstatsMcKilledRivalMcMember = playstatsMcKilledRivalMcMember;
function playstatsMcRequestBike(p0, p1, p2, p3, p4) {
    return _in(0xcc25a455, 0x3dfbf9ea, p0, p1, p2, p3, p4);
}
exports.playstatsMcRequestBike = playstatsMcRequestBike;
function playstatsMinigameUsage(p0, p1, p2) {
    return _in(0xc14bd9f5, 0x337219b2, p0, p1, p2);
}
exports.playstatsMinigameUsage = playstatsMinigameUsage;
function playstatsMissionCheckpoint(p0, p1, p2, p3) {
    return _in(0xc900596a, 0x63978c1d, _ts(p0), p1, p2, p3);
}
exports.playstatsMissionCheckpoint = playstatsMissionCheckpoint;
function playstatsMissionEnded(p0) {
    return _in(0xbf371cd2, 0xb64212fd, p0);
}
exports.playstatsMissionEnded = playstatsMissionEnded;
function playstatsMissionOver(p0, p1, p2, p3, p4, p5) {
    return _in(0x7c4bb33a, 0x8ced7324, _ts(p0), p1, p2, p3, p4, p5);
}
exports.playstatsMissionOver = playstatsMissionOver;
function playstatsMissionStarted(p0, p1, p2, p3) {
    return _in(0xc19a2925, 0xc34d2231, _ts(p0), p1, p2, p3);
}
exports.playstatsMissionStarted = playstatsMissionStarted;
function playstatsMissionVote(p0) {
    return _in(0xc03fab2c, 0x2f92289b, p0);
}
exports.playstatsMissionVote = playstatsMissionVote;
function playstatsNightclubMissionEnded(p0) {
    return _in(0x830c3a44, 0xeb3f2cf9, p0);
}
exports.playstatsNightclubMissionEnded = playstatsNightclubMissionEnded;
function playstatsNjvsVote(p0) {
    return _in(0x5cdaed54, 0xb34b0ed0, p0);
}
exports.playstatsNjvsVote = playstatsNjvsVote;
function playstatsNpcInvite(p0) {
    return _in(0x93054c88, 0xe6aa7c44, _ts(p0));
}
exports.playstatsNpcInvite = playstatsNpcInvite;
function playstatsNpcPhone(p0) {
    return _in(0x0077f156, 0x13d36993, _ii(p0));
}
exports.playstatsNpcPhone = playstatsNpcPhone;
/**
 * This native does absolutely nothing, just a nullsub
 * @param totalTimeMs
 * @param p1
 * @param p2
 */
function playstatsOddjobDone(totalTimeMs, p1, p2) {
    return _in(0x69dea3e9, 0xdb727b4c, totalTimeMs, p1, p2);
}
exports.playstatsOddjobDone = playstatsOddjobDone;
function playstatsPegasusAsPersonalAircraft(modelHash) {
    return _in(0x9572bd4d, 0xd6b72122, _ch(modelHash));
}
exports.playstatsPegasusAsPersonalAircraft = playstatsPegasusAsPersonalAircraft;
function playstatsPimenuHideOptions(data) {
    return _in(0x203b3811, 0x33817079, _ii(data));
}
exports.playstatsPimenuHideOptions = playstatsPimenuHideOptions;
function playstatsPlayerStyle(p0) {
    return _in(0x48fac5dc, 0x7ac6ea99, p0);
}
exports.playstatsPlayerStyle = playstatsPlayerStyle;
function playstatsPropChange(p0, p1, p2, p3) {
    return _in(0xba739d6d, 0x5a05d6e7, p0, p1, p2, p3);
}
exports.playstatsPropChange = playstatsPropChange;
function playstatsQuickfixTool(element, item) {
    return _in(0x90d06228, 0x66e80445, element, _ts(item));
}
exports.playstatsQuickfixTool = playstatsQuickfixTool;
function playstatsQuitMode(p0, p1, p2, p3, p4) {
    return _in(0x5bf29846, 0xc6527c54, p0, p1, p2, p3, p4);
}
exports.playstatsQuitMode = playstatsQuitMode;
function playstatsRaceCheckpoint(p0, p1, p2, p3, p4) {
    return _in(0x9c375c31, 0x5099dde4, p0, p1, p2, p3, p4);
}
exports.playstatsRaceCheckpoint = playstatsRaceCheckpoint;
function playstatsRaceToPointMissionDone(p0, p1, p2, p3) {
    return _in(0xaddd1c75, 0x4e2e2914, p0, p1, p2, p3);
}
exports.playstatsRaceToPointMissionDone = playstatsRaceToPointMissionDone;
function playstatsRandomEvent(p0) {
    return _in(0x7ea06f97, 0x0f999394, p0);
}
exports.playstatsRandomEvent = playstatsRandomEvent;
function playstatsRandomMissionDone(name, p1, p2, p3) {
    return _in(0x71862b1d, 0x855f32e1, _ts(name), p1, p2, p3);
}
exports.playstatsRandomMissionDone = playstatsRandomMissionDone;
function playstatsRankUp(rank) {
    return _in(0xc7f2de41, 0xd102bfb4, rank);
}
exports.playstatsRankUp = playstatsRankUp;
function playstatsRecoverContrabandMission(data) {
    return _in(0x04d90ba8, 0x207ada2d, _ii(data));
}
exports.playstatsRecoverContrabandMission = playstatsRecoverContrabandMission;
function playstatsRivalBehavior(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0x27aa1c97, 0x3cacfe63, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
exports.playstatsRivalBehavior = playstatsRivalBehavior;
function playstatsRobberyFinale(p0) {
    return _in(0xbba55be9, 0xaaaabf44, p0);
}
exports.playstatsRobberyFinale = playstatsRobberyFinale;
function playstatsRobberyPrep(p0) {
    return _in(0x1a67dfbf, 0x1f5c3835, p0);
}
exports.playstatsRobberyPrep = playstatsRobberyPrep;
function playstatsRosBet(amount, act, player, cm) {
    return _in(0x121fb4dd, 0xdc2d5291, amount, act, player, _fv(cm));
}
exports.playstatsRosBet = playstatsRosBet;
function playstatsSellContrabandMission(data) {
    return _in(0xc729991a, 0x9065376e, _ii(data));
}
exports.playstatsSellContrabandMission = playstatsSellContrabandMission;
function playstatsSetJoinType(joinType) {
    return _in(0xd1032e48, 0x2629049e, joinType);
}
exports.playstatsSetJoinType = playstatsSetJoinType;
function playstatsShopItem(p0, p1, p2, p3, p4) {
    return _in(0x176852ac, 0xaac173d1, p0, p1, p2, p3, p4);
}
exports.playstatsShopItem = playstatsShopItem;
function playstatsShopmenuNav(p0, p1, p2) {
    return _in(0xf96e9ea8, 0x76d9dc92, p0, p1, p2);
}
exports.playstatsShopmenuNav = playstatsShopmenuNav;
function playstatsShowroomNav(p0, p1, entity) {
    return _in(0x961d4157, 0xb9b428db, p0, p1, _ch(entity));
}
exports.playstatsShowroomNav = playstatsShowroomNav;
/**
 * Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.
 * @param data
 */
function playstatsShowroomOverview(data) {
    return _in(0x151d6c04, 0xc9e2742f, _ii(data));
}
exports.playstatsShowroomOverview = playstatsShowroomOverview;
function playstatsSmugglerMissionEnded(data) {
    return _in(0x320c3514, 0x7d5b5ddd, _ii(data));
}
exports.playstatsSmugglerMissionEnded = playstatsSmugglerMissionEnded;
function playstatsSpentPiCustomLoadout(amount) {
    return _in(0xbe509b0a, 0x3693de8b, amount);
}
exports.playstatsSpentPiCustomLoadout = playstatsSpentPiCustomLoadout;
function playstatsSpinWheel(p0, p1, p2, p3) {
    return _in(0x6731de84, 0xa38bfad0, p0, p1, p2, p3);
}
exports.playstatsSpinWheel = playstatsSpinWheel;
/**
 * Allows CEventNetworkStuntPerformed to be triggered.
 */
function playstatsStartTrackingStunts() {
    return _in(0x928dbfb8, 0x92638ef3);
}
exports.playstatsStartTrackingStunts = playstatsStartTrackingStunts;
function playstatsStartedSessionInOfflinemode() {
    return _in(0x098760c7, 0x461724cd);
}
exports.playstatsStartedSessionInOfflinemode = playstatsStartedSessionInOfflinemode;
function playstatsStoneHatchetEnded(data) {
    return _in(0x35e39e55, 0x70358630, _ii(data));
}
exports.playstatsStoneHatchetEnded = playstatsStoneHatchetEnded;
/**
 * Disallows CEventNetworkStuntPerformed to be triggered.
 */
function playstatsStopTrackingStunts() {
    return _in(0x8a800dac, 0xcc0da55d);
}
exports.playstatsStopTrackingStunts = playstatsStopTrackingStunts;
function playstatsSubWeap(p0, p1, p2, p3) {
    return _in(0xd4367d31, 0x0f079db0, p0, p1, p2, p3);
}
exports.playstatsSubWeap = playstatsSubWeap;
function playstatsSwitchMcEmblem(p0, p1, p2, p3, p4) {
    return _in(0x0a50d260, 0x4e05cb94, p0, p1, p2, p3, p4);
}
exports.playstatsSwitchMcEmblem = playstatsSwitchMcEmblem;
function playstatsSwitchPassiveMode(p0, p1, p2, p3) {
    return _in(0x35eec6c2, 0xbc821a71, p0, p1, p2, p3);
}
exports.playstatsSwitchPassiveMode = playstatsSwitchPassiveMode;
function playstatsVehDel(bossId1, bossId2, bossType, vehicleID, reason) {
    return _in(0x10a691f5, 0x756416d0, bossId1, bossId2, bossType, vehicleID, reason);
}
exports.playstatsVehDel = playstatsVehDel;
function playstatsWarehouseMissionEnded(p0) {
    return _in(0x2d7a9b57, 0x7e72385e, p0);
}
exports.playstatsWarehouseMissionEnded = playstatsWarehouseMissionEnded;
/**
 * This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
 * @param weaponHash
 * @param componentHashTo
 * @param componentHashFrom
 */
function playstatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom) {
    return _in(0xe95c8a18, 0x75a02ca4, _ch(weaponHash), _ch(componentHashTo), _ch(componentHashFrom));
}
exports.playstatsWeaponModeChange = playstatsWeaponModeChange;
function playstatsWebsiteVisited(scaleformHash, p1) {
    return _in(0xddf24d53, 0x5060f811, _ch(scaleformHash), p1);
}
exports.playstatsWebsiteVisited = playstatsWebsiteVisited;
/**
 * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
 */
function plmGetConstrainedDurationMs() {
    return _in(0xabb2fa71, 0xc83a1b72, _r, _ri);
}
exports.plmGetConstrainedDurationMs = plmGetConstrainedDurationMs;
/**
 * aka "constrained"
 */
function plmIsInConstrainedMode() {
    return _in(0x684a4197, 0x5f077262, _r);
}
exports.plmIsInConstrainedMode = plmIsInConstrainedMode;
function pointCamAtCoord(cam, x, y, z) {
    return _in(0xf75497bb, 0x865f0803, cam, _fv(x), _fv(y), _fv(z));
}
exports.pointCamAtCoord = pointCamAtCoord;
/**
 * p5 always seems to be 1 i.e TRUE
 * @param cam
 * @param entity
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
function pointCamAtEntity(cam, entity, p2, p3, p4, p5) {
    return _in(0x5640bff8, 0x6b16e8dc, cam, entity, _fv(p2), _fv(p3), _fv(p4), p5);
}
exports.pointCamAtEntity = pointCamAtEntity;
/**
 * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
 * @param cam
 * @param ped
 * @param boneIndex
 * @param x
 * @param y
 * @param z
 * @param p6
 */
function pointCamAtPedBone(cam, ped, boneIndex, x, y, z, p6) {
    return _in(0x68b2b5f3, 0x3ba63c41, cam, ped, boneIndex, _fv(x), _fv(y), _fv(z), p6);
}
exports.pointCamAtPedBone = pointCamAtPedBone;
/**
 * Pops off the "roof" bone in the direction of the specified offset from the vehicle.
 * @param vehicle
 * @param x
 * @param y
 * @param z
 */
function popOffVehicleRoofWithImpulse(vehicle, x, y, z) {
    return _in(0xe38cb9d7, 0xd39fdbcc, vehicle, _fv(x), _fv(y), _fv(z));
}
exports.popOffVehicleRoofWithImpulse = popOffVehicleRoofWithImpulse;
/**
 * Detaches the vehicle's windscreen.
 * For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
 * @param vehicle
 */
function popOutVehicleWindscreen(vehicle) {
    return _in(0x6d645d59, 0xfb5f5ad3, vehicle);
}
exports.popOutVehicleWindscreen = popOutVehicleWindscreen;
function popTimecycleModifier() {
    return _in(0x3c8938d7, 0xd872211e);
}
exports.popTimecycleModifier = popTimecycleModifier;
/**
 * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
 */
function populateNow() {
    return _in(0x7472bb27, 0x0d7b4f3e);
}
exports.populateNow = populateNow;
function pow(base, exponent) {
    return _in(0xe3621cc4, 0x0f31fe2e, _fv(base), _fv(exponent), _r, _rf);
}
exports.pow = pow;
/**
 * This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
 * For instance, GTA:O opening cutscene.
 * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
 * https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
 * @param srl
 */
function prefetchSrl(srl) {
    return _in(0x3d245789, 0xce12982c, _ts(srl));
}
exports.prefetchSrl = prefetchSrl;
function preloadBusyspinner() {
    return _in(0xc65ab383, 0xcd91df98);
}
exports.preloadBusyspinner = preloadBusyspinner;
function preloadCloudHat(name) {
    return _in(0x11b56fbb, 0xf7224868, _ts(name));
}
exports.preloadCloudHat = preloadCloudHat;
function preloadScriptConversation(p0, p1, p2, p3) {
    return _in(0x3b3cad61, 0x66916d87, p0, p1, p2, p3);
}
exports.preloadScriptConversation = preloadScriptConversation;
function preloadScriptPhoneConversation(p0, p1) {
    return _in(0x6004bcb0, 0xe226aaea, p0, p1);
}
exports.preloadScriptPhoneConversation = preloadScriptPhoneConversation;
function preloadVehicleAudioBank(vehicleModel) {
    return _in(0xca4cea6a, 0xe0000a7e, _ch(vehicleModel));
}
exports.preloadVehicleAudioBank = preloadVehicleAudioBank;
function preloadVehicleMod(vehicle, modType, modIndex) {
    return _in(0x758f49c2, 0x4925568a, vehicle, modType, modIndex);
}
exports.preloadVehicleMod = preloadVehicleMod;
/**
 * Example:
 *
 * bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 */
function prepareAlarm(alarmName) {
    return _in(0x9d74ae34, 0x3db65533, _ts(alarmName), _r);
}
exports.prepareAlarm = prepareAlarm;
/**
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
function prepareMusicEvent(eventName) {
    return _in(0x1e5185b7, 0x2ef5158a, _ts(eventName), _r);
}
exports.prepareMusicEvent = prepareMusicEvent;
/**
 * p1 is always 0 in the scripts
 * @param audioEvent
 * @param p1
 */
function prepareSynchronizedAudioEvent(audioEvent, p1) {
    return _in(0xc7abcaca, 0x4985a766, _ts(audioEvent), p1, _r);
}
exports.prepareSynchronizedAudioEvent = prepareSynchronizedAudioEvent;
function prepareSynchronizedAudioEventForScene(sceneID, audioEvent) {
    return _in(0x029fe7cd, 0x1b7e2e75, sceneID, _ts(audioEvent), _r);
}
exports.prepareSynchronizedAudioEventForScene = prepareSynchronizedAudioEventForScene;
function presenceEventUpdatestatFloat(statHash, value, p2) {
    return _in(0x30a6614c, 0x1f7799b8, _ch(statHash), _fv(value), p2);
}
exports.presenceEventUpdatestatFloat = presenceEventUpdatestatFloat;
function presenceEventUpdatestatInt(statHash, value, p2) {
    return _in(0x11ff1c80, 0x276097ed, _ch(statHash), value, p2);
}
exports.presenceEventUpdatestatInt = presenceEventUpdatestatInt;
function presenceEventUpdatestatIntWithString(statHash, value, p2, string) {
    return _in(0x6483c258, 0x49031c4f, _ch(statHash), value, p2, _ts(string));
}
exports.presenceEventUpdatestatIntWithString = presenceEventUpdatestatIntWithString;
/**
 * Only one match in the scripts:
 *
 * GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
 * @param timecycleModifierName
 */
function presetInteriorAmbientCache(timecycleModifierName) {
    return _in(0xd7021272, 0xeb0a451e, _ts(timecycleModifierName));
}
exports.presetInteriorAmbientCache = presetInteriorAmbientCache;
function preventArrestStateThisFrame() {
    return _in(0xe3d969d2, 0x785ffb5e);
}
exports.preventArrestStateThisFrame = preventArrestStateThisFrame;
function preventCollectionOfPortablePickup(object, p1, p2) {
    return _in(0x92aefb5f, 0x6e294023, object, p1, p2);
}
exports.preventCollectionOfPortablePickup = preventCollectionOfPortablePickup;
/**
 * This isn't a hash collision.
 * @param p0
 * @param p1
 * @param p2
 */
function processCashGift(p2) {
    const [retval, p0_out, p1_out] = _in(0x20194d48, 0xeaec9a41, _i, _i, _ts(p2), _r, _s);
    return [retval, p0_out, p1_out];
}
exports.processCashGift = processCashGift;
/**
 * Called to update entity attachments.
 * @param entity
 */
function processEntityAttachments(entity) {
    return _in(0xf4080490, 0xadc51c6f, entity);
}
exports.processEntityAttachments = processEntityAttachments;
function procgrassDisableAmbscalescan() {
    return _in(0x0218ba06, 0x7d249dea);
}
exports.procgrassDisableAmbscalescan = procgrassDisableAmbscalescan;
function procgrassDisableCullsphere(handle) {
    return _in(0x649c97d5, 0x2332341a, handle);
}
exports.procgrassDisableCullsphere = procgrassDisableCullsphere;
function procgrassEnableAmbscalescan() {
    return _in(0x14fc5833, 0x464340a8);
}
exports.procgrassEnableAmbscalescan = procgrassEnableAmbscalescan;
function procgrassEnableCullsphere(handle, x, y, z, scale) {
    return _in(0xae51bc85, 0x8f32ba66, handle, _fv(x), _fv(y), _fv(z), _fv(scale));
}
exports.procgrassEnableCullsphere = procgrassEnableCullsphere;
function procgrassIsCullsphereEnabled(handle) {
    return _in(0x2c42340f, 0x916c5930, handle, _r);
}
exports.procgrassIsCullsphereEnabled = procgrassIsCullsphereEnabled;
function pulseBlip(blip) {
    return _in(0x742d6fd4, 0x3115af73, blip);
}
exports.pulseBlip = pulseBlip;
function pushTimecycleModifier() {
    return _in(0x58f73529, 0x0861e6b4);
}
exports.pushTimecycleModifier = pushTimecycleModifier;
function queryMovieMeshSetState(p0) {
    return _in(0x9b6e70c5, 0xceef4eeb, p0, _r, _ri);
}
exports.queryMovieMeshSetState = queryMovieMeshSetState;
function queueMissionRepeatLoad() {
    return _in(0x72de5217, 0x8c291cb5, _r);
}
exports.queueMissionRepeatLoad = queueMissionRepeatLoad;
/**
 * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
 * Returns 1 if the message isn't currently on screen
 */
function queueMissionRepeatSave() {
    return _in(0x44a0bdc5, 0x59b35f6e, _r);
}
exports.queueMissionRepeatSave = queueMissionRepeatSave;
function queueMissionRepeatSaveForBenchmarkTest() {
    return _in(0xeb2104e9, 0x05c6f2e9, _r);
}
exports.queueMissionRepeatSaveForBenchmarkTest = queueMissionRepeatSaveForBenchmarkTest;
/**
 * 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
 * @param p0
 */
function queueOperationToCreateSortedListOfPhotos(p0) {
    return _in(0x2a893980, 0xe96b659a, p0, _r);
}
exports.queueOperationToCreateSortedListOfPhotos = queueOperationToCreateSortedListOfPhotos;
/**
 * Exits the game and downloads a fresh social club update on next restart.
 */
function quitGame() {
    return _in(0xeb6891f0, 0x3362fb12);
}
exports.quitGame = quitGame;
function raiseConvertibleRoof(vehicle, instantlyRaise) {
    return _in(0x8f5fb35d, 0x7e88fc70, vehicle, instantlyRaise);
}
exports.raiseConvertibleRoof = raiseConvertibleRoof;
function reactivateAllObjectBrainsThatAreWaitingTillOutOfRange() {
    return _in(0x4d953df7, 0x8ebf8158);
}
exports.reactivateAllObjectBrainsThatAreWaitingTillOutOfRange = reactivateAllObjectBrainsThatAreWaitingTillOutOfRange;
function reactivateAllWorldBrainsThatAreWaitingTillOutOfRange() {
    return _in(0x0b40ed49, 0xd7d6ff84);
}
exports.reactivateAllWorldBrainsThatAreWaitingTillOutOfRange = reactivateAllWorldBrainsThatAreWaitingTillOutOfRange;
/**
 * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
 *
 * Here are possible values of argument -
 *
 * "ob_tv"
 * "launcher_Darts"
 * @param scriptName
 */
function reactivateNamedObjectBrainsWaitingTillOutOfRange(scriptName) {
    return _in(0x6e91b04e, 0x08773030, _ts(scriptName));
}
exports.reactivateNamedObjectBrainsWaitingTillOutOfRange = reactivateNamedObjectBrainsWaitingTillOutOfRange;
/**
 * Possible values:
 *
 * act_cinema
 * am_mp_carwash_launch
 * am_mp_carwash_control
 * am_mp_property_ext
 * chop
 * fairgroundHub
 * launcher_BasejumpHeli
 * launcher_BasejumpPack
 * launcher_CarWash
 * launcher_golf
 * launcher_Hunting_Ambient
 * launcher_MrsPhilips
 * launcher_OffroadRacing
 * launcher_pilotschool
 * launcher_Racing
 * launcher_rampage
 * launcher_rampage
 * launcher_range
 * launcher_stunts
 * launcher_stunts
 * launcher_tennis
 * launcher_Tonya
 * launcher_Triathlon
 * launcher_Yoga
 * ob_mp_bed_low
 * ob_mp_bed_med
 * @param scriptName
 */
function reactivateNamedWorldBrainsWaitingTillOutOfRange(scriptName) {
    return _in(0x6d6840ce, 0xe8845831, _ts(scriptName));
}
exports.reactivateNamedWorldBrainsWaitingTillOutOfRange = reactivateNamedWorldBrainsWaitingTillOutOfRange;
function recordBrokenGlass(x, y, z, radius) {
    return _in(0xfbe20329, 0x593dec9d, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.recordBrokenGlass = recordBrokenGlass;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 * @param p1
 * @param p2
 */
function recordGreatestMoment(p0, p1, p2) {
    return _in(0x66972397, 0xe0757e7a, p0, p1, p2);
}
exports.recordGreatestMoment = recordGreatestMoment;
function refillAmmoInstantly(ped) {
    return _in(0x8c0d57ea, 0x686fad87, ped, _r);
}
exports.refillAmmoInstantly = refillAmmoInstantly;
function refreshClosestOceanShoreline() {
    return _in(0x5d2bfaab, 0x8d956e0e);
}
exports.refreshClosestOceanShoreline = refreshClosestOceanShoreline;
function refreshInterior(interior) {
    return _in(0x41f37c34, 0x27c75ae0, interior);
}
exports.refreshInterior = refreshInterior;
function refreshPlayerListStats(p0) {
    return _in(0xe26ccff8, 0x094d8c74, p0, _r);
}
exports.refreshPlayerListStats = refreshPlayerListStats;
function refreshWaypoint() {
    return _in(0x81fa173f, 0x170560d1);
}
exports.refreshWaypoint = refreshWaypoint;
function registerBoolToSave(name) {
    return _in(0xc8f41314, 0x14c835a1, _i, _ts(name));
}
exports.registerBoolToSave = registerBoolToSave;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 * @param p1
 */
function registerEffectForReplayEditor(p0, p1) {
    return _in(0x7e2bd3ef, 0x6c205f09, _ts(p0), p1);
}
exports.registerEffectForReplayEditor = registerEffectForReplayEditor;
function registerEntityForCutscene(cutscenePed, cutsceneEntName, p2, modelHash, p4) {
    return _in(0xe40c1c56, 0xdf95c2e8, cutscenePed, _ts(cutsceneEntName), p2, _ch(modelHash), p4);
}
exports.registerEntityForCutscene = registerEntityForCutscene;
function registerEnumToSave(name) {
    return _in(0x10c2fa78, 0xd0e128a1, _i, _ts(name));
}
exports.registerEnumToSave = registerEnumToSave;
function registerFloatToSave(name) {
    return _in(0x7caec29e, 0xcb5dfebb, _i, _ts(name));
}
exports.registerFloatToSave = registerFloatToSave;
/**
 * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
 * @param ped
 * @param radius
 */
function registerHatedTargetsAroundPed(ped, radius) {
    return _in(0x9222f300, 0xbf8354fe, ped, _fv(radius));
}
exports.registerHatedTargetsAroundPed = registerHatedTargetsAroundPed;
function registerInt64ToSave(name) {
    return _in(0xa735353c, 0x77334ea0, _i, _ts(name));
}
exports.registerInt64ToSave = registerInt64ToSave;
function registerIntToSave(name) {
    return _in(0x34c9ee59, 0x86258415, _i, _ts(name));
}
exports.registerIntToSave = registerIntToSave;
function registerNamedRendertarget(name, p1) {
    return _in(0x57d9c126, 0x35e25ce3, _ts(name), p1, _r);
}
exports.registerNamedRendertarget = registerNamedRendertarget;
/**
 * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
 */
function registerNoirLensEffect() {
    return _in(0xa44ff770, 0xdfbc5dae);
}
exports.registerNoirLensEffect = registerNoirLensEffect;
/**
 * Registers a script for any object with a specific model hash.
 *
 * BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
 *
 * - Nacorpio
 * @param scriptName
 * @param modelHash
 * @param p2
 * @param activationRange
 * @param p4
 * @param p5
 */
function registerObjectScriptBrain(scriptName, modelHash, p2, activationRange, p4, p5) {
    return _in(0x0be84c31, 0x8ba6ec22, _ts(scriptName), _ch(modelHash), p2, _fv(activationRange), p4, p5);
}
exports.registerObjectScriptBrain = registerObjectScriptBrain;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param ped
 */
function registerPedheadshot(ped) {
    return _in(0x44626587, 0x88425076, ped, _r, _ri);
}
exports.registerPedheadshot = registerPedheadshot;
function registerPedheadshotHires(ped) {
    return _in(0xba8805a1, 0x108a2515, ped, _r, _ri);
}
exports.registerPedheadshotHires = registerPedheadshotHires;
/**
 * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
 * @param ped
 */
function registerPedheadshotTransparent(ped) {
    return _in(0x953563ce, 0x563143af, ped, _r, _ri);
}
exports.registerPedheadshotTransparent = registerPedheadshotTransparent;
function registerPostfxBulletImpact(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity) {
    return _in(0x170911f3, 0x7f646f29, _fv(weaponWorldPosX), _fv(weaponWorldPosY), _fv(weaponWorldPosZ), _fv(intensity));
}
exports.registerPostfxBulletImpact = registerPostfxBulletImpact;
/**
 * returns savehouseHandle
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
function registerSaveHouse(x, y, z, p3, p4, p5, p6) {
    return _in(0xc0714d0a, 0x7eeeca54, _fv(x), _fv(y), _fv(z), _fv(p3), _ts(p4), p5, p6, _r, _ri);
}
exports.registerSaveHouse = registerSaveHouse;
/**
 * Registers a protected variable that will be checked for modifications by the anticheat
 * @param variable
 */
function registerScriptVariable(variable) {
    return _in(0x40eb1efd, 0x921822bc, _ii(variable));
}
exports.registerScriptVariable = registerScriptVariable;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
function registerScriptWithAudio(p0) {
    return _in(0xc6ed9d50, 0x92438d91, p0);
}
exports.registerScriptWithAudio = registerScriptWithAudio;
/**
 * PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
 *
 * l_216 = RECSBRobber1
 * @param ped
 * @param target
 */
function registerTarget(ped, target) {
    return _in(0x2f25d9ae, 0xfa34fba2, ped, target);
}
exports.registerTarget = registerTarget;
/**
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");
 * @param p0
 * @param name
 */
function registerTextLabel15ToSave(name) {
    return _in(0x6f7794f2, 0x8c6b2535, _i, _ts(name));
}
exports.registerTextLabel15ToSave = registerTextLabel15ToSave;
/**
 * Only found 3 times in decompiled scripts.
 *
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A -- [[6]] ], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
 * @param p0
 * @param name
 */
function registerTextLabel23ToSave(name) {
    return _in(0x48f06926, 0x5a0e4bec, _i, _ts(name));
}
exports.registerTextLabel23ToSave = registerTextLabel23ToSave;
/**
 * Only found 2 times in decompiled scripts.
 *
 * MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0 -- [[8]] ], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
 * MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A -- [[8]] ], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
 * @param p0
 * @param name
 */
function registerTextLabel31ToSave(name) {
    return _in(0x8269816f, 0x6cfd40f8, _i, _ts(name));
}
exports.registerTextLabel31ToSave = registerTextLabel31ToSave;
/**
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A -- [[16]] ], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");
 * @param p0
 * @param name
 */
function registerTextLabel63ToSave(name) {
    return _in(0xfaa457ef, 0x263e8763, _i, _ts(name));
}
exports.registerTextLabel63ToSave = registerTextLabel63ToSave;
function registerTextLabelToSave(name) {
    return _in(0xedb1232c, 0x5beae62f, _i, _ts(name));
}
exports.registerTextLabelToSave = registerTextLabelToSave;
function registerWorldPointScriptBrain(scriptName, activationRange, p2) {
    return _in(0x3cdc7136, 0x613284bd, _ts(scriptName), _fv(activationRange), p2);
}
exports.registerWorldPointScriptBrain = registerWorldPointScriptBrain;
function releaseAllCommerceItemImages() {
    return _in(0x72d0706c, 0xd6ccdb58);
}
exports.releaseAllCommerceItemImages = releaseAllCommerceItemImages;
function releaseAmbientAudioBank() {
    return _in(0x65475a21, 0x8ffaa93d);
}
exports.releaseAmbientAudioBank = releaseAmbientAudioBank;
function releaseBinkMovie(binkMovie) {
    return _in(0x04d950ee, 0xfa4eed8c, binkMovie);
}
exports.releaseBinkMovie = releaseBinkMovie;
/**
 * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
 * To disable the keys, use `0xEC9264727EEC0F28`
 */
function releaseControlOfFrontend() {
    return _in(0x14621bb1, 0xdf14e2b2);
}
exports.releaseControlOfFrontend = releaseControlOfFrontend;
function releaseMissionAudioBank() {
    return _in(0x0ec92a1b, 0xf0857187);
}
exports.releaseMissionAudioBank = releaseMissionAudioBank;
function releaseMovieMeshSet(movieMeshSet) {
    return _in(0xeb119aa0, 0x14e89183, movieMeshSet);
}
exports.releaseMovieMeshSet = releaseMovieMeshSet;
function releaseNamedRendertarget(name) {
    return _in(0xe9f6ffe8, 0x37354dd4, _ts(name), _r);
}
exports.releaseNamedRendertarget = releaseNamedRendertarget;
/**
 * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
 * @param audioBank
 */
function releaseNamedScriptAudioBank(audioBank) {
    return _in(0x77ed1706, 0x67f50170, _ts(audioBank));
}
exports.releaseNamedScriptAudioBank = releaseNamedScriptAudioBank;
function releasePedPreloadPropData(ped) {
    return _in(0xf79f9def, 0x0aade61a, ped);
}
exports.releasePedPreloadPropData = releasePedPreloadPropData;
function releasePedPreloadVariationData(ped) {
    return _in(0x5aab586f, 0xfec0fd96, ped);
}
exports.releasePedPreloadVariationData = releasePedPreloadVariationData;
function releasePedheadshotImgUpload(id) {
    return _in(0x5d517b27, 0xcf6ecd04, id);
}
exports.releasePedheadshotImgUpload = releasePedheadshotImgUpload;
function releasePreloadMods(vehicle) {
    return _in(0x445d79f9, 0x95508307, vehicle);
}
exports.releasePreloadMods = releasePreloadMods;
function releaseScriptAudioBank() {
    return _in(0x7a2d8ad0, 0xa9eb9c3f);
}
exports.releaseScriptAudioBank = releaseScriptAudioBank;
/**
 * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
 * @param entityHit
 */
function releaseScriptGuidFromEntity(entityHit) {
    return _in(0x2b3334bc, 0xa57cd799, entityHit);
}
exports.releaseScriptGuidFromEntity = releaseScriptGuidFromEntity;
function releaseSoundId(soundId) {
    return _in(0x353fc880, 0x830b88fa, soundId);
}
exports.releaseSoundId = releaseSoundId;
function releaseWeaponAudio() {
    return _in(0xce4ac043, 0x9f607045);
}
exports.releaseWeaponAudio = releaseWeaponAudio;
function reloadMapMenu() {
    return _in(0x2916a928, 0x514c9827);
}
exports.reloadMapMenu = reloadMapMenu;
function remapLodscaleRangeThisFrame(p0, p1, p2, p3) {
    return _in(0xbed8ca5f, 0xf5e04113, _fv(p0), _fv(p1), _fv(p2), _fv(p3));
}
exports.remapLodscaleRangeThisFrame = remapLodscaleRangeThisFrame;
function remoteCheaterPlayerDetected(player, a, b) {
    return _in(0x472841a0, 0x26d26d8b, player, a, b, _r);
}
exports.remoteCheaterPlayerDetected = remoteCheaterPlayerDetected;
function removeActionModeAsset(asset) {
    return _in(0x13e940f8, 0x8470fa51, _ts(asset));
}
exports.removeActionModeAsset = removeActionModeAsset;
function removeAirDefenceSphere(zoneId) {
    return _in(0x0abf5358, 0x77897560, zoneId, _r);
}
exports.removeAirDefenceSphere = removeAirDefenceSphere;
function removeAllAirDefenceSpheres() {
    return _in(0x1e45b34a, 0xdebee48e);
}
exports.removeAllAirDefenceSpheres = removeAllAirDefenceSpheres;
function removeAllCoverBlockingAreas() {
    return _in(0xdb6708c0, 0xb46f56d8);
}
exports.removeAllCoverBlockingAreas = removeAllCoverBlockingAreas;
/**
 * setting the last params to false it does that same so I would suggest its not a toggle
 * @param ped
 * @param p1
 */
function removeAllPedWeapons(ped, p1) {
    return _in(0xf25df915, 0xfa38c5f3, ped, p1);
}
exports.removeAllPedWeapons = removeAllPedWeapons;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
function removeAllPickupsOfType(pickupHash) {
    return _in(0x27f9d613, 0x092159cf, _ch(pickupHash));
}
exports.removeAllPickupsOfType = removeAllPickupsOfType;
/**
 * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
 * @param weaponHash
 * @param explode
 */
function removeAllProjectilesOfType(weaponHash, explode) {
    return _in(0xfc52e0f3, 0x7e446528, _ch(weaponHash), explode);
}
exports.removeAllProjectilesOfType = removeAllProjectilesOfType;
function removeAllShockingEvents(p0) {
    return _in(0xeaabe8fd, 0xfa21274c, p0);
}
exports.removeAllShockingEvents = removeAllShockingEvents;
/**
 * entity must be a valid entity; ped can be NULL
 * @param entity
 * @param ped
 */
function removeAllStickyBombsFromEntity(entity, ped) {
    return _in(0x715135f4, 0xb82ac90d, entity, ped);
}
exports.removeAllStickyBombsFromEntity = removeAllStickyBombsFromEntity;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
function removeAnimDict(animDict) {
    return _in(0xf66a602f, 0x829e2a06, _ts(animDict));
}
exports.removeAnimDict = removeAnimDict;
/**
 * Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 *
 * Animation set and clip set are synonymous.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
function removeAnimSet(animSet) {
    return _in(0x16350528, 0xf93024b3, _ts(animSet));
}
exports.removeAnimSet = removeAnimSet;
/**
 * In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
 *
 * E.g.:
 *
 * Ped pped = PLAYER::PLAYER_PED_ID();
 * Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
 * Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
 *
 * works fine.
 * But later attempting to delete it with:
 *
 * Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
 * if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);
 *
 * doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
 *
 * Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
 * -------------
 *
 * Passing the address of the variable instead of the value works for me.
 * e.g.
 * int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
 * HUD::REMOVE_BLIP(&blip);
 *
 *
 * Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
 * @param blip
 */
function removeBlip(blip) {
    return _in(0x86a65257, 0x0e5f25dd, _ii(blip));
}
exports.removeBlip = removeBlip;
/**
 * Alias for REMOVE_ANIM_SET.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
function removeClipSet(clipSet) {
    return _in(0x01f73a13, 0x1c18cd94, _ts(clipSet));
}
exports.removeClipSet = removeClipSet;
/**
 * Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
 * @param ped
 */
function removeCopBlipFromPed(ped) {
    return _in(0xc594b315, 0xedf2d4af, ped);
}
exports.removeCopBlipFromPed = removeCopBlipFromPed;
function removeCoverBlockingAreasAtPosition(x, y, z) {
    return _in(0xfa83ca67, 0x76038f64, _fv(x), _fv(y), _fv(z));
}
exports.removeCoverBlockingAreasAtPosition = removeCoverBlockingAreasAtPosition;
function removeCoverPoint(coverpoint) {
    return _in(0xae287c92, 0x3d891715, coverpoint);
}
exports.removeCoverPoint = removeCoverPoint;
/**
 * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
function removeCutFile(cutsceneName) {
    return _in(0xd00d76a7, 0xdfc9d852, _ts(cutsceneName));
}
exports.removeCutFile = removeCutFile;
function removeCutscene() {
    return _in(0x440af51a, 0x3462b86f);
}
exports.removeCutscene = removeCutscene;
function removeDecal(decal) {
    return _in(0xed3f3464, 0x29ccd659, decal);
}
exports.removeDecal = removeDecal;
function removeDecalsFromObject(obj) {
    return _in(0xccf71cbd, 0xdf5b6cb9, obj);
}
exports.removeDecalsFromObject = removeDecalsFromObject;
function removeDecalsFromObjectFacing(obj, x, y, z) {
    return _in(0xa6f6f70f, 0xdc6d144c, obj, _fv(x), _fv(y), _fv(z));
}
exports.removeDecalsFromObjectFacing = removeDecalsFromObjectFacing;
function removeDecalsFromVehicle(vehicle) {
    return _in(0xe91f1b65, 0xf2b48d57, vehicle);
}
exports.removeDecalsFromVehicle = removeDecalsFromVehicle;
/**
 * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
 * @param x
 * @param y
 * @param z
 * @param range
 */
function removeDecalsInRange(x, y, z, range) {
    return _in(0x5d6b2d48, 0x30a67c62, _fv(x), _fv(y), _fv(z), _fv(range));
}
exports.removeDecalsInRange = removeDecalsInRange;
function removeDispatchSpawnBlockingArea(p0) {
    return _in(0x264ac28b, 0x01b353a5, p0);
}
exports.removeDispatchSpawnBlockingArea = removeDispatchSpawnBlockingArea;
/**
 * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
 * Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
 * @param doorHash
 * @param p1
 */
function removeDoorFromSystem(doorHash, p1) {
    return _in(0x464d8e14, 0x27156fe4, _ch(doorHash), p1);
}
exports.removeDoorFromSystem = removeDoorFromSystem;
function removeEntityFromAudioMixGroup(entity, p1) {
    return _in(0x18eb48cf, 0xc41f2ea0, entity, _fv(p1));
}
exports.removeEntityFromAudioMixGroup = removeEntityFromAudioMixGroup;
/**
 * p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
 * @param calmingQuad
 */
function removeExtraCalmingQuad(calmingQuad) {
    return _in(0xb1252e3e, 0x59a82aaf, calmingQuad);
}
exports.removeExtraCalmingQuad = removeExtraCalmingQuad;
function removeFakeConeData(blip) {
    return _in(0x35a3cd97, 0xb2c0a6d2, blip);
}
exports.removeFakeConeData = removeFakeConeData;
function removeForcedObject(x, y, z, p3, modelHash) {
    return _in(0x61b6775e, 0x83c0db6f, _fv(x), _fv(y), _fv(z), _fv(p3), _ch(modelHash));
}
exports.removeForcedObject = removeForcedObject;
function removeFromItemset(item, itemset) {
    return _in(0x25e68244, 0xb0177686, item, itemset);
}
exports.removeFromItemset = removeFromItemset;
/**
 * This native does absolutely nothing, just a nullsub
 * @param handle
 */
function removeGrassCullSphere(handle) {
    return _in(0x61f95e5b, 0xb3e0a8c6, handle);
}
exports.removeGrassCullSphere = removeGrassCullSphere;
function removeGroup(groupId) {
    return _in(0x8eb2f690, 0x76af7053, groupId);
}
exports.removeGroup = removeGroup;
/**
 * Removes an IPL from the map.
 *
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 *
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
 *
 * C++:
 * STREAMING::REMOVE_IPL("trevorstrailertidy");
 *
 * iplName = Name of IPL you want to remove.
 * @param iplName
 */
function removeIpl(iplName) {
    return _in(0xee6c5ad3, 0xece0a82d, _ts(iplName));
}
exports.removeIpl = removeIpl;
function removeModelFromCreatorBudget(modelHash) {
    return _in(0xf086ad93, 0x54fac3a3, _ch(modelHash));
}
exports.removeModelFromCreatorBudget = removeModelFromCreatorBudget;
/**
 * This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
 * p5 should be false, true does nothing
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
function removeModelHide(x, y, z, radius, modelHash, p5) {
    return _in(0xd9e3006f, 0xb3cbd765, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5);
}
exports.removeModelHide = removeModelHide;
function removeModelSwap(x, y, z, radius, originalModel, newModel, p6) {
    return _in(0x033c0f9a, 0x64e229ae, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6);
}
exports.removeModelSwap = removeModelSwap;
function removeMpGamerTag(gamerTagId) {
    return _in(0x31698aa8, 0x0e0223f8, gamerTagId);
}
exports.removeMpGamerTag = removeMpGamerTag;
function removeMultiplayerBankCash() {
    return _in(0xc7c6789a, 0xa1cfedd0);
}
exports.removeMultiplayerBankCash = removeMultiplayerBankCash;
/**
 * Removes multiplayer cash hud each frame
 */
function removeMultiplayerHudCash() {
    return _in(0x968f270e, 0x39141eca);
}
exports.removeMultiplayerHudCash = removeMultiplayerHudCash;
function removeMultiplayerWalletCash() {
    return _in(0x95cf81bd, 0x06ee1887);
}
exports.removeMultiplayerWalletCash = removeMultiplayerWalletCash;
function removeNamedPtfxAsset(fxName) {
    return _in(0x5f61ebbe, 0x1a00f96d, _ts(fxName));
}
exports.removeNamedPtfxAsset = removeNamedPtfxAsset;
function removeNavmeshBlockingObject(p0) {
    return _in(0x46399a78, 0x95957c0e, p0);
}
exports.removeNavmeshBlockingObject = removeNavmeshBlockingObject;
function removeNavmeshRequiredRegions() {
    return _in(0x916f0a3c, 0xdec3445e);
}
exports.removeNavmeshRequiredRegions = removeNavmeshRequiredRegions;
function removeObjectHighDetailModel(object) {
    return _in(0x4a39db43, 0xe47cf3aa, object);
}
exports.removeObjectHighDetailModel = removeObjectHighDetailModel;
function removeParticleFx(ptfxHandle, p1) {
    return _in(0xc401503d, 0xfe8d53cf, ptfxHandle, p1);
}
exports.removeParticleFx = removeParticleFx;
function removeParticleFxFromEntity(entity) {
    return _in(0xb8feaeeb, 0xcc127425, entity);
}
exports.removeParticleFxFromEntity = removeParticleFxFromEntity;
function removeParticleFxInRange(X, Y, Z, radius) {
    return _in(0xdd19fa1c, 0x6d657305, _fv(X), _fv(Y), _fv(Z), _fv(radius));
}
exports.removeParticleFxInRange = removeParticleFxInRange;
/**
 * Ped will no longer get angry when you stay near him.
 * @param ped
 * @param toggle
 */
function removePedDefensiveArea(ped, toggle) {
    return _in(0x74d4e028, 0x107450a9, ped, toggle);
}
exports.removePedDefensiveArea = removePedDefensiveArea;
/**
 * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
 * @param ped
 */
function removePedElegantly(ped) {
    return _in(0xac6d445b, 0x994df95e, _ii(ped));
}
exports.removePedElegantly = removePedElegantly;
function removePedFromGroup(ped) {
    return _in(0xed74007f, 0xfb146bc2, ped);
}
exports.removePedFromGroup = removePedFromGroup;
function removePedHelmet(ped, instantly) {
    return _in(0xa7b2458d, 0x0ad6ded8, ped, instantly);
}
exports.removePedHelmet = removePedHelmet;
function removePedPreferredCoverSet(ped) {
    return _in(0xfddb234c, 0xf74073d9, ped);
}
exports.removePedPreferredCoverSet = removePedPreferredCoverSet;
/**
 * Retracts the hook on the cargobob.
 *
 * Note: after you retract it the natives for dropping the hook no longer work
 * @param cargobob
 */
function removePickUpRopeForCargobob(cargobob) {
    return _in(0x9768cf64, 0x8f54c804, cargobob);
}
exports.removePickUpRopeForCargobob = removePickUpRopeForCargobob;
function removePickup(pickup) {
    return _in(0x3288d8ac, 0xaecd2ab2, pickup);
}
exports.removePickup = removePickup;
function removePlayerHelmet(player, p2) {
    return _in(0xf3ac26d3, 0xcc576528, player, p2);
}
exports.removePlayerHelmet = removePlayerHelmet;
function removePlayerTargetableEntity(player, entity) {
    return _in(0x9f260bfb, 0x59adbca3, player, entity);
}
exports.removePlayerTargetableEntity = removePlayerTargetableEntity;
function removePopMultiplierArea(id, p1) {
    return _in(0xb129e447, 0xa2eda4bf, id, p1);
}
exports.removePopMultiplierArea = removePopMultiplierArea;
/**
 * Removes population multiplier sphere
 * @param id
 * @param p1
 */
function removePopMultiplierSphere(id, p1) {
    return _in(0xe6869bec, 0xdd8f2403, id, p1);
}
exports.removePopMultiplierSphere = removePopMultiplierSphere;
/**
 * Found in the b617d scripts, duplicates removed:
 *
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
 * @param p0
 */
function removePortalSettingsOverride(p0) {
    return _in(0xb4bbfd9c, 0xd8b3922b, _ts(p0));
}
exports.removePortalSettingsOverride = removePortalSettingsOverride;
function removePtfxAsset() {
    return _in(0x88c68140, 0x73dd4a73);
}
exports.removePtfxAsset = removePtfxAsset;
function removeRelationshipGroup(groupHash) {
    return _in(0xb6ba2444, 0xab393da2, _ch(groupHash));
}
exports.removeRelationshipGroup = removeRelationshipGroup;
function removeRoadNodeSpeedZone(speedzone) {
    return _in(0x1033371f, 0xc8e842a7, speedzone, _r);
}
exports.removeRoadNodeSpeedZone = removeRoadNodeSpeedZone;
function removeScaleformScriptHudMovie(hudComponent) {
    return _in(0xf44a5456, 0xac3f4f97, hudComponent);
}
exports.removeScaleformScriptHudMovie = removeScaleformScriptHudMovie;
function removeScenarioBlockingArea(p0, p1) {
    return _in(0x31d16b74, 0xc6e29d66, p0, p1);
}
exports.removeScenarioBlockingArea = removeScenarioBlockingArea;
function removeScenarioBlockingAreas() {
    return _in(0xd37401d7, 0x8a929a49);
}
exports.removeScenarioBlockingAreas = removeScenarioBlockingAreas;
function removeScriptFire(fireHandle) {
    return _in(0x7ff54838, 0x5680673f, fireHandle);
}
exports.removeScriptFire = removeScriptFire;
/**
 * Resets values set by SET_SCRIPT_FIRE_POSITION
 */
function removeScriptFirePosition() {
    return _in(0x7148e0f4, 0x3d11f0d9);
}
exports.removeScriptFirePosition = removeScriptFirePosition;
function removeShockingEvent(event) {
    return _in(0x2cda538c, 0x44c6cce5, event, _r);
}
exports.removeShockingEvent = removeShockingEvent;
function removeShockingEventSpawnBlockingAreas() {
    return _in(0x340f1415, 0xb68aeade);
}
exports.removeShockingEventSpawnBlockingAreas = removeShockingEventSpawnBlockingAreas;
function removeSpecificCoverBlockingAreas(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer) {
    return _in(0x1f351cf1, 0xc6475734, _fv(startX), _fv(startY), _fv(startZ), _fv(endX), _fv(endY), _fv(endZ), blockObjects, blockVehicles, blockMap, blockPlayer);
}
exports.removeSpecificCoverBlockingAreas = removeSpecificCoverBlockingAreas;
function removeStealthModeAsset(asset) {
    return _in(0x9219857d, 0x21f0e842, _ts(asset));
}
exports.removeStealthModeAsset = removeStealthModeAsset;
function removeVehicleAsset(vehicleAsset) {
    return _in(0xace699c7, 0x1ab9deb5, vehicleAsset);
}
exports.removeVehicleAsset = removeVehicleAsset;
function removeVehicleCombatAvoidanceArea(p0) {
    return _in(0xe30524e1, 0x871f481d, p0);
}
exports.removeVehicleCombatAvoidanceArea = removeVehicleCombatAvoidanceArea;
function removeVehicleCrewEmblem(vehicle, p1) {
    return _in(0xd2300034, 0x310557e4, vehicle, p1);
}
exports.removeVehicleCrewEmblem = removeVehicleCrewEmblem;
function removeVehicleHighDetailModel(vehicle) {
    return _in(0x00689cde, 0x5f7c6787, vehicle);
}
exports.removeVehicleHighDetailModel = removeVehicleHighDetailModel;
function removeVehicleMod(vehicle, modType) {
    return _in(0x92d619e4, 0x20858204, vehicle, modType);
}
exports.removeVehicleMod = removeVehicleMod;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
function removeVehicleRecording(recording, script) {
    return _in(0xf1160acc, 0xf98a3fc8, recording, _ts(script));
}
exports.removeVehicleRecording = removeVehicleRecording;
function removeVehicleStuckCheck(vehicle) {
    return _in(0x8386bfb6, 0x14d06749, vehicle);
}
exports.removeVehicleStuckCheck = removeVehicleStuckCheck;
function removeVehicleUpsidedownCheck(vehicle) {
    return _in(0xc53eb42a, 0x499a7e90, vehicle);
}
exports.removeVehicleUpsidedownCheck = removeVehicleUpsidedownCheck;
/**
 * windowIndex:
 * 0 = Front Right Window
 * 1 = Front Left Window
 * 2 = Back Right Window
 * 3 = Back Left Window
 * 4 = Unknown
 * 5 = Unknown
 * 6 = Windscreen
 * 7 = Rear Windscreen
 * @param vehicle
 * @param windowIndex
 */
function removeVehicleWindow(vehicle, windowIndex) {
    return _in(0xa711568e, 0xedb43069, vehicle, windowIndex);
}
exports.removeVehicleWindow = removeVehicleWindow;
function removeVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, p6) {
    return _in(0x46a1e1a2, 0x99ec4bba, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6);
}
exports.removeVehiclesFromGeneratorsInArea = removeVehiclesFromGeneratorsInArea;
function removeWarningMessageOptionItems() {
    return _in(0x6ef54ab7, 0x21dc6242);
}
exports.removeWarningMessageOptionItems = removeWarningMessageOptionItems;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 */
function removeWaypointRecording(name) {
    return _in(0xff1b8b4a, 0xa1c25dc8, _ts(name));
}
exports.removeWaypointRecording = removeWaypointRecording;
function removeWeaponAsset(weaponHash) {
    return _in(0xaa08ef13, 0xf341c8fc, _ch(weaponHash));
}
exports.removeWeaponAsset = removeWeaponAsset;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
function removeWeaponComponentFromPed(ped, weaponHash, componentHash) {
    return _in(0x1e8be90c, 0x74fb4c09, ped, _ch(weaponHash), _ch(componentHash));
}
exports.removeWeaponComponentFromPed = removeWeaponComponentFromPed;
/**
 * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
 * @param object
 * @param componentHash
 */
function removeWeaponComponentFromWeaponObject(object, componentHash) {
    return _in(0xf7d82b0d, 0x66777611, object, _ch(componentHash));
}
exports.removeWeaponComponentFromWeaponObject = removeWeaponComponentFromWeaponObject;
/**
 * This native removes a specified weapon from your selected ped.
 *
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
 *
 * C++:
 * WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
 *
 * The code above removes the knife from the player.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
function removeWeaponFromPed(ped, weaponHash) {
    return _in(0x4899cb08, 0x8edf59b8, ped, _ch(weaponHash));
}
exports.removeWeaponFromPed = removeWeaponFromPed;
/**
 * draws circular marker at pos
 * -1 = none
 * 0 = red
 * 1 = green
 * 2 = blue
 * 3 = green larger
 * 4 = nothing
 * 5 = green small
 * @param x
 * @param y
 * @param z
 * @param colorIndex
 */
function renderFakePickupGlow(x, y, z, colorIndex) {
    return _in(0x3430676b, 0x11cdf21d, _fv(x), _fv(y), _fv(z), colorIndex);
}
exports.renderFakePickupGlow = renderFakePickupGlow;
/**
 * ease - smooth transition between the camera's positions
 * easeTime - Time in milliseconds for the transition to happen
 *
 * If you have created a script (rendering) camera, and want to go back to the
 * character (gameplay) camera, call this native with render set to 0.
 * Setting ease to 1 will smooth the transition.
 * @param render
 * @param ease
 * @param easeTime
 * @param p3
 * @param p4
 * @param p5
 */
function renderScriptCams(render, ease, easeTime, p3, p4, p5) {
    return _in(0x07e5b515, 0xdb0636fc, render, ease, easeTime, p3, p4, p5);
}
exports.renderScriptCams = renderScriptCams;
function renderShadowedLightsWithNoShadows(p0) {
    return _in(0x03300b57, 0xfcac6ddb, p0);
}
exports.renderShadowedLightsWithNoShadows = renderShadowedLightsWithNoShadows;
/**
 * makes hudColorIndex2 color into hudColorIndex color
 * @param hudColorIndex
 * @param hudColorIndex2
 */
function replaceHudColour(hudColorIndex, hudColorIndex2) {
    return _in(0x1ccc708f, 0x0f850613, hudColorIndex, hudColorIndex2);
}
exports.replaceHudColour = replaceHudColour;
function replaceHudColourWithRgba(hudColorIndex, r, g, b, a) {
    return _in(0xf314cf4f, 0x0211894e, hudColorIndex, r, g, b, a);
}
exports.replaceHudColourWithRgba = replaceHudColourWithRgba;
function replayCancelEvent() {
    return _in(0x13b350b8, 0xad0eee10);
}
exports.replayCancelEvent = replayCancelEvent;
/**
 * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
 *
 * first one seems to be a string of a mission name, second one seems to be a bool/toggle
 *
 * p1 was always 0.
 *
 * @param missionNameLabel
 * @param p1
 */
function replayCheckForEventThisFrame(missionNameLabel, p1) {
    return _in(0x20878409, 0x9002bc30, _ts(missionNameLabel), p1);
}
exports.replayCheckForEventThisFrame = replayCheckForEventThisFrame;
/**
 * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
 */
function replayControlShutdown() {
    return _in(0x3353d13f, 0x09307691);
}
exports.replayControlShutdown = replayControlShutdown;
/**
 * This will disable the ability to make camera changes in R* Editor.
 */
function replayDisableCameraMovementThisFrame() {
    return _in(0xaf66dcee, 0x6609b148);
}
exports.replayDisableCameraMovementThisFrame = replayDisableCameraMovementThisFrame;
function replayGetMaxDistanceAllowedFromPlayer() {
    return _in(0x8bfceb5e, 0xa1b161b6, _r, _rf);
}
exports.replayGetMaxDistanceAllowedFromPlayer = replayGetMaxDistanceAllowedFromPlayer;
/**
 * This disable the recording feature and has to be called every frame.
 */
function replayPreventRecordingThisFrame() {
    return _in(0xeb2d525b, 0x57f42b40);
}
exports.replayPreventRecordingThisFrame = replayPreventRecordingThisFrame;
function replayRecordBackForTime(p0, p1, p2) {
    return _in(0x293220da, 0x1b46cebc, _fv(p0), _fv(p1), p2);
}
exports.replayRecordBackForTime = replayRecordBackForTime;
function replayResetEventInfo() {
    return _in(0xf854439e, 0xfbb3b583);
}
exports.replayResetEventInfo = replayResetEventInfo;
function replayStartEvent(p0) {
    return _in(0x48621c9f, 0xca3ebd28, p0);
}
exports.replayStartEvent = replayStartEvent;
function replayStopEvent() {
    return _in(0x81cbae94, 0x390f9f89);
}
exports.replayStopEvent = replayStopEvent;
/**
 * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
 */
function replaySystemHasRequestedAScriptCleanup() {
    return _in(0x95ab8b5c, 0x992c7b58, _r);
}
exports.replaySystemHasRequestedAScriptCleanup = replaySystemHasRequestedAScriptCleanup;
/**
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
 *
 * From am_armybase.ysc.c4:
 *
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
 *
 * -----
 *
 * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7
 *
 * -----
 * crimeType:
 * 1: Firearms possession
 * 2: Person running a red light ("5-0-5")
 * 3: Reckless driver
 * 4: Speeding vehicle (a "5-10")
 * 5: Traffic violation (a "5-0-5")
 * 6: Motorcycle rider without a helmet
 * 7: Vehicle theft (a "5-0-3")
 * 8: Grand Theft Auto
 * 9: ???
 * 10: ???
 * 11: Assault on a civilian (a "2-40")
 * 12: Assault on an officer
 * 13: Assault with a deadly weapon (a "2-45")
 * 14: Officer shot (a "2-45")
 * 15: Pedestrian struck by a vehicle
 * 16: Officer struck by a vehicle
 * 17: Helicopter down (an "AC"?)
 * 18: Civilian on fire (a "2-40")
 * 19: Officer set on fire (a "10-99")
 * 20: Car on fire
 * 21: Air unit down (an "AC"?)
 * 22: An explosion (a "9-96")
 * 23: A stabbing (a "2-45") (also something else I couldn't understand)
 * 24: Officer stabbed (also something else I couldn't understand)
 * 25: Attack on a vehicle ("MDV"?)
 * 26: Damage to property
 * 27: Suspect threatening officer with a firearm
 * 28: Shots fired
 * 29: ???
 * 30: ???
 * 31: ???
 * 32: ???
 * 33: ???
 * 34: A "2-45"
 * 35: ???
 * 36: A "9-25"
 * 37: ???
 * 38: ???
 * 39: ???
 * 40: ???
 * 41: ???
 * 42: ???
 * 43: Possible disturbance
 * 44: Civilian in need of assistance
 * 45: ???
 * 46: ???
 * @param player
 * @param crimeType
 * @param wantedLvlThresh
 */
function reportCrime(player, crimeType, wantedLvlThresh) {
    return _in(0xe9b09589, 0x827545e7, player, crimeType, wantedLvlThresh);
}
exports.reportCrime = reportCrime;
function reportPoliceSpottedPlayer(player) {
    return _in(0xdc64d2c5, 0x3493ed12, player);
}
exports.reportPoliceSpottedPlayer = reportPoliceSpottedPlayer;
function requestActionModeAsset(asset) {
    return _in(0x290e2780, 0xbb7aa598, _ts(asset));
}
exports.requestActionModeAsset = requestActionModeAsset;
/**
 * Alias of REQUEST_COLLISION_AT_COORD.
 * @param x
 * @param y
 * @param z
 */
function requestAdditionalCollisionAtCoord(x, y, z) {
    return _in(0xc9156dc1, 0x1411a9ea, _fv(x), _fv(y), _fv(z));
}
exports.requestAdditionalCollisionAtCoord = requestAdditionalCollisionAtCoord;
/**
 * Request a gxt into the passed slot.
 * @param gxt
 * @param slot
 */
function requestAdditionalText(gxt, slot) {
    return _in(0x71a78003, 0xc8e71424, _ts(gxt), slot);
}
exports.requestAdditionalText = requestAdditionalText;
function requestAdditionalTextForDlc(gxt, slot) {
    return _in(0x6009f9f1, 0xae90d8a6, _ts(gxt), slot);
}
exports.requestAdditionalTextForDlc = requestAdditionalTextForDlc;
/**
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
 * Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
function requestAmbientAudioBank(audioBank, p1, p2) {
    return _in(0xfe02ffbe, 0xd8ca9d99, _ts(audioBank), p1, p2, _r);
}
exports.requestAmbientAudioBank = requestAmbientAudioBank;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
function requestAnimDict(animDict) {
    return _in(0xd3bd4095, 0x1412fef6, _ts(animDict));
}
exports.requestAnimDict = requestAnimDict;
/**
 * Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
function requestAnimSet(animSet) {
    return _in(0x6ea47dae, 0x7fad0eed, _ts(animSet));
}
exports.requestAnimSet = requestAnimSet;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
function requestClipSet(clipSet) {
    return _in(0xd2a71e1a, 0x77418a49, _ts(clipSet));
}
exports.requestClipSet = requestClipSet;
function requestCollisionAtCoord(x, y, z) {
    return _in(0x07503f79, 0x48f491a7, _fv(x), _fv(y), _fv(z));
}
exports.requestCollisionAtCoord = requestCollisionAtCoord;
function requestCollisionForModel(model) {
    return _in(0x923cb32a, 0x3b874fcb, _ch(model));
}
exports.requestCollisionForModel = requestCollisionForModel;
function requestCommerceItemImage(index) {
    return _in(0xa2f95210, 0x4fc6dd4b, index, _r);
}
exports.requestCommerceItemImage = requestCommerceItemImage;
/**
 * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
function requestCutFile(cutsceneName) {
    return _in(0x06a35241, 0x61c502ba, _ts(cutsceneName));
}
exports.requestCutFile = requestCutFile;
/**
 * flags: Usually 8
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 * @param flags
 */
function requestCutscene(cutsceneName, flags) {
    return _in(0x7a86743f, 0x475d9e09, _ts(cutsceneName), flags);
}
exports.requestCutscene = requestCutscene;
/**
 * flags: Usually 8
 *
 * playbackFlags: Which scenes should be played.
 * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 * @param playbackFlags
 * @param flags
 */
function requestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags) {
    return _in(0xc23de0e9, 0x1c30b58c, _ts(cutsceneName), playbackFlags, flags);
}
exports.requestCutsceneWithPlaybackList = requestCutsceneWithPlaybackList;
function requestEarlyLightCheck() {
    return _in(0x98edf76a, 0x7271e4f2);
}
exports.requestEarlyLightCheck = requestEarlyLightCheck;
/**
 * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
 *
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param iplName
 */
function requestIpl(iplName) {
    return _in(0x41b48938, 0x43bbdb74, _ts(iplName));
}
exports.requestIpl = requestIpl;
function requestMenuPedModel(model) {
    return _in(0xa0261aef, 0x7acfc51e, _ch(model));
}
exports.requestMenuPedModel = requestMenuPedModel;
/**
 * All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
 * Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
function requestMissionAudioBank(audioBank, p1, p2) {
    return _in(0x7345bdd9, 0x5e62e0f2, _ts(audioBank), p1, p2, _r);
}
exports.requestMissionAudioBank = requestMissionAudioBank;
/**
 * Request a model to be loaded into memory.
 *
 * @param model
 */
function requestModel(model) {
    return _in(0x963d27a5, 0x8df860ac, _ch(model));
}
exports.requestModel = requestModel;
/**
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * @param interior
 * @param roomName
 */
function requestModelsInRoom(interior, roomName) {
    return _in(0x8a7a4010, 0x0edfec58, interior, _ts(roomName));
}
exports.requestModelsInRoom = requestModelsInRoom;
/**
 * From the b678d decompiled scripts:
 *
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
 * @param fxName
 */
function requestNamedPtfxAsset(fxName) {
    return _in(0xb80d8756, 0xb4668ab6, _ts(fxName));
}
exports.requestNamedPtfxAsset = requestNamedPtfxAsset;
/**
 * Used internally for long range tasks
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
function requestPathNodesInAreaThisFrame(x1, y1, x2, y2) {
    return _in(0x07fb139b, 0x592fa687, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r);
}
exports.requestPathNodesInAreaThisFrame = requestPathNodesInAreaThisFrame;
function requestPedRestrictedVehicleVisibilityTracking(ped, p1) {
    return _in(0xcd018c59, 0x1f94cb43, ped, p1);
}
exports.requestPedRestrictedVehicleVisibilityTracking = requestPedRestrictedVehicleVisibilityTracking;
function requestPedUseSmallBboxVisibilityTracking(ped, p1) {
    return _in(0x75ba1cb3, 0xb7d40caf, ped, p1);
}
exports.requestPedUseSmallBboxVisibilityTracking = requestPedUseSmallBboxVisibilityTracking;
function requestPedVehicleVisibilityTracking(ped, p1) {
    return _in(0x2bc338a7, 0xb21f4608, ped, p1);
}
exports.requestPedVehicleVisibilityTracking = requestPedVehicleVisibilityTracking;
function requestPedVisibilityTracking(ped) {
    return _in(0x7d7a2e43, 0xe74e2eb8, ped);
}
exports.requestPedVisibilityTracking = requestPedVisibilityTracking;
function requestPedheadshotImgUpload(id) {
    return _in(0xf0daef2f, 0x545bee25, id, _r);
}
exports.requestPedheadshotImgUpload = requestPedheadshotImgUpload;
/**
 * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
 */
function requestPtfxAsset() {
    return _in(0x944955fb, 0x2a3935c8);
}
exports.requestPtfxAsset = requestPtfxAsset;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
function requestRagdollBoundsUpdate(p0, p1) {
    return _in(0x1216e0bf, 0xa72cc703, p0, p1);
}
exports.requestRagdollBoundsUpdate = requestRagdollBoundsUpdate;
function requestScaleformMovie(scaleformName) {
    return _in(0x11fe353c, 0xf9733e6f, _ts(scaleformName), _r, _ri);
}
exports.requestScaleformMovie = requestScaleformMovie;
function requestScaleformMovieInstance(scaleformName) {
    return _in(0xc514489c, 0xfb8af806, _ts(scaleformName), _r, _ri);
}
exports.requestScaleformMovieInstance = requestScaleformMovieInstance;
/**
 * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
 *
 * These seem to be the only scaleforms ever requested by this native:
 * "breaking_news"
 * "desktop_pc"
 * "ECG_MONITOR"
 * "Hacking_PC"
 * "TEETH_PULLING"
 *
 * Note: Unless this hash is out-of-order, this native is next-gen only.
 *
 * @param scaleformName
 */
function requestScaleformMovieSkipRenderWhilePaused(scaleformName) {
    return _in(0xbd06c611, 0xbb9048c2, _ts(scaleformName), _r, _ri);
}
exports.requestScaleformMovieSkipRenderWhilePaused = requestScaleformMovieSkipRenderWhilePaused;
/**
 * Another REQUEST_SCALEFORM_MOVIE equivalent.
 * @param scaleformName
 */
function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName) {
    return _in(0x65e7e788, 0x42e74cdb, _ts(scaleformName), _r, _ri);
}
exports.requestScaleformMovieWithIgnoreSuperWidescreen = requestScaleformMovieWithIgnoreSuperWidescreen;
function requestScaleformScriptHudMovie(hudComponent) {
    return _in(0x9304881d, 0x6f6537ea, hudComponent);
}
exports.requestScaleformScriptHudMovie = requestScaleformScriptHudMovie;
function requestScript(scriptName) {
    return _in(0x6eb5f71a, 0xa68f2e8e, _ts(scriptName));
}
exports.requestScript = requestScript;
/**
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
 * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
function requestScriptAudioBank(audioBank, p1, p2) {
    return _in(0x2f844a8b, 0x08d76685, _ts(audioBank), p1, p2, _r);
}
exports.requestScriptAudioBank = requestScriptAudioBank;
/**
 * formerly _REQUEST_STREAMED_SCRIPT
 * @param scriptHash
 */
function requestScriptWithNameHash(scriptHash) {
    return _in(0xd62a67d2, 0x6d9653e6, _ch(scriptHash));
}
exports.requestScriptWithNameHash = requestScriptWithNameHash;
function requestStealthModeAsset(asset) {
    return _in(0x2a0a62fc, 0xdee16d4f, _ts(asset));
}
exports.requestStealthModeAsset = requestStealthModeAsset;
/**
 * This function can requests texture dictonaries from following RPFs:
 * scaleform_generic.rpf
 * scaleform_minigames.rpf
 * scaleform_minimap.rpf
 * scaleform_web.rpf
 *
 * last param isnt a toggle
 * @param textureDict
 * @param p1
 */
function requestStreamedTextureDict(textureDict, p1) {
    return _in(0xdfa2ef8e, 0x04127dd5, _ts(textureDict), p1);
}
exports.requestStreamedTextureDict = requestStreamedTextureDict;
function requestTaskMoveNetworkStateTransition(ped, name) {
    return _in(0xd01015c7, 0x316ae176, ped, _ts(name), _r);
}
exports.requestTaskMoveNetworkStateTransition = requestTaskMoveNetworkStateTransition;
function requestTennisBanks(ped) {
    return _in(0x4ada3f19, 0xbe4a6047, ped);
}
exports.requestTennisBanks = requestTennisBanks;
/**
 * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
 *
 * vehicle found that have asset's:
 * cargobob3
 * submersible
 * blazer
 * @param vehicleHash
 * @param vehicleAsset
 */
function requestVehicleAsset(vehicleHash, vehicleAsset) {
    return _in(0x81a15811, 0x460fab3a, _ch(vehicleHash), vehicleAsset);
}
exports.requestVehicleAsset = requestVehicleAsset;
function requestVehicleDial(vehicle) {
    return _in(0xdba3c090, 0xe3d74690, vehicle);
}
exports.requestVehicleDial = requestVehicleDial;
function requestVehicleHighDetailModel(vehicle) {
    return _in(0xa6e9fdcb, 0x2c76785e, vehicle);
}
exports.requestVehicleHighDetailModel = requestVehicleHighDetailModel;
/**
 * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
 * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
 * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
 * @param recording
 * @param script
 */
function requestVehicleRecording(recording, script) {
    return _in(0xaf514cab, 0xe74cbf15, recording, _ts(script));
}
exports.requestVehicleRecording = requestVehicleRecording;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 *
 * Max number of loaded recordings is 32.
 * @param name
 */
function requestWaypointRecording(name) {
    return _in(0x9eefb62e, 0xb27b5792, _ts(name));
}
exports.requestWaypointRecording = requestWaypointRecording;
/**
 * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
 *
 * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
 * @param weaponHash
 * @param p1
 * @param p2
 */
function requestWeaponAsset(weaponHash, p1, p2) {
    return _in(0x5443438f, 0x033e29c3, _ch(weaponHash), p1, p2);
}
exports.requestWeaponAsset = requestWeaponAsset;
function requestWeaponHighDetailModel(weaponObject) {
    return _in(0x48164dbb, 0x970ac3f0, weaponObject);
}
exports.requestWeaponHighDetailModel = requestWeaponHighDetailModel;
function reserveLocalNetworkMissionObjects(amount) {
    return _in(0x797f9c5e, 0x661d920e, amount);
}
exports.reserveLocalNetworkMissionObjects = reserveLocalNetworkMissionObjects;
function reserveLocalNetworkMissionPeds(amount) {
    return _in(0x2c8df5d1, 0x29595281, amount);
}
exports.reserveLocalNetworkMissionPeds = reserveLocalNetworkMissionPeds;
function reserveLocalNetworkMissionVehicles(amount) {
    return _in(0x42613035, 0x157e4208, amount);
}
exports.reserveLocalNetworkMissionVehicles = reserveLocalNetworkMissionVehicles;
function reserveNetworkMissionObjects(amount) {
    return _in(0x4e5c93bd, 0x0c32fbf8, amount);
}
exports.reserveNetworkMissionObjects = reserveNetworkMissionObjects;
function reserveNetworkMissionPeds(amount) {
    return _in(0xb60feba4, 0x5333d36f, amount);
}
exports.reserveNetworkMissionPeds = reserveNetworkMissionPeds;
function reserveNetworkMissionVehicles(amount) {
    return _in(0x76b02e21, 0xed27a469, amount);
}
exports.reserveNetworkMissionVehicles = reserveNetworkMissionVehicles;
/**
 * Sets an value related to timecycles.
 * @param p0
 */
function resetAdaptation(p0) {
    return _in(0xe3e2c1b4, 0xc59dbc77, p0);
}
exports.resetAdaptation = resetAdaptation;
function resetAiMeleeWeaponDamageModifier() {
    return _in(0x46e56a7c, 0xd1d63c3f);
}
exports.resetAiMeleeWeaponDamageModifier = resetAiMeleeWeaponDamageModifier;
function resetAiWeaponDamageModifier() {
    return _in(0xea16670e, 0x7ba4743c);
}
exports.resetAiWeaponDamageModifier = resetAiWeaponDamageModifier;
/**
 * Sets the waves intensity back to original (1.0 in most cases).
 */
function resetDeepOceanScaler() {
    return _in(0x5e5e9928, 0x5ae812db);
}
exports.resetDeepOceanScaler = resetDeepOceanScaler;
function resetDisableBreaking(object) {
    return _in(0xcc6e9636, 0x82533882, object);
}
exports.resetDisableBreaking = resetDisableBreaking;
function resetDispatchIdealSpawnDistance() {
    return _in(0x77a84429, 0xdd9f0a15);
}
exports.resetDispatchIdealSpawnDistance = resetDispatchIdealSpawnDistance;
function resetDispatchSpawnBlockingAreas() {
    return _in(0xac7bfd5c, 0x1d83ea75);
}
exports.resetDispatchSpawnBlockingAreas = resetDispatchSpawnBlockingAreas;
function resetDispatchSpawnLocation() {
    return _in(0x5896f2bd, 0x5683a4e1);
}
exports.resetDispatchSpawnLocation = resetDispatchSpawnLocation;
function resetDispatchTimeBetweenSpawnAttempts(p0) {
    return _in(0xeb2db0ca, 0xd13154b3, p0);
}
exports.resetDispatchTimeBetweenSpawnAttempts = resetDispatchTimeBetweenSpawnAttempts;
function resetEndUserBenchmark() {
    return _in(0x437138b6, 0xa830166a);
}
exports.resetEndUserBenchmark = resetEndUserBenchmark;
function resetEntityAlpha(entity) {
    return _in(0x9b1e824f, 0xfbb7027a, entity);
}
exports.resetEntityAlpha = resetEntityAlpha;
function resetExclusiveScenarioGroup() {
    return _in(0x4202bbcb, 0x8684563d);
}
exports.resetExclusiveScenarioGroup = resetExclusiveScenarioGroup;
function resetFacialIdleAnim(ped) {
    return _in(0x007fde5a, 0x7897e426, ped);
}
exports.resetFacialIdleAnim = resetFacialIdleAnim;
/**
 * Resets the effect of SET_FORMATION_LEADER
 */
function resetFormationLeader() {
    return _in(0xe2f53f17, 0x2b45ede1);
}
exports.resetFormationLeader = resetFormationLeader;
function resetGameplayCamFullAttachParentTransformTimer() {
    return _in(0x7295c203, 0xdd659dfe);
}
exports.resetGameplayCamFullAttachParentTransformTimer = resetGameplayCamFullAttachParentTransformTimer;
/**
 * Resets the entity ghost alpha to the default value (128)
 */
function resetGhostAlpha() {
    return _in(0x17330ebf, 0x2f2124a8);
}
exports.resetGhostAlpha = resetGhostAlpha;
function resetGlobalActionscriptFlag(flagIndex) {
    return _in(0xb99c4e4d, 0x9499df29, flagIndex);
}
exports.resetGlobalActionscriptFlag = resetGlobalActionscriptFlag;
function resetGroupFormationDefaultSpacing(groupHandle) {
    return _in(0x63dab4cc, 0xb3273205, groupHandle);
}
exports.resetGroupFormationDefaultSpacing = resetGroupFormationDefaultSpacing;
function resetHudComponentValues(id) {
    return _in(0x450930e6, 0x16475d0d, id);
}
exports.resetHudComponentValues = resetHudComponentValues;
/**
 * 2 matches in 1 script - am_hold_up
 *
 * Used in multiplayer scripts?
 */
function resetLawResponseDelayOverride() {
    return _in(0x0032a6db, 0xa562c518);
}
exports.resetLawResponseDelayOverride = resetLawResponseDelayOverride;
/**
 * Resets the effect of SET_PARTICLE_FX_OVERRIDE
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param name
 */
function resetParticleFxOverride(name) {
    return _in(0x89c8553d, 0xd3274aae, _ts(name));
}
exports.resetParticleFxOverride = resetParticleFxOverride;
function resetPausedRenderphases() {
    return _in(0xe1c87094, 0x06f2c41c);
}
exports.resetPausedRenderphases = resetPausedRenderphases;
function resetPedAudioFlags(ped) {
    return _in(0xf54bb7b6, 0x1036f335, ped);
}
exports.resetPedAudioFlags = resetPedAudioFlags;
function resetPedInVehicleContext(ped) {
    return _in(0x22ef8ff8, 0x778030eb, ped);
}
exports.resetPedInVehicleContext = resetPedInVehicleContext;
/**
 * Resets the value for the last vehicle driven by the Ped.
 * @param ped
 */
function resetPedLastVehicle(ped) {
    return _in(0xbb8de8cf, 0x6a8dd8bb, ped);
}
exports.resetPedLastVehicle = resetPedLastVehicle;
/**
 * If p1 is 0.0, I believe you are back to normal.
 * If p1 is 1.0, it looks like you can only rotate the ped, not walk.
 *
 * Using the following code to reset back to normal
 * PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
 * @param ped
 * @param p1
 */
function resetPedMovementClipset(ped, p1) {
    return _in(0xaa74ec0c, 0xb0aaea2c, ped, _fv(p1));
}
exports.resetPedMovementClipset = resetPedMovementClipset;
function resetPedRagdollTimer(ped) {
    return _in(0x9fa4664c, 0xf62e47e8, ped);
}
exports.resetPedRagdollTimer = resetPedRagdollTimer;
function resetPedStrafeClipset(ped) {
    return _in(0x20510814, 0x175ea477, ped);
}
exports.resetPedStrafeClipset = resetPedStrafeClipset;
function resetPedVisibleDamage(ped) {
    return _in(0x3ac1f7b8, 0x98f30c05, ped);
}
exports.resetPedVisibleDamage = resetPedVisibleDamage;
function resetPedWeaponMovementClipset(ped) {
    return _in(0x97b0db5b, 0x4aa74e77, ped);
}
exports.resetPedWeaponMovementClipset = resetPedWeaponMovementClipset;
/**
 * Similar to RESET_ENTITY_ALPHA
 * @param entity
 */
function resetPickupEntityGlow(entity) {
    return _in(0x490861b8, 0x8f4fd846, entity);
}
exports.resetPickupEntityGlow = resetPickupEntityGlow;
function resetPlayerArrestState(player) {
    return _in(0x2d03e13c, 0x460760d6, player);
}
exports.resetPlayerArrestState = resetPlayerArrestState;
function resetPlayerInputGait(player) {
    return _in(0x19531c47, 0xa2abd691, player);
}
exports.resetPlayerInputGait = resetPlayerInputGait;
function resetPlayerStamina(player) {
    return _in(0xa6f312fc, 0xce9c1dfe, player);
}
exports.resetPlayerStamina = resetPlayerStamina;
function resetReticuleValues() {
    return _in(0x12782ce0, 0xa636e9f0);
}
exports.resetReticuleValues = resetReticuleValues;
function resetScenarioGroupsEnabled() {
    return _in(0xdd902d03, 0x49afad3a);
}
exports.resetScenarioGroupsEnabled = resetScenarioGroupsEnabled;
function resetScenarioTypesEnabled() {
    return _in(0x0d40ee2a, 0x7f2b2d6d);
}
exports.resetScenarioTypesEnabled = resetScenarioTypesEnabled;
/**
 * This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
 * This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
 */
function resetScriptGfxAlign() {
    return _in(0xe3a3db41, 0x4a373dab);
}
exports.resetScriptGfxAlign = resetScriptGfxAlign;
function resetStoreNetworkGameTracking() {
    return _in(0x444c4525, 0xece0a4b9);
}
exports.resetStoreNetworkGameTracking = resetStoreNetworkGameTracking;
function resetTrevorRage() {
    return _in(0xe78503b1, 0x0c4314e0);
}
exports.resetTrevorRage = resetTrevorRage;
function resetVehicleStartupRevSound(vehicle) {
    return _in(0xd2dccd8e, 0x16e20997, vehicle);
}
exports.resetVehicleStartupRevSound = resetVehicleStartupRevSound;
/**
 * The inner function has a switch on the second parameter. It's the stuck timer index.
 *
 * Here's some pseudo code I wrote for the inner function:
 * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
 * {
 * switch (timerIndex)
 * {
 * case 0:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * case 1:
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * case 2:
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * case 3:
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * case 4:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * break;
 * };
 * }
 * @param vehicle
 * @param nullAttributes
 */
function resetVehicleStuckTimer(vehicle, nullAttributes) {
    return _in(0xd7591b00, 0x65afaa7a, vehicle, nullAttributes);
}
exports.resetVehicleStuckTimer = resetVehicleStuckTimer;
function resetVehicleWheels(vehicle, toggle) {
    return _in(0x21d2e566, 0x2c1f6fed, vehicle, toggle);
}
exports.resetVehicleWheels = resetVehicleWheels;
function resetWantedLevelDifficulty(player) {
    return _in(0xb9d0dd99, 0x0dc141dd, player);
}
exports.resetWantedLevelDifficulty = resetWantedLevelDifficulty;
function resetWantedLevelHiddenEscapeTime(player) {
    return _in(0x823ec8e8, 0x2ba45986, player);
}
exports.resetWantedLevelHiddenEscapeTime = resetWantedLevelHiddenEscapeTime;
function resetWantedResponseNumPedsToSpawn() {
    return _in(0xd9f692d3, 0x49249528);
}
exports.resetWantedResponseNumPedsToSpawn = resetWantedResponseNumPedsToSpawn;
function resetWorldBoundaryForPlayer() {
    return _in(0xda1df03d, 0x5a315f4e);
}
exports.resetWorldBoundaryForPlayer = resetWorldBoundaryForPlayer;
/**
 * Before using this native click the native above and look at the decription.
 *
 * Example:
 * int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
 * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
 * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
 *
 * This native refreshes the frontend menu.
 *
 * p1 = Hash of Menu
 * p2 = Unknown but always works with -1.
 * @param menuHash
 * @param p1
 */
function restartFrontendMenu(menuHash, p1) {
    return _in(0x10706dc6, 0xad2d49c0, _ch(menuHash), p1);
}
exports.restartFrontendMenu = restartFrontendMenu;
/**
 * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
 */
function restartGame() {
    return _in(0xe574a662, 0xacaefbb1);
}
exports.restartGame = restartGame;
function restartScriptedConversation() {
    return _in(0x9aeb285d, 0x1818c9ac);
}
exports.restartScriptedConversation = restartScriptedConversation;
function restorePlayerStamina(player, p1) {
    return _in(0xa352c1b8, 0x64cafd33, player, _fv(p1));
}
exports.restorePlayerStamina = restorePlayerStamina;
/**
 * This function will simply bring the dead person back to life.
 *
 * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
 *
 * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
 *
 * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
 * @param ped
 */
function resurrectPed(ped) {
    return _in(0x71bc8e83, 0x8b9c6035, ped);
}
exports.resurrectPed = resurrectPed;
function retainEntityInInterior(entity, interior) {
    return _in(0x82ebb79e, 0x258fa2b7, entity, interior);
}
exports.retainEntityInInterior = retainEntityInInterior;
/**
 * From fm_deathmatch_creator and fm_race_creator:
 *
 * FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
 * FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
 * @param hash
 */
function revertContentChangesetGroupForAll(hash) {
    return _in(0x3c197828, 0x5b036b25, _ch(hash));
}
exports.revertContentChangesetGroupForAll = revertContentChangesetGroupForAll;
/**
 * It will revive/cure the injured ped. The condition is ped must not be dead.
 *
 * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
 *
 * This function is well suited there.
 * @param ped
 */
function reviveInjuredPed(ped) {
    return _in(0x8d8acd83, 0x88cd99ce, ped);
}
exports.reviveInjuredPed = reviveInjuredPed;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
function rollDownWindow(vehicle, windowIndex) {
    return _in(0x7ad9e6ce, 0x657d69e3, vehicle, windowIndex);
}
exports.rollDownWindow = rollDownWindow;
/**
 * Roll down all the windows of the vehicle passed through the first parameter.
 * @param vehicle
 */
function rollDownWindows(vehicle) {
    return _in(0x85796b05, 0x49dde156, vehicle);
}
exports.rollDownWindows = rollDownWindows;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
function rollUpWindow(vehicle, windowIndex) {
    return _in(0x602e548f, 0x46e24d59, vehicle, windowIndex);
}
exports.rollUpWindow = rollUpWindow;
function ropeAreTexturesLoaded() {
    return _in(0xf2d0e6a7, 0x5cc05597, _r);
}
exports.ropeAreTexturesLoaded = ropeAreTexturesLoaded;
function ropeAttachVirtualBoundGeom(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    return _in(0xbc0ce682, 0xd4d05650, ropeId, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13));
}
exports.ropeAttachVirtualBoundGeom = ropeAttachVirtualBoundGeom;
function ropeChangeScriptOwner(p0, p1, p2) {
    return _in(0xb1b6216c, 0xa2e7b55e, p0, p1, p2);
}
exports.ropeChangeScriptOwner = ropeChangeScriptOwner;
function ropeConvertToSimple(ropeId) {
    return _in(0x5389d48e, 0xfa2f079a, ropeId);
}
exports.ropeConvertToSimple = ropeConvertToSimple;
function ropeDrawEnabled(p1) {
    return _in(0xa1ae7365, 0x41b0fca3, _i, p1);
}
exports.ropeDrawEnabled = ropeDrawEnabled;
function ropeDrawShadowEnabled(toggle) {
    return _in(0xf159a638, 0x06bb5ba8, _i, toggle);
}
exports.ropeDrawShadowEnabled = ropeDrawShadowEnabled;
/**
 * Forces a rope to a certain length.
 * @param ropeId
 * @param length
 */
function ropeForceLength(ropeId, length) {
    return _in(0xd009f759, 0xa723db1b, ropeId, _fv(length));
}
exports.ropeForceLength = ropeForceLength;
function ropeGetDistanceBetweenEnds(ropeId) {
    return _in(0x73040398, 0xdff9a4a6, ropeId, _r, _rf);
}
exports.ropeGetDistanceBetweenEnds = ropeGetDistanceBetweenEnds;
/**
 * Loads rope textures for all ropes in the current scene.
 */
function ropeLoadTextures() {
    return _in(0x9b9039db, 0xf2d258c1);
}
exports.ropeLoadTextures = ropeLoadTextures;
/**
 * Reset a rope to a certain length.
 * @param ropeId
 * @param length
 */
function ropeResetLength(ropeId, length) {
    return _in(0xc16de94d, 0x9bea14a0, ropeId, _fv(length));
}
exports.ropeResetLength = ropeResetLength;
function ropeSetRefframevelocityColliderorder(ropeId, p1) {
    return _in(0xb743f735, 0xc03d7810, ropeId, p1);
}
exports.ropeSetRefframevelocityColliderorder = ropeSetRefframevelocityColliderorder;
function ropeSetSmoothReelin(ropeId, p1) {
    return _in(0x36ccb9be, 0x67b970fd, ropeId, p1);
}
exports.ropeSetSmoothReelin = ropeSetSmoothReelin;
function ropeSetUpdateOrder(ropeId, p1) {
    return _in(0xdc57a637, 0xa20006ed, ropeId, p1);
}
exports.ropeSetUpdateOrder = ropeSetUpdateOrder;
function ropeSetUpdatePinverts(ropeId) {
    return _in(0xc8d667ee, 0x52114aba, ropeId);
}
exports.ropeSetUpdatePinverts = ropeSetUpdatePinverts;
/**
 * Unloads rope textures for all ropes in the current scene.
 */
function ropeUnloadTextures() {
    return _in(0x6ce36c35, 0xc1ac8163);
}
exports.ropeUnloadTextures = ropeUnloadTextures;
function rotateObject(object, p1, p2, p3) {
    return _in(0xafe24e4d, 0x29249e4a, object, _fv(p1), _fv(p2), p3, _r);
}
exports.rotateObject = rotateObject;
function round(value) {
    return _in(0xf2db717a, 0x73826179, _fv(value), _r, _ri);
}
exports.round = round;
/**
 * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
 */
function saveEndUserBenchmark() {
    return _in(0x37deb0aa, 0x183fb6d8);
}
exports.saveEndUserBenchmark = saveEndUserBenchmark;
/**
 * 1 match in 1 script. cellphone_controller.
 * p0 is -1 in scripts.
 * @param unused
 */
function saveHighQualityPhoto(unused) {
    return _in(0x3dec726c, 0x25a11bac, unused, _r);
}
exports.saveHighQualityPhoto = saveHighQualityPhoto;
function saveReplayRecording() {
    return _in(0x644546ec, 0x5287471b, _r);
}
exports.saveReplayRecording = saveReplayRecording;
function savemigrationIsMpEnabled() {
    return _in(0x84b418e9, 0x3894ac1c, _r);
}
exports.savemigrationIsMpEnabled = savemigrationIsMpEnabled;
function savemigrationMpGetAccount(p0, p1) {
    const [retval, p1_out] = _in(0xfce2747e, 0xef1d05fc, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.savemigrationMpGetAccount = savemigrationMpGetAccount;
function savemigrationMpGetAccountsStatus() {
    return _in(0xc8cb5999, 0x919ea2ca, _r, _ri);
}
exports.savemigrationMpGetAccountsStatus = savemigrationMpGetAccountsStatus;
function savemigrationMpGetStatus() {
    return _in(0x690b76bd, 0x2763e068, _r, _ri);
}
exports.savemigrationMpGetStatus = savemigrationMpGetStatus;
function savemigrationMpNumAccounts() {
    return _in(0x77a16200, 0xe18e0c55, _r, _ri);
}
exports.savemigrationMpNumAccounts = savemigrationMpNumAccounts;
function savemigrationMpRequestAccounts() {
    return _in(0x85f41f92, 0x25d08c72, _r);
}
exports.savemigrationMpRequestAccounts = savemigrationMpRequestAccounts;
function savemigrationMpRequestStatus() {
    return _in(0xe5e9746a, 0x66359f9d, _r);
}
exports.savemigrationMpRequestStatus = savemigrationMpRequestStatus;
/**
 * Returns the nickname of the logged-in Rockstar Social Club account.
 */
function scAccountInfoGetNickname() {
    return _in(0x198d161f, 0x458ecc7f, _r, _s);
}
exports.scAccountInfoGetNickname = scAccountInfoGetNickname;
function scAchievementInfoStatus(p0) {
    const [retval, p0_out] = _in(0x22579874, 0x3970412b, _ii(p0), _r);
    return [retval, p0_out];
}
exports.scAchievementInfoStatus = scAchievementInfoStatus;
function scCacheNewRockstarMsgs(toggle) {
    return _in(0xbfa0a56a, 0x817c6c7d, toggle);
}
exports.scCacheNewRockstarMsgs = scCacheNewRockstarMsgs;
function scCommunityEventGetDisplayName(p0) {
    return _in(0xc2c97ea9, 0x7711d1ae, _ts(p0), _r);
}
exports.scCommunityEventGetDisplayName = scCommunityEventGetDisplayName;
function scCommunityEventGetDisplayNameById(p0, p1) {
    return _in(0x19853b5b, 0x17d77bca, p0, _ts(p1), _r);
}
exports.scCommunityEventGetDisplayNameById = scCommunityEventGetDisplayNameById;
function scCommunityEventGetDisplayNameForType(p0, p1) {
    return _in(0x33df47cc, 0x0642061b, _ts(p0), _ts(p1), _r);
}
exports.scCommunityEventGetDisplayNameForType = scCommunityEventGetDisplayNameForType;
function scCommunityEventGetEventId() {
    return _in(0x4ed9c8d6, 0xda297639, _r, _ri);
}
exports.scCommunityEventGetEventId = scCommunityEventGetEventId;
function scCommunityEventGetEventIdForType(p0) {
    return _in(0x4a7d6e72, 0x7f941747, _ts(p0), _r, _ri);
}
exports.scCommunityEventGetEventIdForType = scCommunityEventGetEventIdForType;
function scCommunityEventGetExtraDataFloat(p0, p1) {
    const [retval, p1_out] = _in(0x50a8a362, 0x01dbf83e, _ts(p0), _fi(p1), _r);
    return [retval, p1_out];
}
exports.scCommunityEventGetExtraDataFloat = scCommunityEventGetExtraDataFloat;
function scCommunityEventGetExtraDataFloatById(p0, p1, p2) {
    const [retval, p2_out] = _in(0xc5a35c73, 0xb68f3c49, p0, _ts(p1), _fi(p2), _r);
    return [retval, p2_out];
}
exports.scCommunityEventGetExtraDataFloatById = scCommunityEventGetExtraDataFloatById;
function scCommunityEventGetExtraDataFloatForType(p0, p2) {
    const [retval, p1_out] = _in(0x2570e26b, 0xe63964e3, _ts(p0), _f, _ts(p2), _r);
    return [retval, p1_out];
}
exports.scCommunityEventGetExtraDataFloatForType = scCommunityEventGetExtraDataFloatForType;
function scCommunityEventGetExtraDataInt(p0, p1) {
    const [retval, p1_out] = _in(0x710bcda8, 0x071eded1, _ts(p0), _ii(p1), _r);
    return [retval, p1_out];
}
exports.scCommunityEventGetExtraDataInt = scCommunityEventGetExtraDataInt;
function scCommunityEventGetExtraDataIntById(p0, p1, p2) {
    const [retval, p2_out] = _in(0x8cc469ab, 0x4d349b7c, p0, _ts(p1), _ii(p2), _r);
    return [retval, p2_out];
}
exports.scCommunityEventGetExtraDataIntById = scCommunityEventGetExtraDataIntById;
function scCommunityEventGetExtraDataIntForType(p0, p2) {
    const [retval, p1_out] = _in(0xe75a4a2e, 0x5e316d86, _ts(p0), _i, _ts(p2), _r);
    return [retval, p1_out];
}
exports.scCommunityEventGetExtraDataIntForType = scCommunityEventGetExtraDataIntForType;
function scCommunityEventGetExtraDataString(p0, p1) {
    return _in(0x9de5d2f7, 0x23575ed0, _ts(p0), _ts(p1), _r);
}
exports.scCommunityEventGetExtraDataString = scCommunityEventGetExtraDataString;
function scCommunityEventGetExtraDataStringById(p0, p1, p2) {
    return _in(0x699e4a5c, 0x8c893a18, p0, _ts(p1), _ts(p2), _r);
}
exports.scCommunityEventGetExtraDataStringById = scCommunityEventGetExtraDataStringById;
function scCommunityEventGetExtraDataStringForType(p0, p1, p2) {
    return _in(0x1d12a56f, 0xc95be92e, _ts(p0), _ts(p1), _ts(p2), _r);
}
exports.scCommunityEventGetExtraDataStringForType = scCommunityEventGetExtraDataStringForType;
function scCommunityEventIsActive() {
    return _in(0xff8f3a92, 0xb75ed67a, _r);
}
exports.scCommunityEventIsActive = scCommunityEventIsActive;
function scCommunityEventIsActiveById(p0) {
    return _in(0xa468e0be, 0x12b12c70, p0, _r);
}
exports.scCommunityEventIsActiveById = scCommunityEventIsActiveById;
function scCommunityEventIsActiveForType(p0) {
    return _in(0x450819d8, 0xcf90c416, _ts(p0), _r);
}
exports.scCommunityEventIsActiveForType = scCommunityEventIsActiveForType;
function scEmailDeleteEmails(p1) {
    return _in(0x44aca259, 0xd67651db, _i, p1);
}
exports.scEmailDeleteEmails = scEmailDeleteEmails;
function scEmailGetEmailAtIndex(p0, p1) {
    const [retval, p1_out] = _in(0x4737980e, 0x8a283806, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.scEmailGetEmailAtIndex = scEmailGetEmailAtIndex;
function scEmailGetNumRetrievedEmails() {
    return _in(0x7db18ca8, 0xcad5b098, _r, _ri);
}
exports.scEmailGetNumRetrievedEmails = scEmailGetNumRetrievedEmails;
function scEmailGetRetrievalStatus() {
    return _in(0x16da8172, 0x459434aa, _r, _ri);
}
exports.scEmailGetRetrievalStatus = scEmailGetRetrievalStatus;
function scEmailMessageClearRecipList() {
    return _in(0x55df6db4, 0x5179236e);
}
exports.scEmailMessageClearRecipList = scEmailMessageClearRecipList;
function scEmailMessagePushGamerToRecipList(gamerHandle) {
    return _in(0x2330c12a, 0x7a605d16, _ii(gamerHandle));
}
exports.scEmailMessagePushGamerToRecipList = scEmailMessagePushGamerToRecipList;
function scEmailRetrieveEmails(offset, limit) {
    return _in(0x040addcb, 0xafa1018a, offset, limit);
}
exports.scEmailRetrieveEmails = scEmailRetrieveEmails;
function scEmailSendEmail(p0) {
    return _in(0x116fb94d, 0xc4b79f17, _ts(p0));
}
exports.scEmailSendEmail = scEmailSendEmail;
function scEmailSetCurrentEmailTag(p0) {
    return _in(0x07dbd622, 0xd9533857, p0, _r);
}
exports.scEmailSetCurrentEmailTag = scEmailSetCurrentEmailTag;
function scGamerdataGetActiveXpBonus(value) {
    const [retval, value_out] = _in(0x2d874d4a, 0xe612a65f, _fi(value), _r);
    return [retval, value_out];
}
exports.scGamerdataGetActiveXpBonus = scGamerdataGetActiveXpBonus;
function scGamerdataGetBool(name) {
    return _in(0x8416fe4e, 0x4629d7d7, _ts(name), _r);
}
exports.scGamerdataGetBool = scGamerdataGetBool;
function scGamerdataGetFloat(name, value) {
    const [retval, value_out] = _in(0xa770c8ee, 0xc6fb2ac5, _ts(name), _fi(value), _r);
    return [retval, value_out];
}
exports.scGamerdataGetFloat = scGamerdataGetFloat;
function scGamerdataGetInt(name, value) {
    const [retval, value_out] = _in(0xc85a7127, 0xe7ad02aa, _ts(name), _ii(value), _r);
    return [retval, value_out];
}
exports.scGamerdataGetInt = scGamerdataGetInt;
function scGamerdataGetString(name, value) {
    return _in(0x7ffcbfee, 0x44ecfabf, _ts(name), _ts(value), _r);
}
exports.scGamerdataGetString = scGamerdataGetString;
function scGetNewRockstarMsg() {
    return _in(0xdf649c4e, 0x9afdd788, _r, _s);
}
exports.scGetNewRockstarMsg = scGetNewRockstarMsg;
/**
 * Same as HAS_ACHIEVEMENT_BEEN_PASSED
 * @param achievementId
 */
function scHasAchievementBeenPassed(achievementId) {
    return _in(0x418dc16f, 0xae452c1c, achievementId, _r);
}
exports.scHasAchievementBeenPassed = scHasAchievementBeenPassed;
function scHasNewRockstarMsg() {
    return _in(0xbc1cc912, 0x05ec8d6e, _r);
}
exports.scHasNewRockstarMsg = scHasNewRockstarMsg;
function scInboxGetBountyDataAtIndex(index, outData) {
    const [retval, outData_out] = _in(0x87e0052f, 0x08bd64e6, index, _ii(outData), _r);
    return [retval, outData_out];
}
exports.scInboxGetBountyDataAtIndex = scInboxGetBountyDataAtIndex;
function scInboxGetMessageIsReadAtIndex(msgIndex) {
    return _in(0x93028f1d, 0xb42bfd08, msgIndex, _r);
}
exports.scInboxGetMessageIsReadAtIndex = scInboxGetMessageIsReadAtIndex;
function scInboxGetMessageTypeAtIndex(msgIndex) {
    return _in(0xbb8ea16e, 0xcbc976c4, msgIndex, _r, _ri);
}
exports.scInboxGetMessageTypeAtIndex = scInboxGetMessageTypeAtIndex;
function scInboxGetTotalNumMessages() {
    return _in(0x03a93ff1, 0xa2ca0864, _r, _ri);
}
exports.scInboxGetTotalNumMessages = scInboxGetTotalNumMessages;
function scInboxMessageDoApply(p0) {
    return _in(0x9a2c8064, 0xb6c1e41a, p0, _r);
}
exports.scInboxMessageDoApply = scInboxMessageDoApply;
function scInboxMessageGetDataBool(p0, p1) {
    return _in(0xffe5c16f, 0x402d851d, p0, _ts(p1), _r);
}
exports.scInboxMessageGetDataBool = scInboxMessageGetDataBool;
function scInboxMessageGetDataInt(p0, context, out) {
    const [retval, out_out] = _in(0xa00efe40, 0x82c4056e, p0, _ts(context), _ii(out), _r);
    return [retval, out_out];
}
exports.scInboxMessageGetDataInt = scInboxMessageGetDataInt;
function scInboxMessageGetDataString(p0, context, out) {
    return _in(0x7572ef42, 0xfc6a9b6d, p0, _ts(context), _ts(out), _r);
}
exports.scInboxMessageGetDataString = scInboxMessageGetDataString;
function scInboxMessageGetRawTypeAtIndex(p0) {
    return _in(0xf3e31d16, 0xcbdcb304, p0, _r, _s);
}
exports.scInboxMessageGetRawTypeAtIndex = scInboxMessageGetRawTypeAtIndex;
function scInboxMessageGetUgcdata(p0, p1) {
    const [retval, p1_out] = _in(0x69d82604, 0xa1a5a254, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.scInboxMessageGetUgcdata = scInboxMessageGetUgcdata;
function scInboxMessagePushGamerT0RecipList(gamerHandle) {
    return _in(0xda024bdb, 0xd600f44a, _ii(gamerHandle));
}
exports.scInboxMessagePushGamerT0RecipList = scInboxMessagePushGamerT0RecipList;
function scInboxSendBountyToRecipList(data) {
    const [retval, data_out] = _in(0x6afd2cd7, 0x53feef83, _ii(data), _r);
    return [retval, data_out];
}
exports.scInboxSendBountyToRecipList = scInboxSendBountyToRecipList;
function scInboxSendUgcstatupdateToRecipList(data) {
    return _in(0xa68d3d22, 0x9f4f3b06, _ii(data));
}
exports.scInboxSendUgcstatupdateToRecipList = scInboxSendUgcstatupdateToRecipList;
function scInboxSetMessageAsReadAtIndex(msgIndex) {
    return _in(0x2c015348, 0xcf19ca1d, msgIndex, _r);
}
exports.scInboxSetMessageAsReadAtIndex = scInboxSetMessageAsReadAtIndex;
function scLicenseplateAdd(plateText) {
    const [retval, plateData_out, token_out] = _in(0x1989c6e6, 0xf67e76a8, _ts(plateText), _i, _i, _r);
    return [retval, plateData_out, token_out];
}
exports.scLicenseplateAdd = scLicenseplateAdd;
function scLicenseplateCheckString(p0, p1) {
    const [retval, p1_out] = _in(0xf6baaaf7, 0x62e1bf40, _ts(p0), _ii(p1), _r);
    return [retval, p1_out];
}
exports.scLicenseplateCheckString = scLicenseplateCheckString;
function scLicenseplateGetAddIsPending(token) {
    return _in(0x07c61676, 0xe5bb52cd, token, _r);
}
exports.scLicenseplateGetAddIsPending = scLicenseplateGetAddIsPending;
function scLicenseplateGetAddStatus(token) {
    return _in(0x8147fff6, 0xa718e1ad, token, _r, _ri);
}
exports.scLicenseplateGetAddStatus = scLicenseplateGetAddStatus;
function scLicenseplateGetCheckIsPending(p0) {
    return _in(0x9237e334, 0xf6e43156, p0, _r);
}
exports.scLicenseplateGetCheckIsPending = scLicenseplateGetCheckIsPending;
function scLicenseplateGetCheckIsValid(p0) {
    return _in(0xf22ca0fd, 0x74b80e7a, p0, _r);
}
exports.scLicenseplateGetCheckIsValid = scLicenseplateGetCheckIsValid;
function scLicenseplateGetCount(token) {
    return _in(0x700569db, 0xa175a77c, token, _r, _ri);
}
exports.scLicenseplateGetCount = scLicenseplateGetCount;
function scLicenseplateGetIsvalidIsPending(token) {
    return _in(0xd302e99e, 0xdf0449cf, token, _r);
}
exports.scLicenseplateGetIsvalidIsPending = scLicenseplateGetIsvalidIsPending;
function scLicenseplateGetIsvalidStatus(token) {
    return _in(0x5c4ebffa, 0x98bdb41c, token, _r, _ri);
}
exports.scLicenseplateGetIsvalidStatus = scLicenseplateGetIsvalidStatus;
function scLicenseplateGetPlate(token, plateIndex) {
    return _in(0x1d4446a6, 0x2d35b0d0, token, plateIndex, _r, _s);
}
exports.scLicenseplateGetPlate = scLicenseplateGetPlate;
function scLicenseplateGetPlateData(token, plateIndex) {
    return _in(0x2e89990d, 0xdff670c3, token, plateIndex, _r, _s);
}
exports.scLicenseplateGetPlateData = scLicenseplateGetPlateData;
function scLicenseplateIsvalid(plateText, token) {
    const [retval, token_out] = _in(0x0f73393b, 0xac7e6730, _ts(plateText), _ii(token), _r);
    return [retval, token_out];
}
exports.scLicenseplateIsvalid = scLicenseplateIsvalid;
function scLicenseplateSetPlateData(oldPlateText, newPlateText, plateData) {
    const [retval, plateData_out] = _in(0xd0ee05fe, 0x193646ea, _ts(oldPlateText), _ts(newPlateText), _ii(plateData), _r);
    return [retval, plateData_out];
}
exports.scLicenseplateSetPlateData = scLicenseplateSetPlateData;
/**
 * Fills some 0x30 sized struct
 * @param p0
 */
function scPauseNewsGetPendingStory(p0) {
    return _in(0x8a4416c0, 0xdb05fa66, p0, _r);
}
exports.scPauseNewsGetPendingStory = scPauseNewsGetPendingStory;
function scPauseNewsInitStarterPack(p0) {
    return _in(0xe4f6e8d0, 0x7a2f0f51, p0, _r);
}
exports.scPauseNewsInitStarterPack = scPauseNewsInitStarterPack;
function scPauseNewsShutdown() {
    return _in(0xea95c085, 0x3a27888e);
}
exports.scPauseNewsShutdown = scPauseNewsShutdown;
function scPresenceAttrSetFloat(attrHash, value) {
    return _in(0xc4c4575f, 0x62534a24, _ch(attrHash), _fv(value), _r);
}
exports.scPresenceAttrSetFloat = scPresenceAttrSetFloat;
function scPresenceAttrSetInt(attrHash, value) {
    return _in(0x1f1e9682, 0x483697c7, _ch(attrHash), value, _r);
}
exports.scPresenceAttrSetInt = scPresenceAttrSetInt;
function scPresenceAttrSetString(attrHash, value) {
    return _in(0x287f1f75, 0xd2803595, _ch(attrHash), _ts(value), _r);
}
exports.scPresenceAttrSetString = scPresenceAttrSetString;
function scPresenceSetActivityRating(p0, p1) {
    return _in(0x487912fd, 0x248efddf, p0, _fv(p1), _r);
}
exports.scPresenceSetActivityRating = scPresenceSetActivityRating;
/**
 * Starts a task to check an entered string for profanity on the ROS/Social Club services.
 *
 * See also: 1753344C770358AE, 82E4A58BABC15AE7.
 * @param string
 * @param token
 */
function scProfanityCheckString(string, token) {
    const [retval, token_out] = _in(0x75632c5e, 0xcd7ed843, _ts(string), _ii(token), _r);
    return [retval, token_out];
}
exports.scProfanityCheckString = scProfanityCheckString;
function scProfanityCheckStringUgc(string, token) {
    const [retval, token_out] = _in(0xeb2bf817, 0x463dfa28, _ts(string), _ii(token), _r);
    return [retval, token_out];
}
exports.scProfanityCheckStringUgc = scProfanityCheckStringUgc;
function scProfanityGetCheckIsPending(token) {
    return _in(0x82e4a58b, 0xabc15ae7, token, _r);
}
exports.scProfanityGetCheckIsPending = scProfanityGetCheckIsPending;
function scProfanityGetCheckIsValid(token) {
    return _in(0x1753344c, 0x770358ae, token, _r);
}
exports.scProfanityGetCheckIsValid = scProfanityGetCheckIsValid;
function scProfanityGetStringPassed(token) {
    return _in(0x85535acf, 0x97fc0969, token, _r);
}
exports.scProfanityGetStringPassed = scProfanityGetStringPassed;
function scProfanityGetStringStatus(token) {
    return _in(0x930de22f, 0x07b1cce3, token, _r, _ri);
}
exports.scProfanityGetStringStatus = scProfanityGetStringStatus;
function scTransitionNewsEnd() {
    return _in(0x675721c9, 0xf644d161);
}
exports.scTransitionNewsEnd = scTransitionNewsEnd;
function scTransitionNewsGetExtraDataIntTu(p0, p1) {
    const [retval, p1_out] = _in(0x92da6e70, 0xef249bd1, _ts(p0), _ii(p1), _r);
    return [retval, p1_out];
}
exports.scTransitionNewsGetExtraDataIntTu = scTransitionNewsGetExtraDataIntTu;
function scTransitionNewsHasExtraDataTu() {
    return _in(0x3001bef2, 0xfeca3680, _r);
}
exports.scTransitionNewsHasExtraDataTu = scTransitionNewsHasExtraDataTu;
function scTransitionNewsShow(p0) {
    return _in(0x6bfb12ce, 0x158e3dd4, p0, _r);
}
exports.scTransitionNewsShow = scTransitionNewsShow;
function scTransitionNewsShowNextItem() {
    return _in(0xd8122c40, 0x7663b995, _r);
}
exports.scTransitionNewsShowNextItem = scTransitionNewsShowNextItem;
function scTransitionNewsShowTimed(p0, p1) {
    return _in(0xfe4c1d0d, 0x3b9cc17e, p0, p1, _r);
}
exports.scTransitionNewsShowTimed = scTransitionNewsShowTimed;
/**
 * Pushes a boolean for the Scaleform function onto the stack.
 * @param value
 */
function scaleformMovieMethodAddParamBool(value) {
    return _in(0xc58424ba, 0x936eb458, value);
}
exports.scaleformMovieMethodAddParamBool = scaleformMovieMethodAddParamBool;
/**
 * Pushes a float for the Scaleform function onto the stack.
 * @param value
 */
function scaleformMovieMethodAddParamFloat(value) {
    return _in(0xd69736aa, 0xe04db51a, _fv(value));
}
exports.scaleformMovieMethodAddParamFloat = scaleformMovieMethodAddParamFloat;
/**
 * Pushes an integer for the Scaleform function onto the stack.
 * @param value
 */
function scaleformMovieMethodAddParamInt(value) {
    return _in(0xc3d0841a, 0x0cc546a6, value);
}
exports.scaleformMovieMethodAddParamInt = scaleformMovieMethodAddParamInt;
function scaleformMovieMethodAddParamLatestBriefString(value) {
    return _in(0xec52c631, 0xa1831c03, value);
}
exports.scaleformMovieMethodAddParamLatestBriefString = scaleformMovieMethodAddParamLatestBriefString;
/**
 * Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
 * Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
 * @param string
 */
function scaleformMovieMethodAddParamLiteralString(string) {
    return _in(0x77fe3402, 0x004cd1b0, _ts(string));
}
exports.scaleformMovieMethodAddParamLiteralString = scaleformMovieMethodAddParamLiteralString;
function scaleformMovieMethodAddParamPlayerNameString(string) {
    return _in(0xe83a3e35, 0x57a56640, _ts(string));
}
exports.scaleformMovieMethodAddParamPlayerNameString = scaleformMovieMethodAddParamPlayerNameString;
function scaleformMovieMethodAddParamTextureNameString(string) {
    return _in(0xba714848, 0x4bd90365, _ts(string));
}
exports.scaleformMovieMethodAddParamTextureNameString = scaleformMovieMethodAddParamTextureNameString;
/**
 * If bool Toggle = true so the mobile is hide to screen.
 * If bool Toggle = false so the mobile is show to screen.
 * @param toggle
 */
function scriptIsMovingMobilePhoneOffscreen(toggle) {
    return _in(0xf511f759, 0x238a5122, toggle);
}
exports.scriptIsMovingMobilePhoneOffscreen = scriptIsMovingMobilePhoneOffscreen;
function scriptOverridesWindElevation(p0, p1) {
    return _in(0x70b8ec8f, 0xc108a634, p0, p1);
}
exports.scriptOverridesWindElevation = scriptOverridesWindElevation;
function scriptRaceGetPlayerSplitTime(player) {
    const [retval, p1_out, p2_out] = _in(0x8ef5573a, 0x1f801a5c, player, _i, _i, _r);
    return [retval, p1_out, p2_out];
}
exports.scriptRaceGetPlayerSplitTime = scriptRaceGetPlayerSplitTime;
function scriptRaceInit(p0, p1, p2, p3) {
    return _in(0x0a60017f, 0x841a54f2, p0, p1, p2, p3);
}
exports.scriptRaceInit = scriptRaceInit;
function scriptRacePlayerHitCheckpoint(player, p1, p2, p3) {
    return _in(0x1bb29930, 0x5c3e8c13, player, p1, p2, p3);
}
exports.scriptRacePlayerHitCheckpoint = scriptRacePlayerHitCheckpoint;
function scriptRaceShutdown() {
    return _in(0x1ff6bf9a, 0x63e5757f);
}
exports.scriptRaceShutdown = scriptRaceShutdown;
/**
 * If the function returns 0, the end of the iteration has been reached.
 */
function scriptThreadIteratorGetNextThreadId() {
    return _in(0x30b4fa1c, 0x82dd4b9f, _r, _ri);
}
exports.scriptThreadIteratorGetNextThreadId = scriptThreadIteratorGetNextThreadId;
/**
 * Starts a new iteration of the current threads.
 * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
 */
function scriptThreadIteratorReset() {
    return _in(0xdadfada5, 0xa20143a8);
}
exports.scriptThreadIteratorReset = scriptThreadIteratorReset;
function seethroughGetMaxThickness() {
    return _in(0x43dbae39, 0x626ce83f, _r, _rf);
}
exports.seethroughGetMaxThickness = seethroughGetMaxThickness;
function seethroughReset() {
    return _in(0x70a64c02, 0x34ef522c);
}
exports.seethroughReset = seethroughReset;
function seethroughSetColorNear(red, green, blue) {
    return _in(0x1086127b, 0x3a63505e, red, green, blue);
}
exports.seethroughSetColorNear = seethroughSetColorNear;
function seethroughSetFadeEnddistance(distance) {
    return _in(0x9d75795b, 0x9dc6ebbf, _fv(distance));
}
exports.seethroughSetFadeEnddistance = seethroughSetFadeEnddistance;
function seethroughSetFadeStartdistance(distance) {
    return _in(0xa78de255, 0x77300ba1, _fv(distance));
}
exports.seethroughSetFadeStartdistance = seethroughSetFadeStartdistance;
/**
 * min: 0.0
 * max: 0.75
 * @param index
 * @param heatScale
 */
function seethroughSetHeatscale(index, heatScale) {
    return _in(0xd7d0b001, 0x77485411, index, _fv(heatScale));
}
exports.seethroughSetHeatscale = seethroughSetHeatscale;
function seethroughSetHighlightNoise(noise) {
    return _in(0x1636d7fc, 0x127b10d2, _fv(noise));
}
exports.seethroughSetHighlightNoise = seethroughSetHighlightNoise;
function seethroughSetHilightIntensity(intensity) {
    return _in(0x19e50eb6, 0xe33e1d28, _fv(intensity));
}
exports.seethroughSetHilightIntensity = seethroughSetHilightIntensity;
/**
 * 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
 * min: 1.0
 * max: 10000.0
 * @param thickness
 */
function seethroughSetMaxThickness(thickness) {
    return _in(0x0c8fac83, 0x902a62df, _fv(thickness));
}
exports.seethroughSetMaxThickness = seethroughSetMaxThickness;
function seethroughSetNoiseMax(amount) {
    return _in(0xfebfbfdf, 0xb66039de, _fv(amount));
}
exports.seethroughSetNoiseMax = seethroughSetNoiseMax;
function seethroughSetNoiseMin(amount) {
    return _in(0xff5992e1, 0xc9e65d05, _fv(amount));
}
exports.seethroughSetNoiseMin = seethroughSetNoiseMin;
function sendMetricGhostingToPlayer(p0) {
    return _in(0x7033eefd, 0x9b28088e, p0);
}
exports.sendMetricGhostingToPlayer = sendMetricGhostingToPlayer;
function sendMetricPunishBodyguard(p0) {
    return _in(0x015b03ee, 0x1c43e6ec, p0);
}
exports.sendMetricPunishBodyguard = sendMetricPunishBodyguard;
function sendMetricVipPoach(p0, p1, p2) {
    return _in(0xaa525dff, 0x66bb82f5, p0, p1, p2);
}
exports.sendMetricVipPoach = sendMetricVipPoach;
/**
 * See TRIGGER_SCRIPT_EVENT
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
function sendTuScriptEvent(eventGroup, eventDataSize, playerBits) {
    return _in(0xa40cc53d, 0xf8e50837, eventGroup, _i, eventDataSize, playerBits);
}
exports.sendTuScriptEvent = sendTuScriptEvent;
function setAbilityBarValue(p0, p1) {
    return _in(0x9969599c, 0xcff5d85e, _fv(p0), _fv(p1));
}
exports.setAbilityBarValue = setAbilityBarValue;
function setAbilityBarVisibility(visible) {
    return _in(0x1dfedd15, 0x019315a9, visible);
}
exports.setAbilityBarVisibility = setAbilityBarVisibility;
/**
 * For Steam.
 * Does nothing and always returns false in the retail version of the game.
 * @param achievementId
 * @param progress
 */
function setAchievementProgress(achievementId, progress) {
    return _in(0xc2afffda, 0xbbdc2c5c, achievementId, progress, _r);
}
exports.setAchievementProgress = setAchievementProgress;
function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object, toggle) {
    return _in(0x406137f8, 0xef90eaf5, object, toggle);
}
exports.setActivateObjectPhysicsAsSoonAsItIsUnfrozen = setActivateObjectPhysicsAsSoonAsItIsUnfrozen;
function setAdditionalRotationForRecordedVehiclePlayback(vehicle, x, y, z, p4) {
    return _in(0x5845066d, 0x8a1ea7f7, vehicle, _fv(x), _fv(y), _fv(z), p4);
}
exports.setAdditionalRotationForRecordedVehiclePlayback = setAdditionalRotationForRecordedVehiclePlayback;
/**
 * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
 * @param toggle
 */
function setAggressiveHorns(toggle) {
    return _in(0x395bf710, 0x85d1b1d9, toggle);
}
exports.setAggressiveHorns = setAggressiveHorns;
function setAiMeleeWeaponDamageModifier(modifier) {
    return _in(0x66460ded, 0xdd417254, _fv(modifier));
}
exports.setAiMeleeWeaponDamageModifier = setAiMeleeWeaponDamageModifier;
function setAiWeaponDamageModifier(value) {
    return _in(0x1b1e2a40, 0xa65b8521, _fv(value));
}
exports.setAiWeaponDamageModifier = setAiWeaponDamageModifier;
/**
 * This can be between 1.0f - 14.9f
 *
 * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
 *
 *
 * @param player
 * @param multiplier
 */
function setAirDragMultiplierForPlayersVehicle(player, multiplier) {
    return _in(0xca7dc832, 0x9f0a1e9e, player, _fv(multiplier));
}
exports.setAirDragMultiplierForPlayersVehicle = setAirDragMultiplierForPlayersVehicle;
function setAircraftIgnoreHightmapOptimisation(vehicle, p1) {
    return _in(0xf8b49f5b, 0xa7f850e7, vehicle, p1);
}
exports.setAircraftIgnoreHightmapOptimisation = setAircraftIgnoreHightmapOptimisation;
function setAircraftPilotSkillNoiseScalar(vehicle, p1) {
    return _in(0xe5810ac7, 0x0602f2f5, vehicle, _fv(p1));
}
exports.setAircraftPilotSkillNoiseScalar = setAircraftPilotSkillNoiseScalar;
function setAllLowPriorityVehicleGeneratorsActive(active) {
    return _in(0x608207e7, 0xa8fb787c, active);
}
exports.setAllLowPriorityVehicleGeneratorsActive = setAllLowPriorityVehicleGeneratorsActive;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
function setAllMapdataCulled(p0) {
    return _in(0x4e52e752, 0xc76e7e7a, p0);
}
exports.setAllMapdataCulled = setAllMapdataCulled;
function setAllMpGamerTagsVisibility(gamerTagId, toggle) {
    return _in(0xee76ff7e, 0x6a0166b0, gamerTagId, toggle);
}
exports.setAllMpGamerTagsVisibility = setAllMpGamerTagsVisibility;
function setAllNeutralRandomPedsFlee(player, toggle) {
    return _in(0xde45d1a1, 0xef45ee61, player, toggle);
}
exports.setAllNeutralRandomPedsFlee = setAllNeutralRandomPedsFlee;
/**
 * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
 *
 * @param player
 */
function setAllNeutralRandomPedsFleeThisFrame(player) {
    return _in(0xc3376f42, 0xb1faccc6, player);
}
exports.setAllNeutralRandomPedsFleeThisFrame = setAllNeutralRandomPedsFleeThisFrame;
function setAllRandomPedsFlee(player, toggle) {
    return _in(0x056e0fe8, 0x534c2949, player, toggle);
}
exports.setAllRandomPedsFlee = setAllRandomPedsFlee;
function setAllRandomPedsFleeThisFrame(player) {
    return _in(0x471d2ff4, 0x2a94b4f2, player);
}
exports.setAllRandomPedsFleeThisFrame = setAllRandomPedsFleeThisFrame;
function setAllVehicleGeneratorsActive() {
    return _in(0x34ad8907, 0x8831a4bc);
}
exports.setAllVehicleGeneratorsActive = setAllVehicleGeneratorsActive;
/**
 * When p6 is true, vehicle generators are active.
 * p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param toggle
 * @param p7
 */
function setAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, toggle, p7) {
    return _in(0xc1232182, 0x7687fe4d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), toggle, p7);
}
exports.setAllVehicleGeneratorsActiveInArea = setAllVehicleGeneratorsActiveInArea;
function setAllowAbilityBar(toggle) {
    return _in(0x889329c8, 0x0fe5963c, toggle);
}
exports.setAllowAbilityBar = setAllowAbilityBar;
function setAllowCommaOnTextInput(p0) {
    return _in(0x577599cc, 0xed639ca2, p0);
}
exports.setAllowCommaOnTextInput = setAllowCommaOnTextInput;
function setAllowCustomVehicleDriveByCamThisUpdate(p0) {
    return _in(0x4008edf7, 0xd6e48175, p0);
}
exports.setAllowCustomVehicleDriveByCamThisUpdate = setAllowCustomVehicleDriveByCamThisUpdate;
function setAllowLockonToPedIfFriendly(ped, toggle) {
    return _in(0x061cb768, 0x363d6424, ped, toggle);
}
exports.setAllowLockonToPedIfFriendly = setAllowLockonToPedIfFriendly;
/**
 * p1 is always set to 1
 * @param entity
 * @param p1
 */
function setAllowMigrateToSpectator(entity, p1) {
    return _in(0x36f32de8, 0x7082343e, entity, p1);
}
exports.setAllowMigrateToSpectator = setAllowMigrateToSpectator;
function setAllowRammingSoopOrRamp(p0, p1) {
    return _in(0x80e3357f, 0xdef45c21, p0, p1);
}
exports.setAllowRammingSoopOrRamp = setAllowRammingSoopOrRamp;
/**
 * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
 * @param type
 */
function setAllowStreamHeistIslandNodes(type) {
    return _in(0xf74b1ffa, 0x4a15fbea, type);
}
exports.setAllowStreamHeistIslandNodes = setAllowStreamHeistIslandNodes;
function setAllowStreamPrologueNodes(toggle) {
    return _in(0x228e5c6a, 0xd4d74bfd, toggle);
}
exports.setAllowStreamPrologueNodes = setAllowStreamPrologueNodes;
function setAllowStuntJumpCamera(ped, toggle) {
    return _in(0xfab944d4, 0xd481accb, ped, toggle);
}
exports.setAllowStuntJumpCamera = setAllowStuntJumpCamera;
function setAllowVehicleExplodesOnContact(vehicle, toggle) {
    return _in(0x3441cad2, 0xf2231923, vehicle, toggle);
}
exports.setAllowVehicleExplodesOnContact = setAllowVehicleExplodesOnContact;
function setAmbientLawPedAccuracyModifier(multiplier) {
    return _in(0x87ddeb61, 0x1b329a9c, _fv(multiplier));
}
exports.setAmbientLawPedAccuracyModifier = setAmbientLawPedAccuracyModifier;
function setAmbientPedRangeMultiplierThisFrame(multiplier) {
    return _in(0x0b919e1f, 0xb47cc4e0, _fv(multiplier));
}
exports.setAmbientPedRangeMultiplierThisFrame = setAmbientPedRangeMultiplierThisFrame;
function setAmbientPedsDropMoney(p0) {
    return _in(0x6b0e6172, 0xc9a4d902, p0);
}
exports.setAmbientPedsDropMoney = setAmbientPedsDropMoney;
function setAmbientVehicleNeonEnabled(p0) {
    return _in(0x35e0654f, 0x4bad7971, p0);
}
exports.setAmbientVehicleNeonEnabled = setAmbientVehicleNeonEnabled;
function setAmbientVehicleRangeMultiplierThisFrame(value) {
    return _in(0x90b6da73, 0x8a9a25da, _fv(value));
}
exports.setAmbientVehicleRangeMultiplierThisFrame = setAmbientVehicleRangeMultiplierThisFrame;
/**
 * Audio List
 * gtaforums.com/topic/795622-audio-for-mods/
 *
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
 * @param ped
 * @param name
 */
function setAmbientVoiceName(ped, name) {
    return _in(0x6c8065a3, 0xb780185b, ped, _ts(name));
}
exports.setAmbientVoiceName = setAmbientVoiceName;
function setAmbientVoiceNameHash(ped, hash) {
    return _in(0x9a53ded9, 0x921de990, ped, _ch(hash));
}
exports.setAmbientVoiceNameHash = setAmbientVoiceNameHash;
function setAmbientZoneListState(ambientZone, p1, p2) {
    return _in(0x9748fa4d, 0xe50cce3e, _ts(ambientZone), p1, p2);
}
exports.setAmbientZoneListState = setAmbientZoneListState;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 * @param p1
 * @param p2
 */
function setAmbientZoneListStatePersistent(ambientZone, p1, p2) {
    return _in(0xf3638dae, 0x8c4045e1, _ts(ambientZone), p1, p2);
}
exports.setAmbientZoneListStatePersistent = setAmbientZoneListStatePersistent;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param zoneName
 * @param p1
 * @param p2
 */
function setAmbientZoneState(zoneName, p1, p2) {
    return _in(0xbda07e59, 0x50085e46, _ts(zoneName), p1, p2);
}
exports.setAmbientZoneState = setAmbientZoneState;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 * @param p1
 * @param p2
 */
function setAmbientZoneStatePersistent(ambientZone, p1, p2) {
    return _in(0x1d665042, 0x0cec9d3b, _ts(ambientZone), p1, p2);
}
exports.setAmbientZoneStatePersistent = setAmbientZoneStatePersistent;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
function setAmmoInClip(ped, weaponHash, ammo) {
    return _in(0xdcd2a934, 0xd65cb497, ped, _ch(weaponHash), ammo, _r);
}
exports.setAmmoInClip = setAmmoInClip;
function setAnimLooped(entity, looped, priority, secondary) {
    return _in(0x70033c3c, 0xc29a1ff4, entity, looped, priority, secondary);
}
exports.setAnimLooped = setAnimLooped;
function setAnimPhase(entity, phase, priority, secondary) {
    return _in(0xddf3cb5a, 0x0a4c0b49, entity, _fv(phase), priority, secondary);
}
exports.setAnimPhase = setAnimPhase;
function setAnimRate(entity, rate, priority, secondary) {
    return _in(0x032d49c5, 0xe359c847, entity, _fv(rate), priority, secondary);
}
exports.setAnimRate = setAnimRate;
function setAnimWeight(entity, weight, priority, index, secondary) {
    return _in(0x207f1a47, 0xc0342f48, entity, _fv(weight), priority, index, secondary);
}
exports.setAnimWeight = setAnimWeight;
/**
 * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
 * @param animal
 * @param mood
 */
function setAnimalMood(animal, mood) {
    return _in(0xcc97b292, 0x85b1dc3b, animal, mood);
}
exports.setAnimalMood = setAnimalMood;
function setApplyWaypointOfPlayer(player, hudColor) {
    return _in(0x2382ab11, 0x450ae7ba, player, hudColor);
}
exports.setApplyWaypointOfPlayer = setApplyWaypointOfPlayer;
function setArenaThemeAndVariationForTakenPhoto(p0, p1) {
    return _in(0xf3f776ad, 0xa161e47d, p0, p1);
}
exports.setArenaThemeAndVariationForTakenPhoto = setArenaThemeAndVariationForTakenPhoto;
function setArriveDistanceOverrideForVehiclePersuitAttack(vehicle, p1) {
    return _in(0x0205f536, 0x5292d2eb, vehicle, _fv(p1));
}
exports.setArriveDistanceOverrideForVehiclePersuitAttack = setArriveDistanceOverrideForVehiclePersuitAttack;
/**
 * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
 * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
 *
 * Used in Humane Labs Heist for EMP.
 *
 * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
 * @param state
 */
function setArtificialLightsState(state) {
    return _in(0x1268615a, 0xce24d504, state);
}
exports.setArtificialLightsState = setArtificialLightsState;
/**
 * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
 * @param toggle
 */
function setArtificialVehicleLightsState(toggle) {
    return _in(0xe2b187c0, 0x939b3d32, toggle);
}
exports.setArtificialVehicleLightsState = setArtificialVehicleLightsState;
/**
 * Possible flag names:
 * "ActivateSwitchWheelAudio"
 * "AllowAmbientSpeechInSlowMo"
 * "AllowCutsceneOverScreenFade"
 * "AllowForceRadioAfterRetune"
 * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
 * "AllowPlayerAIOnMission"
 * "AllowPoliceScannerWhenPlayerHasNoControl"
 * "AllowRadioDuringSwitch"
 * "AllowRadioOverScreenFade"
 * "AllowScoreAndRadio"
 * "AllowScriptedSpeechInSlowMo"
 * "AvoidMissionCompleteDelay"
 * "DisableAbortConversationForDeathAndInjury"
 * "DisableAbortConversationForRagdoll"
 * "DisableBarks"
 * "DisableFlightMusic"
 * "DisableReplayScriptStreamRecording"
 * "EnableHeadsetBeep"
 * "ForceConversationInterrupt"
 * "ForceSeamlessRadioSwitch"
 * "ForceSniperAudio"
 * "FrontendRadioDisabled"
 * "HoldMissionCompleteWhenPrepared"
 * "IsDirectorModeActive"
 * "IsPlayerOnMissionForSpeech"
 * "ListenerReverbDisabled"
 * "LoadMPData"
 * "MobileRadioInGame"
 * "OnlyAllowScriptTriggerPoliceScanner"
 * "PlayMenuMusic"
 * "PoliceScannerDisabled"
 * "ScriptedConvListenerMaySpeak"
 * "SpeechDucksScore"
 * "SuppressPlayerScubaBreathing"
 * "WantedMusicDisabled"
 * "WantedMusicOnMission"
 *
 * -------------------------------
 * No added flag names between b393d and b573d, including b573d.
 *
 * #######################################################################
 *
 * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
 *
 * -----------------------------------------------------------------------
 *
 * All flag IDs and hashes:
 *
 * ID: 00 | Hash: 0x0FED7A7F
 * ID: 01 | Hash: 0x20A7858F
 * ID: 02 | Hash: 0xA11C2259
 * ID: 03 | Hash: 0x08DE4700
 * ID: 04 | Hash: 0x989F652F
 * ID: 05 | Hash: 0x3C9E76BA
 * ID: 06 | Hash: 0xA805FEB0
 * ID: 07 | Hash: 0x4B94EA26
 * ID: 08 | Hash: 0x803ACD34
 * ID: 09 | Hash: 0x7C741226
 * ID: 10 | Hash: 0x31DB9EBD
 * ID: 11 | Hash: 0xDF386F18
 * ID: 12 | Hash: 0x669CED42
 * ID: 13 | Hash: 0x51F22743
 * ID: 14 | Hash: 0x2052B35C
 * ID: 15 | Hash: 0x071472DC
 * ID: 16 | Hash: 0xF9928BCC
 * ID: 17 | Hash: 0x7ADBDD48
 * ID: 18 | Hash: 0xA959BA1A
 * ID: 19 | Hash: 0xBBE89B60
 * ID: 20 | Hash: 0x87A08871
 * ID: 21 | Hash: 0xED1057CE
 * ID: 22 | Hash: 0x1584AD7A
 * ID: 23 | Hash: 0x8582CFCB
 * ID: 24 | Hash: 0x7E5E2FB0
 * ID: 25 | Hash: 0xAE4F72DB
 * ID: 26 | Hash: 0x5D16D1FA
 * ID: 27 | Hash: 0x06B2F4B8
 * ID: 28 | Hash: 0x5D4CDC96
 * ID: 29 | Hash: 0x8B5A48BA
 * ID: 30 | Hash: 0x98FBD539
 * ID: 31 | Hash: 0xD8CB0473
 * ID: 32 | Hash: 0x5CBB4874
 * ID: 33 | Hash: 0x2E9F93A9
 * ID: 34 | Hash: 0xD93BEA86
 * ID: 35 | Hash: 0x92109B7D
 * ID: 36 | Hash: 0xB7EC9E4D
 * ID: 37 | Hash: 0xCABDBB1D
 * ID: 38 | Hash: 0xB3FD4A52
 * ID: 39 | Hash: 0x370D94E5
 * ID: 40 | Hash: 0xA0F7938F
 * ID: 41 | Hash: 0xCBE1CE81
 * ID: 42 | Hash: 0xC27F1271
 * ID: 43 | Hash: 0x9E3258EB
 * ID: 44 | Hash: 0x551CDA5B
 * ID: 45 | Hash: 0xCB6D663C
 * ID: 46 | Hash: 0x7DACE87F
 * ID: 47 | Hash: 0xF9DE416F
 * ID: 48 | Hash: 0x882E6E9E
 * ID: 49 | Hash: 0x16B447E7
 * ID: 50 | Hash: 0xBD867739
 * ID: 51 | Hash: 0xA3A58604
 * ID: 52 | Hash: 0x7E046BBC
 * ID: 53 | Hash: 0xD95FDB98
 * ID: 54 | Hash: 0x5842C0ED
 * ID: 55 | Hash: 0x285FECC6
 * ID: 56 | Hash: 0x9351AC43
 * ID: 57 | Hash: 0x50032E75
 * ID: 58 | Hash: 0xAE6D0D59
 * ID: 59 | Hash: 0xD6351785
 * ID: 60 | Hash: 0xD25D71BC
 * ID: 61 | Hash: 0x1F7F6423
 * ID: 62 | Hash: 0xE24C3AA6
 * ID: 63 | Hash: 0xBFFDD2B7
 * @param flagName
 * @param toggle
 */
function setAudioFlag(flagName, toggle) {
    return _in(0xb9efd5c2, 0x5018725a, _ts(flagName), toggle);
}
exports.setAudioFlag = setAudioFlag;
/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 * @param variable
 * @param value
 */
function setAudioSceneVariable(scene, variable, value) {
    return _in(0xef21a9ef, 0x089a2668, _ts(scene), _ts(variable), _fv(value));
}
exports.setAudioSceneVariable = setAudioSceneVariable;
function setAudioScriptCleanupTime(time) {
    return _in(0xa5f377b1, 0x75a699c5, time);
}
exports.setAudioScriptCleanupTime = setAudioScriptCleanupTime;
/**
 * Needs to be called every frame.
 * Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
 * @param mode
 */
function setAudioSpecialEffectMode(mode) {
    return _in(0x12561fcb, 0xb62d5b9c, mode);
}
exports.setAudioSpecialEffectMode = setAudioSpecialEffectMode;
function setAudioVehiclePriority(vehicle, p1) {
    return _in(0xe5564483, 0xe407f914, vehicle, p1);
}
exports.setAudioVehiclePriority = setAudioVehiclePriority;
function setAutoGiveParachuteWhenEnterPlane(player, toggle) {
    return _in(0x9f343285, 0xa00b4bb6, player, toggle);
}
exports.setAutoGiveParachuteWhenEnterPlane = setAutoGiveParachuteWhenEnterPlane;
function setAutoGiveScubaGearWhenExitVehicle(player, toggle) {
    return _in(0xd2b315b6, 0x689d537d, player, toggle);
}
exports.setAutoGiveScubaGearWhenExitVehicle = setAutoGiveScubaGearWhenExitVehicle;
function setBackfaceculling(toggle) {
    return _in(0x23ba6b0c, 0x2ad7b0d3, toggle);
}
exports.setBackfaceculling = setBackfaceculling;
function setBeastJumpThisFrame(player) {
    return _in(0x438822c2, 0x79b73b93, player);
}
exports.setBeastJumpThisFrame = setBeastJumpThisFrame;
/**
 * Toggles the big minimap state like in GTA:Online.
 * @param toggleBigMap
 * @param showFullMap
 */
function setBigmapActive(toggleBigMap, showFullMap) {
    return _in(0x231c8f89, 0xd0539d8f, toggleBigMap, showFullMap);
}
exports.setBigmapActive = setBigmapActive;
/**
 * When enabled, the player won't fall off the bike when landing from large heights.
 * @param vehicle
 * @param toggle
 */
function setBikeEasyToLand(vehicle, toggle) {
    return _in(0x73561d44, 0x25a021a2, vehicle, toggle);
}
exports.setBikeEasyToLand = setBikeEasyToLand;
/**
 * Only works on bikes, both X and Y work in the -1 - 1 range.
 *
 * X forces the bike to turn left or right (-1, 1)
 * Y forces the bike to lean to the left or to the right (-1, 1)
 *
 * Example with X -1/Y 1
 * http://i.imgur.com/TgIuAPJ.jpg
 * @param vehicle
 * @param x
 * @param y
 */
function setBikeOnStand(vehicle, x, y) {
    return _in(0x9cfa4896, 0xc3a53cbb, vehicle, _fv(x), _fv(y));
}
exports.setBikeOnStand = setBikeOnStand;
function setBinkMovie(name) {
    return _in(0x338d9f60, 0x9fd632db, _ts(name), _r, _ri);
}
exports.setBinkMovie = setBinkMovie;
function setBinkMovieAudioFrontend(binkMovie, p1) {
    return _in(0xf816f293, 0x3752322d, binkMovie, p1);
}
exports.setBinkMovieAudioFrontend = setBinkMovieAudioFrontend;
/**
 * In percentage: 0.0 - 100.0
 * @param binkMovie
 * @param progress
 */
function setBinkMovieTime(binkMovie, progress) {
    return _in(0x0cb6b344, 0x6855b57a, binkMovie, _fv(progress));
}
exports.setBinkMovieTime = setBinkMovieTime;
/**
 * binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
 * @param binkMovie
 * @param value
 */
function setBinkMovieVolume(binkMovie, value) {
    return _in(0xaff33b11, 0x78172223, binkMovie, _fv(value));
}
exports.setBinkMovieVolume = setBinkMovieVolume;
function setBinkShouldSkip(binkMovie, bShouldSkip) {
    return _in(0x6805d58c, 0xaa427b72, binkMovie, bShouldSkip);
}
exports.setBinkShouldSkip = setBinkShouldSkip;
/**
 * This sets bit [offset] of [address] to on.
 *
 * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
 *
 * Example:
 * MISC::SET_BIT(&bitAddress, 1);
 *
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
 *
 * Please note, this method may assign a value to [address] when used.
 * @param address
 * @param offset
 */
function setBit(offset) {
    return _in(0x933d6a9e, 0xec1bacd0, _i, offset);
}
exports.setBit = setBit;
function setBitsInRange(rangeStart, rangeEnd, p3) {
    return _in(0x8ef07e15, 0x701d61ed, _i, rangeStart, rangeEnd, p3);
}
exports.setBitsInRange = setBitsInRange;
/**
 * Sets alpha-channel for blip color.
 *
 * Example:
 *
 * Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
 * HUD::SET_BLIP_COLOUR(blip , 3);
 * HUD::SET_BLIP_ALPHA(blip , 64);
 *
 * @param blip
 * @param alpha
 */
function setBlipAlpha(blip, alpha) {
    return _in(0x45ff974e, 0xee1c8734, blip, alpha);
}
exports.setBlipAlpha = setBlipAlpha;
/**
 * false for enemy
 * true for friendly
 * @param blip
 * @param toggle
 */
function setBlipAsFriendly(blip, toggle) {
    return _in(0x6f6f2901, 0x02c02ab4, blip, toggle);
}
exports.setBlipAsFriendly = setBlipAsFriendly;
/**
 * Makes a blip go small when off the minimap.
 * @param blip
 * @param toggle
 */
function setBlipAsMinimalOnEdge(blip, toggle) {
    return _in(0x2b6d467d, 0xab714e8d, blip, toggle);
}
exports.setBlipAsMinimalOnEdge = setBlipAsMinimalOnEdge;
function setBlipAsMissionCreatorBlip(blip, toggle) {
    return _in(0x24ac0137, 0x444f9fd5, blip, toggle);
}
exports.setBlipAsMissionCreatorBlip = setBlipAsMissionCreatorBlip;
/**
 * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
 * @param blip
 * @param toggle
 */
function setBlipAsShortRange(blip, toggle) {
    return _in(0xbe8be4fe, 0x60e27b72, blip, toggle);
}
exports.setBlipAsShortRange = setBlipAsShortRange;
function setBlipBright(blip, toggle) {
    return _in(0xb2039137, 0x33f27884, blip, toggle);
}
exports.setBlipBright = setBlipBright;
/**
 * Example: https://i.imgur.com/skY6vAJ.png
 *
 * Index:
 * 1 = No distance shown in legend
 * 2 = Distance shown in legend
 * 7 = "Other Players" category, also shows distance in legend
 * 10 = "Property" category
 * 11 = "Owned Property" category
 *
 * Any other value behaves like index = 1, index wraps around after 255
 * Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
 * Legend entries:
 * 7 = Other Players (BLIP_OTHPLYR)
 * 10 = Property (BLIP_PROPCAT)
 * 11 = Owned Property (BLIP_APARTCAT)
 *
 * Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
 * @param blip
 * @param index
 */
function setBlipCategory(blip, index) {
    return _in(0x234cdd44, 0xd996fd9a, blip, index);
}
exports.setBlipCategory = setBlipCategory;
/**
 * https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
 * @param blip
 * @param color
 */
function setBlipColour(blip, color) {
    return _in(0x03d7fb09, 0xe75d6b7e, blip, color);
}
exports.setBlipColour = setBlipColour;
function setBlipCoords(blip, posX, posY, posZ) {
    return _in(0xae2af67e, 0x9d9af65d, blip, _fv(posX), _fv(posY), _fv(posZ));
}
exports.setBlipCoords = setBlipCoords;
/**
 * Display Id behaviours:
 * 0 = Doesn't show up, ever, anywhere.
 * 1 = Doesn't show up, ever, anywhere.
 * 2 = Shows on both main map and minimap. (Selectable on map)
 * 3 = Shows on main map only. (Selectable on map)
 * 4 = Shows on main map only. (Selectable on map)
 * 5 = Shows on minimap only.
 * 6 = Shows on both main map and minimap. (Selectable on map)
 * 7 = Doesn't show up, ever, anywhere.
 * 8 = Shows on both main map and minimap. (Not selectable on map)
 * 9 = Shows on minimap only.
 * 10 = Shows on both main map and minimap. (Not selectable on map)
 *
 * Anything higher than 10 seems to be exactly the same as 10.
 * @param blip
 * @param displayId
 */
function setBlipDisplay(blip, displayId) {
    return _in(0x9029b2f3, 0xda924928, blip, displayId);
}
exports.setBlipDisplay = setBlipDisplay;
/**
 * Must be toggled before being queued for animation
 * @param blip
 * @param toggle
 */
function setBlipExtendedHeightThreshold(blip, toggle) {
    return _in(0xc4278f70, 0x131baa6d, blip, toggle);
}
exports.setBlipExtendedHeightThreshold = setBlipExtendedHeightThreshold;
function setBlipFade(blip, opacity, duration) {
    return _in(0x2aee8f83, 0x90d2298c, blip, opacity, duration);
}
exports.setBlipFade = setBlipFade;
function setBlipFlashInterval(blip, p1) {
    return _in(0xaa51db31, 0x3c010a7e, blip, p1);
}
exports.setBlipFlashInterval = setBlipFlashInterval;
/**
 * Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
 * @param blip
 * @param duration
 */
function setBlipFlashTimer(blip, duration) {
    return _in(0xd3cd6fd2, 0x97ae87cc, blip, duration);
}
exports.setBlipFlashTimer = setBlipFlashTimer;
function setBlipFlashes(blip, toggle) {
    return _in(0xb1455238, 0x3d39ce3e, blip, toggle);
}
exports.setBlipFlashes = setBlipFlashes;
function setBlipFlashesAlternate(blip, toggle) {
    return _in(0x2e8d9498, 0xc56dd0d1, blip, toggle);
}
exports.setBlipFlashesAlternate = setBlipFlashesAlternate;
function setBlipHiddenOnLegend(blip, toggle) {
    return _in(0x54318c91, 0x5d27e4ce, blip, toggle);
}
exports.setBlipHiddenOnLegend = setBlipHiddenOnLegend;
function setBlipHighDetail(blip, toggle) {
    return _in(0xe2590bc2, 0x9220cebb, blip, toggle);
}
exports.setBlipHighDetail = setBlipHighDetail;
function setBlipMarkerLongDistance(p0, p1) {
    return _in(0xb552929b, 0x85fc27ec, p0, p1);
}
exports.setBlipMarkerLongDistance = setBlipMarkerLongDistance;
/**
 * Doesn't work if the label text of gxtEntry is >= 80.
 * @param blip
 * @param gxtEntry
 */
function setBlipNameFromTextFile(blip, gxtEntry) {
    return _in(0xeaa0ffe1, 0x20d92784, blip, _ts(gxtEntry));
}
exports.setBlipNameFromTextFile = setBlipNameFromTextFile;
function setBlipNameToPlayerName(blip, player) {
    return _in(0x127de7b2, 0x0c60a6a3, blip, player);
}
exports.setBlipNameToPlayerName = setBlipNameToPlayerName;
/**
 * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
 * @param blip
 * @param priority
 */
function setBlipPriority(blip, priority) {
    return _in(0xae9fc9ef, 0x6a9fac79, blip, priority);
}
exports.setBlipPriority = setBlipPriority;
/**
 * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
 * @param blip
 * @param rotation
 */
function setBlipRotation(blip, rotation) {
    return _in(0xf87683cd, 0xf73c3f6e, blip, rotation);
}
exports.setBlipRotation = setBlipRotation;
/**
 * Does not require whole number/integer rotations.
 * @param blip
 * @param heading
 */
function setBlipRotationWithFloat(blip, heading) {
    return _in(0xa8b6afda, 0xc320ac87, blip, _fv(heading));
}
exports.setBlipRotationWithFloat = setBlipRotationWithFloat;
/**
 * Enable / disable showing route for the Blip-object.
 * @param blip
 * @param enabled
 */
function setBlipRoute(blip, enabled) {
    return _in(0x4f7d8a9b, 0xfb0b43e9, blip, enabled);
}
exports.setBlipRoute = setBlipRoute;
function setBlipRouteColour(blip, colour) {
    return _in(0x837155cd, 0x2f63da09, blip, colour);
}
exports.setBlipRouteColour = setBlipRouteColour;
function setBlipScale(blip, scale) {
    return _in(0xd3874416, 0x7b2fa257, blip, _fv(scale));
}
exports.setBlipScale = setBlipScale;
/**
 * See https://imgur.com/a/lLkEsMN
 * @param blip
 * @param xScale
 * @param yScale
 */
function setBlipScale2d(blip, xScale, yScale) {
    return _in(0xcd652443, 0x9909c979, blip, _fv(xScale), _fv(yScale));
}
exports.setBlipScale2d = setBlipScale2d;
/**
 * Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).
 * @param blip
 * @param r
 * @param g
 * @param b
 */
function setBlipSecondaryColour(blip, r, g, b) {
    return _in(0x14892474, 0x891e09eb, blip, r, g, b);
}
exports.setBlipSecondaryColour = setBlipSecondaryColour;
function setBlipShortHeightThreshold(p0, p1) {
    return _in(0x4b5b620c, 0x9b59ed34, p0, p1);
}
exports.setBlipShortHeightThreshold = setBlipShortHeightThreshold;
/**
 * As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
 * @param blip
 * @param toggle
 * @param hudColorIndex
 */
function setBlipShowCone(blip, toggle, hudColorIndex) {
    return _in(0x13127ec3, 0x665e8ee1, blip, toggle, hudColorIndex);
}
exports.setBlipShowCone = setBlipShowCone;
/**
 * Sets the displayed sprite for a specific blip..
 *
 * You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
 * https://pastebin.com/Bpj9Sfft
 *
 * Blips Images + IDs:
 * https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
 * @param blip
 * @param spriteId
 */
function setBlipSprite(blip, spriteId) {
    return _in(0xdf735600, 0xa4696daf, blip, spriteId);
}
exports.setBlipSprite = setBlipSprite;
function setBlipUseHeightIndicatorOnEdge(blip, p1) {
    return _in(0x2c9f3023, 0x98e13141, blip, p1);
}
exports.setBlipUseHeightIndicatorOnEdge = setBlipUseHeightIndicatorOnEdge;
function setBlockWantedFlash(disabled) {
    return _in(0xd1942374, 0x085c8469, disabled);
}
exports.setBlockWantedFlash = setBlockWantedFlash;
/**
 * works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
 * @param ped
 * @param toggle
 */
function setBlockingOfNonTemporaryEvents(ped, toggle) {
    return _in(0x9f8aa94d, 0x6d97dbf4, ped, toggle);
}
exports.setBlockingOfNonTemporaryEvents = setBlockingOfNonTemporaryEvents;
function setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(p0) {
    return _in(0x9911f4a2, 0x4485f653, p0);
}
exports.setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame = setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame;
function setBoatAnchor(vehicle, toggle) {
    return _in(0x75dbec17, 0x4aeead10, vehicle, toggle);
}
exports.setBoatAnchor = setBoatAnchor;
function setBoatDisableAvoidance(vehicle, p1) {
    return _in(0x0a6a279f, 0x3aa4fd70, vehicle, p1);
}
exports.setBoatDisableAvoidance = setBoatDisableAvoidance;
function setBoatIgnoreLandProbes(p0, p1) {
    return _in(0xed5ede9e, 0x676643c9, p0, p1);
}
exports.setBoatIgnoreLandProbes = setBoatIgnoreLandProbes;
function setBoatLowLodAnchorDistance(vehicle, value) {
    return _in(0xe842a939, 0x8079bd82, vehicle, _fv(value));
}
exports.setBoatLowLodAnchorDistance = setBoatLowLodAnchorDistance;
function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle, toggle) {
    return _in(0xe3ebaae4, 0x84798530, vehicle, toggle);
}
exports.setBoatRemainsAnchoredWhilePlayerIsDriver = setBoatRemainsAnchoredWhilePlayerIsDriver;
function setBoatSinksWhenWrecked(vehicle, toggle) {
    return _in(0x8f719973, 0xe1445ba2, vehicle, toggle);
}
exports.setBoatSinksWhenWrecked = setBoatSinksWhenWrecked;
function setBoatWrecked(vehicle) {
    return _in(0xbd32e46a, 0xa95c1dd2, vehicle);
}
exports.setBoatWrecked = setBoatWrecked;
/**
 * Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks
 * @param vehicle
 * @param toggle
 */
function setBoundsAffectWaterProbes(vehicle, toggle) {
    return _in(0x85fc953f, 0x6c6cbde1, vehicle, toggle);
}
exports.setBoundsAffectWaterProbes = setBoundsAffectWaterProbes;
function setCalmedWaveHeightScaler(height) {
    return _in(0x547237aa, 0x71ab44de, _fv(height));
}
exports.setCalmedWaveHeightScaler = setCalmedWaveHeightScaler;
/**
 * Set camera as active/inactive.
 * @param cam
 * @param active
 */
function setCamActive(cam, active) {
    return _in(0x026fb97d, 0x0a425f84, cam, active);
}
exports.setCamActive = setCamActive;
/**
 * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
 *
 * @param camTo
 * @param camFrom
 * @param duration
 * @param easeLocation
 * @param easeRotation
 */
function setCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation) {
    return _in(0x9fbda379, 0x383a52a4, camTo, camFrom, duration, easeLocation, easeRotation);
}
exports.setCamActiveWithInterp = setCamActiveWithInterp;
/**
 * Allows you to aim and shoot at the direction the camera is facing.
 * @param cam
 * @param toggle
 */
function setCamAffectsAiming(cam, toggle) {
    return _in(0x8c1dc777, 0x0c51dc8d, cam, toggle);
}
exports.setCamAffectsAiming = setCamAffectsAiming;
function setCamAnimCurrentPhase(cam, phase) {
    return _in(0x4145a4c4, 0x4ff3b5a6, cam, _fv(phase));
}
exports.setCamAnimCurrentPhase = setCamAnimCurrentPhase;
/**
 * Rotates the radar to match the camera's Z rotation
 * @param cam
 * @param toggle
 */
function setCamControlsMiniMapHeading(cam, toggle) {
    return _in(0x661b5c86, 0x54add825, cam, toggle);
}
exports.setCamControlsMiniMapHeading = setCamControlsMiniMapHeading;
/**
 * Sets the position of the cam.
 * @param cam
 * @param posX
 * @param posY
 * @param posZ
 */
function setCamCoord(cam, posX, posY, posZ) {
    return _in(0x4d41783f, 0xb745e42e, cam, _fv(posX), _fv(posY), _fv(posZ));
}
exports.setCamCoord = setCamCoord;
/**
 * if p0 is 0, effect is cancelled
 *
 * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
 *
 * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
 * @param p0
 */
function setCamDeathFailEffectState(p0) {
    return _in(0x80c8b184, 0x6639bb19, p0);
}
exports.setCamDeathFailEffectState = setCamDeathFailEffectState;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param camera
 * @param name
 */
function setCamDebugName(camera, name) {
    return _in(0x1b93e010, 0x7865dd40, camera, _ts(name));
}
exports.setCamDebugName = setCamDebugName;
/**
 * This native has its name defined inside its codE
 *
 * @param camera
 * @param p1
 */
function setCamDofFnumberOfLens(camera, p1) {
    return _in(0x7dd234d6, 0xf3914c5b, camera, _fv(p1));
}
exports.setCamDofFnumberOfLens = setCamDofFnumberOfLens;
/**
 * Native name labeled within its code
 * @param camera
 * @param multiplier
 */
function setCamDofFocalLengthMultiplier(camera, multiplier) {
    return _in(0x47b595d6, 0x0664cffa, camera, _fv(multiplier));
}
exports.setCamDofFocalLengthMultiplier = setCamDofFocalLengthMultiplier;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
function setCamDofFocusDistanceBias(camera, p1) {
    return _in(0xc669eea5, 0xd031b7de, camera, _fv(p1));
}
exports.setCamDofFocusDistanceBias = setCamDofFocusDistanceBias;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
function setCamDofMaxNearInFocusDistance(camera, p1) {
    return _in(0xc3654a44, 0x1402562d, camera, _fv(p1));
}
exports.setCamDofMaxNearInFocusDistance = setCamDofMaxNearInFocusDistance;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
function setCamDofMaxNearInFocusDistanceBlendLevel(camera, p1) {
    return _in(0x2c654b49, 0x43bddf7c, camera, _fv(p1));
}
exports.setCamDofMaxNearInFocusDistanceBlendLevel = setCamDofMaxNearInFocusDistanceBlendLevel;
function setCamDofOverriddenFocusDistance(camera, p1) {
    return _in(0xf55e4046, 0xf6f831dc, camera, _fv(p1));
}
exports.setCamDofOverriddenFocusDistance = setCamDofOverriddenFocusDistance;
function setCamDofOverriddenFocusDistanceBlendLevel(p0, p1) {
    return _in(0xe111a7c0, 0xd200cbc5, p0, _fv(p1));
}
exports.setCamDofOverriddenFocusDistanceBlendLevel = setCamDofOverriddenFocusDistanceBlendLevel;
function setCamDofPlanes(cam, p1, p2, p3, p4) {
    return _in(0x3cf48f6f, 0x96e749dc, cam, _fv(p1), _fv(p2), _fv(p3), _fv(p4));
}
exports.setCamDofPlanes = setCamDofPlanes;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param state
 */
function setCamDofShouldKeepLookAtTargetInFocus(camera, state) {
    return _in(0x7cf3af51, 0xdcfe4108, camera, state);
}
exports.setCamDofShouldKeepLookAtTargetInFocus = setCamDofShouldKeepLookAtTargetInFocus;
function setCamDofStrength(cam, dofStrength) {
    return _in(0x5ee29b4d, 0x7d5df897, cam, _fv(dofStrength));
}
exports.setCamDofStrength = setCamDofStrength;
function setCamFarClip(cam, farClip) {
    return _in(0xae306f2a, 0x904bf86e, cam, _fv(farClip));
}
exports.setCamFarClip = setCamFarClip;
function setCamFarDof(cam, farDOF) {
    return _in(0xedd91296, 0xcd01aee0, cam, _fv(farDOF));
}
exports.setCamFarDof = setCamFarDof;
/**
 * Sets the field of view of the cam.
 * ---------------------------------------------
 * Min: 1.0f
 * Max: 130.0f
 * @param cam
 * @param fieldOfView
 */
function setCamFov(cam, fieldOfView) {
    return _in(0xb13c14f6, 0x6a00d047, cam, _fv(fieldOfView));
}
exports.setCamFov = setCamFov;
/**
 * The native seems to only be called once.
 *
 * The native is used as so,
 * CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
 * In the exile1 script.
 * @param cam
 * @param p1
 */
function setCamInheritRollVehicle(cam, p1) {
    return _in(0x45f1de9c, 0x34b93ae6, cam, p1);
}
exports.setCamInheritRollVehicle = setCamInheritRollVehicle;
/**
 * When set to true shadows appear more smooth but less detailed.
 * Set to false by default.
 * @param cam
 * @param toggle
 */
function setCamIsInsideVehicle(cam, toggle) {
    return _in(0xa2767257, 0xa320fc82, cam, toggle);
}
exports.setCamIsInsideVehicle = setCamIsInsideVehicle;
function setCamMotionBlurStrength(cam, strength) {
    return _in(0x6f0f77fb, 0xa9a8f2e6, cam, _fv(strength));
}
exports.setCamMotionBlurStrength = setCamMotionBlurStrength;
function setCamNearClip(cam, nearClip) {
    return _in(0xc7848efc, 0xcc545182, cam, _fv(nearClip));
}
exports.setCamNearClip = setCamNearClip;
function setCamNearDof(cam, nearDOF) {
    return _in(0x3fa4bf0a, 0x7ab7de2c, cam, _fv(nearDOF));
}
exports.setCamNearDof = setCamNearDof;
function setCamParams(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11) {
    return _in(0xbfd8727a, 0xea3cceba, cam, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fieldOfView), p8, p9, p10, p11);
}
exports.setCamParams = setCamParams;
/**
 * Sets the rotation of the cam.
 * Last parameter unknown.
 *
 * Last parameter seems to always be set to 2.
 * @param cam
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotationOrder
 */
function setCamRot(cam, rotX, rotY, rotZ, rotationOrder) {
    return _in(0x85973643, 0x155d0b07, cam, _fv(rotX), _fv(rotY), _fv(rotZ), rotationOrder);
}
exports.setCamRot = setCamRot;
function setCamShakeAmplitude(cam, amplitude) {
    return _in(0xd93db43b, 0x82bc0d00, cam, _fv(amplitude));
}
exports.setCamShakeAmplitude = setCamShakeAmplitude;
/**
 * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
 * @param cam
 * @param timeDuration
 */
function setCamSplineDuration(cam, timeDuration) {
    return _in(0x1381539f, 0xee034cda, cam, timeDuration);
}
exports.setCamSplineDuration = setCamSplineDuration;
function setCamSplineNodeEase(cam, easingFunction, p2, p3) {
    return _in(0x83b8201e, 0xd82a9a2d, cam, easingFunction, p2, _fv(p3));
}
exports.setCamSplineNodeEase = setCamSplineNodeEase;
function setCamSplineNodeExtraFlags(cam, p1, flags) {
    return _in(0x7bf1a54a, 0xe67ac070, cam, p1, flags);
}
exports.setCamSplineNodeExtraFlags = setCamSplineNodeExtraFlags;
function setCamSplineNodeVelocityScale(cam, p1, scale) {
    return _in(0xa6385deb, 0x180f319f, cam, p1, _fv(scale));
}
exports.setCamSplineNodeVelocityScale = setCamSplineNodeVelocityScale;
function setCamSplinePhase(cam, p1) {
    return _in(0x242b5874, 0xf0a4e052, cam, _fv(p1));
}
exports.setCamSplinePhase = setCamSplinePhase;
function setCamSplineSmoothingStyle(cam, smoothingStyle) {
    return _in(0xd1b0f412, 0xf109ea5d, cam, smoothingStyle);
}
exports.setCamSplineSmoothingStyle = setCamSplineSmoothingStyle;
function setCamUseShallowDofMode(cam, toggle) {
    return _in(0x16a96863, 0xa17552bb, cam, toggle);
}
exports.setCamUseShallowDofMode = setCamUseShallowDofMode;
/**
 * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
 * @param context
 * @param viewMode
 */
function setCamViewModeForContext(context, viewMode) {
    return _in(0x2a2173e4, 0x6daecd12, context, viewMode);
}
exports.setCamViewModeForContext = setCamViewModeForContext;
function setCanAdjustGroundClearance(vehicle, p1) {
    return _in(0xa7dcdf4d, 0xed40a8f4, vehicle, p1);
}
exports.setCanAdjustGroundClearance = setCanAdjustGroundClearance;
/**
 * Setting ped to true allows the ped to shoot "friendlies".
 *
 * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
 *
 * p1 = false & p2 = false for unable to aim at.
 * p1 = true & p2 = false for able to aim at.
 * @param ped
 * @param toggle
 * @param p2
 */
function setCanAttackFriendly(ped, toggle, p2) {
    return _in(0xb3b1cb34, 0x9ff9c75d, ped, toggle, p2);
}
exports.setCanAttackFriendly = setCanAttackFriendly;
/**
 * p1 always false.
 * @param entity
 * @param toggle
 */
function setCanAutoVaultOnEntity(entity, toggle) {
    return _in(0xe12abe5e, 0x3a389a6c, entity, toggle);
}
exports.setCanAutoVaultOnEntity = setCanAutoVaultOnEntity;
/**
 * p1 always false.
 * @param entity
 * @param toggle
 */
function setCanClimbOnEntity(entity, toggle) {
    return _in(0xa80ae305, 0xe0a3044f, entity, toggle);
}
exports.setCanClimbOnEntity = setCanClimbOnEntity;
function setCanDisplayMinimapDuringCutsceneThisUpdate() {
    return _in(0x21310469, 0x57f31b04);
}
exports.setCanDisplayMinimapDuringCutsceneThisUpdate = setCanDisplayMinimapDuringCutsceneThisUpdate;
/**
 * Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
 * @param ped
 * @param toggle
 */
function setCanPedSelectAllWeapons(ped, toggle) {
    return _in(0xeff29609, 0x7ff1e509, ped, toggle);
}
exports.setCanPedSelectAllWeapons = setCanPedSelectAllWeapons;
/**
 * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param toggle
 */
function setCanPedSelectInventoryWeapon(ped, weaponHash, toggle) {
    return _in(0xb4771b9a, 0xaf4e68e4, ped, _ch(weaponHash), toggle);
}
exports.setCanPedSelectInventoryWeapon = setCanPedSelectInventoryWeapon;
/**
 * Hardcoded to not work in multiplayer.
 * @param vehicle
 * @param state
 */
function setCanResprayVehicle(vehicle, state) {
    return _in(0x52bba29d, 0x5ec69356, vehicle, state);
}
exports.setCanResprayVehicle = setCanResprayVehicle;
function setCanUseHydraulics(vehicle, toggle) {
    return _in(0x1201e8a3, 0x290a3b98, vehicle, toggle);
}
exports.setCanUseHydraulics = setCanUseHydraulics;
/**
 * Initially used in Max Payne 3, that's why we know the name.
 * @param vehicle
 */
function setCarBootOpen(vehicle) {
    return _in(0xfc40cbf7, 0xb90ca77c, vehicle);
}
exports.setCarBootOpen = setCarBootOpen;
function setCarGeneratorsCanUpdateDuringCutscene(p0) {
    return _in(0xe36a98d8, 0xab3d3c66, p0);
}
exports.setCarGeneratorsCanUpdateDuringCutscene = setCarGeneratorsCanUpdateDuringCutscene;
function setCarHighSpeedBumpSeverityMultiplier(multiplier) {
    return _in(0x84fd40f5, 0x6075e816, _fv(multiplier));
}
exports.setCarHighSpeedBumpSeverityMultiplier = setCarHighSpeedBumpSeverityMultiplier;
function setCargobobExcludeFromPickupEntity(p0, p1) {
    return _in(0x1f34b062, 0x6c594380, p0, p1);
}
exports.setCargobobExcludeFromPickupEntity = setCargobobExcludeFromPickupEntity;
function setCargobobExtaPickupRange(p0, p1) {
    return _in(0x72beccf4, 0xb829522e, p0, p1);
}
exports.setCargobobExtaPickupRange = setCargobobExtaPickupRange;
/**
 * Stops cargobob from being able to detach the attached vehicle.
 * @param cargobob
 * @param toggle
 */
function setCargobobForceDontDetachVehicle(cargobob, toggle) {
    return _in(0x571feb38, 0x3f629926, cargobob, toggle);
}
exports.setCargobobForceDontDetachVehicle = setCargobobForceDontDetachVehicle;
/**
 * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
 * @param cargobob
 * @param isActive
 */
function setCargobobPickupMagnetActive(cargobob, isActive) {
    return _in(0x9a665550, 0xf8da349b, cargobob, isActive);
}
exports.setCargobobPickupMagnetActive = setCargobobPickupMagnetActive;
function setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle, p1) {
    return _in(0x56eb5e94, 0x318d3fb6, vehicle, p1);
}
exports.setCargobobPickupMagnetEnsurePickupEntityUpright = setCargobobPickupMagnetEnsurePickupEntityUpright;
function setCargobobPickupMagnetFalloff(cargobob, p1) {
    return _in(0xa17bad15, 0x3b51547e, cargobob, _fv(p1));
}
exports.setCargobobPickupMagnetFalloff = setCargobobPickupMagnetFalloff;
function setCargobobPickupMagnetPullRopeLength(vehicle, p1) {
    return _in(0x685d5561, 0x680d088b, vehicle, _fv(p1));
}
exports.setCargobobPickupMagnetPullRopeLength = setCargobobPickupMagnetPullRopeLength;
function setCargobobPickupMagnetPullStrength(cargobob, p1) {
    return _in(0xed8286f7, 0x1a819baa, cargobob, _fv(p1));
}
exports.setCargobobPickupMagnetPullStrength = setCargobobPickupMagnetPullStrength;
function setCargobobPickupMagnetReducedFalloff(cargobob, p1) {
    return _in(0x6d8eac07, 0x506291fb, cargobob, _fv(p1));
}
exports.setCargobobPickupMagnetReducedFalloff = setCargobobPickupMagnetReducedFalloff;
function setCargobobPickupMagnetReducedStrength(cargobob, p1) {
    return _in(0x66979acf, 0x5102fd2f, cargobob, _fv(p1));
}
exports.setCargobobPickupMagnetReducedStrength = setCargobobPickupMagnetReducedStrength;
function setCargobobPickupMagnetSetAmbientMode(vehicle, p1, p2) {
    return _in(0x9bddc73c, 0xc6a115d4, vehicle, p1, p2);
}
exports.setCargobobPickupMagnetSetAmbientMode = setCargobobPickupMagnetSetAmbientMode;
function setCargobobPickupMagnetSetTargetedMode(vehicle, cargobob) {
    return _in(0xe301bd63, 0xe9e13cf0, vehicle, cargobob);
}
exports.setCargobobPickupMagnetSetTargetedMode = setCargobobPickupMagnetSetTargetedMode;
function setCargobobPickupMagnetStrength(cargobob, strength) {
    return _in(0xbcbfcd9d, 0x1dac19e2, cargobob, _fv(strength));
}
exports.setCargobobPickupMagnetStrength = setCargobobPickupMagnetStrength;
function setCargobobPickupRopeDampingMultiplier(p0, p1) {
    return _in(0xcf1182f6, 0x82f65307, p0, p1);
}
exports.setCargobobPickupRopeDampingMultiplier = setCargobobPickupRopeDampingMultiplier;
function setCargobobPickupRopeType(p0, p1) {
    return _in(0x0d5f65a8, 0xf4ebdab5, p0, p1);
}
exports.setCargobobPickupRopeType = setCargobobPickupRopeType;
function setCarjackMissionRemovalParameters(p0, p1) {
    return _in(0xb9562064, 0x627ff9db, p0, p1);
}
exports.setCarjackMissionRemovalParameters = setCarjackMissionRemovalParameters;
function setCgAtBoundcenter(entity) {
    return _in(0xbe520d97, 0x61ff811f, entity);
}
exports.setCgAtBoundcenter = setCgAtBoundcenter;
function setCgoffset(entity, x, y, z) {
    return _in(0xd8fa3908, 0xd7b86904, entity, _fv(x), _fv(y), _fv(z));
}
exports.setCgoffset = setCgoffset;
/**
 * Only used in R* Script fm_content_cargo
 * @param vehicle
 * @param p1
 */
function setCheckForEnoughRoomForPed(vehicle, p1) {
    return _in(0xef9d388f, 0x8d377f44, vehicle, p1);
}
exports.setCheckForEnoughRoomForPed = setCheckForEnoughRoomForPed;
/**
 * This does not move an existing checkpoint... so wtf.
 * @param checkpoint
 * @param posX
 * @param posY
 * @param posZ
 * @param unkX
 * @param unkY
 * @param unkZ
 */
function setCheckpointClipplaneWithPosNorm(checkpoint, posX, posY, posZ, unkX, unkY, unkZ) {
    return _in(0xf51d3618, 0x5993515d, checkpoint, _fv(posX), _fv(posY), _fv(posZ), _fv(unkX), _fv(unkY), _fv(unkZ));
}
exports.setCheckpointClipplaneWithPosNorm = setCheckpointClipplaneWithPosNorm;
/**
 * Sets the cylinder height of the checkpoint.
 *
 * Parameters:
 * * nearHeight - The height of the checkpoint when inside of the radius.
 * * farHeight - The height of the checkpoint when outside of the radius.
 * * radius - The radius of the checkpoint.
 * @param checkpoint
 * @param nearHeight
 * @param farHeight
 * @param radius
 */
function setCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius) {
    return _in(0x2707aae9, 0xd9297d89, checkpoint, _fv(nearHeight), _fv(farHeight), _fv(radius));
}
exports.setCheckpointCylinderHeight = setCheckpointCylinderHeight;
/**
 * Unknown. Called after creating a checkpoint (type: 51) in the creators.
 * @param checkpoint
 */
function setCheckpointDecalRotAlignedToCameraRot(checkpoint) {
    return _in(0x615d3925, 0xe87a3b26, checkpoint);
}
exports.setCheckpointDecalRotAlignedToCameraRot = setCheckpointDecalRotAlignedToCameraRot;
function setCheckpointDirection(checkpoint, posX, posY, posZ) {
    return _in(0x3c788e7f, 0x6438754d, checkpoint, _fv(posX), _fv(posY), _fv(posZ));
}
exports.setCheckpointDirection = setCheckpointDirection;
function setCheckpointForceDirection(checkpoint) {
    return _in(0xdb1ea941, 0x1c8911ec, checkpoint);
}
exports.setCheckpointForceDirection = setCheckpointForceDirection;
function setCheckpointForceOldArrowPointing(checkpoint) {
    return _in(0xfcf6788f, 0xc4860cd4, checkpoint);
}
exports.setCheckpointForceOldArrowPointing = setCheckpointForceOldArrowPointing;
function setCheckpointInsideCylinderHeightScale(checkpoint, scale) {
    return _in(0x4b5b4da5, 0xd79f1943, checkpoint, _fv(scale));
}
exports.setCheckpointInsideCylinderHeightScale = setCheckpointInsideCylinderHeightScale;
function setCheckpointInsideCylinderScale(checkpoint, scale) {
    return _in(0x44621483, 0xff966526, checkpoint, _fv(scale));
}
exports.setCheckpointInsideCylinderScale = setCheckpointInsideCylinderScale;
/**
 * Sets the checkpoint color.
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function setCheckpointRgba(checkpoint, red, green, blue, alpha) {
    return _in(0x7167371e, 0x8ad747f7, checkpoint, red, green, blue, alpha);
}
exports.setCheckpointRgba = setCheckpointRgba;
/**
 * Sets the checkpoint icon color.
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function setCheckpointRgba2(checkpoint, red, green, blue, alpha) {
    return _in(0xb9ea4090, 0x7c680580, checkpoint, red, green, blue, alpha);
}
exports.setCheckpointRgba2 = setCheckpointRgba2;
function setCinematicButtonActive(p0) {
    return _in(0x51669f7d, 0x1fb53d9f, p0);
}
exports.setCinematicButtonActive = setCinematicButtonActive;
function setCinematicCamShakeAmplitude(p0) {
    return _in(0xc724c701, 0xc30b2fe7, _fv(p0));
}
exports.setCinematicCamShakeAmplitude = setCinematicCamShakeAmplitude;
/**
 * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
 * @param toggle
 */
function setCinematicModeActive(toggle) {
    return _in(0xdcf0754a, 0xc3d6fd4e, toggle);
}
exports.setCinematicModeActive = setCinematicModeActive;
function setCinematicNewsChannelActiveThisUpdate() {
    return _in(0xdc9da9e8, 0x789f5246);
}
exports.setCinematicNewsChannelActiveThisUpdate = setCinematicNewsChannelActiveThisUpdate;
function setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle, toggle) {
    return _in(0xb2e0c0d6, 0x922d31f2, vehicle, toggle);
}
exports.setClearFreezeWaitingOnCollisionOncePlayerEnters = setClearFreezeWaitingOnCollisionOncePlayerEnters;
function setClockDate(day, month, year) {
    return _in(0xb096419d, 0xf0d06ce7, day, month, year);
}
exports.setClockDate = setClockDate;
/**
 * SET_CLOCK_TIME(12, 34, 56);
 * @param hour
 * @param minute
 * @param second
 */
function setClockTime(hour, minute, second) {
    return _in(0x47c3b584, 0x8c3e45d8, hour, minute, second);
}
exports.setClockTime = setClockTime;
function setCloudSettingsOverride(p0) {
    return _in(0x02deaac8, 0xf8ea7fe7, _ts(p0));
}
exports.setCloudSettingsOverride = setCloudSettingsOverride;
function setCloudsAlpha(opacity) {
    return _in(0xf3619922, 0x5d6d8c86, _fv(opacity));
}
exports.setCloudsAlpha = setCloudsAlpha;
function setColourOfNextTextComponent(hudColor) {
    return _in(0x39bbf623, 0xfc803eac, hudColor);
}
exports.setColourOfNextTextComponent = setColourOfNextTextComponent;
/**
 * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
 * @param ped
 * @param combatType
 * @param p2
 */
function setCombatFloat(ped, combatType, p2) {
    return _in(0xff41b4b1, 0x41ed981c, ped, combatType, _fv(p2));
}
exports.setCombatFloat = setCombatFloat;
function setContentIdIndex(contentId, index) {
    return _in(0x4b82fa6f, 0x2d624634, _ch(contentId), index);
}
exports.setContentIdIndex = setContentIdIndex;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param red
 * @param green
 * @param blue
 */
function setControlLightEffectColor(control, red, green, blue) {
    return _in(0x8290252f, 0xff36acb5, control, red, green, blue);
}
exports.setControlLightEffectColor = setControlLightEffectColor;
/**
 * control: see IS_CONTROL_ENABLED
 * duration in milliseconds
 * frequency should range from about 10 (slow vibration) to 255 (very fast)
 *
 * example:
 * SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
 * @param control
 * @param duration
 * @param frequency
 */
function setControlShake(control, duration, frequency) {
    return _in(0x48b3886c, 0x1358d0d5, control, duration, frequency);
}
exports.setControlShake = setControlShake;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param uniqueId
 */
function setControlShakeSuppressedId(control, uniqueId) {
    return _in(0xf239400e, 0x16c23e08, control, uniqueId);
}
exports.setControlShakeSuppressedId = setControlShakeSuppressedId;
/**
 * Does nothing (it's a nullsub).
 * @param control
 * @param leftDuration
 * @param leftFrequency
 * @param rightDuration
 * @param rightFrequency
 */
function setControlTriggerShake(control, leftDuration, leftFrequency, rightDuration, rightFrequency) {
    return _in(0x14d29bb1, 0x2d47f68c, control, leftDuration, leftFrequency, rightDuration, rightFrequency);
}
exports.setControlTriggerShake = setControlTriggerShake;
/**
 * This is for simulating player input.
 * value is a float value from 0 - 1
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param value
 */
function setControlValueNextFrame(control, action, value) {
    return _in(0xe8a25867, 0xfba3b05e, control, action, _fv(value), _r);
}
exports.setControlValueNextFrame = setControlValueNextFrame;
function setConversationAudioControlledByAnim(p0) {
    return _in(0x0b568201, 0xdd99f0eb, p0);
}
exports.setConversationAudioControlledByAnim = setConversationAudioControlledByAnim;
function setConversationAudioPlaceholder(p0) {
    return _in(0x61631f5d, 0xf50d1c34, p0);
}
exports.setConversationAudioPlaceholder = setConversationAudioPlaceholder;
function setConvertibleRoof(vehicle, p1) {
    return _in(0xf39c4f53, 0x8b5124c2, vehicle, p1);
}
exports.setConvertibleRoof = setConvertibleRoof;
function setConvertibleRoofLatchState(vehicle, state) {
    return _in(0x1a78ad3d, 0x8240536f, vehicle, state);
}
exports.setConvertibleRoofLatchState = setConvertibleRoofLatchState;
function setCopBlipSprite(p0, p1) {
    return _in(0x9fcb3cbf, 0xb3ead69a, p0, _fv(p1));
}
exports.setCopBlipSprite = setCopBlipSprite;
function setCopBlipSpriteAsStandard() {
    return _in(0xb7b87352, 0x0c84c118);
}
exports.setCopBlipSpriteAsStandard = setCopBlipSpriteAsStandard;
function setCopPerceptionOverrides(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6) {
    return _in(0x2f074c90, 0x4d85129e, _fv(seeingRange), _fv(seeingRangePeripheral), _fv(hearingRange), _fv(visualFieldMinAzimuthAngle), _fv(visualFieldMaxAzimuthAngle), _fv(fieldOfGazeMaxAngle), _fv(p6));
}
exports.setCopPerceptionOverrides = setCopPerceptionOverrides;
function setCorpseRagdollFriction(ped, p1) {
    return _in(0x2735233a, 0x786b1bef, ped, _fv(p1));
}
exports.setCorpseRagdollFriction = setCorpseRagdollFriction;
function setCreateRandomCops(toggle) {
    return _in(0x102e68b2, 0x024d536d, toggle);
}
exports.setCreateRandomCops = setCreateRandomCops;
function setCreateRandomCopsNotOnScenarios(toggle) {
    return _in(0x8a498685, 0x1c4ef6e7, toggle);
}
exports.setCreateRandomCopsNotOnScenarios = setCreateRandomCopsNotOnScenarios;
function setCreateRandomCopsOnScenarios(toggle) {
    return _in(0x444cb7d7, 0xdbe6973d, toggle);
}
exports.setCreateRandomCopsOnScenarios = setCreateRandomCopsOnScenarios;
function setCreditsActive(toggle) {
    return _in(0xb938b7e6, 0xd3c0620c, toggle);
}
exports.setCreditsActive = setCreditsActive;
function setCreditsFadeOutWithScreen(toggle) {
    return _in(0xb51b9ab9, 0xef81868c, toggle);
}
exports.setCreditsFadeOutWithScreen = setCreditsFadeOutWithScreen;
/**
 * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
 *
 * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
 *
 * Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
 *
 * CLEAR  0x36A83D84
 * EXTRASUNNY  0x97AA0A79
 * CLOUDS  0x30FDAF5C
 * OVERCAST    0xBB898D2D
 * RAIN    0x54A69840
 * CLEARING    0x6DB1A50D
 * THUNDER 0xB677829F
 * SMOG    0x10DCF4B5
 * FOGGY   0xAE737644
 * XMAS    0xAAC9C895
 * SNOWLIGHT   0x23FB812B
 * BLIZZARD    0x27EA2814
 *
 *
 *
 *
 *
 *  -- [[ OLD INVALID INFO BELOW ]]
 * Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
 *
 * If an invalid hash is specified for sourceWeather, the current weather type will be used.
 * If an invalid hash is specified for targetWeather, the next weather type will be used.
 * If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
 * @param weatherType1
 * @param weatherType2
 * @param percentWeather2
 */
function setCurrWeatherState(weatherType1, weatherType2, percentWeather2) {
    return _in(0x578c7528, 0x48ecfa0c, _ch(weatherType1), _ch(weatherType2), _fv(percentWeather2));
}
exports.setCurrWeatherState = setCurrWeatherState;
/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
function setCurrentPedVehicleWeapon(ped, weaponHash) {
    return _in(0x75c55983, 0xc2c39daa, ped, _ch(weaponHash), _r);
}
exports.setCurrentPedVehicleWeapon = setCurrentPedVehicleWeapon;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param bForceInHand
 */
function setCurrentPedWeapon(ped, weaponHash, bForceInHand) {
    return _in(0xadf692b2, 0x54977c0c, ped, _ch(weaponHash), bForceInHand);
}
exports.setCurrentPedWeapon = setCurrentPedWeapon;
function setCurrentPlayerTcmodifier(modifierName) {
    return _in(0xbbf327de, 0xd94e4deb, _ts(modifierName));
}
exports.setCurrentPlayerTcmodifier = setCurrentPlayerTcmodifier;
function setCursorPosition(x, y) {
    return _in(0xfc695459, 0xd4d0e219, _fv(x), _fv(y), _r);
}
exports.setCursorPosition = setCursorPosition;
function setCustomMpHudColor(hudColorId) {
    return _in(0x2accb195, 0xf3ccd9de, hudColorId);
}
exports.setCustomMpHudColor = setCustomMpHudColor;
function setCustomPickupWeaponHash(pickupHash, pickup) {
    return _in(0x826d1ee4, 0xd1cafc78, _ch(pickupHash), pickup);
}
exports.setCustomPickupWeaponHash = setCustomPickupWeaponHash;
/**
 * Examples:
 *
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * @param radioStation
 * @param trackListName
 * @param p2
 */
function setCustomRadioTrackList(radioStation, trackListName, p2) {
    return _in(0x4e404a93, 0x61f75bb2, _ts(radioStation), _ts(trackListName), p2);
}
exports.setCustomRadioTrackList = setCustomRadioTrackList;
/**
 * All occurrences found in b617d, sorted alphabetically and identical lines removed:
 *
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param name
 */
function setCutsceneAudioOverride(name) {
    return _in(0x3b4bf5f0, 0x859204d9, _ts(name));
}
exports.setCutsceneAudioOverride = setCutsceneAudioOverride;
/**
 * Hardcoded to only work in multiplayer.
 * @param p0
 */
function setCutsceneCamFarClipThisUpdate(p0) {
    return _in(0x12ded8ca, 0x53d47ea5, _fv(p0));
}
exports.setCutsceneCamFarClipThisUpdate = setCutsceneCamFarClipThisUpdate;
function setCutsceneCanBeSkipped(p0) {
    return _in(0x41faa8fb, 0x2ece8720, p0);
}
exports.setCutsceneCanBeSkipped = setCutsceneCanBeSkipped;
function setCutsceneEntityStreamingFlags(cutsceneEntName, p1, p2) {
    return _in(0x4c61c75b, 0xee8184c2, _ts(cutsceneEntName), p1, p2);
}
exports.setCutsceneEntityStreamingFlags = setCutsceneEntityStreamingFlags;
function setCutsceneFadeValues(p0, p1, p2, p3) {
    return _in(0x8093f23a, 0xbaccc7d4, p0, p1, p2, p3);
}
exports.setCutsceneFadeValues = setCutsceneFadeValues;
function setCutsceneMultiheadFade(p0, p1, p2, p3) {
    return _in(0x20746f7b, 0x1032a3c7, p0, p1, p2, p3);
}
exports.setCutsceneMultiheadFade = setCutsceneMultiheadFade;
function setCutsceneMultiheadFadeManual(p0) {
    return _in(0x06ee9048, 0xfd080382, p0);
}
exports.setCutsceneMultiheadFadeManual = setCutsceneMultiheadFadeManual;
/**
 * p3 could be heading. Needs more research.
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
function setCutsceneOrigin(x, y, z, p3, p4) {
    return _in(0xb812b3fd, 0x1c01cf27, _fv(x), _fv(y), _fv(z), _fv(p3), p4);
}
exports.setCutsceneOrigin = setCutsceneOrigin;
function setCutsceneOriginAndOrientation(x1, y1, z1, x2, y2, z2, p6) {
    return _in(0x011883f4, 0x1211432a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6);
}
exports.setCutsceneOriginAndOrientation = setCutsceneOriginAndOrientation;
/**
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
function setCutscenePedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) {
    return _in(0xba01e7b6, 0xdeefbbc9, _ts(cutsceneEntName), componentId, drawableId, textureId, _ch(modelHash));
}
exports.setCutscenePedComponentVariation = setCutscenePedComponentVariation;
function setCutscenePedComponentVariationFromPed(cutsceneEntName, ped, modelHash) {
    return _in(0x2a56c06e, 0xbef2b0d9, _ts(cutsceneEntName), ped, _ch(modelHash));
}
exports.setCutscenePedComponentVariationFromPed = setCutscenePedComponentVariationFromPed;
/**
 * Thanks R*! ;)
 *
 * if ((l_161 == 0) || (l_161 == 2)) {
 * sub_2ea27("Trying to set Jimmy prop variation");
 * CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);
 * }
 *
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
function setCutscenePedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) {
    return _in(0x0546524a, 0xde2e9723, _ts(cutsceneEntName), componentId, drawableId, textureId, _ch(modelHash));
}
exports.setCutscenePedPropVariation = setCutscenePedPropVariation;
/**
 * Only used twice in R* scripts
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function setCutsceneTriggerArea(x1, y1, z1, x2, y2, z2) {
    return _in(0x9896ce47, 0x21be84ba, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2));
}
exports.setCutsceneTriggerArea = setCutsceneTriggerArea;
/**
 * Requires a component_at_*_flsh to be attached to the weapon object
 * @param object
 * @param toggle
 */
function setCutscenesWeaponFlashlightOnThisFrame(object, toggle) {
    return _in(0xbce59537, 0x1a5fbaaf, object, toggle);
}
exports.setCutscenesWeaponFlashlightOnThisFrame = setCutscenesWeaponFlashlightOnThisFrame;
function setDamping(entity, vertex, value) {
    return _in(0xeea3b200, 0xa6feb65b, entity, vertex, _fv(value));
}
exports.setDamping = setDamping;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param enabled
 */
function setDebugLinesAndSpheresDrawingActive(enabled) {
    return _in(0x175b6bfc, 0x15cdd0c5, enabled);
}
exports.setDebugLinesAndSpheresDrawingActive = setDebugLinesAndSpheresDrawingActive;
function setDecalBulletImpactRangeScale(p0) {
    return _in(0x46d1a61a, 0x21f566fc, _fv(p0));
}
exports.setDecalBulletImpactRangeScale = setDecalBulletImpactRangeScale;
function setDecisionMaker(ped, name) {
    return _in(0xb604a294, 0x2aded0ee, ped, _ch(name));
}
exports.setDecisionMaker = setDecisionMaker;
/**
 * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
 *
 * Works only ~200 meters around the player.
 * @param intensity
 */
function setDeepOceanScaler(intensity) {
    return _in(0xb96b00e9, 0x76be977f, _fv(intensity));
}
exports.setDeepOceanScaler = setDeepOceanScaler;
/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * @param vehicle
 * @param deploy
 * @param p2
 */
function setDeployFoldingWings(vehicle, deploy, p2) {
    return _in(0xb251e0b3, 0x3e58b424, vehicle, deploy, p2);
}
exports.setDeployFoldingWings = setDeployFoldingWings;
function setDeployMissileBays(vehicle, deploy) {
    return _in(0x0c024688, 0x29e4aa65, vehicle, deploy);
}
exports.setDeployMissileBays = setDeployMissileBays;
function setDepthwriting(toggle) {
    return _in(0xc5c8f970, 0xd4edff71, toggle);
}
exports.setDepthwriting = setDepthwriting;
function setDescriptionForUgcMissionEightStrings(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x817b8610, 0x8eb94e51, p0, _ts(p1), _ts(p2), _ts(p3), _ts(p4), _ts(p5), _ts(p6), _ts(p7), _ts(p8));
}
exports.setDescriptionForUgcMissionEightStrings = setDescriptionForUgcMissionEightStrings;
function setDipStraightDownWhenCrashingPlane(vehicle, toggle) {
    return _in(0xaa653ae6, 0x1924b0a0, vehicle, toggle);
}
exports.setDipStraightDownWhenCrashingPlane = setDipStraightDownWhenCrashingPlane;
function setDirectorModeAvailable(toggle) {
    return _in(0x04655f9d, 0x075d0ae5, toggle);
}
exports.setDirectorModeAvailable = setDirectorModeAvailable;
function setDirectorModeLaunchedByScript() {
    return _in(0x2632482f, 0xd6b9ab87);
}
exports.setDirectorModeLaunchedByScript = setDirectorModeLaunchedByScript;
function setDisableAmbientMeleeMove(player, toggle) {
    return _in(0x2e8aabfa, 0x40a84f8c, player, toggle);
}
exports.setDisableAmbientMeleeMove = setDisableAmbientMeleeMove;
/**
 * Sets a flag on heli and another vehicle type.
 * @param vehicle
 * @param toggle
 */
function setDisableAutomaticCrashTask(vehicle, toggle) {
    return _in(0x97841634, 0xef7df1d6, vehicle, toggle);
}
exports.setDisableAutomaticCrashTask = setDisableAutomaticCrashTask;
function setDisableBmxExtraTrickForces(p0) {
    return _in(0x26d99d5a, 0x82fd18e8, p0);
}
exports.setDisableBmxExtraTrickForces = setDisableBmxExtraTrickForces;
function setDisableBreaking(object, toggle) {
    return _in(0x5cec1a84, 0x620e7d5b, object, toggle);
}
exports.setDisableBreaking = setDisableBreaking;
function setDisableCollisionsBetweenCarsAndCarParachute(p0) {
    return _in(0x8caab2bd, 0x3ea58bd4, p0);
}
exports.setDisableCollisionsBetweenCarsAndCarParachute = setDisableCollisionsBetweenCarsAndCarParachute;
function setDisableDamageWithPickedUpEntity(p0, p1) {
    return _in(0xd4196117, 0xaf7bb974, p0, p1, _r);
}
exports.setDisableDamageWithPickedUpEntity = setDisableDamageWithPickedUpEntity;
function setDisableDecalRenderingThisFrame() {
    return _in(0x4b5cfc83, 0x122df602);
}
exports.setDisableDecalRenderingThisFrame = setDisableDecalRenderingThisFrame;
function setDisableExplodeFromBodyDamageOnCollision(vehicle, value) {
    return _in(0x26e13d44, 0x0e7f6064, vehicle, _fv(value));
}
exports.setDisableExplodeFromBodyDamageOnCollision = setDisableExplodeFromBodyDamageOnCollision;
function setDisableFragDamage(object, toggle) {
    return _in(0x01ba3aed, 0x21c16cfb, object, toggle);
}
exports.setDisableFragDamage = setDisableFragDamage;
function setDisableHeliExplodeFromBodyDamage(p0, p1) {
    return _in(0xedbc8405, 0xb3895cc9, p0, p1);
}
exports.setDisableHeliExplodeFromBodyDamage = setDisableHeliExplodeFromBodyDamage;
function setDisableHighFallDeath(ped, toggle) {
    return _in(0x71179445, 0x3cfd692b, ped, toggle);
}
exports.setDisableHighFallDeath = setDisableHighFallDeath;
/**
 * Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
 * For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
 * For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
 * But for opressor 2 you still can fly if you somehow get back in the air.
 * @param vehicle
 * @param toggle
 */
function setDisableHoverModeFlight(vehicle, toggle) {
    return _in(0x2d55fe37, 0x4d5fdb91, vehicle, toggle);
}
exports.setDisableHoverModeFlight = setDisableHoverModeFlight;
/**
 * Disables collision for this vehicle (maybe it also supports other entities, not sure).
 * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
 * Example: https://streamable.com/6n45d5
 * Not sure if there is a native (and if so, which one) that resets the collisions.
 * @param vehicle
 */
function setDisableMapCollision(vehicle) {
    return _in(0x75627043, 0xc6aa90ad, vehicle);
}
exports.setDisableMapCollision = setDisableMapCollision;
function setDisablePedMapCollision(ped) {
    return _in(0xdfe68c4b, 0x787e1bfb, ped);
}
exports.setDisablePedMapCollision = setDisablePedMapCollision;
function setDisablePedStandOnTop(vehicle, toggle) {
    return _in(0x8235f1be, 0xad557629, vehicle, toggle);
}
exports.setDisablePedStandOnTop = setDisablePedStandOnTop;
function setDisablePetrolDecalsIgnitingThisFrame() {
    return _in(0xd9454b57, 0x52c857dc);
}
exports.setDisablePetrolDecalsIgnitingThisFrame = setDisablePetrolDecalsIgnitingThisFrame;
function setDisablePetrolDecalsRecyclingThisFrame() {
    return _in(0x27cfb1b1, 0xe078cb2d);
}
exports.setDisablePetrolDecalsRecyclingThisFrame = setDisablePetrolDecalsRecyclingThisFrame;
function setDisablePretendOccupants(vehicle, toggle) {
    return _in(0x25367de4, 0x9d64cf16, vehicle, toggle);
}
exports.setDisablePretendOccupants = setDisablePretendOccupants;
function setDisableRandomTrainsThisFrame(toggle) {
    return _in(0xd4b8e3d1, 0x917bc86b, toggle);
}
exports.setDisableRandomTrainsThisFrame = setDisableRandomTrainsThisFrame;
function setDisableRetractingWeaponBlades(toggle) {
    return _in(0x8f0d5ba1, 0xc2cc91d7, toggle);
}
exports.setDisableRetractingWeaponBlades = setDisableRetractingWeaponBlades;
function setDisableSuperdummy(vehicle, p1) {
    return _in(0xb088e9a4, 0x7ae6edd5, vehicle, p1);
}
exports.setDisableSuperdummy = setDisableSuperdummy;
/**
 * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
 * @param vehicle
 * @param turretId
 */
function setDisableTurretMovement(vehicle, turretId) {
    return _in(0xe615bb7a, 0x7752c76a, vehicle, turretId);
}
exports.setDisableTurretMovement = setDisableTurretMovement;
function setDisableVehicleEngineFires(vehicle, toggle) {
    return _in(0x91a0bd63, 0x5321f145, vehicle, toggle);
}
exports.setDisableVehicleEngineFires = setDisableVehicleEngineFires;
function setDisableVehicleExplosionsDamage(toggle) {
    return _in(0x143921e4, 0x5ec44d62, toggle);
}
exports.setDisableVehicleExplosionsDamage = setDisableVehicleExplosionsDamage;
function setDisableVehiclePetrolTankDamage(vehicle, toggle) {
    return _in(0x37c8252a, 0x7c92d017, vehicle, toggle);
}
exports.setDisableVehiclePetrolTankDamage = setDisableVehiclePetrolTankDamage;
function setDisableVehiclePetrolTankFires(vehicle, toggle) {
    return _in(0x465bf26a, 0xb9684352, vehicle, toggle);
}
exports.setDisableVehiclePetrolTankFires = setDisableVehiclePetrolTankFires;
/**
 * True stops vtols from switching modes. Doesn't stop the sound though.
 * @param vehicle
 * @param toggle
 */
function setDisableVerticalFlightModeTransition(vehicle, toggle) {
    return _in(0xce2b4377, 0x0b655f8f, vehicle, toggle);
}
exports.setDisableVerticalFlightModeTransition = setDisableVerticalFlightModeTransition;
function setDisableWantedConesResponse(vehicle, toggle) {
    return _in(0x4ad280eb, 0x48b2d8e6, vehicle, toggle);
}
exports.setDisableWantedConesResponse = setDisableWantedConesResponse;
/**
 * Sets some global vehicle related bool
 * @param toggle
 */
function setDisableWeaponBladeForces(toggle) {
    return _in(0x211e95ce, 0x9903940c, toggle);
}
exports.setDisableWeaponBladeForces = setDisableWeaponBladeForces;
function setDispatchCopsForPlayer(player, toggle) {
    return _in(0xdb172424, 0x876553f4, player, toggle);
}
exports.setDispatchCopsForPlayer = setDispatchCopsForPlayer;
function setDispatchIdealSpawnDistance(distance) {
    return _in(0x6fe601a6, 0x4180d423, _fv(distance));
}
exports.setDispatchIdealSpawnDistance = setDispatchIdealSpawnDistance;
function setDispatchSpawnLocation(x, y, z) {
    return _in(0xd10f4420, 0x36302d50, _fv(x), _fv(y), _fv(z));
}
exports.setDispatchSpawnLocation = setDispatchSpawnLocation;
function setDispatchTimeBetweenSpawnAttempts(p0, p1) {
    return _in(0x44f7cbc1, 0xbeb3327d, p0, _fv(p1));
}
exports.setDispatchTimeBetweenSpawnAttempts = setDispatchTimeBetweenSpawnAttempts;
function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1) {
    return _in(0x48838ed9, 0x937a15d1, p0, _fv(p1));
}
exports.setDispatchTimeBetweenSpawnAttemptsMultiplier = setDispatchTimeBetweenSpawnAttemptsMultiplier;
function setDistanceBlurStrengthOverride(p0) {
    return _in(0xe2892e7e, 0x55d7073a, _fv(p0));
}
exports.setDistanceBlurStrengthOverride = setDistanceBlurStrengthOverride;
/**
 * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
 * @param toggle
 */
function setDistantCarsEnabled(toggle) {
    return _in(0xf796359a, 0x959df65d, toggle);
}
exports.setDistantCarsEnabled = setDistantCarsEnabled;
/**
 * This is a NOP function. It does nothing at all.
 * @param toggle
 */
function setDitchPoliceModels(toggle) {
    return _in(0x42cbe544, 0x62d92634, toggle);
}
exports.setDitchPoliceModels = setDitchPoliceModels;
function setDontAllowPlayerToEnterVehicleIfLockedForPlayer(vehicle, p1) {
    return _in(0xdbc631f1, 0x09350b8c, vehicle, p1);
}
exports.setDontAllowPlayerToEnterVehicleIfLockedForPlayer = setDontAllowPlayerToEnterVehicleIfLockedForPlayer;
/**
 * R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
 * @param vehicle
 * @param toggle
 */
function setDontProcessVehicleGlass(vehicle, toggle) {
    return _in(0x1087bc8e, 0xc540daeb, vehicle, toggle);
}
exports.setDontProcessVehicleGlass = setDontProcessVehicleGlass;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param isBreakable
 */
function setDoorAllowedToBeBrokenOff(vehicle, doorId, isBreakable) {
    return _in(0x2fa133a4, 0xa9d37ed8, vehicle, doorId, isBreakable);
}
exports.setDoorAllowedToBeBrokenOff = setDoorAllowedToBeBrokenOff;
/**
 * Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
 * From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
 *
 * Example in C#:
 * Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
 * Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
 * Function.Call(Hash.CLEAR_DRAW_ORIGIN);
 *
 * Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
 * If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
 *
 * This function also effects the drawing of texts and other UI-elements.
 * The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
 * @param x
 * @param y
 * @param z
 * @param p3
 */
function setDrawOrigin(x, y, z, p3) {
    return _in(0xaa0008f3, 0xbbb8f416, _fv(x), _fv(y), _fv(z), p3);
}
exports.setDrawOrigin = setDrawOrigin;
function setDriftTyres(vehicle, toggle) {
    return _in(0x5ac79c98, 0xc5c17f05, vehicle, toggle);
}
exports.setDriftTyres = setDriftTyres;
/**
 * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
 * @param object
 * @param toggle
 * @param p2
 */
function setDriveArticulatedJoint(object, toggle, p2) {
    return _in(0x91102444, 0x2f4898f0, object, toggle, p2);
}
exports.setDriveArticulatedJoint = setDriveArticulatedJoint;
function setDriveArticulatedJointWithInflictor(object, toggle, p2, ped) {
    return _in(0xb20834a7, 0xdd3d8896, object, toggle, p2, ped);
}
exports.setDriveArticulatedJointWithInflictor = setDriveArticulatedJointWithInflictor;
function setDriveTaskCruiseSpeed(driver, cruiseSpeed) {
    return _in(0x5c9b84bd, 0x7d31d908, driver, _fv(cruiseSpeed));
}
exports.setDriveTaskCruiseSpeed = setDriveTaskCruiseSpeed;
/**
 * This native is used to set the driving style for specific ped.
 *
 * Driving styles id seems to be:
 * 786468
 * 262144
 * 786469
 *
 * http://gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param drivingStyle
 */
function setDriveTaskDrivingStyle(ped, drivingStyle) {
    return _in(0xdace1be3, 0x7d88af67, ped, drivingStyle);
}
exports.setDriveTaskDrivingStyle = setDriveTaskDrivingStyle;
function setDriveTaskMaxCruiseSpeed(ped, speed) {
    return _in(0x404a5aa9, 0xb9f0b746, ped, _fv(speed));
}
exports.setDriveTaskMaxCruiseSpeed = setDriveTaskMaxCruiseSpeed;
/**
 * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 */
function setDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, x, y, z) {
    return _in(0xe5b30211, 0x4d8162ee, shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z));
}
exports.setDrivebyTaskTarget = setDrivebyTaskTarget;
/**
 * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
 * @param driver
 * @param ability
 */
function setDriverAbility(driver, ability) {
    return _in(0xb195ffa8, 0x042fc5c3, driver, _fv(ability));
}
exports.setDriverAbility = setDriverAbility;
/**
 * range 0.0f - 1.0f
 * @param driver
 * @param aggressiveness
 */
function setDriverAggressiveness(driver, aggressiveness) {
    return _in(0xa731f608, 0xca104e3c, driver, _fv(aggressiveness));
}
exports.setDriverAggressiveness = setDriverAggressiveness;
/**
 * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
 * @param driver
 * @param modifier
 */
function setDriverRacingModifier(driver, modifier) {
    return _in(0xded5af5a, 0x0ea4b297, driver, _fv(modifier));
}
exports.setDriverRacingModifier = setDriverRacingModifier;
/**
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param radioStation
 * @param p2
 */
function setEmitterRadioStation(emitterName, radioStation, p2) {
    return _in(0xacf57305, 0xb12af907, _ts(emitterName), _ts(radioStation), p2);
}
exports.setEmitterRadioStation = setEmitterRadioStation;
/**
 * Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
 * @param ped
 * @param toggle
 */
function setEnableBoundAnkles(ped, toggle) {
    return _in(0xc52e0f85, 0x5c58fc2e, ped, toggle);
}
exports.setEnableBoundAnkles = setEnableBoundAnkles;
/**
 * ped can not pull out a weapon when true
 * @param ped
 * @param toggle
 */
function setEnableHandcuffs(ped, toggle) {
    return _in(0xdf1af8b5, 0xd56542fa, ped, toggle);
}
exports.setEnableHandcuffs = setEnableHandcuffs;
function setEnablePedEnveffScale(ped, toggle) {
    return _in(0xd2c5aa0c, 0x0e8d0f1e, ped, toggle);
}
exports.setEnablePedEnveffScale = setEnablePedEnveffScale;
/**
 * Enables diving motion when underwater.
 * @param ped
 * @param toggle
 */
function setEnableScuba(ped, toggle) {
    return _in(0xf99f6200, 0x4024d506, ped, toggle);
}
exports.setEnableScuba = setEnableScuba;
/**
 * Enable/Disables global slipstream physics
 * @param toggle
 */
function setEnableVehicleSlipstreaming(toggle) {
    return _in(0xe6c0c80b, 0x8c867537, toggle);
}
exports.setEnableVehicleSlipstreaming = setEnableVehicleSlipstreaming;
/**
 * skin - everything alpha except skin
 * Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
 * @param entity
 * @param alphaLevel
 * @param skin
 */
function setEntityAlpha(entity, alphaLevel, skin) {
    return _in(0x44a0870b, 0x7e92d7c0, entity, alphaLevel, skin);
}
exports.setEntityAlpha = setEntityAlpha;
function setEntityAlwaysPrerender(entity, toggle) {
    return _in(0xacad101e, 0x1fb66689, entity, toggle);
}
exports.setEntityAlwaysPrerender = setEntityAlwaysPrerender;
function setEntityAngularVelocity(entity, x, y, z) {
    return _in(0x83396434, 0x99d1222e, entity, _fv(x), _fv(y), _fv(z));
}
exports.setEntityAngularVelocity = setEntityAngularVelocity;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animName
 * @param time
 */
function setEntityAnimCurrentTime(entity, animDictionary, animName, time) {
    return _in(0x4487c259, 0xf0f70977, entity, _ts(animDictionary), _ts(animName), _fv(time));
}
exports.setEntityAnimCurrentTime = setEntityAnimCurrentTime;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animName
 * @param speedMultiplier
 */
function setEntityAnimSpeed(entity, animDictionary, animName, speedMultiplier) {
    return _in(0x28d1a165, 0x53c51776, entity, _ts(animDictionary), _ts(animName), _fv(speedMultiplier));
}
exports.setEntityAnimSpeed = setEntityAnimSpeed;
/**
 * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
 *
 * p1 has no effect when either its on or off
 * maybe a quick disassembly will tell us what it does
 *
 * p2 has no effect when either its on or off
 * maybe a quick disassembly will tell us what it does
 * @param entity
 * @param p1
 * @param p2
 */
function setEntityAsMissionEntity(entity, p1, p2) {
    return _in(0xad738c30, 0x85fe7e11, entity, p1, p2);
}
exports.setEntityAsMissionEntity = setEntityAsMissionEntity;
/**
 * Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
 * If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
 * Entities marked as no longer needed, will be deleted as the engine sees fit.
 * Use this if you just want to just let the game delete the ped:
 * void MarkPedAsAmbientPed(Ped ped) {
 * auto addr = getScriptHandleBaseAddress(ped);
 *
 * if (!addr) {
 * return;
 * }
 *
 * //the game uses only lower 4 bits as entity population type
 * BYTE origValue = *(BYTE *)(addr + 0xDA);
 * *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
 * }
 * @param entity
 */
function setEntityAsNoLongerNeeded(entity) {
    return _in(0xb736a491, 0xe64a32cf, _ii(entity));
}
exports.setEntityAsNoLongerNeeded = setEntityAsNoLongerNeeded;
function setEntityCanBeDamaged(entity, toggle) {
    return _in(0x1760ffa8, 0xab074d66, entity, toggle);
}
exports.setEntityCanBeDamaged = setEntityCanBeDamaged;
function setEntityCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup) {
    return _in(0xe22d8fde, 0x858b8119, entity, bCanBeDamaged, relGroup);
}
exports.setEntityCanBeDamagedByRelationshipGroup = setEntityCanBeDamagedByRelationshipGroup;
/**
 * Sets whether the entity can be targeted without being in line-of-sight.
 * @param entity
 * @param toggle
 */
function setEntityCanBeTargetedWithoutLos(entity, toggle) {
    return _in(0xd3997889, 0x736fd899, entity, toggle);
}
exports.setEntityCanBeTargetedWithoutLos = setEntityCanBeTargetedWithoutLos;
function setEntityCanOnlyBeDamagedByEntity(entity1, entity2) {
    return _in(0xb17bc645, 0x3f6cf5ac, entity1, entity2);
}
exports.setEntityCanOnlyBeDamagedByEntity = setEntityCanOnlyBeDamagedByEntity;
function setEntityCanOnlyBeDamagedByScriptParticipants(entity, toggle) {
    return _in(0x352e2b5c, 0xf420bf3b, entity, toggle);
}
exports.setEntityCanOnlyBeDamagedByScriptParticipants = setEntityCanOnlyBeDamagedByScriptParticipants;
function setEntityCantCauseCollisionDamagedEntity(entity1, entity2) {
    return _in(0x68b562e1, 0x24cc0aef, entity1, entity2);
}
exports.setEntityCantCauseCollisionDamagedEntity = setEntityCantCauseCollisionDamagedEntity;
function setEntityCollision(entity, toggle, keepPhysics) {
    return _in(0x1a9205c1, 0xb9ee827f, entity, toggle, keepPhysics);
}
exports.setEntityCollision = setEntityCollision;
function setEntityCompletelyDisableCollision(entity, toggle, keepPhysics) {
    return _in(0x9ebc85ed, 0x0fffe51c, entity, toggle, keepPhysics);
}
exports.setEntityCompletelyDisableCollision = setEntityCompletelyDisableCollision;
/**
 * p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
 *
 * Often ends with 1, 0, 0, 1); in the scripts. It works.
 *
 * Axis - Invert Axis Flags
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param clearArea
 */
function setEntityCoords(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
    return _in(0x06843da7, 0x060a026b, entity, _fv(xPos), _fv(yPos), _fv(zPos), xAxis, yAxis, zAxis, clearArea);
}
exports.setEntityCoords = setEntityCoords;
/**
 * Axis - Invert Axis Flags
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
function setEntityCoordsNoOffset(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis) {
    return _in(0x239a3351, 0xac1da385, entity, _fv(xPos), _fv(yPos), _fv(zPos), xAxis, yAxis, zAxis);
}
exports.setEntityCoordsNoOffset = setEntityCoordsNoOffset;
function setEntityCoordsWithoutPlantsReset(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    return _in(0x621873ec, 0xe1178967, entity, _fv(xPos), _fv(yPos), _fv(zPos), alive, deadFlag, ragdollFlag, clearArea);
}
exports.setEntityCoordsWithoutPlantsReset = setEntityCoordsWithoutPlantsReset;
function setEntityDynamic(entity, toggle) {
    return _in(0x1718de8e, 0x3f2823ca, entity, toggle);
}
exports.setEntityDynamic = setEntityDynamic;
function setEntityFlagRenderSmallShadow(object, toggle) {
    return _in(0xb2d0bde5, 0x4f0e8e5a, object, toggle);
}
exports.setEntityFlagRenderSmallShadow = setEntityFlagRenderSmallShadow;
/**
 * Sets entity+38 to C (when false) or 0xFF3f (when true)
 * @param entity
 * @param toggle
 */
function setEntityFlagSuppressShadow(entity, toggle) {
    return _in(0xd05a3241, 0xb9a86f19, entity, toggle);
}
exports.setEntityFlagSuppressShadow = setEntityFlagSuppressShadow;
function setEntityForNullConvPed(p0, entity) {
    return _in(0x892b6ab8, 0xf33606f5, p0, entity);
}
exports.setEntityForNullConvPed = setEntityForNullConvPed;
function setEntityGhostedForGhostPlayers(entity, toggle) {
    return _in(0x4ba16607, 0x9d658ed4, entity, toggle);
}
exports.setEntityGhostedForGhostPlayers = setEntityGhostedForGhostPlayers;
function setEntityHasGravity(entity, toggle) {
    return _in(0x4a472244, 0x8f18eef5, entity, toggle);
}
exports.setEntityHasGravity = setEntityHasGravity;
/**
 * Set the heading of an entity in degrees also known as "Yaw".
 * @param entity
 * @param heading
 */
function setEntityHeading(entity, heading) {
    return _in(0x8e2530aa, 0x8ada980e, entity, _fv(heading));
}
exports.setEntityHeading = setEntityHeading;
/**
 * health >= 0
 * male ped ~= 100 - 200
 * female ped ~= 0 - 100
 * @param entity
 * @param health
 * @param p2
 */
function setEntityHealth(entity, health, p2) {
    return _in(0x6b76dc1f, 0x3ae6e6a3, entity, health, p2);
}
exports.setEntityHealth = setEntityHealth;
function setEntityIconColor(entity, red, green, blue, alpha) {
    return _in(0x1d5f595c, 0xcae2e238, entity, red, green, blue, alpha);
}
exports.setEntityIconColor = setEntityIconColor;
function setEntityIconVisibility(entity, toggle) {
    return _in(0xe0e8beec, 0xca96ba31, entity, toggle);
}
exports.setEntityIconVisibility = setEntityIconVisibility;
/**
 * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
 *
 * If you use this for a ped and you want Ragdoll to stay enabled, then do:
 * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
 *
 * Use this if you want to get the invincibility status:
 * bool IsPedInvincible(Ped ped)
 * {
 * auto addr = getScriptHandleBaseAddress(ped);
 *
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 *
 * return false;
 * }
 * @param entity
 * @param toggle
 */
function setEntityInvincible(entity, toggle) {
    return _in(0x3882114b, 0xde571ad4, entity, toggle);
}
exports.setEntityInvincible = setEntityInvincible;
function setEntityIsInVehicle(entity) {
    return _in(0x78e8e3a6, 0x40178255, entity);
}
exports.setEntityIsInVehicle = setEntityIsInVehicle;
function setEntityIsTargetPriority(entity, p1, p2) {
    return _in(0xea02e132, 0xf5c68722, entity, p1, _fv(p2));
}
exports.setEntityIsTargetPriority = setEntityIsTargetPriority;
function setEntityLights(entity, toggle) {
    return _in(0x7cfba6a8, 0x0bdf3874, entity, toggle);
}
exports.setEntityLights = setEntityLights;
/**
 * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
 * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
 * @param entity
 * @param toggle
 * @param p2
 */
function setEntityLoadCollisionFlag(entity, toggle, p2) {
    return _in(0x0dc7caba, 0xb1e9b67e, entity, toggle, p2);
}
exports.setEntityLoadCollisionFlag = setEntityLoadCollisionFlag;
/**
 * Makes the provided entity visible for yourself for the current frame.
 * @param entity
 */
function setEntityLocallyInvisible(entity) {
    return _in(0xe135a9ff, 0x3f5d05d8, entity);
}
exports.setEntityLocallyInvisible = setEntityLocallyInvisible;
function setEntityLocallyVisible(entity) {
    return _in(0x241e289b, 0x5c059edc, entity);
}
exports.setEntityLocallyVisible = setEntityLocallyVisible;
/**
 * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
 * @param entity
 * @param value
 */
function setEntityLodDist(entity, value) {
    return _in(0x5927f96a, 0x78577363, entity, value);
}
exports.setEntityLodDist = setEntityLodDist;
/**
 * For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
 * @param entity
 * @param value
 */
function setEntityMaxHealth(entity, value) {
    return _in(0x166e7cf6, 0x8597d8b5, entity, value);
}
exports.setEntityMaxHealth = setEntityMaxHealth;
function setEntityMaxSpeed(entity, speed) {
    return _in(0x0e46a3fc, 0xbde2a1b1, entity, _fv(speed));
}
exports.setEntityMaxSpeed = setEntityMaxSpeed;
function setEntityMirrorReflectionFlag(entity, p1) {
    return _in(0xe66377cd, 0xdada4810, entity, p1);
}
exports.setEntityMirrorReflectionFlag = setEntityMirrorReflectionFlag;
function setEntityMotionBlur(entity, toggle) {
    return _in(0x295d82a8, 0x559f9150, entity, toggle);
}
exports.setEntityMotionBlur = setEntityMotionBlur;
/**
 * Calling this function disables collision between two entities.
 * The importance of the order for entity1 and entity2 is unclear.
 * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
 * @param entity1
 * @param entity2
 * @param thisFrameOnly
 */
function setEntityNoCollisionEntity(entity1, entity2, thisFrameOnly) {
    return _in(0xa53ed552, 0x0c07654a, entity1, entity2, thisFrameOnly);
}
exports.setEntityNoCollisionEntity = setEntityNoCollisionEntity;
function setEntityNoweapondecals(entity, p1) {
    return _in(0x2c2e3dc1, 0x28f44309, entity, p1);
}
exports.setEntityNoweapondecals = setEntityNoweapondecals;
function setEntityOnlyDamagedByPlayer(entity, toggle) {
    return _in(0x79f020ff, 0x9edc0748, entity, toggle);
}
exports.setEntityOnlyDamagedByPlayer = setEntityOnlyDamagedByPlayer;
function setEntityOnlyDamagedByRelationshipGroup(entity, p1, p2) {
    return _in(0x7022bd82, 0x8fa0b082, entity, p1, p2);
}
exports.setEntityOnlyDamagedByRelationshipGroup = setEntityOnlyDamagedByRelationshipGroup;
/**
 * Enable / disable each type of damage.
 *
 * waterProof is damage related to water not drowning
 * --------------
 * p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);
 *
 * @param entity
 * @param bulletProof
 * @param fireProof
 * @param explosionProof
 * @param collisionProof
 * @param meleeProof
 * @param steamProof
 * @param p7
 * @param waterProof
 */
function setEntityProofs(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof) {
    return _in(0xfaee099c, 0x6f890bb8, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof);
}
exports.setEntityProofs = setEntityProofs;
/**
 * w is the correct parameter name!
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
function setEntityQuaternion(entity, x, y, z, w) {
    return _in(0x77b21be7, 0xac540f07, entity, _fv(x), _fv(y), _fv(z), _fv(w));
}
exports.setEntityQuaternion = setEntityQuaternion;
function setEntityRecordsCollisions(entity, toggle) {
    return _in(0x0a50a1ee, 0xdad01e65, entity, toggle);
}
exports.setEntityRecordsCollisions = setEntityRecordsCollisions;
function setEntityRenderScorched(entity, toggle) {
    return _in(0x730f5f8d, 0x3f0f2050, entity, toggle);
}
exports.setEntityRenderScorched = setEntityRenderScorched;
function setEntityRequiresMoreExpensiveRiverCheck(entity, toggle) {
    return _in(0x694e0013, 0x2f2823ed, entity, toggle);
}
exports.setEntityRequiresMoreExpensiveRiverCheck = setEntityRequiresMoreExpensiveRiverCheck;
/**
 * rotationOrder refers to the order yaw pitch roll is applied
 * value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
 * Unsure what value corresponds to what rotation order, more testing will be needed for that.
 * For the most part R* uses 1 or 2 as the order.
 * p5 is usually set as true
 *
 * @param entity
 * @param pitch
 * @param roll
 * @param yaw
 * @param rotationOrder
 * @param p5
 */
function setEntityRotation(entity, pitch, roll, yaw, rotationOrder, p5) {
    return _in(0x8524a8b0, 0x171d5e07, entity, _fv(pitch), _fv(roll), _fv(yaw), rotationOrder, p5);
}
exports.setEntityRotation = setEntityRotation;
/**
 * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
 *
 * "Allow Freeze If No Collision"
 * @param entity
 * @param toggle
 */
function setEntityShouldFreezeWaitingOnCollision(entity, toggle) {
    return _in(0x3910051c, 0xcecdb00c, entity, toggle);
}
exports.setEntityShouldFreezeWaitingOnCollision = setEntityShouldFreezeWaitingOnCollision;
/**
 * Only called once in the scripts.
 *
 * Related to weapon objects.
 *
 * @param entity
 * @param p1
 */
function setEntitySortBias(entity, p1) {
    return _in(0x5c3b791d, 0x580e0bc2, entity, _fv(p1));
}
exports.setEntitySortBias = setEntitySortBias;
/**
 * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
 *
 * 0 = green
 * 1 = red
 * 2 = yellow
 * 3 = reset changes
 * changing lights may not change the behavior of vehicles
 * @param entity
 * @param state
 */
function setEntityTrafficlightOverride(entity, state) {
    return _in(0x57c5db65, 0x6185eac4, entity, state);
}
exports.setEntityTrafficlightOverride = setEntityTrafficlightOverride;
function setEntityUseMaxDistanceForWaterReflection(entity, p1) {
    return _in(0x1a092bb0, 0xc3808b96, entity, p1);
}
exports.setEntityUseMaxDistanceForWaterReflection = setEntityUseMaxDistanceForWaterReflection;
/**
 * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
 * @param entity
 * @param x
 * @param y
 * @param z
 */
function setEntityVelocity(entity, x, y, z) {
    return _in(0x1c99bb7b, 0x6e96d16f, entity, _fv(x), _fv(y), _fv(z));
}
exports.setEntityVelocity = setEntityVelocity;
/**
 * p2 is always 0.
 * @param entity
 * @param toggle
 * @param p2
 */
function setEntityVisible(entity, toggle, p2) {
    return _in(0xea1c610a, 0x04db6bbb, entity, toggle, p2);
}
exports.setEntityVisible = setEntityVisible;
function setEntityVisibleInCutscene(p0, p1, p2) {
    return _in(0xe0031d3c, 0x8f36ab82, p0, p1, p2);
}
exports.setEntityVisibleInCutscene = setEntityVisibleInCutscene;
function setEntityWaterReflectionFlag(entity, toggle) {
    return _in(0xc34bc448, 0xda29f5e9, entity, toggle);
}
exports.setEntityWaterReflectionFlag = setEntityWaterReflectionFlag;
function setEqippedWeaponStartSpinningAtFullSpeed(ped) {
    return _in(0xe4dcec7f, 0xd5b739a5, ped);
}
exports.setEqippedWeaponStartSpinningAtFullSpeed = setEqippedWeaponStartSpinningAtFullSpeed;
function setEveryoneIgnorePlayer(player, toggle) {
    return _in(0x8eeda153, 0xad141ba4, player, toggle);
}
exports.setEveryoneIgnorePlayer = setEveryoneIgnorePlayer;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Groups found in the scripts used with this native:
 *
 * "AMMUNATION",
 * "QUARRY",
 * "Triathlon_1",
 * "Triathlon_2",
 * "Triathlon_3"
 * @param scenarioGroup
 */
function setExclusiveScenarioGroup(scenarioGroup) {
    return _in(0x535e97e1, 0xf7fc0c6a, _ts(scenarioGroup));
}
exports.setExclusiveScenarioGroup = setExclusiveScenarioGroup;
/**
 * Used only once in the scripts (fm_mission_controller) like so:
 *
 * TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");
 * @param ped
 * @param state
 */
function setExpectedCloneNextTaskMoveNetworkState(ped, state) {
    return _in(0xab13a556, 0x5480b6d9, ped, _ts(state), _r);
}
exports.setExpectedCloneNextTaskMoveNetworkState = setExpectedCloneNextTaskMoveNetworkState;
function setExplosiveAmmoThisFrame(player) {
    return _in(0xa66c71c9, 0x8d5f2cfb, player);
}
exports.setExplosiveAmmoThisFrame = setExplosiveAmmoThisFrame;
function setExplosiveMeleeThisFrame(player) {
    return _in(0xff1bed81, 0xbfdc0fe0, player);
}
exports.setExplosiveMeleeThisFrame = setExplosiveMeleeThisFrame;
function setExposuretweak(toggle) {
    return _in(0xef398bee, 0xe4ef45f9, toggle);
}
exports.setExposuretweak = setExposuretweak;
/**
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 */
function setExtraTcmodifier(modifierName) {
    return _in(0x5096fd9c, 0xcb49056d, _ts(modifierName));
}
exports.setExtraTcmodifier = setExtraTcmodifier;
/**
 * Clipsets:
 * facials@gen_female@base
 * facials@gen_male@base
 * facials@p_m_zero@base
 *
 * Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
 * mood_drunk_1
 * mood_stressed_1
 * mood_happy_1
 * mood_talking_1
 *
 * @param ped
 * @param animDict
 */
function setFacialClipset(ped, animDict) {
    return _in(0x5687c7f0, 0x5b39e401, ped, _ts(animDict));
}
exports.setFacialClipset = setFacialClipset;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animName
 * @param animDict
 */
function setFacialIdleAnimOverride(ped, animName, animDict) {
    return _in(0xffc24b98, 0x8b938b38, ped, _ts(animName), _ts(animDict));
}
exports.setFacialIdleAnimOverride = setFacialIdleAnimOverride;
/**
 * Sets whether the game should fade in after the player dies or is arrested.
 * @param toggle
 */
function setFadeInAfterDeathArrest(toggle) {
    return _in(0xda66d279, 0x6ba33f12, toggle);
}
exports.setFadeInAfterDeathArrest = setFadeInAfterDeathArrest;
function setFadeInAfterLoad(toggle) {
    return _in(0xf3d78f59, 0xdfe18d79, toggle);
}
exports.setFadeInAfterLoad = setFadeInAfterLoad;
/**
 * Sets whether the game should fade out after the player is arrested.
 * @param toggle
 */
function setFadeOutAfterArrest(toggle) {
    return _in(0x1e0b4dc0, 0xd990a4e7, toggle);
}
exports.setFadeOutAfterArrest = setFadeOutAfterArrest;
/**
 * Sets whether the game should fade out after the player dies.
 * @param toggle
 */
function setFadeOutAfterDeath(toggle) {
    return _in(0x4a18e01d, 0xf2c87b86, toggle);
}
exports.setFadeOutAfterDeath = setFadeOutAfterDeath;
/**
 * p2 maybe z float?
 * @param x
 * @param y
 * @param p2
 */
function setFakeGpsPlayerPositionThisFrame(x, y, p2) {
    return _in(0xa17784fc, 0xa9548d15, _fv(x), _fv(y), p2);
}
exports.setFakeGpsPlayerPositionThisFrame = setFakeGpsPlayerPositionThisFrame;
/**
 * Argument must be 0.0f or above 38.0f, or it will be ignored.
 * @param altitude
 * @param p1
 * @param p2
 */
function setFakeMinimapMaxAltimeterHeight(altitude, p1, p2) {
    return _in(0xd201f3ff, 0x917a506d, _fv(altitude), p1, p2);
}
exports.setFakeMinimapMaxAltimeterHeight = setFakeMinimapMaxAltimeterHeight;
/**
 * Sets the position of the arrow icon representing the player on both the minimap and world map.
 *
 * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
 * @param x
 * @param y
 */
function setFakePausemapPlayerPositionThisFrame(x, y) {
    return _in(0x77e2dd17, 0x7910e1cf, _fv(x), _fv(y));
}
exports.setFakePausemapPlayerPositionThisFrame = setFakePausemapPlayerPositionThisFrame;
/**
 * Setter for GET_FAKE_SPECTATOR_MODE
 * @param toggle
 */
function setFakeSpectatorMode(toggle) {
    return _in(0xcd742336, 0x00c4ea6b, toggle);
}
exports.setFakeSpectatorMode = setFakeSpectatorMode;
/**
 * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
 *
 * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
 * @param fakeWantedLevel
 */
function setFakeWantedLevel(fakeWantedLevel) {
    return _in(0x1454f244, 0x8de30163, fakeWantedLevel);
}
exports.setFakeWantedLevel = setFakeWantedLevel;
function setFarDrawVehicles(toggle) {
    return _in(0x26324f33, 0x423f3cc3, toggle);
}
exports.setFarDrawVehicles = setFarDrawVehicles;
function setFireAmmoThisFrame(player) {
    return _in(0x11879cdd, 0x803d30f4, player);
}
exports.setFireAmmoThisFrame = setFireAmmoThisFrame;
function setFirstPersonAimCamNearClipThisUpdate(p0) {
    return _in(0x0af7b437, 0x918103b3, _fv(p0));
}
exports.setFirstPersonAimCamNearClipThisUpdate = setFirstPersonAimCamNearClipThisUpdate;
function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(p0, p1) {
    return _in(0x2f7f2b26, 0xdd3f18ee, _fv(p0), _fv(p1));
}
exports.setFirstPersonAimCamRelativeHeadingLimitsThisUpdate = setFirstPersonAimCamRelativeHeadingLimitsThisUpdate;
function setFirstPersonAimCamRelativePitchLimitsThisUpdate(p0, p1) {
    return _in(0xbcfc632d, 0xb7673bf0, _fv(p0), _fv(p1));
}
exports.setFirstPersonAimCamRelativePitchLimitsThisUpdate = setFirstPersonAimCamRelativePitchLimitsThisUpdate;
function setFirstPersonAimCamZoomFactor(zoomFactor) {
    return _in(0x70894bd0, 0x915c5bca, _fv(zoomFactor));
}
exports.setFirstPersonAimCamZoomFactor = setFirstPersonAimCamZoomFactor;
function setFirstPersonAimCamZoomFactorLimitsThisUpdate(p0, p1) {
    return _in(0xced08cbe, 0x8ebb97c7, _fv(p0), _fv(p1));
}
exports.setFirstPersonAimCamZoomFactorLimitsThisUpdate = setFirstPersonAimCamZoomFactorLimitsThisUpdate;
function setFirstPersonFlashEffectType(p0) {
    return _in(0x5c41e6ba, 0xbc9e2112, p0);
}
exports.setFirstPersonFlashEffectType = setFirstPersonFlashEffectType;
function setFirstPersonFlashEffectVehicleModelHash(vehicleModel) {
    return _in(0x11fa5d34, 0x79c7dd47, _ch(vehicleModel));
}
exports.setFirstPersonFlashEffectVehicleModelHash = setFirstPersonFlashEffectVehicleModelHash;
/**
 * From b617 scripts:
 *
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");
 * @param vehicleName
 */
function setFirstPersonFlashEffectVehicleModelName(vehicleName) {
    return _in(0x21e253a7, 0xf8da5dfb, _ts(vehicleName));
}
exports.setFirstPersonFlashEffectVehicleModelName = setFirstPersonFlashEffectVehicleModelName;
/**
 * Does nothing
 * @param yaw
 */
function setFirstPersonShooterCameraHeading(yaw) {
    return _in(0x103991d4, 0xa307d472, _fv(yaw));
}
exports.setFirstPersonShooterCameraHeading = setFirstPersonShooterCameraHeading;
function setFirstPersonShooterCameraPitch(pitch) {
    return _in(0x759e13eb, 0xc1c15c5a, _fv(pitch));
}
exports.setFirstPersonShooterCameraPitch = setFirstPersonShooterCameraPitch;
function setFlammabilityMultiplier(p0) {
    return _in(0x8f390ac4, 0x155099ba, _fv(p0));
}
exports.setFlammabilityMultiplier = setFlammabilityMultiplier;
/**
 * Purpose of p0 and p1 unknown.
 * @param p0
 * @param p1
 * @param fadeIn
 * @param duration
 * @param fadeOut
 */
function setFlash(p0, p1, fadeIn, duration, fadeOut) {
    return _in(0x0ab84296, 0xfed9cfc6, _fv(p0), _fv(p1), _fv(fadeIn), _fv(duration), _fv(fadeOut));
}
exports.setFlash = setFlash;
/**
 * Enables/disables flashlight on ped's weapon.
 * @param ped
 * @param toggle
 */
function setFlashLightActiveHistory(ped, toggle) {
    return _in(0x988db6fe, 0x9b3ac000, ped, toggle);
}
exports.setFlashLightActiveHistory = setFlashLightActiveHistory;
function setFlashLightFadeDistance(distance) {
    return _in(0xcea66dad, 0x478cd39b, _fv(distance), _r);
}
exports.setFlashLightFadeDistance = setFlashLightFadeDistance;
function setFleeingVehiclesUseSwitchedOffNodes(p0) {
    return _in(0xa247f9ef, 0x01d8082e, p0);
}
exports.setFleeingVehiclesUseSwitchedOffNodes = setFleeingVehiclesUseSwitchedOffNodes;
function setFloatingHelpTextScreenPosition(hudIndex, x, y) {
    return _in(0x7679cc1b, 0xcebe3d4c, hudIndex, _fv(x), _fv(y));
}
exports.setFloatingHelpTextScreenPosition = setFloatingHelpTextScreenPosition;
function setFloatingHelpTextStyle(hudIndex, p1, p2, p3, p4, p5) {
    return _in(0x788e7fd4, 0x31bd67f1, hudIndex, p1, p2, p3, p4, p5);
}
exports.setFloatingHelpTextStyle = setFloatingHelpTextStyle;
function setFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY) {
    return _in(0xb094bc1d, 0xb4018240, hudIndex, entity, _fv(offsetX), _fv(offsetY));
}
exports.setFloatingHelpTextToEntity = setFloatingHelpTextToEntity;
function setFloatingHelpTextWorldPosition(hudIndex, x, y, z) {
    return _in(0x784ba7e0, 0xeceb4178, hudIndex, _fv(x), _fv(y), _fv(z));
}
exports.setFloatingHelpTextWorldPosition = setFloatingHelpTextWorldPosition;
function setFlyCamCoordAndConstrain(cam, x, y, z) {
    return _in(0xc91c6c55, 0x199308ca, cam, _fv(x), _fv(y), _fv(z));
}
exports.setFlyCamCoordAndConstrain = setFlyCamCoordAndConstrain;
function setFlyCamHorizontalResponse(cam, p1, p2, p3) {
    return _in(0x503f5920, 0x162365b2, cam, _fv(p1), _fv(p2), _fv(p3));
}
exports.setFlyCamHorizontalResponse = setFlyCamHorizontalResponse;
function setFlyCamMaxHeight(cam, height) {
    return _in(0xf9d02130, 0xecdd1d77, cam, _fv(height));
}
exports.setFlyCamMaxHeight = setFlyCamMaxHeight;
function setFlyCamVerticalControlsThisUpdate(cam) {
    return _in(0xc8b5c4a7, 0x9cc18b94, cam);
}
exports.setFlyCamVerticalControlsThisUpdate = setFlyCamVerticalControlsThisUpdate;
function setFlyCamVerticalResponse(cam, p1, p2, p3) {
    return _in(0xe827b938, 0x2cfb41ba, cam, _fv(p1), _fv(p2), _fv(p3));
}
exports.setFlyCamVerticalResponse = setFlyCamVerticalResponse;
/**
 * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
 * @param entity
 */
function setFocusEntity(entity) {
    return _in(0x198f7770, 0x5fa0931d, entity);
}
exports.setFocusEntity = setFocusEntity;
/**
 * Override the area where the camera will render the terrain.
 * p3, p4 and p5 are usually set to 0.0
 *
 * @param x
 * @param y
 * @param z
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
function setFocusPosAndVel(x, y, z, offsetX, offsetY, offsetZ) {
    return _in(0xbb7454ba, 0xff08fe25, _fv(x), _fv(y), _fv(z), _fv(offsetX), _fv(offsetY), _fv(offsetZ));
}
exports.setFocusPosAndVel = setFocusPosAndVel;
function setFollowCamIgnoreAttachParentMovementThisUpdate() {
    return _in(0xdd79df9f, 0x4d26e1c9);
}
exports.setFollowCamIgnoreAttachParentMovementThisUpdate = setFollowCamIgnoreAttachParentMovementThisUpdate;
function setFollowPedCamLadderAlignThisUpdate() {
    return _in(0xc8391c30, 0x9684595a);
}
exports.setFollowPedCamLadderAlignThisUpdate = setFollowPedCamLadderAlignThisUpdate;
/**
 * From the scripts:
 *
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * @param camName
 * @param p1
 */
function setFollowPedCamThisUpdate(camName, p1) {
    return _in(0x44a113dd, 0x6ffc48d1, _ts(camName), p1, _r);
}
exports.setFollowPedCamThisUpdate = setFollowPedCamThisUpdate;
/**
 * Sets the type of Player camera:
 *
 * 0 - Third Person Close
 * 1 - Third Person Mid
 * 2 - Third Person Far
 * 4 - First Person
 * @param viewMode
 */
function setFollowPedCamViewMode(viewMode) {
    return _in(0x5a4f9edf, 0x1673f704, viewMode);
}
exports.setFollowPedCamViewMode = setFollowPedCamViewMode;
function setFollowVehicleCamHighAngleModeEveryUpdate(p0, p1) {
    return _in(0x9dfe13ec, 0xdc1ec196, p0, p1);
}
exports.setFollowVehicleCamHighAngleModeEveryUpdate = setFollowVehicleCamHighAngleModeEveryUpdate;
function setFollowVehicleCamHighAngleModeThisUpdate(p0) {
    return _in(0x91ef6ee6, 0x419e5b97, p0);
}
exports.setFollowVehicleCamHighAngleModeThisUpdate = setFollowVehicleCamHighAngleModeThisUpdate;
function setFollowVehicleCamSeatThisUpdate(seatIndex) {
    return _in(0x5c90cab0, 0x9951a12f, seatIndex);
}
exports.setFollowVehicleCamSeatThisUpdate = setFollowVehicleCamSeatThisUpdate;
/**
 * Sets the type of Player camera in vehicles:
 * viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
 * @param viewMode
 */
function setFollowVehicleCamViewMode(viewMode) {
    return _in(0xac253d78, 0x42768f48, viewMode);
}
exports.setFollowVehicleCamViewMode = setFollowVehicleCamViewMode;
function setFollowVehicleCamZoomLevel(zoomLevel) {
    return _in(0x19464cb6, 0xe4078c8a, zoomLevel);
}
exports.setFollowVehicleCamZoomLevel = setFollowVehicleCamZoomLevel;
function setForceFixLinkMatrices(vehicle) {
    return _in(0x887fa387, 0x87de8c72, vehicle);
}
exports.setForceFixLinkMatrices = setForceFixLinkMatrices;
function setForceFootstepUpdate(ped, toggle) {
    return _in(0x129466ed, 0x55140f8d, ped, toggle);
}
exports.setForceFootstepUpdate = setForceFootstepUpdate;
function setForceHdVehicle(vehicle, toggle) {
    return _in(0x97ce68cb, 0x032583f0, vehicle, toggle);
}
exports.setForceHdVehicle = setForceHdVehicle;
/**
 * No observed effect.
 * @param vehicle
 * @param p1
 */
function setForceLowLodAnchorMode(vehicle, p1) {
    return _in(0xb28b1fe5, 0xbfadd7f5, vehicle, p1);
}
exports.setForceLowLodAnchorMode = setForceLowLodAnchorMode;
function setForceMotionblur(toggle) {
    return _in(0x6a51f787, 0x72175a51, toggle);
}
exports.setForceMotionblur = setForceMotionblur;
function setForceObjectThisFrame(x, y, z, p3) {
    return _in(0xf5380819, 0x86e49e9d, _fv(x), _fv(y), _fv(z), _fv(p3));
}
exports.setForceObjectThisFrame = setForceObjectThisFrame;
function setForceShowGps(toggle) {
    return _in(0x2790f4b1, 0x7d098e26, toggle);
}
exports.setForceShowGps = setForceShowGps;
function setForceStepType(ped, p1, type, p3) {
    return _in(0xcb968b53, 0xfc7f916d, ped, p1, type, p3);
}
exports.setForceStepType = setForceStepType;
function setForceVehicleEngineDamageByBullet(p0, p1) {
    return _in(0x4d9d109f, 0x63fee1d4, p0, p1);
}
exports.setForceVehicleEngineDamageByBullet = setForceVehicleEngineDamageByBullet;
function setForcedJumpThisFrame(player) {
    return _in(0xa1183bcf, 0xee0f93d1, player);
}
exports.setForcedJumpThisFrame = setForcedJumpThisFrame;
/**
 * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
 * @param vehicle
 * @param height
 */
function setForkliftForkHeight(vehicle, height) {
    return _in(0x37ebbf31, 0x17bd6a25, vehicle, _fv(height));
}
exports.setForkliftForkHeight = setForkliftForkHeight;
function setFormationLeader(vehicle, x, y, z, p4) {
    return _in(0x428ad3e2, 0x6c8d9eb0, vehicle, _fv(x), _fv(y), _fv(z), _fv(p4));
}
exports.setFormationLeader = setFormationLeader;
function setFreemodePrologueDone(p0, characterSlot) {
    return _in(0x0d01d206, 0x16fc73fb, p0, characterSlot);
}
exports.setFreemodePrologueDone = setFreemodePrologueDone;
/**
 * Sets profile setting 940 and 941
 * @param profileSetting
 * @param settingValue
 */
function setFreemodeStrandProgressionStatus(profileSetting, settingValue) {
    return _in(0x79d310a8, 0x61697cc9, profileSetting, settingValue);
}
exports.setFreemodeStrandProgressionStatus = setFreemodeStrandProgressionStatus;
function setFrontendActive(active) {
    return _in(0x745711a7, 0x5ab09277, active);
}
exports.setFrontendActive = setFrontendActive;
function setFrontendRadioActive(active) {
    return _in(0xf7f26c6e, 0x9cc9ebb8, active);
}
exports.setFrontendRadioActive = setFrontendRadioActive;
/**
 * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
 * @param toggle
 */
function setGamePaused(toggle) {
    return _in(0x577d1284, 0xd6873711, toggle);
}
exports.setGamePaused = setGamePaused;
function setGamePausesForStreaming(toggle) {
    return _in(0x717cd6e6, 0xfaebbedc, toggle);
}
exports.setGamePausesForStreaming = setGamePausesForStreaming;
function setGameplayCamAltitudeFovScalingState(p0) {
    return _in(0xdb90c6cc, 0xa48940f1, p0);
}
exports.setGameplayCamAltitudeFovScalingState = setGameplayCamAltitudeFovScalingState;
function setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity) {
    return _in(0xfd3151cd, 0x37ea2245, entity);
}
exports.setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate = setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate;
/**
 * Forces gameplay cam to specified ped as if you were the ped or spectating it
 * @param ped
 */
function setGameplayCamFollowPedThisUpdate(ped) {
    return _in(0x8bbacbf5, 0x1da047a8, ped);
}
exports.setGameplayCamFollowPedThisUpdate = setGameplayCamFollowPedThisUpdate;
function setGameplayCamIgnoreEntityCollisionThisUpdate(entity) {
    return _in(0x2aed6301, 0xf67007d5, entity);
}
exports.setGameplayCamIgnoreEntityCollisionThisUpdate = setGameplayCamIgnoreEntityCollisionThisUpdate;
/**
 * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * @param p0
 */
function setGameplayCamMaxMotionBlurStrengthThisUpdate(p0) {
    return _in(0x02257788, 0x16fdc28c, _fv(p0));
}
exports.setGameplayCamMaxMotionBlurStrengthThisUpdate = setGameplayCamMaxMotionBlurStrengthThisUpdate;
/**
 * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * @param p0
 */
function setGameplayCamMotionBlurScalingThisUpdate(p0) {
    return _in(0x487a82c6, 0x50eb7799, _fv(p0));
}
exports.setGameplayCamMotionBlurScalingThisUpdate = setGameplayCamMotionBlurScalingThisUpdate;
/**
 * Sets the camera position relative to heading in float from -360 to +360.
 *
 * Heading is alwyas 0 in aiming camera.
 * @param heading
 */
function setGameplayCamRelativeHeading(heading) {
    return _in(0xb4ec2312, 0xf4e5b1f1, _fv(heading));
}
exports.setGameplayCamRelativeHeading = setGameplayCamRelativeHeading;
/**
 * This native sets the camera's pitch (rotation on the x-axis).
 * @param angle
 * @param scalingFactor
 */
function setGameplayCamRelativePitch(angle, scalingFactor) {
    return _in(0x6d0858b8, 0xedfd2b7d, _fv(angle), _fv(scalingFactor));
}
exports.setGameplayCamRelativePitch = setGameplayCamRelativePitch;
/**
 * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
 * @param amplitude
 */
function setGameplayCamShakeAmplitude(amplitude) {
    return _in(0xa87e0093, 0x2db4d85d, _fv(amplitude));
}
exports.setGameplayCamShakeAmplitude = setGameplayCamShakeAmplitude;
function setGameplayCoordHint(x, y, z, duration, blendOutDuration, blendInDuration, p6) {
    return _in(0xd51adcd2, 0xd8bc0fb3, _fv(x), _fv(y), _fv(z), duration, blendOutDuration, blendInDuration, p6);
}
exports.setGameplayCoordHint = setGameplayCoordHint;
/**
 * p8 could be some sort of flag. Scripts use:
 * -244429742
 * 0
 * 1726668277
 * 1844968929
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 * @param p8
 */
function setGameplayEntityHint(entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8) {
    return _in(0x189e955a, 0x8313e298, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), p4, time, easeInTime, easeOutTime, p8);
}
exports.setGameplayEntityHint = setGameplayEntityHint;
function setGameplayHintBaseOrbitPitchOffset(value) {
    return _in(0xd1f8363d, 0xfad03848, _fv(value));
}
exports.setGameplayHintBaseOrbitPitchOffset = setGameplayHintBaseOrbitPitchOffset;
function setGameplayHintCameraBlendToFollowPedMediumViewMode(toggle) {
    return _in(0xe3433ead, 0xaaf7ee40, toggle);
}
exports.setGameplayHintCameraBlendToFollowPedMediumViewMode = setGameplayHintCameraBlendToFollowPedMediumViewMode;
function setGameplayHintCameraRelativeSideOffset(xOffset) {
    return _in(0x5d7b620d, 0xae436138, _fv(xOffset));
}
exports.setGameplayHintCameraRelativeSideOffset = setGameplayHintCameraRelativeSideOffset;
function setGameplayHintCameraRelativeVerticalOffset(yOffset) {
    return _in(0xc92717ef, 0x615b6704, _fv(yOffset));
}
exports.setGameplayHintCameraRelativeVerticalOffset = setGameplayHintCameraRelativeVerticalOffset;
function setGameplayHintFollowDistanceScalar(value) {
    return _in(0xf8bdbf3d, 0x573049a1, _fv(value));
}
exports.setGameplayHintFollowDistanceScalar = setGameplayHintFollowDistanceScalar;
function setGameplayHintFov(FOV) {
    return _in(0x513403fb, 0x9c56211f, _fv(FOV));
}
exports.setGameplayHintFov = setGameplayHintFov;
function setGameplayObjectHint(object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime) {
    return _in(0x83e87508, 0xa2ca2ac6, object, _fv(xOffset), _fv(yOffset), _fv(zOffset), p4, time, easeInTime, easeOutTime);
}
exports.setGameplayObjectHint = setGameplayObjectHint;
function setGameplayPedHint(ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration) {
    return _in(0x2b486269, 0xacd548d3, ped, _fv(x1), _fv(y1), _fv(z1), p4, duration, blendOutDuration, blendInDuration);
}
exports.setGameplayPedHint = setGameplayPedHint;
/**
 * Focuses the camera on the specified vehicle.
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 */
function setGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime) {
    return _in(0xa2297e18, 0xf3e71c2e, vehicle, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p4, time, easeInTime, easeOutTime);
}
exports.setGameplayVehicleHint = setGameplayVehicleHint;
function setGarbageTrucks(toggle) {
    return _in(0x2afd795e, 0xeac8d30d, toggle);
}
exports.setGarbageTrucks = setGarbageTrucks;
/**
 * Must be a value between 1 and 254
 * @param alpha
 */
function setGhostAlpha(alpha) {
    return _in(0x658500ae, 0x6d723a7e, alpha);
}
exports.setGhostAlpha = setGhostAlpha;
/**
 * Set state to true to extend the wings, false to retract them.
 * @param vehicle
 * @param state
 */
function setGliderActive(vehicle, state) {
    return _in(0x544996c0, 0x081abdeb, vehicle, state);
}
exports.setGliderActive = setGliderActive;
/**
 * Needs to be looped! And yes, it does work and is not a hash collision.
 * Birds will try to reach the given height.
 * @param height
 */
function setGlobalMinBirdFlightHeight(height) {
    return _in(0x6c6b1485, 0x86f934f7, _fv(height));
}
exports.setGlobalMinBirdFlightHeight = setGlobalMinBirdFlightHeight;
function setGlobalPositionOffsetForRecordedVehiclePlayback(vehicle, x, y, z) {
    return _in(0xfaf2a780, 0x61fd9ef4, vehicle, _fv(x), _fv(y), _fv(z));
}
exports.setGlobalPositionOffsetForRecordedVehiclePlayback = setGlobalPositionOffsetForRecordedVehiclePlayback;
function setGlobalRadioSignalLevel(p0) {
    return _in(0x159b7318, 0x403a1cd8, p0);
}
exports.setGlobalRadioSignalLevel = setGlobalRadioSignalLevel;
/**
 * Used for GTAO CEO/Associate spawned vehicles.
 * @param vehicle
 * @param toggle
 */
function setGoonBossVehicle(vehicle, toggle) {
    return _in(0xab31ef4d, 0xe6800ce9, vehicle, toggle);
}
exports.setGoonBossVehicle = setGoonBossVehicle;
function setGpsActive(active) {
    return _in(0x3bd3f52b, 0xa9b1e4e8, active);
}
exports.setGpsActive = setGpsActive;
/**
 * radarThickness: The width of the GPS route on the radar
 * mapThickness: The width of the GPS route on the map
 * @param toggle
 * @param radarThickness
 * @param mapThickness
 */
function setGpsCustomRouteRender(toggle, radarThickness, mapThickness) {
    return _in(0x900086f3, 0x71220b6f, toggle, radarThickness, mapThickness);
}
exports.setGpsCustomRouteRender = setGpsCustomRouteRender;
function setGpsDisabledZone(x1, y1, z1, x2, y2, z3) {
    return _in(0xdc20483c, 0xd3dd5201, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z3));
}
exports.setGpsDisabledZone = setGpsDisabledZone;
/**
 * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
 * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
 *
 * **Setting a waypoint at the same coordinate:**
 * Disabled Zone: https://i.imgur.com/P9VUuxM.png
 * Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param index
 */
function setGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index) {
    return _in(0xd0bc1c6f, 0xb18ee154, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), index);
}
exports.setGpsDisabledZoneAtIndex = setGpsDisabledZoneAtIndex;
/**
 * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
 *
 * Doesn't seem like the flags are actually read by the game at all.
 * @param p0
 * @param p1
 */
function setGpsFlags(p0, p1) {
    return _in(0x5b440763, 0xa4c8d15b, p0, _fv(p1));
}
exports.setGpsFlags = setGpsFlags;
function setGpsFlashes(toggle) {
    return _in(0x320d0e0d, 0x936a0e9b, toggle);
}
exports.setGpsFlashes = setGpsFlashes;
function setGpsMultiRouteRender(toggle) {
    return _in(0x3dda3712, 0x8dd1aca8, toggle);
}
exports.setGpsMultiRouteRender = setGpsMultiRouteRender;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
function setGrassCullSphere(p0, p1, p2, p3) {
    return _in(0xbe197eaa, 0x669238f4, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _r, _ri);
}
exports.setGrassCullSphere = setGrassCullSphere;
/**
 * level can be from 0 to 3
 * 0: 9.8 - normal
 * 1: 2.4 - low
 * 2: 0.1 - very low
 * 3: 0.0 - off
 * @param level
 */
function setGravityLevel(level) {
    return _in(0x740e14fa, 0xd5842351, level);
}
exports.setGravityLevel = setGravityLevel;
function setGroundEffectReducesDrag(toggle) {
    return _in(0x430a7631, 0xa84c9be7, toggle);
}
exports.setGroundEffectReducesDrag = setGroundEffectReducesDrag;
/**
 * 0: Default
 * 1: Circle Around Leader
 * 2: Alternative Circle Around Leader
 * 3: Line, with Leader at center
 * @param groupId
 * @param formationType
 */
function setGroupFormation(groupId, formationType) {
    return _in(0xce2f5fc3, 0xaf7e8c1e, groupId, formationType);
}
exports.setGroupFormation = setGroupFormation;
function setGroupFormationSpacing(groupId, x, y, z) {
    return _in(0x1d9d4500, 0x4c28c916, groupId, _fv(x), _fv(y), _fv(z));
}
exports.setGroupFormationSpacing = setGroupFormationSpacing;
/**
 * Sets the range at which members will automatically leave the group.
 * @param groupHandle
 * @param separationRange
 */
function setGroupSeparationRange(groupHandle, separationRange) {
    return _in(0x4102c785, 0x8cfee4e4, groupHandle, _fv(separationRange));
}
exports.setGroupSeparationRange = setGroupSeparationRange;
function setHasPostedAllVehiclesDriven() {
    return _in(0xc141b891, 0x7e0017ec);
}
exports.setHasPostedAllVehiclesDriven = setHasPostedAllVehiclesDriven;
/**
 * Sets profile setting 866
 * @param value
 */
function setHasSpecialeditionContent(value) {
    return _in(0xdac073c7, 0x901f9e15, value);
}
exports.setHasSpecialeditionContent = setHasSpecialeditionContent;
function setHdArea(x, y, z, radius) {
    return _in(0xb85f2661, 0x9073e775, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.setHdArea = setHdArea;
/**
 * Used for freemode (online) characters.
 *
 * For some reason, the scripts use a rounded float for the index.
 * Indexes:
 * 1. black
 * 2. very light blue/green
 * 3. dark blue
 * 4. brown
 * 5. darker brown
 * 6. light brown
 * 7. blue
 * 8. light blue
 * 9. pink
 * 10. yellow
 * 11. purple
 * 12. black
 * 13. dark green
 * 14. light brown
 * 15. yellow/black pattern
 * 16. light colored spiral pattern
 * 17. shiny red
 * 18. shiny half blue/half red
 * 19. half black/half light blue
 * 20. white/red perimter
 * 21. green snake
 * 22. red snake
 * 23. dark blue snake
 * 24. dark yellow
 * 25. bright yellow
 * 26. all black
 * 28. red small pupil
 * 29. devil blue/black
 * 30. white small pupil
 * 31. glossed over
 * @param ped
 * @param index
 */
function setHeadBlendEyeColor(ped, index) {
    return _in(0x50b56988, 0xb170afdf, ped, index);
}
exports.setHeadBlendEyeColor = setHeadBlendEyeColor;
/**
 * p4 seems to vary from 0 to 3.
 * Preview: https://gfycat.com/MaleRareAmazonparrot
 * @param ped
 * @param r
 * @param g
 * @param b
 * @param id
 */
function setHeadBlendPaletteColor(ped, r, g, b, id) {
    return _in(0xcc9682b8, 0x951c5229, ped, r, g, b, id);
}
exports.setHeadBlendPaletteColor = setHeadBlendPaletteColor;
function setHealthHudDisplayValues(health, capacity, wasAdded) {
    return _in(0x3f5cc444, 0xdcaaa8f2, health, capacity, wasAdded);
}
exports.setHealthHudDisplayValues = setHealthHudDisplayValues;
/**
 * Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
 * @param p0
 * @param p1
 */
function setHealthSnacksCarriedByAllNewPeds(p0, p1) {
    return _in(0xff4803bc, 0x019852d9, _fv(p0), p1);
}
exports.setHealthSnacksCarriedByAllNewPeds = setHealthSnacksCarriedByAllNewPeds;
/**
 * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
 *
 * this native works on planes to?
 * @param vehicle
 */
function setHeliBladesFullSpeed(vehicle) {
    return _in(0xa178472e, 0xbb8ae60d, vehicle);
}
exports.setHeliBladesFullSpeed = setHeliBladesFullSpeed;
/**
 * Sets the speed of the helicopter blades in percentage of the full speed.
 *
 * vehicleHandle: The helicopter.
 * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
 * @param vehicle
 * @param speed
 */
function setHeliBladesSpeed(vehicle, speed) {
    return _in(0xfd280b4d, 0x7f3abc4d, vehicle, _fv(speed));
}
exports.setHeliBladesSpeed = setHeliBladesSpeed;
/**
 * Stops the cargobob from being able to attach any vehicle
 * @param vehicle
 * @param toggle
 */
function setHeliCanPickupEntityThatHasPickUpDisabled(vehicle, toggle) {
    return _in(0x94a68da4, 0x12c4007d, vehicle, toggle);
}
exports.setHeliCanPickupEntityThatHasPickUpDisabled = setHeliCanPickupEntityThatHasPickUpDisabled;
function setHeliCombatOffset(vehicle, x, y, z) {
    return _in(0x0a3f820a, 0x9a9a9ac5, vehicle, _fv(x), _fv(y), _fv(z));
}
exports.setHeliCombatOffset = setHeliCombatOffset;
/**
 * value between 0.0 and 1.0
 * @param helicopter
 * @param multiplier
 */
function setHeliControlLaggingRateScalar(helicopter, multiplier) {
    return _in(0x6e0859b5, 0x30a365cc, helicopter, _fv(multiplier));
}
exports.setHeliControlLaggingRateScalar = setHeliControlLaggingRateScalar;
function setHeliMainRotorHealth(vehicle, health) {
    return _in(0x4056ea11, 0x05f5abd7, vehicle, _fv(health));
}
exports.setHeliMainRotorHealth = setHeliMainRotorHealth;
function setHeliResistToExplosion(vehicle, toggle) {
    return _in(0x8074cc18, 0x86802912, vehicle, toggle);
}
exports.setHeliResistToExplosion = setHeliResistToExplosion;
function setHeliTailBoomCanBreakOff(vehicle, toggle) {
    return _in(0x3ec8bf18, 0xaa453fe9, vehicle, toggle, _r);
}
exports.setHeliTailBoomCanBreakOff = setHeliTailBoomCanBreakOff;
function setHeliTailRotorHealth(vehicle, health) {
    return _in(0xfe205f38, 0xaaa58e5b, vehicle, _fv(health));
}
exports.setHeliTailRotorHealth = setHeliTailRotorHealth;
function setHeliTurbulenceScalar(vehicle, p1) {
    return _in(0xe6f13851, 0x780394da, vehicle, _fv(p1));
}
exports.setHeliTurbulenceScalar = setHeliTurbulenceScalar;
function setHelpMessageStyle(style, hudColor, alpha, p3, p4) {
    return _in(0xb9c362ba, 0xbecddc7a, style, hudColor, alpha, p3, p4);
}
exports.setHelpMessageStyle = setHelpMessageStyle;
function setHidofOverride(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn) {
    return _in(0xba3d6590, 0x6822bed5, p0, p1, _fv(nearplaneOut), _fv(nearplaneIn), _fv(farplaneOut), _fv(farplaneIn));
}
exports.setHidofOverride = setHidofOverride;
/**
 * Makes the ped ragdoll like when falling from a great height
 * @param ped
 * @param minTime
 * @param maxTime
 * @param entryType
 */
function setHighFallTask(ped, minTime, maxTime, entryType) {
    return _in(0x8c825bdc, 0x7741d37c, ped, minTime, maxTime, entryType);
}
exports.setHighFallTask = setHighFallTask;
function setHornEnabled(vehicle, toggle) {
    return _in(0x76d683c1, 0x08594d0e, vehicle, toggle);
}
exports.setHornEnabled = setHornEnabled;
function setHornPermanentlyOn(vehicle) {
    return _in(0x9c119080, 0x13ea4715, vehicle);
}
exports.setHornPermanentlyOn = setHornPermanentlyOn;
function setHornPermanentlyOnTime(vehicle, time) {
    return _in(0x9d3af56e, 0x94c9ae98, vehicle, _fv(time));
}
exports.setHornPermanentlyOnTime = setHornPermanentlyOnTime;
function setHoverModeWingRatio(vehicle, ratio) {
    return _in(0x70a252f6, 0x0a3e036b, vehicle, _fv(ratio));
}
exports.setHoverModeWingRatio = setHoverModeWingRatio;
function setHudComponentPosition(id, x, y) {
    return _in(0xaabb1f56, 0xe2a17ced, id, _fv(x), _fv(y));
}
exports.setHudComponentPosition = setHudComponentPosition;
/**
 * Works only on vehicles that support hydraulics.
 * @param vehicle
 * @param wheelId
 * @param value
 */
function setHydraulicSuspensionRaiseFactor(vehicle, wheelId, value) {
    return _in(0x84ea99c6, 0x2cb3ef0c, vehicle, wheelId, _fv(value));
}
exports.setHydraulicSuspensionRaiseFactor = setHydraulicSuspensionRaiseFactor;
/**
 * States:
 * 4 = raise
 * 5 = lower
 * 6 = jump
 * @param vehicle
 * @param state
 */
function setHydraulicVehicleState(vehicle, state) {
    return _in(0x8ea86df3, 0x56801c7d, vehicle, state);
}
exports.setHydraulicVehicleState = setHydraulicVehicleState;
/**
 * Sets vehicle wheel hydraulic states transition. Known states:
 * 0 - reset
 * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
 * 2 - jump using wheel
 * @param vehicle
 * @param wheelId
 * @param state
 * @param value
 * @param p4
 */
function setHydraulicWheelState(vehicle, wheelId, state, value, p4) {
    return _in(0xc2407531, 0x0a8b9cd1, vehicle, wheelId, state, _fv(value), p4);
}
exports.setHydraulicWheelState = setHydraulicWheelState;
/**
 * If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
 *
 * Only used once in each carmod script, on a car that does not have hydraulics to begin with.
 * @param vehicle
 * @param toggle
 */
function setHydraulicsControl(vehicle, toggle) {
    return _in(0x28b18377, 0xeb6e25f6, vehicle, toggle);
}
exports.setHydraulicsControl = setHydraulicsControl;
function setIdealSpawnDistanceForIncident(incidentId, p1) {
    return _in(0xd261ba3e, 0x7e998072, incidentId, _fv(p1));
}
exports.setIdealSpawnDistanceForIncident = setIdealSpawnDistanceForIncident;
function setIgnoreLowPriorityShockingEvents(player, toggle) {
    return _in(0x596976b0, 0x2b6b5700, player, toggle);
}
exports.setIgnoreLowPriorityShockingEvents = setIgnoreLowPriorityShockingEvents;
function setIgnoreNoGpsFlag(toggle) {
    return _in(0x72751156, 0xe7678833, toggle);
}
exports.setIgnoreNoGpsFlag = setIgnoreNoGpsFlag;
/**
 * See: SET_BLIP_ROUTE
 * @param toggle
 */
function setIgnoreNoGpsFlagUntilFirstNormalNode(toggle) {
    return _in(0x1fc289a0, 0xc3ff470f, toggle);
}
exports.setIgnoreNoGpsFlagUntilFirstNormalNode = setIgnoreNoGpsFlagUntilFirstNormalNode;
function setIgnorePlanesSmallPitchChange(p0, p1) {
    return _in(0x8664170e, 0xf165c4a6, p0, p1);
}
exports.setIgnorePlanesSmallPitchChange = setIgnorePlanesSmallPitchChange;
function setIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration) {
    return _in(0xc32779c1, 0x6fceecd9, ped, ikIndex, entityLookAt, boneLookAt, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p7, blendInDuration, blendOutDuration);
}
exports.setIkTarget = setIkTarget;
/**
 * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
 * @param toggle
 */
function setInArenaMode(toggle) {
    return _in(0xaa6a6098, 0x851c396f, toggle);
}
exports.setInArenaMode = setInArenaMode;
function setInStuntMode(p0) {
    return _in(0x9ebd751e, 0x5787baf2, p0);
}
exports.setInStuntMode = setInStuntMode;
/**
 * Forces gameplay cam to specified vehicle as if you were in it
 * @param p0
 * @param p1
 */
function setInVehicleCamStateThisUpdate(p0, p1) {
    return _in(0xe9ea16d6, 0xe54cdca4, p0, p1);
}
exports.setInVehicleCamStateThisUpdate = setInVehicleCamStateThisUpdate;
function setIncidentRequestedUnits(incidentId, dispatchService, numUnits) {
    return _in(0xb08b85d8, 0x60e7ba3c, incidentId, dispatchService, numUnits);
}
exports.setIncidentRequestedUnits = setIncidentRequestedUnits;
function setIncreaseWheelCrushDamage(vehicle, toggle) {
    return _in(0x2970eaa1, 0x8fd5e42f, vehicle, toggle);
}
exports.setIncreaseWheelCrushDamage = setIncreaseWheelCrushDamage;
function setInitialPlayerStation(radioStation) {
    return _in(0x88795f13, 0xfacda88d, _ts(radioStation));
}
exports.setInitialPlayerStation = setInitialPlayerStation;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
function setInputExclusive(control, action) {
    return _in(0xede476e5, 0xee29edb1, control, action);
}
exports.setInputExclusive = setInputExclusive;
function setInsideVeryLargeInterior(toggle) {
    return _in(0x7ec8aba5, 0xe74b3d7a, toggle);
}
exports.setInsideVeryLargeInterior = setInsideVeryLargeInterior;
function setInsideVerySmallInterior(toggle) {
    return _in(0x504dfe62, 0xa1692296, toggle);
}
exports.setInsideVerySmallInterior = setInsideVerySmallInterior;
/**
 * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
 * @param flag
 */
function setInstancePriorityHint(flag) {
    return _in(0xc5f0a8eb, 0xd3f361ce, flag);
}
exports.setInstancePriorityHint = setInstancePriorityHint;
/**
 * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
 * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
 *
 * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
 * @param p0
 */
function setInstancePriorityMode(p0) {
    return _in(0x9bae5ad2, 0x508df078, p0);
}
exports.setInstancePriorityMode = setInstancePriorityMode;
function setInteriorActive(interiorID, toggle) {
    return _in(0xe37b76c3, 0x87be28ed, interiorID, toggle);
}
exports.setInteriorActive = setInteriorActive;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 * @param color
 */
function setInteriorEntitySetTintIndex(interior, entitySetName, color) {
    return _in(0xc1f1920b, 0xaf281317, interior, _ts(entitySetName), color);
}
exports.setInteriorEntitySetTintIndex = setInteriorEntitySetTintIndex;
/**
 * Only used once in the entire game scripts.
 * Does not actually return anything.
 * @param interior
 */
function setInteriorInUse(interior) {
    return _in(0x4c2330e6, 0x1d3deb56, interior, _r);
}
exports.setInteriorInUse = setInteriorInUse;
function setInvertGhosting(p0) {
    return _in(0xd7b6c73c, 0xad419bcf, p0);
}
exports.setInvertGhosting = setInvertGhosting;
/**
 * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
 * Doesn't work for planes/helis.
 * @param vehicle
 * @param state
 */
function setInvertVehicleControls(vehicle, state) {
    return _in(0x5b91b229, 0x243351a8, vehicle, state);
}
exports.setInvertVehicleControls = setInvertVehicleControls;
/**
 * Jenkins hash _might_ be 0xFC227584.
 * @param entity
 * @param toggle
 */
function setIsExteriorOnly(entity, toggle) {
    return _in(0x7241ccb7, 0xd020db69, entity, toggle);
}
exports.setIsExteriorOnly = setIsExteriorOnly;
function setIsObjectArticulated(object, toggle) {
    return _in(0x1c57c94a, 0x6446492a, object, toggle);
}
exports.setIsObjectArticulated = setIsObjectArticulated;
function setIsObjectBall(object, toggle) {
    return _in(0xb5b77424, 0x24bd4445, object, toggle);
}
exports.setIsObjectBall = setIsObjectBall;
/**
 * Enables the specified island. For more information, see islandhopper.meta
 * @param name
 * @param toggle
 */
function setIslandEnabled(name, toggle) {
    return _in(0x9a9d1ba6, 0x39675cf1, _ts(name), toggle);
}
exports.setIslandEnabled = setIslandEnabled;
function setJobActivityIdStarted(p0, characterSlot) {
    return _in(0x723c1ce1, 0x3fbfdb67, p0, characterSlot);
}
exports.setJobActivityIdStarted = setJobActivityIdStarted;
/**
 * Only appears in lamar1 script.
 * @param ped
 * @param p1
 */
function setLadderClimbInputState(ped, p1) {
    return _in(0x1a330d29, 0x7aac6bc1, ped, p1);
}
exports.setLadderClimbInputState = setLadderClimbInputState;
function setLastDrivenVehicle(vehicle) {
    return _in(0xacfb2463, 0xcc22bed2, vehicle);
}
exports.setLastDrivenVehicle = setLastDrivenVehicle;
function setLastViewedShopItem(p0, p1, p2) {
    return _in(0xfae628f1, 0xe9adb239, _ch(p0), p1, _ch(p2));
}
exports.setLastViewedShopItem = setLastViewedShopItem;
function setLawPedsCanAttackNonWantedPlayerThisFrame(player) {
    return _in(0xfac75988, 0xa7d078d3, player);
}
exports.setLawPedsCanAttackNonWantedPlayerThisFrame = setLawPedsCanAttackNonWantedPlayerThisFrame;
/**
 * PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation
 *
 * ***
 *
 * In "am_hold_up.ysc" used once:
 *
 * l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
 * PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));
 * @param p0
 */
function setLawResponseDelayOverride(p0) {
    return _in(0xb45eff71, 0x9d8427a6, _fv(p0));
}
exports.setLawResponseDelayOverride = setLawResponseDelayOverride;
function setLightOverrideMaxIntensityScale(p0) {
    return _in(0x9641588d, 0xab93b4b5, p0);
}
exports.setLightOverrideMaxIntensityScale = setLightOverrideMaxIntensityScale;
function setLightsCutoffDistanceTweak(distance) {
    return _in(0xbc3cca58, 0x44452b06, _fv(distance));
}
exports.setLightsCutoffDistanceTweak = setLightsCutoffDistanceTweak;
function setLocalPlayerAsGhost(toggle, p1) {
    return _in(0x5ffe9b41, 0x44f9712f, toggle, p1);
}
exports.setLocalPlayerAsGhost = setLocalPlayerAsGhost;
function setLocalPlayerCanCollectPortablePickups(toggle) {
    return _in(0x78857fc6, 0x5cadb909, toggle);
}
exports.setLocalPlayerCanCollectPortablePickups = setLocalPlayerCanCollectPortablePickups;
function setLocalPlayerInvisibleLocally(bIncludePlayersVehicle) {
    return _in(0xe5f773c1, 0xa1d9d168, bIncludePlayersVehicle);
}
exports.setLocalPlayerInvisibleLocally = setLocalPlayerInvisibleLocally;
/**
 * Maximum amount of pickup models that can be disallowed is 30.
 * @param modelHash
 * @param toggle
 */
function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash, toggle) {
    return _in(0x88eaec61, 0x7cd26926, _ch(modelHash), toggle);
}
exports.setLocalPlayerPermittedToCollectPickupsWithModel = setLocalPlayerPermittedToCollectPickupsWithModel;
function setLocalPlayerVisibleInCutscene(p0, p1) {
    return _in(0xd1065d68, 0x947e7b6e, p0, p1);
}
exports.setLocalPlayerVisibleInCutscene = setLocalPlayerVisibleInCutscene;
function setLocalPlayerVisibleLocally(bIncludePlayersVehicle) {
    return _in(0x7619364c, 0x82d3bf14, bIncludePlayersVehicle);
}
exports.setLocalPlayerVisibleLocally = setLocalPlayerVisibleLocally;
function setLockAdaptiveDofDistance(p0) {
    return _in(0xb569f41f, 0x3e7e83a4, p0);
}
exports.setLockAdaptiveDofDistance = setLockAdaptiveDofDistance;
/**
 * Hardcoded not to work in multiplayer environments.
 * When you set locked to 0 the door open and to 1 the door close
 * OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
 *
 * OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param xRotMult
 * @param yRotMult
 * @param zRotMult
 */
function setLockedUnstreamedInDoorOfType(modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult) {
    return _in(0x9b12f9a2, 0x4fabedb0, _ch(modelHash), _fv(x), _fv(y), _fv(z), locked, _fv(xRotMult), _fv(yRotMult), _fv(zRotMult));
}
exports.setLockedUnstreamedInDoorOfType = setLockedUnstreamedInDoorOfType;
/**
 * Possible p0 values:
 *
 * "prologue"
 * "Prologue_Main"
 * @param name
 * @param toggle
 */
function setMapdatacullboxEnabled(name, toggle) {
    return _in(0xaf12610c, 0x644a35c9, _ts(name), toggle);
}
exports.setMapdatacullboxEnabled = setMapdatacullboxEnabled;
function setMaxArmourHudDisplay(maximumValue) {
    return _in(0x06a32053, 0x5f5f0248, maximumValue);
}
exports.setMaxArmourHudDisplay = setMaxArmourHudDisplay;
function setMaxHealthHudDisplay(maximumValue) {
    return _in(0x975d66a0, 0xbc17064c, maximumValue);
}
exports.setMaxHealthHudDisplay = setMaxHealthHudDisplay;
function setMaxNumPortablePickupsCarriedByPlayer(modelHash, number) {
    return _in(0x0bf3b3bd, 0x47d79c08, _ch(modelHash), number);
}
exports.setMaxNumPortablePickupsCarriedByPlayer = setMaxNumPortablePickupsCarriedByPlayer;
function setMaxWantedLevel(maxWantedLevel) {
    return _in(0xaa5f02db, 0x48d704b9, maxWantedLevel);
}
exports.setMaxWantedLevel = setMaxWantedLevel;
/**
 * This native controls where the game plays audio from. By default the microphone is positioned on the player.
 * When p0 is true the game will play audio from the 3 positions inputted.
 * It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
 * The scripts mostly use it with only one position such as in fbi3.c:
 * AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));
 * @param toggle
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 */
function setMicrophonePosition(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    return _in(0xb6ae90ed, 0xde95c762, toggle, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3));
}
exports.setMicrophonePosition = setMicrophonePosition;
function setMinigameInProgress(toggle) {
    return _in(0x19e00d73, 0x22c6f85b, toggle);
}
exports.setMinigameInProgress = setMinigameInProgress;
function setMinimapBlockWaypoint(toggle) {
    return _in(0x58fadded, 0x207897dc, toggle);
}
exports.setMinimapBlockWaypoint = setMinimapBlockWaypoint;
/**
 * This native is used to colorize certain map components like the army base at the top of the map.
 * p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
 * @param componentId
 * @param toggle
 * @param overrideColor
 */
function setMinimapComponent(componentId, toggle, overrideColor) {
    return _in(0x75a9a109, 0x48d1dea6, componentId, toggle, overrideColor, _r);
}
exports.setMinimapComponent = setMinimapComponent;
function setMinimapFowDoNotUpdate(p0) {
    return _in(0x62e849b7, 0xeb28e770, p0);
}
exports.setMinimapFowDoNotUpdate = setMinimapFowDoNotUpdate;
/**
 * Up to eight coordinates may be revealed per frame
 * @param x
 * @param y
 * @param z
 */
function setMinimapFowRevealCoordinate(x, y, z) {
    return _in(0x0923dbf8, 0x7dff735e, _fv(x), _fv(y), _fv(z));
}
exports.setMinimapFowRevealCoordinate = setMinimapFowRevealCoordinate;
/**
 * Not much is known so far on what it does _exactly_.
 * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
 * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
 * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
 * Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
 * @param hole
 */
function setMinimapGolfCourse(hole) {
    return _in(0x71bdb63d, 0xbaf8da59, hole);
}
exports.setMinimapGolfCourse = setMinimapGolfCourse;
function setMinimapGolfCourseOff() {
    return _in(0x35edd5b2, 0xe3ff01c0);
}
exports.setMinimapGolfCourseOff = setMinimapGolfCourseOff;
/**
 * If true, the entire map will be revealed.
 *
 * FOW = Fog of War
 * @param toggle
 */
function setMinimapHideFow(toggle) {
    return _in(0xf8dee0a5, 0x600cbb93, toggle);
}
exports.setMinimapHideFow = setMinimapHideFow;
/**
 * Toggles the North Yankton map
 * @param toggle
 */
function setMinimapInPrologue(toggle) {
    return _in(0x9133955f, 0x1a2da957, toggle);
}
exports.setMinimapInPrologue = setMinimapInPrologue;
function setMinimapInSpectatorMode(toggle, ped) {
    return _in(0x1a5cd775, 0x2dd28cd3, toggle, ped);
}
exports.setMinimapInSpectatorMode = setMinimapInSpectatorMode;
function setMinimapSonarSweep(toggle) {
    return _in(0x6b50fc87, 0x49632ec1, toggle);
}
exports.setMinimapSonarSweep = setMinimapSonarSweep;
/**
 * If true, the player can't save the game.
 *
 *
 * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
 *
 * ^ also, if the mission flag is already set, the function does nothing at all
 * @param toggle
 */
function setMissionFlag(toggle) {
    return _in(0xc4301e51, 0x21a0ed73, toggle);
}
exports.setMissionFlag = setMissionFlag;
function setMissionName(p0, name) {
    return _in(0x5f28ecf5, 0xfc84772f, p0, _ts(name));
}
exports.setMissionName = setMissionName;
function setMissionNameForUgcMission(p0, name) {
    return _in(0xe45087d8, 0x5f468bc2, p0, _ts(name));
}
exports.setMissionNameForUgcMission = setMissionNameForUgcMission;
/**
 * p1 is always 0
 * @param train
 * @param p1
 */
function setMissionTrainAsNoLongerNeeded(p1) {
    return _in(0xbbe76483, 0x49b49be8, _i, p1);
}
exports.setMissionTrainAsNoLongerNeeded = setMissionTrainAsNoLongerNeeded;
function setMissionTrainCoords(train, x, y, z) {
    return _in(0x591ca673, 0xaa6ab736, train, _fv(x), _fv(y), _fv(z));
}
exports.setMissionTrainCoords = setMissionTrainCoords;
function setMobilePhoneDofState(toggle) {
    return _in(0x375a706a, 0x5c2fd084, toggle);
}
exports.setMobilePhoneDofState = setMobilePhoneDofState;
function setMobilePhonePosition(posX, posY, posZ) {
    return _in(0x693a5c6d, 0x6734085b, _fv(posX), _fv(posY), _fv(posZ));
}
exports.setMobilePhonePosition = setMobilePhonePosition;
function setMobilePhoneRadioState(state) {
    return _in(0xbf286c55, 0x4784f3df, state);
}
exports.setMobilePhoneRadioState = setMobilePhoneRadioState;
/**
 * Last parameter is unknown and always zero.
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p3
 */
function setMobilePhoneRotation(rotX, rotY, rotZ, p3) {
    return _in(0xbb779c0c, 0xa917e865, _fv(rotX), _fv(rotY), _fv(rotZ), p3);
}
exports.setMobilePhoneRotation = setMobilePhoneRotation;
/**
 * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
 * @param scale
 */
function setMobilePhoneScale(scale) {
    return _in(0xcbdd322a, 0x73d6d932, _fv(scale));
}
exports.setMobilePhoneScale = setMobilePhoneScale;
function setMobileRadioEnabledDuringGameplay(toggle) {
    return _in(0x1098355a, 0x16064bb3, toggle);
}
exports.setMobileRadioEnabledDuringGameplay = setMobileRadioEnabledDuringGameplay;
/**
 * Unloads model from memory
 * @param model
 */
function setModelAsNoLongerNeeded(model) {
    return _in(0xe532f5d7, 0x8798daab, _ch(model));
}
exports.setModelAsNoLongerNeeded = setModelAsNoLongerNeeded;
/**
 * Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
 * @param p0
 */
function setMotionblurMaxVelScaler(p0) {
    return _in(0xb3c641f3, 0x630bf6da, _fv(p0));
}
exports.setMotionblurMaxVelScaler = setMotionblurMaxVelScaler;
/**
 * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 * @param taskMode
 * @param ignoreTargetVehDeadCheck
 */
function setMountedWeaponTarget(shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck) {
    return _in(0xccd89219, 0x2c6d2bb9, shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z), taskMode, ignoreTargetVehDeadCheck);
}
exports.setMountedWeaponTarget = setMountedWeaponTarget;
/**
 * Changes the mouse cursor's sprite.
 * 1 = Normal
 * 6 = Left Arrow
 * 7 = Right Arrow
 * @param spriteId
 */
function setMouseCursorStyle(spriteId) {
    return _in(0x8db8cffd, 0x58b62552, spriteId);
}
exports.setMouseCursorStyle = setMouseCursorStyle;
/**
 * Shows the cursor on screen for one frame.
 */
function setMouseCursorThisFrame() {
    return _in(0xaae7ce1d, 0x63167423);
}
exports.setMouseCursorThisFrame = setMouseCursorThisFrame;
/**
 * Shows/hides the frontend cursor on the pause menu or similar menus.
 * Clicking off and then on the game window will show it again.
 * @param toggle
 */
function setMouseCursorVisible(toggle) {
    return _in(0x98215325, 0xa695e78a, toggle);
}
exports.setMouseCursorVisible = setMouseCursorVisible;
/**
 * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
 * @param ped
 * @param name
 */
function setMovementModeOverride(ped, name) {
    return _in(0x781de8fa, 0x214e87d2, ped, _ts(name));
}
exports.setMovementModeOverride = setMovementModeOverride;
/**
 * Sets flag's sprite transparency. 0-255.
 * @param gamerTagId
 * @param component
 * @param alpha
 */
function setMpGamerTagAlpha(gamerTagId, component, alpha) {
    return _in(0xd48fe545, 0xcd46f857, gamerTagId, component, alpha);
}
exports.setMpGamerTagAlpha = setMpGamerTagAlpha;
function setMpGamerTagBigText(gamerTagId, string) {
    return _in(0x7b772374, 0x7ccb55b6, gamerTagId, _ts(string));
}
exports.setMpGamerTagBigText = setMpGamerTagBigText;
/**
 * Sets a gamer tag's component colour
 *
 * gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
 * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
 * @param gamerTagId
 * @param component
 * @param hudColorIndex
 */
function setMpGamerTagColour(gamerTagId, component, hudColorIndex) {
    return _in(0x613ed644, 0x950626ae, gamerTagId, component, hudColorIndex);
}
exports.setMpGamerTagColour = setMpGamerTagColour;
/**
 * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
 * Should be enabled as flag (2). Has 0 opacity by default.
 *
 * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
 * -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
 * @param gamerTagId
 * @param hudColorIndex
 */
function setMpGamerTagHealthBarColour(gamerTagId, hudColorIndex) {
    return _in(0x3158c77a, 0x7e888ab4, gamerTagId, hudColorIndex);
}
exports.setMpGamerTagHealthBarColour = setMpGamerTagHealthBarColour;
function setMpGamerTagName(gamerTagId, string) {
    return _in(0xdea2b828, 0x3baa3944, gamerTagId, _ts(string));
}
exports.setMpGamerTagName = setMpGamerTagName;
function setMpGamerTagNumPackages(gamerTagId, p1) {
    return _in(0x9c16459b, 0x2324b2cf, gamerTagId, p1);
}
exports.setMpGamerTagNumPackages = setMpGamerTagNumPackages;
/**
 * enum eMpGamerTagComponent
 * {
 * MP_TAG_GAMER_NAME,
 * MP_TAG_CREW_TAG,
 * MP_TAG_HEALTH_ARMOUR,
 * MP_TAG_BIG_TEXT,
 * MP_TAG_AUDIO_ICON,
 * MP_TAG_USING_MENU,
 * MP_TAG_PASSIVE_MODE,
 * MP_TAG_WANTED_STARS,
 * MP_TAG_DRIVER,
 * MP_TAG_CO_DRIVER,
 * MP_TAG_TAGGED,
 * MP_TAG_GAMER_NAME_NEARBY,
 * MP_TAG_ARROW,
 * MP_TAG_PACKAGES,
 * MP_TAG_INV_IF_PED_FOLLOWING,
 * MP_TAG_RANK_TEXT,
 * MP_TAG_TYPING,
 * MP_TAG_BAG_LARGE,
 * MP_TAG_ARROW,
 * MP_TAG_GANG_CEO,
 * MP_TAG_GANG_BIKER,
 * MP_TAG_BIKER_ARROW,
 * MP_TAG_MC_ROLE_PRESIDENT,
 * MP_TAG_MC_ROLE_VICE_PRESIDENT,
 * MP_TAG_MC_ROLE_ROAD_CAPTAIN,
 * MP_TAG_MC_ROLE_SARGEANT,
 * MP_TAG_MC_ROLE_ENFORCER,
 * MP_TAG_MC_ROLE_PROSPECT,
 * MP_TAG_TRANSMITTER,
 * MP_TAG_BOMB
 * };
 * @param gamerTagId
 * @param component
 * @param toggle
 * @param p3
 */
function setMpGamerTagVisibility(gamerTagId, component, toggle, p3) {
    return _in(0x63bb75ab, 0xedc1f6a0, gamerTagId, component, toggle, p3);
}
exports.setMpGamerTagVisibility = setMpGamerTagVisibility;
/**
 * displays wanted star above head
 * @param gamerTagId
 * @param wantedlvl
 */
function setMpGamerTagWantedLevel(gamerTagId, wantedlvl) {
    return _in(0xcf228e2a, 0xa03099c3, gamerTagId, wantedlvl);
}
exports.setMpGamerTagWantedLevel = setMpGamerTagWantedLevel;
function setMpGamerTagsPointHealth(gamerTagId, value, maximumValue) {
    return _in(0x1563fe35, 0xe9928e67, gamerTagId, value, maximumValue);
}
exports.setMpGamerTagsPointHealth = setMpGamerTagsPointHealth;
function setMpGamerTagsShouldUsePointsHealth(gamerTagId, toggle) {
    return _in(0xd29ec58c, 0x2f6b5014, gamerTagId, toggle);
}
exports.setMpGamerTagsShouldUsePointsHealth = setMpGamerTagsShouldUsePointsHealth;
/**
 * Displays a bunch of icons above the players name, and level, and their name twice
 * @param gamerTagId
 * @param toggle
 */
function setMpGamerTagsShouldUseVehicleHealth(gamerTagId, toggle) {
    return _in(0xa67f9c46, 0xd612b6f1, gamerTagId, toggle);
}
exports.setMpGamerTagsShouldUseVehicleHealth = setMpGamerTagsShouldUseVehicleHealth;
function setMultiplayerBankCash() {
    return _in(0xdd21b55d, 0xf695cd0a);
}
exports.setMultiplayerBankCash = setMultiplayerBankCash;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
function setMultiplayerHudCash(p0, p1) {
    return _in(0xfd1d2203, 0x94bcb824, p0, p1);
}
exports.setMultiplayerHudCash = setMultiplayerHudCash;
function setMultiplayerWalletCash() {
    return _in(0xc2d15bef, 0x167e27bc);
}
exports.setMultiplayerWalletCash = setMultiplayerWalletCash;
function setNetworkCutsceneEntities(toggle) {
    return _in(0xaaa553e7, 0xdd28a457, toggle);
}
exports.setNetworkCutsceneEntities = setNetworkCutsceneEntities;
/**
 * Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
 * @param vehicle
 * @param toggle
 */
function setNetworkEnableHighSpeedEdgeFallDetection(vehicle, toggle) {
    return _in(0x838da093, 0x6a24ed4d, vehicle, toggle);
}
exports.setNetworkEnableHighSpeedEdgeFallDetection = setNetworkEnableHighSpeedEdgeFallDetection;
function setNetworkIdAlwaysExistsForPlayer(netId, player, toggle) {
    return _in(0xa8a02458, 0x7329f36a, netId, player, toggle);
}
exports.setNetworkIdAlwaysExistsForPlayer = setNetworkIdAlwaysExistsForPlayer;
/**
 * "No Reassign" in CPhysicalScriptGameStateDataNode
 * @param netId
 * @param toggle
 */
function setNetworkIdCanBeReassigned(netId, toggle) {
    return _in(0x9d724b40, 0x0a7e8ffc, netId, toggle);
}
exports.setNetworkIdCanBeReassigned = setNetworkIdCanBeReassigned;
/**
 * Whether or not another player is allowed to take control of the entity
 * @param netId
 * @param toggle
 */
function setNetworkIdCanMigrate(netId, toggle) {
    return _in(0x299eeb23, 0x175895fc, netId, toggle);
}
exports.setNetworkIdCanMigrate = setNetworkIdCanMigrate;
function setNetworkIdExistsOnAllMachines(netId, toggle) {
    return _in(0xe05e81a8, 0x88fa63c8, netId, toggle);
}
exports.setNetworkIdExistsOnAllMachines = setNetworkIdExistsOnAllMachines;
function setNetworkIdPassControlInTutorial(netId, state) {
    return _in(0x3fa36981, 0x311fa4ff, netId, state);
}
exports.setNetworkIdPassControlInTutorial = setNetworkIdPassControlInTutorial;
function setNetworkIdVisibleInCutscene(netId, p1, p2) {
    return _in(0xa6928482, 0x543022b4, netId, p1, p2);
}
exports.setNetworkIdVisibleInCutscene = setNetworkIdVisibleInCutscene;
function setNetworkIdVisibleInCutsceneHack(netId, p1, p2) {
    return _in(0x32ebd154, 0xcb6b8b99, netId, p1, p2);
}
exports.setNetworkIdVisibleInCutsceneHack = setNetworkIdVisibleInCutsceneHack;
function setNetworkIdVisibleInCutsceneRemainHack(p0, p1) {
    return _in(0x76b3f29d, 0x3f967692, p0, p1);
}
exports.setNetworkIdVisibleInCutsceneRemainHack = setNetworkIdVisibleInCutsceneRemainHack;
function setNetworkVehicleAsGhost(vehicle, toggle) {
    return _in(0x6274c471, 0x2850841e, vehicle, toggle);
}
exports.setNetworkVehicleAsGhost = setNetworkVehicleAsGhost;
/**
 * rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
 * @param vehicle
 * @param multiplier
 */
function setNetworkVehicleMaxPositionDeltaMultiplier(vehicle, multiplier) {
    return _in(0xa2a70797, 0x9fe754dc, vehicle, _fv(multiplier));
}
exports.setNetworkVehicleMaxPositionDeltaMultiplier = setNetworkVehicleMaxPositionDeltaMultiplier;
function setNetworkVehicleRespotTimer(netId, time, p2, p3) {
    return _in(0xec51713a, 0xb6ec36e8, netId, time, p2, p3);
}
exports.setNetworkVehicleRespotTimer = setNetworkVehicleRespotTimer;
function setNewWaypoint(x, y) {
    return _in(0xfe43368d, 0x2aa4f2fc, _fv(x), _fv(y));
}
exports.setNewWaypoint = setNewWaypoint;
/**
 * This native does absolutely nothing, just a nullsub
 *
 * R* Comment:
 * SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
 * @param nextMoveState
 */
function setNextDesiredMoveState(nextMoveState) {
    return _in(0xf1b9f16e, 0x89e2c93a, _fv(nextMoveState));
}
exports.setNextDesiredMoveState = setNextDesiredMoveState;
function setNextPlayerTcmodifier(modifierName) {
    return _in(0xbf59707b, 0x3e5ed531, _ts(modifierName));
}
exports.setNextPlayerTcmodifier = setNextPlayerTcmodifier;
function setNextRadioTrack(radioName, radioTrack, p2, p3) {
    return _in(0x55ecf4d1, 0x3d9903b0, _ts(radioName), _ts(radioTrack), _ts(p2), _ts(p3));
}
exports.setNextRadioTrack = setNextRadioTrack;
/**
 * Enables Night Vision.
 *
 * Example:
 * C#: Function.Call(Hash.SET_NIGHTVISION, true);
 * C++: GRAPHICS::SET_NIGHTVISION(true);
 *
 * BOOL toggle:
 * true = turns night vision on for your player.
 * false = turns night vision off for your player.
 * @param toggle
 */
function setNightvision(toggle) {
    return _in(0x18f621f7, 0xa5b1f85d, toggle);
}
exports.setNightvision = setNightvision;
function setNoDuckingForConversation(p0) {
    return _in(0xb542de8c, 0x3d1cb210, p0);
}
exports.setNoDuckingForConversation = setNoDuckingForConversation;
function setNoLoadingScreen(toggle) {
    return _in(0x5262cc19, 0x95d07e09, toggle);
}
exports.setNoLoadingScreen = setNoLoadingScreen;
function setNoiseoveride(toggle) {
    return _in(0xe787bf1c, 0x5cf823c9, toggle);
}
exports.setNoiseoveride = setNoiseoveride;
function setNoisinessoveride(value) {
    return _in(0xcb6a7c3b, 0xb17a0c67, _fv(value));
}
exports.setNoisinessoveride = setNoisinessoveride;
function setNonParticipantsOfThisScriptAsGhosts(p0) {
    return _in(0x13f1fcb1, 0x11b820b0, p0);
}
exports.setNonParticipantsOfThisScriptAsGhosts = setNonParticipantsOfThisScriptAsGhosts;
function setNumberOfParkedVehicles(value) {
    return _in(0xcaa15f13, 0xebd417ff, value);
}
exports.setNumberOfParkedVehicles = setNumberOfParkedVehicles;
/**
 * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
 * @param object
 * @param toggle
 */
function setObjectAllowLowLodBuoyancy(object, toggle) {
    return _in(0x4d89d607, 0xcb3dd1d2, object, toggle);
}
exports.setObjectAllowLowLodBuoyancy = setObjectAllowLowLodBuoyancy;
/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param object
 */
function setObjectAsNoLongerNeeded(object) {
    return _in(0x3ae22deb, 0x5ba5a3e6, _ii(object));
}
exports.setObjectAsNoLongerNeeded = setObjectAsNoLongerNeeded;
/**
 * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
 * @param object
 * @param toggle
 */
function setObjectForceVehiclesToAvoid(object, toggle) {
    return _in(0x77f33f2c, 0xcf64b3aa, object, toggle);
}
exports.setObjectForceVehiclesToAvoid = setObjectForceVehiclesToAvoid;
function setObjectGlowInSameTeam(pickup) {
    return _in(0x62454a64, 0x1b41f3c5, pickup);
}
exports.setObjectGlowInSameTeam = setObjectGlowInSameTeam;
function setObjectIsAPressurePlate(object, toggle) {
    return _in(0x734e1714, 0xd077da9a, object, toggle);
}
exports.setObjectIsAPressurePlate = setObjectIsAPressurePlate;
function setObjectIsSpecialGolfball(object, toggle) {
    return _in(0xc6033d32, 0x241f6fb5, object, toggle);
}
exports.setObjectIsSpecialGolfball = setObjectIsSpecialGolfball;
function setObjectIsVisibleInMirrors(object, toggle) {
    return _in(0x3b2fd68d, 0xb5f8331c, object, toggle);
}
exports.setObjectIsVisibleInMirrors = setObjectIsVisibleInMirrors;
/**
 * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
 *
 * Other parameters seem to be unknown.
 *
 * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
 * p3: seems similar to p2
 * p4: makes obj fall slower the higher the value
 * p5: similar to p4
 * @param object
 * @param weight
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param gravity
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param buoyancy
 */
function setObjectPhysicsParams(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy) {
    return _in(0xf6df6e90, 0xde7df90f, object, _fv(weight), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(gravity), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(buoyancy));
}
exports.setObjectPhysicsParams = setObjectPhysicsParams;
function setObjectSpeedBoostAmount(object, p1) {
    return _in(0x96ee0eba, 0x0163df80, object, p1);
}
exports.setObjectSpeedBoostAmount = setObjectSpeedBoostAmount;
function setObjectSpeedBoostDuration(object, duration) {
    return _in(0xdf6ca033, 0x0f2e737b, object, _fv(duration));
}
exports.setObjectSpeedBoostDuration = setObjectSpeedBoostDuration;
function setObjectTakesDamageFromCollidingWithBuildings(p0, p1) {
    return _in(0xeb6f1a9b, 0x5510a5d2, p0, p1);
}
exports.setObjectTakesDamageFromCollidingWithBuildings = setObjectTakesDamageFromCollidingWithBuildings;
function setObjectTargettable(object, targettable) {
    return _in(0x8a739169, 0x0f5afd81, object, targettable);
}
exports.setObjectTargettable = setObjectTargettable;
/**
 * enum ObjectPaintVariants
 * {
 * Pacific = 0,
 * Azure = 1,
 * Nautical = 2,
 * Continental = 3,
 * Battleship = 4,
 * Intrepid = 5,
 * Uniform = 6,
 * Classico = 7,
 * Mediterranean = 8,
 * Command = 9,
 * Mariner = 10,
 * Ruby = 11,
 * Vintage = 12,
 * Pristine = 13,
 * Merchant = 14,
 * Voyager = 15
 * };
 * @param object
 * @param textureVariation
 */
function setObjectTintIndex(object, textureVariation) {
    return _in(0x971da005, 0x5324d033, object, textureVariation);
}
exports.setObjectTintIndex = setObjectTintIndex;
function setOnIslandXForTakenPhoto(p0) {
    return _in(0xadd6627c, 0x4d325458, p0);
}
exports.setOnIslandXForTakenPhoto = setOnIslandXForTakenPhoto;
function setOnlyAllowAmmoCollectionWhenLow(p0) {
    return _in(0x31f924b5, 0x3eaddf65, p0);
}
exports.setOnlyAllowAmmoCollectionWhenLow = setOnlyAllowAmmoCollectionWhenLow;
function setOpenRearDoorsOnExplosion(vehicle, toggle) {
    return _in(0x1b212b26, 0xdd3c04df, vehicle, toggle);
}
exports.setOpenRearDoorsOnExplosion = setOpenRearDoorsOnExplosion;
function setOverrideNitrousLevel(vehicle, toggle, level, power, rechargeTime, disableSound) {
    return _in(0xc8e9b6b7, 0x1b8e660d, vehicle, toggle, _fv(level), _fv(power), _fv(rechargeTime), disableSound);
}
exports.setOverrideNitrousLevel = setOverrideNitrousLevel;
function setOverrideVehicleDoorTorque(p0, p1, p2) {
    return _in(0x66e3aafa, 0xce2d1eb8, p0, p1, p2);
}
exports.setOverrideVehicleDoorTorque = setOverrideVehicleDoorTorque;
/**
 * Appears to have an optional bool parameter that is unused in the scripts.
 *
 * If you pass true, something will be set to zero.
 * @param weatherType
 */
function setOverrideWeather(weatherType) {
    return _in(0xa43d5c6f, 0xe51adbef, _ts(weatherType));
}
exports.setOverrideWeather = setOverrideWeather;
/**
 * Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
 * @param weatherType
 * @param p1
 */
function setOverrideWeatherex(weatherType, p1) {
    return _in(0x1178e104, 0x409fe58c, _ts(weatherType), p1);
}
exports.setOverrideWeatherex = setOverrideWeatherex;
function setPackedStatBoolCode(index, value, characterSlot) {
    return _in(0xdb8a58ae, 0xaa67cd07, index, value, characterSlot);
}
exports.setPackedStatBoolCode = setPackedStatBoolCode;
function setPackedStatIntCode(index, value, characterSlot) {
    return _in(0x1581503a, 0xe529cd2e, index, value, characterSlot);
}
exports.setPackedStatIntCode = setPackedStatIntCode;
/**
 * Toggles a value (bool) for cutscenes.
 * @param toggle
 */
function setPadCanShakeDuringCutscene(toggle) {
    return _in(0xc61b86c9, 0xf61eb404, toggle);
}
exports.setPadCanShakeDuringCutscene = setPadCanShakeDuringCutscene;
function setParachuteTaskTarget(ped, x, y, z) {
    return _in(0xc313379a, 0xf0fceda7, ped, _fv(x), _fv(y), _fv(z));
}
exports.setParachuteTaskTarget = setParachuteTaskTarget;
function setParachuteTaskThrust(ped, thrust) {
    return _in(0x0729bac1, 0xb8c64317, ped, _fv(thrust));
}
exports.setParachuteTaskThrust = setParachuteTaskThrust;
function setParkedVehicleDensityMultiplierThisFrame(multiplier) {
    return _in(0xeae6dcc7, 0xeee3db1d, _fv(multiplier));
}
exports.setParkedVehicleDensityMultiplierThisFrame = setParkedVehicleDensityMultiplierThisFrame;
function setParticleFxBangScrapeLodrangeScale(p0) {
    return _in(0x54e22ea2, 0xc1956a8d, _fv(p0));
}
exports.setParticleFxBangScrapeLodrangeScale = setParticleFxBangScrapeLodrangeScale;
function setParticleFxBloodScale(p0) {
    return _in(0x90831126, 0x5d42a820, p0);
}
exports.setParticleFxBloodScale = setParticleFxBloodScale;
function setParticleFxBulletImpactLodrangeScale(p0) {
    return _in(0xbb90e12c, 0xac1dab25, _fv(p0));
}
exports.setParticleFxBulletImpactLodrangeScale = setParticleFxBulletImpactLodrangeScale;
function setParticleFxBulletImpactScale(scale) {
    return _in(0x27e32866, 0xe9a5c416, _fv(scale));
}
exports.setParticleFxBulletImpactScale = setParticleFxBulletImpactScale;
function setParticleFxBulletTraceNoAngleReject(p0) {
    return _in(0xca4ae345, 0xa153d573, p0);
}
exports.setParticleFxBulletTraceNoAngleReject = setParticleFxBulletTraceNoAngleReject;
function setParticleFxCamInsideNonplayerVehicle(vehicle, p1) {
    return _in(0xacee6f36, 0x0fc1f6b6, vehicle, p1);
}
exports.setParticleFxCamInsideNonplayerVehicle = setParticleFxCamInsideNonplayerVehicle;
function setParticleFxCamInsideVehicle(p0) {
    return _in(0xeec40470, 0x28426510, p0);
}
exports.setParticleFxCamInsideVehicle = setParticleFxCamInsideVehicle;
function setParticleFxFootLodrangeScale(p0) {
    return _in(0x949f397a, 0x288b28b3, _fv(p0));
}
exports.setParticleFxFootLodrangeScale = setParticleFxFootLodrangeScale;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param p0
 */
function setParticleFxFootOverrideName(p0) {
    return _in(0xba3d1940, 0x57c79a7b, _ts(p0));
}
exports.setParticleFxFootOverrideName = setParticleFxFootOverrideName;
/**
 * Used only once in the scripts (taxi_clowncar)
 * @param toggle
 */
function setParticleFxForceVehicleInterior(toggle) {
    return _in(0x8cde909a, 0x0370bb3a, toggle);
}
exports.setParticleFxForceVehicleInterior = setParticleFxForceVehicleInterior;
function setParticleFxLoopedAlpha(ptfxHandle, alpha) {
    return _in(0x72684513, 0x2380142e, ptfxHandle, _fv(alpha));
}
exports.setParticleFxLoopedAlpha = setParticleFxLoopedAlpha;
/**
 * only works on some fx's
 *
 * p4 = 0
 * @param ptfxHandle
 * @param r
 * @param g
 * @param b
 * @param p4
 */
function setParticleFxLoopedColour(ptfxHandle, r, g, b, p4) {
    return _in(0x7f8f6587, 0x7f88783b, ptfxHandle, _fv(r), _fv(g), _fv(b), p4);
}
exports.setParticleFxLoopedColour = setParticleFxLoopedColour;
function setParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork) {
    return _in(0x5f0c4b5b, 0x1c393be2, ptfxHandle, _ts(propertyName), _fv(amount), noNetwork);
}
exports.setParticleFxLoopedEvolution = setParticleFxLoopedEvolution;
function setParticleFxLoopedFarClipDist(ptfxHandle, range) {
    return _in(0xdcb194b8, 0x5ef7b541, ptfxHandle, _fv(range));
}
exports.setParticleFxLoopedFarClipDist = setParticleFxLoopedFarClipDist;
function setParticleFxLoopedOffsets(ptfxHandle, x, y, z, rotX, rotY, rotZ) {
    return _in(0xf7ddebec, 0x43483c43, ptfxHandle, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ));
}
exports.setParticleFxLoopedOffsets = setParticleFxLoopedOffsets;
function setParticleFxLoopedScale(ptfxHandle, scale) {
    return _in(0xb44250aa, 0xa456492d, ptfxHandle, _fv(scale));
}
exports.setParticleFxLoopedScale = setParticleFxLoopedScale;
/**
 * Usage example for C#:
 *
 * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
 *
 * Note: the argument alpha ranges from 0.0f-1.0f !
 * @param alpha
 */
function setParticleFxNonLoopedAlpha(alpha) {
    return _in(0x77168d72, 0x2c58b2fc, _fv(alpha));
}
exports.setParticleFxNonLoopedAlpha = setParticleFxNonLoopedAlpha;
/**
 * only works on some fx's, not networked
 * @param r
 * @param g
 * @param b
 */
function setParticleFxNonLoopedColour(r, g, b) {
    return _in(0x26143a59, 0xef48b262, _fv(r), _fv(g), _fv(b));
}
exports.setParticleFxNonLoopedColour = setParticleFxNonLoopedColour;
function setParticleFxNonLoopedEmitterSize(p0, p1, scale) {
    return _in(0x1e2e01c0, 0x0837d26e, _fv(p0), _fv(p1), _fv(scale));
}
exports.setParticleFxNonLoopedEmitterSize = setParticleFxNonLoopedEmitterSize;
function setParticleFxNonLoopedScale(scale) {
    return _in(0xb7ef5850, 0xc39fabca, _fv(scale));
}
exports.setParticleFxNonLoopedScale = setParticleFxNonLoopedScale;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param oldAsset
 * @param newAsset
 */
function setParticleFxOverride(oldAsset, newAsset) {
    return _in(0xea1e2d93, 0xf6f75ed9, _ts(oldAsset), _ts(newAsset));
}
exports.setParticleFxOverride = setParticleFxOverride;
function setParticleFxShootoutBoat(p0) {
    return _in(0x96ef97da, 0xeb89bef5, p0);
}
exports.setParticleFxShootoutBoat = setParticleFxShootoutBoat;
function setParticleFxSlipstreamLodrangeScale(scale) {
    return _in(0x2b40a976, 0x46381508, _fv(scale));
}
exports.setParticleFxSlipstreamLodrangeScale = setParticleFxSlipstreamLodrangeScale;
function setPauseExteriorRenderingWhileInInterior() {
    return _in(0x35cce12e, 0xaecb4a51);
}
exports.setPauseExteriorRenderingWhileInInterior = setPauseExteriorRenderingWhileInInterior;
function setPauseMenuActive(toggle) {
    return _in(0xdf47fc56, 0xc71569cf, toggle);
}
exports.setPauseMenuActive = setPauseMenuActive;
/**
 * Toggles the light state for the pause menu ped in frontend menus.
 *
 * This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
 *
 *
 * Example:
 * Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
 * Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
 * @param state
 */
function setPauseMenuPedLighting(state) {
    return _in(0x3ca60506, 0x92bc61b0, state);
}
exports.setPauseMenuPedLighting = setPauseMenuPedLighting;
/**
 * Toggles the pause menu ped sleep state for frontend menus.
 *
 * Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
 *
 * `state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
 * @param state
 */
function setPauseMenuPedSleepState(state) {
    return _in(0xecf12834, 0x4e9ff9f1, state);
}
exports.setPauseMenuPedSleepState = setPauseMenuPedSleepState;
/**
 * accuracy = 0-100, 100 being perfectly accurate
 * @param ped
 * @param accuracy
 */
function setPedAccuracy(ped, accuracy) {
    return _in(0x7aefb85c, 0x1d49deb6, ped, accuracy);
}
exports.setPedAccuracy = setPedAccuracy;
function setPedAiBlipForcedOn(ped, toggle) {
    return _in(0x0c4bbf62, 0x5ca98c4e, ped, toggle);
}
exports.setPedAiBlipForcedOn = setPedAiBlipForcedOn;
function setPedAiBlipGangId(ped, gangId) {
    return _in(0xe52b8e7f, 0x85d39a08, ped, gangId);
}
exports.setPedAiBlipGangId = setPedAiBlipGangId;
function setPedAiBlipHasCone(ped, toggle) {
    return _in(0x3eed80df, 0xf7325caa, ped, toggle);
}
exports.setPedAiBlipHasCone = setPedAiBlipHasCone;
function setPedAiBlipNoticeRange(ped, range) {
    return _in(0x97c65887, 0xd4b37fa9, ped, _fv(range));
}
exports.setPedAiBlipNoticeRange = setPedAiBlipNoticeRange;
function setPedAiBlipSprite(ped, spriteId) {
    return _in(0xfcfacd0d, 0xb9d7a57d, ped, spriteId);
}
exports.setPedAiBlipSprite = setPedAiBlipSprite;
/**
 * value ranges from 0 to 3.
 * @param ped
 * @param value
 */
function setPedAlertness(ped, value) {
    return _in(0xdba71115, 0xed9941a6, ped, value);
}
exports.setPedAlertness = setPedAlertness;
/**
 * ntoggle was always false except in one instance (b678).
 *
 * The one time this is set to true seems to do with when you fail the mission.
 * @param toggle
 */
function setPedAllowHurtCombatForAllMissionPeds(toggle) {
    return _in(0xf2bebcdf, 0xafdaa19e, toggle);
}
exports.setPedAllowHurtCombatForAllMissionPeds = setPedAllowHurtCombatForAllMissionPeds;
function setPedAllowMinorReactionsAsMissionPed(ped, toggle) {
    return _in(0x49e50bdb, 0x8ba4dab2, ped, toggle);
}
exports.setPedAllowMinorReactionsAsMissionPed = setPedAllowMinorReactionsAsMissionPed;
function setPedAllowVehiclesOverride(ped, toggle) {
    return _in(0x3c028c63, 0x6a414ed9, ped, toggle);
}
exports.setPedAllowVehiclesOverride = setPedAllowVehiclesOverride;
function setPedAllowedToDuck(ped, toggle) {
    return _in(0xda1f1b7b, 0xe1a8766f, ped, toggle);
}
exports.setPedAllowedToDuck = setPedAllowedToDuck;
/**
 * stance:
 * 0 = idle
 * 1 = walk
 * 2 = running
 *
 * p5 = usually set to true
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param stance
 * @param animDictionary
 * @param animationName
 * @param p4
 * @param p5
 */
function setPedAlternateMovementAnim(ped, stance, animDictionary, animationName, p4, p5) {
    return _in(0x90a43cc2, 0x81ffab46, ped, stance, _ts(animDictionary), _ts(animationName), _fv(p4), p5);
}
exports.setPedAlternateMovementAnim = setPedAlternateMovementAnim;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 */
function setPedAlternateWalkAnim(ped, animDict, animName, p3, p4) {
    return _in(0x6c60394c, 0xb4f75e9a, ped, _ts(animDict), _ts(animName), _fv(p3), p4);
}
exports.setPedAlternateWalkAnim = setPedAlternateWalkAnim;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 * @param p3
 */
function setPedAmmo(ped, weaponHash, ammo, p3) {
    return _in(0x14e56bc5, 0xb5db6a19, ped, _ch(weaponHash), ammo, p3);
}
exports.setPedAmmo = setPedAmmo;
/**
 * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
function setPedAmmoByType(ped, ammoTypeHash, ammo) {
    return _in(0x5fd1e1f0, 0x11e76d7e, ped, _ch(ammoTypeHash), ammo);
}
exports.setPedAmmoByType = setPedAmmoByType;
function setPedAmmoToDrop(ped, p1) {
    return _in(0xa4efef94, 0x40a5b0ef, ped, p1);
}
exports.setPedAmmoToDrop = setPedAmmoToDrop;
function setPedAngledDefensiveArea(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0xc7f76df2, 0x7a5045a1, ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8, p9);
}
exports.setPedAngledDefensiveArea = setPedAngledDefensiveArea;
/**
 * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
 * @param ped
 * @param toggle
 */
function setPedAoBlobRendering(ped, toggle) {
    return _in(0x2b5aa717, 0xa181fb4c, ped, toggle);
}
exports.setPedAoBlobRendering = setPedAoBlobRendering;
/**
 * Sets the armor of the specified ped.
 *
 * ped: The Ped to set the armor of.
 * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
 * @param ped
 * @param amount
 */
function setPedArmour(ped, amount) {
    return _in(0xcea04d83, 0x135264cc, ped, amount);
}
exports.setPedArmour = setPedArmour;
/**
 * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
 * @param ped
 * @param toggle
 */
function setPedAsCop(ped, toggle) {
    return _in(0xbb03c38d, 0xd3fb7ffd, ped, toggle);
}
exports.setPedAsCop = setPedAsCop;
function setPedAsEnemy(ped, toggle) {
    return _in(0x02a0c972, 0x0b854bfa, ped, toggle);
}
exports.setPedAsEnemy = setPedAsEnemy;
function setPedAsGroupLeader(ped, groupId) {
    return _in(0x2a781960, 0x5465fbce, ped, groupId);
}
exports.setPedAsGroupLeader = setPedAsGroupLeader;
function setPedAsGroupMember(ped, groupId) {
    return _in(0x9f3480fe, 0x65db31b5, ped, groupId);
}
exports.setPedAsGroupMember = setPedAsGroupMember;
/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param ped
 */
function setPedAsNoLongerNeeded(ped) {
    return _in(0x2595dd42, 0x36549ce3, _ii(ped));
}
exports.setPedAsNoLongerNeeded = setPedAsNoLongerNeeded;
function setPedBlendFromParents(ped, p1, p2, p3, p4) {
    return _in(0x137bbd05, 0x230db22d, ped, p1, p2, _fv(p3), _fv(p4));
}
exports.setPedBlendFromParents = setPedBlendFromParents;
function setPedBlocksPathingWhenDead(ped, toggle) {
    return _in(0x576594e8, 0xd64375e2, ped, toggle);
}
exports.setPedBlocksPathingWhenDead = setPedBlocksPathingWhenDead;
function setPedBoundsOrientation(ped, p1, p2, x, y, z) {
    return _in(0x4f5f651a, 0xccc9c4cf, ped, _fv(p1), _fv(p2), _fv(x), _fv(y), _fv(z));
}
exports.setPedBoundsOrientation = setPedBoundsOrientation;
function setPedCanArmIk(ped, toggle) {
    return _in(0x6c3b4d6d, 0x13b4c841, ped, toggle);
}
exports.setPedCanArmIk = setPedCanArmIk;
function setPedCanBeDraggedOut(ped, toggle) {
    return _in(0xc1670e95, 0x8eee24e5, ped, toggle);
}
exports.setPedCanBeDraggedOut = setPedCanBeDraggedOut;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
function setPedCanBeKnockedOffBike(p0, p1) {
    return _in(0xb282749d, 0x5e028163, p0, p1);
}
exports.setPedCanBeKnockedOffBike = setPedCanBeKnockedOffBike;
/**
 * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
 * @param ped
 * @param state
 */
function setPedCanBeKnockedOffVehicle(ped, state) {
    return _in(0x7a653569, 0x1b477c48, ped, state);
}
exports.setPedCanBeKnockedOffVehicle = setPedCanBeKnockedOffVehicle;
function setPedCanBeShotInVehicle(ped, toggle) {
    return _in(0xc7ef1ba8, 0x3230ba07, ped, toggle);
}
exports.setPedCanBeShotInVehicle = setPedCanBeShotInVehicle;
function setPedCanBeTargetedWhenInjured(ped, toggle) {
    return _in(0x638c03b0, 0xf9878f57, ped, toggle);
}
exports.setPedCanBeTargetedWhenInjured = setPedCanBeTargetedWhenInjured;
function setPedCanBeTargetedWithoutLos(ped, toggle) {
    return _in(0x4328652a, 0xe5769c71, ped, toggle);
}
exports.setPedCanBeTargetedWithoutLos = setPedCanBeTargetedWithoutLos;
function setPedCanBeTargetted(ped, toggle) {
    return _in(0x63f58f7c, 0x80513aad, ped, toggle);
}
exports.setPedCanBeTargetted = setPedCanBeTargetted;
function setPedCanBeTargettedByPlayer(ped, player, toggle) {
    return _in(0x66b57b72, 0xe0836a76, ped, player, toggle);
}
exports.setPedCanBeTargettedByPlayer = setPedCanBeTargettedByPlayer;
function setPedCanBeTargettedByTeam(ped, team, toggle) {
    return _in(0xbf1ca778, 0x33e58f2c, ped, team, toggle);
}
exports.setPedCanBeTargettedByTeam = setPedCanBeTargettedByTeam;
/**
 * It simply makes the said ped to cower behind cover object(wall, desk, car)
 *
 * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
 * @param ped
 * @param toggle
 */
function setPedCanCowerInCover(ped, toggle) {
    return _in(0xcb7553cd, 0xcef4a735, ped, toggle);
}
exports.setPedCanCowerInCover = setPedCanCowerInCover;
function setPedCanEvasiveDive(ped, toggle) {
    return _in(0x6b7a646c, 0x242a7059, ped, toggle);
}
exports.setPedCanEvasiveDive = setPedCanEvasiveDive;
function setPedCanHeadIk(ped, toggle) {
    return _in(0xc11c1809, 0x2c5530dc, ped, toggle);
}
exports.setPedCanHeadIk = setPedCanHeadIk;
function setPedCanLegIk(ped, toggle) {
    return _in(0x73518ece, 0x2485412b, ped, toggle);
}
exports.setPedCanLegIk = setPedCanLegIk;
function setPedCanLosePropsOnDamage(ped, toggle, p2) {
    return _in(0xe861d0b0, 0x5c7662b8, ped, toggle, p2);
}
exports.setPedCanLosePropsOnDamage = setPedCanLosePropsOnDamage;
function setPedCanPeekInCover(ped, toggle) {
    return _in(0xc514825c, 0x507e3736, ped, toggle);
}
exports.setPedCanPeekInCover = setPedCanPeekInCover;
function setPedCanPlayAmbientAnims(ped, toggle) {
    return _in(0x6373d134, 0x9925a70e, ped, toggle);
}
exports.setPedCanPlayAmbientAnims = setPedCanPlayAmbientAnims;
function setPedCanPlayAmbientBaseAnims(ped, toggle) {
    return _in(0x0eb0585d, 0x15254740, ped, toggle);
}
exports.setPedCanPlayAmbientBaseAnims = setPedCanPlayAmbientBaseAnims;
/**
 * Appears only in fm_mission_controller and used only 3 times.
 *
 * ped was always PLAYER_PED_ID()
 * p1 was always true
 * p2 was always true
 * @param ped
 * @param blockIdleClips
 * @param removeIdleClipIfPlaying
 */
function setPedCanPlayAmbientIdles(ped, blockIdleClips, removeIdleClipIfPlaying) {
    return _in(0x8fd89a62, 0x40813fd0, ped, blockIdleClips, removeIdleClipIfPlaying);
}
exports.setPedCanPlayAmbientIdles = setPedCanPlayAmbientIdles;
function setPedCanPlayGestureAnims(ped, toggle) {
    return _in(0xbaf20c54, 0x32058024, ped, toggle);
}
exports.setPedCanPlayGestureAnims = setPedCanPlayGestureAnims;
/**
 * Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
 * @param ped
 * @param toggle
 */
function setPedCanPlayInCarIdles(ped, toggle) {
    return _in(0x820e9892, 0xa77e97cd, ped, toggle);
}
exports.setPedCanPlayInCarIdles = setPedCanPlayInCarIdles;
/**
 * p2 usually 0
 * @param ped
 * @param toggle
 * @param p2
 */
function setPedCanPlayVisemeAnims(ped, toggle, p2) {
    return _in(0xf833ddba, 0x3b104d43, ped, toggle, p2);
}
exports.setPedCanPlayVisemeAnims = setPedCanPlayVisemeAnims;
function setPedCanRagdoll(ped, toggle) {
    return _in(0xb1283770, 0x56a54e2a, ped, toggle);
}
exports.setPedCanRagdoll = setPedCanRagdoll;
function setPedCanRagdollFromPlayerImpact(ped, toggle) {
    return _in(0xdf993ee5, 0xe90aba25, ped, toggle);
}
exports.setPedCanRagdollFromPlayerImpact = setPedCanRagdollFromPlayerImpact;
function setPedCanSmashGlass(ped, p1, p2) {
    return _in(0x1cce1414, 0x67ff42a2, ped, p1, p2);
}
exports.setPedCanSmashGlass = setPedCanSmashGlass;
function setPedCanSwitchWeapon(ped, toggle) {
    return _in(0xed7f7efe, 0x9fabf340, ped, toggle);
}
exports.setPedCanSwitchWeapon = setPedCanSwitchWeapon;
/**
 * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
 *
 * Only works in singleplayer
 * @param pedHandle
 * @param groupHandle
 * @param toggle
 */
function setPedCanTeleportToGroupLeader(pedHandle, groupHandle, toggle) {
    return _in(0x2e2f4240, 0xb3f24647, pedHandle, groupHandle, toggle);
}
exports.setPedCanTeleportToGroupLeader = setPedCanTeleportToGroupLeader;
function setPedCanTorsoIk(ped, toggle) {
    return _in(0xf2b7106d, 0x37947ce0, ped, toggle);
}
exports.setPedCanTorsoIk = setPedCanTorsoIk;
function setPedCanTorsoReactIk(ped, p1) {
    return _in(0xf5846edb, 0x26a98a24, ped, p1);
}
exports.setPedCanTorsoReactIk = setPedCanTorsoReactIk;
function setPedCanTorsoVehicleIk(ped, p1) {
    return _in(0x6647c5f6, 0xf5792496, ped, p1);
}
exports.setPedCanTorsoVehicleIk = setPedCanTorsoVehicleIk;
function setPedCanUseAutoConversationLookat(ped, toggle) {
    return _in(0xec4686ec, 0x06434678, ped, toggle);
}
exports.setPedCanUseAutoConversationLookat = setPedCanUseAutoConversationLookat;
/**
 * Overrides the ped's collision capsule radius for the current tick.
 * Must be called every tick to be effective.
 *
 * Setting this to 0.001 will allow warping through some objects.
 * @param ped
 * @param value
 */
function setPedCapsule(ped, value) {
    return _in(0x364df566, 0xec833de2, ped, _fv(value));
}
exports.setPedCapsule = setPedCapsule;
function setPedChanceOfFiringBlanks(ped, xBias, yBias) {
    return _in(0x83786272, 0x01d5497d, ped, _fv(xBias), _fv(yBias));
}
exports.setPedChanceOfFiringBlanks = setPedChanceOfFiringBlanks;
/**
 * Enables/disables ped's "quiet" footstep sound.
 * @param ped
 * @param toggle
 */
function setPedClothEventsEnabled(ped, toggle) {
    return _in(0x29da3ca8, 0xd8b2692d, ped, toggle);
}
exports.setPedClothEventsEnabled = setPedClothEventsEnabled;
function setPedClothPackageIndex(p0, p1) {
    return _in(0x82a3d6d9, 0xcc2cb8e3, p0, p1);
}
exports.setPedClothPackageIndex = setPedClothPackageIndex;
function setPedClothPinFrames(p0, p1) {
    return _in(0x78c4e996, 0x1db3eb5b, p0, p1);
}
exports.setPedClothPinFrames = setPedClothPinFrames;
function setPedClothProne(p0, p1) {
    return _in(0xa660faf5, 0x50eb37e5, p0, p1);
}
exports.setPedClothProne = setPedClothProne;
/**
 * enum eCombatAbility // 0xE793438C
 * {
 * CA_Poor,
 * CA_Average,
 * CA_Professional,
 * CA_NumTypes
 * };
 * @param ped
 * @param abilityLevel
 */
function setPedCombatAbility(ped, abilityLevel) {
    return _in(0xc7622c0d, 0x36b2fda8, ped, abilityLevel);
}
exports.setPedCombatAbility = setPedCombatAbility;
/**
 * enum eCombatAttributes // 0x0E8E7201
 * {
 * BF_CanUseCover = 0,
 * BF_CanUseVehicles = 1,
 * BF_CanDoDrivebys = 2,
 * BF_CanLeaveVehicle = 3,
 * BF_CanUseDynamicStrafeDecisions = 4,
 * BF_AlwaysFight = 5,
 * BF_0x66BB9FCC = 6,
 * BF_0x6837DA41 = 7,
 * BF_0xB4A13A5A = 8,
 * BF_0xEE326AAD = 9,
 * BF_0x7DF2CCFA = 10,
 * BF_0x0036D422 = 11,
 * BF_BlindFireWhenInCover = 12,
 * BF_Aggressive = 13,
 * BF_CanInvestigate = 14,
 * BF_HasRadio = 15,
 * BF_0x6BDE28D1 = 16,
 * BF_AlwaysFlee = 17,
 * BF_0x7852797D = 18,
 * BF_0x33497B95 = 19,
 * BF_CanTauntInVehicle = 20,
 * BF_CanChaseTargetOnFoot = 21,
 * BF_WillDragInjuredPedsToSafety = 22,
 * BF_0xCD7168B8 = 23,
 * BF_UseProximityFiringRate = 24,
 * BF_0x48F914F8 = 25,
 * BF_0x2EA543D0 = 26,
 * BF_PerfectAccuracy = 27,
 * BF_CanUseFrustratedAdvance = 28,
 * BF_0x3D131AC1 = 29,
 * BF_0x3AD95F27 = 30,
 * BF_MaintainMinDistanceToTarget = 31,
 * BF_0xEAD68AD2 = 32,
 * BF_0xA206C2E0 = 33,
 * BF_CanUsePeekingVariations = 34,
 * BF_0xA5715184 = 35,
 * BF_0xD5265533 = 36,
 * BF_0x2B84C2BF = 37,
 * BF_DisableBulletReactions = 38,
 * BF_CanBust = 39,
 * BF_0xAA525726 = 40,
 * BF_CanCommandeerVehicles = 41,
 * BF_CanFlank = 42,
 * BF_SwitchToAdvanceIfCantFindCover = 43,
 * BF_SwitchToDefensiveIfInCover = 44,
 * BF_0xEB4786A0 = 45,
 * BF_CanFightArmedPedsWhenNotArmed = 46,
 * BF_0xA08E9402 = 47,
 * BF_0x952EAD7D = 48,
 * BF_UseEnemyAccuracyScaling = 49,
 * BF_CanCharge = 50,
 * BF_0xDA8C2BD3 = 51,
 * BF_0x6562F017 = 52,
 * BF_0xA2C3D53B = 53,
 * BF_AlwaysEquipBestWeapon = 54,
 * BF_CanSeeUnderwaterPeds = 55,
 * BF_0xF619486B = 56,
 * BF_0x61EB63A3 = 57,
 * BF_DisableFleeFromCombat = 58,
 * BF_0x8976D12B = 59,
 * BF_CanThrowSmokeGrenade = 60,
 * BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
 * BF_0x5452A10C = 62,
 * BF_FleesFromInvincibleOpponents = 63,
 * BF_DisableBlockFromPursueDuringVehicleChase = 64,
 * BF_DisableSpinOutDuringVehicleChase = 65,
 * BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
 * BF_0x0B404731 = 67,
 * BF_DisableReactToBuddyShot = 68,
 * BF_0x7FFD6AEB = 69,
 * BF_0x51F4AEF8 = 70,
 * BF_PermitChargeBeyondDefensiveArea = 71,
 * BF_0x63E0A8E2 = 72,
 * BF_0xDF974436 = 73,
 * BF_0x556C080B = 74,
 * BF_0xA4D50035 = 75,
 * BF_SetDisableShoutTargetPositionOnCombatStart = 76,
 * BF_DisableRespondedToThreatBroadcast = 77,
 * BF_0xCBB01765 = 78,
 * BF_0x4F862ED4 = 79,
 * BF_0xEF9C7C40 = 80,
 * BF_0xE51B494F = 81,
 * BF_0x054D0199 = 82,
 * BF_0xD36BCE94 = 83,
 * BF_0xFB11F690 = 84,
 * BF_0xD208A9AD = 85,
 * BF_AllowDogFighting = 86,
 * BF_0x07A6E531 = 87,
 * BF_0x34F9317B = 88,
 * BF_0x4240F5A9 = 89,
 * BF_0xEE129DBD = 90,
 * BF_0x053AEAD9 = 91
 * };
 * @param ped
 * @param attributeId
 * @param enabled
 */
function setPedCombatAttributes(ped, attributeId, enabled) {
    return _in(0x9f779473, 0x0795e019, ped, attributeId, enabled);
}
exports.setPedCombatAttributes = setPedCombatAttributes;
/**
 * enum eCombatMovement // 0x4F456B61
 * {
 * CM_Stationary,
 * CM_Defensive,
 * CM_WillAdvance,
 * CM_WillRetreat
 * };
 * @param ped
 * @param combatMovement
 */
function setPedCombatMovement(ped, combatMovement) {
    return _in(0x4d9ca100, 0x9afbd057, ped, combatMovement);
}
exports.setPedCombatMovement = setPedCombatMovement;
/**
 * enum eCombatRange // 0xB69160F5
 * {
 * CR_Near,
 * CR_Medium,
 * CR_Far,
 * CR_VeryFar,
 * CR_NumRanges
 * };
 * @param ped
 * @param combatRange
 */
function setPedCombatRange(ped, combatRange) {
    return _in(0x3c606747, 0xb23e497b, ped, combatRange);
}
exports.setPedCombatRange = setPedCombatRange;
/**
 * paletteId: 0 to 3.
 *
 * componentId:
 * enum ePedVarComp
 * {
 * PV_COMP_INVALID = -1,
 * PV_COMP_HEAD,
 * PV_COMP_BERD,
 * PV_COMP_HAIR,
 * PV_COMP_UPPR,
 * PV_COMP_LOWR,
 * PV_COMP_HAND,
 * PV_COMP_FEET,
 * PV_COMP_TEEF,
 * PV_COMP_ACCS,
 * PV_COMP_TASK,
 * PV_COMP_DECL,
 * PV_COMP_JBIB,
 * PV_COMP_MAX
 * };
 *
 * Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 *
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param paletteId
 */
function setPedComponentVariation(ped, componentId, drawableId, textureId, paletteId) {
    return _in(0x262b14f4, 0x8d29de80, ped, componentId, drawableId, textureId, paletteId);
}
exports.setPedComponentVariation = setPedComponentVariation;
/**
 * enum ePedConfigFlags
 * {
 * _CPED_CONFIG_FLAG_0xC63DE95E = 1,
 * CPED_CONFIG_FLAG_NoCriticalHits = 2,
 * CPED_CONFIG_FLAG_DrownsInWater = 3,
 * CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
 * _CPED_CONFIG_FLAG_0x37D196F4 = 5,
 * _CPED_CONFIG_FLAG_0xE2462399 = 6,
 * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
 * _CPED_CONFIG_FLAG_0xEDDEB838 = 8,
 * _CPED_CONFIG_FLAG_0xB398B6FD = 9,
 * _CPED_CONFIG_FLAG_0xF6664E68 = 10,
 * _CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
 * _CPED_CONFIG_FLAG_0xCE394045 = 12,
 * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
 * _CPED_CONFIG_FLAG_0xCD8D1411 = 14,
 * _CPED_CONFIG_FLAG_0xB031F1A9 = 15,
 * _CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
 * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
 * _CPED_CONFIG_FLAG_0x380165BD = 18,
 * _CPED_CONFIG_FLAG_0x07C045C7 = 19,
 * _CPED_CONFIG_FLAG_0x583B5E2D = 20,
 * _CPED_CONFIG_FLAG_0x475EDA58 = 21,
 * _CPED_CONFIG_FLAG_0x8629D05B = 22,
 * _CPED_CONFIG_FLAG_0x1522968B = 23,
 * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
 * _CPED_CONFIG_FLAG_0x4CC09C4B = 25,
 * _CPED_CONFIG_FLAG_0x034F3053 = 26,
 * _CPED_CONFIG_FLAG_0xD91BA7CC = 27,
 * _CPED_CONFIG_FLAG_0x5C8DC66E = 28,
 * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
 * _CPED_CONFIG_FLAG_0x6580B9D2 = 30,
 * _CPED_CONFIG_FLAG_0x0EF7A297 = 31,
 * CPED_CONFIG_FLAG_WillFlyThruWindscreen = 32,
 * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
 * CPED_CONFIG_FLAG_HasHelmet = 34,
 * CPED_CONFIG_FLAG_UseHelmet = 35,
 * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
 * _CPED_CONFIG_FLAG_0xB130D17B = 37,
 * _CPED_CONFIG_FLAG_0x5F071200 = 38,
 * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
 * _CPED_CONFIG_FLAG_0xC287AAFF = 40,
 * _CPED_CONFIG_FLAG_0x203328CC = 41,
 * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
 * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
 * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
 * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
 * _CPED_CONFIG_FLAG_0xDB115BFA = 46,
 * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
 * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
 * _CPED_CONFIG_FLAG_0xF8E99565 = 49,
 * _CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
 * _CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
 * _CPED_CONFIG_FLAG_NoCollison = 52,
 * _CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
 * _CPED_CONFIG_FLAG_0xD749FC41 = 54,
 * _CPED_CONFIG_FLAG_0x357F63F3 = 55,
 * _CPED_CONFIG_FLAG_0xC5E60961 = 56,
 * _CPED_CONFIG_FLAG_0x29275C3E = 57,
 * CPED_CONFIG_FLAG_IsFiring = 58,
 * CPED_CONFIG_FLAG_WasFiring = 59,
 * CPED_CONFIG_FLAG_IsStanding = 60,
 * CPED_CONFIG_FLAG_WasStanding = 61,
 * CPED_CONFIG_FLAG_InVehicle = 62,
 * CPED_CONFIG_FLAG_OnMount = 63,
 * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
 * CPED_CONFIG_FLAG_IsSwimming = 65,
 * CPED_CONFIG_FLAG_WasSwimming = 66,
 * CPED_CONFIG_FLAG_IsSkiing = 67,
 * CPED_CONFIG_FLAG_IsSitting = 68,
 * CPED_CONFIG_FLAG_KilledByStealth = 69,
 * CPED_CONFIG_FLAG_KilledByTakedown = 70,
 * CPED_CONFIG_FLAG_Knockedout = 71,
 * _CPED_CONFIG_FLAG_0x3E3C4560 = 72,
 * _CPED_CONFIG_FLAG_0x2994C7B7 = 73,
 * _CPED_CONFIG_FLAG_0x6D59D275 = 74,
 * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
 * CPED_CONFIG_FLAG_IsInTheAir = 76,
 * _CPED_CONFIG_FLAG_0x2D493FB7 = 77,
 * CPED_CONFIG_FLAG_IsAimingGun = 78,
 * _CPED_CONFIG_FLAG_0x14D69875 = 79,
 * _CPED_CONFIG_FLAG_0x40B05311 = 80,
 * _CPED_CONFIG_FLAG_0x8B230BC5 = 81,
 * _CPED_CONFIG_FLAG_0xC74E5842 = 82,
 * _CPED_CONFIG_FLAG_0x9EA86147 = 83,
 * _CPED_CONFIG_FLAG_0x674C746C = 84,
 * _CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
 * _CPED_CONFIG_FLAG_0xC144A1EF = 86,
 * _CPED_CONFIG_FLAG_0x0548512D = 87,
 * _CPED_CONFIG_FLAG_0x31C93909 = 88,
 * _CPED_CONFIG_FLAG_0xA0269315 = 89,
 * _CPED_CONFIG_FLAG_0xD4D59D4D = 90,
 * _CPED_CONFIG_FLAG_0x411D4420 = 91,
 * _CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
 * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
 * _CPED_CONFIG_FLAG_0x300E4CD3 = 94,
 * _CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
 * _CPED_CONFIG_FLAG_0x89C2EF13 = 96,
 * CPED_CONFIG_FLAG_VaultFromCover = 97,
 * _CPED_CONFIG_FLAG_0x02A852C8 = 98,
 * _CPED_CONFIG_FLAG_0x3D9407F1 = 99,
 * _CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
 * CPED_CONFIG_FLAG_ForcedAim = 101,
 * _CPED_CONFIG_FLAG_0xB942D71A = 102,
 * _CPED_CONFIG_FLAG_0xD26C55A8 = 103,
 * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
 * CPED_CONFIG_FLAG_ForceReload = 105,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
 * _CPED_CONFIG_FLAG_0x83C0A4BF = 111,
 * _CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
 * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
 * _CPED_CONFIG_FLAG_0x43B80B79 = 114,
 * _CPED_CONFIG_FLAG_0x0D2A9309 = 115,
 * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
 * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
 * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
 * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
 * CPED_CONFIG_FLAG_IsHandCuffed = 120,
 * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
 * CPED_CONFIG_FLAG_DisableMelee = 122,
 * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
 * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
 * _CPED_CONFIG_FLAG_0x5FED6BFD = 125,
 * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
 * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
 * CPED_CONFIG_FLAG_CanBeAgitated = 128,
 * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
 * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
 * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
 * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
 * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
 * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
 * CPED_CONFIG_FLAG_IsScuba = 135,
 * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
 * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
 * CPED_CONFIG_FLAG_RidingTrain = 138,
 * CPED_CONFIG_FLAG_ArrestResult = 139,
 * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
 * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
 * _CPED_CONFIG_FLAG_0x6901E731 = 142,
 * _CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
 * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
 * CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
 * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
 * CPED_CONFIG_FLAG_StairsDetected = 147,
 * CPED_CONFIG_FLAG_SlopeDetected = 148,
 * _CPED_CONFIG_FLAG_0x1A15670B = 149,
 * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
 * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
 * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
 * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
 * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
 * CPED_CONFIG_FLAG_CanPerformArrest = 155,
 * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
 * CPED_CONFIG_FLAG_CanBeArrested = 157,
 * _CPED_CONFIG_FLAG_0xF7960FF5 = 158,
 * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
 * _CPED_CONFIG_FLAG_0x0C6C3099 = 160,
 * _CPED_CONFIG_FLAG_0x645F927A = 161,
 * _CPED_CONFIG_FLAG_0xA86549B9 = 162,
 * _CPED_CONFIG_FLAG_0x8AAF337A = 163,
 * _CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
 * _CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
 * CPED_CONFIG_FLAG_IsInjured = 166,
 * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
 * _CPED_CONFIG_FLAG_0xD8072639 = 168,
 * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
 * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
 * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
 * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
 * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
 * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
 * _CPED_CONFIG_FLAG_0x90008BFA = 175,
 * _CPED_CONFIG_FLAG_0x07C7A910 = 176,
 * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
 * _CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
 * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
 * CPED_CONFIG_FLAG_IsInCustody = 180,
 * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
 * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
 * CPED_CONFIG_FLAG_IsAgitated = 183,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
 * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
 * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
 * CPED_CONFIG_FLAG_HasHurtStarted = 187,
 * CPED_CONFIG_FLAG_DisableHurt = 188,
 * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
 * _CPED_CONFIG_FLAG_0x32FC208B = 190,
 * _CPED_CONFIG_FLAG_0x0C296E5A = 191,
 * _CPED_CONFIG_FLAG_0xE63B73EC = 192,
 * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
 * CPED_CONFIG_FLAG_UsingScenario = 194,
 * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
 * _CPED_CONFIG_FLAG_0xD88C58A1 = 196,
 * _CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
 * _CPED_CONFIG_FLAG_0xEA02B420 = 198,
 * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
 * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
 * _CPED_CONFIG_FLAG_0x5E6466F6 = 201,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
 * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
 * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
 * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
 * _CPED_CONFIG_FLAG_0x415B26B9 = 207,
 * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
 * CPED_CONFIG_FLAG_DodgedPlayer = 209,
 * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
 * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
 * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
 * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
 * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
 * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
 * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
 * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
 * _CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
 * _CPED_CONFIG_FLAG_0x848FFEF2 = 219,
 * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
 * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
 * _CPED_CONFIG_FLAG_0x84F722FA = 222,
 * _CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
 * _CPED_CONFIG_FLAG_0x728AA918 = 224,
 * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
 * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
 * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
 * _CPED_CONFIG_FLAG_0x1EA7225F = 228,
 * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
 * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
 * _CPED_CONFIG_FLAG_0xFC3E572D = 231,
 * _CPED_CONFIG_FLAG_0x08E9F9CF = 232,
 * _CPED_CONFIG_FLAG_0x2D3BA52D = 233,
 * _CPED_CONFIG_FLAG_0xFD2F53EA = 234,
 * _CPED_CONFIG_FLAG_0x31A1B03B = 235,
 * CPED_CONFIG_FLAG_IsHoldingProp = 236,
 * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
 * _CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
 * _CPED_CONFIG_FLAG_0x26149198 = 239,
 * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
 * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
 * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
 * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
 * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
 * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
 * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
 * _CPED_CONFIG_FLAG_0x0C754ACA = 247,
 * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
 * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
 * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
 * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
 * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
 * CPED_CONFIG_FLAG_OnStairs = 253,
 * _CPED_CONFIG_FLAG_0xE1A2F73F = 254,
 * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
 * _CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
 * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
 * _CPED_CONFIG_FLAG_0x329DCF1A = 258,
 * _CPED_CONFIG_FLAG_0x8D90DD1B = 259,
 * _CPED_CONFIG_FLAG_0xB8A292B7 = 260,
 * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
 * _CPED_CONFIG_FLAG_0x2AF558F0 = 262,
 * _CPED_CONFIG_FLAG_0x82251455 = 263,
 * _CPED_CONFIG_FLAG_0x30CF498B = 264,
 * _CPED_CONFIG_FLAG_0xE1CD50AF = 265,
 * _CPED_CONFIG_FLAG_0x72E4AE48 = 266,
 * _CPED_CONFIG_FLAG_0xC2657EA1 = 267,
 * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
 * CPED_CONFIG_FLAG_OnStairSlope = 270,
 * _CPED_CONFIG_FLAG_0xA0897933 = 271,
 * CPED_CONFIG_FLAG_DontBlipCop = 272,
 * CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
 * _CPED_CONFIG_FLAG_0xF7823618 = 274,
 * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
 * CPED_CONFIG_FLAG_EdgeDetected = 276,
 * _CPED_CONFIG_FLAG_0x92B67896 = 277,
 * _CPED_CONFIG_FLAG_0xCAD677C9 = 278,
 * CPED_CONFIG_FLAG_AvoidTearGas = 279,
 * _CPED_CONFIG_FLAG_0x5276AC7B = 280,
 * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
 * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
 * _CPED_CONFIG_FLAG_0x9139724D = 283,
 * _CPED_CONFIG_FLAG_0xA1457461 = 284,
 * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
 * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
 * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
 * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
 * _CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
 * _CPED_CONFIG_FLAG_0xF3F5758C = 290,
 * _CPED_CONFIG_FLAG_0x2A9307F1 = 291,
 * _CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
 * _CPED_CONFIG_FLAG_0xA06A3C6C = 293,
 * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
 * _CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
 * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
 * _CPED_CONFIG_FLAG_0xB31F1187 = 297,
 * _CPED_CONFIG_FLAG_0x84315402 = 298,
 * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
 * _CPED_CONFIG_FLAG_0xC7829B67 = 300,
 * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
 * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
 * _CPED_CONFIG_FLAG_0x2ADA871B = 303,
 * _CPED_CONFIG_FLAG_0x47BC8A58 = 304,
 * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
 * _CPED_CONFIG_FLAG_0x4A133C50 = 306,
 * _CPED_CONFIG_FLAG_0xC58099C3 = 307,
 * _CPED_CONFIG_FLAG_0xF3D76D41 = 308,
 * _CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
 * CPED_CONFIG_FLAG_IsInCluster = 310,
 * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
 * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
 * _CPED_CONFIG_FLAG_0xD4136C22 = 313,
 * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
 * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
 * _CPED_CONFIG_FLAG_0xD5C98277 = 316,
 * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
 * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
 * _CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
 * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
 * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
 * CPED_CONFIG_FLAG_HasHighHeels = 322,
 * _CPED_CONFIG_FLAG_0x86B01E54 = 323,
 * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
 * _CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
 * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
 * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
 * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
 * CPED_CONFIG_FLAG_DisableTalkTo = 329,
 * CPED_CONFIG_FLAG_DontBlip = 330,
 * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
 * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
 * _CPED_CONFIG_FLAG_0x150468FD = 333,
 * _CPED_CONFIG_FLAG_0x914EBD6B = 334,
 * _CPED_CONFIG_FLAG_0x79AF3B6D = 335,
 * _CPED_CONFIG_FLAG_0x75C7A632 = 336,
 * _CPED_CONFIG_FLAG_0x52D530E2 = 337,
 * _CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
 * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
 * _CPED_CONFIG_FLAG_0x12ADB567 = 340,
 * _CPED_CONFIG_FLAG_0x105C8518 = 341,
 * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
 * _CPED_CONFIG_FLAG_0xED152C3E = 343,
 * _CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
 * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
 * _CPED_CONFIG_FLAG_0xCDDFE830 = 346,
 * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
 * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
 * CPED_CONFIG_FLAG_EquipJetpack = 349,
 * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
 * _CPED_CONFIG_FLAG_0xE13D1F7C = 351,
 * _CPED_CONFIG_FLAG_0x40E25FB9 = 352,
 * _CPED_CONFIG_FLAG_0x930629D9 = 353,
 * _CPED_CONFIG_FLAG_0xECCF0C7F = 354,
 * _CPED_CONFIG_FLAG_0xB6E9613B = 355,
 * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
 * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
 * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
 * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
 * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
 * CPED_CONFIG_FLAG_HasReserveParachute = 362,
 * CPED_CONFIG_FLAG_UseReserveParachute = 363,
 * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
 * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
 * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
 * _CPED_CONFIG_FLAG_0xD7E07D37 = 367,
 * _CPED_CONFIG_FLAG_0x03C4FD24 = 368,
 * _CPED_CONFIG_FLAG_0x7675789A = 369,
 * _CPED_CONFIG_FLAG_0xB7288A88 = 370,
 * _CPED_CONFIG_FLAG_0xC06B6291 = 371,
 * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
 * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
 * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
 * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
 * _CPED_CONFIG_FLAG_0x147F1FFB = 376,
 * _CPED_CONFIG_FLAG_0x4376DD79 = 377,
 * _CPED_CONFIG_FLAG_0xCD3DB518 = 378,
 * _CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
 * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
 * _CPED_CONFIG_FLAG_0xBCD816CD = 381,
 * _CPED_CONFIG_FLAG_0xCF02DD69 = 382,
 * _CPED_CONFIG_FLAG_0xF73AFA2E = 383,
 * _CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
 * _CPED_CONFIG_FLAG_0xF601F7EE = 385,
 * _CPED_CONFIG_FLAG_0xA91350FC = 386,
 * _CPED_CONFIG_FLAG_0x3AB23B96 = 387,
 * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
 * CPED_CONFIG_FLAG_HasBareFeet = 389,
 * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
 * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
 * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
 * _CPED_CONFIG_FLAG_0xC11D3E8F = 393,
 * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
 * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
 * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
 * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
 * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
 * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
 * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
 * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
 * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
 * _CPED_CONFIG_FLAG_0x5E5B9591 = 403,
 * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
 * _CPED_CONFIG_FLAG_0x77840177 = 405,
 * _CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
 * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
 * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
 * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
 * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
 * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
 * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
 * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
 * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
 * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
 * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
 * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
 * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
 * _CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
 * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
 * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
 * _CPED_CONFIG_FLAG_0xFE401D26 = 423,
 * CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
 * _CPED_CONFIG_FLAG_0x2B42AE82 = 425,
 * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
 * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
 * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
 * CPED_CONFIG_FLAG_DisableStartEngine = 429,
 * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
 * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
 * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
 * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
 * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
 * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
 * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
 * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
 * _CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
 * _CPED_CONFIG_FLAG_0x50178878 = 440,
 * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
 * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
 * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
 * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
 * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
 * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
 * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
 * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
 * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
 * CPED_CONFIG_FLAG_PedIsArresting = 450,
 * CPED_CONFIG_FLAG_IsDecoyPed = 451,
 * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
 * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
 * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
 * _CPED_CONFIG_FLAG_0xB68D3EAB = 455,
 * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
 * _CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
 * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
 * };
 * @param ped
 * @param flagId
 * @param value
 */
function setPedConfigFlag(ped, flagId, value) {
    return _in(0x1913fe4c, 0xbf41c463, ped, flagId, value);
}
exports.setPedConfigFlag = setPedConfigFlag;
/**
 * teleports ped to coords along with the vehicle ped is in
 * @param ped
 * @param posX
 * @param posY
 * @param posZ
 */
function setPedCoordsKeepVehicle(ped, posX, posY, posZ) {
    return _in(0x9afeff48, 0x1a85ab2e, ped, _fv(posX), _fv(posY), _fv(posZ));
}
exports.setPedCoordsKeepVehicle = setPedCoordsKeepVehicle;
function setPedCoordsNoGang(ped, posX, posY, posZ) {
    return _in(0x87052fe4, 0x46e07247, ped, _fv(posX), _fv(posY), _fv(posZ));
}
exports.setPedCoordsNoGang = setPedCoordsNoGang;
/**
 * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
 * @param ped
 * @param p1
 */
function setPedCowerHash(ped, p1) {
    return _in(0xa5491311, 0x66868ed3, ped, _ts(p1));
}
exports.setPedCowerHash = setPedCowerHash;
/**
 * Has 5 parameters since latest patches.
 * @param ped
 * @param visible
 * @param deselectWeapon
 * @param p3
 * @param p4
 */
function setPedCurrentWeaponVisible(ped, visible, deselectWeapon, p3, p4) {
    return _in(0x0725a4cc, 0xfded9a70, ped, visible, deselectWeapon, p3, p4);
}
exports.setPedCurrentWeaponVisible = setPedCurrentWeaponVisible;
function setPedCycleVehicleWeaponsOnly(ped) {
    return _in(0x50276ef8, 0x172f5f12, ped);
}
exports.setPedCycleVehicleWeaponsOnly = setPedCycleVehicleWeaponsOnly;
/**
 * Sets Ped Default Clothes
 * @param ped
 */
function setPedDefaultComponentVariation(ped) {
    return _in(0x45eee615, 0x80806d63, ped);
}
exports.setPedDefaultComponentVariation = setPedDefaultComponentVariation;
function setPedDefensiveAreaAttachedToPed(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    return _in(0x4ef47fe2, 0x1698a8b6, ped, attachPed, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10);
}
exports.setPedDefensiveAreaAttachedToPed = setPedDefensiveAreaAttachedToPed;
function setPedDefensiveAreaDirection(ped, p1, p2, p3, p4) {
    return _in(0x413c6c76, 0x3a4affad, ped, _fv(p1), _fv(p2), _fv(p3), p4);
}
exports.setPedDefensiveAreaDirection = setPedDefensiveAreaDirection;
function setPedDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, p6) {
    return _in(0xf9b8f91a, 0xad3b953e, ped, target, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(radius), p6);
}
exports.setPedDefensiveSphereAttachedToPed = setPedDefensiveSphereAttachedToPed;
function setPedDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, p6) {
    return _in(0xe4723db6, 0xe736ccff, ped, target, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(radius), p6);
}
exports.setPedDefensiveSphereAttachedToVehicle = setPedDefensiveSphereAttachedToVehicle;
function setPedDensityMultiplierThisFrame(multiplier) {
    return _in(0x95e3d625, 0x7b166cf2, _fv(multiplier));
}
exports.setPedDensityMultiplierThisFrame = setPedDensityMultiplierThisFrame;
function setPedDesiredHeading(ped, heading) {
    return _in(0xaa5a7ece, 0x2aa8fe70, ped, _fv(heading));
}
exports.setPedDesiredHeading = setPedDesiredHeading;
function setPedDesiredMoveBlendRatio(ped, newMoveBlendRatio) {
    return _in(0x1e982ac8, 0x716912c5, ped, _fv(newMoveBlendRatio));
}
exports.setPedDesiredMoveBlendRatio = setPedDesiredMoveBlendRatio;
function setPedDiesInSinkingVehicle(ped, toggle) {
    return _in(0xd718a229, 0x95e2b4bc, ped, toggle);
}
exports.setPedDiesInSinkingVehicle = setPedDiesInSinkingVehicle;
function setPedDiesInVehicle(ped, toggle) {
    return _in(0x2a30922c, 0x90c9b42c, ped, toggle);
}
exports.setPedDiesInVehicle = setPedDiesInVehicle;
function setPedDiesInWater(ped, toggle) {
    return _in(0x56cef0ac, 0x79073bde, ped, toggle);
}
exports.setPedDiesInWater = setPedDiesInWater;
function setPedDiesInstantlyInWater(ped, toggle) {
    return _in(0xeeb64139, 0xba29a7cf, ped, toggle);
}
exports.setPedDiesInstantlyInWater = setPedDiesInstantlyInWater;
function setPedDiesWhenInjured(ped, toggle) {
    return _in(0x5ba7919b, 0xed300023, ped, toggle);
}
exports.setPedDiesWhenInjured = setPedDiesWhenInjured;
function setPedDriveByClipsetOverride(ped, clipset) {
    return _in(0xed34ab6c, 0x5cb36520, ped, _ts(clipset));
}
exports.setPedDriveByClipsetOverride = setPedDriveByClipsetOverride;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param ammoCount
 */
function setPedDropsInventoryWeapon(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) {
    return _in(0x208a1888, 0x007fc0e6, ped, _ch(weaponHash), _fv(xOffset), _fv(yOffset), _fv(zOffset), ammoCount);
}
exports.setPedDropsInventoryWeapon = setPedDropsInventoryWeapon;
function setPedDropsWeapon(ped) {
    return _in(0x6b7513d9, 0x966fbec0, ped);
}
exports.setPedDropsWeapon = setPedDropsWeapon;
function setPedDropsWeaponsWhenDead(ped, toggle) {
    return _in(0x476ae72c, 0x1d19d1a8, ped, toggle);
}
exports.setPedDropsWeaponsWhenDead = setPedDropsWeaponsWhenDead;
/**
 * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
 * @param ped
 * @param toggle
 */
function setPedDucking(ped, toggle) {
    return _in(0x030983ca, 0x930b692d, ped, toggle);
}
exports.setPedDucking = setPedDucking;
/**
 * intensity: 0.0f - 1.0f
 *
 * This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
 * @param ped
 * @param intensity
 */
function setPedEmissiveScale(ped, intensity) {
    return _in(0x4e90d746, 0x056e273d, ped, _fv(intensity));
}
exports.setPedEmissiveScale = setPedEmissiveScale;
function setPedEnableCrewEmblem(ped, toggle) {
    return _in(0xe906ec93, 0x0f5fe7c8, ped, toggle);
}
exports.setPedEnableCrewEmblem = setPedEnableCrewEmblem;
function setPedEnableWeaponBlocking(ped, toggle) {
    return _in(0x97a79031, 0x5d3831fd, ped, toggle);
}
exports.setPedEnableWeaponBlocking = setPedEnableWeaponBlocking;
/**
 * Something related to the environmental effects natives.
 * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 */
function setPedEnveffColorModulator(ped, p1, p2, p3) {
    return _in(0xd69411aa, 0x0cebf9e9, ped, p1, p2, p3);
}
exports.setPedEnveffColorModulator = setPedEnveffColorModulator;
/**
 * In agency_heist3b.c4, its like this 90% of the time:
 *
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);
 * PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);
 * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
 *
 * and its like this 10% of the time:
 *
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);
 * PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
 * PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);
 * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
 * @param ped
 * @param p1
 */
function setPedEnveffCpvAdd(ped, p1) {
    return _in(0x110f526a, 0xb784111f, ped, _fv(p1));
}
exports.setPedEnveffCpvAdd = setPedEnveffCpvAdd;
/**
 * Values look to be between 0.0 and 1.0
 * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
 *
 * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
 * @param ped
 * @param value
 */
function setPedEnveffScale(ped, value) {
    return _in(0xbf295168, 0x33893561, ped, _fv(value));
}
exports.setPedEnveffScale = setPedEnveffScale;
/**
 * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
 * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
 * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
 * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
 * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
 * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
 * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
 * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
 * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
 * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
 * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
 * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
 * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
 * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
 * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
 * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
 *
 * Firing pattern info: https://pastebin.com/Px036isB
 * @param ped
 * @param patternHash
 */
function setPedFiringPattern(ped, patternHash) {
    return _in(0x9ac577f5, 0xa12ad8a9, ped, _ch(patternHash));
}
exports.setPedFiringPattern = setPedFiringPattern;
/**
 * bit 1 (0x2) = use vehicle
 * bit 15 (0x8000) = force cower
 * @param ped
 * @param attributeFlags
 * @param enable
 */
function setPedFleeAttributes(ped, attributeFlags, enable) {
    return _in(0x70a2d113, 0x7c8ed7c9, ped, attributeFlags, enable);
}
exports.setPedFleeAttributes = setPedFleeAttributes;
/**
 * Enables/disables ped's "loud" footstep sound.
 * @param ped
 * @param toggle
 */
function setPedFootstepsEventsEnabled(ped, toggle) {
    return _in(0x0653b735, 0xbfbdfe87, ped, toggle);
}
exports.setPedFootstepsEventsEnabled = setPedFootstepsEventsEnabled;
/**
 * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * p2 is always true.
 * @param ped
 * @param gadgetHash
 * @param p2
 */
function setPedGadget(ped, gadgetHash, p2) {
    return _in(0xd0d7b1e6, 0x80ed4a1a, ped, _ch(gadgetHash), p2);
}
exports.setPedGadget = setPedGadget;
/**
 * BOOL p1: 0 = Female; 1 = Male
 * @param ped
 * @param p1
 */
function setPedGender(ped, p1) {
    return _in(0xa5342d39, 0x0cda41d6, ped, p1);
}
exports.setPedGender = setPedGender;
function setPedGeneratesDeadBodyEvents(ped, toggle) {
    return _in(0x7fb17ba2, 0xe7deca5b, ped, toggle);
}
exports.setPedGeneratesDeadBodyEvents = setPedGeneratesDeadBodyEvents;
/**
 * From the scripts:
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_FRA0");
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
 * @param ped
 * @param animGroupGesture
 */
function setPedGestureGroup(ped, animGroupGesture) {
    return _in(0xddf80337, 0x7f94aaa8, ped, _ts(animGroupGesture));
}
exports.setPedGestureGroup = setPedGestureGroup;
function setPedGetOutUpsideDownVehicle(ped, toggle) {
    return _in(0xbc0ed941, 0x65a48bc2, ped, toggle);
}
exports.setPedGetOutUpsideDownVehicle = setPedGetOutUpsideDownVehicle;
/**
 * enable or disable the gravity of a ped
 *
 * Examples:
 * PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
 * PED::SET_PED_GRAVITY(Local_289[iVar0  -- [[20]] ], 0x00000001);
 * @param ped
 * @param toggle
 */
function setPedGravity(ped, toggle) {
    return _in(0x9ff447b6, 0xb6ad960a, ped, toggle);
}
exports.setPedGravity = setPedGravity;
function setPedGroupMemberPassengerIndex(ped, index) {
    return _in(0x0bddb8d9, 0xec6bcf3c, ped, index);
}
exports.setPedGroupMemberPassengerIndex = setPedGroupMemberPassengerIndex;
function setPedHairTint(ped, colorID, highlightColorID) {
    return _in(0x4cffc654, 0x54c93a49, ped, colorID, highlightColorID);
}
exports.setPedHairTint = setPedHairTint;
/**
 * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
 *
 * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
 * @param ped
 * @param hasCone
 */
function setPedHasAiBlip(ped, hasCone) {
    return _in(0xd30c50df, 0x888d58b5, ped, hasCone);
}
exports.setPedHasAiBlip = setPedHasAiBlip;
/**
 * color: see SET_BLIP_COLOUR
 * @param ped
 * @param hasCone
 * @param color
 */
function setPedHasAiBlipWithColour(ped, hasCone, color) {
    return _in(0xb13dcb4c, 0x6faad238, ped, hasCone, color);
}
exports.setPedHasAiBlipWithColour = setPedHasAiBlipWithColour;
/**
 * The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
 *
 * The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
 *
 * !!!Can someone add working example for this???
 *
 * try this:
 * headBlendData headData;
 * GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
 *
 * SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
 * , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
 *
 *
 * For more info please refer to this topic.
 * gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
 * @param ped
 * @param shapeFirstID
 * @param shapeSecondID
 * @param shapeThirdID
 * @param skinFirstID
 * @param skinSecondID
 * @param skinThirdID
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 * @param isParent
 */
function setPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
    return _in(0x9414e18b, 0x9434c2fe, ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, _fv(shapeMix), _fv(skinMix), _fv(thirdMix), isParent);
}
exports.setPedHeadBlendData = setPedHeadBlendData;
/**
 * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
 *
 * overlayID       Part                  Index, to disable
 * 0               Blemishes             0 - 23, 255
 * 1               Facial Hair           0 - 28, 255
 * 2               Eyebrows              0 - 33, 255
 * 3               Ageing                0 - 14, 255
 * 4               Makeup                0 - 74, 255
 * 5               Blush                 0 - 6, 255
 * 6               Complexion            0 - 11, 255
 * 7               Sun Damage            0 - 10, 255
 * 8               Lipstick              0 - 9, 255
 * 9               Moles/Freckles        0 - 17, 255
 * 10              Chest Hair            0 - 16, 255
 * 11              Body Blemishes        0 - 11, 255
 * 12              Add Body Blemishes    0 - 1, 255
 * @param ped
 * @param overlayID
 * @param index
 * @param opacity
 */
function setPedHeadOverlay(ped, overlayID, index, opacity) {
    return _in(0x48f44967, 0xfa05cc1e, ped, overlayID, index, _fv(opacity));
}
exports.setPedHeadOverlay = setPedHeadOverlay;
/**
 *
 *
 * ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
 *
 * Called after SET_PED_HEAD_OVERLAY().
 * @param ped
 * @param overlayID
 * @param colorType
 * @param colorID
 * @param secondColorID
 */
function setPedHeadOverlayTint(ped, overlayID, colorType, colorID, secondColorID) {
    return _in(0x497bf74a, 0x7b9cb952, ped, overlayID, colorType, colorID, secondColorID);
}
exports.setPedHeadOverlayTint = setPedHeadOverlayTint;
function setPedHealthPendingLastDamageEventOverrideFlag(toggle) {
    return _in(0xb3352e01, 0x8d6f89df, toggle);
}
exports.setPedHealthPendingLastDamageEventOverrideFlag = setPedHealthPendingLastDamageEventOverrideFlag;
function setPedHearingRange(ped, value) {
    return _in(0x33a8f7f7, 0xd5f7f33c, ped, _fv(value));
}
exports.setPedHearingRange = setPedHearingRange;
function setPedHeatscaleOverride(ped, heatScale) {
    return _in(0xc1f6ebf9, 0xa3d55538, ped, _fv(heatScale));
}
exports.setPedHeatscaleOverride = setPedHeatscaleOverride;
function setPedHelmet(ped, canWearHelmet) {
    return _in(0x560a4313, 0x6eb58105, ped, canWearHelmet);
}
exports.setPedHelmet = setPedHelmet;
function setPedHelmetFlag(ped, helmetFlag) {
    return _in(0xc0e78d5c, 0x2ce3eb25, ped, helmetFlag);
}
exports.setPedHelmetFlag = setPedHelmetFlag;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propIndex
 * @param p2
 */
function setPedHelmetPropIndex(ped, propIndex, p2) {
    return _in(0x26d83693, 0xed99291c, ped, propIndex, p2);
}
exports.setPedHelmetPropIndex = setPedHelmetPropIndex;
function setPedHelmetTextureIndex(ped, textureIndex) {
    return _in(0xf1550c4b, 0xd22582e2, ped, textureIndex);
}
exports.setPedHelmetTextureIndex = setPedHelmetTextureIndex;
function setPedHelmetVisorPropIndices(ped, p1, p2, p3) {
    return _in(0x3f732557, 0x4e41b44d, ped, p1, p2, p3);
}
exports.setPedHelmetVisorPropIndices = setPedHelmetVisorPropIndices;
function setPedHighlyPerceptive(ped, toggle) {
    return _in(0x52d59ab6, 0x1ddc05dd, ped, toggle);
}
exports.setPedHighlyPerceptive = setPedHighlyPerceptive;
function setPedIdRange(ped, value) {
    return _in(0xf107e836, 0xa70dce05, ped, _fv(value));
}
exports.setPedIdRange = setPedIdRange;
/**
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
 * @param ped
 * @param context
 */
function setPedInVehicleContext(ped, context) {
    return _in(0x53007129, 0x5899a8c6, ped, _ch(context));
}
exports.setPedInVehicleContext = setPedInVehicleContext;
function setPedIncreasedAvoidanceRadius(ped) {
    return _in(0x570389d1, 0xc3de3c6b, ped);
}
exports.setPedIncreasedAvoidanceRadius = setPedIncreasedAvoidanceRadius;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param toggle
 * @param weaponHash
 */
function setPedInfiniteAmmo(ped, toggle, weaponHash) {
    return _in(0x3edcb050, 0x5123623b, ped, toggle, _ch(weaponHash));
}
exports.setPedInfiniteAmmo = setPedInfiniteAmmo;
function setPedInfiniteAmmoClip(ped, toggle) {
    return _in(0x183dadc6, 0xaa953186, ped, toggle);
}
exports.setPedInfiniteAmmoClip = setPedInfiniteAmmoClip;
function setPedInjuredOnGroundBehaviour(ped, p1) {
    return _in(0xec4b4b3b, 0x9908052a, ped, _fv(p1));
}
exports.setPedInjuredOnGroundBehaviour = setPedInjuredOnGroundBehaviour;
function setPedInteriorWallaDensity(p0, p1) {
    return _in(0x8bf90783, 0x3be275de, _fv(p0), _fv(p1));
}
exports.setPedInteriorWallaDensity = setPedInteriorWallaDensity;
/**
 * Ped: The ped to warp.
 * vehicle: The vehicle to warp the ped into.
 * Seat_Index: [-1 is driver seat, -2 first free passenger seat]
 *
 * Moreinfo of Seat Index
 * DriverSeat = -1
 * Passenger = 0
 * Left Rear = 1
 * RightRear = 2
 * @param ped
 * @param vehicle
 * @param seatIndex
 */
function setPedIntoVehicle(ped, vehicle, seatIndex) {
    return _in(0xf75b0d62, 0x9e1c063d, ped, vehicle, seatIndex);
}
exports.setPedIntoVehicle = setPedIntoVehicle;
function setPedIsAvoidedByOthers(p0, p1) {
    return _in(0xa9b61a32, 0x9bfdcbea, p0, p1);
}
exports.setPedIsAvoidedByOthers = setPedIsAvoidedByOthers;
/**
 * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
 *
 * ====================================================
 *
 * As mentioned above, this only sets the drunk sound to ped/player.
 *
 * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
 *
 * Below is an example
 *
 * if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
 * {
 * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
 * }
 * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
 *
 *
 *
 * And to stop the effect use
 * RESET_PED_MOVEMENT_CLIPSET
 * @param ped
 * @param toggle
 */
function setPedIsDrunk(ped, toggle) {
    return _in(0x95d2d383, 0xd5396b8a, ped, toggle);
}
exports.setPedIsDrunk = setPedIsDrunk;
function setPedIsIgnoredByAutoOpenDoors(ped, p1) {
    return _in(0x33a60d8b, 0xdd6e508c, ped, p1);
}
exports.setPedIsIgnoredByAutoOpenDoors = setPedIsIgnoredByAutoOpenDoors;
function setPedKeepTask(ped, toggle) {
    return _in(0x971d3876, 0x0fbc02ef, ped, toggle);
}
exports.setPedKeepTask = setPedKeepTask;
/**
 * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
 * @param ped
 * @param mode
 */
function setPedLegIkMode(ped, mode) {
    return _in(0xc396f5b8, 0x6ff9febd, ped, mode);
}
exports.setPedLegIkMode = setPedLegIkMode;
function setPedLodMultiplier(ped, multiplier) {
    return _in(0xdc2c5c24, 0x2aac342b, ped, _fv(multiplier));
}
exports.setPedLodMultiplier = setPedLodMultiplier;
/**
 * Sets the maximum health of a ped.
 * @param ped
 * @param value
 */
function setPedMaxHealth(ped, value) {
    return _in(0xf5f6378c, 0x4f3419d3, ped, value);
}
exports.setPedMaxHealth = setPedMaxHealth;
function setPedMaxMoveBlendRatio(ped, value) {
    return _in(0x43308375, 0x0c5e064a, ped, _fv(value));
}
exports.setPedMaxMoveBlendRatio = setPedMaxMoveBlendRatio;
function setPedMaxTimeInWater(ped, value) {
    return _in(0x43c85169, 0x0662113d, ped, _fv(value));
}
exports.setPedMaxTimeInWater = setPedMaxTimeInWater;
function setPedMaxTimeUnderwater(ped, value) {
    return _in(0x6ba428c5, 0x28d9e522, ped, _fv(value));
}
exports.setPedMaxTimeUnderwater = setPedMaxTimeUnderwater;
/**
 * Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
 *
 *
 *
 * 0 - Nose Width (Thin/Wide)
 *
 * 1 - Nose Peak (Up/Down)
 *
 * 2 - Nose Length (Long/Short)
 *
 * 3 - Nose Bone Curveness (Crooked/Curved)
 *
 * 4 - Nose Tip (Up/Down)
 *
 * 5 - Nose Bone Twist (Left/Right)
 *
 * 6 - Eyebrow (Up/Down)
 *
 * 7 - Eyebrow (In/Out)
 *
 * 8 - Cheek Bones (Up/Down)
 *
 * 9 - Cheek Sideways Bone Size (In/Out)
 *
 * 10 - Cheek Bones Width (Puffed/Gaunt)
 *
 * 11 - Eye Opening (Both) (Wide/Squinted)
 *
 * 12 - Lip Thickness (Both) (Fat/Thin)
 *
 * 13 - Jaw Bone Width (Narrow/Wide)
 *
 * 14 - Jaw Bone Shape (Round/Square)
 *
 * 15 - Chin Bone (Up/Down)
 *
 * 16 - Chin Bone Length (In/Out or Backward/Forward)
 *
 * 17 - Chin Bone Shape (Pointed/Square)
 *
 * 18 - Chin Hole (Chin Bum)
 *
 * 19 - Neck Thickness (Thin/Thick)
 * @param ped
 * @param index
 * @param scale
 */
function setPedMicroMorph(ped, index, scale) {
    return _in(0x71a5c1db, 0xa060049e, ped, index, _fv(scale));
}
exports.setPedMicroMorph = setPedMicroMorph;
/**
 * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
 * @param ped
 * @param ms
 */
function setPedMinGroundTimeForStungun(ped, ms) {
    return _in(0xfa0675ab, 0x151073fa, ped, ms);
}
exports.setPedMinGroundTimeForStungun = setPedMinGroundTimeForStungun;
function setPedMinMoveBlendRatio(ped, value) {
    return _in(0x01a898d2, 0x6e2333dd, ped, _fv(value));
}
exports.setPedMinMoveBlendRatio = setPedMinMoveBlendRatio;
/**
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param modelHash
 * @param toggle
 */
function setPedModelIsSuppressed(modelHash, toggle) {
    return _in(0xe163a4bc, 0xe4de6f11, _ch(modelHash), toggle);
}
exports.setPedModelIsSuppressed = setPedModelIsSuppressed;
/**
 * Maximum possible amount of money on MP is 2000. ~JX
 *
 * -----------------------------------------------------------------------------
 *
 * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
 * @param ped
 * @param amount
 */
function setPedMoney(ped, amount) {
    return _in(0xa9c8960e, 0x8684c1b5, ped, amount);
}
exports.setPedMoney = setPedMoney;
function setPedMotionBlur(ped, toggle) {
    return _in(0x0a986918, 0xb102b448, ped, toggle);
}
exports.setPedMotionBlur = setPedMotionBlur;
/**
 * Found in the b617d scripts:
 * PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");
 * @param ped
 * @param p1
 */
function setPedMotionInCoverClipsetOverride(ped, p1) {
    return _in(0x9dba107b, 0x4937f809, ped, _ts(p1));
}
exports.setPedMotionInCoverClipsetOverride = setPedMotionInCoverClipsetOverride;
function setPedMoveAnimsBlendOut(ped) {
    return _in(0x9e8c908f, 0x41584ecd, ped);
}
exports.setPedMoveAnimsBlendOut = setPedMoveAnimsBlendOut;
function setPedMoveRateInWaterOverride(ped, p1) {
    return _in(0x0b3e35ac, 0x043707d9, ped, _fv(p1));
}
exports.setPedMoveRateInWaterOverride = setPedMoveRateInWaterOverride;
/**
 * Min: 0.00
 * Max: 10.00
 *
 * Can be used in combo with fast run cheat.
 *
 * When value is set to 10.00:
 * Sprinting without fast run cheat: 66 m/s
 * Sprinting with fast run cheat: 77 m/s
 *
 * Needs to be looped!
 *
 * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
 * @param ped
 * @param value
 */
function setPedMoveRateOverride(ped, value) {
    return _in(0x085bf80f, 0xa50a39d1, ped, _fv(value));
}
exports.setPedMoveRateOverride = setPedMoveRateOverride;
/**
 * transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
 *
 * List of movement clipsets:
 * Thanks to elsewhat for list.
 *
 * "ANIM_GROUP_MOVE_BALLISTIC"
 * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 * "clipset@move@trash_fast_turn"
 * "FEMALE_FAST_RUNNER"
 * "missfbi4prepp1_garbageman"
 * "move_characters@franklin@fire"
 * "move_characters@Jimmy@slow@"
 * "move_characters@michael@fire"
 * "move_f@flee@a"
 * "move_f@scared"
 * "move_f@sexy@a"
 * "move_heist_lester"
 * "move_injured_generic"
 * "move_lester_CaneUp"
 * "move_m@bag"
 * "MOVE_M@BAIL_BOND_NOT_TAZERED"
 * "MOVE_M@BAIL_BOND_TAZERED"
 * "move_m@brave"
 * "move_m@casual@d"
 * "move_m@drunk@moderatedrunk"
 * "MOVE_M@DRUNK@MODERATEDRUNK"
 * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 * "MOVE_M@DRUNK@VERYDRUNK"
 * "move_m@fire"
 * "move_m@gangster@var_e"
 * "move_m@gangster@var_f"
 * "move_m@gangster@var_i"
 * "move_m@JOG@"
 * "MOVE_M@PRISON_GAURD"
 * "MOVE_P_M_ONE"
 * "MOVE_P_M_ONE_BRIEFCASE"
 * "move_p_m_zero_janitor"
 * "move_p_m_zero_slow"
 * "move_ped_bucket"
 * "move_ped_crouched"
 * "move_ped_mop"
 * "MOVE_M@FEMME@"
 * "MOVE_F@FEMME@"
 * "MOVE_M@GANGSTER@NG"
 * "MOVE_F@GANGSTER@NG"
 * "MOVE_M@POSH@"
 * "MOVE_F@POSH@"
 * "MOVE_M@TOUGH_GUY@"
 * "MOVE_F@TOUGH_GUY@"
 *
 * ~ NotCrunchyTaco
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param clipSet
 * @param transitionSpeed
 */
function setPedMovementClipset(ped, clipSet, transitionSpeed) {
    return _in(0xaf8a94ed, 0xe7712bef, ped, _ts(clipSet), _fv(transitionSpeed));
}
exports.setPedMovementClipset = setPedMovementClipset;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 *
 * *untested but char *name could also be a hash for a localized string
 * @param ped
 * @param name
 */
function setPedNameDebug(ped, name) {
    return _in(0x98efa132, 0xa4117be1, ped, _ts(name));
}
exports.setPedNameDebug = setPedNameDebug;
function setPedNeverLeavesGroup(ped, toggle) {
    return _in(0x3dbfc55d, 0x5c9bb447, ped, toggle);
}
exports.setPedNeverLeavesGroup = setPedNeverLeavesGroup;
function setPedNoTimeDelayBeforeShot(p0) {
    return _in(0xa52d5247, 0xa4227e14, p0);
}
exports.setPedNoTimeDelayBeforeShot = setPedNoTimeDelayBeforeShot;
/**
 * The distance between these points, is the diagonal of a box (remember it's 3D).
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function setPedNonCreationArea(x1, y1, z1, x2, y2, z2) {
    return _in(0xee01041d, 0x559983ea, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2));
}
exports.setPedNonCreationArea = setPedNonCreationArea;
function setPedPanicExitScenario(p0, p1, p2, p3) {
    return _in(0xfe07ff64, 0x95d52e2a, p0, p1, p2, p3, _r);
}
exports.setPedPanicExitScenario = setPedPanicExitScenario;
function setPedParachuteTintIndex(ped, tintIndex) {
    return _in(0x333fc8db, 0x079b7186, ped, tintIndex);
}
exports.setPedParachuteTintIndex = setPedParachuteTintIndex;
function setPedPathAvoidFire(ped, avoidFire) {
    return _in(0x4455517b, 0x28441e60, ped, avoidFire);
}
exports.setPedPathAvoidFire = setPedPathAvoidFire;
function setPedPathCanDropFromHeight(ped, Toggle) {
    return _in(0xe361c5c7, 0x1c431a4f, ped, Toggle);
}
exports.setPedPathCanDropFromHeight = setPedPathCanDropFromHeight;
function setPedPathCanUseClimbovers(ped, Toggle) {
    return _in(0x8e06a6fe, 0x76c9eff4, ped, Toggle);
}
exports.setPedPathCanUseClimbovers = setPedPathCanUseClimbovers;
function setPedPathCanUseLadders(ped, Toggle) {
    return _in(0x77a5b103, 0xc87f476e, ped, Toggle);
}
exports.setPedPathCanUseLadders = setPedPathCanUseLadders;
/**
 * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
 * @param ped
 * @param modifier
 */
function setPedPathClimbCostModifier(ped, modifier) {
    return _in(0x88e32db8, 0xc1a4aa4b, ped, _fv(modifier));
}
exports.setPedPathClimbCostModifier = setPedPathClimbCostModifier;
function setPedPathMayEnterWater(ped, mayEnterWater) {
    return _in(0xf35425a4, 0x204367ec, ped, mayEnterWater);
}
exports.setPedPathMayEnterWater = setPedPathMayEnterWater;
function setPedPathPreferToAvoidWater(ped, avoidWater) {
    return _in(0x38fe1ec7, 0x3743793c, ped, avoidWater);
}
exports.setPedPathPreferToAvoidWater = setPedPathPreferToAvoidWater;
/**
 * p6 is always 0
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 */
function setPedPathsBackToOriginal(x1, y1, z1, x2, y2, z2, p6) {
    return _in(0xe04b48f2, 0xcc926253, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6);
}
exports.setPedPathsBackToOriginal = setPedPathsBackToOriginal;
function setPedPathsInArea(x1, y1, z1, x2, y2, z2, p6, p7) {
    return _in(0x34f060f4, 0xbf92e018, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7);
}
exports.setPedPathsInArea = setPedPathsInArea;
function setPedPhonePaletteIdx(p0, p1) {
    return _in(0x83a169ea, 0xbcdb10a2, p0, p1);
}
exports.setPedPhonePaletteIdx = setPedPhonePaletteIdx;
/**
 * i could be time. Only example in the decompiled scripts uses it as -1.
 * @param ped
 * @param pinned
 * @param i
 */
function setPedPinnedDown(ped, pinned, i) {
    return _in(0xaad6d1ac, 0xf08f4612, ped, pinned, i, _r);
}
exports.setPedPinnedDown = setPedPinnedDown;
/**
 * This native does absolutely nothing, just a nullsub
 * @param ped
 * @param toggle
 */
function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle) {
    return _in(0x94d94bf1, 0xa75aed3d, ped, toggle);
}
exports.setPedPlaysHeadOnHornAnimWhenDiesInVehicle = setPedPlaysHeadOnHornAnimWhenDiesInVehicle;
/**
 * Control how many new (ambient?) peds will spawn in the game world.
 * Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
 * @param p0
 */
function setPedPopulationBudget(p0) {
    return _in(0x8c95333c, 0xfc3340f3, p0);
}
exports.setPedPopulationBudget = setPedPopulationBudget;
function setPedPreferredCoverSet(ped, itemSet) {
    return _in(0x8421eb4d, 0xa7e391b9, ped, itemSet);
}
exports.setPedPreferredCoverSet = setPedPreferredCoverSet;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 * @param TextureId
 */
function setPedPreloadPropData(ped, componentId, drawableId, TextureId) {
    return _in(0x2b16a3bf, 0xf1fbce49, ped, componentId, drawableId, TextureId, _r, _ri);
}
exports.setPedPreloadPropData = setPedPreloadPropData;
/**
 * from extreme3.c4
 * PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
 *
 * p1 is probably componentId
 * @param ped
 * @param slot
 * @param drawableId
 * @param textureId
 */
function setPedPreloadVariationData(ped, slot, drawableId, textureId) {
    return _in(0x39d55a62, 0x0fcb6a3a, ped, slot, drawableId, textureId, _r, _ri);
}
exports.setPedPreloadVariationData = setPedPreloadVariationData;
/**
 * This is only called once in the scripts.
 *
 * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
 * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
 * PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
 * @param ped
 * @param lookAt
 */
function setPedPrimaryLookat(ped, lookAt) {
    return _in(0xcd17b554, 0x996a8d9e, ped, lookAt);
}
exports.setPedPrimaryLookat = setPedPrimaryLookat;
/**
 * ComponentId can be set to various things based on what category you're wanting to set
 * enum PedPropsData
 * {
 * PED_PROP_HATS = 0,
 * PED_PROP_GLASSES = 1,
 * PED_PROP_EARS = 2,
 * PED_PROP_WATCHES = 3,
 * };
 * Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 * @param TextureId
 * @param attach
 * @param p5
 */
function setPedPropIndex(ped, componentId, drawableId, TextureId, attach, p5) {
    return _in(0x93376b65, 0xa266eb5f, ped, componentId, drawableId, TextureId, attach, p5);
}
exports.setPedPropIndex = setPedPropIndex;
function setPedRaceAndVoiceGroup(ped, p1, voiceGroup) {
    return _in(0x1b7abe26, 0xcbcbf8c7, ped, p1, _ch(voiceGroup));
}
exports.setPedRaceAndVoiceGroup = setPedRaceAndVoiceGroup;
function setPedRagdollForceFall(ped) {
    return _in(0x01f6594b, 0x923b9251, ped);
}
exports.setPedRagdollForceFall = setPedRagdollForceFall;
/**
 * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
 * @param ped
 * @param toggle
 */
function setPedRagdollOnCollision(ped, toggle) {
    return _in(0xf0a4f1bb, 0xf4fa7497, ped, toggle);
}
exports.setPedRagdollOnCollision = setPedRagdollOnCollision;
/**
 * p1 is always 0 in R* scripts.
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 */
function setPedRandomComponentVariation(ped, p1) {
    return _in(0xc8a9481a, 0x01e63c28, ped, p1);
}
exports.setPedRandomComponentVariation = setPedRandomComponentVariation;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 */
function setPedRandomProps(ped) {
    return _in(0xc44aa053, 0x45c992c6, ped);
}
exports.setPedRandomProps = setPedRandomProps;
function setPedRelationshipGroupDefaultHash(ped, hash) {
    return _in(0xadb3f206, 0x518799e8, ped, _ch(hash));
}
exports.setPedRelationshipGroupDefaultHash = setPedRelationshipGroupDefaultHash;
function setPedRelationshipGroupHash(ped, hash) {
    return _in(0xc80a74ac, 0x829ddd92, ped, _ch(hash));
}
exports.setPedRelationshipGroupHash = setPedRelationshipGroupHash;
function setPedReserveParachuteTintIndex(ped, p1) {
    return _in(0xe88da075, 0x1c22a2ad, ped, p1);
}
exports.setPedReserveParachuteTintIndex = setPedReserveParachuteTintIndex;
/**
 * PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
 * Known values:
 * PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
 * @param ped
 * @param flagId
 * @param doReset
 */
function setPedResetFlag(ped, flagId, doReset) {
    return _in(0xc1e8a365, 0xbf3b29f2, ped, flagId, doReset);
}
exports.setPedResetFlag = setPedResetFlag;
/**
 * This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
 * @param ped
 */
function setPedScubaGearVariation(ped) {
    return _in(0x36c6984c, 0x3ed0c911, ped);
}
exports.setPedScubaGearVariation = setPedScubaGearVariation;
function setPedSeeingRange(ped, value) {
    return _in(0xf29cf591, 0xc4bf6cee, ped, _fv(value));
}
exports.setPedSeeingRange = setPedSeeingRange;
/**
 * Returns handle of the projectile.
 * @param ped
 * @param p1
 */
function setPedShootOrdnanceWeapon(ped, p1) {
    return _in(0xb4c8d77c, 0x80c0421e, ped, _fv(p1), _r, _ri);
}
exports.setPedShootOrdnanceWeapon = setPedShootOrdnanceWeapon;
/**
 * shootRate 0-1000
 * @param ped
 * @param shootRate
 */
function setPedShootRate(ped, shootRate) {
    return _in(0x614da022, 0x990752dc, ped, shootRate);
}
exports.setPedShootRate = setPedShootRate;
function setPedShootsAtCoord(ped, x, y, z, toggle) {
    return _in(0x96a05e4f, 0xb321b1ba, ped, _fv(x), _fv(y), _fv(z), toggle);
}
exports.setPedShootsAtCoord = setPedShootsAtCoord;
function setPedShouldIgnoreScenarioExitCollisionChecks(ped, p1) {
    return _in(0x425aecf1, 0x67663f48, ped, p1);
}
exports.setPedShouldIgnoreScenarioExitCollisionChecks = setPedShouldIgnoreScenarioExitCollisionChecks;
function setPedShouldIgnoreScenarioNavChecks(p0, p1) {
    return _in(0x5b6010b3, 0xcbc29095, p0, p1);
}
exports.setPedShouldIgnoreScenarioNavChecks = setPedShouldIgnoreScenarioNavChecks;
function setPedShouldPlayDirectedNormalScenarioExit(p0, p1, p2, p3) {
    return _in(0xec6935eb, 0xe0847b90, p0, p1, p2, p3, _r);
}
exports.setPedShouldPlayDirectedNormalScenarioExit = setPedShouldPlayDirectedNormalScenarioExit;
function setPedShouldPlayFleeScenarioExit(ped, p1, p2, p3) {
    return _in(0xeeed8faf, 0xec331a70, ped, p1, p2, p3, _r);
}
exports.setPedShouldPlayFleeScenarioExit = setPedShouldPlayFleeScenarioExit;
function setPedShouldPlayImmediateScenarioExit(ped) {
    return _in(0xf1c03a53, 0x52243a30, ped);
}
exports.setPedShouldPlayImmediateScenarioExit = setPedShouldPlayImmediateScenarioExit;
function setPedShouldPlayNormalScenarioExit(ped) {
    return _in(0xa3a9299c, 0x4f2adb98, ped);
}
exports.setPedShouldPlayNormalScenarioExit = setPedShouldPlayNormalScenarioExit;
function setPedShouldProbeForScenarioExitsInOneFrame(p0, p1) {
    return _in(0xceda60a7, 0x4219d064, p0, p1);
}
exports.setPedShouldProbeForScenarioExitsInOneFrame = setPedShouldProbeForScenarioExitsInOneFrame;
function setPedSphereDefensiveArea(ped, x, y, z, radius, p5, p6) {
    return _in(0x9d3151a3, 0x73974804, ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5, p6);
}
exports.setPedSphereDefensiveArea = setPedSphereDefensiveArea;
function setPedStayInVehicleWhenJacked(ped, toggle) {
    return _in(0xedf4079f, 0x9d54c9a1, ped, toggle);
}
exports.setPedStayInVehicleWhenJacked = setPedStayInVehicleWhenJacked;
/**
 * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
 * @param ped
 * @param p1
 * @param action
 */
function setPedStealthMovement(ped, p1, action) {
    return _in(0x88cbb5ce, 0xb96b7bd2, ped, p1, _ts(action));
}
exports.setPedStealthMovement = setPedStealthMovement;
function setPedSteerBias(ped, value) {
    return _in(0x288df530, 0xc92dad6f, ped, _fv(value));
}
exports.setPedSteerBias = setPedSteerBias;
function setPedSteersAroundDeadBodies(ped, toggle) {
    return _in(0x2016c603, 0xd6b8987c, ped, toggle);
}
exports.setPedSteersAroundDeadBodies = setPedSteersAroundDeadBodies;
function setPedSteersAroundObjects(ped, toggle) {
    return _in(0x1509c089, 0xadc208bf, ped, toggle);
}
exports.setPedSteersAroundObjects = setPedSteersAroundObjects;
function setPedSteersAroundPeds(ped, toggle) {
    return _in(0x46f2193b, 0x3ad1d891, ped, toggle);
}
exports.setPedSteersAroundPeds = setPedSteersAroundPeds;
function setPedSteersAroundVehicles(ped, toggle) {
    return _in(0xeb6fb9d4, 0x8dde23ec, ped, toggle);
}
exports.setPedSteersAroundVehicles = setPedSteersAroundVehicles;
/**
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param clipSet
 */
function setPedStrafeClipset(ped, clipSet) {
    return _in(0x29a28f3f, 0x8cf6d854, ped, _ts(clipSet));
}
exports.setPedStrafeClipset = setPedStrafeClipset;
function setPedStunGunFiniteAmmo(p0, p1) {
    return _in(0x24c024ba, 0x8379a70a, p0, p1);
}
exports.setPedStunGunFiniteAmmo = setPedStunGunFiniteAmmo;
/**
 * Ped no longer takes critical damage modifiers if set to FALSE.
 * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
 * @param ped
 * @param toggle
 */
function setPedSuffersCriticalHits(ped, toggle) {
    return _in(0xebd76f23, 0x59f190ac, ped, toggle);
}
exports.setPedSuffersCriticalHits = setPedSuffersCriticalHits;
/**
 * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
 * @param ped
 * @param sweat
 */
function setPedSweat(ped, sweat) {
    return _in(0x27b0405f, 0x59637d1f, ped, _fv(sweat));
}
exports.setPedSweat = setPedSweat;
/**
 * enum eTargetLossResponseType
 * {
 * TLR_ExitTask,
 * TLR_NeverLoseTarget,
 * TLR_SearchForTarget
 * };
 * @param ped
 * @param responseType
 */
function setPedTargetLossResponse(ped, responseType) {
    return _in(0x0703b907, 0x9823da4a, ped, responseType);
}
exports.setPedTargetLossResponse = setPedTargetLossResponse;
function setPedToInformRespectedFriends(ped, radius, maxFriends) {
    return _in(0x112942c6, 0xe708f70b, ped, _fv(radius), maxFriends);
}
exports.setPedToInformRespectedFriends = setPedToInformRespectedFriends;
function setPedToLoadCover(ped, toggle) {
    return _in(0x332b562e, 0xeda62399, ped, toggle);
}
exports.setPedToLoadCover = setPedToLoadCover;
/**
 * p4/p5: Unused in TU27
 * Ragdoll Types:
 * **0**: CTaskNMRelax
 * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
 * **Else**: CTaskNMBalance
 * time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
 *
 * time2- Unknown time, in milliseconds
 *
 * ragdollType-
 * 0 : Normal ragdoll
 * 1 : Falls with stiff legs/body
 * 2 : Narrow leg stumble(may not fall)
 * 3 : Wide leg stumble(may not fall)
 *
 * p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
 *
 *
 *
 *
 * EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
 *
 * Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
 * @param ped
 * @param time1
 * @param time2
 * @param ragdollType
 * @param p4
 * @param p5
 * @param p6
 */
function setPedToRagdoll(ped, time1, time2, ragdollType, p4, p5, p6) {
    return _in(0xae99fb95, 0x5581844a, ped, time1, time2, ragdollType, p4, p5, p6, _r);
}
exports.setPedToRagdoll = setPedToRagdoll;
/**
 * Return variable is never used in R*'s scripts.
 *
 * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
 *
 * enum eRagdollType
 * {
 * RD_MALE=0,
 * RD_FEMALE = 1,
 * RD_MALE_LARGE = 2,
 * RD_CUSTOM = 3,
 * }
 *
 * x, y, and z are coordinates, most likely to where the ped will fall.
 *
 * p8 to p13 are always 0f in R*'s scripts.
 *
 * (Simplified) Example of the usage of the function from R*'s scripts:
 * ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
 *
 * @param ped
 * @param time
 * @param p2
 * @param ragdollType
 * @param x
 * @param y
 * @param z
 * @param velocity
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
function setPedToRagdollWithFall(ped, time, p2, ragdollType, x, y, z, velocity, p8, p9, p10, p11, p12, p13) {
    return _in(0xd76632d9, 0x9e4966c8, ped, time, p2, ragdollType, _fv(x), _fv(y), _fv(z), _fv(velocity), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13), _r);
}
exports.setPedToRagdollWithFall = setPedToRagdollWithFall;
function setPedTreatedAsFriendly(p0, p1, p2) {
    return _in(0x0f626193, 0x93661d6e, p0, p1, p2);
}
exports.setPedTreatedAsFriendly = setPedTreatedAsFriendly;
function setPedUpperBodyDamageOnly(ped, toggle) {
    return _in(0xafc976fd, 0x0580c7b3, ped, toggle);
}
exports.setPedUpperBodyDamageOnly = setPedUpperBodyDamageOnly;
/**
 * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
 * @param ped
 * @param p1
 * @param p2
 * @param action
 */
function setPedUsingActionMode(ped, p1, p2, action) {
    return _in(0xd75accf5, 0xe0fb5367, ped, p1, p2, _ts(action));
}
exports.setPedUsingActionMode = setPedUsingActionMode;
/**
 * seatIndex must be <= 2
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param flags
 * @param p4
 */
function setPedVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags, p4) {
    return _in(0x952f06be, 0xecd775cc, ped, vehicle, seatIndex, flags, p4);
}
exports.setPedVehicleForcedSeatUsage = setPedVehicleForcedSeatUsage;
function setPedVisualFieldCenterAngle(ped, angle) {
    return _in(0x3b6405e8, 0xab34a907, ped, _fv(angle));
}
exports.setPedVisualFieldCenterAngle = setPedVisualFieldCenterAngle;
function setPedVisualFieldMaxAngle(ped, value) {
    return _in(0x70793bdc, 0xa1e854d4, ped, _fv(value));
}
exports.setPedVisualFieldMaxAngle = setPedVisualFieldMaxAngle;
/**
 * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
 * @param ped
 * @param angle
 */
function setPedVisualFieldMaxElevationAngle(ped, angle) {
    return _in(0x78d0b676, 0x29d75856, ped, _fv(angle));
}
exports.setPedVisualFieldMaxElevationAngle = setPedVisualFieldMaxElevationAngle;
function setPedVisualFieldMinAngle(ped, value) {
    return _in(0x2db49222, 0x2fb21e26, ped, _fv(value));
}
exports.setPedVisualFieldMinAngle = setPedVisualFieldMinAngle;
/**
 * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
 * -90f should let the ped see 90 degrees below them, for example.
 * @param ped
 * @param angle
 */
function setPedVisualFieldMinElevationAngle(ped, angle) {
    return _in(0x7a276eb2, 0xc224d70f, ped, _fv(angle));
}
exports.setPedVisualFieldMinElevationAngle = setPedVisualFieldMinElevationAngle;
function setPedVisualFieldPeripheralRange(ped, range) {
    return _in(0x9c74b0bc, 0x831b753a, ped, _fv(range));
}
exports.setPedVisualFieldPeripheralRange = setPedVisualFieldPeripheralRange;
/**
 * Assigns some ambient voice to the ped.
 * @param ped
 */
function setPedVoiceFull(ped) {
    return _in(0x40cf0d12, 0xd142a9e8, ped);
}
exports.setPedVoiceFull = setPedVoiceFull;
/**
 * From the scripts:
 *
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
 * @param ped
 * @param voiceGroupHash
 */
function setPedVoiceGroup(ped, voiceGroupHash) {
    return _in(0x7cdc8c3b, 0x89f661b3, ped, _ch(voiceGroupHash));
}
exports.setPedVoiceGroup = setPedVoiceGroup;
/**
 * Dat151RelType == 29
 * @param ped
 * @param voiceGroupHash
 */
function setPedVoiceGroupFromRaceToPvg(ped, voiceGroupHash) {
    return _in(0x0babc134, 0x5abbfb16, ped, _ch(voiceGroupHash));
}
exports.setPedVoiceGroupFromRaceToPvg = setPedVoiceGroupFromRaceToPvg;
function setPedWallaDensity(p0, p1) {
    return _in(0x149aee66, 0xf0cb3a99, _fv(p0), _fv(p1));
}
exports.setPedWallaDensity = setPedWallaDensity;
function setPedWaypointRouteOffset(ped, x, y, z) {
    return _in(0xed98e10b, 0x0afce4b4, ped, _fv(x), _fv(y), _fv(z), _r);
}
exports.setPedWaypointRouteOffset = setPedWaypointRouteOffset;
/**
 * Colors:
 * 0 = Gray
 * 1 = Dark Gray
 * 2 = Black
 * 3 = White
 * 4 = Blue
 * 5 = Cyan
 * 6 = Aqua
 * 7 = Cool Blue
 * 8 = Dark Blue
 * 9 = Royal Blue
 * 10 = Plum
 * 11 = Dark Purple
 * 12 = Purple
 * 13 = Red
 * 14 = Wine Red
 * 15 = Magenta
 * 16 = Pink
 * 17 = Salmon
 * 18 = Hot Pink
 * 19 = Rust Orange
 * 20 = Brown
 * 21 = Earth
 * 22 = Orange
 * 23 = Light Orange
 * 24 = Dark Yellow
 * 25 = Yellow
 * 26 = Light Brown
 * 27 = Lime Green
 * 28 = Olive
 * 29 = Moss
 * 30 = Turquoise
 * 31 = Dark Green
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 * @param colorIndex
 */
function setPedWeaponComponentTintIndex(ped, weaponHash, camoComponentHash, colorIndex) {
    return _in(0x9fe56338, 0x80ecd8ed, ped, _ch(weaponHash), _ch(camoComponentHash), colorIndex);
}
exports.setPedWeaponComponentTintIndex = setPedWeaponComponentTintIndex;
function setPedWeaponMovementClipset(ped, clipSet) {
    return _in(0x2622e35b, 0x77d3aca2, ped, _ts(clipSet));
}
exports.setPedWeaponMovementClipset = setPedWeaponMovementClipset;
/**
 * tintIndex can be the following:
 *
 * 0 - Normal
 * 1 - Green
 * 2 - Gold
 * 3 - Pink
 * 4 - Army
 * 5 - LSPD
 * 6 - Orange
 * 7 - Platinum
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param tintIndex
 */
function setPedWeaponTintIndex(ped, weaponHash, tintIndex) {
    return _in(0x50969b9b, 0x89ed5738, ped, _ch(weaponHash), tintIndex);
}
exports.setPedWeaponTintIndex = setPedWeaponTintIndex;
function setPedWetness(ped, wetLevel) {
    return _in(0xac0bb4d8, 0x7777cae2, ped, _fv(wetLevel));
}
exports.setPedWetness = setPedWetness;
/**
 * combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
 * @param ped
 */
function setPedWetnessEnabledThisFrame(ped) {
    return _in(0xb5485e49, 0x07b53019, ped);
}
exports.setPedWetnessEnabledThisFrame = setPedWetnessEnabledThisFrame;
/**
 * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
 *
 *
 * @param ped
 * @param height
 */
function setPedWetnessHeight(ped, height) {
    return _in(0x44cb6447, 0xd2571aa0, ped, _fv(height));
}
exports.setPedWetnessHeight = setPedWetnessHeight;
function setPedWillOnlyAttackWantedPlayer(p0, p1) {
    return _in(0x3e9679c1, 0xdfcf422c, p0, p1);
}
exports.setPedWillOnlyAttackWantedPlayer = setPedWillOnlyAttackWantedPlayer;
/**
 * Sets some bit and float of vehicle. float is >= 0
 * @param vehicle
 * @param toggle
 * @param p2
 */
function setPedsCanFallOffThisVehicleFromLargeFallDamage(vehicle, toggle, p2) {
    return _in(0x59c3757b, 0x3b7408e8, vehicle, toggle, _fv(p2));
}
exports.setPedsCanFallOffThisVehicleFromLargeFallDamage = setPedsCanFallOffThisVehicleFromLargeFallDamage;
function setPickUpByCargobobDisabled(entity, toggle) {
    return _in(0xd7b80e7c, 0x3befc396, entity, toggle);
}
exports.setPickUpByCargobobDisabled = setPickUpByCargobobDisabled;
function setPickupAmmoAmountScaler(p0) {
    return _in(0xe620fd35, 0x12a04f18, _fv(p0));
}
exports.setPickupAmmoAmountScaler = setPickupAmmoAmountScaler;
function setPickupCollidesWithProjectiles(p0, p1) {
    return _in(0xcea7c8e1, 0xb48ff68c, p0, p1);
}
exports.setPickupCollidesWithProjectiles = setPickupCollidesWithProjectiles;
function setPickupGenerationRangeMultiplier(multiplier) {
    return _in(0x318516e0, 0x2de3ece2, _fv(multiplier));
}
exports.setPickupGenerationRangeMultiplier = setPickupGenerationRangeMultiplier;
/**
 * p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
 * @param pickup
 * @param p1
 */
function setPickupGlowOffset(pickup, p1) {
    return _in(0x0596843b, 0x34b95ce5, pickup, _fv(p1));
}
exports.setPickupGlowOffset = setPickupGlowOffset;
function setPickupHiddenWhenUncollectable(pickup, toggle) {
    return _in(0x3ed2b83a, 0xb2e82799, pickup, toggle);
}
exports.setPickupHiddenWhenUncollectable = setPickupHiddenWhenUncollectable;
/**
 * p0 is either 0 or 50 in scripts.
 * @param p0
 */
function setPickupObjectAlphaWhenTransparent(p0) {
    return _in(0x8cff648f, 0xbd7330f1, p0);
}
exports.setPickupObjectAlphaWhenTransparent = setPickupObjectAlphaWhenTransparent;
function setPickupObjectArrowMarker(pickup, toggle) {
    return _in(0x39a5fb7e, 0xaf150840, pickup, toggle);
}
exports.setPickupObjectArrowMarker = setPickupObjectArrowMarker;
function setPickupObjectCollectableInVehicle(pickup) {
    return _in(0x7813e8b8, 0xc4ae4799, pickup);
}
exports.setPickupObjectCollectableInVehicle = setPickupObjectCollectableInVehicle;
/**
 * p1 is always -0.2 in scripts and p2 is always true in scripts.
 * @param pickup
 * @param p1
 * @param p2
 */
function setPickupObjectGlowOffset(pickup, p1, p2) {
    return _in(0xa08fe5e4, 0x9bdc39dd, pickup, _fv(p1), p2);
}
exports.setPickupObjectGlowOffset = setPickupObjectGlowOffset;
function setPickupObjectGlowWhenUncollectable(pickup, toggle) {
    return _in(0x27f248c3, 0xfebfaad3, pickup, toggle);
}
exports.setPickupObjectGlowWhenUncollectable = setPickupObjectGlowWhenUncollectable;
function setPickupObjectTransparentWhenUncollectable(pickup, toggle) {
    return _in(0x8881c98a, 0x31117998, pickup, toggle);
}
exports.setPickupObjectTransparentWhenUncollectable = setPickupObjectTransparentWhenUncollectable;
function setPickupRegenerationTime(pickup, duration) {
    return _in(0x78015c9b, 0x4b3ecc9d, pickup, duration);
}
exports.setPickupRegenerationTime = setPickupRegenerationTime;
/**
 * min: 1.9f, max: 100.0f
 * @param cargobob
 * @param length1
 * @param length2
 * @param p3
 */
function setPickupRopeLengthForCargobob(cargobob, length1, length2, p3) {
    return _in(0x877c1eae, 0xac531023, cargobob, _fv(length1), _fv(length2), p3);
}
exports.setPickupRopeLengthForCargobob = setPickupRopeLengthForCargobob;
function setPickupRopeLengthWithoutCreatingRopeForCargobob(p0, p1, p2) {
    return _in(0xc0ed6438, 0xe6d39ba8, p0, p1, p2);
}
exports.setPickupRopeLengthWithoutCreatingRopeForCargobob = setPickupRopeLengthWithoutCreatingRopeForCargobob;
function setPickupTrackDamageEvents(pickup, toggle) {
    return _in(0xbffe53ae, 0x7e67fcdc, pickup, toggle);
}
exports.setPickupTrackDamageEvents = setPickupTrackDamageEvents;
function setPickupTransparentWhenUncollectable(pickup, toggle) {
    return _in(0x858ec9fd, 0x25de04aa, pickup, toggle);
}
exports.setPickupTransparentWhenUncollectable = setPickupTransparentWhenUncollectable;
function setPickupUncollectable(pickup, toggle) {
    return _in(0x1c1b69fa, 0xe509ba97, pickup, toggle);
}
exports.setPickupUncollectable = setPickupUncollectable;
/**
 * Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
 * @param vehicle
 * @param health
 */
function setPlaneEngineHealth(vehicle, health) {
    return _in(0x2a86a047, 0x5b6a1434, vehicle, _fv(health));
}
exports.setPlaneEngineHealth = setPlaneEngineHealth;
function setPlanePropellerHealth(plane, health) {
    return _in(0x4c815eb1, 0x75086f84, plane, _fv(health), _r);
}
exports.setPlanePropellerHealth = setPlanePropellerHealth;
function setPlaneResistToExplosion(vehicle, toggle) {
    return _in(0xe16142b9, 0x4664defd, vehicle, toggle);
}
exports.setPlaneResistToExplosion = setPlaneResistToExplosion;
function setPlaneSectionDamageScale(vehicle, p1, p2) {
    return _in(0x0bbb9a7a, 0x8ffe931b, vehicle, p1, p2);
}
exports.setPlaneSectionDamageScale = setPlaneSectionDamageScale;
/**
 * This native sets the turbulence multiplier. It only works for planes.
 * 0.0 = no turbulence at all.
 * 1.0 = heavy turbulence.
 * Works by just calling it once, does not need to be called every tick.
 * @param vehicle
 * @param multiplier
 */
function setPlaneTurbulenceMultiplier(vehicle, multiplier) {
    return _in(0xad2d28a1, 0xafdff131, vehicle, _fv(multiplier));
}
exports.setPlaneTurbulenceMultiplier = setPlaneTurbulenceMultiplier;
function setPlaybackSpeed(vehicle, speed) {
    return _in(0x6683ab88, 0x0e427778, vehicle, _fv(speed));
}
exports.setPlaybackSpeed = setPlaybackSpeed;
/**
 * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
 * @param vehicle
 * @param drivingStyle
 */
function setPlaybackToUseAi(vehicle, drivingStyle) {
    return _in(0xa549c3b3, 0x7ea28131, vehicle, drivingStyle);
}
exports.setPlaybackToUseAi = setPlaybackToUseAi;
/**
 * Time is number of milliseconds before reverting, zero for indefinitely.
 * @param vehicle
 * @param time
 * @param drivingStyle
 * @param p3
 */
function setPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle, p3) {
    return _in(0x6e63860b, 0xbb190730, vehicle, time, drivingStyle, p3);
}
exports.setPlaybackToUseAiTryToRevertBackLater = setPlaybackToUseAiTryToRevertBackLater;
function setPlayerAngry(ped, toggle) {
    return _in(0xea241bb0, 0x4110f091, ped, toggle);
}
exports.setPlayerAngry = setPlayerAngry;
function setPlayerBluetoothState(player, state) {
    return _in(0x5dc40a88, 0x69c22141, player, state);
}
exports.setPlayerBluetoothState = setPlayerBluetoothState;
/**
 * Sets whether this player can be hassled by gangs.
 * @param player
 * @param toggle
 */
function setPlayerCanBeHassledByGangs(player, toggle) {
    return _in(0xd5e460ad, 0x7020a246, player, toggle);
}
exports.setPlayerCanBeHassledByGangs = setPlayerCanBeHassledByGangs;
function setPlayerCanCollectDroppedMoney(player, p1) {
    return _in(0xcac57395, 0xb151135f, player, p1);
}
exports.setPlayerCanCollectDroppedMoney = setPlayerCanCollectDroppedMoney;
function setPlayerCanDamagePlayer(player1, player2, toggle) {
    return _in(0x55fcc0c3, 0x90620314, player1, player2, toggle);
}
exports.setPlayerCanDamagePlayer = setPlayerCanDamagePlayer;
/**
 * Set whether this player should be able to do drive-bys.
 *
 * "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
 *
 * @param player
 * @param toggle
 */
function setPlayerCanDoDriveBy(player, toggle) {
    return _in(0x6e8834b5, 0x2ec20c77, player, toggle);
}
exports.setPlayerCanDoDriveBy = setPlayerCanDoDriveBy;
function setPlayerCanLeaveParachuteSmokeTrail(player, enabled) {
    return _in(0xf401b182, 0xdba8af53, player, enabled);
}
exports.setPlayerCanLeaveParachuteSmokeTrail = setPlayerCanLeaveParachuteSmokeTrail;
/**
 * Sets whether this player can take cover.
 * @param player
 * @param toggle
 */
function setPlayerCanUseCover(player, toggle) {
    return _in(0xd465a859, 0x9dff6814, player, toggle);
}
exports.setPlayerCanUseCover = setPlayerCanUseCover;
/**
 * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
 * @param value
 */
function setPlayerClothLockCounter(value) {
    return _in(0x14d913b7, 0x77dff5da, value);
}
exports.setPlayerClothLockCounter = setPlayerClothLockCounter;
/**
 * Every occurrence was either 0 or 2.
 * @param index
 */
function setPlayerClothPackageIndex(index) {
    return _in(0x9f7bba2e, 0xa6372500, index);
}
exports.setPlayerClothPackageIndex = setPlayerClothPackageIndex;
function setPlayerClothPinFrames(player, p1) {
    return _in(0x749faddf, 0x97dfe930, player, p1);
}
exports.setPlayerClothPinFrames = setPlayerClothPinFrames;
/**
 * Flags:
 * SPC_AMBIENT_SCRIPT = (1 << 1),
 * SPC_CLEAR_TASKS = (1 << 2),
 * SPC_REMOVE_FIRES = (1 << 3),
 * SPC_REMOVE_EXPLOSIONS = (1 << 4),
 * SPC_REMOVE_PROJECTILES = (1 << 5),
 * SPC_DEACTIVATE_GADGETS = (1 << 6),
 * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
 * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
 * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
 * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
 * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
 * SPC_ALLOW_PAD_SHAKE = (1 << 12)
 *
 * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
 * @param player
 * @param bHasControl
 * @param flags
 */
function setPlayerControl(player, bHasControl, flags) {
    return _in(0x8d32347d, 0x6d4c40a2, player, bHasControl, flags);
}
exports.setPlayerControl = setPlayerControl;
function setPlayerExplosiveDamageModifier(player, p1) {
    return _in(0xd821056b, 0x9acf8052, player, p1);
}
exports.setPlayerExplosiveDamageModifier = setPlayerExplosiveDamageModifier;
function setPlayerFallDistanceToTriggerRagdollOverride(player, p1) {
    return _in(0xefd79fa8, 0x1dfba9cb, player, _fv(p1));
}
exports.setPlayerFallDistanceToTriggerRagdollOverride = setPlayerFallDistanceToTriggerRagdollOverride;
function setPlayerForceSkipAimIntro(player, toggle) {
    return _in(0x7651bc64, 0xae59e128, player, toggle);
}
exports.setPlayerForceSkipAimIntro = setPlayerForceSkipAimIntro;
function setPlayerForcedAim(player, toggle) {
    return _in(0x0fee4f80, 0xac44a726, player, toggle);
}
exports.setPlayerForcedAim = setPlayerForcedAim;
function setPlayerForcedZoom(player, toggle) {
    return _in(0x75e7d505, 0xf2b15902, player, toggle);
}
exports.setPlayerForcedZoom = setPlayerForcedZoom;
function setPlayerHasReserveParachute(player) {
    return _in(0x7ddab28d, 0x31fac363, player);
}
exports.setPlayerHasReserveParachute = setPlayerHasReserveParachute;
function setPlayerHealthRechargeMaxPercent(player, limit) {
    return _in(0xc388a0f0, 0x65f5bc34, player, _fv(limit));
}
exports.setPlayerHealthRechargeMaxPercent = setPlayerHealthRechargeMaxPercent;
/**
 * `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
 * Use 1.0 to reset it back to normal
 * @param player
 * @param regenRate
 */
function setPlayerHealthRechargeMultiplier(player, regenRate) {
    return _in(0x5db660b3, 0x8dd98a31, player, _fv(regenRate));
}
exports.setPlayerHealthRechargeMultiplier = setPlayerHealthRechargeMultiplier;
function setPlayerHomingDisabledForAllVehicleWeapons(p0, p1) {
    return _in(0xee4ebdd2, 0x593ba844, p0, p1);
}
exports.setPlayerHomingDisabledForAllVehicleWeapons = setPlayerHomingDisabledForAllVehicleWeapons;
function setPlayerIconColour(color) {
    return _in(0x7b21e0bb, 0x01e8224a, color);
}
exports.setPlayerIconColour = setPlayerIconColour;
/**
 * Simply sets you as invincible (Health will not deplete).
 *
 * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
 * *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
 * @param player
 * @param toggle
 */
function setPlayerInvincible(player, toggle) {
    return _in(0x239528ea, 0xcdc3e7de, player, toggle);
}
exports.setPlayerInvincible = setPlayerInvincible;
function setPlayerInvincibleButHasReactions(player, toggle) {
    return _in(0x6bc97f4f, 0x4bb3c04b, player, toggle);
}
exports.setPlayerInvincibleButHasReactions = setPlayerInvincibleButHasReactions;
function setPlayerInvisibleLocally(player, bIncludePlayersVehicle) {
    return _in(0x12b37d54, 0x667db0b8, player, bIncludePlayersVehicle);
}
exports.setPlayerInvisibleLocally = setPlayerInvisibleLocally;
/**
 * If toggle is true, the ped's head is shown in the pause menu
 * If toggle is false, the ped's head is not shown in the pause menu
 * @param toggle
 */
function setPlayerIsInAnimalForm(toggle) {
    return _in(0x4ebb7e87, 0xaa0dbed4, toggle);
}
exports.setPlayerIsInAnimalForm = setPlayerIsInAnimalForm;
/**
 * If toggle is true, hides special ability bar / character name in the pause menu
 * If toggle is false, shows special ability bar / character name in the pause menu
 * @param toggle
 */
function setPlayerIsInDirectorMode(toggle) {
    return _in(0x80851937, 0x3fd336a3, toggle);
}
exports.setPlayerIsInDirectorMode = setPlayerIsInDirectorMode;
function setPlayerIsRepeatingAMission(toggle) {
    return _in(0x9d8d44ad, 0xbba61ef2, toggle);
}
exports.setPlayerIsRepeatingAMission = setPlayerIsRepeatingAMission;
function setPlayerLeavePedBehind(player, toggle) {
    return _in(0xff300c76, 0x49724a0b, player, toggle);
}
exports.setPlayerLeavePedBehind = setPlayerLeavePedBehind;
/**
 * Example from fm_mission_controler.ysc.c4:
 *
 * PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
 *
 * All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
 *
 * No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
 * @param player
 * @param toggle
 */
function setPlayerLockon(player, toggle) {
    return _in(0x5c8b2f45, 0x0ee4328e, player, toggle);
}
exports.setPlayerLockon = setPlayerLockon;
/**
 * Affects the range of auto aim target.
 * @param player
 * @param range
 */
function setPlayerLockonRangeOverride(player, range) {
    return _in(0x29961d49, 0x0e5814fd, player, _fv(range));
}
exports.setPlayerLockonRangeOverride = setPlayerLockonRangeOverride;
/**
 * Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
 * @param player
 * @param value
 */
function setPlayerMaxArmour(player, value) {
    return _in(0x77dfccf5, 0x948b8c71, player, value);
}
exports.setPlayerMaxArmour = setPlayerMaxArmour;
function setPlayerMaxExplosiveDamage(player, p1) {
    return _in(0x8d768602, 0xadef2245, player, _fv(p1));
}
exports.setPlayerMaxExplosiveDamage = setPlayerMaxExplosiveDamage;
function setPlayerMayNotEnterAnyVehicle(player) {
    return _in(0x1de37bbf, 0x9e9cc14a, player);
}
exports.setPlayerMayNotEnterAnyVehicle = setPlayerMayNotEnterAnyVehicle;
function setPlayerMayOnlyEnterThisVehicle(player, vehicle) {
    return _in(0x8026ff78, 0xf208978a, player, vehicle);
}
exports.setPlayerMayOnlyEnterThisVehicle = setPlayerMayOnlyEnterThisVehicle;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 * @param p2
 */
function setPlayerMeleeWeaponDamageModifier(player, modifier, p2) {
    return _in(0x4a3dc7ec, 0xcc321032, player, _fv(modifier), p2);
}
exports.setPlayerMeleeWeaponDamageModifier = setPlayerMeleeWeaponDamageModifier;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
function setPlayerMeleeWeaponDefenseModifier(player, modifier) {
    return _in(0xae540335, 0xb4abc4e2, player, _fv(modifier));
}
exports.setPlayerMeleeWeaponDefenseModifier = setPlayerMeleeWeaponDefenseModifier;
/**
 * Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
 * Make sure to request the model first and wait until it has loaded.
 * @param player
 * @param model
 */
function setPlayerModel(player, model) {
    return _in(0x00a1cadd, 0x00108836, player, _ch(model));
}
exports.setPlayerModel = setPlayerModel;
function setPlayerNoiseMultiplier(player, multiplier) {
    return _in(0xdb89ef50, 0xff25fce9, player, _fv(multiplier));
}
exports.setPlayerNoiseMultiplier = setPlayerNoiseMultiplier;
function setPlayerParachuteModelOverride(player, model) {
    return _in(0x977db464, 0x1f6fc3db, player, _ch(model));
}
exports.setPlayerParachuteModelOverride = setPlayerParachuteModelOverride;
function setPlayerParachutePackModelOverride(player, model) {
    return _in(0xdc80a4c2, 0xf18a2b64, player, _ch(model));
}
exports.setPlayerParachutePackModelOverride = setPlayerParachutePackModelOverride;
/**
 * tints 0- 13
 * 0 - unkown
 * 1 - unkown
 * 2 - unkown
 * 3 - unkown
 * 4 - unkown
 * @param player
 * @param tintIndex
 */
function setPlayerParachutePackTintIndex(player, tintIndex) {
    return _in(0x93b0fb27, 0xc9a04060, player, tintIndex);
}
exports.setPlayerParachutePackTintIndex = setPlayerParachutePackTintIndex;
function setPlayerParachuteSmokeTrailColor(player, r, g, b) {
    return _in(0x8217fd37, 0x1a4625cf, player, r, g, b);
}
exports.setPlayerParachuteSmokeTrailColor = setPlayerParachuteSmokeTrailColor;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 *
 * @param player
 * @param tintIndex
 */
function setPlayerParachuteTintIndex(player, tintIndex) {
    return _in(0xa3d0e545, 0x41d9a5e5, player, tintIndex);
}
exports.setPlayerParachuteTintIndex = setPlayerParachuteTintIndex;
/**
 * p1 was always 5.
 * p4 was always false.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
function setPlayerParachuteVariationOverride(player, p1, p2, p3, p4) {
    return _in(0xd9284a8c, 0x0d48352c, player, p1, p2, p3, p4);
}
exports.setPlayerParachuteVariationOverride = setPlayerParachuteVariationOverride;
/**
 * Disabling/enabling a player from getting pickups. From the scripts:
 *
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
 *
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param player
 * @param pickupHash
 * @param toggle
 */
function setPlayerPermittedToCollectPickupsOfType(player, pickupHash, toggle) {
    return _in(0x616093ec, 0x6b139dd9, player, _ch(pickupHash), toggle);
}
exports.setPlayerPermittedToCollectPickupsOfType = setPlayerPermittedToCollectPickupsOfType;
/**
 * example:
 *
 * flags: 0-6
 *
 * PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
 *
 * wouldnt the flag be the seatIndex?
 * @param player
 * @param flags
 */
function setPlayerPhonePaletteIdx(player, flags) {
    return _in(0x11d5f725, 0xf0e780e0, player, flags);
}
exports.setPlayerPhonePaletteIdx = setPlayerPhonePaletteIdx;
function setPlayerPreviousVariationData(player, p1, p2, p3, p4, p5) {
    return _in(0x7bae6877, 0x5557ae0b, player, p1, p2, p3, p4, p5);
}
exports.setPlayerPreviousVariationData = setPlayerPreviousVariationData;
function setPlayerReserveParachuteModelOverride(player, model) {
    return _in(0x0764486a, 0xede748db, player, _ch(model));
}
exports.setPlayerReserveParachuteModelOverride = setPlayerReserveParachuteModelOverride;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param index
 */
function setPlayerReserveParachuteTintIndex(player, index) {
    return _in(0xaf04c87f, 0x5dc1df38, player, index);
}
exports.setPlayerReserveParachuteTintIndex = setPlayerReserveParachuteTintIndex;
function setPlayerShortSwitchStyle(p0) {
    return _in(0x5f2013f8, 0xbc24ee69, p0);
}
exports.setPlayerShortSwitchStyle = setPlayerShortSwitchStyle;
function setPlayerSimulateAiming(player, toggle) {
    return _in(0xc54c95da, 0x968ec5b5, player, toggle);
}
exports.setPlayerSimulateAiming = setPlayerSimulateAiming;
/**
 * Values around 1.0f to 2.0f used in game scripts.
 * @param player
 * @param multiplier
 */
function setPlayerSneakingNoiseMultiplier(player, multiplier) {
    return _in(0xb2c1a295, 0x88a9f47c, player, _fv(multiplier));
}
exports.setPlayerSneakingNoiseMultiplier = setPlayerSneakingNoiseMultiplier;
function setPlayerSpectatedVehicleRadioOverride(p0) {
    return _in(0x2f7ceb65, 0x20288061, p0);
}
exports.setPlayerSpectatedVehicleRadioOverride = setPlayerSpectatedVehicleRadioOverride;
function setPlayerSprint(player, toggle) {
    return _in(0xa01b8075, 0xd8b92df4, player, toggle);
}
exports.setPlayerSprint = setPlayerSprint;
function setPlayerStealthPerceptionModifier(player, value) {
    return _in(0x4e9021c1, 0xfcdd507a, player, _fv(value));
}
exports.setPlayerStealthPerceptionModifier = setPlayerStealthPerceptionModifier;
/**
 * All names can be found in playerswitchestablishingshots.meta
 * @param name
 */
function setPlayerSwitchEstablishingShot(name) {
    return _in(0x0fde9dbf, 0xc0a6bc65, _ts(name));
}
exports.setPlayerSwitchEstablishingShot = setPlayerSwitchEstablishingShot;
function setPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder) {
    return _in(0xc208b673, 0xce446b61, _fv(cameraCoordX), _fv(cameraCoordY), _fv(cameraCoordZ), _fv(camRotationX), _fv(camRotationY), _fv(camRotationZ), _fv(camFov), _fv(camFarClip), rotationOrder);
}
exports.setPlayerSwitchOutro = setPlayerSwitchOutro;
function setPlayerTargetLevel(targetLevel) {
    return _in(0x5702b917, 0xb99db1cd, targetLevel);
}
exports.setPlayerTargetLevel = setPlayerTargetLevel;
/**
 * Sets your targeting mode.
 * 0 = Assisted Aim - Full
 * 1 = Assisted Aim - Partial
 * 2 = Free Aim - Assisted
 * 3 = Free Aim
 * @param targetMode
 */
function setPlayerTargetingMode(targetMode) {
    return _in(0xb1906895, 0x227793f3, targetMode);
}
exports.setPlayerTargetingMode = setPlayerTargetingMode;
function setPlayerTargettableForAirDefenceSphere(player, zoneId, enable) {
    return _in(0xecdc202b, 0x25e5cf48, player, zoneId, enable);
}
exports.setPlayerTargettableForAirDefenceSphere = setPlayerTargettableForAirDefenceSphere;
function setPlayerTcmodifierTransition(value) {
    return _in(0xbdeb86f4, 0xd5809204, _fv(value));
}
exports.setPlayerTcmodifierTransition = setPlayerTcmodifierTransition;
/**
 * Set player team on deathmatch and last team standing..
 * @param player
 * @param team
 */
function setPlayerTeam(player, team) {
    return _in(0x0299fa38, 0x396a4940, player, team);
}
exports.setPlayerTeam = setPlayerTeam;
function setPlayerUnderwaterBreathPercentRemaining(player, time) {
    return _in(0xa0d3e4f7, 0xaafb7e78, player, _fv(time), _r, _rf);
}
exports.setPlayerUnderwaterBreathPercentRemaining = setPlayerUnderwaterBreathPercentRemaining;
function setPlayerVehicleAlarmAudioActive(vehicle, toggle) {
    return _in(0x6fddad85, 0x6e36988a, vehicle, toggle);
}
exports.setPlayerVehicleAlarmAudioActive = setPlayerVehicleAlarmAudioActive;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
function setPlayerVehicleDamageModifier(player, modifier) {
    return _in(0xa50e117c, 0xddf82f0c, player, _fv(modifier));
}
exports.setPlayerVehicleDamageModifier = setPlayerVehicleDamageModifier;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
function setPlayerVehicleDefenseModifier(player, modifier) {
    return _in(0x4c60e6ef, 0xdaff2462, player, _fv(modifier));
}
exports.setPlayerVehicleDefenseModifier = setPlayerVehicleDefenseModifier;
/**
 * Unsets playerPed+330 if the current weapon has certain flags.
 * @param p0
 */
function setPlayerVehicleWeaponToNonHoming(p0) {
    return _in(0x237440e4, 0x6d918649, p0);
}
exports.setPlayerVehicleWeaponToNonHoming = setPlayerVehicleWeaponToNonHoming;
function setPlayerVisibleLocally(player, bIncludePlayersVehicle) {
    return _in(0xfaa10f1f, 0xafb11af2, player, bIncludePlayersVehicle);
}
exports.setPlayerVisibleLocally = setPlayerVisibleLocally;
/**
 * # Predominant call signatures
 * PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
 *
 * # Parameter value ranges
 * P0: PLAYER::PLAYER_ID()
 * P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
 * P2: Not set by any call
 * @param player
 * @param position
 * @param p2
 * @param p3
 */
function setPlayerWantedCentrePosition(player, p2, p3) {
    return _in(0x520e541a, 0x97a13354, player, _v, p2, p3);
}
exports.setPlayerWantedCentrePosition = setPlayerWantedCentrePosition;
/**
 * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
 *
 * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
 *
 * disableNoMission-  Disables When Off Mission- appears to always be false
 *
 * @param player
 * @param wantedLevel
 * @param disableNoMission
 */
function setPlayerWantedLevel(player, wantedLevel, disableNoMission) {
    return _in(0x39ff19c6, 0x4ef7da5b, player, wantedLevel, disableNoMission);
}
exports.setPlayerWantedLevel = setPlayerWantedLevel;
/**
 * p2 is always false in R* scripts
 * @param player
 * @param wantedLevel
 * @param p2
 */
function setPlayerWantedLevelNoDrop(player, wantedLevel, p2) {
    return _in(0x340e61de, 0x7f471565, player, wantedLevel, p2);
}
exports.setPlayerWantedLevelNoDrop = setPlayerWantedLevelNoDrop;
/**
 * Forces any pending wanted level to be applied to the specified player immediately.
 *
 * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
 *
 * Second parameter is unknown (always false).
 * @param player
 * @param p1
 */
function setPlayerWantedLevelNow(player, p1) {
    return _in(0xe0a7d1e4, 0x97ffcd6f, player, p1);
}
exports.setPlayerWantedLevelNow = setPlayerWantedLevelNow;
/**
 * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
 *
 * Based on tests, it is unlikely to be a multiplier.
 *
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
function setPlayerWeaponDamageModifier(player, modifier) {
    return _in(0xce07b9f7, 0x817aada3, player, _fv(modifier));
}
exports.setPlayerWeaponDamageModifier = setPlayerWeaponDamageModifier;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
function setPlayerWeaponDefenseModifier(player, modifier) {
    return _in(0x2d83bc01, 0x1ca14a3c, player, _fv(modifier));
}
exports.setPlayerWeaponDefenseModifier = setPlayerWeaponDefenseModifier;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
function setPlayerWeaponMinigunDefenseModifier(player, modifier) {
    return _in(0xbcfde9ed, 0xe4cf27dc, player, _fv(modifier));
}
exports.setPlayerWeaponMinigunDefenseModifier = setPlayerWeaponMinigunDefenseModifier;
function setPlayerWeaponTakedownDefenseModifier(player, p1) {
    return _in(0x31e90b88, 0x73a4cd3b, player, _fv(p1));
}
exports.setPlayerWeaponTakedownDefenseModifier = setPlayerWeaponTakedownDefenseModifier;
function setPlayerpadShakesWhenControllerDisabled(toggle) {
    return _in(0x798fdeb5, 0xb1575088, toggle);
}
exports.setPlayerpadShakesWhenControllerDisabled = setPlayerpadShakesWhenControllerDisabled;
function setPlayersLastVehicle(vehicle) {
    return _in(0xbcdf8baf, 0x56c87b6a, vehicle);
}
exports.setPlayersLastVehicle = setPlayersLastVehicle;
function setPmWarningscreenActive(p0) {
    return _in(0x41350b4f, 0xc28e3941, p0);
}
exports.setPmWarningscreenActive = setPmWarningscreenActive;
function setPoliceFocusWillTrackVehicle(vehicle, toggle) {
    return _in(0x4e74e62e, 0x0a97e901, vehicle, toggle);
}
exports.setPoliceFocusWillTrackVehicle = setPoliceFocusWillTrackVehicle;
/**
 * The player will be ignored by the police if toggle is set to true
 * @param player
 * @param toggle
 */
function setPoliceIgnorePlayer(player, toggle) {
    return _in(0x32c62aa9, 0x29c2da6a, player, toggle);
}
exports.setPoliceIgnorePlayer = setPoliceIgnorePlayer;
/**
 * If toggle is set to false:
 * The police won't be shown on the (mini)map
 *
 * If toggle is set to true:
 * The police will be shown on the (mini)map
 * @param toggle
 */
function setPoliceRadarBlips(toggle) {
    return _in(0x43286d56, 0x1b72b8bf, toggle);
}
exports.setPoliceRadarBlips = setPoliceRadarBlips;
/**
 * Min and max are usually 100.0 and 200.0
 * @param x
 * @param y
 * @param z
 * @param min
 * @param max
 */
function setPopControlSphereThisFrame(x, y, z, min, max) {
    return _in(0xd8c3be3e, 0xe94caf2d, _fv(x), _fv(y), _fv(z), _fv(min), _fv(max));
}
exports.setPopControlSphereThisFrame = setPopControlSphereThisFrame;
function setPortablePickupPersist(pickup, toggle) {
    return _in(0x46f3add1, 0xe2d5baf2, pickup, toggle);
}
exports.setPortablePickupPersist = setPortablePickupPersist;
/**
 * Found in the b617d scripts, duplicates removed:
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
 * @param p0
 * @param p1
 */
function setPortalSettingsOverride(p0, p1) {
    return _in(0x044dbad7, 0xa7fa2be5, _ts(p0), _ts(p1));
}
exports.setPortalSettingsOverride = setPortalSettingsOverride;
function setPositionForNullConvPed(p0, p1, p2, p3) {
    return _in(0x33e3c6c6, 0xf2f0b506, p0, _fv(p1), _fv(p2), _fv(p3));
}
exports.setPositionForNullConvPed = setPositionForNullConvPed;
function setPositionOffsetForRecordedVehiclePlayback(vehicle, x, y, z) {
    return _in(0x796a877e, 0x459b99ea, vehicle, _fv(x), _fv(y), _fv(z));
}
exports.setPositionOffsetForRecordedVehiclePlayback = setPositionOffsetForRecordedVehiclePlayback;
function setPositionedPlayerVehicleRadioEmitterEnabled(p0) {
    return _in(0xda07819e, 0x452ffe8f, p0);
}
exports.setPositionedPlayerVehicleRadioEmitterEnabled = setPositionedPlayerVehicleRadioEmitterEnabled;
/**
 * Sets profile setting 935
 * @param value
 */
function setProfileSettingCreatorCtfDone(value) {
    return _in(0x55384438, 0xfc55ad8e, value);
}
exports.setProfileSettingCreatorCtfDone = setProfileSettingCreatorCtfDone;
/**
 * Sets profile setting 934
 * @param value
 */
function setProfileSettingCreatorDmDone(value) {
    return _in(0x38baaa5d, 0xd4c9d19f, value);
}
exports.setProfileSettingCreatorDmDone = setProfileSettingCreatorDmDone;
/**
 * Sets profile setting 933
 * @param value
 */
function setProfileSettingCreatorRacesDone(value) {
    return _in(0xf1a1803d, 0x3476f215, value);
}
exports.setProfileSettingCreatorRacesDone = setProfileSettingCreatorRacesDone;
function setProfileSettingPrologueComplete() {
    return _in(0xb475f27c, 0x6a994d65);
}
exports.setProfileSettingPrologueComplete = setProfileSettingPrologueComplete;
/**
 * Sets profile setting 939
 */
function setProfileSettingSpChopMissionComplete() {
    return _in(0xc67e2da1, 0xcbe759e2);
}
exports.setProfileSettingSpChopMissionComplete = setProfileSettingSpChopMissionComplete;
function setProjectilesShouldExplodeOnContact(entity, p1) {
    return _in(0x63ecf581, 0xbc70e363, entity, p1);
}
exports.setProjectilesShouldExplodeOnContact = setProjectilesShouldExplodeOnContact;
function setPropLightColor(object, p1, r, g, b) {
    return _in(0x5f048334, 0xb4a4e774, object, p1, r, g, b, _r);
}
exports.setPropLightColor = setPropLightColor;
function setPropTintIndex(p0, p1) {
    return _in(0x31574b1b, 0x41268673, p0, p1);
}
exports.setPropTintIndex = setPropTintIndex;
function setPtfxForceVehicleInteriorFlag(p0) {
    return _in(0xc6730e0d, 0x14e50703, p0);
}
exports.setPtfxForceVehicleInteriorFlag = setPtfxForceVehicleInteriorFlag;
function setRaceTrackRender(toggle) {
    return _in(0x1eac5f91, 0xbcbc5073, toggle);
}
exports.setRaceTrackRender = setRaceTrackRender;
function setRadarAsExteriorThisFrame() {
    return _in(0xe81b7d2a, 0x3dab2d81);
}
exports.setRadarAsExteriorThisFrame = setRadarAsExteriorThisFrame;
/**
 * List of interior hashes: https://pastebin.com/1FUyXNqY
 * Not for every interior zoom > 0 available.
 * @param interior
 * @param x
 * @param y
 * @param z
 * @param zoom
 */
function setRadarAsInteriorThisFrame(interior, x, y, z, zoom) {
    return _in(0x59e727a1, 0xc9d3e31a, _ch(interior), _fv(x), _fv(y), z, zoom);
}
exports.setRadarAsInteriorThisFrame = setRadarAsInteriorThisFrame;
/**
 * zoomLevel ranges from 0 to 1400 in R* Scripts
 * @param zoomLevel
 */
function setRadarZoom(zoomLevel) {
    return _in(0x096ef57a, 0x0c999bba, zoomLevel);
}
exports.setRadarZoom = setRadarZoom;
/**
 * zoom ranges from 0 to 90f in R* Scripts
 * @param zoom
 */
function setRadarZoomPrecise(zoom) {
    return _in(0xbd12c5ee, 0xe184c337, _fv(zoom));
}
exports.setRadarZoomPrecise = setRadarZoomPrecise;
function setRadarZoomToBlip(blip, zoom) {
    return _in(0xf98e4b3e, 0x56afc7b1, blip, _fv(zoom));
}
exports.setRadarZoomToBlip = setRadarZoomToBlip;
function setRadarZoomToDistance(zoom) {
    return _in(0xcb7cc0d5, 0x8405ad41, _fv(zoom));
}
exports.setRadarZoomToDistance = setRadarZoomToDistance;
function setRadioAutoUnfreeze(toggle) {
    return _in(0xc1aa9f53, 0xce982990, toggle);
}
exports.setRadioAutoUnfreeze = setRadioAutoUnfreeze;
function setRadioFrontendFadeTime(fadeTime) {
    return _in(0x2c96cdb0, 0x4fca358e, _fv(fadeTime));
}
exports.setRadioFrontendFadeTime = setRadioFrontendFadeTime;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
function setRadioPositionAudioMute(p0) {
    return _in(0x02e93c79, 0x6abd3a97, p0);
}
exports.setRadioPositionAudioMute = setRadioPositionAudioMute;
/**
 * Tune Backwards...
 */
function setRadioRetuneDown() {
    return _in(0xdd6bcf9e, 0x94425df9);
}
exports.setRadioRetuneDown = setRadioRetuneDown;
/**
 * Tune Forward...
 */
function setRadioRetuneUp() {
    return _in(0xff266d1d, 0x0eb1195d);
}
exports.setRadioRetuneUp = setRadioRetuneUp;
/**
 * Doesn't have an effect in Story Mode.
 * @param radioStation
 * @param toggle
 */
function setRadioStationAsFavourite(radioStation, toggle) {
    return _in(0x4cafebfa, 0x21ec188d, _ts(radioStation), toggle);
}
exports.setRadioStationAsFavourite = setRadioStationAsFavourite;
/**
 * 6 calls in the b617d scripts, removed identical lines:
 *
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
 * @param radioStation
 * @param toggle
 */
function setRadioStationMusicOnly(radioStation, toggle) {
    return _in(0x774bd811, 0xf656a122, _ts(radioStation), toggle);
}
exports.setRadioStationMusicOnly = setRadioStationMusicOnly;
/**
 * Sets radio station by index.
 * @param radioStation
 */
function setRadioToStationIndex(radioStation) {
    return _in(0xa619b168, 0xb8a8570f, radioStation);
}
exports.setRadioToStationIndex = setRadioToStationIndex;
/**
 * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
 * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
 * @param stationName
 */
function setRadioToStationName(stationName) {
    return _in(0xc69eda28, 0x699d5107, _ts(stationName));
}
exports.setRadioToStationName = setRadioToStationName;
/**
 * Only found this one in the decompiled scripts:
 *
 * AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
 *
 * @param radioStation
 * @param radioTrack
 */
function setRadioTrack(radioStation, radioTrack) {
    return _in(0xb39786f2, 0x01fee30b, _ts(radioStation), _ts(radioTrack));
}
exports.setRadioTrack = setRadioTrack;
function setRadioTrackWithStartOffset(radioStationName, mixName, p2) {
    return _in(0x2cb00751, 0x10be1e56, _ts(radioStationName), _ts(mixName), p2);
}
exports.setRadioTrackWithStartOffset = setRadioTrackWithStartOffset;
/**
 * Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
 * @param blip
 * @param toggle
 */
function setRadiusBlipEdge(blip, toggle) {
    return _in(0x25615540, 0xd894b814, blip, toggle);
}
exports.setRadiusBlipEdge = setRadiusBlipEdge;
/**
 * Works for both player and peds,
 *
 * enum eRagdollBlockingFlags
 * {
 * RBF_BULLET_IMPACT = 0,
 * RBF_VEHICLE_IMPACT = 1,
 * RBF_FIRE = 2,
 * RBF_ELECTROCUTION = 3,
 * RBF_PLAYER_IMPACT = 4,
 * RBF_EXPLOSION = 5,0
 * RBF_IMPACT_OBJECT = 6,
 * RBF_MELEE = 7,
 * RBF_RUBBER_BULLET = 8,
 * RBF_FALLING = 9,
 * RBF_WATER_JET = 10,
 * RBF_DROWNING = 11,
 * _0x9F52E2C4 = 12,
 * RBF_PLAYER_BUMP = 13,
 * RBF_PLAYER_RAGDOLL_BUMP = 14,
 * RBF_PED_RAGDOLL_BUMP = 15,
 * RBF_VEHICLE_GRAB = 16,
 * RBF_SMOKE_GRENADE = 17,
 * };
 *
 *
 * @param ped
 * @param blockingFlag
 */
function setRagdollBlockingFlags(ped, blockingFlag) {
    return _in(0x26695ec7, 0x67728d84, ped, blockingFlag);
}
exports.setRagdollBlockingFlags = setRagdollBlockingFlags;
/**
 * With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
 * With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
 * To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
 * @param intensity
 */
function setRain(intensity) {
    return _in(0x643e26ea, 0x6e024d92, _fv(intensity));
}
exports.setRain = setRain;
function setRandomBoats(toggle) {
    return _in(0x84436ec2, 0x93b1415f, toggle);
}
exports.setRandomBoats = setRandomBoats;
function setRandomBoatsMp(toggle) {
    return _in(0xda5e12f7, 0x28db30ca, toggle);
}
exports.setRandomBoatsMp = setRandomBoatsMp;
/**
 * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
 * Does nothing if the mission flag is set.
 * @param toggle
 */
function setRandomEventFlag(toggle) {
    return _in(0x97192708, 0x6cfd2158, toggle);
}
exports.setRandomEventFlag = setRandomEventFlag;
function setRandomSeed(seed) {
    return _in(0x444d98f9, 0x8c11f3ec, seed);
}
exports.setRandomSeed = setRandomSeed;
function setRandomTrains(toggle) {
    return _in(0x80d9f741, 0x97ea47d9, toggle);
}
exports.setRandomTrains = setRandomTrains;
function setRandomVehicleDensityMultiplierThisFrame(multiplier) {
    return _in(0xb3b33593, 0x79fe77d3, _fv(multiplier));
}
exports.setRandomVehicleDensityMultiplierThisFrame = setRandomVehicleDensityMultiplierThisFrame;
function setRandomWeatherType() {
    return _in(0x8b05f884, 0xcf7e8020);
}
exports.setRandomWeatherType = setRandomWeatherType;
function setReducePedModelBudget(toggle) {
    return _in(0x77b5f9a3, 0x6bf96710, toggle);
}
exports.setReducePedModelBudget = setReducePedModelBudget;
function setReduceVehicleModelBudget(toggle) {
    return _in(0x80c52789, 0x3080ccf3, toggle);
}
exports.setReduceVehicleModelBudget = setReduceVehicleModelBudget;
/**
 * Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
 * @param vehicle
 * @param enable
 */
function setReducedSuspensionForce(vehicle, enable) {
    return _in(0x3a375167, 0xf5782a65, vehicle, enable);
}
exports.setReducedSuspensionForce = setReducedSuspensionForce;
/**
 * Sets the relationship between two groups. This should be called twice (once for each group).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 *
 * Example:
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * @param relationship
 * @param group1
 * @param group2
 */
function setRelationshipBetweenGroups(relationship, group1, group2) {
    return _in(0xbf25eb89, 0x375a37ad, relationship, _ch(group1), _ch(group2));
}
exports.setRelationshipBetweenGroups = setRelationshipBetweenGroups;
function setRelationshipGroupAffectsWantedLevel(group, p1) {
    return _in(0x5615e0c5, 0xeb2bc6e2, _ch(group), p1);
}
exports.setRelationshipGroupAffectsWantedLevel = setRelationshipGroupAffectsWantedLevel;
/**
 * Enables ghosting between specific players
 * @param player
 * @param p1
 */
function setRemotePlayerAsGhost(player, p1) {
    return _in(0xa7c511fa, 0x1c5bda38, player, p1);
}
exports.setRemotePlayerAsGhost = setRemotePlayerAsGhost;
function setRemotePlayerVisibleInCutscene(player, locallyVisible) {
    return _in(0x96320e65, 0x49dae7b4, player, locallyVisible);
}
exports.setRemotePlayerVisibleInCutscene = setRemotePlayerVisibleInCutscene;
function setRenderHdOnly(toggle) {
    return _in(0x40aefd1a, 0x244741f2, toggle);
}
exports.setRenderHdOnly = setRenderHdOnly;
/**
 * Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
 * @param train
 * @param toggle
 */
function setRenderTrainAsDerailed(train, toggle) {
    return _in(0x317b11a3, 0x12df5534, train, toggle);
}
exports.setRenderTrainAsDerailed = setRenderTrainAsDerailed;
function setReplaySystemPausedForSave(p0) {
    return _in(0xe058175f, 0x8eafe79a, p0);
}
exports.setReplaySystemPausedForSave = setReplaySystemPausedForSave;
function setRestartCoordOverride(x, y, z, heading) {
    return _in(0x706b5edc, 0xaa7fa663, _fv(x), _fv(y), _fv(z), _fv(heading));
}
exports.setRestartCoordOverride = setRestartCoordOverride;
function setRestoreFocusEntity(p0) {
    return _in(0x0811381e, 0xf5062fec, p0);
}
exports.setRestoreFocusEntity = setRestoreFocusEntity;
/**
 * Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
 * @param toggle
 */
function setRiotModeEnabled(toggle) {
    return _in(0x2587a48b, 0xc88dfadf, toggle);
}
exports.setRiotModeEnabled = setRiotModeEnabled;
function setRoadsBackToOriginal(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x1ee7063b, 0x80ffc77c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6);
}
exports.setRoadsBackToOriginal = setRoadsBackToOriginal;
/**
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * bool p7 - always 1
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 */
function setRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width, p7) {
    return _in(0x0027501b, 0x9f3b407e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7);
}
exports.setRoadsBackToOriginalInAngledArea = setRoadsBackToOriginalInAngledArea;
/**
 * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param unknown1
 * @param unknown2
 * @param unknown3
 */
function setRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3) {
    return _in(0x1a5aa120, 0x8af5db59, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), unknown1, unknown2, unknown3);
}
exports.setRoadsInAngledArea = setRoadsInAngledArea;
/**
 * When nodeEnabled is set to false, all nodes in the area get disabled.
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
 * If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param nodeEnabled
 * @param unknown2
 */
function setRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2) {
    return _in(0xbf1a602b, 0x5ba52fee, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), nodeEnabled, unknown2);
}
exports.setRoadsInArea = setRoadsInArea;
function setRocketBoostActive(vehicle, active) {
    return _in(0x81e1552e, 0x35dc3839, vehicle, active);
}
exports.setRocketBoostActive = setRocketBoostActive;
function setRocketBoostFill(vehicle, percentage) {
    return _in(0xfeb2dded, 0x3509562e, vehicle, _fv(percentage));
}
exports.setRocketBoostFill = setRocketBoostFill;
/**
 * Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
 * @param roomHashKey
 */
function setRoomForGameViewportByKey(roomHashKey) {
    return _in(0x405dc2ae, 0xf6af95b9, _ch(roomHashKey));
}
exports.setRoomForGameViewportByKey = setRoomForGameViewportByKey;
/**
 * Example of use (carmod_shop)
 * INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");
 * @param roomName
 */
function setRoomForGameViewportByName(roomName) {
    return _in(0xaf348afc, 0xb575a441, _ts(roomName));
}
exports.setRoomForGameViewportByName = setRoomForGameViewportByName;
/**
 * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
 *
 * Just call it one time, it is not required to be called once every tick.
 *
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * @param player
 * @param multiplier
 */
function setRunSprintMultiplierForPlayer(player, multiplier) {
    return _in(0x6db47aa7, 0x7fd94e09, player, _fv(multiplier));
}
exports.setRunSprintMultiplierForPlayer = setRunSprintMultiplierForPlayer;
function setSaveHouse(savehouseHandle, p1, p2) {
    return _in(0x4f548cab, 0xeae553bc, savehouseHandle, p1, p2);
}
exports.setSaveHouse = setSaveHouse;
/**
 * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
 * @param ignoreVehicle
 */
function setSaveMenuActive(ignoreVehicle) {
    return _in(0xc9bf75d2, 0x8165ff77, ignoreVehicle);
}
exports.setSaveMenuActive = setSaveMenuActive;
/**
 * Sets profile setting 501
 * @param transactionId
 */
function setSaveMigrationTransactionIdWarning(transactionId) {
    return _in(0xf6792800, 0xac95350d, transactionId);
}
exports.setSaveMigrationTransactionIdWarning = setSaveMigrationTransactionIdWarning;
function setSavegameListUniqueId(p0) {
    return _in(0x0cf54f20, 0xde43879c, p0);
}
exports.setSavegameListUniqueId = setSavegameListUniqueId;
function setScaleformMovieAsNoLongerNeeded(scaleformHandle) {
    return _in(0x1d132d61, 0x4dd86811, _ii(scaleformHandle));
}
exports.setScaleformMovieAsNoLongerNeeded = setScaleformMovieAsNoLongerNeeded;
function setScaleformMovieToUseLargeRt(scaleformHandle, toggle) {
    return _in(0x32f34ff7, 0xf617643b, scaleformHandle, toggle);
}
exports.setScaleformMovieToUseLargeRt = setScaleformMovieToUseLargeRt;
/**
 * This native is used in some casino scripts to fit the scaleform in the rendertarget.
 * @param scaleformHandle
 * @param toggle
 */
function setScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle) {
    return _in(0xe6a9f00d, 0x4240b519, scaleformHandle, toggle);
}
exports.setScaleformMovieToUseSuperLargeRt = setScaleformMovieToUseSuperLargeRt;
function setScaleformMovieToUseSystemTime(scaleform, toggle) {
    return _in(0x6d8eb211, 0x944dce08, scaleform, toggle);
}
exports.setScaleformMovieToUseSystemTime = setScaleformMovieToUseSystemTime;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
 * @param scenarioGroup
 * @param enabled
 */
function setScenarioGroupEnabled(scenarioGroup, enabled) {
    return _in(0x02c8e5b4, 0x9848664e, _ts(scenarioGroup), enabled);
}
exports.setScenarioGroupEnabled = setScenarioGroupEnabled;
function setScenarioPedDensityMultiplierThisFrame(p0, p1) {
    return _in(0x7a556143, 0xa1c03898, _fv(p0), _fv(p1));
}
exports.setScenarioPedDensityMultiplierThisFrame = setScenarioPedDensityMultiplierThisFrame;
function setScenarioPedsSpawnInSphereArea(x, y, z, range, p4) {
    return _in(0x28157d43, 0xcf600981, _fv(x), _fv(y), _fv(z), _fv(range), p4);
}
exports.setScenarioPedsSpawnInSphereArea = setScenarioPedsSpawnInSphereArea;
/**
 * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
 * @param value
 */
function setScenarioPedsToBeReturnedByNextCommand(value) {
    return _in(0x14f19a87, 0x82c8071e, value);
}
exports.setScenarioPedsToBeReturnedByNextCommand = setScenarioPedsToBeReturnedByNextCommand;
/**
 * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * seems to enable/disable specific scenario-types from happening in the game world.
 *
 * Here are some scenario types from the scripts:
 * "WORLD_MOUNTAIN_LION_REST"
 * "WORLD_MOUNTAIN_LION_WANDER"
 * "DRIVE"
 * "WORLD_VEHICLE_POLICE_BIKE"
 * "WORLD_VEHICLE_POLICE_CAR"
 * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
 * "WORLD_VEHICLE_DRIVE_SOLO"
 * "WORLD_VEHICLE_BIKER"
 * "WORLD_VEHICLE_DRIVE_PASSENGERS"
 * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
 * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
 * "PROP_HUMAN_SEAT_CHAIR"
 * "WORLD_VEHICLE_ATTRACTOR"
 * "WORLD_HUMAN_LEANING"
 * "WORLD_HUMAN_HANG_OUT_STREET"
 * "WORLD_HUMAN_DRINKING"
 * "WORLD_HUMAN_SMOKING"
 * "WORLD_HUMAN_GUARD_STAND"
 * "WORLD_HUMAN_CLIPBOARD"
 * "WORLD_HUMAN_HIKER"
 * "WORLD_VEHICLE_EMPTY"
 * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
 * "WORLD_HUMAN_PAPARAZZI"
 * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
 * "WORLD_VEHICLE_PARK_PARALLEL"
 * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
 * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
 * "WORLD_VEHICLE_TRUCK_LOGS"
 *
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 * @param scenarioType
 * @param toggle
 */
function setScenarioTypeEnabled(scenarioType, toggle) {
    return _in(0xeb47ec4e, 0x34fb7ee1, _ts(scenarioType), toggle);
}
exports.setScenarioTypeEnabled = setScenarioTypeEnabled;
function setSceneStreamingTracksCamPosThisFrame() {
    return _in(0x1e9057a7, 0x4fd73e23);
}
exports.setSceneStreamingTracksCamPosThisFrame = setSceneStreamingTracksCamPosThisFrame;
function setScriptAsNoLongerNeeded(scriptName) {
    return _in(0xc90d2dca, 0xcd56184c, _ts(scriptName));
}
exports.setScriptAsNoLongerNeeded = setScriptAsNoLongerNeeded;
/**
 * Sets the cutscene's owning thread ID.
 * @param threadId
 */
function setScriptCanStartCutscene(threadId) {
    return _in(0x8d9df6ec, 0xa8768583, threadId);
}
exports.setScriptCanStartCutscene = setScriptCanStartCutscene;
function setScriptFirePosition(coordX, coordY, coordZ) {
    return _in(0x70a382ad, 0xec069dd3, _fv(coordX), _fv(coordY), _fv(coordZ));
}
exports.setScriptFirePosition = setScriptFirePosition;
/**
 * horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
 * verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
 *
 * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
 *
 * These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
 *
 * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
 *
 * For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
 *
 * To reset the value, use RESET_SCRIPT_GFX_ALIGN.
 * @param horizontalAlign
 * @param verticalAlign
 */
function setScriptGfxAlign(horizontalAlign, verticalAlign) {
    return _in(0xb8a850f2, 0x0a067eb6, horizontalAlign, verticalAlign);
}
exports.setScriptGfxAlign = setScriptGfxAlign;
/**
 * Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
 * @param x
 * @param y
 * @param w
 * @param h
 */
function setScriptGfxAlignParams(x, y, w, h) {
    return _in(0xf5a2c681, 0x787e579d, _fv(x), _fv(y), _fv(w), _fv(h));
}
exports.setScriptGfxAlignParams = setScriptGfxAlignParams;
/**
 * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
 * @param toggle
 */
function setScriptGfxDrawBehindPausemenu(toggle) {
    return _in(0xc6372ecd, 0x45d73bcd, toggle);
}
exports.setScriptGfxDrawBehindPausemenu = setScriptGfxDrawBehindPausemenu;
/**
 * Sets the draw order for script draw commands.
 *
 * Examples from decompiled scripts:
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
 *
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
 * @param drawOrder
 */
function setScriptGfxDrawOrder(drawOrder) {
    return _in(0x61bb1d9b, 0x3a95d802, drawOrder);
}
exports.setScriptGfxDrawOrder = setScriptGfxDrawOrder;
/**
 * Sets GtaThread+0x14A
 * @param toggle
 */
function setScriptHighPrio(toggle) {
    return _in(0x65d2ebb4, 0x7e1cec21, toggle);
}
exports.setScriptHighPrio = setScriptHighPrio;
function setScriptRampImpulseScale(vehicle, impulseScale) {
    return _in(0xefc13b1c, 0xe30d755d, vehicle, _fv(impulseScale));
}
exports.setScriptRampImpulseScale = setScriptRampImpulseScale;
function setScriptRocketBoostRechargeTime(vehicle, seconds) {
    return _in(0xe00f2ab1, 0x00b76e89, vehicle, _fv(seconds));
}
exports.setScriptRocketBoostRechargeTime = setScriptRocketBoostRechargeTime;
function setScriptUpdateDoorAudio(doorHash, toggle) {
    return _in(0x06c0023b, 0xed16dd6b, _ch(doorHash), toggle);
}
exports.setScriptUpdateDoorAudio = setScriptUpdateDoorAudio;
/**
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
 * @param r
 * @param g
 * @param b
 * @param a
 */
function setScriptVariableHudColour(r, g, b, a) {
    return _in(0xd68a5ff8, 0xa3a89874, r, g, b, a);
}
exports.setScriptVariableHudColour = setScriptVariableHudColour;
/**
 * Only called once in the decompiled scripts. Presumably activates the specified generator.
 * @param vehicleGenerator
 * @param enabled
 */
function setScriptVehicleGenerator(vehicleGenerator, enabled) {
    return _in(0xd9d620e0, 0xac6dc4b0, vehicleGenerator, enabled);
}
exports.setScriptVehicleGenerator = setScriptVehicleGenerator;
function setScriptWithNameHashAsNoLongerNeeded(scriptHash) {
    return _in(0xc5bc0389, 0x60e9db27, _ch(scriptHash));
}
exports.setScriptWithNameHashAsNoLongerNeeded = setScriptWithNameHashAsNoLongerNeeded;
function setScriptedAnimSeatOffset(ped, p1) {
    return _in(0x5917bba3, 0x2d06c230, ped, _fv(p1));
}
exports.setScriptedAnimSeatOffset = setScriptedAnimSeatOffset;
function setScriptedCameraIsFirstPersonThisFrame(p0) {
    return _in(0x469f2ecd, 0xec046337, p0);
}
exports.setScriptedCameraIsFirstPersonThisFrame = setScriptedCameraIsFirstPersonThisFrame;
function setScriptedConversionCoordThisFrame(x, y, z) {
    return _in(0x5086c784, 0x3552cf85, _fv(x), _fv(y), _fv(z));
}
exports.setScriptedConversionCoordThisFrame = setScriptedConversionCoordThisFrame;
/**
 * Disables some other rendering (internal)
 */
function setScriptsHaveCleanedUpForReplaySystem() {
    return _in(0x5ad3932d, 0xaeb1e5d3);
}
exports.setScriptsHaveCleanedUpForReplaySystem = setScriptsHaveCleanedUpForReplaySystem;
/**
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
 * @param r
 * @param g
 * @param b
 * @param a
 */
function setSecondScriptVariableHudColour(r, g, b, a) {
    return _in(0x16a304e6, 0xcb2bfab9, r, g, b, a);
}
exports.setSecondScriptVariableHudColour = setSecondScriptVariableHudColour;
/**
 * Toggles Heatvision on/off.
 * @param toggle
 */
function setSeethrough(toggle) {
    return _in(0x7e089242, 0x59e08ce0, toggle);
}
exports.setSeethrough = setSeethrough;
function setSequenceToRepeat(taskSequenceId, repeat) {
    return _in(0x58c70cf3, 0xa41e4ae7, taskSequenceId, repeat);
}
exports.setSequenceToRepeat = setSequenceToRepeat;
/**
 * Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
 * @param vehicle
 */
function setShortSlowdownForLanding(vehicle) {
    return _in(0x107a473d, 0x7a6647a9, vehicle);
}
exports.setShortSlowdownForLanding = setShortSlowdownForLanding;
/**
 * A vehicle recording playback flag only used in jewelry_heist
 * @param vehicle
 * @param p1
 */
function setShouldLerpFromAiToFullRecording(vehicle, p1) {
    return _in(0x063ae2b2, 0xcc273588, vehicle, p1);
}
exports.setShouldLerpFromAiToFullRecording = setShouldLerpFromAiToFullRecording;
/**
 * Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.
 * @param vehicle
 * @param shouldReset
 */
function setShouldResetTurretInScriptedCameras(vehicle, shouldReset) {
    return _in(0x78ceee41, 0xf49f421f, vehicle, shouldReset);
}
exports.setShouldResetTurretInScriptedCameras = setShouldResetTurretInScriptedCameras;
function setSirenBypassMpDriverCheck(vehicle, toggle) {
    return _in(0xf584cf85, 0x29b51434, vehicle, toggle);
}
exports.setSirenBypassMpDriverCheck = setSirenBypassMpDriverCheck;
function setSirenCanBeControlledByAudio(vehicle, p1) {
    return _in(0x43fa0dfc, 0x5df87815, vehicle, p1);
}
exports.setSirenCanBeControlledByAudio = setSirenCanBeControlledByAudio;
function setSirenWithNoDriver(vehicle, toggle) {
    return _in(0x1fef0683, 0xb96ebcf2, vehicle, toggle);
}
exports.setSirenWithNoDriver = setSirenWithNoDriver;
function setSkidmarkRangeScale(scale) {
    return _in(0x5dbf05db, 0x5926d089, _fv(scale));
}
exports.setSkidmarkRangeScale = setSkidmarkRangeScale;
function setSkipMinigunSpinUpAudio(p0) {
    return _in(0xbef34b1d, 0x9624d5dd, p0);
}
exports.setSkipMinigunSpinUpAudio = setSkipMinigunSpinUpAudio;
/**
 * Disables the screen effects and sound effects when driving over a slowdown pad.
 * @param disabled
 */
function setSlowDownEffectDisabled(disabled) {
    return _in(0x65b08055, 0x5ea48149, disabled);
}
exports.setSlowDownEffectDisabled = setSlowDownEffectDisabled;
function setSnow(level) {
    return _in(0x7f06937b, 0x0cdcbc1a, _fv(level));
}
exports.setSnow = setSnow;
/**
 * HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
 * HUD::SET_SOCIAL_CLUB_TOUR("Missions");
 * HUD::SET_SOCIAL_CLUB_TOUR("General");
 * HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
 * @param name
 */
function setSocialClubTour(name) {
    return _in(0x9e778248, 0xd6685fe0, _ts(name));
}
exports.setSocialClubTour = setSocialClubTour;
function setSpecialAbilityMp(player, p1, p2) {
    return _in(0xb214d570, 0xead7f81a, player, p1, p2);
}
exports.setSpecialAbilityMp = setSpecialAbilityMp;
function setSpecialAbilityMultiplier(multiplier) {
    return _in(0xa49c426e, 0xd0ca4ab7, _fv(multiplier));
}
exports.setSpecialAbilityMultiplier = setSpecialAbilityMultiplier;
/**
 * It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
 * @param vehicle
 * @param toggle
 */
function setSpecialFlightModeAllowed(vehicle, toggle) {
    return _in(0xf1211889, 0xdf15a763, vehicle, toggle);
}
exports.setSpecialFlightModeAllowed = setSpecialFlightModeAllowed;
/**
 * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
 *
 * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
 *
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
 * @param vehicle
 * @param ratio
 */
function setSpecialFlightModeRatio(vehicle, ratio) {
    return _in(0xd138fa15, 0xc9776837, vehicle, _fv(ratio));
}
exports.setSpecialFlightModeRatio = setSpecialFlightModeRatio;
/**
 * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
 *
 * targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
 *
 * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
 *
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
 * @param vehicle
 * @param targetRatio
 */
function setSpecialFlightModeTargetRatio(vehicle, targetRatio) {
    return _in(0x438b3d7c, 0xa026fe91, vehicle, _fv(targetRatio));
}
exports.setSpecialFlightModeTargetRatio = setSpecialFlightModeTargetRatio;
/**
 * Disables the screen effects and sound effects when driving over a speed boost pad.
 * @param disabled
 */
function setSpeedBoostEffectDisabled(disabled) {
    return _in(0x7bbe7ff6, 0x26a591fe, disabled);
}
exports.setSpeedBoostEffectDisabled = setSpeedBoostEffectDisabled;
function setSrlForcePrestream(p0) {
    return _in(0xf8155a7f, 0x03ddfc8e, p0);
}
exports.setSrlForcePrestream = setSrlForcePrestream;
function setSrlLongJumpMode(p0) {
    return _in(0x20c6c7e4, 0xeb082a7f, p0);
}
exports.setSrlLongJumpMode = setSrlLongJumpMode;
function setSrlPostCutsceneCamera(p0, p1, p2, p3, p4, p5) {
    return _in(0xef39ee20, 0xc537e98c, p0, p1, p2, p3, p4, p5);
}
exports.setSrlPostCutsceneCamera = setSrlPostCutsceneCamera;
function setSrlReadaheadTimes(p0, p1, p2, p3) {
    return _in(0xbeb2d9a1, 0xd9a8f55a, p0, p1, p2, p3);
}
exports.setSrlReadaheadTimes = setSrlReadaheadTimes;
function setSrlTime(p0) {
    return _in(0xa74a541c, 0x6884e7b8, _fv(p0));
}
exports.setSrlTime = setSrlTime;
/**
 * Hardcoded to not work in multiplayer.
 *
 *
 * Used to lock/unlock doors to interior areas of the game.
 *
 * (Possible) Door Types:
 *
 * https://pastebin.com/9S2m3qA4
 *
 * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
 * Locked means that the heading is locked.
 * p6 is always 0.
 *
 * 225 door types, model names and coords found in stripclub.c4:
 * https://pastebin.com/gywnbzsH
 *
 * get door info: https://pastebin.com/i14rbekD
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 * @param p6
 */
function setStateOfClosestDoorOfType(type, x, y, z, locked, heading, p6) {
    return _in(0xf82d8f19, 0x26a02c3d, _ch(type), _fv(x), _fv(y), _fv(z), locked, _fv(heading), p6);
}
exports.setStateOfClosestDoorOfType = setStateOfClosestDoorOfType;
/**
 * Defines the state of a destructible object.
 * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
 * State 2 == object just spawned
 * State 4 == Beginning of the animation
 * State 6 == Start animation
 * State 9 == End of the animation
 * @param object
 * @param state
 */
function setStateOfRayfireMapObject(object, state) {
    return _in(0x5c29f698, 0xd404c5e1, object, state);
}
exports.setStateOfRayfireMapObject = setStateOfRayfireMapObject;
/**
 * Example:
 * AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
 *
 * This turns off surrounding sounds not connected directly to peds.
 *
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param toggle
 */
function setStaticEmitterEnabled(emitterName, toggle) {
    return _in(0x399d2d3b, 0x33f1b8eb, _ts(emitterName), toggle);
}
exports.setStaticEmitterEnabled = setStaticEmitterEnabled;
/**
 * Access to the store for shark cards etc...
 * @param toggle
 */
function setStoreEnabled(toggle) {
    return _in(0x9641a9ff, 0x718e9c5e, toggle);
}
exports.setStoreEnabled = setStoreEnabled;
function setStreamedTextureDictAsNoLongerNeeded(textureDict) {
    return _in(0xbe2caccf, 0x5a8aa805, _ts(textureDict));
}
exports.setStreamedTextureDictAsNoLongerNeeded = setStreamedTextureDictAsNoLongerNeeded;
function setStreaming(toggle) {
    return _in(0x6e0c6926, 0x77008888, toggle);
}
exports.setStreaming = setStreaming;
function setStuntJumpsCanTrigger(toggle) {
    return _in(0xd7918568, 0x9f8fd5df, toggle);
}
exports.setStuntJumpsCanTrigger = setStuntJumpsCanTrigger;
function setSubmarineCrushDepths(vehicle, p1, depth1, depth2, depth3) {
    return _in(0xc59872a5, 0x134879c7, vehicle, p1, _fv(depth1), _fv(depth2), _fv(depth3));
}
exports.setSubmarineCrushDepths = setSubmarineCrushDepths;
function setSuperJumpThisFrame(player) {
    return _in(0x57fff03e, 0x423a4c0b, player);
}
exports.setSuperJumpThisFrame = setSuperJumpThisFrame;
/**
 * Swim speed multiplier.
 * Multiplier goes up to 1.49
 *
 * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
 *
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * @param player
 * @param multiplier
 */
function setSwimMultiplierForPlayer(player, multiplier) {
    return _in(0xa91c6f0f, 0xf7d16a13, player, _fv(multiplier));
}
exports.setSwimMultiplierForPlayer = setSwimMultiplierForPlayer;
function setSynchronizedSceneHoldLastFrame(sceneID, toggle) {
    return _in(0x394b9cd1, 0x2435c981, sceneID, toggle);
}
exports.setSynchronizedSceneHoldLastFrame = setSynchronizedSceneHoldLastFrame;
function setSynchronizedSceneLooped(sceneID, toggle) {
    return _in(0xd9a897a4, 0xc6c2974f, sceneID, toggle);
}
exports.setSynchronizedSceneLooped = setSynchronizedSceneLooped;
function setSynchronizedSceneOrigin(sceneID, x, y, z, roll, pitch, yaw, p7) {
    return _in(0x6acf6b72, 0x25801cd7, sceneID, _fv(x), _fv(y), _fv(z), _fv(roll), _fv(pitch), _fv(yaw), p7);
}
exports.setSynchronizedSceneOrigin = setSynchronizedSceneOrigin;
function setSynchronizedScenePhase(sceneID, phase) {
    return _in(0x734292f4, 0xf0abf6d0, sceneID, _fv(phase));
}
exports.setSynchronizedScenePhase = setSynchronizedScenePhase;
function setSynchronizedSceneRate(sceneID, rate) {
    return _in(0xb6c49f8a, 0x5e295a5d, sceneID, _fv(rate));
}
exports.setSynchronizedSceneRate = setSynchronizedSceneRate;
function setTableGamesCameraThisUpdate(hash) {
    return _in(0x79c0e43e, 0xb9b944e2, _ch(hash), _r);
}
exports.setTableGamesCameraThisUpdate = setTableGamesCameraThisUpdate;
function setTakenPhotoIsMugshot(toggle) {
    return _in(0x1bbc135a, 0x4d25edde, toggle);
}
exports.setTakenPhotoIsMugshot = setTakenPhotoIsMugshot;
function setTaskMoveNetworkAnimSet(ped, clipSet, variableClipSet) {
    return _in(0x8423541e, 0x8b3a1589, ped, _ch(clipSet), _ch(variableClipSet));
}
exports.setTaskMoveNetworkAnimSet = setTaskMoveNetworkAnimSet;
/**
 * Doesn't actually return anything.
 * @param ped
 * @param enable
 */
function setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped, enable) {
    return _in(0x0ffb3c75, 0x8e8c07b9, ped, enable, _r);
}
exports.setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed = setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed;
function setTaskMoveNetworkSignalBool(ped, signalName, value) {
    return _in(0xb0a6cfd2, 0xc69c1088, ped, _ts(signalName), value);
}
exports.setTaskMoveNetworkSignalBool = setTaskMoveNetworkSignalBool;
/**
 * signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
 * p2 - From what i can see it goes up to 1f (maybe).
 *
 * Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
 * @param ped
 * @param signalName
 * @param value
 */
function setTaskMoveNetworkSignalFloat(ped, signalName, value) {
    return _in(0xd5bb4025, 0xae449a4e, ped, _ts(signalName), _fv(value));
}
exports.setTaskMoveNetworkSignalFloat = setTaskMoveNetworkSignalFloat;
function setTaskMoveNetworkSignalFloatLerpRate(ped, signalName, value) {
    return _in(0x8634cef2, 0x522d987b, ped, _ts(signalName), _fv(value));
}
exports.setTaskMoveNetworkSignalFloatLerpRate = setTaskMoveNetworkSignalFloatLerpRate;
function setTaskMoveNetworkSignalLocalFloat(ped, signalName, value) {
    return _in(0x373ef409, 0xb82697a3, ped, _ts(signalName), _fv(value));
}
exports.setTaskMoveNetworkSignalLocalFloat = setTaskMoveNetworkSignalLocalFloat;
/**
 * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
 * Flag 1: Aggressive ramming of suspect
 * Flag 2: Ram attempts
 * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
 * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
 * @param ped
 * @param flag
 * @param set
 */
function setTaskVehicleChaseBehaviorFlag(ped, flag, set) {
    return _in(0xcc665aac, 0x360d31e7, ped, flag, set);
}
exports.setTaskVehicleChaseBehaviorFlag = setTaskVehicleChaseBehaviorFlag;
function setTaskVehicleChaseIdealPursuitDistance(ped, distance) {
    return _in(0x639b642f, 0xacbe4edd, ped, _fv(distance));
}
exports.setTaskVehicleChaseIdealPursuitDistance = setTaskVehicleChaseIdealPursuitDistance;
function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane, height) {
    return _in(0xb893215d, 0x8d4c015b, plane, height);
}
exports.setTaskVehicleGotoPlaneMinHeightAboveTerrain = setTaskVehicleGotoPlaneMinHeightAboveTerrain;
/**
 * This is not tested - it's just an assumption.
 * - Nac
 *
 * Doesn't seem to work.  I'll try with an int instead. --JT
 *
 * Read the scripts, im dumpass.
 *
 * if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
 * VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
 * }
 * @param vehicle
 * @param state
 */
function setTaxiLights(vehicle, state) {
    return _in(0x598803e8, 0x5e8448d9, vehicle, state);
}
exports.setTaxiLights = setTaxiLights;
function setTeamPickupObject(object, p1, p2) {
    return _in(0x53e0df1a, 0x2a3cf0ca, object, p1, p2);
}
exports.setTeamPickupObject = setTeamPickupObject;
/**
 * From the scripts:
 *
 * MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);
 *
 * Related to tennis mode.
 * @param ped
 * @param p1
 * @param p2
 */
function setTennisMoveNetworkSignalFloat(ped, p1, p2) {
    return _in(0x54f157e0, 0x336a3822, ped, _ts(p1), _fv(p2));
}
exports.setTennisMoveNetworkSignalFloat = setTennisMoveNetworkSignalFloat;
function setTextCentre(align) {
    return _in(0xc02f4dbf, 0xb51d988b, align);
}
exports.setTextCentre = setTextCentre;
/**
 * colors you input not same as you think?
 * A: for some reason its R B G A
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
function setTextColour(red, green, blue, alpha) {
    return _in(0xbe6b23ff, 0xa53fb442, red, green, blue, alpha);
}
exports.setTextColour = setTextColour;
function setTextDropShadow() {
    return _in(0x1ca3e9ea, 0xc9d93e5e);
}
exports.setTextDropShadow = setTextDropShadow;
/**
 * distance - shadow distance in pixels, both horizontal and vertical
 * r, g, b, a - color
 * @param distance
 * @param r
 * @param g
 * @param b
 * @param a
 */
function setTextDropshadow(distance, r, g, b, a) {
    return _in(0x465c84bc, 0x39f1c351, distance, r, g, b, a);
}
exports.setTextDropshadow = setTextDropshadow;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param r
 * @param g
 * @param b
 * @param a
 */
function setTextEdge(p0, r, g, b, a) {
    return _in(0x44160324, 0x0d202fa6, p0, r, g, b, a);
}
exports.setTextEdge = setTextEdge;
/**
 * fonts that mess up your text where made for number values/misc stuff
 * @param fontType
 */
function setTextFont(fontType) {
    return _in(0x66e0276c, 0xc5f6b9da, fontType);
}
exports.setTextFont = setTextFont;
function setTextInputBoxEnabled(p0) {
    return _in(0x1185a808, 0x7587322c, p0);
}
exports.setTextInputBoxEnabled = setTextInputBoxEnabled;
/**
 * Types -
 * 0: Center-Justify
 * 1: Left-Justify
 * 2: Right-Justify
 *
 * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
 * @param justifyType
 */
function setTextJustification(justifyType) {
    return _in(0x4e096588, 0xb13ffeca, justifyType);
}
exports.setTextJustification = setTextJustification;
function setTextLeading(p0) {
    return _in(0xa50abc31, 0xe3cdfaff, p0);
}
exports.setTextLeading = setTextLeading;
function setTextOutline() {
    return _in(0x2513dfb0, 0xfb8400fe);
}
exports.setTextOutline = setTextOutline;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
function setTextProportional(p0) {
    return _in(0x038c1f51, 0x7d7fdcf8, p0);
}
exports.setTextProportional = setTextProportional;
function setTextRenderId(renderId) {
    return _in(0x5f153029, 0x36e07111, renderId);
}
exports.setTextRenderId = setTextRenderId;
function setTextRightJustify(toggle) {
    return _in(0x6b3c4650, 0xbc8bee47, toggle);
}
exports.setTextRightJustify = setTextRightJustify;
/**
 * Size range : 0F to 1.0F
 * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
 * @param scale
 * @param size
 */
function setTextScale(scale, size) {
    return _in(0x07c837f9, 0xa01c34c9, _fv(scale), _fv(size));
}
exports.setTextScale = setTextScale;
/**
 * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
 *
 * start - left boundry on screen position (0.0 - 1.0)
 * end - right boundry on screen position (0.0 - 1.0)
 * @param start
 * @param end
 */
function setTextWrap(start, end) {
    return _in(0x63145d9c, 0x883a1a70, _fv(start), _fv(end));
}
exports.setTextWrap = setTextWrap;
function setThirdPersonAimCamNearClipThisUpdate(p0) {
    return _in(0x42156508, 0x606de65e, _fv(p0));
}
exports.setThirdPersonAimCamNearClipThisUpdate = setThirdPersonAimCamNearClipThisUpdate;
/**
 * Seems to animate the gameplay camera zoom.
 *
 * Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
 * will animate the camera zooming in from 1000 meters away.
 *
 * Game scripts use it like this:
 *
 * // Setting this to 1 prevents V key from changing zoom
 * PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
 *
 * // These restrict how far you can move cam up/down left/right
 * CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);
 * CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);
 *
 * CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);
 * @param p0
 * @param distance
 */
function setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0, distance) {
    return _in(0xdf2e1f77, 0x42402e81, _fv(p0), _fv(distance));
}
exports.setThirdPersonCamOrbitDistanceLimitsThisUpdate = setThirdPersonCamOrbitDistanceLimitsThisUpdate;
/**
 * minimum: Degrees between -180f and 180f.
 * maximum: Degrees between -180f and 180f.
 *
 * Clamps the gameplay camera's current yaw.
 *
 * Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
 * @param minimum
 * @param maximum
 */
function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum, maximum) {
    return _in(0x8f993d26, 0xe0ca5e8e, _fv(minimum), _fv(maximum));
}
exports.setThirdPersonCamRelativeHeadingLimitsThisUpdate = setThirdPersonCamRelativeHeadingLimitsThisUpdate;
/**
 * minimum: Degrees between -90f and 90f.
 * maximum: Degrees between -90f and 90f.
 *
 * Clamps the gameplay camera's current pitch.
 *
 * Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
 * @param minimum
 * @param maximum
 */
function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum, maximum) {
    return _in(0xa516c198, 0xb7dca1e1, _fv(minimum), _fv(maximum));
}
exports.setThirdPersonCamRelativePitchLimitsThisUpdate = setThirdPersonCamRelativePitchLimitsThisUpdate;
/**
 * Sets bit 3 in GtaThread+0x150
 * @param toggle
 */
function setThisIsATriggerScript(toggle) {
    return _in(0x6f2135b6, 0x129620c1, toggle);
}
exports.setThisIsATriggerScript = setThisIsATriggerScript;
function setThisScriptCanBePaused(toggle) {
    return _in(0xaa391c72, 0x8106f7af, toggle);
}
exports.setThisScriptCanBePaused = setThisScriptCanBePaused;
function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle) {
    return _in(0xb98236ca, 0xaecef897, toggle);
}
exports.setThisScriptCanRemoveBlipsCreatedByAnyScript = setThisScriptCanRemoveBlipsCreatedByAnyScript;
/**
 * THREAD_PRIO_HIGHEST = 0
 * THREAD_PRIO_NORMAL = 1
 * THREAD_PRIO_LOWEST = 2
 * THREAD_PRIO_MANUAL_UPDATE = 100
 * @param priority
 */
function setThisThreadPriority(priority) {
    return _in(0x42b65dee, 0xf2edf2a1, priority);
}
exports.setThisThreadPriority = setThisThreadPriority;
function setTickerJohnmarstonIsDone() {
    return _in(0xfb00ca71, 0xda386228);
}
exports.setTickerJohnmarstonIsDone = setTickerJohnmarstonIsDone;
/**
 * Maximum value is 1.
 * At a value of 0 the game will still run at a minimum time scale.
 *
 * Slow Motion 1: 0.6
 * Slow Motion 2: 0.4
 * Slow Motion 3: 0.2
 * @param timeScale
 */
function setTimeScale(timeScale) {
    return _in(0x1d408577, 0xd440e81e, _fv(timeScale));
}
exports.setTimeScale = setTimeScale;
/**
 * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
 *
 * Parameters:
 * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
 *
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 */
function setTimecycleModifier(modifierName) {
    return _in(0x2c933abf, 0x17a1df41, _ts(modifierName));
}
exports.setTimecycleModifier = setTimecycleModifier;
function setTimecycleModifierStrength(strength) {
    return _in(0x82e7ffcd, 0x5b2326b3, _fv(strength));
}
exports.setTimecycleModifierStrength = setTimecycleModifierStrength;
function setTintIndexClosestBuildingOfType(x, y, z, radius, modelHash, textureVariation) {
    return _in(0xf12e3303, 0x4d887f66, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), textureVariation, _r);
}
exports.setTintIndexClosestBuildingOfType = setTintIndexClosestBuildingOfType;
function setTrackedPointInfo(point, x, y, z, radius) {
    return _in(0x164ecbb3, 0xcf750cb0, point, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.setTrackedPointInfo = setTrackedPointInfo;
function setTrailerAttachmentEnabled(p0, p1) {
    return _in(0x2fa2494b, 0x47fdd009, p0, p1);
}
exports.setTrailerAttachmentEnabled = setTrailerAttachmentEnabled;
function setTrailerInverseMassScale(vehicle, p1) {
    return _in(0x2a8f319b, 0x392e7b3f, vehicle, _fv(p1));
}
exports.setTrailerInverseMassScale = setTrailerInverseMassScale;
function setTrailerLegsLowered(vehicle) {
    return _in(0x878c75c0, 0x9fbdb942, vehicle);
}
exports.setTrailerLegsLowered = setTrailerLegsLowered;
/**
 * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
 * @param vehicle
 */
function setTrailerLegsRaised(vehicle) {
    return _in(0x95cf53b3, 0xd687f9fa, vehicle);
}
exports.setTrailerLegsRaised = setTrailerLegsRaised;
function setTrainCruiseSpeed(train, speed) {
    return _in(0x16469284, 0xdb8c62b5, train, _fv(speed));
}
exports.setTrainCruiseSpeed = setTrainCruiseSpeed;
function setTrainSpeed(train, speed) {
    return _in(0xaa0bc91b, 0xe0b796e3, train, _fv(speed));
}
exports.setTrainSpeed = setTrainSpeed;
/**
 * Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
 *
 * trackIndex: 0 - 26
 * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
 * @param trackIndex
 * @param frequency
 */
function setTrainTrackSpawnFrequency(trackIndex, frequency) {
    return _in(0x21973bbf, 0x8d17edfa, trackIndex, frequency);
}
exports.setTrainTrackSpawnFrequency = setTrainTrackSpawnFrequency;
/**
 * Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
 * @param vehicle
 * @param transformRate
 */
function setTransformRateForAnimation(vehicle, transformRate) {
    return _in(0x49821825, 0x9fb7c72d, vehicle, _fv(transformRate));
}
exports.setTransformRateForAnimation = setTransformRateForAnimation;
/**
 * When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
 * @param vehicle
 * @param toggle
 */
function setTransformToSubmarineUsesAlternateInput(vehicle, toggle) {
    return _in(0x41b9fb92, 0xeded32a6, vehicle, toggle);
}
exports.setTransformToSubmarineUsesAlternateInput = setTransformToSubmarineUsesAlternateInput;
function setTransitionOutOfTimecycleModifier(strength) {
    return _in(0x1cba05ae, 0x7bd7ee05, _fv(strength));
}
exports.setTransitionOutOfTimecycleModifier = setTransitionOutOfTimecycleModifier;
/**
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 * @param transition
 */
function setTransitionTimecycleModifier(modifierName, transition) {
    return _in(0x3bcf5674, 0x85e1971c, _ts(modifierName), _fv(transition));
}
exports.setTransitionTimecycleModifier = setTransitionTimecycleModifier;
function setTreatAsAmbientPedForDriverLockon(ped, p1) {
    return _in(0x2f3c3d9f, 0x50681de4, ped, p1);
}
exports.setTreatAsAmbientPedForDriverLockon = setTreatAsAmbientPedForDriverLockon;
/**
 * Toggles specific flag on turret
 * @param vehicle
 * @param index
 * @param toggle
 */
function setTurretHidden(vehicle, index, toggle) {
    return _in(0xc60060eb, 0x0d8ac7b1, vehicle, index, toggle);
}
exports.setTurretHidden = setTurretHidden;
/**
 * Probably changes tvs from being a 3d audio to being "global" audio
 * @param toggle
 */
function setTvAudioFrontend(toggle) {
    return _in(0x113d2c5d, 0xc57e1774, toggle);
}
exports.setTvAudioFrontend = setTvAudioFrontend;
function setTvChannel(channel) {
    return _in(0xbaabbb23, 0xeb6e484e, channel);
}
exports.setTvChannel = setTvChannel;
/**
 * Loads specified video sequence into the TV Channel
 * TV_Channel ranges from 0-2
 * VideoSequence can be any of the following:
 * "PL_STD_CNT" CNT Standard Channel
 * "PL_STD_WZL" Weazel Standard Channel
 * "PL_LO_CNT"
 * "PL_LO_WZL"
 * "PL_SP_WORKOUT"
 * "PL_SP_INV" - Jay Norris Assassination Mission Fail
 * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
 * "PL_LO_RS" - Righteous Slaughter Ad
 * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
 * "PL_SP_PLSH1_INTRO"
 * "PL_LES1_FAME_OR_SHAME"
 * "PL_STD_WZL_FOS_EP2"
 * "PL_MP_WEAZEL" - Weazel Logo on loop
 * "PL_MP_CCTV" - Generic CCTV loop
 *
 * Restart:
 * 0=video sequence continues as normal
 * 1=sequence restarts from beginning every time that channel is selected
 *
 *
 * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
 * https://pastebin.com/zUzGB6h7
 * @param tvChannel
 * @param playlistName
 * @param restart
 */
function setTvChannelPlaylist(tvChannel, playlistName, restart) {
    return _in(0xf7b38b83, 0x05f1fe8b, tvChannel, _ts(playlistName), restart);
}
exports.setTvChannelPlaylist = setTvChannelPlaylist;
function setTvChannelPlaylistAtHour(tvChannel, playlistName, hour) {
    return _in(0x2201c576, 0xfacaebe8, tvChannel, _ts(playlistName), hour);
}
exports.setTvChannelPlaylistAtHour = setTvChannelPlaylistAtHour;
function setTvPlayerWatchingThisFrame(p0) {
    return _in(0xd1c55b11, 0x0e4df534, p0);
}
exports.setTvPlayerWatchingThisFrame = setTvPlayerWatchingThisFrame;
function setTvVolume(volume) {
    return _in(0x2982bf73, 0xf66e9ddc, _fv(volume));
}
exports.setTvVolume = setTvVolume;
/**
 * SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param health
 */
function setTyreHealth(vehicle, wheelIndex, health) {
    return _in(0x74c68ef9, 0x7645e79d, vehicle, wheelIndex, _fv(health));
}
exports.setTyreHealth = setTyreHealth;
/**
 * Controls how much traction the wheel loses.
 *
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtds" (Soft): 0.05
 * "owrtdm" (Medium): 0.45
 * "owrtdh" (Hard): 0.8
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
function setTyreMaximumGripDifferenceDueToWearRate(vehicle, wheelIndex, multiplier) {
    return _in(0xc970d0e0, 0xfc31d768, vehicle, wheelIndex, _fv(multiplier));
}
exports.setTyreMaximumGripDifferenceDueToWearRate = setTyreMaximumGripDifferenceDueToWearRate;
/**
 * Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
 * Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
function setTyreWearRate(vehicle, wheelIndex, multiplier) {
    return _in(0x01894e2e, 0xde923ca2, vehicle, wheelIndex, _fv(multiplier));
}
exports.setTyreWearRate = setTyreWearRate;
/**
 * Controls how fast the tires wear out.
 *
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtss" (Soft): 2.2
 * "owrtsm" (Medium): 1.7
 * "owrtsh" (Hard): 1.2
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
function setTyreWearRateScale(vehicle, wheelIndex, multiplier) {
    return _in(0x392183bb, 0x9ea57697, vehicle, wheelIndex, _fv(multiplier));
}
exports.setTyreWearRateScale = setTyreWearRateScale;
function setUseAdjustedMouseCoords(toggle) {
    return _in(0x5b73c77d, 0x9eb66e24, toggle);
}
exports.setUseAdjustedMouseCoords = setUseAdjustedMouseCoords;
function setUseCameraHeadingForDesiredDirectionLockOnTest(ped, toggle) {
    return _in(0xfd325494, 0x792302d7, ped, toggle);
}
exports.setUseCameraHeadingForDesiredDirectionLockOnTest = setUseCameraHeadingForDesiredDirectionLockOnTest;
function setUseDesiredZCruiseSpeedForLanding(vehicle, toggle) {
    return _in(0xb68cfaf8, 0x3a02768d, vehicle, toggle);
}
exports.setUseDesiredZCruiseSpeedForLanding = setUseDesiredZCruiseSpeedForLanding;
/**
 * Changes the car jump control to require a double-tap to activate.
 * @param toggle
 */
function setUseDoubleClickForCarJump(toggle) {
    return _in(0x5bbcf35b, 0xf6e456f7, toggle);
}
exports.setUseDoubleClickForCarJump = setUseDoubleClickForCarJump;
function setUseHiDof() {
    return _in(0xa13b0222, 0xf3d94a94);
}
exports.setUseHiDof = setUseHiDof;
/**
 * Only used in R* Script fm_mission_controller_2020
 */
function setUseHiDofOnSyncedSceneThisUpdate() {
    return _in(0x731a8805, 0x55da3647);
}
exports.setUseHiDofOnSyncedSceneThisUpdate = setUseHiDofOnSyncedSceneThisUpdate;
/**
 * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
 * @param vehicle
 * @param toggle
 */
function setUseHigherCarJump(vehicle, toggle) {
    return _in(0xf06a16ca, 0x55d138d8, vehicle, toggle);
}
exports.setUseHigherCarJump = setUseHigherCarJump;
/**
 * Toggles the Cayo Perico map.
 * @param toggle
 */
function setUseIslandMap(toggle) {
    return _in(0x5e146062, 0x4d194a38, toggle);
}
exports.setUseIslandMap = setUseIslandMap;
/**
 * PED_RAGDOLL_BUMP Proof?
 * @param entity
 * @param toggle
 */
function setUseKinematicPhysics(entity, toggle) {
    return _in(0x15f94473, 0x0c832252, entity, toggle);
}
exports.setUseKinematicPhysics = setUseKinematicPhysics;
function setUseSetDestinationInPauseMap(toggle) {
    return _in(0x6cdd5814, 0x6a436083, toggle);
}
exports.setUseSetDestinationInPauseMap = setUseSetDestinationInPauseMap;
function setUserRadioControlEnabled(toggle) {
    return _in(0x19f21e63, 0xae6eae4e, toggle);
}
exports.setUserRadioControlEnabled = setUserRadioControlEnabled;
function setVariableOnSound(soundId, variable, p2) {
    return _in(0xad6b3148, 0xa78ae9b6, soundId, _ts(variable), _fv(p2));
}
exports.setVariableOnSound = setVariableOnSound;
/**
 * From the scripts, p0:
 *
 * "ArmWrestlingIntensity",
 * "INOUT",
 * "Monkey_Stream",
 * "ZoomLevel"
 * @param variable
 * @param p1
 */
function setVariableOnStream(variable, p1) {
    return _in(0x2f9d3834, 0xaeb9ef79, _ts(variable), _fv(p1));
}
exports.setVariableOnStream = setVariableOnStream;
function setVariableOnSynchSceneAudio(variableName, value) {
    return _in(0xbcc29f93, 0x5ed07688, _ts(variableName), _fv(value));
}
exports.setVariableOnSynchSceneAudio = setVariableOnSynchSceneAudio;
/**
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
 * @param variableName
 * @param value
 */
function setVariableOnUnderWaterStream(variableName, value) {
    return _in(0x733adf24, 0x1531e5c2, _ts(variableName), _fv(value));
}
exports.setVariableOnUnderWaterStream = setVariableOnUnderWaterStream;
function setVehForcedRadioThisFrame(vehicle) {
    return _in(0xc1805d05, 0xe6d4fe10, vehicle);
}
exports.setVehForcedRadioThisFrame = setVehForcedRadioThisFrame;
function setVehHasNormalRadio(vehicle) {
    return _in(0x3e45765f, 0x3fbb582f, vehicle);
}
exports.setVehHasNormalRadio = setVehHasNormalRadio;
/**
 * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
 * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
 * @param vehicle
 * @param radioStation
 */
function setVehRadioStation(vehicle, radioStation) {
    return _in(0x1b9c0099, 0xcb942ac6, vehicle, _ts(radioStation));
}
exports.setVehRadioStation = setVehRadioStation;
function setVehicleActAsIfHasSirenOn(vehicle, p1) {
    return _in(0x9becd4b9, 0xfef3f8a6, vehicle, p1);
}
exports.setVehicleActAsIfHasSirenOn = setVehicleActAsIfHasSirenOn;
function setVehicleActAsIfHighSpeedForFragSmashing(vehicle, p1) {
    return _in(0x1f9fb66f, 0x3a3842d2, vehicle, p1);
}
exports.setVehicleActAsIfHighSpeedForFragSmashing = setVehicleActAsIfHighSpeedForFragSmashing;
function setVehicleActiveDuringPlayback(vehicle, toggle) {
    return _in(0xdffcef48, 0xe511db48, vehicle, toggle);
}
exports.setVehicleActiveDuringPlayback = setVehicleActiveDuringPlayback;
function setVehicleActiveForPedNavigation(vehicle, toggle) {
    return _in(0x21115bcd, 0x6e44656a, vehicle, toggle);
}
exports.setVehicleActiveForPedNavigation = setVehicleActiveForPedNavigation;
/**
 * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
 * Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
 * @param vehicle
 * @param toggle
 */
function setVehicleAiCanUseExclusiveSeats(vehicle, toggle) {
    return _in(0x41062318, 0xf23ed854, vehicle, toggle);
}
exports.setVehicleAiCanUseExclusiveSeats = setVehicleAiCanUseExclusiveSeats;
function setVehicleAlarm(vehicle, state) {
    return _in(0xcde5e70c, 0x1ddb954c, vehicle, state);
}
exports.setVehicleAlarm = setVehicleAlarm;
function setVehicleAllowHomingMissleLockon(vehicle, toggle, p2) {
    return _in(0x7d6f9a3e, 0xf26136a0, vehicle, toggle, p2);
}
exports.setVehicleAllowHomingMissleLockon = setVehicleAllowHomingMissleLockon;
function setVehicleAllowHomingMissleLockonSynced(vehicle, canBeLockedOn, p2) {
    return _in(0x1dda078d, 0x12879eee, vehicle, canBeLockedOn, p2);
}
exports.setVehicleAllowHomingMissleLockonSynced = setVehicleAllowHomingMissleLockonSynced;
/**
 * Makes the vehicle accept no passengers.
 * @param veh
 * @param toggle
 */
function setVehicleAllowNoPassengersLockon(veh, toggle) {
    return _in(0x5d14d415, 0x4bfe7b2c, veh, toggle);
}
exports.setVehicleAllowNoPassengersLockon = setVehicleAllowNoPassengersLockon;
/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param vehicle
 */
function setVehicleAsNoLongerNeeded(vehicle) {
    return _in(0x629bfa74, 0x418d6239, _ii(vehicle));
}
exports.setVehicleAsNoLongerNeeded = setVehicleAsNoLongerNeeded;
/**
 * intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
 * Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
 * @param vehicle
 * @param intensity
 */
function setVehicleAudioBodyDamageFactor(vehicle, intensity) {
    return _in(0x01bb4d57, 0x7d38bd9e, vehicle, _fv(intensity));
}
exports.setVehicleAudioBodyDamageFactor = setVehicleAudioBodyDamageFactor;
function setVehicleAudioEngineDamageFactor(vehicle, damageFactor) {
    return _in(0x59e7b488, 0x451f4d3a, vehicle, _fv(damageFactor));
}
exports.setVehicleAudioEngineDamageFactor = setVehicleAudioEngineDamageFactor;
function setVehicleAutomaticallyAttaches(vehicle, p1, p2) {
    return _in(0x8ba6f76b, 0xc53a1493, vehicle, p1, p2, _r, _ri);
}
exports.setVehicleAutomaticallyAttaches = setVehicleAutomaticallyAttaches;
function setVehicleAvoidPlayerVehicleRiotVanMission(p0) {
    return _in(0xd3301660, 0xa57c9272, p0);
}
exports.setVehicleAvoidPlayerVehicleRiotVanMission = setVehicleAvoidPlayerVehicleRiotVanMission;
function setVehicleBlipThrottleRandomly(vehicle, p1) {
    return _in(0x9f3f689b, 0x814f2599, vehicle, p1);
}
exports.setVehicleBlipThrottleRandomly = setVehicleBlipThrottleRandomly;
/**
 * Controls how fast bobbleheads and tsurikawas move on each axis.
 *
 * p2 is probably z, but changing that value didn't seem to have a noticeable effect.
 * @param x
 * @param y
 * @param p2
 */
function setVehicleBobbleheadVelocity(x, y, p2) {
    return _in(0x870b8b7a, 0x766615c8, _fv(x), _fv(y), _fv(p2));
}
exports.setVehicleBobbleheadVelocity = setVehicleBobbleheadVelocity;
/**
 * p2 often set to 1000.0 in the decompiled scripts.
 * @param vehicle
 * @param value
 */
function setVehicleBodyHealth(vehicle, value) {
    return _in(0xb77d05ac, 0x8c78aadb, vehicle, _fv(value));
}
exports.setVehicleBodyHealth = setVehicleBodyHealth;
/**
 * Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * @param vehicle
 * @param bombCount
 */
function setVehicleBombAmmo(vehicle, bombCount) {
    return _in(0xf4b2ed59, 0xdeb5d774, vehicle, bombCount);
}
exports.setVehicleBombAmmo = setVehicleBombAmmo;
/**
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
 *
 * Will give a boost-soundeffect.
 * @param vehicle
 * @param toggle
 */
function setVehicleBoostActive(vehicle, toggle) {
    return _in(0x4a04de7c, 0xab2739a1, vehicle, toggle);
}
exports.setVehicleBoostActive = setVehicleBoostActive;
function setVehicleBrake(vehicle, toggle) {
    return _in(0xe4e2fd32, 0x3574965c, vehicle, toggle);
}
exports.setVehicleBrake = setVehicleBrake;
function setVehicleBrakeLights(vehicle, toggle) {
    return _in(0x92b35082, 0xe0b42f66, vehicle, toggle);
}
exports.setVehicleBrakeLights = setVehicleBrakeLights;
function setVehicleBrokenPartsDontAffectAiHandling(vehicle, p1) {
    return _in(0xc361aa04, 0x0d6637a8, vehicle, p1);
}
exports.setVehicleBrokenPartsDontAffectAiHandling = setVehicleBrokenPartsDontAffectAiHandling;
/**
 * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
 * @param vehicle
 * @param position
 * @param p2
 */
function setVehicleBulldozerArmPosition(vehicle, position, p2) {
    return _in(0xf8ebccc9, 0x6adb9fb7, vehicle, _fv(position), p2);
}
exports.setVehicleBulldozerArmPosition = setVehicleBulldozerArmPosition;
/**
 * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
 * @param vehicle
 * @param toggle
 */
function setVehicleBurnout(vehicle, toggle) {
    return _in(0xfb879444, 0x4a7d60fb, vehicle, toggle);
}
exports.setVehicleBurnout = setVehicleBurnout;
/**
 * This has not yet been tested - it's just an assumption of what the types could be.
 * @param vehicle
 * @param state
 */
function setVehicleCanBeTargetted(vehicle, state) {
    return _in(0x3750146a, 0x28097a82, vehicle, state);
}
exports.setVehicleCanBeTargetted = setVehicleCanBeTargetted;
function setVehicleCanBeUsedByFleeingPeds(vehicle, toggle) {
    return _in(0x300504b2, 0x3bd3b711, vehicle, toggle);
}
exports.setVehicleCanBeUsedByFleeingPeds = setVehicleCanBeUsedByFleeingPeds;
function setVehicleCanBeVisiblyDamaged(vehicle, state) {
    return _in(0x4c7028f7, 0x8ffd3681, vehicle, state);
}
exports.setVehicleCanBeVisiblyDamaged = setVehicleCanBeVisiblyDamaged;
function setVehicleCanBreak(vehicle, toggle) {
    return _in(0x59bf8c3d, 0x52c92f66, vehicle, toggle);
}
exports.setVehicleCanBreak = setVehicleCanBreak;
function setVehicleCanDeformWheels(vehicle, toggle) {
    return _in(0x0cdda42f, 0x9e360ca6, vehicle, toggle);
}
exports.setVehicleCanDeformWheels = setVehicleCanDeformWheels;
function setVehicleCanEjectPassengersIfLocked(p0, p1) {
    return _in(0x065d03a9, 0xd6b2c6b5, p0, p1);
}
exports.setVehicleCanEjectPassengersIfLocked = setVehicleCanEjectPassengersIfLocked;
function setVehicleCanEngineMissfire(vehicle, toggle) {
    return _in(0x206bc5dc, 0x9d1ac70a, vehicle, toggle);
}
exports.setVehicleCanEngineMissfire = setVehicleCanEngineMissfire;
function setVehicleCanLeakOil(vehicle, toggle) {
    return _in(0x51bb2d88, 0xd31a914b, vehicle, toggle);
}
exports.setVehicleCanLeakOil = setVehicleCanLeakOil;
function setVehicleCanLeakPetrol(vehicle, toggle) {
    return _in(0x19254724, 0x7864dfdd, vehicle, toggle);
}
exports.setVehicleCanLeakPetrol = setVehicleCanLeakPetrol;
function setVehicleCanSaveInGarage(vehicle, toggle) {
    return _in(0x428baccd, 0xf5e26ead, vehicle, toggle);
}
exports.setVehicleCanSaveInGarage = setVehicleCanSaveInGarage;
function setVehicleCausesSwerving(vehicle, toggle) {
    return _in(0x9849de24, 0xfcf23ccc, vehicle, toggle);
}
exports.setVehicleCausesSwerving = setVehicleCausesSwerving;
function setVehicleCeilingHeight(vehicle, height) {
    return _in(0xa4641306, 0x6687a328, vehicle, _fv(height));
}
exports.setVehicleCeilingHeight = setVehicleCeilingHeight;
/**
 * <1.0 - Decreased torque
 * =1.0 - Default torque
 * >1.0 - Increased torque
 *
 * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
 *
 * value - is between 0.2 and 1.8 in the decompiled scripts.
 *
 * This needs to be called every frame to take effect.
 * @param vehicle
 * @param value
 */
function setVehicleCheatPowerIncrease(vehicle, value) {
    return _in(0xb59e4bd3, 0x7ae292db, vehicle, _fv(value));
}
exports.setVehicleCheatPowerIncrease = setVehicleCheatPowerIncrease;
/**
 * Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.
 * @param vehicle
 * @param colorCombination
 */
function setVehicleColourCombination(vehicle, colorCombination) {
    return _in(0x33e8cd33, 0x22e2fe31, vehicle, colorCombination);
}
exports.setVehicleColourCombination = setVehicleColourCombination;
/**
 * colorPrimary & colorSecondary are the paint index for the vehicle.
 * For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
 * -------------------------------------------------------------------------
 * Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
 *
 * Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param colorPrimary
 * @param colorSecondary
 */
function setVehicleColours(vehicle, colorPrimary, colorSecondary) {
    return _in(0x4f1d4be3, 0xa7f24601, vehicle, colorPrimary, colorSecondary);
}
exports.setVehicleColours = setVehicleColours;
/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
function setVehicleCombatMode(toggle) {
    return _in(0x36de1095, 0x27a2c0c4, toggle);
}
exports.setVehicleCombatMode = setVehicleCombatMode;
/**
 * SET_VEHICLE_CONVERSATIONS_PERSIST?
 * @param p0
 * @param p1
 */
function setVehicleConversationsPersist(p0, p1) {
    return _in(0x58bb377b, 0xec7cd5f4, p0, p1);
}
exports.setVehicleConversationsPersist = setVehicleConversationsPersist;
function setVehicleConversationsPersistNew(p0, p1, p2) {
    return _in(0x9bd7bd55, 0xe4533183, p0, p1, p2);
}
exports.setVehicleConversationsPersistNew = setVehicleConversationsPersistNew;
/**
 * Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
 * Use GET_VEHICLE_BOMB_AMMO to get the current amount.
 * @param vehicle
 * @param counterMeasureCount
 */
function setVehicleCountermeasureAmmo(vehicle, counterMeasureCount) {
    return _in(0x9bda23bf, 0x666f0855, vehicle, counterMeasureCount);
}
exports.setVehicleCountermeasureAmmo = setVehicleCountermeasureAmmo;
function setVehicleCustomPathNodeStreamingRadius(vehicle, p1) {
    return _in(0x182f266c, 0x2d9e2beb, vehicle, _fv(p1));
}
exports.setVehicleCustomPathNodeStreamingRadius = setVehicleCustomPathNodeStreamingRadius;
/**
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
function setVehicleCustomPrimaryColour(vehicle, r, g, b) {
    return _in(0x7141766f, 0x91d15bea, vehicle, r, g, b);
}
exports.setVehicleCustomPrimaryColour = setVehicleCustomPrimaryColour;
/**
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
function setVehicleCustomSecondaryColour(vehicle, r, g, b) {
    return _in(0x36ced73b, 0xfed89754, vehicle, r, g, b);
}
exports.setVehicleCustomSecondaryColour = setVehicleCustomSecondaryColour;
/**
 * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
 *
 * Radius of effect damage applied in a sphere at impact location
 * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
 * @param vehicle
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param damage
 * @param radius
 * @param focusOnModel
 */
function setVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel) {
    return _in(0xa1dd317e, 0xa8fd4f29, vehicle, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(damage), _fv(radius), focusOnModel);
}
exports.setVehicleDamage = setVehicleDamage;
function setVehicleDamageScale(vehicle, p1) {
    return _in(0x4e20d2a6, 0x27011e8e, vehicle, _fv(p1), _r);
}
exports.setVehicleDamageScale = setVehicleDamageScale;
function setVehicleDamageScales(vehicle, p1, p2, p3, p4) {
    return _in(0x9640e30a, 0x7f395e4b, vehicle, p1, p2, p3, p4);
}
exports.setVehicleDamageScales = setVehicleDamageScales;
/**
 * This fixes the deformation of a vehicle but the vehicle health doesn't improve
 * @param vehicle
 */
function setVehicleDeformationFixed(vehicle) {
    return _in(0x953da1e1, 0xb12c0491, vehicle);
}
exports.setVehicleDeformationFixed = setVehicleDeformationFixed;
/**
 * Use this native inside a looped function.
 * Values:
 * - `0.0` = no vehicles on streets
 * - `1.0` = normal vehicles on streets
 * @param multiplier
 */
function setVehicleDensityMultiplierThisFrame(multiplier) {
    return _in(0x245a6883, 0xd966d537, _fv(multiplier));
}
exports.setVehicleDensityMultiplierThisFrame = setVehicleDensityMultiplierThisFrame;
/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
function setVehicleDetonationMode(toggle) {
    return _in(0x82e0ac41, 0x1e41a5b4, toggle);
}
exports.setVehicleDetonationMode = setVehicleDetonationMode;
/**
 * You can't use values greater than 15.0
 * Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
 * @param vehicle
 * @param dirtLevel
 */
function setVehicleDirtLevel(vehicle, dirtLevel) {
    return _in(0x79d3b596, 0xfe44ee8b, vehicle, _fv(dirtLevel));
}
exports.setVehicleDirtLevel = setVehicleDirtLevel;
function setVehicleDisableCollisionUponCreation(vehicle, disable) {
    return _in(0xaf60e6a2, 0x936f982a, vehicle, disable);
}
exports.setVehicleDisableCollisionUponCreation = setVehicleDisableCollisionUponCreation;
function setVehicleDisableHeightMapAvoidance(vehicle, p1) {
    return _in(0x8aa9180d, 0xe2fedd45, vehicle, p1);
}
exports.setVehicleDisableHeightMapAvoidance = setVehicleDisableHeightMapAvoidance;
function setVehicleDisableTowing(vehicle, toggle) {
    return _in(0x2b6747fa, 0xa9db9d6b, vehicle, toggle);
}
exports.setVehicleDisableTowing = setVehicleDisableTowing;
function setVehicleDontTerminateTaskWhenAchieved(vehicle) {
    return _in(0x76d26a22, 0x750e849e, vehicle);
}
exports.setVehicleDontTerminateTaskWhenAchieved = setVehicleDontTerminateTaskWhenAchieved;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 *
 * Usually used alongside other vehicle door natives.
 * @param vehicle
 * @param doorId
 * @param toggle
 */
function setVehicleDoorAutoLock(vehicle, doorId, toggle) {
    return _in(0x3b458ddb, 0x57038f08, vehicle, doorId, toggle);
}
exports.setVehicleDoorAutoLock = setVehicleDoorAutoLock;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param deleteDoor
 */
function setVehicleDoorBroken(vehicle, doorId, deleteDoor) {
    return _in(0xd4d4f6a4, 0xab575a33, vehicle, doorId, deleteDoor);
}
exports.setVehicleDoorBroken = setVehicleDoorBroken;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param speed
 * @param angle
 */
function setVehicleDoorControl(vehicle, doorId, speed, angle) {
    return _in(0xf2bfa043, 0x0f0a0fcb, vehicle, doorId, speed, _fv(angle));
}
exports.setVehicleDoorControl = setVehicleDoorControl;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param p2
 * @param p3
 * @param p4
 */
function setVehicleDoorLatched(vehicle, doorId, p2, p3, p4) {
    return _in(0xa5a9653a, 0x8d2caf48, vehicle, doorId, p2, p3, p4);
}
exports.setVehicleDoorLatched = setVehicleDoorLatched;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param loose
 * @param openInstantly
 */
function setVehicleDoorOpen(vehicle, doorId, loose, openInstantly) {
    return _in(0x7c65dac7, 0x3c35c862, vehicle, doorId, loose, openInstantly);
}
exports.setVehicleDoorOpen = setVehicleDoorOpen;
/**
 * enum eDoorId
 * {
 * VEH_EXT_DOOR_INVALID_ID = -1,
 * VEH_EXT_DOOR_DSIDE_F,
 * VEH_EXT_DOOR_DSIDE_R,
 * VEH_EXT_DOOR_PSIDE_F,
 * VEH_EXT_DOOR_PSIDE_R,
 * VEH_EXT_BONNET,
 * VEH_EXT_BOOT
 * };
 * @param vehicle
 * @param doorId
 * @param closeInstantly
 */
function setVehicleDoorShut(vehicle, doorId, closeInstantly) {
    return _in(0x93d9bd30, 0x0d7789e5, vehicle, doorId, closeInstantly);
}
exports.setVehicleDoorShut = setVehicleDoorShut;
/**
 * enum eVehicleLockState
 * {
 * VEHICLELOCK_NONE,
 * VEHICLELOCK_UNLOCKED,
 * VEHICLELOCK_LOCKED,
 * VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
 * VEHICLELOCK_LOCKED_PLAYER_INSIDE,
 * VEHICLELOCK_LOCKED_INITIALLY,
 * VEHICLELOCK_FORCE_SHUT_DOORS,
 * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
 * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
 * VEHICLELOCK_LOCKED_NO_PASSENGERS,
 * VEHICLELOCK_CANNOT_ENTER
 * };
 * @param vehicle
 * @param doorLockStatus
 */
function setVehicleDoorsLocked(vehicle, doorLockStatus) {
    return _in(0xb664292e, 0xaecf7fa6, vehicle, doorLockStatus);
}
exports.setVehicleDoorsLocked = setVehicleDoorsLocked;
/**
 * After some analysis, I've decided that these are what the parameters are.
 *
 * We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
 * l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
 * ...
 * VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
 * @param vehicle
 * @param toggle
 */
function setVehicleDoorsLockedForAllPlayers(vehicle, toggle) {
    return _in(0xa2f80b8d, 0x040727cc, vehicle, toggle);
}
exports.setVehicleDoorsLockedForAllPlayers = setVehicleDoorsLockedForAllPlayers;
function setVehicleDoorsLockedForAllTeams(vehicle, toggle) {
    return _in(0x203b527d, 0x1b77904c, vehicle, toggle);
}
exports.setVehicleDoorsLockedForAllTeams = setVehicleDoorsLockedForAllTeams;
function setVehicleDoorsLockedForNonScriptPlayers(vehicle, toggle) {
    return _in(0x9737a371, 0x36f07e75, vehicle, toggle);
}
exports.setVehicleDoorsLockedForNonScriptPlayers = setVehicleDoorsLockedForNonScriptPlayers;
function setVehicleDoorsLockedForPlayer(vehicle, player, toggle) {
    return _in(0x517aaf68, 0x4bb50cd1, vehicle, player, toggle);
}
exports.setVehicleDoorsLockedForPlayer = setVehicleDoorsLockedForPlayer;
function setVehicleDoorsLockedForTeam(vehicle, team, toggle) {
    return _in(0xb81f6d4a, 0x8f5eeba8, vehicle, team, toggle);
}
exports.setVehicleDoorsLockedForTeam = setVehicleDoorsLockedForTeam;
/**
 * Closes all doors of a vehicle:
 * @param vehicle
 * @param closeInstantly
 */
function setVehicleDoorsShut(vehicle, closeInstantly) {
    return _in(0x781b3d62, 0xbb013ef5, vehicle, closeInstantly);
}
exports.setVehicleDoorsShut = setVehicleDoorsShut;
/**
 * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
 *
 * youtu.be/3arlUxzHl5Y
 * i.imgur.com/WrNpYFs.jpg
 * @param vehicle
 * @param toggle
 */
function setVehicleDropsMoneyWhenBlownUp(vehicle, toggle) {
    return _in(0x068f64f2, 0x470f9656, vehicle, toggle);
}
exports.setVehicleDropsMoneyWhenBlownUp = setVehicleDropsMoneyWhenBlownUp;
function setVehicleEngineCanDegrade(vehicle, toggle) {
    return _in(0x98376585, 0x6f2564f9, vehicle, toggle);
}
exports.setVehicleEngineCanDegrade = setVehicleEngineCanDegrade;
/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * Minimum: -4000
 * Maximum: 1000
 *
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * @param vehicle
 * @param health
 */
function setVehicleEngineHealth(vehicle, health) {
    return _in(0x45f6d8ee, 0xf34abef1, vehicle, _fv(health));
}
exports.setVehicleEngineHealth = setVehicleEngineHealth;
/**
 * Starts or stops the engine on the specified vehicle.
 *
 * vehicle: The vehicle to start or stop the engine on.
 * value: true to turn the vehicle on; false to turn it off.
 * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
 * disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
 *
 * from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
 * @param vehicle
 * @param value
 * @param instantly
 * @param disableAutoStart
 */
function setVehicleEngineOn(vehicle, value, instantly, disableAutoStart) {
    return _in(0x2497c471, 0x7c8b881e, vehicle, value, instantly, disableAutoStart);
}
exports.setVehicleEngineOn = setVehicleEngineOn;
/**
 * The parameter fade is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 * @param fade
 */
function setVehicleEnveffScale(vehicle, fade) {
    return _in(0x3afdc536, 0xc3d01674, vehicle, _fv(fade));
}
exports.setVehicleEnveffScale = setVehicleEnveffScale;
/**
 * index: 0 - 1
 *
 * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
 * @param vehicle
 * @param ped
 * @param index
 */
function setVehicleExclusiveDriver(vehicle, ped, index) {
    return _in(0xb5c51b55, 0x02e85e83, vehicle, ped, index);
}
exports.setVehicleExclusiveDriver = setVehicleExclusiveDriver;
function setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(vehicle, toggle) {
    return _in(0xd565f438, 0x137f0e10, vehicle, toggle);
}
exports.setVehicleExplodesOnExplosionDamageAtZeroBodyHealth = setVehicleExplodesOnExplosionDamageAtZeroBodyHealth;
/**
 * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
 * @param vehicle
 * @param toggle
 */
function setVehicleExplodesOnHighExplosionDamage(vehicle, toggle) {
    return _in(0x71b0892e, 0xc081d60a, vehicle, toggle);
}
exports.setVehicleExplodesOnHighExplosionDamage = setVehicleExplodesOnHighExplosionDamage;
/**
 * Max value is 32767
 * @param vehicle
 * @param range
 */
function setVehicleExtendedRemovalRange(vehicle, range) {
    return _in(0x79df7e80, 0x6202ce01, vehicle, range);
}
exports.setVehicleExtendedRemovalRange = setVehicleExtendedRemovalRange;
/**
 * Available extraIds are 1-14, however none of the vehicles have extras above 12.
 * @param vehicle
 * @param extraId
 * @param disable
 */
function setVehicleExtra(vehicle, extraId, disable) {
    return _in(0x7ee3a3c5, 0xe4a40cc9, vehicle, extraId, disable);
}
exports.setVehicleExtra = setVehicleExtra;
function setVehicleExtraColour5(vehicle, color) {
    return _in(0xf40dd601, 0xa65f7f19, vehicle, color);
}
exports.setVehicleExtraColour5 = setVehicleExtraColour5;
function setVehicleExtraColour6(vehicle, color) {
    return _in(0x6089cdf6, 0xa57f326c, vehicle, color);
}
exports.setVehicleExtraColour6 = setVehicleExtraColour6;
/**
 * They use the same color indexs as SET_VEHICLE_COLOURS.
 * @param vehicle
 * @param pearlescentColor
 * @param wheelColor
 */
function setVehicleExtraColours(vehicle, pearlescentColor, wheelColor) {
    return _in(0x2036f561, 0xadd12e33, vehicle, pearlescentColor, wheelColor);
}
exports.setVehicleExtraColours = setVehicleExtraColours;
/**
 * This fixes a vehicle.
 * If the vehicle's engine's broken then you cannot fix it with this native.
 * @param vehicle
 */
function setVehicleFixed(vehicle) {
    return _in(0x115722b1, 0xb9c14c1c, vehicle);
}
exports.setVehicleFixed = setVehicleFixed;
function setVehicleFlightNozzlePosition(vehicle, angleRatio) {
    return _in(0x30d779de, 0x7c4f6dd3, vehicle, _fv(angleRatio));
}
exports.setVehicleFlightNozzlePosition = setVehicleFlightNozzlePosition;
function setVehicleFlightNozzlePositionImmediate(vehicle, angle) {
    return _in(0x9aa47fff, 0x660cb932, vehicle, _fv(angle));
}
exports.setVehicleFlightNozzlePositionImmediate = setVehicleFlightNozzlePositionImmediate;
function setVehicleForceAfterburner(vehicle, toggle) {
    return _in(0xb055a345, 0x27cb8fd7, vehicle, toggle);
}
exports.setVehicleForceAfterburner = setVehicleForceAfterburner;
/**
 * Sets some bit of vehicle
 * @param vehicle
 * @param toggle
 */
function setVehicleForceInteriorlight(vehicle, toggle) {
    return _in(0x8821196d, 0x91fa2de5, vehicle, toggle);
}
exports.setVehicleForceInteriorlight = setVehicleForceInteriorlight;
function setVehicleForceReverseWarning(p0, p1) {
    return _in(0x97ffb4ad, 0xeed08066, p0, p1);
}
exports.setVehicleForceReverseWarning = setVehicleForceReverseWarning;
/**
 * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
 *
 * Speed is in meters per second
 * You can convert meters/s to mph here:
 * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
 * @param vehicle
 * @param speed
 */
function setVehicleForwardSpeed(vehicle, speed) {
    return _in(0xab54a438, 0x726d25d5, vehicle, _fv(speed));
}
exports.setVehicleForwardSpeed = setVehicleForwardSpeed;
/**
 * Seems to be identical to SET_VEHICLE_FORWARD_SPEED
 * @param vehicle
 * @param speed
 */
function setVehicleForwardSpeedXy(vehicle, speed) {
    return _in(0x6501129c, 0x9e0ffa05, vehicle, _fv(speed));
}
exports.setVehicleForwardSpeedXy = setVehicleForwardSpeedXy;
/**
 * Seems to be related to the metal parts, not tyres (like i was expecting lol)
 * @param vehicle
 * @param friction
 */
function setVehicleFrictionOverride(vehicle, friction) {
    return _in(0x1837af7c, 0x627009ba, vehicle, _fv(friction));
}
exports.setVehicleFrictionOverride = setVehicleFrictionOverride;
/**
 * It switch to highbeam when p1 is set to true.
 * @param vehicle
 * @param toggle
 */
function setVehicleFullbeam(vehicle, toggle) {
    return _in(0x8b7fd87f, 0x0ddb421e, vehicle, toggle);
}
exports.setVehicleFullbeam = setVehicleFullbeam;
/**
 * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
 * @param vehicle
 * @param toggle
 */
function setVehicleGeneratesEngineShockingEvents(vehicle, toggle) {
    return _in(0x279d50de, 0x5652d935, vehicle, toggle);
}
exports.setVehicleGeneratesEngineShockingEvents = setVehicleGeneratesEngineShockingEvents;
/**
 * Related to car generators & CPlayerSwitchMgrLong
 * @param x
 * @param y
 * @param z
 * @param radius
 */
function setVehicleGeneratorAreaOfInterest(x, y, z, radius) {
    return _in(0x9a75585f, 0xb2e54fad, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.setVehicleGeneratorAreaOfInterest = setVehicleGeneratorAreaOfInterest;
function setVehicleGravity(vehicle, toggle) {
    return _in(0x89f149b6, 0x131e57da, vehicle, toggle);
}
exports.setVehicleGravity = setVehicleGravity;
function setVehicleHandbrake(vehicle, toggle) {
    return _in(0x68478556, 0x8ef26a22, vehicle, toggle);
}
exports.setVehicleHandbrake = setVehicleHandbrake;
/**
 * Use the "AIHandling" string found in handling.meta
 * @param vehicle
 * @param hash
 */
function setVehicleHandlingOverride(vehicle, hash) {
    return _in(0x10655fab, 0x9915623d, vehicle, _ch(hash));
}
exports.setVehicleHandlingOverride = setVehicleHandlingOverride;
function setVehicleHasBeenDrivenFlag(vehicle, toggle) {
    return _in(0x02398b62, 0x7547189c, vehicle, toggle);
}
exports.setVehicleHasBeenDrivenFlag = setVehicleHasBeenDrivenFlag;
function setVehicleHasBeenOwnedByPlayer(vehicle, owned) {
    return _in(0x2b5f9d2a, 0xf1f1722d, vehicle, owned);
}
exports.setVehicleHasBeenOwnedByPlayer = setVehicleHasBeenOwnedByPlayer;
/**
 * If set to true, prevents vehicle sirens from having sound, leaving only the lights.
 * @param vehicle
 * @param toggle
 */
function setVehicleHasMutedSirens(vehicle, toggle) {
    return _in(0xd8050e0e, 0xb60cf274, vehicle, toggle);
}
exports.setVehicleHasMutedSirens = setVehicleHasMutedSirens;
/**
 * if true, axles won't bend.
 * @param vehicle
 * @param toggle
 */
function setVehicleHasStrongAxles(vehicle, toggle) {
    return _in(0x92f0cf72, 0x2bc4202f, vehicle, toggle);
}
exports.setVehicleHasStrongAxles = setVehicleHasStrongAxles;
function setVehicleHasUnbreakableLights(vehicle, toggle) {
    return _in(0x1aa8a837, 0xd2169d94, vehicle, toggle);
}
exports.setVehicleHasUnbreakableLights = setVehicleHasUnbreakableLights;
/**
 * p1 can be either 0, 1 or 2.
 *
 * Determines how vehicle lights behave when toggled.
 *
 * 0 = Default (Lights can be toggled between off, normal and high beams)
 * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
 * 2 = Always On (Lights can be toggled between normal and high beams)
 * @param vehicle
 * @param p1
 */
function setVehicleHeadlightShadows(vehicle, p1) {
    return _in(0x1fd09e73, 0x90a74d54, vehicle, p1);
}
exports.setVehicleHeadlightShadows = setVehicleHeadlightShadows;
function setVehicleHomingLockedontoState(p0, p1) {
    return _in(0x407dc5e9, 0x7db1a4d3, p0, p1);
}
exports.setVehicleHomingLockedontoState = setVehicleHomingLockedontoState;
function setVehicleHornSoundIndex(vehicle, value) {
    return _in(0x0350e7e1, 0x7ba767d0, vehicle, value);
}
exports.setVehicleHornSoundIndex = setVehicleHornSoundIndex;
/**
 * Seems to copy some values in vehicle
 * @param vehicle
 * @param p1
 */
function setVehicleImpatienceTimer(vehicle, p1) {
    return _in(0x6a973569, 0xba094650, vehicle, p1);
}
exports.setVehicleImpatienceTimer = setVehicleImpatienceTimer;
/**
 * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
 * @param vehicle
 * @param toggle
 */
function setVehicleInCarModShop(vehicle, toggle) {
    return _in(0x9d44fcce, 0x98450843, vehicle, toggle);
}
exports.setVehicleInCarModShop = setVehicleInCarModShop;
function setVehicleInactiveDuringPlayback(vehicle, toggle) {
    return _in(0x06582aff, 0x74894c75, vehicle, toggle);
}
exports.setVehicleInactiveDuringPlayback = setVehicleInactiveDuringPlayback;
/**
 * Sets the turn signal enabled for a vehicle.
 * Set turnSignal to 1 for left light, 0 for right light.
 * @param vehicle
 * @param turnSignal
 * @param toggle
 */
function setVehicleIndicatorLights(vehicle, turnSignal, toggle) {
    return _in(0xb5d45264, 0x751b7df0, vehicle, turnSignal, toggle);
}
exports.setVehicleIndicatorLights = setVehicleIndicatorLights;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param doorLockStatus
 */
function setVehicleIndividualDoorsLocked(vehicle, doorId, doorLockStatus) {
    return _in(0xbe707240, 0x27f85bcd, vehicle, doorId, doorLockStatus);
}
exports.setVehicleIndividualDoorsLocked = setVehicleIndividualDoorsLocked;
function setVehicleInfluencesWantedLevel(p0, p1) {
    return _in(0x0ad9e8f8, 0x7ff7c16f, p0, p1);
}
exports.setVehicleInfluencesWantedLevel = setVehicleInfluencesWantedLevel;
function setVehicleInteriorlight(vehicle, toggle) {
    return _in(0xbc2042f0, 0x90af6ad3, vehicle, toggle);
}
exports.setVehicleInteriorlight = setVehicleInteriorlight;
/**
 * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
 * @param vehicle
 * @param toggle
 */
function setVehicleIsConsideredByPlayer(vehicle, toggle) {
    return _in(0x31b927bb, 0xc44156cd, vehicle, toggle);
}
exports.setVehicleIsConsideredByPlayer = setVehicleIsConsideredByPlayer;
/**
 * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
 * @param vehicle
 * @param toggle
 */
function setVehicleIsRacing(vehicle, toggle) {
    return _in(0x07116e24, 0xe9d1929d, vehicle, toggle);
}
exports.setVehicleIsRacing = setVehicleIsRacing;
function setVehicleIsStolen(vehicle, isStolen) {
    return _in(0x67b2c79a, 0xa7ff5738, vehicle, isStolen);
}
exports.setVehicleIsStolen = setVehicleIsStolen;
/**
 * Sets the wanted state of this vehicle.
 * @param vehicle
 * @param state
 */
function setVehicleIsWanted(vehicle, state) {
    return _in(0xf7ec25a3, 0xebeec726, vehicle, state);
}
exports.setVehicleIsWanted = setVehicleIsWanted;
function setVehicleKeepEngineOnWhenAbandoned(vehicle, toggle) {
    return _in(0xb8fbc8b1, 0x330ca9b4, vehicle, toggle);
}
exports.setVehicleKeepEngineOnWhenAbandoned = setVehicleKeepEngineOnWhenAbandoned;
function setVehicleKersAllowed(vehicle, toggle) {
    return _in(0x99c82f8a, 0x139f3e4e, vehicle, toggle);
}
exports.setVehicleKersAllowed = setVehicleKersAllowed;
/**
 * multiplier = brightness of head lights.
 * this value isn't capped afaik.
 *
 * multiplier = 0.0 no lights
 * multiplier = 1.0 default game value
 *
 * @param vehicle
 * @param multiplier
 */
function setVehicleLightMultiplier(vehicle, multiplier) {
    return _in(0xb385454f, 0x8791f57c, vehicle, _fv(multiplier));
}
exports.setVehicleLightMultiplier = setVehicleLightMultiplier;
/**
 * set's if the vehicle has lights or not.
 * not an on off toggle.
 * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
 * p1 = 1 ;vehicle doesn't have lights, always off
 * p1 = 2 ;vehicle has always on lights
 * p1 = 3 ;or even larger like 4,5,... normal lights like =1
 * note1: when using =2 on day it's lowbeam,highbeam
 * but at night it's lowbeam,lowbeam,highbeam
 * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
 * @param vehicle
 * @param state
 */
function setVehicleLights(vehicle, state) {
    return _in(0x34e710ff, 0x01247c5a, vehicle, state);
}
exports.setVehicleLights = setVehicleLights;
function setVehicleLimitSpeedWhenPlayerInactive(vehicle, toggle) {
    return _in(0xc50ce861, 0xb55eab8b, vehicle, toggle);
}
exports.setVehicleLimitSpeedWhenPlayerInactive = setVehicleLimitSpeedWhenPlayerInactive;
function setVehicleLivery(vehicle, livery) {
    return _in(0x60bf608f, 0x1b8cd1b6, vehicle, livery);
}
exports.setVehicleLivery = setVehicleLivery;
/**
 * Used to set the secondary livery (the roof on Tornado Custom being one such example.)
 *
 * Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.
 * @param vehicle
 * @param livery
 */
function setVehicleLivery2(vehicle, livery) {
    return _in(0xa6d3a875, 0x0dc73270, vehicle, livery);
}
exports.setVehicleLivery2 = setVehicleLivery2;
function setVehicleLodMultiplier(vehicle, multiplier) {
    return _in(0x93ae6a61, 0xbe015bf1, vehicle, _fv(multiplier));
}
exports.setVehicleLodMultiplier = setVehicleLodMultiplier;
/**
 * To reset the max speed, set the `speed` value to `0.0` or lower.
 * @param vehicle
 * @param speed
 */
function setVehicleMaxSpeed(vehicle, speed) {
    return _in(0xbaa045b4, 0xe42f3c06, vehicle, _fv(speed));
}
exports.setVehicleMaxSpeed = setVehicleMaxSpeed;
function setVehicleMayBeUsedByGotoPointAnyMeans(vehicle, p1) {
    return _in(0xe851e480, 0xb814d4ba, vehicle, p1);
}
exports.setVehicleMayBeUsedByGotoPointAnyMeans = setVehicleMayBeUsedByGotoPointAnyMeans;
function setVehicleMissileWarningEnabled(vehicle, toggle) {
    return _in(0xf3365489, 0xe0dd50f9, vehicle, toggle);
}
exports.setVehicleMissileWarningEnabled = setVehicleMissileWarningEnabled;
/**
 * In b944, there are 50 (0 - 49) mod types.
 *
 * Sets the vehicle mod.
 * The vehicle must have a mod kit first.
 *
 * Any out of range ModIndex is stock.
 *
 * #Mod Type
 * Spoilers - 0
 * Front Bumper - 1
 * Rear Bumper - 2
 * Side Skirt - 3
 * Exhaust - 4
 * Frame - 5
 * Grille - 6
 * Hood - 7
 * Fender - 8
 * Right Fender - 9
 * Roof - 10
 * Engine - 11
 * Brakes - 12
 * Transmission - 13
 * Horns - 14 (modIndex from 0 to 51)
 * Suspension - 15
 * Armor - 16
 * Front Wheels - 23
 * Back Wheels - 24 //only for motocycles
 * Plate holders - 25
 * Trim Design - 27
 * Ornaments - 28
 * Dial Design - 30
 * Steering Wheel - 33
 * Shifter Leavers - 34
 * Plaques - 35
 * Hydraulics - 38
 * Livery - 48
 *
 * ENUMS: https://pastebin.com/QzEAn02v
 * @param vehicle
 * @param modType
 * @param modIndex
 * @param customTires
 */
function setVehicleMod(vehicle, modType, modIndex, customTires) {
    return _in(0x6af0636d, 0xdedcb6dd, vehicle, modType, modIndex, customTires);
}
exports.setVehicleMod = setVehicleMod;
/**
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 *
 * color: number of the color.
 *
 * p3 seems to always be 0.
 *
 * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param paintType
 * @param color
 * @param pearlescentColor
 */
function setVehicleModColor1(vehicle, paintType, color, pearlescentColor) {
    return _in(0x43feb945, 0xee7f85b8, vehicle, paintType, color, pearlescentColor);
}
exports.setVehicleModColor1 = setVehicleModColor1;
/**
 * Changes the secondary paint type and color
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 *
 * color: number of the color
 *
 * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param paintType
 * @param color
 */
function setVehicleModColor2(vehicle, paintType, color) {
    return _in(0x816562ba, 0xdfdec83e, vehicle, paintType, color);
}
exports.setVehicleModColor2 = setVehicleModColor2;
/**
 * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
 *
 * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
 * @param vehicle
 * @param modKit
 */
function setVehicleModKit(vehicle, modKit) {
    return _in(0x1f2aa07f, 0x00b3217a, vehicle, modKit);
}
exports.setVehicleModKit = setVehicleModKit;
/**
 * Makes the vehicle stop spawning naturally in traffic. Here's an essential example:
 *
 * VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param model
 * @param suppressed
 */
function setVehicleModelIsSuppressed(model, suppressed) {
    return _in(0x0fc2d89a, 0xc25a5814, _ch(model), suppressed);
}
exports.setVehicleModelIsSuppressed = setVehicleModelIsSuppressed;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
function setVehicleModelPlayerWillExitScene(modelHash) {
    return _in(0x7f96f23f, 0xa9b73327, _ch(modelHash));
}
exports.setVehicleModelPlayerWillExitScene = setVehicleModelPlayerWillExitScene;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param vehicle
 * @param name
 */
function setVehicleNameDebug(vehicle, name) {
    return _in(0xbfdf984e, 0x2c22b94f, vehicle, _ts(name));
}
exports.setVehicleNameDebug = setVehicleNameDebug;
function setVehicleNeedsToBeHotwired(vehicle, toggle) {
    return _in(0xfba550ea, 0x44404ee6, vehicle, toggle);
}
exports.setVehicleNeedsToBeHotwired = setVehicleNeedsToBeHotwired;
/**
 * Sets the color of the neon lights of the specified vehicle.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
function setVehicleNeonColour(vehicle, r, g, b) {
    return _in(0x8e0a5822, 0x09a62695, vehicle, r, g, b);
}
exports.setVehicleNeonColour = setVehicleNeonColour;
/**
 * Sets the neon lights of the specified vehicle on/off.
 *
 * Indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * @param vehicle
 * @param index
 * @param toggle
 */
function setVehicleNeonEnabled(vehicle, index, toggle) {
    return _in(0x2aa720e4, 0x287bf269, vehicle, index, toggle);
}
exports.setVehicleNeonEnabled = setVehicleNeonEnabled;
/**
 * Index references CVehicleModelColor
 * @param vehicle
 * @param index
 */
function setVehicleNeonIndexColour(vehicle, index) {
    return _in(0xb93b2867, 0xf7b479d1, vehicle, index);
}
exports.setVehicleNeonIndexColour = setVehicleNeonIndexColour;
function setVehicleNoExplosionDamageFromDriver(vehicle, toggle) {
    return _in(0x5e569ec4, 0x6ec21cae, vehicle, toggle);
}
exports.setVehicleNoExplosionDamageFromDriver = setVehicleNoExplosionDamageFromDriver;
function setVehicleNotStealableAmbiently(vehicle, p1) {
    return _in(0xab043250, 0x45427aae, vehicle, p1);
}
exports.setVehicleNotStealableAmbiently = setVehicleNotStealableAmbiently;
/**
 * Sets a vehicle's license plate text.  8 chars maximum.
 *
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * char *plateText = "KING";
 * VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
 * @param vehicle
 * @param plateText
 */
function setVehicleNumberPlateText(vehicle, plateText) {
    return _in(0x95a88f0b, 0x409cda47, vehicle, _ts(plateText));
}
exports.setVehicleNumberPlateText = setVehicleNumberPlateText;
/**
 * Plates:
 * Blue/White - 0
 * Yellow/black - 1
 * Yellow/Blue - 2
 * Blue/White2 - 3
 * Blue/White3 - 4
 * Yankton - 5
 * @param vehicle
 * @param plateIndex
 */
function setVehicleNumberPlateTextIndex(vehicle, plateIndex) {
    return _in(0x9088eb5a, 0x43ffb0a1, vehicle, plateIndex);
}
exports.setVehicleNumberPlateTextIndex = setVehicleNumberPlateTextIndex;
function setVehicleOccupantsTakeExplosiveDamage(vehicle, toggle) {
    return _in(0x35bb21de, 0x06784373, vehicle, toggle);
}
exports.setVehicleOccupantsTakeExplosiveDamage = setVehicleOccupantsTakeExplosiveDamage;
/**
 * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
 *
 * sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
 * @param vehicle
 * @param p1
 */
function setVehicleOnGroundProperly(vehicle, p1) {
    return _in(0x49733e92, 0x263139d1, vehicle, _fv(p1), _r);
}
exports.setVehicleOnGroundProperly = setVehicleOnGroundProperly;
/**
 * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
 * @param vehicle
 * @param killDriver
 * @param explodeOnImpact
 */
function setVehicleOutOfControl(vehicle, killDriver, explodeOnImpact) {
    return _in(0xf19d095e, 0x42d430cc, vehicle, killDriver, explodeOnImpact);
}
exports.setVehicleOutOfControl = setVehicleOutOfControl;
/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs
 * @param vehicle
 * @param health
 */
function setVehiclePetrolTankHealth(vehicle, health) {
    return _in(0x70db5764, 0x9fa8d0d8, vehicle, _fv(health));
}
exports.setVehiclePetrolTankHealth = setVehiclePetrolTankHealth;
function setVehiclePopulationBudget(p0) {
    return _in(0xcb9e1eb3, 0xbe2af4e9, p0);
}
exports.setVehiclePopulationBudget = setVehiclePopulationBudget;
function setVehicleProvidesCover(vehicle, toggle) {
    return _in(0x5afeedd9, 0xbb2899d7, vehicle, toggle);
}
exports.setVehicleProvidesCover = setVehicleProvidesCover;
/**
 * can't seem to enable radio on cop cars etc
 * @param vehicle
 * @param toggle
 */
function setVehicleRadioEnabled(vehicle, toggle) {
    return _in(0x3b988190, 0xc0aa6c0b, vehicle, toggle);
}
exports.setVehicleRadioEnabled = setVehicleRadioEnabled;
function setVehicleRadioLoud(vehicle, toggle) {
    return _in(0xbb6f1cae, 0xc68b0bce, vehicle, toggle);
}
exports.setVehicleRadioLoud = setVehicleRadioLoud;
function setVehicleReadyForCleanup(p0) {
    return _in(0xcf915902, 0x4555488c, p0);
}
exports.setVehicleReadyForCleanup = setVehicleReadyForCleanup;
/**
 * Reduces grip significantly so it's hard to go anywhere.
 * @param vehicle
 * @param toggle
 */
function setVehicleReduceGrip(vehicle, toggle) {
    return _in(0x222ff6a8, 0x23d122e2, vehicle, toggle);
}
exports.setVehicleReduceGrip = setVehicleReduceGrip;
/**
 * val is 0-3
 * Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
 * @param vehicle
 * @param val
 */
function setVehicleReduceGripLevel(vehicle, val) {
    return _in(0x6dee944e, 0x1ee90cfb, vehicle, val);
}
exports.setVehicleReduceGripLevel = setVehicleReduceGripLevel;
function setVehicleRemoveAggressiveCarjackMission(p0) {
    return _in(0xc4b3347b, 0xd68bd609, p0);
}
exports.setVehicleRemoveAggressiveCarjackMission = setVehicleRemoveAggressiveCarjackMission;
function setVehicleRespectsLocksWhenHasDriver(vehicle, p1) {
    return _in(0x2311dd71, 0x59f00582, vehicle, p1);
}
exports.setVehicleRespectsLocksWhenHasDriver = setVehicleRespectsLocksWhenHasDriver;
function setVehicleRudderBroken(vehicle, toggle) {
    return _in(0x09606148, 0xb6c71def, vehicle, toggle);
}
exports.setVehicleRudderBroken = setVehicleRudderBroken;
/**
 * Only works during nighttime.
 * @param heli
 * @param toggle
 * @param canBeUsedByAI
 */
function setVehicleSearchlight(heli, toggle, canBeUsedByAI) {
    return _in(0x14e85c5e, 0xe7a4d542, heli, toggle, canBeUsedByAI);
}
exports.setVehicleSearchlight = setVehicleSearchlight;
/**
 * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
 *
 * WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
 * @param driver
 * @param entity
 * @param xTarget
 * @param yTarget
 * @param zTarget
 */
function setVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget) {
    return _in(0x74cd9a93, 0x27a282ea, driver, entity, _fv(xTarget), _fv(yTarget), _fv(zTarget));
}
exports.setVehicleShootAtTarget = setVehicleShootAtTarget;
/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
function setVehicleShuntOnStick(toggle) {
    return _in(0x99a05839, 0xc46ce316, toggle);
}
exports.setVehicleShuntOnStick = setVehicleShuntOnStick;
/**
 * Activate siren on vehicle (Only works if the vehicle has a siren).
 * @param vehicle
 * @param toggle
 */
function setVehicleSiren(vehicle, toggle) {
    return _in(0xf4924635, 0xa19eb37d, vehicle, toggle);
}
exports.setVehicleSiren = setVehicleSiren;
function setVehicleSlipstreamingShouldTimeOut(toggle) {
    return _in(0xf051d9bf, 0xb6ba39c0, toggle);
}
exports.setVehicleSlipstreamingShouldTimeOut = setVehicleSlipstreamingShouldTimeOut;
function setVehicleStartupRevSound(vehicle, p1, p2) {
    return _in(0xf1f8157b, 0x8c3f171c, vehicle, _ts(p1), _ts(p2));
}
exports.setVehicleStartupRevSound = setVehicleStartupRevSound;
/**
 * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
 * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
 * @param vehicle
 * @param toggle
 */
function setVehicleStaysFrozenWhenCleanedUp(vehicle, toggle) {
    return _in(0x1cf38d52, 0x9d7441d9, vehicle, toggle);
}
exports.setVehicleStaysFrozenWhenCleanedUp = setVehicleStaysFrozenWhenCleanedUp;
/**
 * Locks the vehicle's steering to the desired angle, explained below.
 *
 * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
 *
 * Steer bias:
 * -1.0 = full right
 * 0.0 = centered steering
 * 1.0 = full left
 * @param vehicle
 * @param value
 */
function setVehicleSteerBias(vehicle, value) {
    return _in(0x42a8ec77, 0xd5150cbe, vehicle, _fv(value));
}
exports.setVehicleSteerBias = setVehicleSteerBias;
function setVehicleSteerForBuildings(vehicle, p1) {
    return _in(0xdce97bdf, 0x8a0eabc8, vehicle, p1);
}
exports.setVehicleSteerForBuildings = setVehicleSteerForBuildings;
function setVehicleSteeringBiasScalar(p0, p1) {
    return _in(0x9007a2f2, 0x1dc108d4, p0, _fv(p1));
}
exports.setVehicleSteeringBiasScalar = setVehicleSteeringBiasScalar;
/**
 * sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
 * CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
 * {
 * CVehicle *result; // rax@1
 *
 * result = EntityAsCVehicle(a1);
 * if ( result )
 * {
 * result->field_886 &= 0xEFu;
 * result->field_886 |= 16 * (a2 & 1);
 * }
 * return result;
 * }
 * @param vehicle
 * @param toggle
 */
function setVehicleStopInstantlyWhenPlayerInactive(vehicle, toggle) {
    return _in(0x6ebfb22d, 0x646ffc18, vehicle, toggle);
}
exports.setVehicleStopInstantlyWhenPlayerInactive = setVehicleStopInstantlyWhenPlayerInactive;
/**
 * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
 * @param vehicle
 * @param toggle
 */
function setVehicleStrong(vehicle, toggle) {
    return _in(0x3e8c8727, 0x991a8a0b, vehicle, toggle);
}
exports.setVehicleStrong = setVehicleStrong;
function setVehicleTailLights(vehicle, toggle) {
    return _in(0x5815bd27, 0x63178df4, vehicle, toggle);
}
exports.setVehicleTailLights = setVehicleTailLights;
function setVehicleTankStationary(vehicle, p1) {
    return _in(0x737e3981, 0x38550fff, vehicle, p1);
}
exports.setVehicleTankStationary = setVehicleTankStationary;
function setVehicleTankTurretPosition(vehicle, position, p2) {
    return _in(0x56b94c6d, 0x7127dfba, vehicle, _fv(position), p2);
}
exports.setVehicleTankTurretPosition = setVehicleTankTurretPosition;
function setVehicleTimedExplosion(vehicle, ped, toggle) {
    return _in(0x2e0a74e1, 0x002380b1, vehicle, ped, toggle);
}
exports.setVehicleTimedExplosion = setVehicleTimedExplosion;
/**
 * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
 * @param vehicle
 * @param position
 */
function setVehicleTowTruckArmPosition(vehicle, position) {
    return _in(0xfe54b92a, 0x344583ca, vehicle, _fv(position));
}
exports.setVehicleTowTruckArmPosition = setVehicleTowTruckArmPosition;
function setVehicleTurretSpeedThisFrame(vehicle, speed) {
    return _in(0x1093408b, 0x4b9d1146, vehicle, _fv(speed));
}
exports.setVehicleTurretSpeedThisFrame = setVehicleTurretSpeedThisFrame;
function setVehicleTurretTarget(vehicle, p1, x, y, z, p5) {
    return _in(0x0581730a, 0xb9380412, vehicle, p1, _fv(x), _fv(y), _fv(z), p5);
}
exports.setVehicleTurretTarget = setVehicleTurretTarget;
/**
 * "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
 * to burst all tyres type it 8 times where p1 = 0 to 7.
 *
 * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
 *
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param index
 * @param onRim
 * @param p3
 */
function setVehicleTyreBurst(vehicle, index, onRim, p3) {
    return _in(0xec6a202e, 0xe4960385, vehicle, index, onRim, _fv(p3));
}
exports.setVehicleTyreBurst = setVehicleTyreBurst;
/**
 * tyreIndex = 0 to 4 on normal vehicles
 *
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param tyreIndex
 */
function setVehicleTyreFixed(vehicle, tyreIndex) {
    return _in(0x6e13fc66, 0x2b882d1d, vehicle, tyreIndex);
}
exports.setVehicleTyreFixed = setVehicleTyreFixed;
/**
 * Sets the tire smoke's color of this vehicle.
 *
 * vehicle: The vehicle that is the target of this method.
 * r: The red level in the RGB color code.
 * g: The green level in the RGB color code.
 * b: The blue level in the RGB color code.
 *
 * Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
function setVehicleTyreSmokeColor(vehicle, r, g, b) {
    return _in(0xb5ba80f8, 0x39791c0f, vehicle, r, g, b);
}
exports.setVehicleTyreSmokeColor = setVehicleTyreSmokeColor;
/**
 * Allows you to toggle bulletproof tires.
 * @param vehicle
 * @param toggle
 */
function setVehicleTyresCanBurst(vehicle, toggle) {
    return _in(0xeb9dc3c7, 0xd8596c46, vehicle, toggle);
}
exports.setVehicleTyresCanBurst = setVehicleTyresCanBurst;
function setVehicleUndriveable(vehicle, toggle) {
    return _in(0x8aba6af5, 0x4b942b95, vehicle, toggle);
}
exports.setVehicleUndriveable = setVehicleUndriveable;
function setVehicleUseAlternateHandling(vehicle, toggle) {
    return _in(0x1d97d1e3, 0xa70a649f, vehicle, toggle);
}
exports.setVehicleUseAlternateHandling = setVehicleUseAlternateHandling;
/**
 * Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
 * @param toggle
 */
function setVehicleUseBoostButtonForWheelRetract(toggle) {
    return _in(0x41290b40, 0xfa63e6da, toggle);
}
exports.setVehicleUseBoostButtonForWheelRetract = setVehicleUseBoostButtonForWheelRetract;
function setVehicleUseCutsceneWheelCompression(p0, p1, p2, p3) {
    return _in(0xe023e8ac, 0x4ef7c117, p0, p1, p2, p3, _r);
}
exports.setVehicleUseCutsceneWheelCompression = setVehicleUseCutsceneWheelCompression;
function setVehicleUseMoreRestrictiveSpawnChecks(vehicle, p1) {
    return _in(0x88bc673c, 0xa9e0ae99, vehicle, p1);
}
exports.setVehicleUseMoreRestrictiveSpawnChecks = setVehicleUseMoreRestrictiveSpawnChecks;
function setVehicleUsePlayerLightSettings(vehicle, toggle) {
    return _in(0xc45c27ef, 0x50f36adc, vehicle, toggle);
}
exports.setVehicleUsePlayerLightSettings = setVehicleUsePlayerLightSettings;
function setVehicleUsedForPilotSchool(vehicle, toggle) {
    return _in(0xe05dd0e9, 0x707003a3, vehicle, toggle);
}
exports.setVehicleUsedForPilotSchool = setVehicleUsedForPilotSchool;
/**
 * vehicle must be a plane
 * @param vehicle
 * @param toggle
 */
function setVehicleUsesLargeRearRamp(vehicle, toggle) {
    return _in(0xcac66558, 0xb944da67, vehicle, toggle);
}
exports.setVehicleUsesLargeRearRamp = setVehicleUsesLargeRearRamp;
function setVehicleUsesMpPlayerDamageMultiplier(p0, p1) {
    return _in(0xbb2333bb, 0x87ddd87f, p0, p1);
}
exports.setVehicleUsesMpPlayerDamageMultiplier = setVehicleUsesMpPlayerDamageMultiplier;
function setVehicleWeaponCanTargetObjects(vehicle, toggle) {
    return _in(0x86b4b621, 0x2cb8b627, vehicle, toggle);
}
exports.setVehicleWeaponCanTargetObjects = setVehicleWeaponCanTargetObjects;
function setVehicleWeaponDamageScale(vehicle, multiplier) {
    return _in(0x45a561a9, 0x421ab6ad, vehicle, _fv(multiplier), _r);
}
exports.setVehicleWeaponDamageScale = setVehicleWeaponDamageScale;
/**
 * Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
 * For example, you can "remove" any vehicle weapon from any vehicle.
 * ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
 * @param vehicle
 * @param weaponIndex
 * @param capacity
 */
function setVehicleWeaponRestrictedAmmo(vehicle, weaponIndex, capacity) {
    return _in(0x44cd1f49, 0x3db2a0a6, vehicle, weaponIndex, capacity);
}
exports.setVehicleWeaponRestrictedAmmo = setVehicleWeaponRestrictedAmmo;
/**
 * 0: Sport
 * 1: Muscle
 * 2: Lowrider
 * 3: SUV
 * 4: Offroad
 * 5: Tuner
 * 6: Bike Wheels
 * 7: High End
 * 8: Benny's Originals
 * 9: Benny's Bespoke
 * 10: Racing
 * 11: Street
 * 12: Track
 * @param vehicle
 * @param WheelType
 */
function setVehicleWheelType(vehicle, WheelType) {
    return _in(0x487eb21c, 0xc7295ba1, vehicle, WheelType);
}
exports.setVehicleWheelType = setVehicleWheelType;
function setVehicleWheelsCanBreak(vehicle, enabled) {
    return _in(0x29b18b4f, 0xd460ca8f, vehicle, enabled);
}
exports.setVehicleWheelsCanBreak = setVehicleWheelsCanBreak;
function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle, toggle) {
    return _in(0xa37b9a51, 0x7b133349, vehicle, toggle);
}
exports.setVehicleWheelsCanBreakOffWhenBlowUp = setVehicleWheelsCanBreakOffWhenBlowUp;
function setVehicleWillForceOtherVehiclesToStop(vehicle, toggle) {
    return _in(0xbe5c1255, 0xa1830ff5, vehicle, toggle);
}
exports.setVehicleWillForceOtherVehiclesToStop = setVehicleWillForceOtherVehiclesToStop;
function setVehicleWillTellOthersToHurry(vehicle, p1) {
    return _in(0x2c4a1590, 0xabf43e8b, vehicle, p1);
}
exports.setVehicleWillTellOthersToHurry = setVehicleWillTellOthersToHurry;
/**
 * enum WindowTints
 * {
 * WINDOWTINT_NONE,
 * WINDOWTINT_PURE_BLACK,
 * WINDOWTINT_DARKSMOKE,
 * WINDOWTINT_LIGHTSMOKE,
 * WINDOWTINT_STOCK,
 * WINDOWTINT_LIMO,
 * WINDOWTINT_GREEN
 * };
 * Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param tint
 */
function setVehicleWindowTint(vehicle, tint) {
    return _in(0x57c51e6b, 0xad752696, vehicle, tint);
}
exports.setVehicleWindowTint = setVehicleWindowTint;
/**
 * `color`: is the paint index for the vehicle.
 * Paint index goes from 0 to 12.
 * Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
 * Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param colorIndex
 */
function setVehicleXenonLightColorIndex(vehicle, colorIndex) {
    return _in(0xe41033b2, 0x5d003a07, vehicle, colorIndex);
}
exports.setVehicleXenonLightColorIndex = setVehicleXenonLightColorIndex;
/**
 * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
 *
 * Ran after these 2 natives,
 * set_object_targettable(uParam0, 0);
 * set_entity_invincible(uParam0, 1);
 * @param entity
 * @param toggle
 */
function setWaitForCollisionsBeforeProbe(entity, toggle) {
    return _in(0xdc6f8601, 0xfaf2e893, entity, toggle);
}
exports.setWaitForCollisionsBeforeProbe = setWaitForCollisionsBeforeProbe;
/**
 * Max value is 1.0
 * @param player
 * @param difficulty
 */
function setWantedLevelDifficulty(player, difficulty) {
    return _in(0x9b0bb33b, 0x04405e7a, player, _fv(difficulty));
}
exports.setWantedLevelDifficulty = setWantedLevelDifficulty;
function setWantedLevelHiddenEscapeTime(player, wantedLevel, lossTime) {
    return _in(0x49b856b1, 0x360c47c7, player, wantedLevel, lossTime);
}
exports.setWantedLevelHiddenEscapeTime = setWantedLevelHiddenEscapeTime;
function setWantedLevelMultiplier(multiplier) {
    return _in(0x020e5f00, 0xcda207ba, _fv(multiplier));
}
exports.setWantedLevelMultiplier = setWantedLevelMultiplier;
function setWantedResponseNumPedsToSpawn(p0, p1) {
    return _in(0xe532ec1a, 0x63231b4f, p0, p1);
}
exports.setWantedResponseNumPedsToSpawn = setWantedResponseNumPedsToSpawn;
/**
 * You can only use text entries. No custom text.
 *
 * Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
 * errorCode: shows an error code at the bottom left if nonzero
 * @param titleMsg
 * @param flags
 * @param promptMsg
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param showBackground
 * @param errorCode
 */
function setWarningMessage(titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode) {
    return _in(0x7b1776b3, 0xb53f8d74, _ts(titleMsg), flags, _ts(promptMsg), p3, p4, _ts(p5), _ts(p6), showBackground, errorCode);
}
exports.setWarningMessage = setWarningMessage;
function setWarningMessageOptionHighlight(p0) {
    return _in(0xdaf87174, 0xbe7454ff, p0, _r);
}
exports.setWarningMessageOptionHighlight = setWarningMessageOptionHighlight;
/**
 * Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
 * Param names copied from the corresponding scaleform function "SET_LIST_ROW".
 * Example: https://i.imgur.com/arKvOYx.png
 * @param index
 * @param name
 * @param cash
 * @param rp
 * @param lvl
 * @param colour
 */
function setWarningMessageOptionItems(index, name, cash, rp, lvl, colour) {
    return _in(0x0c5a80a9, 0xe096d529, index, _ts(name), cash, rp, lvl, colour, _r);
}
exports.setWarningMessageOptionItems = setWarningMessageOptionItems;
/**
 * Shows a warning message on screen with a header.
 * Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
 * Example: https://i.imgur.com/ITJt8bJ.png
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param showBackground
 * @param p7
 * @param p8
 * @param p9
 */
function setWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p8, p9) {
    const [showBackground_out, p7_out] = _in(0xdc38cc1e, 0x35b6a5d7, _ts(entryHeader), _ts(entryLine1), instructionalKey, _ts(entryLine2), p4, p5, _i, _i, p8, p9);
    return [showBackground_out, p7_out];
}
exports.setWarningMessageWithHeader = setWarningMessageWithHeader;
/**
 * You can use this native for custom input, without having to use any scaleform-related natives.
 * The native must be called on tick.
 * The entryHeader must be a valid label.
 * For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
 * Notes:
 * - additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
 * - additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
 * - additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
 * - showBackground: shows black background of the warning screen
 * - errorCode: shows an error code at the bottom left if nonzero
 * Example of usage:
 * SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
 * Screenshot:
 * https://imgur.com/a/IYA7vJ8
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param additionalIntInfo
 * @param additionalTextInfoLine1
 * @param additionalTextInfoLine2
 * @param showBackground
 * @param errorCode
 */
function setWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode) {
    return _in(0x70191948, 0x2c74b5ab, _ts(entryHeader), _ts(entryLine1), instructionalKey, _ts(entryLine2), p4, p5, additionalIntInfo, _ts(additionalTextInfoLine1), _ts(additionalTextInfoLine2), showBackground, errorCode);
}
exports.setWarningMessageWithHeaderAndSubstringFlags = setWarningMessageWithHeaderAndSubstringFlags;
/**
 * labelTitle: Label of the alert's title.
 * labelMsg: Label of the alert's message.
 * p2: This is an enum, check the description for a list.
 * p3: This is an enum, check the description for a list.
 * labelMsg2: Label of another message line
 * p5: usually 0
 * p6: usually -1
 * p7: usually 0
 * p8: unknown label
 * p9: unknown label
 * background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
 * errorCode: Error code, shown at the bottom left if set to value other than 0.
 *
 * instructionalKey enum list:
 * Buttons = {
 * Empty = 0,
 * Select = 1, -- (RETURN)
 * Ok = 2, -- (RETURN)
 * Yes = 4, -- (RETURN)
 * Back = 8, -- (ESC)
 * Cancel = 16, -- (ESC)
 * No = 32, -- (ESC)
 * RetrySpace = 64, -- (SPACE)
 * Restart = 128, -- (SPACE)
 * Skip = 256, -- (SPACE)
 * Quit = 512, -- (ESC)
 * Adjust = 1024, -- (ARROWS)
 * SpaceKey = 2048, -- (SPACE)
 * Share = 4096, -- (SPACE)
 * SignIn = 8192, -- (SPACE)
 * Continue = 16384, -- (RETURN)
 * AdjustLeftRight = 32768, -- (SCROLL L/R)
 * AdjustUpDown = 65536, -- (SCROLL U/D)
 * Overwrite = 131072, -- (SPACE)
 * SocialClubSignup = 262144, -- (RETURN)
 * Confirm = 524288, -- (RETURN)
 * Queue = 1048576, -- (RETURN)
 * RetryReturn = 2097152, -- (RETURN)
 * BackEsc = 4194304, -- (ESC)
 * SocialClub = 8388608, -- (RETURN)
 * Spectate = 16777216, -- (SPACE)
 * OkEsc = 33554432, -- (ESC)
 * CancelTransfer = 67108864, -- (ESC)
 * LoadingSpinner = 134217728,
 * NoReturnToGTA = 268435456, -- (ESC)
 * CancelEsc = 536870912, -- (ESC)
 * }
 *
 * Alt = {
 * Empty = 0,
 * No = 1, -- (SPACE)
 * Host = 2, -- (ESC)
 * SearchForJob = 4, -- (RETURN)
 * ReturnKey = 8, -- (TURN)
 * Freemode = 16, -- (ESC)
 * }
 *
 * Example: https://i.imgur.com/TvmNF4k.png
 * @param labelTitle
 * @param labelMessage
 * @param p2
 * @param p3
 * @param labelMessage2
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param background
 * @param errorCode
 */
function setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode) {
    return _in(0x15803fec, 0x3b9a872b, _ts(labelTitle), _ts(labelMessage), p2, p3, _ts(labelMessage2), p5, p6, p7, _ts(p8), _ts(p9), background, errorCode);
}
exports.setWarningMessageWithHeaderAndSubstringFlagsExtended = setWarningMessageWithHeaderAndSubstringFlagsExtended;
function setWarningMessageWithHeaderExtended(entryHeader, entryLine1, flags, entryLine2, p4, p5, showBg, p9, p10) {
    const [p6_out, p7_out] = _in(0x38b55259, 0xc2e078ed, _ts(entryHeader), _ts(entryLine1), flags, _ts(entryLine2), p4, p5, _i, _i, showBg, p9, p10);
    return [p6_out, p7_out];
}
exports.setWarningMessageWithHeaderExtended = setWarningMessageWithHeaderExtended;
/**
 * This native removes the current waypoint from the map.
 *
 * Example:
 * C#:
 * Function.Call(Hash.SET_WAYPOINT_OFF);
 *
 * C++:
 * HUD::SET_WAYPOINT_OFF();
 */
function setWaypointOff() {
    return _in(0xa7e4e2d3, 0x61c2627f);
}
exports.setWaypointOff = setWaypointOff;
/**
 * Changes the selected ped aiming animation style.
 * Note : You must use GET_HASH_KEY!
 *
 * Strings to use with GET_HASH_KEY :
 *
 * "Ballistic",
 * "Default",
 * "Fat",
 * "Female",
 * "FirstPerson",
 * "FirstPersonAiming",
 * "FirstPersonFranklin",
 * "FirstPersonFranklinAiming",
 * "FirstPersonFranklinRNG",
 * "FirstPersonFranklinScope",
 * "FirstPersonMPFemale",
 * "FirstPersonMichael",
 * "FirstPersonMichaelAiming",
 * "FirstPersonMichaelRNG",
 * "FirstPersonMichaelScope",
 * "FirstPersonRNG",
 * "FirstPersonScope",
 * "FirstPersonTrevor",
 * "FirstPersonTrevorAiming",
 * "FirstPersonTrevorRNG",
 * "FirstPersonTrevorScope",
 * "Franklin",
 * "Gang",
 * "Gang1H",
 * "GangFemale",
 * "Hillbilly",
 * "MP_F_Freemode",
 * "Michael",
 * "SuperFat",
 * "Trevor"
 * @param ped
 * @param animStyle
 */
function setWeaponAnimationOverride(ped, animStyle) {
    return _in(0x1055ac3a, 0x667f09d9, ped, _ch(animStyle));
}
exports.setWeaponAnimationOverride = setWeaponAnimationOverride;
function setWeaponAoeModifier(weaponHash, multiplier) {
    return _in(0x4ae5ac8b, 0x852d642c, _ch(weaponHash), _fv(multiplier));
}
exports.setWeaponAoeModifier = setWeaponAoeModifier;
/**
 * Changes the weapon damage output by the given multiplier value. Must be run every frame.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param damageMultiplier
 */
function setWeaponDamageModifier(weaponHash, damageMultiplier) {
    return _in(0x4757f00b, 0xc6323cfe, _ch(weaponHash), _fv(damageMultiplier));
}
exports.setWeaponDamageModifier = setWeaponDamageModifier;
/**
 * ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);
 * @param p0
 * @param p1
 */
function setWeaponEffectDurationModifier(p0, p1) {
    return _in(0xe6d2cedd, 0x370ff98e, _ch(p0), _fv(p1));
}
exports.setWeaponEffectDurationModifier = setWeaponEffectDurationModifier;
function setWeaponImpactsApplyGreaterForce(object, p1) {
    return _in(0x1a6cbb06, 0xe2d0d79d, object, p1);
}
exports.setWeaponImpactsApplyGreaterForce = setWeaponImpactsApplyGreaterForce;
function setWeaponObjectCamoIndex(weaponObject, p1) {
    return _in(0x977ca989, 0x39e82e4b, weaponObject, p1);
}
exports.setWeaponObjectCamoIndex = setWeaponObjectCamoIndex;
/**
 * Colors:
 * 0 = Gray
 * 1 = Dark Gray
 * 2 = Black
 * 3 = White
 * 4 = Blue
 * 5 = Cyan
 * 6 = Aqua
 * 7 = Cool Blue
 * 8 = Dark Blue
 * 9 = Royal Blue
 * 10 = Plum
 * 11 = Dark Purple
 * 12 = Purple
 * 13 = Red
 * 14 = Wine Red
 * 15 = Magenta
 * 16 = Pink
 * 17 = Salmon
 * 18 = Hot Pink
 * 19 = Rust Orange
 * 20 = Brown
 * 21 = Earth
 * 22 = Orange
 * 23 = Light Orange
 * 24 = Dark Yellow
 * 25 = Yellow
 * 26 = Light Brown
 * 27 = Lime Green
 * 28 = Olive
 * 29 = Moss
 * 30 = Turquoise
 * 31 = Dark Green
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponObject
 * @param camoComponentHash
 * @param colorIndex
 */
function setWeaponObjectComponentTintIndex(weaponObject, camoComponentHash, colorIndex) {
    return _in(0x5da825a8, 0x5d0ea6e6, weaponObject, _ch(camoComponentHash), colorIndex);
}
exports.setWeaponObjectComponentTintIndex = setWeaponObjectComponentTintIndex;
/**
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weapon
 * @param tintIndex
 */
function setWeaponObjectTintIndex(weapon, tintIndex) {
    return _in(0xf8275890, 0x17d4e4a9, weapon, tintIndex);
}
exports.setWeaponObjectTintIndex = setWeaponObjectTintIndex;
function setWeatherPtfxOverrideCurrLevel(p0) {
    return _in(0xf78b8030, 0x82d4386f, _fv(p0));
}
exports.setWeatherPtfxOverrideCurrLevel = setWeatherPtfxOverrideCurrLevel;
function setWeatherPtfxUseOverrideSettings(p0) {
    return _in(0xa46b73fa, 0xa3460ae1, p0);
}
exports.setWeatherPtfxUseOverrideSettings = setWeatherPtfxUseOverrideSettings;
/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
function setWeatherTypeNow(weatherType) {
    return _in(0x29b487c3, 0x59e19889, _ts(weatherType));
}
exports.setWeatherTypeNow = setWeatherTypeNow;
/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
function setWeatherTypeNowPersist(weatherType) {
    return _in(0xed712ca3, 0x27900c8a, _ts(weatherType));
}
exports.setWeatherTypeNowPersist = setWeatherTypeNowPersist;
function setWeatherTypeOvertimePersist(weatherType, time) {
    return _in(0xfb5045b7, 0xc42b75bf, _ts(weatherType), _fv(time));
}
exports.setWeatherTypeOvertimePersist = setWeatherTypeOvertimePersist;
/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
function setWeatherTypePersist(weatherType) {
    return _in(0x704983df, 0x373b198f, _ts(weatherType));
}
exports.setWeatherTypePersist = setWeatherTypePersist;
/**
 * Enables/disables the ability to wheelie on motorcycles.
 * @param vehicle
 * @param enabled
 */
function setWheelieEnabled(vehicle, enabled) {
    return _in(0x1312ddd8, 0x385aee4e, vehicle, enabled);
}
exports.setWheelieEnabled = setWheelieEnabled;
function setWheelsExtendedInstantly(vehicle) {
    return _in(0xf6606025, 0x46d27ba8, vehicle);
}
exports.setWheelsExtendedInstantly = setWheelsExtendedInstantly;
function setWheelsRetractedInstantly(vehicle) {
    return _in(0x5335be58, 0xc083e74e, vehicle);
}
exports.setWheelsRetractedInstantly = setWheelsRetractedInstantly;
function setWidescreenBorders(p0, p1) {
    return _in(0xdcd4ea92, 0x4f42d01a, p0, p1);
}
exports.setWidescreenBorders = setWidescreenBorders;
function setWidescreenFormat(p0) {
    return _in(0xc3b07ba0, 0x0a83b0f1, p0);
}
exports.setWidescreenFormat = setWidescreenFormat;
/**
 * Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
 * @param speed
 */
function setWind(speed) {
    return _in(0xac3a74e8, 0x384a9919, _fv(speed));
}
exports.setWind = setWind;
/**
 * The wind direction in radians
 * 180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
 * @param direction
 */
function setWindDirection(direction) {
    return _in(0xeb0f4468, 0x467b4528, _fv(direction));
}
exports.setWindDirection = setWindDirection;
/**
 * Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
 * @param speed
 */
function setWindSpeed(speed) {
    return _in(0xee09eced, 0xbabe47fc, _fv(speed));
}
exports.setWindSpeed = setWindSpeed;
function setZoneEnabled(zoneId, toggle) {
    return _in(0xba5eceea, 0x120e5611, zoneId, toggle);
}
exports.setZoneEnabled = setZoneEnabled;
function settimera(value) {
    return _in(0xc1b1e9a0, 0x34a63a62, value);
}
exports.settimera = settimera;
function settimerb(value) {
    return _in(0x5ae11bc3, 0x6633de4e, value);
}
exports.settimerb = settimerb;
function setupFakeConeData(blip, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0xf83d0feb, 0xe75e62c9, blip, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8);
}
exports.setupFakeConeData = setupFakeConeData;
function setupShopPedApparelQuery(p0, p1, p2, p3) {
    return _in(0x50f45782, 0x3ce6eb5f, p0, p1, p2, p3, _r, _ri);
}
exports.setupShopPedApparelQuery = setupShopPedApparelQuery;
/**
 * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
 *
 * componentId is between 0 and 11 and corresponds to the usual component slots.
 *
 * p1 could be the outfit number; unsure.
 *
 * p2 is usually -1; unknown function.
 *
 * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
 *
 * p4 is usually -1; unknown function.
 *
 * componentId is -1 when p3 is true in decompiled scripts.
 * @param character
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param componentId
 */
function setupShopPedApparelQueryTu(character, p1, p2, p3, p4, componentId) {
    return _in(0x9bdf5981, 0x8b1e38c1, character, p1, p2, p3, p4, componentId, _r, _ri);
}
exports.setupShopPedApparelQueryTu = setupShopPedApparelQueryTu;
/**
 * characters
 *
 * 0: Michael
 * 1: Franklin
 * 2: Trevor
 * 3: MPMale
 * 4: MPFemale
 * @param character
 * @param p1
 */
function setupShopPedOutfitQuery(character, p1) {
    return _in(0xf3fbe2d5, 0x0a6a8c28, character, p1, _r, _ri);
}
exports.setupShopPedOutfitQuery = setupShopPedOutfitQuery;
/**
 * Possible shake types (updated b617d):
 *
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param cam
 * @param type
 * @param amplitude
 */
function shakeCam(cam, type, amplitude) {
    return _in(0x6a25241c, 0x340d3822, cam, _ts(type), _fv(amplitude));
}
exports.shakeCam = shakeCam;
/**
 * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param shakeType
 * @param amount
 */
function shakeCinematicCam(shakeType, amount) {
    return _in(0xdce214d9, 0xed58f3cf, _ts(shakeType), _fv(amount));
}
exports.shakeCinematicCam = shakeCinematicCam;
/**
 * Possible shake types (updated b617d):
 *
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param shakeName
 * @param intensity
 */
function shakeGameplayCam(shakeName, intensity) {
    return _in(0xfd55e495, 0x55e017cf, _ts(shakeName), _fv(intensity));
}
exports.shakeGameplayCam = shakeGameplayCam;
/**
 * CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param p0
 * @param p1
 */
function shakeScriptGlobal(p0, p1) {
    return _in(0xf4c8cf9e, 0x353afeca, _ts(p0), _fv(p1));
}
exports.shakeScriptGlobal = shakeScriptGlobal;
function shiftLeft(value, bitShift) {
    return _in(0xedd95a39, 0xe5544de8, value, bitShift, _r, _ri);
}
exports.shiftLeft = shiftLeft;
function shiftRight(value, bitShift) {
    return _in(0x97ef1e5b, 0xce9dc075, value, bitShift, _r, _ri);
}
exports.shiftRight = shiftRight;
function shootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed) {
    return _in(0x867654cb, 0xc7606f2c, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed));
}
exports.shootSingleBulletBetweenCoords = shootSingleBulletBetweenCoords;
/**
 * entity - entity to ignore
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 */
function shootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14) {
    return _in(0xe3a7742e, 0x0b7a2f8b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), entity, p14);
}
exports.shootSingleBulletBetweenCoordsIgnoreEntity = shootSingleBulletBetweenCoordsIgnoreEntity;
/**
 * entity - entity to ignore
 * targetEntity - entity to home in on, if the weapon hash provided supports homing
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 * @param p15
 * @param targetEntity
 * @param p17
 * @param p18
 * @param p19
 * @param p20
 */
function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20) {
    return _in(0xbfe5756e, 0x7407064a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), entity, p14, p15, targetEntity, p17, p18, p19, p20);
}
exports.shootSingleBulletBetweenCoordsIgnoreEntityNew = shootSingleBulletBetweenCoordsIgnoreEntityNew;
/**
 * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
 */
function shouldUseMetricMeasurements() {
    return _in(0xd3d15555, 0x431ab793, _r);
}
exports.shouldUseMetricMeasurements = shouldUseMetricMeasurements;
function showAccountPicker() {
    return _in(0x60e892ba, 0x4f5bdca4);
}
exports.showAccountPicker = showAccountPicker;
function showContactInstructionalButton(toggle) {
    return _in(0xc772a904, 0xcde1186f, toggle);
}
exports.showContactInstructionalButton = showContactInstructionalButton;
/**
 * Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
 * @param blip
 * @param toggle
 */
function showCrewIndicatorOnBlip(blip, toggle) {
    return _in(0xdcfb5d4d, 0xb8bf367e, blip, toggle);
}
exports.showCrewIndicatorOnBlip = showCrewIndicatorOnBlip;
function showForSaleIconOnBlip(blip, toggle) {
    return _in(0x19bd6e3c, 0x0e16a8fa, blip, toggle);
}
exports.showForSaleIconOnBlip = showForSaleIconOnBlip;
/**
 * Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
 * .Indicating that that player is a friend (in GTA:O). This color can not be changed.
 * To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
 * @param blip
 * @param toggle
 */
function showFriendIndicatorOnBlip(blip, toggle) {
    return _in(0x23c3eb80, 0x7312f01a, blip, toggle);
}
exports.showFriendIndicatorOnBlip = showFriendIndicatorOnBlip;
/**
 * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
 * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
 * @param blip
 * @param toggle
 */
function showGoldTickOnBlip(blip, toggle) {
    return _in(0xcac2031e, 0xbf79b1a8, blip, toggle);
}
exports.showGoldTickOnBlip = showGoldTickOnBlip;
/**
 * Adds the GTA: Online player heading indicator to a blip.
 * @param blip
 * @param toggle
 */
function showHeadingIndicatorOnBlip(blip, toggle) {
    return _in(0x5fbca483, 0x27b914df, blip, toggle);
}
exports.showHeadingIndicatorOnBlip = showHeadingIndicatorOnBlip;
function showHeightOnBlip(blip, toggle) {
    return _in(0x75a16c3d, 0xa34f1245, blip, toggle);
}
exports.showHeightOnBlip = showHeightOnBlip;
/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * - 1 : WANTED_STARS
 * - 2 : WEAPON_ICON
 * - 3 : CASH
 * - 4 : MP_CASH
 * - 5 : MP_MESSAGE
 * - 6 : VEHICLE_NAME
 * - 7 : AREA_NAME
 * - 8 : VEHICLE_CLASS
 * - 9 : STREET_NAME
 * - 10 : HELP_TEXT
 * - 11 : FLOATING_HELP_TEXT_1
 * - 12 : FLOATING_HELP_TEXT_2
 * - 13 : CASH_CHANGE
 * - 14 : RETICLE
 * - 15 : SUBTITLE_TEXT
 * - 16 : RADIO_STATIONS
 * - 17 : SAVING_GAME
 * - 18 : GAME_STREAM
 * - 19 : WEAPON_WHEEL
 * - 20 : WEAPON_WHEEL_STATS
 * - 21 : HUD_COMPONENTS
 * - 22 : HUD_WEAPONS
 *
 * These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
 * @param id
 */
function showHudComponentThisFrame(id) {
    return _in(0x0b4df1fa, 0x60c0e664, id);
}
exports.showHudComponentThisFrame = showHudComponentThisFrame;
function showNumberOnBlip(blip, number) {
    return _in(0xa3c0b359, 0xdcb848b6, blip, number);
}
exports.showNumberOnBlip = showNumberOnBlip;
/**
 * Highlights a blip by a cyan color circle.
 *
 * Color can be changed with SET_BLIP_SECONDARY_COLOUR
 * @param blip
 * @param toggle
 */
function showOutlineIndicatorOnBlip(blip, toggle) {
    return _in(0xb81656bc, 0x81fe24d1, blip, toggle);
}
exports.showOutlineIndicatorOnBlip = showOutlineIndicatorOnBlip;
function showScriptedHudComponentThisFrame(id) {
    return _in(0x4f38dca1, 0x27daaea2, id);
}
exports.showScriptedHudComponentThisFrame = showScriptedHudComponentThisFrame;
function showStartMissionInstructionalButton(toggle) {
    return _in(0xf1a6c18b, 0x35bcade6, toggle);
}
exports.showStartMissionInstructionalButton = showStartMissionInstructionalButton;
/**
 * Adds a green checkmark on top of a blip.
 * @param blip
 * @param toggle
 */
function showTickOnBlip(blip, toggle) {
    return _in(0x74513ea3, 0xe505181e, blip, toggle);
}
exports.showTickOnBlip = showTickOnBlip;
/**
 * Starts a new singleplayer game (at the prologue).
 */
function shutdownAndLaunchSinglePlayerGame() {
    return _in(0x593850c1, 0x6a36b692);
}
exports.shutdownAndLaunchSinglePlayerGame = shutdownAndLaunchSinglePlayerGame;
/**
 * In singleplayer this will re-load your game.
 *
 * In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
 *
 * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
 *
 * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
 */
function shutdownAndLoadMostRecentSave() {
    return _in(0x9eca15ad, 0xfe141431, _r);
}
exports.shutdownAndLoadMostRecentSave = shutdownAndLoadMostRecentSave;
function shutdownCreatorBudget() {
    return _in(0xcce26000, 0xe9a6fad7);
}
exports.shutdownCreatorBudget = shutdownCreatorBudget;
function shutdownLoadingScreen() {
    return _in(0x078ebe98, 0x09ccd637);
}
exports.shutdownLoadingScreen = shutdownLoadingScreen;
function shutdownPcScriptedControls() {
    return _in(0x643ed62d, 0x5ea3bebd);
}
exports.shutdownPcScriptedControls = shutdownPcScriptedControls;
function shutdownSessionClearsAutoMultiplayer(toggle) {
    return _in(0xfa1e0e89, 0x3d915215, toggle);
}
exports.shutdownSessionClearsAutoMultiplayer = shutdownSessionClearsAutoMultiplayer;
/**
 * This is to make the player walk without accepting input from INPUT.
 *
 * gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
 *
 * p4 is always 1 and p5 is always 0.
 *
 * C# Example :
 *
 * Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
 * @param player
 * @param amount
 * @param gaitType
 * @param speed
 * @param p4
 * @param p5
 * @param p6
 */
function simulatePlayerInputGait(player, amount, gaitType, speed, p4, p5, p6) {
    return _in(0x477d5d63, 0xe63eca5d, player, _fv(amount), gaitType, _fv(speed), p4, p5, p6);
}
exports.simulatePlayerInputGait = simulatePlayerInputGait;
function sin(value) {
    return _in(0x0badbfa3, 0xb172435f, _fv(value), _r, _rf);
}
exports.sin = sin;
function skipRadioForward() {
    return _in(0x6ddbbdd9, 0x8e2e9c25);
}
exports.skipRadioForward = skipRadioForward;
/**
 * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
 * @param vehicle
 * @param time
 */
function skipTimeInPlaybackRecordedVehicle(vehicle, time) {
    return _in(0x9438f7ad, 0x68771a20, vehicle, _fv(time));
}
exports.skipTimeInPlaybackRecordedVehicle = skipTimeInPlaybackRecordedVehicle;
function skipToEndAndStopPlaybackRecordedVehicle(vehicle) {
    return _in(0xab8e2eda, 0x0c0a5883, vehicle);
}
exports.skipToEndAndStopPlaybackRecordedVehicle = skipToEndAndStopPlaybackRecordedVehicle;
function skipToNextScriptedConversationLine() {
    return _in(0x9663fe6b, 0x7a61eb00);
}
exports.skipToNextScriptedConversationLine = skipToNextScriptedConversationLine;
/**
 * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
 * @param t
 * @param x
 * @param y
 * @param z
 * @param w
 * @param x1
 * @param y1
 * @param z1
 * @param w1
 * @param outX
 * @param outY
 * @param outZ
 * @param outW
 */
function slerpNearQuaternion(t, x, y, z, w, x1, y1, z1, w1) {
    const [outX_out, outY_out, outZ_out, outW_out] = _in(0xf2f6a2fa, 0x49278625, _fv(t), _fv(x), _fv(y), _fv(z), _fv(w), _fv(x1), _fv(y1), _fv(z1), _fv(w1), _f, _f, _f, _f);
    return [outX_out, outY_out, outZ_out, outW_out];
}
exports.slerpNearQuaternion = slerpNearQuaternion;
/**
 * Returns true if the object has finished moving.
 *
 * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
 *
 * See also: https://gtagmodding.com/opcode-database/opcode/034E/
 * Has to be looped until it returns true.
 * @param object
 * @param toX
 * @param toY
 * @param toZ
 * @param speedX
 * @param speedY
 * @param speedZ
 * @param collision
 */
function slideObject(object, toX, toY, toZ, speedX, speedY, speedZ, collision) {
    return _in(0x2fdff410, 0x7b8c1147, object, _fv(toX), _fv(toY), _fv(toZ), _fv(speedX), _fv(speedY), _fv(speedZ), collision, _r);
}
exports.slideObject = slideObject;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
function smashVehicleWindow(vehicle, windowIndex) {
    return _in(0x9e5b5e4d, 0x2ccd2259, vehicle, windowIndex);
}
exports.smashVehicleWindow = smashVehicleWindow;
function spawnpointsCancelSearch() {
    return _in(0xfee4a545, 0x9472a9f8);
}
exports.spawnpointsCancelSearch = spawnpointsCancelSearch;
function spawnpointsGetNumSearchResults() {
    return _in(0xa635c11b, 0x8c44afc2, _r, _ri);
}
exports.spawnpointsGetNumSearchResults = spawnpointsGetNumSearchResults;
function spawnpointsGetSearchResult(randomInt) {
    const [x_out, y_out, z_out] = _in(0x280c7e3a, 0xc7f56e90, randomInt, _f, _f, _f);
    return [x_out, y_out, z_out];
}
exports.spawnpointsGetSearchResult = spawnpointsGetSearchResult;
function spawnpointsGetSearchResultFlags(p0, p1) {
    return _in(0xb782f823, 0x8512bad5, p0, _ii(p1));
}
exports.spawnpointsGetSearchResultFlags = spawnpointsGetSearchResultFlags;
function spawnpointsIsSearchActive() {
    return _in(0x3c675069, 0x96001f5e, _r);
}
exports.spawnpointsIsSearchActive = spawnpointsIsSearchActive;
function spawnpointsIsSearchComplete() {
    return _in(0xa586fbeb, 0x32a53dbb, _r);
}
exports.spawnpointsIsSearchComplete = spawnpointsIsSearchComplete;
function spawnpointsIsSearchFailed() {
    return _in(0xf445de8d, 0xa80a1792, _r);
}
exports.spawnpointsIsSearchFailed = spawnpointsIsSearchFailed;
function spawnpointsStartSearch(p0, p1, p2, p3, p4, interiorFlags, scale, duration) {
    return _in(0x2df9038c, 0x90ad5264, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), interiorFlags, _fv(scale), duration);
}
exports.spawnpointsStartSearch = spawnpointsStartSearch;
function spawnpointsStartSearchInAngledArea(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration) {
    return _in(0xb2aff102, 0x16defa2f, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), interiorFlags, _fv(scale), duration);
}
exports.spawnpointsStartSearchInAngledArea = spawnpointsStartSearchInAngledArea;
/**
 * p1 is always 0 in the scripts
 * @param player
 * @param p1
 */
function specialAbilityActivate(player, p1) {
    return _in(0x821fdc82, 0x7d6f4090, player, p1);
}
exports.specialAbilityActivate = specialAbilityActivate;
/**
 * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
function specialAbilityChargeAbsolute(player, p1, p2, p3) {
    return _in(0xb7b0870e, 0xb531d08d, player, p1, p2, p3);
}
exports.specialAbilityChargeAbsolute = specialAbilityChargeAbsolute;
/**
 * p1 appears to always be 1 (only comes up twice)
 * @param player
 * @param p1
 * @param p2
 */
function specialAbilityChargeContinuous(player, p1, p2) {
    return _in(0xed481732, 0xdff7e997, player, p1, p2);
}
exports.specialAbilityChargeContinuous = specialAbilityChargeContinuous;
/**
 * 2 matches. p1 was always true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
function specialAbilityChargeLarge(player, p1, p2, p3) {
    return _in(0xf733f45f, 0xa4497d93, player, p1, p2, p3);
}
exports.specialAbilityChargeLarge = specialAbilityChargeLarge;
/**
 * Only 1 match. Both p1 & p2 were true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
function specialAbilityChargeMedium(player, p1, p2, p3) {
    return _in(0xf113e3aa, 0x9bc54613, player, p1, p2, p3);
}
exports.specialAbilityChargeMedium = specialAbilityChargeMedium;
/**
 *
 * normalizedValue is from 0.0 - 1.0
 * p2 is always 1
 * @param player
 * @param normalizedValue
 * @param p2
 * @param p3
 */
function specialAbilityChargeNormalized(player, normalizedValue, p2, p3) {
    return _in(0xa0696a65, 0xf009ee18, player, _fv(normalizedValue), p2, p3);
}
exports.specialAbilityChargeNormalized = specialAbilityChargeNormalized;
function specialAbilityChargeOnMissionFailed(player, p1) {
    return _in(0xc9a763d8, 0xfe87436a, player, p1);
}
exports.specialAbilityChargeOnMissionFailed = specialAbilityChargeOnMissionFailed;
/**
 * Every occurrence of p1 & p2 were both true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
function specialAbilityChargeSmall(player, p1, p2, p3) {
    return _in(0x2e7b9b68, 0x3481687d, player, p1, p2, p3);
}
exports.specialAbilityChargeSmall = specialAbilityChargeSmall;
function specialAbilityDeactivate(player, p1) {
    return _in(0xd6a953c6, 0xd1492057, player, p1);
}
exports.specialAbilityDeactivate = specialAbilityDeactivate;
function specialAbilityDeactivateFast(player, p1) {
    return _in(0x9cb5ce07, 0xa3968d5a, player, p1);
}
exports.specialAbilityDeactivateFast = specialAbilityDeactivateFast;
/**
 * p1 is always 0 in the scripts
 * @param player
 * @param p1
 */
function specialAbilityDeactivateMp(player, p1) {
    return _in(0x17f7471e, 0xaca78290, player, p1);
}
exports.specialAbilityDeactivateMp = specialAbilityDeactivateMp;
/**
 * p1 was always true.
 * @param player
 * @param p1
 * @param p2
 */
function specialAbilityDepleteMeter(player, p1, p2) {
    return _in(0x1d506dbb, 0xbc51e64b, player, p1, p2);
}
exports.specialAbilityDepleteMeter = specialAbilityDepleteMeter;
/**
 * Also known as _RECHARGE_SPECIAL_ABILITY
 * @param player
 * @param p1
 * @param p2
 */
function specialAbilityFillMeter(player, p1, p2) {
    return _in(0x3daca8dd, 0xc6fd4980, player, p1, p2);
}
exports.specialAbilityFillMeter = specialAbilityFillMeter;
function specialAbilityLock(playerModel, p1) {
    return _in(0x6a09d0d5, 0x90a47d13, _ch(playerModel), p1);
}
exports.specialAbilityLock = specialAbilityLock;
function specialAbilityReset(player, p1) {
    return _in(0x375f0e73, 0x8f861a94, player, p1);
}
exports.specialAbilityReset = specialAbilityReset;
function specialAbilityUnlock(playerModel, p1) {
    return _in(0xf145f3be, 0x2efa9a3b, _ch(playerModel), p1);
}
exports.specialAbilityUnlock = specialAbilityUnlock;
/**
 * p1 was always 1 (true).
 *
 * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
 * @param ped
 * @param p1
 */
function specialFunctionDoNotUse(ped, p1) {
    return _in(0xf9acf4a0, 0x8098ea25, ped, p1);
}
exports.specialFunctionDoNotUse = specialFunctionDoNotUse;
function sqrt(value) {
    return _in(0x71d93b57, 0xd07f9804, _fv(value), _r, _rf);
}
exports.sqrt = sqrt;
function stabiliseEntityAttachedToHeli(vehicle, entity, p2) {
    return _in(0x37470627, 0x1354cb18, vehicle, entity, _fv(p2));
}
exports.stabiliseEntityAttachedToHeli = stabiliseEntityAttachedToHeli;
/**
 * Example:
 *
 * This will start the alarm at Fort Zancudo.
 *
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 *
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
 *
 * ----------
 *
 * It DOES make a difference but it has to do with the duration or something I dunno yet
 *
 * ----------
 *
 * Found in the b617d scripts:
 *
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
 * AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
 * AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
 * AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
 * AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
 * AUDIO::START_ALARM("PRISON_ALARMS", 0);
 * AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 * @param p2
 */
function startAlarm(alarmName, p2) {
    return _in(0x0355ef11, 0x6c4c97b2, _ts(alarmName), p2);
}
exports.startAlarm = startAlarm;
/**
 * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
 *
 * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
function startAudioScene(scene) {
    return _in(0x013a80fc, 0x08f6e4f2, _ts(scene), _r);
}
exports.startAudioScene = startAudioScene;
function startBeingBoss(p0, p1) {
    return _in(0x3ebeac6c, 0x3f81f6bd, p0, p1);
}
exports.startBeingBoss = startBeingBoss;
function startBeingGoon(p0, p1, p2) {
    return _in(0x96e6d515, 0x0dbf1c09, p0, p1, p2);
}
exports.startBeingGoon = startBeingGoon;
/**
 * flags: Usually 0.
 * @param flags
 */
function startCutscene(flags) {
    return _in(0x186d5cb5, 0xe7b0ff7b, flags);
}
exports.startCutscene = startCutscene;
/**
 * flags: Usually 0.
 * @param x
 * @param y
 * @param z
 * @param flags
 */
function startCutsceneAtCoords(x, y, z, flags) {
    return _in(0x1c9adda3, 0x244a1fbf, _fv(x), _fv(y), _fv(z), flags);
}
exports.startCutsceneAtCoords = startCutsceneAtCoords;
function startEndUserBenchmark() {
    return _in(0x92790862, 0xe36c2ada);
}
exports.startEndUserBenchmark = startEndUserBenchmark;
function startEntityFire(entity) {
    return _in(0xf6a9d970, 0x8f6f23df, entity, _r, _ri);
}
exports.startEntityFire = startEntityFire;
/**
 * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 */
function startExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8) {
    return _in(0x377906d8, 0xa31e5586, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri);
}
exports.startExpensiveSynchronousShapeTestLosProbe = startExpensiveSynchronousShapeTestLosProbe;
function startFiringAmnesty(duration) {
    return _in(0xbf9bd716, 0x91857e48, duration);
}
exports.startFiringAmnesty = startFiringAmnesty;
/**
 * Starts a new GPS custom-route, allowing you to plot lines on the map.
 * Lines are drawn directly between points.
 * The GPS custom route works like the GPS multi route, except it does not follow roads.
 * Example result: https://i.imgur.com/BDm5pzt.png
 * hudColor: The HUD color of the GPS path.
 * displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
 * followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
 * @param hudColor
 * @param displayOnFoot
 * @param followPlayer
 */
function startGpsCustomRoute(hudColor, displayOnFoot, followPlayer) {
    return _in(0xdb34e8d5, 0x6fc13b08, hudColor, displayOnFoot, followPlayer);
}
exports.startGpsCustomRoute = startGpsCustomRoute;
/**
 * Starts a new GPS multi-route, allowing you to create custom GPS paths.
 * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
 * Once the player has passed a point, the GPS will no longer force its path through it.
 *
 * Works independently from the player-placed waypoint and blip routes.
 * Example result: https://i.imgur.com/ZZHQatX.png
 * hudColor: The HUD color of the GPS path.
 * routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
 * displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
 * @param hudColor
 * @param routeFromPlayer
 * @param displayOnFoot
 */
function startGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot) {
    return _in(0x3d3d15af, 0x7bcaaf83, hudColor, routeFromPlayer, displayOnFoot);
}
exports.startGpsMultiRoute = startGpsMultiRoute;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param r
 * @param g
 * @param b
 * @param a
 */
function startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, r, g, b, a) {
    return _in(0x6f60e89a, 0x7b64ee1d, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _fv(r), _fv(g), _fv(b), _fv(a), _r, _ri);
}
exports.startNetworkedParticleFxLoopedOnEntity = startNetworkedParticleFxLoopedOnEntity;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param r
 * @param g
 * @param b
 * @param a
 */
function startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a) {
    return _in(0xdde23f30, 0xcc5a0f03, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _fv(r), _fv(g), _fv(b), _fv(a), _r, _ri);
}
exports.startNetworkedParticleFxLoopedOnEntityBone = startNetworkedParticleFxLoopedOnEntityBone;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
function startNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
    return _in(0xf56b8137, 0xdf10135d, _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, p11, _r);
}
exports.startNetworkedParticleFxNonLoopedAtCoord = startNetworkedParticleFxNonLoopedAtCoord;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
function startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    return _in(0xc95eb1db, 0x6e92113d, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r);
}
exports.startNetworkedParticleFxNonLoopedOnEntity = startNetworkedParticleFxNonLoopedOnEntity;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
function startNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    return _in(0xa41b6a43, 0x642ac2cf, _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r);
}
exports.startNetworkedParticleFxNonLoopedOnPedBone = startNetworkedParticleFxNonLoopedOnPedBone;
/**
 * Examples:
 * g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
 * l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
 * SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
 * SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
 * SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
 * SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
 *
 * Decompiled examples of usage when starting a script:
 *
 * SCRIPT::REQUEST_SCRIPT(a_0);
 * if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
 * SYSTEM::START_NEW_SCRIPT(a_0, v_3);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
 * return 1;
 * }
 *
 * or:
 *
 * v_2 = "MrsPhilips2";
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * SYSTEM::WAIT(0);
 * }
 * sub_8792(36);
 * SYSTEM::START_NEW_SCRIPT(v_2, 17000);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
 * @param scriptName
 * @param stackSize
 */
function startNewScript(scriptName, stackSize) {
    return _in(0xe81651ad, 0x79516e48, _ts(scriptName), stackSize, _r, _ri);
}
exports.startNewScript = startNewScript;
/**
 * return : script thread id, 0 if failed
 * Pass pointer to struct of args in p1, size of struct goes into p2
 * @param scriptName
 * @param args
 * @param argCount
 * @param stackSize
 */
function startNewScriptWithArgs(scriptName, argCount, stackSize) {
    const [retval, args_out] = _in(0xb8ba7f44, 0xdf1575e1, _ts(scriptName), _i, argCount, stackSize, _r, _ri);
    return [retval, args_out];
}
exports.startNewScriptWithArgs = startNewScriptWithArgs;
function startNewScriptWithNameHash(scriptHash, stackSize) {
    return _in(0xeb1c67c3, 0xa5333a92, _ch(scriptHash), stackSize, _r, _ri);
}
exports.startNewScriptWithNameHash = startNewScriptWithNameHash;
function startNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize) {
    const [retval, args_out] = _in(0xc4bb298b, 0xd441be78, _ch(scriptHash), _i, argCount, stackSize, _r, _ri);
    return [retval, args_out];
}
exports.startNewScriptWithNameHashAndArgs = startNewScriptWithNameHashAndArgs;
/**
 * GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
 *
 *
 * p11 seems to be always 0
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
function startParticleFxLoopedAtCoord(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
    return _in(0xe184f4f0, 0xdc5910e7, _ts(effectName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, p11, _r, _ri);
}
exports.startParticleFxLoopedAtCoord = startParticleFxLoopedAtCoord;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
function startParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    return _in(0x1ae42c16, 0x60fd6517, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
}
exports.startParticleFxLoopedOnEntity = startParticleFxLoopedOnEntity;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
function startParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    return _in(0xc6eb449e, 0x33977f0b, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
}
exports.startParticleFxLoopedOnEntityBone = startParticleFxLoopedOnEntityBone;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
function startParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    return _in(0xf28da9f3, 0x8cd1787c, _ts(effectName), ped, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
}
exports.startParticleFxLoopedOnPedBone = startParticleFxLoopedOnPedBone;
/**
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
 *
 * Axis - Invert Axis Flags
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 *
 *
 * -------------------------------------------------------------------
 * C#
 *
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
 *
 * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
 *
 * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
 *
 * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
 *
 * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
 *
 * bool xaxis, yaxis, zaxis = To bool the axis values.
 *
 * example:
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
function startParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    return _in(0x25129531, 0xf77b9ed3, _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r);
}
exports.startParticleFxNonLoopedAtCoord = startParticleFxNonLoopedAtCoord;
/**
 * Starts a particle effect on an entity for example your player.
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 *
 * Example:
 * C#:
 * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
 *
 * Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
 * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
 *
 * -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
function startParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    return _in(0x0d53a3b8, 0xda0809d2, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r);
}
exports.startParticleFxNonLoopedOnEntity = startParticleFxNonLoopedOnEntity;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
function startParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    return _in(0x02b1f2a7, 0x2e0f5325, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r);
}
exports.startParticleFxNonLoopedOnEntityBone = startParticleFxNonLoopedOnEntityBone;
/**
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
 *
 * Axis - Invert Axis Flags
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
function startParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    return _in(0x0e7e7296, 0x1ba18619, _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r);
}
exports.startParticleFxNonLoopedOnPedBone = startParticleFxNonLoopedOnPedBone;
function startPetrolTrailDecals(p0) {
    return _in(0x99ac7f0d, 0x8b9c893d, _fv(p0));
}
exports.startPetrolTrailDecals = startPetrolTrailDecals;
/**
 * p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
 *
 * See REQUEST_VEHICLE_RECORDING
 * @param vehicle
 * @param recording
 * @param script
 * @param p3
 */
function startPlaybackRecordedVehicle(vehicle, recording, script, p3) {
    return _in(0x3f878f92, 0xb3a7a071, vehicle, recording, _ts(script), p3);
}
exports.startPlaybackRecordedVehicle = startPlaybackRecordedVehicle;
/**
 * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
 *
 * FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
 * @param vehicle
 * @param recording
 * @param script
 * @param speed
 * @param drivingStyle
 */
function startPlaybackRecordedVehicleUsingAi(vehicle, recording, script, speed, drivingStyle) {
    return _in(0x29de5fa5, 0x2d00428c, vehicle, recording, _ts(script), _fv(speed), drivingStyle);
}
exports.startPlaybackRecordedVehicleUsingAi = startPlaybackRecordedVehicleUsingAi;
/**
 * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
 *
 * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
 * @param vehicle
 * @param recording
 * @param script
 * @param flags
 * @param time
 * @param drivingStyle
 */
function startPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle) {
    return _in(0x7d80fd64, 0x5d4da346, vehicle, recording, _ts(script), flags, time, drivingStyle);
}
exports.startPlaybackRecordedVehicleWithFlags = startPlaybackRecordedVehicleWithFlags;
/**
 * // this enum comes directly from R* so don't edit this
 * enum ePlayerSwitchTypes
 * {
 * SWITCH_TYPE_AUTO,
 * SWITCH_TYPE_LONG,
 * SWITCH_TYPE_MEDIUM,
 * SWITCH_TYPE_SHORT
 * };
 *
 * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
 *
 * ----------------------------------------------------
 *
 * Examples from the decompiled scripts:
 *
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
 * STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
 * STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
 *
 * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
 *
 * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
 * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
 * @param from
 * @param to
 * @param flags
 * @param switchType
 */
function startPlayerSwitch(from, to, flags, switchType) {
    return _in(0xfaa23f2c, 0xba159d67, from, to, flags, switchType);
}
exports.startPlayerSwitch = startPlayerSwitch;
/**
 * `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p5
 * @param findCollisionLand
 * @param p7
 */
function startPlayerTeleport(player, x, y, z, heading, p5, findCollisionLand, p7) {
    return _in(0xad15f075, 0xa4da0fde, player, _fv(x), _fv(y), _fv(z), _fv(heading), p5, findCollisionLand, p7);
}
exports.startPlayerTeleport = startPlayerTeleport;
function startPreloadedConversation() {
    return _in(0x23641afe, 0x870af385);
}
exports.startPreloadedConversation = startPreloadedConversation;
/**
 * Starts recording a replay.
 * If mode is 0, turns on action replay.
 * If mode is 1, starts recording.
 * If already recording a replay, does nothing.
 * @param mode
 */
function startReplayRecording(mode) {
    return _in(0xc3ac2fff, 0x9612ac81, mode);
}
exports.startReplayRecording = startReplayRecording;
function startRopeUnwindingFront(ropeId) {
    return _in(0x538d1179, 0xec1aa9a9, ropeId);
}
exports.startRopeUnwindingFront = startRopeUnwindingFront;
function startRopeWinding(ropeId) {
    return _in(0x1461c72c, 0x889e343e, ropeId);
}
exports.startRopeWinding = startRopeWinding;
function startSaveArrayWithSize(size, arrayName) {
    return _in(0x60fe567d, 0xf1b1af9d, _i, size, _ts(arrayName));
}
exports.startSaveArrayWithSize = startSaveArrayWithSize;
function startSaveData(p1, p2) {
    return _in(0xa9575f81, 0x2c6a7997, _i, p1, p2);
}
exports.startSaveData = startSaveData;
function startSaveStructWithSize(size, structName) {
    return _in(0xbf737600, 0xcddbeadd, _i, size, _ts(structName));
}
exports.startSaveStructWithSize = startSaveStructWithSize;
function startScriptConversation(p0, p1, p2, p3) {
    return _in(0x6b17c62c, 0x9635d2dc, p0, p1, p2, p3);
}
exports.startScriptConversation = startScriptConversation;
/**
 * Starts a fire:
 *
 * xyz: Location of fire
 * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
 * isGasFire: Whether or not the fire is powered by gasoline.
 * @param X
 * @param Y
 * @param Z
 * @param maxChildren
 * @param isGasFire
 */
function startScriptFire(X, Y, Z, maxChildren, isGasFire) {
    return _in(0x6b83617e, 0x04503888, _fv(X), _fv(Y), _fv(Z), maxChildren, isGasFire, _r, _ri);
}
exports.startScriptFire = startScriptFire;
function startScriptPhoneConversation(p0, p1) {
    return _in(0x252e5f91, 0x5eabb675, p0, p1);
}
exports.startScriptPhoneConversation = startScriptPhoneConversation;
function startShapeTestBound(entity, flags1, flags2) {
    return _in(0x37181417, 0xce7c8900, entity, flags1, flags2, _r, _ri);
}
exports.startShapeTestBound = startShapeTestBound;
function startShapeTestBoundingBox(entity, flags1, flags2) {
    return _in(0x05283772, 0x1a854ec7, entity, flags1, flags2, _r, _ri);
}
exports.startShapeTestBoundingBox = startShapeTestBoundingBox;
function startShapeTestBox(x, y, z, dimX, dimY, dimZ, rotX, rotY, rotZ, p9, flags, entity, p12) {
    return _in(0xfe466162, 0xc4401d18, _fv(x), _fv(y), _fv(z), _fv(dimX), _fv(dimY), _fv(dimZ), _fv(rotX), _fv(rotY), _fv(rotZ), p9, flags, entity, p12, _r, _ri);
}
exports.startShapeTestBox = startShapeTestBox;
/**
 * Raycast from point to point, where the ray has a radius.
 *
 * flags:
 * vehicles=10
 * peds =12
 *
 * Iterating through flags yields many ped / vehicle/ object combinations
 *
 * p9 = 7, but no idea what it does
 *
 * Entity is an entity to ignore
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 * @param flags
 * @param entity
 * @param p9
 */
function startShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
    return _in(0x28579d1b, 0x8f8aac80, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri);
}
exports.startShapeTestCapsule = startShapeTestCapsule;
/**
 * Asynchronously starts a line-of-sight (raycast) world probe shape test.
 *
 * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
 *
 * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 */
function startShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8) {
    return _in(0x7ee9f5d8, 0x3dd4f90e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri);
}
exports.startShapeTestLosProbe = startShapeTestLosProbe;
/**
 * Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
 *
 * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
 * @param pVec1
 * @param pVec2
 * @param flag
 * @param entity
 * @param flag2
 */
function startShapeTestMouseCursorLosProbe(flag, entity, flag2) {
    const [retval, pVec1_out, pVec2_out] = _in(0xff6be494, 0xc7987f34, _v, _v, flag, entity, flag2, _r, _ri);
    return [retval, _mv(pVec1_out), _mv(pVec2_out)];
}
exports.startShapeTestMouseCursorLosProbe = startShapeTestMouseCursorLosProbe;
function startShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
    return _in(0xe6ac6c45, 0xfbe83004, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri);
}
exports.startShapeTestSweptSphere = startShapeTestSweptSphere;
function startVehicleAlarm(vehicle) {
    return _in(0xb8ff7ab4, 0x5305c345, vehicle);
}
exports.startVehicleAlarm = startVehicleAlarm;
/**
 * Sounds the horn for the specified vehicle.
 *
 * vehicle: The vehicle to activate the horn for.
 * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
 * duration: The duration to sound the horn, in milliseconds.
 *
 * Note: If a player is in the vehicle, it will only sound briefly.
 * @param vehicle
 * @param duration
 * @param mode
 * @param forever
 */
function startVehicleHorn(vehicle, duration, mode, forever) {
    return _in(0x9c8c6504, 0xb5b63d2c, vehicle, duration, _ch(mode), forever);
}
exports.startVehicleHorn = startVehicleHorn;
function statClearDirtyReadDetected() {
    return _in(0x9b4bd21d, 0x69b1e609);
}
exports.statClearDirtyReadDetected = statClearDirtyReadDetected;
function statClearPendingSaves(p0) {
    return _in(0xa8733668, 0xd1047b51, p0);
}
exports.statClearPendingSaves = statClearPendingSaves;
/**
 * Example:
 *
 * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
 * STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
 * }
 * @param statSlot
 */
function statClearSlotForReload(statSlot) {
    return _in(0xeb0a7218, 0x1d4aa4ad, statSlot, _r);
}
exports.statClearSlotForReload = statClearSlotForReload;
function statCloudSlotLoadFailed(p0) {
    return _in(0x7f2c4cdf, 0x2e82df4c, p0, _r);
}
exports.statCloudSlotLoadFailed = statCloudSlotLoadFailed;
function statCloudSlotLoadFailedCode(p0) {
    return _in(0xe496a53b, 0xa5f50a56, p0, _r, _ri);
}
exports.statCloudSlotLoadFailedCode = statCloudSlotLoadFailedCode;
function statCloudSlotSaveFailed(p0) {
    return _in(0x7e6946f6, 0x8a38b74f, p0, _r);
}
exports.statCloudSlotSaveFailed = statCloudSlotSaveFailed;
function statCommunityGetHistory(statName, p1, outValue) {
    const [retval, outValue_out] = _in(0xbed9f569, 0x3f34ed17, _ch(statName), p1, _fi(outValue), _r);
    return [retval, outValue_out];
}
exports.statCommunityGetHistory = statCommunityGetHistory;
function statCommunityStartSynch() {
    return _in(0x5a556b22, 0x9a169402, _r);
}
exports.statCommunityStartSynch = statCommunityStartSynch;
function statCommunitySynchIsPending() {
    return _in(0xb1d2bb1e, 0x1631f5b1, _r);
}
exports.statCommunitySynchIsPending = statCommunitySynchIsPending;
/**
 * p0 is characterSlot? seems range from 0 to 2
 * @param p0
 */
function statDeleteSlot(p0) {
    return _in(0x49a49bed, 0x12794d70, p0, _r);
}
exports.statDeleteSlot = statDeleteSlot;
/**
 * Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
 */
function statDisableStatsTracking() {
    return _in(0x629526ab, 0xa383bcaa);
}
exports.statDisableStatsTracking = statDisableStatsTracking;
function statEnableStatsTracking() {
    return _in(0x98e2bc1c, 0xa26287c3);
}
exports.statEnableStatsTracking = statEnableStatsTracking;
function statGetBlockSaves() {
    return _in(0x6a7f1975, 0x6f1a9016, _r);
}
exports.statGetBlockSaves = statGetBlockSaves;
function statGetBool(statHash, p2) {
    const [retval, outValue_out] = _in(0x11b5e6d2, 0xae73f48e, _ch(statHash), _i, p2, _r);
    return [retval, outValue_out];
}
exports.statGetBool = statGetBool;
function statGetCancelSaveMigrationStatus() {
    return _in(0x567384df, 0xa67029e6, _r, _ri);
}
exports.statGetCancelSaveMigrationStatus = statGetCancelSaveMigrationStatus;
/**
 * Fly low to the ground for the longest distance
 */
function statGetChallengeFlyingDist() {
    return _in(0x6e0a5253, 0x375c4584, _r, _rf);
}
exports.statGetChallengeFlyingDist = statGetChallengeFlyingDist;
/**
 * Drive the furthest distance in a land vehicle without crashing
 */
function statGetCurrentDriveNocrashDistance() {
    return _in(0xba9749cc, 0x94c1fd85, _r, _rf);
}
exports.statGetCurrentDriveNocrashDistance = statGetCurrentDriveNocrashDistance;
/**
 * Reverse the longest distance without crashing
 */
function statGetCurrentDrivingReverseDistance() {
    return _in(0x32cac93c, 0x9de73d32, _r, _rf);
}
exports.statGetCurrentDrivingReverseDistance = statGetCurrentDrivingReverseDistance;
/**
 * Perform the longest stoppie on a motorcycle
 */
function statGetCurrentFrontWheelDistance() {
    return _in(0x84a810b3, 0x75e69c0e, _r, _rf);
}
exports.statGetCurrentFrontWheelDistance = statGetCurrentFrontWheelDistance;
/**
 * Perform the longest jump in a land vehicle
 */
function statGetCurrentJumpDistance() {
    return _in(0x9ec88581, 0x84cd253a, _r, _rf);
}
exports.statGetCurrentJumpDistance = statGetCurrentJumpDistance;
/**
 * Perform the most near misses with other vehicles in a land vehicle without crashing
 */
function statGetCurrentNearMissNocrashPrecise() {
    return _in(0xe8853fbc, 0xe7d8d0d6, _r, _ri);
}
exports.statGetCurrentNearMissNocrashPrecise = statGetCurrentNearMissNocrashPrecise;
/**
 * Perform the longest wheelie on a motorcycle
 */
function statGetCurrentRearWheelDistance() {
    return _in(0xa943fd17, 0x22e11efd, _r, _rf);
}
exports.statGetCurrentRearWheelDistance = statGetCurrentRearWheelDistance;
/**
 * Fall the longest distance with a parachute before opening it
 */
function statGetCurrentSkydivingDistance() {
    return _in(0xaff47709, 0xf1d5dcce, _r, _rf);
}
exports.statGetCurrentSkydivingDistance = statGetCurrentSkydivingDistance;
/**
 * Achieve the highest speed in a land vehicle
 */
function statGetCurrentSpeed() {
    return _in(0x55a8beca, 0xf28a4eb7, _r, _rf);
}
exports.statGetCurrentSpeed = statGetCurrentSpeed;
/**
 * p3 is probably characterSlot or BOOL save, always -1
 * @param statHash
 * @param outValue
 * @param numFields
 * @param p3
 */
function statGetDate(statHash, numFields, p3) {
    const [retval, outValue_out] = _in(0x8b0facef, 0xc36c824b, _ch(statHash), _i, numFields, p3, _r);
    return [retval, outValue_out];
}
exports.statGetDate = statGetDate;
function statGetFloat(statHash, p2) {
    const [retval, outValue_out] = _in(0xd7ae6c9c, 0x9c6ac54c, _ch(statHash), _f, p2, _r);
    return [retval, outValue_out];
}
exports.statGetFloat = statGetFloat;
function statGetFlyingAltitude(outValue) {
    const [retval, outValue_out] = _in(0x1a8ea222, 0xf9c67dbb, _fi(outValue), _r);
    return [retval, outValue_out];
}
exports.statGetFlyingAltitude = statGetFlyingAltitude;
/**
 * p2 appears to always be -1
 *
 * @param statHash
 * @param outValue
 * @param p2
 */
function statGetInt(statHash, p2) {
    const [retval, outValue_out] = _in(0x767fbc2a, 0xc802ef3d, _ch(statHash), _i, p2, _r);
    return [retval, outValue_out];
}
exports.statGetInt = statGetInt;
function statGetLicensePlate(statName) {
    return _in(0x5473d419, 0x5058b2e4, _ch(statName), _r, _s);
}
exports.statGetLicensePlate = statGetLicensePlate;
function statGetLoadSafeToProgressToMpFromSp() {
    return _in(0xc0e0d686, 0xddfc6eae, _r);
}
exports.statGetLoadSafeToProgressToMpFromSp = statGetLoadSafeToProgressToMpFromSp;
/**
 * p4 is probably characterSlot or BOOL save
 * @param statHash
 * @param outValue
 * @param p2
 * @param p3
 * @param p4
 */
function statGetMaskedInt(statHash, p2, p3, p4) {
    const [retval, outValue_out] = _in(0x655185a0, 0x6d9eeaab, _ch(statHash), _i, p2, p3, p4, _r);
    return [retval, outValue_out];
}
exports.statGetMaskedInt = statGetMaskedInt;
function statGetNumberOfDays(statName) {
    return _in(0xe0e854f5, 0x280fb769, _ch(statName), _r, _ri);
}
exports.statGetNumberOfDays = statGetNumberOfDays;
function statGetNumberOfHours(statName) {
    return _in(0xf2d4b2fe, 0x415aafc3, _ch(statName), _r, _ri);
}
exports.statGetNumberOfHours = statGetNumberOfHours;
function statGetNumberOfMinutes(statName) {
    return _in(0x7583b4be, 0x4c5a41b5, _ch(statName), _r, _ri);
}
exports.statGetNumberOfMinutes = statGetNumberOfMinutes;
function statGetNumberOfSeconds(statName) {
    return _in(0x2ce056ff, 0x3723f00b, _ch(statName), _r, _ri);
}
exports.statGetNumberOfSeconds = statGetNumberOfSeconds;
/**
 * p3 is probably characterSlot or BOOL save, always -1
 * @param statName
 * @param outX
 * @param outY
 * @param outZ
 * @param p4
 */
function statGetPos(statName, p4) {
    const [retval, outX_out, outY_out, outZ_out] = _in(0x350f82cc, 0xb186aa1b, _ch(statName), _f, _f, _f, p4, _r);
    return [retval, outX_out, outY_out, outZ_out];
}
exports.statGetPos = statGetPos;
function statGetRecordedValue(value) {
    const [retval, value_out] = _in(0xf11f01d9, 0x8113536a, _fi(value), _r);
    return [retval, value_out];
}
exports.statGetRecordedValue = statGetRecordedValue;
function statGetSaveMigrationConsumeContentStatus(p0) {
    const [retval, p0_out] = _in(0xce5aa445, 0xaba8dee0, _ii(p0), _r, _ri);
    return [retval, p0_out];
}
exports.statGetSaveMigrationConsumeContentStatus = statGetSaveMigrationConsumeContentStatus;
function statGetSaveMigrationStatus(data) {
    const [retval, data_out] = _in(0x886913bb, 0xeaca68c1, _ii(data), _r, _ri);
    return [retval, data_out];
}
exports.statGetSaveMigrationStatus = statGetSaveMigrationStatus;
/**
 * p1 is always -1 in the script files
 * @param statHash
 * @param p1
 */
function statGetString(statHash, p1) {
    return _in(0xe50384ac, 0xc2c3db74, _ch(statHash), p1, _r, _s);
}
exports.statGetString = statGetString;
/**
 * Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId
 * @param statHash
 */
function statGetUserId(statHash) {
    return _in(0x2365c388, 0xe393bbe2, _ch(statHash), _r, _s);
}
exports.statGetUserId = statGetUserId;
/**
 * Travel the furthest distance when bailing from a vehicle
 */
function statGetVehicleBailDistance() {
    return _in(0x0b8b7f74, 0xbf061c6d, _r, _rf);
}
exports.statGetVehicleBailDistance = statGetVehicleBailDistance;
function statIncrement(statName, value) {
    return _in(0x9b5a68c6, 0x489e9909, _ch(statName), _fv(value));
}
exports.statIncrement = statIncrement;
/**
 * Or non-flyable area
 */
function statIsPlayerVehicleAboveOcean() {
    return _in(0xf9f29227, 0x17b819ec, _r);
}
exports.statIsPlayerVehicleAboveOcean = statIsPlayerVehicleAboveOcean;
function statIsRecordingStat() {
    return _in(0x8b9cdbd6, 0xc566c38c, _r);
}
exports.statIsRecordingStat = statIsRecordingStat;
function statIsStatsTrackingEnabled() {
    return _in(0xbe3db208, 0x333d9844, _r);
}
exports.statIsStatsTrackingEnabled = statIsStatsTrackingEnabled;
function statLoad(statSlot) {
    return _in(0xa651443f, 0x437b1ce6, statSlot, _r);
}
exports.statLoad = statLoad;
function statLoadDirtyReadDetected() {
    return _in(0xecb41ac6, 0xab754401, _r);
}
exports.statLoadDirtyReadDetected = statLoadDirtyReadDetected;
function statLoadPending(statSlot) {
    return _in(0xa1750ffa, 0xfa181661, statSlot, _r);
}
exports.statLoadPending = statLoadPending;
/**
 * p0 seems to range from 0 to 7
 * @param p0
 */
function statLocalResetAllOnlineCharacterStats(p0) {
    return _in(0xa78b8fa5, 0x8200da56, p0);
}
exports.statLocalResetAllOnlineCharacterStats = statLocalResetAllOnlineCharacterStats;
function statMigrateCheckAlreadyDone() {
    return _in(0x4c89fe2b, 0xdeb3f169, _r);
}
exports.statMigrateCheckAlreadyDone = statMigrateCheckAlreadyDone;
function statMigrateCheckGetIsPlatformAvailable(p0) {
    return _in(0x5bd5f255, 0x321c4aaf, p0, _r, _ri);
}
exports.statMigrateCheckGetIsPlatformAvailable = statMigrateCheckGetIsPlatformAvailable;
function statMigrateCheckGetPlatformStatus(p0, p1) {
    const [retval, p1_out] = _in(0xdeaaf77e, 0xb3687e97, p0, _ii(p1), _r, _ri);
    return [retval, p1_out];
}
exports.statMigrateCheckGetPlatformStatus = statMigrateCheckGetPlatformStatus;
function statMigrateCheckStart() {
    return _in(0xc6e0e261, 0x6a7576bb, _r);
}
exports.statMigrateCheckStart = statMigrateCheckStart;
function statMigrateClearForRestart() {
    return _in(0xc847b43f, 0x369ac0b5);
}
exports.statMigrateClearForRestart = statMigrateClearForRestart;
function statMigrateSavegameGetStatus() {
    return _in(0x9a62ec95, 0xae10e011, _r, _ri);
}
exports.statMigrateSavegameGetStatus = statMigrateSavegameGetStatus;
/**
 * platformName must be one of the following: ps3, xbox360, ps4, xboxone
 * @param platformName
 */
function statMigrateSavegameStart(platformName) {
    return _in(0xa5c80d8e, 0x768a9e66, _ts(platformName), _r);
}
exports.statMigrateSavegameStart = statMigrateSavegameStart;
function statNetworkIncrementOnSuicide(p0, p1) {
    return _in(0x428eaf89, 0xe24f6c36, p0, _fv(p1));
}
exports.statNetworkIncrementOnSuicide = statNetworkIncrementOnSuicide;
/**
 * p0 seems to range from 0 to 7
 * @param p0
 */
function statResetAllOnlineCharacterStats(p0) {
    return _in(0x26d7399b, 0x9587fe89, p0);
}
exports.statResetAllOnlineCharacterStats = statResetAllOnlineCharacterStats;
/**
 * This function is hard-coded to always return 1.
 */
function statRollbackSaveMigration() {
    return _in(0xb3da2606, 0x774a8e2d, _r);
}
exports.statRollbackSaveMigration = statRollbackSaveMigration;
function statSave(p0, p1, p2, p3) {
    return _in(0xe07bca30, 0x5b82d2fd, p0, p1, p2, p3, _r);
}
exports.statSave = statSave;
function statSaveMigrationCancelPendingOperation() {
    return _in(0x4fef5318, 0x3c3c6414, _r);
}
exports.statSaveMigrationCancelPendingOperation = statSaveMigrationCancelPendingOperation;
function statSaveMigrationConsumeContent(contentId, srcPlatform, srcGamerHandle) {
    return _in(0x3270f67e, 0xed31fbc1, _ch(contentId), _ts(srcPlatform), _ts(srcGamerHandle), _r);
}
exports.statSaveMigrationConsumeContent = statSaveMigrationConsumeContent;
function statSavePending() {
    return _in(0x7d3a5838, 0x56f2c5ac, _r);
}
exports.statSavePending = statSavePending;
function statSavePendingOrRequested() {
    return _in(0xbbb6ad00, 0x6f1bbea3, _r);
}
exports.statSavePendingOrRequested = statSavePendingOrRequested;
function statSetBlockSaves(toggle) {
    return _in(0xf434a10b, 0xa01c37d0, toggle);
}
exports.statSetBlockSaves = statSetBlockSaves;
/**
 * Example:
 * STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
 * @param statName
 * @param value
 * @param save
 */
function statSetBool(statName, value, save) {
    return _in(0x4b33c424, 0x3de0c432, _ch(statName), value, save, _r);
}
exports.statSetBool = statSetBool;
function statSetCheatIsActive() {
    return _in(0x047cbed6, 0xf6f8b63c);
}
exports.statSetCheatIsActive = statSetCheatIsActive;
/**
 * p1 always true.
 * @param statName
 * @param p1
 */
function statSetCurrentPosixTime(statName, p1) {
    return _in(0xc2f84b7f, 0x9c4d0c61, _ch(statName), p1, _r);
}
exports.statSetCurrentPosixTime = statSetCurrentPosixTime;
/**
 * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
 *
 * The structure looks like this:
 *
 * int year
 * int month
 * int day
 * int hour
 * int minute
 * int second
 * int millisecond
 *
 * The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
 * @param statName
 * @param value
 * @param numFields
 * @param save
 */
function statSetDate(statName, numFields, save) {
    const [retval, value_out] = _in(0x2c29bfb6, 0x4f4fcbe4, _ch(statName), _i, numFields, save, _r);
    return [retval, value_out];
}
exports.statSetDate = statSetDate;
/**
 * Example:
 * STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
 * @param statName
 * @param value
 * @param save
 */
function statSetFloat(statName, value, save) {
    return _in(0x4851997f, 0x37fe9b3c, _ch(statName), _fv(value), save, _r);
}
exports.statSetFloat = statSetFloat;
/**
 * The following values have been found in the decompiled scripts:
 * "RC_ABI1"
 * "RC_ABI2"
 * "RC_BA1"
 * "RC_BA2"
 * "RC_BA3"
 * "RC_BA3A"
 * "RC_BA3C"
 * "RC_BA4"
 * "RC_DRE1"
 * "RC_EPS1"
 * "RC_EPS2"
 * "RC_EPS3"
 * "RC_EPS4"
 * "RC_EPS5"
 * "RC_EPS6"
 * "RC_EPS7"
 * "RC_EPS8"
 * "RC_EXT1"
 * "RC_EXT2"
 * "RC_EXT3"
 * "RC_EXT4"
 * "RC_FAN1"
 * "RC_FAN2"
 * "RC_FAN3"
 * "RC_HAO1"
 * "RC_HUN1"
 * "RC_HUN2"
 * "RC_JOS1"
 * "RC_JOS2"
 * "RC_JOS3"
 * "RC_JOS4"
 * "RC_MAU1"
 * "RC_MIN1"
 * "RC_MIN2"
 * "RC_MIN3"
 * "RC_MRS1"
 * "RC_MRS2"
 * "RC_NI1"
 * "RC_NI1A"
 * "RC_NI1B"
 * "RC_NI1C"
 * "RC_NI1D"
 * "RC_NI2"
 * "RC_NI3"
 * "RC_OME1"
 * "RC_OME2"
 * "RC_PA1"
 * "RC_PA2"
 * "RC_PA3"
 * "RC_PA3A"
 * "RC_PA3B"
 * "RC_PA4"
 * "RC_RAM1"
 * "RC_RAM2"
 * "RC_RAM3"
 * "RC_RAM4"
 * "RC_RAM5"
 * "RC_SAS1"
 * "RC_TON1"
 * "RC_TON2"
 * "RC_TON3"
 * "RC_TON4"
 * "RC_TON5"
 * @param statName
 * @param value
 * @param save
 */
function statSetGxtLabel(statName, value, save) {
    return _in(0x17695002, 0xfd8b2ae0, _ch(statName), _ts(value), save, _r);
}
exports.statSetGxtLabel = statSetGxtLabel;
/**
 * Example:
 * STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);
 * @param statName
 * @param value
 * @param save
 */
function statSetInt(statName, value, save) {
    return _in(0xb3271d7a, 0xb655b441, _ch(statName), value, save, _r);
}
exports.statSetInt = statSetInt;
function statSetLicensePlate(statName, str) {
    return _in(0x69ff1326, 0x6d7296da, _ch(statName), _ts(str), _r);
}
exports.statSetLicensePlate = statSetLicensePlate;
function statSetMaskedInt(statName, p1, p2, p3, save) {
    return _in(0x7bbb1b54, 0x583ed410, _ch(statName), p1, p2, p3, save, _r);
}
exports.statSetMaskedInt = statSetMaskedInt;
function statSetOpenSavetypeInJob(p0) {
    return _in(0x5688585e, 0x6d563cd8, p0);
}
exports.statSetOpenSavetypeInJob = statSetOpenSavetypeInJob;
function statSetPos(statName, x, y, z, save) {
    return _in(0xdb283fde, 0x680fe72e, _ch(statName), _fv(x), _fv(y), _fv(z), save, _r);
}
exports.statSetPos = statSetPos;
/**
 * Does not take effect immediately, unfortunately.
 *
 * profileSetting seems to only be 936, 937 and 938 in scripts
 * @param profileSetting
 * @param value
 */
function statSetProfileSettingValue(profileSetting, value) {
    return _in(0x68f01422, 0xbe1d838f, profileSetting, value);
}
exports.statSetProfileSettingValue = statSetProfileSettingValue;
function statSetString(statName, value, save) {
    return _in(0xa87b2335, 0xd12531d7, _ch(statName), _ts(value), save, _r);
}
exports.statSetString = statSetString;
function statSetUserId(statName, value, save) {
    return _in(0x8cddf1e4, 0x52babe11, _ch(statName), _ts(value), save, _r);
}
exports.statSetUserId = statSetUserId;
function statSlotIsLoaded(statSlot) {
    return _in(0x0d0a9f0e, 0x7bd91e3c, statSlot, _r);
}
exports.statSlotIsLoaded = statSlotIsLoaded;
/**
 * enum StatTrackingType
 * {
 * LongestWheelie = 1,
 * LongestStoppie = 2,
 * NoCrashes = 3,
 * HighestSpeed = 4,
 * _MostFlips = 5,
 * _LongestSpin = 6,
 * _HighestJumpReached = 7,
 * LongestJump = 8,
 * _NearMissesNoCrash = 9,
 * LongestFallSurvived = 10,
 * LowestParachute = 11,
 * ReverseDriving = 12,
 * LongestFreefall = 13,
 * VehiclesStolen = 14,
 * _SomeCFireEventCount = 15,
 * _Unk16 = 16,
 * _LowFlyingTime = 17,
 * LowFlying = 18,
 * _InvertedFlyingTime = 19,
 * InvertedFlying = 20,
 * _PlaneSpinCount = 21,
 * MeleeKills = 22, // Players
 * _LongestSniperKill = 23,
 * SniperSkills = 24, // Players
 * DrivebyKills = 25, // Players
 * HeadshotKills = 26, // Players
 * LongestBail = 27,
 * _TotalRammedByCar = 28,
 * NearMissesPrecise = 29,
 * _FreefallTime = 30,
 * Unk31 = 31,
 * }
 *
 * enum StatTrackingValueType
 * {
 * Total,
 * Max,
 * Min
 * }
 * @param statType
 * @param valueType
 */
function statStartRecordStat(statType, valueType) {
    return _in(0x33d72899, 0xe24c3365, statType, valueType, _r);
}
exports.statStartRecordStat = statStartRecordStat;
function statStopRecordStat() {
    return _in(0xa761d4ac, 0x6115623d, _r);
}
exports.statStopRecordStat = statStopRecordStat;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
function statsCompletedCharacterCreation(p0) {
    return _in(0xc01d2470, 0xf22cde5a, p0);
}
exports.statsCompletedCharacterCreation = statsCompletedCharacterCreation;
/**
 * Example:
 *
 * This will stop the alarm at Fort Zancudo.
 *
 * AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 *
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) has to be true (1) to have any effect.
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 * @param toggle
 */
function stopAlarm(alarmName, toggle) {
    return _in(0xa1caddcd, 0x98415a41, _ts(alarmName), toggle);
}
exports.stopAlarm = stopAlarm;
function stopAllAlarms(stop) {
    return _in(0x2f794a87, 0x7add4c92, stop);
}
exports.stopAllAlarms = stopAllAlarms;
function stopAllGarageActivity() {
    return _in(0x0f87e938, 0xbdf29d66);
}
exports.stopAllGarageActivity = stopAllGarageActivity;
/**
 * Looks like p1 may be a flag, still need to do some research, though.
 * @param entity
 * @param priority
 * @param secondary
 */
function stopAnimPlayback(entity, priority, secondary) {
    return _in(0xee08c992, 0xd238c5d1, entity, priority, secondary);
}
exports.stopAnimPlayback = stopAnimPlayback;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animationName
 * @param blendDelta
 */
function stopAnimTask(entity, animDictionary, animationName, blendDelta) {
    return _in(0x97ff36a1, 0xd40ea00a, entity, _ts(animDictionary), _ts(animationName), _fv(blendDelta));
}
exports.stopAnimTask = stopAnimTask;
function stopAnyPedModelBeingSuppressed() {
    return _in(0xb47bd05f, 0xa66b40cf);
}
exports.stopAnyPedModelBeingSuppressed = stopAnyPedModelBeingSuppressed;
/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
function stopAudioScene(scene) {
    return _in(0xdfe8422b, 0x3b94e688, _ts(scene));
}
exports.stopAudioScene = stopAudioScene;
/**
 * ??
 */
function stopAudioScenes() {
    return _in(0xbac7fc81, 0xa75ec1a1);
}
exports.stopAudioScenes = stopAudioScenes;
function stopBinkMovie(binkMovie) {
    return _in(0x63606a61, 0xde68898a, binkMovie);
}
exports.stopBinkMovie = stopBinkMovie;
/**
 * Stops CTaskBringVehicleToHalt
 * @param vehicle
 */
function stopBringingVehicleToHalt(vehicle) {
    return _in(0x7c06330b, 0xfdda182e, vehicle);
}
exports.stopBringingVehicleToHalt = stopBringingVehicleToHalt;
function stopCamPointing(cam) {
    return _in(0xf33ab757, 0x80ba57de, cam);
}
exports.stopCamPointing = stopCamPointing;
function stopCamShaking(cam, p1) {
    return _in(0xbdecf643, 0x67884ac3, cam, p1);
}
exports.stopCamShaking = stopCamShaking;
function stopCinematicCamShaking(p0) {
    return _in(0x2238e588, 0xe588a6d7, p0);
}
exports.stopCinematicCamShaking = stopCinematicCamShaking;
/**
 * Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
 * @param p0
 */
function stopCinematicShot(p0) {
    return _in(0x7660c6e7, 0x5d3a078e, _ch(p0));
}
exports.stopCinematicShot = stopCinematicShot;
function stopCodeGameplayHint(p0) {
    return _in(0x247acbc4, 0xabbc9d1c, p0);
}
exports.stopCodeGameplayHint = stopCodeGameplayHint;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
function stopControlShake(control) {
    return _in(0x38c16a30, 0x5e8cdc8d, control);
}
exports.stopControlShake = stopControlShake;
function stopCurrentPlayingAmbientSpeech(ped) {
    return _in(0xb8bec0ca, 0x6f0edb0f, ped);
}
exports.stopCurrentPlayingAmbientSpeech = stopCurrentPlayingAmbientSpeech;
function stopCurrentPlayingSpeech(ped) {
    return _in(0x7a73d05a, 0x607734c7, ped);
}
exports.stopCurrentPlayingSpeech = stopCurrentPlayingSpeech;
function stopCutscene(p0) {
    return _in(0xc7272775, 0xb4dc786e, p0);
}
exports.stopCutscene = stopCutscene;
function stopCutsceneAudio() {
    return _in(0x806058bb, 0xdc136e06);
}
exports.stopCutsceneAudio = stopCutsceneAudio;
function stopCutsceneCamShaking(p0) {
    return _in(0x324c5aa4, 0x11da7737, p0);
}
exports.stopCutsceneCamShaking = stopCutsceneCamShaking;
function stopCutsceneImmediately() {
    return _in(0xd220bdd2, 0x22ac4a1e);
}
exports.stopCutsceneImmediately = stopCutsceneImmediately;
function stopEndUserBenchmark() {
    return _in(0xc7db36c2, 0x4634f52b);
}
exports.stopEndUserBenchmark = stopEndUserBenchmark;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
 * @param entity
 * @param animation
 * @param animGroup
 * @param p3
 */
function stopEntityAnim(entity, animation, animGroup, p3) {
    return _in(0x28004f88, 0x151e03e0, entity, _ts(animation), _ts(animGroup), _fv(p3), _r);
}
exports.stopEntityAnim = stopEntityAnim;
function stopEntityFire(entity) {
    return _in(0x7f0dd2eb, 0xbb651aff, entity);
}
exports.stopEntityFire = stopEntityFire;
function stopFireInRange(x, y, z, radius) {
    return _in(0x056a8a21, 0x9b8e829f, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.stopFireInRange = stopFireInRange;
function stopGameplayCamShaking(p0) {
    return _in(0x0ef93e9f, 0x3d08c178, p0);
}
exports.stopGameplayCamShaking = stopGameplayCamShaking;
function stopGameplayHint(p0) {
    return _in(0xf46c581c, 0x61718916, p0);
}
exports.stopGameplayHint = stopGameplayHint;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
function stopGameplayHintBeingCancelledThisUpdate(p0) {
    return _in(0xccd078c2, 0x665d2973, p0);
}
exports.stopGameplayHintBeingCancelledThisUpdate = stopGameplayHintBeingCancelledThisUpdate;
/**
 * p1 is always 0 in the native scripts
 * @param ptfxHandle
 * @param p1
 */
function stopParticleFxLooped(ptfxHandle, p1) {
    return _in(0x8f759988, 0x77616996, ptfxHandle, p1);
}
exports.stopParticleFxLooped = stopParticleFxLooped;
function stopPedRingtone(ped) {
    return _in(0x6c5ae23e, 0xfa885092, ped);
}
exports.stopPedRingtone = stopPedRingtone;
function stopPedSpeaking(ped, shaking) {
    return _in(0x9d64d740, 0x5520e3d3, ped, shaking);
}
exports.stopPedSpeaking = stopPedSpeaking;
function stopPedSpeakingSynced(ped, p1) {
    return _in(0xab6781a5, 0xf3101470, ped, p1);
}
exports.stopPedSpeakingSynced = stopPedSpeakingSynced;
function stopPedWeaponFiringWhenDropped(ped) {
    return _in(0xc158d281, 0x42a34608, ped);
}
exports.stopPedWeaponFiringWhenDropped = stopPedWeaponFiringWhenDropped;
function stopPlaybackRecordedVehicle(vehicle) {
    return _in(0x54833611, 0xc17abdea, vehicle);
}
exports.stopPlaybackRecordedVehicle = stopPlaybackRecordedVehicle;
function stopPlayerSwitch() {
    return _in(0x95c0a5bb, 0xdc189aa1);
}
exports.stopPlayerSwitch = stopPlayerSwitch;
/**
 * Disables the player's teleportation
 */
function stopPlayerTeleport() {
    return _in(0xc449eded, 0x9d73009c);
}
exports.stopPlayerTeleport = stopPlayerTeleport;
/**
 * This native makes the gameplay camera zoom into first person/third person with a special effect.
 * @param render
 * @param p1
 * @param p2
 * @param p3
 */
function stopRenderingScriptCamsUsingCatchUp(render, p1, p2, p3) {
    return _in(0xc819f3cb, 0xb62bf692, render, _fv(p1), p2, p3);
}
exports.stopRenderingScriptCamsUsingCatchUp = stopRenderingScriptCamsUsingCatchUp;
/**
 * Stops recording and saves the recorded clip.
 */
function stopReplayRecording() {
    return _in(0x071a5197, 0xd6afc8b3);
}
exports.stopReplayRecording = stopReplayRecording;
function stopRopeUnwindingFront(ropeId) {
    return _in(0xfff3a507, 0x79efbbb3, ropeId);
}
exports.stopRopeUnwindingFront = stopRopeUnwindingFront;
function stopRopeWinding(ropeId) {
    return _in(0xcb2d4ab8, 0x4a19aa7c, ropeId);
}
exports.stopRopeWinding = stopRopeWinding;
function stopSaveArray() {
    return _in(0x04456f95, 0x153c6be4);
}
exports.stopSaveArray = stopSaveArray;
function stopSaveData() {
    return _in(0x74e20c91, 0x45fb66fd);
}
exports.stopSaveData = stopSaveData;
function stopSaveStruct() {
    return _in(0xeb1774df, 0x12bb9f12);
}
exports.stopSaveStruct = stopSaveStruct;
/**
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 * @param p0
 */
function stopScriptGlobalShaking(p0) {
    return _in(0x1c9d7949, 0xfa533490, p0);
}
exports.stopScriptGlobalShaking = stopScriptGlobalShaking;
function stopScriptedConversation(p0) {
    return _in(0xd79deefb, 0x53455eba, p0, _r, _ri);
}
exports.stopScriptedConversation = stopScriptedConversation;
/**
 * STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?
 */
function stopSmokeGrenadeExplosionSounds() {
    return _in(0xe4e6dd55, 0x66d28c82);
}
exports.stopSmokeGrenadeExplosionSounds = stopSmokeGrenadeExplosionSounds;
function stopSound(soundId) {
    return _in(0xa3b0c41b, 0xa5cc0bb5, soundId);
}
exports.stopSound = stopSound;
function stopStream() {
    return _in(0xa4718a14, 0x19d18151);
}
exports.stopStream = stopStream;
function stopSynchronizedAudioEvent(sceneID) {
    return _in(0x92d6a88e, 0x64a94430, sceneID, _r);
}
exports.stopSynchronizedAudioEvent = stopSynchronizedAudioEvent;
/**
 * p1 sync task id?
 * @param entity
 * @param p1
 * @param p2
 */
function stopSynchronizedEntityAnim(entity, p1, p2) {
    return _in(0x43d3807c, 0x077261e3, entity, _fv(p1), p2, _r);
}
exports.stopSynchronizedEntityAnim = stopSynchronizedEntityAnim;
function stopSynchronizedMapEntityAnim(x1, y1, z1, x2, y2, z2) {
    return _in(0x11e79cab, 0x7183b6f5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), y2, _fv(z2), _r);
}
exports.stopSynchronizedMapEntityAnim = stopSynchronizedMapEntityAnim;
/**
 * Always returns zero.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
function streamvolCreateFrustum(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x1f3f018b, 0xc3afa77c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri);
}
exports.streamvolCreateFrustum = streamvolCreateFrustum;
/**
 * Always returns zero.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
function streamvolCreateLine(p0, p1, p2, p3, p4, p5, p6) {
    return _in(0x0ad9710c, 0xee2f590f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r, _ri);
}
exports.streamvolCreateLine = streamvolCreateLine;
/**
 * Always returns zero.
 * @param x
 * @param y
 * @param z
 * @param rad
 * @param p4
 * @param p5
 */
function streamvolCreateSphere(x, y, z, rad, p4, p5) {
    return _in(0x219c7b8d, 0x53e429fd, _fv(x), _fv(y), _fv(z), _fv(rad), p4, p5, _r, _ri);
}
exports.streamvolCreateSphere = streamvolCreateSphere;
function streamvolDelete(unused) {
    return _in(0x1ee7d8df, 0x4425f053, unused);
}
exports.streamvolDelete = streamvolDelete;
function streamvolHasLoaded(unused) {
    return _in(0x7d41e9d2, 0xd17c5b2d, unused, _r);
}
exports.streamvolHasLoaded = streamvolHasLoaded;
function streamvolIsValid(unused) {
    return _in(0x07c313f9, 0x4746702c, unused, _r);
}
exports.streamvolIsValid = streamvolIsValid;
/**
 * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
 *
 * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
 * @param string
 * @param outInteger
 */
function stringToInt(string, outInteger) {
    const [retval, outInteger_out] = _in(0x5a5f40fe, 0x637eb584, _ts(string), _ii(outInteger), _r);
    return [retval, outInteger_out];
}
exports.stringToInt = stringToInt;
function suppressAgitationEventsNextFrame() {
    return _in(0x5f3b7749, 0xc112d552);
}
exports.suppressAgitationEventsNextFrame = suppressAgitationEventsNextFrame;
function suppressAmbientPedAggressiveCleanupThisFrame() {
    return _in(0x5a7f62fd, 0xa59759bd);
}
exports.suppressAmbientPedAggressiveCleanupThisFrame = suppressAmbientPedAggressiveCleanupThisFrame;
/**
 * crimeType: see REPORT_CRIME
 * @param player
 * @param crimeType
 */
function suppressCrimeThisFrame(player, crimeType) {
    return _in(0x9a987297, 0xed8bd838, player, crimeType);
}
exports.suppressCrimeThisFrame = suppressCrimeThisFrame;
function suppressFrontendRenderingThisFrame() {
    return _in(0xba751764, 0xf0821256);
}
exports.suppressFrontendRenderingThisFrame = suppressFrontendRenderingThisFrame;
function suppressHdMapStreamingThisFrame() {
    return _in(0x47239732, 0x2e92a856);
}
exports.suppressHdMapStreamingThisFrame = suppressHdMapStreamingThisFrame;
/**
 * This has been found in use in the decompiled files.
 * @param player
 */
function suppressLosingWantedLevelIfHiddenThisFrame(player) {
    return _in(0x4669b3ed, 0x80f24b4e, player);
}
exports.suppressLosingWantedLevelIfHiddenThisFrame = suppressLosingWantedLevelIfHiddenThisFrame;
function suppressNeonsOnVehicle(vehicle, toggle) {
    return _in(0x83f81357, 0x0ff519de, vehicle, toggle);
}
exports.suppressNeonsOnVehicle = suppressNeonsOnVehicle;
/**
 * enum ePickupRewardType
 * {
 * PICKUP_REWARD_TYPE_AMMO = (1 << 0),
 * PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
 * PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
 * PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
 * PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
 * PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
 * PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
 * PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
 * PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
 * PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
 * PICKUP_REWARD_TYPE_STAT = (1 << 8),
 * PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
 * PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
 * PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
 * };
 * @param rewardType
 * @param suppress
 */
function suppressPickupRewardType(rewardType, suppress) {
    return _in(0xf9209952, 0x7db8e2a7, rewardType, suppress);
}
exports.suppressPickupRewardType = suppressPickupRewardType;
function suppressPickupSoundForPickup(p0, p1) {
    return _in(0x8dca505a, 0x5c196f05, p0, p1);
}
exports.suppressPickupSoundForPickup = suppressPickupSoundForPickup;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 */
function suppressShockingEventTypeNextFrame(eventType) {
    return _in(0x3fd2ec8b, 0xf1f1cf30, eventType);
}
exports.suppressShockingEventTypeNextFrame = suppressShockingEventTypeNextFrame;
function suppressShockingEventsNextFrame() {
    return _in(0x2f9a292a, 0xd0a3bd89);
}
exports.suppressShockingEventsNextFrame = suppressShockingEventsNextFrame;
function suppressWitnessesCallingPoliceThisFrame(player) {
    return _in(0x36f1b388, 0x55f2a8df, player);
}
exports.suppressWitnessesCallingPoliceThisFrame = suppressWitnessesCallingPoliceThisFrame;
function supressRandomEventThisFrame(eventType, suppress) {
    return _in(0x1eae0a6e, 0x978894a2, eventType, suppress);
}
exports.supressRandomEventThisFrame = supressRandomEventThisFrame;
/**
 * Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
 * @param vehicle
 * @param toggle
 */
function swingBoatBoomFreely(vehicle, toggle) {
    return _in(0xc1f981a6, 0xf74f0c23, vehicle, toggle);
}
exports.swingBoatBoomFreely = swingBoatBoomFreely;
/**
 * Sets the boat boom position for the `TR3` trailer.
 * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
 * To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
 * @param vehicle
 * @param ratio
 */
function swingBoatBoomToRatio(vehicle, ratio) {
    return _in(0xf488c566, 0x413b4232, vehicle, _fv(ratio));
}
exports.swingBoatBoomToRatio = swingBoatBoomToRatio;
/**
 * Same as INIT_PC_SCRIPTED_CONTROLS
 * @param schemeName
 */
function switchPcScriptedControls(schemeName) {
    return _in(0x4683149e, 0xd1dde7a1, _ts(schemeName), _r);
}
exports.switchPcScriptedControls = switchPcScriptedControls;
/**
 * doesn't act normally when used on mount chilliad
 * Flags is a bitflag:
 * 2^n - Enabled Functionality:
 * 0 - Skip camera rotate up
 * 3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
 * 6 - Invert Switch Direction (false = out, true = in)
 * 8 - Hang above ped
 *
 * switchType: 0 - 3
 * 0: 1 step towards ped
 * 1: 3 steps out from ped
 * 2: 1 step out from ped
 * 3: 1 step towards ped
 * @param ped
 * @param flags
 * @param switchType
 */
function switchToMultiFirstpart(ped, flags, switchType) {
    return _in(0xaab3200e, 0xd59016bc, ped, flags, switchType);
}
exports.switchToMultiFirstpart = switchToMultiFirstpart;
function switchToMultiSecondpart(ped) {
    return _in(0xd8295af6, 0x39fd9cb8, ped);
}
exports.switchToMultiSecondpart = switchToMultiSecondpart;
/**
 * Toggles whether ambient trains can spawn on the specified track or not
 *
 * `trackId` is the internal id of the train track to switch.
 * `state` is whether ambient trains can spawn or not
 *
 * trackIds
 * 0 (`trains1.dat`) Main track around SA
 * 1 (`trains2.dat`) Davis Quartz Quarry branch
 * 2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
 * 3 (`trains4.dat`) Metro track circuit
 * 4 (`trains5.dat`) Branch in Mirror Park Railyard
 * 5 (`trains6.dat`) Branch in Mirror Park Railyard
 * 6 (`trains7.dat`) LS branch to Mirror Park Railyard
 * 7 (`trains8.dat`) Overground part of metro track along Forum Dr.
 * 8 (`trains9.dat`) Branch to Mirror Park Railyard
 * 9 (`trains10.dat`) Yankton train
 * 10 (`trains11.dat`) Part of metro track near mission row
 * 11 (`trains12.dat`) Yankton prologue mission train
 * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
 * @param trackId
 * @param state
 */
function switchTrainTrack(trackId, state) {
    return _in(0xfd813bb7, 0xdb977f20, trackId, state);
}
exports.switchTrainTrack = switchTrainTrack;
/**
 * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
 *
 * To enable the keys again, use `0x14621BB1DF14E2B2`.
 */
function takeControlOfFrontend() {
    return _in(0xec926472, 0x7eec0f28);
}
exports.takeControlOfFrontend = takeControlOfFrontend;
function takeOwnershipOfSynchronizedScene(scene) {
    return _in(0xcd9cc7e2, 0x00a52a6f, scene);
}
exports.takeOwnershipOfSynchronizedScene = takeOwnershipOfSynchronizedScene;
function tan(p0) {
    return _in(0x632106cc, 0x96e82e91, _fv(p0), _r, _rf);
}
exports.tan = tan;
/**
 * Makes the specified ped achieve the specified heading.
 *
 * pedHandle: The handle of the ped to assign the task to.
 * heading: The desired heading.
 * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
 * @param ped
 * @param heading
 * @param timeout
 */
function taskAchieveHeading(ped, heading, timeout) {
    return _in(0x93b93a37, 0x987f1f3d, ped, _fv(heading), timeout);
}
exports.taskAchieveHeading = taskAchieveHeading;
function taskAgitatedActionConfrontResponse(ped, ped2) {
    return _in(0x19d1b791, 0xcb3670fe, ped, ped2);
}
exports.taskAgitatedActionConfrontResponse = taskAgitatedActionConfrontResponse;
function taskAimGunAtCoord(ped, x, y, z, time, instantBlendToAim, playAnimIntro) {
    return _in(0x6671f3ee, 0xc681bda1, ped, _fv(x), _fv(y), _fv(z), time, instantBlendToAim, playAnimIntro);
}
exports.taskAimGunAtCoord = taskAimGunAtCoord;
/**
 * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * @param ped
 * @param entity
 * @param duration
 * @param instantBlendToAim
 */
function taskAimGunAtEntity(ped, entity, duration, instantBlendToAim) {
    return _in(0x9b53bb6e, 0x8943af53, ped, entity, duration, instantBlendToAim);
}
exports.taskAimGunAtEntity = taskAimGunAtEntity;
function taskAimGunScripted(ped, scriptTask, disableBlockingClip, instantBlendToAim) {
    return _in(0x7a192be1, 0x6d373d00, ped, _ch(scriptTask), disableBlockingClip, instantBlendToAim);
}
exports.taskAimGunScripted = taskAimGunScripted;
function taskAimGunScriptedWithTarget(ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim) {
    return _in(0x8605af0d, 0xe8b3a5ac, ped, target, _fv(x), _fv(y), _fv(z), gunTaskType, disableBlockingClip, forceAim);
}
exports.taskAimGunScriptedWithTarget = taskAimGunScriptedWithTarget;
/**
 * Example from "me_amanda1.ysc.c4":
 * TASK::TASK_ARREST_PED(l_19F  -- [[ This is a Ped ]]  , PLAYER::PLAYER_PED_ID());
 *
 * Example from "armenian1.ysc.c4":
 * if (!PED::IS_PED_INJURED(l_B18[0 -- [[1]] ])) {
 * TASK::TASK_ARREST_PED(l_B18[0 -- [[1]] ], PLAYER::PLAYER_PED_ID());
 * }
 *
 * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
 *
 *
 * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
 * @param ped
 * @param target
 */
function taskArrestPed(ped, target) {
    return _in(0xf3b9a78a, 0x178572b1, ped, target);
}
exports.taskArrestPed = taskArrestPed;
/**
 * You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
 *
 * Working example
 * float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
 * TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
 *
 * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
 * @param pedDriver
 * @param vehicle
 * @param targetVehicle
 * @param targetPed
 * @param x
 * @param y
 * @param z
 * @param mission
 * @param maxSpeed
 * @param drivingStyle
 * @param targetReached
 * @param boatFlags
 */
function taskBoatMission(pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags) {
    return _in(0x15c86013, 0x127ce63f, pedDriver, vehicle, targetVehicle, targetPed, _fv(x), _fv(y), _fv(z), mission, _fv(maxSpeed), drivingStyle, _fv(targetReached), boatFlags);
}
exports.taskBoatMission = taskBoatMission;
/**
 * p2 tend to be 16, 17 or 1
 * p3 to p7 tend to be 0.0
 * @param ped
 * @param target
 * @param flags
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param headingDegs
 * @param idleTime
 */
function taskChatToPed(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime) {
    return _in(0x8c338e02, 0x63e4fd19, ped, target, flags, _fv(goToLocationX), _fv(goToLocationY), _fv(goToLocationZ), _fv(headingDegs), _fv(idleTime));
}
exports.taskChatToPed = taskChatToPed;
function taskClearDefensiveArea(ped) {
    return _in(0x95a6c46a, 0x31d1917d, ped);
}
exports.taskClearDefensiveArea = taskClearDefensiveArea;
function taskClearLookAt(ped) {
    return _in(0x0f804f1d, 0xb19b9689, ped);
}
exports.taskClearLookAt = taskClearLookAt;
/**
 * Climbs or vaults the nearest thing.
 * usePlayerLaunchForce is unused.
 * @param ped
 * @param usePlayerLaunchForce
 */
function taskClimb(ped, usePlayerLaunchForce) {
    return _in(0x89d9fcc2, 0x435112f1, ped, usePlayerLaunchForce);
}
exports.taskClimb = taskClimb;
function taskClimbLadder(ped, fast) {
    return _in(0xb6c987f9, 0x285a3814, ped, fast);
}
exports.taskClimbLadder = taskClimbLadder;
/**
 * Despite its name, it only attacks ONE hated target. The one closest hated target.
 *
 * p2 seems to be always 0
 * @param ped
 * @param radius
 * @param combatFlags
 */
function taskCombatHatedTargetsAroundPed(ped, radius, combatFlags) {
    return _in(0x7bf835bb, 0x9e2698c8, ped, _fv(radius), combatFlags);
}
exports.taskCombatHatedTargetsAroundPed = taskCombatHatedTargetsAroundPed;
function taskCombatHatedTargetsAroundPedTimed(ped, radius, time, combatFlags) {
    return _in(0x2bba30b8, 0x54534a0c, ped, _fv(radius), time, combatFlags);
}
exports.taskCombatHatedTargetsAroundPedTimed = taskCombatHatedTargetsAroundPedTimed;
/**
 * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param combatFlags
 */
function taskCombatHatedTargetsInArea(ped, x, y, z, radius, combatFlags) {
    return _in(0x4cf5f55d, 0xac3280a0, ped, _fv(x), _fv(y), _fv(z), _fv(radius), combatFlags);
}
exports.taskCombatHatedTargetsInArea = taskCombatHatedTargetsInArea;
/**
 * Makes the specified ped attack the target ped.
 * p2 should be 0
 * p3 should be 16
 * @param ped
 * @param targetPed
 * @param combatFlags
 * @param threatResponseFlags
 */
function taskCombatPed(ped, targetPed, combatFlags, threatResponseFlags) {
    return _in(0xf166e484, 0x07bac484, ped, targetPed, combatFlags, threatResponseFlags);
}
exports.taskCombatPed = taskCombatPed;
function taskCombatPedTimed(ped, target, time, flags) {
    return _in(0x944f30dc, 0xb7096bde, ped, target, time, flags);
}
exports.taskCombatPedTimed = taskCombatPedTimed;
function taskCower(ped, duration) {
    return _in(0x3eb1fe9e, 0x8e908e15, ped, duration);
}
exports.taskCower = taskCower;
/**
 * Example:
 *
 * TASK::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
 *
 *
 *
 *
 * Needs working example. Doesn't seem to do anything.
 *
 * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
 * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
 * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
 * @param driverPed
 * @param targetPed
 * @param targetVehicle
 * @param targetX
 * @param targetY
 * @param targetZ
 * @param distanceToShoot
 * @param pedAccuracy
 * @param pushUnderneathDrivingTaskIfDriving
 * @param firingPattern
 */
function taskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern) {
    return _in(0x2f8af0e8, 0x2773a171, driverPed, targetPed, targetVehicle, _fv(targetX), _fv(targetY), _fv(targetZ), _fv(distanceToShoot), pedAccuracy, pushUnderneathDrivingTaskIfDriving, _ch(firingPattern));
}
exports.taskDriveBy = taskDriveBy;
/**
 * speed 1.0 = walk, 2.0 = run
 * p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
 * p6 is always 0
 *
 * Usage of seat
 * -1 = driver
 * 0 = passenger
 * 1 = left back seat
 * 2 = right back seat
 * 3 = outside left
 * 4 = outside right
 * @param ped
 * @param vehicle
 * @param timeout
 * @param seat
 * @param speed
 * @param flag
 * @param overrideEntryClipsetName
 */
function taskEnterVehicle(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName) {
    return _in(0xc20e50aa, 0x46d09ca8, ped, vehicle, timeout, seat, _fv(speed), flag, _ts(overrideEntryClipsetName));
}
exports.taskEnterVehicle = taskEnterVehicle;
function taskEveryoneLeaveVehicle(vehicle) {
    return _in(0x7f93691a, 0xb4b92272, vehicle);
}
exports.taskEveryoneLeaveVehicle = taskEveryoneLeaveVehicle;
/**
 * p1 is 1, 2, or 3 in scripts
 * @param ped
 * @param exitType
 * @param x
 * @param y
 * @param z
 */
function taskExitCover(ped, exitType, x, y, z) {
    return _in(0x79b258e3, 0x97854d29, ped, exitType, _fv(x), _fv(y), _fv(z));
}
exports.taskExitCover = taskExitCover;
/**
 * MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
 *
 * A maximum of 8 points can be added.
 * @param x
 * @param y
 * @param z
 */
function taskExtendRoute(x, y, z) {
    return _in(0x1e788977, 0x8264843a, _fv(x), _fv(y), _fv(z));
}
exports.taskExtendRoute = taskExtendRoute;
/**
 * MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
 */
function taskFlushRoute() {
    return _in(0x841142a1, 0x376e9006);
}
exports.taskFlushRoute = taskFlushRoute;
/**
 * If no timeout, set timeout to -1.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param moveBlendRatio
 * @param time
 * @param targetRadius
 * @param flags
 * @param targetHeading
 */
function taskFollowNavMeshToCoord(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading) {
    return _in(0x15d3a79d, 0x4e44b913, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), time, _fv(targetRadius), flags, _fv(targetHeading));
}
exports.taskFollowNavMeshToCoord = taskFollowNavMeshToCoord;
function taskFollowNavMeshToCoordAdvanced(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading) {
    return _in(0x17f58b88, 0xd085dbac, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), time, _fv(targetRadius), flags, _fv(slideToCoordHeading), _fv(maxSlopeNavigable), _fv(clampMaxSearchDistance), _fv(targetHeading));
}
exports.taskFollowNavMeshToCoordAdvanced = taskFollowNavMeshToCoordAdvanced;
/**
 * MulleKD19: Makes the ped go on the created point route.
 *
 * ped: The ped to give the task to.
 * speed: The speed to move at in m/s.
 * int: Unknown. Can be 0, 1, 2 or 3.
 *
 * Example:
 * TASK_FLUSH_ROUTE();
 * TASK_EXTEND_ROUTE(0f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 10f, 70f);
 * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
 * @param ped
 * @param speed
 * @param mode
 */
function taskFollowPointRoute(ped, speed, mode) {
    return _in(0x59558328, 0x1858626e, ped, _fv(speed), mode);
}
exports.taskFollowPointRoute = taskFollowPointRoute;
/**
 * p6 always -1
 * p7 always 10.0
 * p8 always 1
 * @param ped
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param movementSpeed
 * @param timeout
 * @param stoppingRange
 * @param persistFollowing
 */
function taskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) {
    return _in(0x304ae42e, 0x357b8c7e, ped, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(movementSpeed), timeout, _fv(stoppingRange), persistFollowing);
}
exports.taskFollowToOffsetOfEntity = taskFollowToOffsetOfEntity;
function taskFollowWaypointRecording(ped, name, p2, p3, p4) {
    return _in(0x07595918, 0x19534f7b, ped, _ts(name), p2, p3, p4);
}
exports.taskFollowWaypointRecording = taskFollowWaypointRecording;
/**
 * p2 always false
 *
 * [30/03/2017] ins1de :
 *
 * See FORCE_PED_MOTION_STATE
 * @param ped
 * @param state
 * @param forceRestart
 */
function taskForceMotionState(ped, state, forceRestart) {
    return _in(0x4f056e1a, 0xffef17ab, ped, _ch(state), forceRestart);
}
exports.taskForceMotionState = taskForceMotionState;
function taskGetOffBoat(ped, boat) {
    return _in(0x9c00e77a, 0xf14b2dff, ped, boat);
}
exports.taskGetOffBoat = taskGetOffBoat;
function taskGoStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide) {
    return _in(0xd76b57b4, 0x4f1e6f8b, ped, _fv(x), _fv(y), _fv(z), _fv(speed), timeout, _fv(targetHeading), _fv(distanceToSlide));
}
exports.taskGoStraightToCoord = taskGoStraightToCoord;
function taskGoStraightToCoordRelativeToEntity(ped, entity, x, y, z, moveBlendRatio, time) {
    return _in(0x61e360b7, 0xe040d12e, ped, entity, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), time);
}
exports.taskGoStraightToCoordRelativeToEntity = taskGoStraightToCoordRelativeToEntity;
/**
 * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
 *
 * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
 *
 * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
 *
 * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
 *
 * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
 *
 * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
 *
 * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
 *
 * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
 *
 * Example:
 *
 * enum AimFlag
 * {
 * AimAtFocusLocation,
 * AimAtGoToLocation
 * };
 *
 * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
 *
 * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
 *
 * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
 *
 * // 1st example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f  -- [[run]] , true  -- [[shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtGoToLocation, -957453492  -- [[FullAuto pattern]] );
 *
 * // 2nd example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f  -- [[walk]] , false  -- [[don't shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtFocusLocation, -957453492  -- [[FullAuto pattern]] );
 *
 *
 * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
 *
 * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
 * @param pedHandle
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param focusLocationX
 * @param focusLocationY
 * @param focusLocationZ
 * @param speed
 * @param shootAtEnemies
 * @param distanceToStopAt
 * @param noRoadsDistance
 * @param useNavMesh
 * @param navFlags
 * @param taskFlags
 * @param firingPattern
 */
function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern) {
    return _in(0xa5554780, 0x1eb331fc, pedHandle, _fv(goToLocationX), _fv(goToLocationY), _fv(goToLocationZ), _fv(focusLocationX), _fv(focusLocationY), _fv(focusLocationZ), _fv(speed), shootAtEnemies, _fv(distanceToStopAt), _fv(noRoadsDistance), useNavMesh, navFlags, taskFlags, _ch(firingPattern));
}
exports.taskGoToCoordAndAimAtHatedEntitiesNearCoord = taskGoToCoordAndAimAtHatedEntitiesNearCoord;
/**
 * example from fm_mission_controller
 *
 * TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
 *
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param moveBlendRatio
 * @param vehicle
 * @param useLongRangeVehiclePathing
 * @param drivingFlags
 * @param maxRangeToShootTargets
 */
function taskGoToCoordAnyMeans(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets) {
    return _in(0x5bc448cb, 0x78fa3e88, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), vehicle, useLongRangeVehiclePathing, drivingFlags, _fv(maxRangeToShootTargets));
}
exports.taskGoToCoordAnyMeans = taskGoToCoordAnyMeans;
function taskGoToCoordAnyMeansExtraParams(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS) {
    return _in(0x1dd45f9e, 0xcfdb1bc9, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), vehicle, useLongRangeVehiclePathing, drivingFlags, _fv(maxRangeToShootTargets), _fv(extraVehToTargetDistToPreferVehicle), _fv(driveStraightLineDistance), extraFlags, _fv(warpTimerMS));
}
exports.taskGoToCoordAnyMeansExtraParams = taskGoToCoordAnyMeansExtraParams;
function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist) {
    return _in(0xb8ecd61f, 0x531a7b02, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), vehicle, useLongRangeVehiclePathing, drivingFlags, _fv(maxRangeToShootTargets), _fv(extraVehToTargetDistToPreferVehicle), _fv(driveStraightLineDistance), extraFlags, _fv(cruiseSpeed), _fv(targetArriveDist));
}
exports.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed = taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed;
/**
 * movement_speed: mostly 2f, but also 1/1.2f, etc.
 * p8: always false
 * p9: 2f
 * p10: 0.5f
 * p11: true
 * p12: 0 / 512 / 513, etc.
 * p13: 0
 * firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param aimAtX
 * @param aimAtY
 * @param aimAtZ
 * @param moveBlendRatio
 * @param shoot
 * @param targetRadius
 * @param slowDistance
 * @param useNavMesh
 * @param navFlags
 * @param instantBlendToAim
 * @param firingPattern
 */
function taskGoToCoordWhileAimingAtCoord(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern) {
    return _in(0x11315ab3, 0x385b8ac0, ped, _fv(x), _fv(y), _fv(z), _fv(aimAtX), _fv(aimAtY), _fv(aimAtZ), _fv(moveBlendRatio), shoot, _fv(targetRadius), _fv(slowDistance), useNavMesh, navFlags, instantBlendToAim, _ch(firingPattern));
}
exports.taskGoToCoordWhileAimingAtCoord = taskGoToCoordWhileAimingAtCoord;
function taskGoToCoordWhileAimingAtEntity(ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time) {
    return _in(0xb2a16444, 0xead9ae47, ped, _fv(x), _fv(y), _fv(z), aimAtID, _fv(moveBlendRatio), shoot, _fv(targetRadius), _fv(slowDistance), useNavMesh, navFlags, instantBlendToAim, _ch(firingPattern), time);
}
exports.taskGoToCoordWhileAimingAtEntity = taskGoToCoordWhileAimingAtEntity;
/**
 * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
 *
 * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
 *
 * Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
 *
 * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
 *
 * enum EGOTO_ENTITY_SCRIPT_FLAGS
 * {
 * EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
 * };
 * @param entity
 * @param target
 * @param duration
 * @param distance
 * @param moveBlendRatio
 * @param slowDownDistance
 * @param flags
 */
function taskGoToEntity(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags) {
    return _in(0x6a071245, 0xeb0d1882, entity, target, duration, _fv(distance), _fv(moveBlendRatio), _fv(slowDownDistance), flags);
}
exports.taskGoToEntity = taskGoToEntity;
function taskGoToEntityWhileAimingAtCoord(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern) {
    return _in(0x04701832, 0xb739dce5, ped, entity, _fv(aimX), _fv(aimY), _fv(aimZ), _fv(moveBlendRatio), shoot, _fv(targetRadius), _fv(slowDistance), useNavMesh, instantBlendToAim, _ch(firingPattern));
}
exports.taskGoToEntityWhileAimingAtCoord = taskGoToEntityWhileAimingAtCoord;
/**
 * shootatEntity:
 * If true, peds will shoot at Entity till it is dead.
 * If false, peds will just walk till they reach the entity and will cease shooting.
 * @param ped
 * @param entityToWalkTo
 * @param entityToAimAt
 * @param speed
 * @param shootatEntity
 * @param targetRadius
 * @param slowDistance
 * @param useNavMesh
 * @param instantBlendToAim
 * @param firingPattern
 */
function taskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern) {
    return _in(0x97465886, 0xd35210e9, ped, entityToWalkTo, entityToAimAt, _fv(speed), shootatEntity, _fv(targetRadius), _fv(slowDistance), useNavMesh, instantBlendToAim, _ch(firingPattern));
}
exports.taskGoToEntityWhileAimingAtEntity = taskGoToEntityWhileAimingAtEntity;
/**
 * eg
 *
 * TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
 *
 * ped = Ped you want to perform this task.
 * target = the Entity they should aim at.
 * distanceToStopAt = distance from the target, where the ped should stop to aim.
 * StartAimingDist = distance where the ped should start to aim.
 * @param ped
 * @param target
 * @param distanceToStopAt
 * @param StartAimingDist
 */
function taskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist) {
    return _in(0xa9da48fa, 0xb8a76c12, ped, target, _fv(distanceToStopAt), _fv(StartAimingDist));
}
exports.taskGotoEntityAiming = taskGotoEntityAiming;
/**
 * enum ESEEK_ENTITY_OFFSET_FLAGS
 * {
 * ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
 * ESEEK_KEEP_TO_PAVEMENTS = 0x02
 * };
 * @param ped
 * @param entity
 * @param time
 * @param seekRadius
 * @param seekAngleDeg
 * @param moveBlendRatio
 * @param gotoEntityOffsetFlags
 */
function taskGotoEntityOffset(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags) {
    return _in(0xe39b4ff4, 0xfdebde27, ped, entity, time, _fv(seekRadius), _fv(seekAngleDeg), _fv(moveBlendRatio), gotoEntityOffsetFlags);
}
exports.taskGotoEntityOffset = taskGotoEntityOffset;
function taskGotoEntityOffsetXy(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags) {
    return _in(0x338e7ef5, 0x2b6095a9, ped, entity, duration, _fv(targetRadius), _fv(offsetX), _fv(offsetY), _fv(moveBlendRatio), gotoEntityOffsetFlags);
}
exports.taskGotoEntityOffsetXy = taskGotoEntityOffsetXy;
function taskGuardAssignedDefensiveArea(ped, x, y, z, heading, maxPatrolProximity, timer) {
    return _in(0xd2a207ee, 0xbdf9889b, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(maxPatrolProximity), timer);
}
exports.taskGuardAssignedDefensiveArea = taskGuardAssignedDefensiveArea;
/**
 * From re_prisonvanbreak:
 *
 * TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
 * @param ped
 * @param maxPatrolProximity
 * @param defensiveAreaRadius
 * @param setDefensiveArea
 */
function taskGuardCurrentPosition(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea) {
    return _in(0x4a58a47a, 0x72e3fcb4, ped, _fv(maxPatrolProximity), _fv(defensiveAreaRadius), setDefensiveArea);
}
exports.taskGuardCurrentPosition = taskGuardCurrentPosition;
function taskGuardSphereDefensiveArea(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius) {
    return _in(0xc946fe14, 0xbe0eb5e2, ped, _fv(defendPositionX), _fv(defendPositionY), _fv(defendPositionZ), _fv(heading), _fv(maxPatrolProximity), time, _fv(x), _fv(y), _fv(z), _fv(defensiveAreaRadius));
}
exports.taskGuardSphereDefensiveArea = taskGuardSphereDefensiveArea;
/**
 * In the scripts, p3 was always -1.
 *
 * p3 seems to be duration or timeout of turn animation.
 * Also facingPed can be 0 or -1 so ped will just raise hands up.
 * @param ped
 * @param duration
 * @param facingPed
 * @param timeToFacePed
 * @param flags
 */
function taskHandsUp(ped, duration, facingPed, timeToFacePed, flags) {
    return _in(0xf2eab319, 0x79a7f910, ped, duration, facingPed, timeToFacePed, flags);
}
exports.taskHandsUp = taskHandsUp;
/**
 * Ped pilot should be in a heli.
 * EntityToFollow can be a vehicle or Ped.
 *
 * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
 *
 *
 * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
 * @param pilot
 * @param entityToFollow
 * @param x
 * @param y
 * @param z
 */
function taskHeliChase(pilot, entityToFollow, x, y, z) {
    return _in(0xac83b1db, 0x38d0ada0, pilot, entityToFollow, _fv(x), _fv(y), _fv(z));
}
exports.taskHeliChase = taskHeliChase;
function taskHeliEscortHeli(pilot, heli1, heli2, offsetX, offsetY, offsetZ) {
    return _in(0xb3855233, 0x25077210, pilot, heli1, heli2, _fv(offsetX), _fv(offsetY), _fv(offsetZ));
}
exports.taskHeliEscortHeli = taskHeliEscortHeli;
/**
 * Must have targetVehicle, targetPed, OR destination X/Y/Z set
 * Will follow targeted vehicle/ped, or fly to destination
 * Set whichever is not being used to 0
 *
 *
 * Mission mode type:
 * - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
 * - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
 * - 8: Makes the heli flee from the ped/vehicle/coordinate
 * - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
 * - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
 * - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
 * - 20: Makes the heli land when near target ped. It won't resume chasing.
 * - 21: Emulates a helicopter crash
 * - 23: makes the heli circle erratically around ped
 *
 *
 * Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
 * You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
 *
 * If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT.
 *
 * Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
 *
 * Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
 *
 * Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
 * 1: Forces heading to face E
 * 2: Unknown
 * 4: Tight circles around coordinate destination
 * 8: Unknown
 * 16: Circles around coordinate destination facing towards destination
 * 32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
 * 64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
 * 128: Unknown
 * 256: Unknown
 * 512: Unknown
 * 1024: Unknown
 * 2048: Reverses direction of circling (mission type 9) to clockwise
 * 4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
 * 8192: Unknown
 *
 * Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
 *
 * Notes updated by PNWParksFan, May 2021
 *
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param maxSpeed
 * @param radius
 * @param targetHeading
 * @param maxHeight
 * @param minHeight
 * @param slowDownDistance
 * @param behaviorFlags
 */
function taskHeliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags) {
    return _in(0xdad029e1, 0x87a2beb4, pilot, aircraft, targetVehicle, targetPed, _fv(destinationX), _fv(destinationY), _fv(destinationZ), missionFlag, _fv(maxSpeed), _fv(radius), _fv(targetHeading), maxHeight, minHeight, _fv(slowDownDistance), behaviorFlags);
}
exports.taskHeliMission = taskHeliMission;
/**
 * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
 *
 * v350: Ped ped, bool unused
 * v678: Ped ped, bool unused, bool flag1, bool flag2
 *
 * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
 * @param ped
 * @param usePlayerLaunchForce
 * @param doSuperJump
 * @param useFullSuperJumpForce
 */
function taskJump(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce) {
    return _in(0x0ae40861, 0x04e067b1, ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
}
exports.taskJump = taskJump;
/**
 * Flags are the same flags used in TASK_LEAVE_VEHICLE
 * @param ped
 * @param delayTime
 * @param flags
 */
function taskLeaveAnyVehicle(ped, delayTime, flags) {
    return _in(0x504d54df, 0x3f6f2247, ped, delayTime, flags);
}
exports.taskLeaveAnyVehicle = taskLeaveAnyVehicle;
/**
 * Flags from decompiled scripts:
 * 0 = normal exit and closes door.
 * 1 = normal exit and closes door.
 * 16 = teleports outside, door kept closed.
 * 64 = normal exit and closes door, maybe a bit slower animation than 0.
 * 256 = normal exit but does not close the door.
 * 4160 = ped is throwing himself out, even when the vehicle is still.
 * 262144 = ped moves to passenger seat first, then exits normally
 *
 * Others to be tried out: 320, 512, 131072.
 * @param ped
 * @param vehicle
 * @param flags
 */
function taskLeaveVehicle(ped, vehicle, flags) {
    return _in(0xd3dbce61, 0xa490be02, ped, vehicle, flags);
}
exports.taskLeaveVehicle = taskLeaveVehicle;
/**
 * enum eScriptLookatFlags
 * {
 * SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
 * SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
 * SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
 * SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
 * SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
 * SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
 * SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
 * SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
 * SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
 * SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
 * SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
 * SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
 * SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
 * SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes
 * SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
 * SLF_FROM_SCRIPT                = 32768, // internal use only
 * SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
 * };
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param flags
 * @param priority
 */
function taskLookAtCoord(entity, x, y, z, duration, flags, priority) {
    return _in(0x6fa46612, 0x594f7973, entity, _fv(x), _fv(y), _fv(z), duration, flags, priority);
}
exports.taskLookAtCoord = taskLookAtCoord;
/**
 * For flags, please refer to TASK_LOOK_AT_COORD.
 * @param ped
 * @param lookAt
 * @param duration
 * @param flags
 * @param priority
 */
function taskLookAtEntity(ped, lookAt, duration, flags, priority) {
    return _in(0x69f4be8c, 0x8cc4796c, ped, lookAt, duration, flags, priority);
}
exports.taskLookAtEntity = taskLookAtEntity;
/**
 * Example:
 * TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
 * @param ped
 * @param network
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotOrder
 * @param blendDuration
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
function taskMoveNetworkAdvancedByName(ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags) {
    return _in(0xd5b35bea, 0x41919acb, ped, _ts(network), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), rotOrder, _fv(blendDuration), allowOverrideCloneUpdate, _ts(animDict), flags);
}
exports.taskMoveNetworkAdvancedByName = taskMoveNetworkAdvancedByName;
function taskMoveNetworkAdvancedByNameWithInitParams(ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags) {
    return _in(0x29682e2c, 0xcf21e9b5, ped, _ts(network), _i, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), rotOrder, _fv(blendDuration), allowOverrideCloneUpdate, _ts(dictionary), flags);
}
exports.taskMoveNetworkAdvancedByNameWithInitParams = taskMoveNetworkAdvancedByNameWithInitParams;
/**
 * Example:
 * TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
 * @param ped
 * @param task
 * @param multiplier
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
function taskMoveNetworkByName(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags) {
    return _in(0x2d537ba1, 0x94896636, ped, _ts(task), _fv(multiplier), allowOverrideCloneUpdate, _ts(animDict), flags);
}
exports.taskMoveNetworkByName = taskMoveNetworkByName;
/**
 * Used only once in the scripts (am_mp_nightclub)
 * @param ped
 * @param network
 * @param initialParameters
 * @param blendDuration
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
function taskMoveNetworkByNameWithInitParams(ped, network, blendDuration, allowOverrideCloneUpdate, animDict, flags) {
    return _in(0x3d45b0b3, 0x55c5e0c9, ped, _ts(network), _i, _fv(blendDuration), allowOverrideCloneUpdate, _ts(animDict), flags);
}
exports.taskMoveNetworkByNameWithInitParams = taskMoveNetworkByNameWithInitParams;
/**
 * The given ped will try to open the nearest door to 'seat'.
 * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
 * @param ped
 * @param vehicle
 * @param timeOut
 * @param seat
 * @param speed
 */
function taskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed) {
    return _in(0x965791a9, 0xa488a062, ped, vehicle, timeOut, seat, _fv(speed));
}
exports.taskOpenVehicleDoor = taskOpenVehicleDoor;
/**
 * Second parameter is unused.
 *
 * second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
 * @param ped
 * @param giveParachuteItem
 * @param instant
 */
function taskParachute(ped, giveParachuteItem, instant) {
    return _in(0xd2f1c53c, 0x97ee81ab, ped, giveParachuteItem, instant);
}
exports.taskParachute = taskParachute;
/**
 * makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
 * @param ped
 * @param x
 * @param y
 * @param z
 */
function taskParachuteToTarget(ped, x, y, z) {
    return _in(0xb33e291a, 0xfa6bd03a, ped, _fv(x), _fv(y), _fv(z));
}
exports.taskParachuteToTarget = taskParachuteToTarget;
/**
 * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
 *
 * "miss_Tower_01" (this went from 01 - 10)
 * "miss_Ass0" (0, 4, 6, 3)
 * "MISS_PATROL_8"
 *
 * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
 *
 *
 * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
 * From the scripts
 *
 * TASK::OPEN_PATROL_ROUTE("miss_Ass0");
 * TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0 -- [[3]] ], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1 -- [[3]] ], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2 -- [[3]] ], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_LINK(0, 1);
 * TASK::ADD_PATROL_ROUTE_LINK(1, 2);
 * TASK::ADD_PATROL_ROUTE_LINK(2, 0);
 * TASK::CLOSE_PATROL_ROUTE();
 * TASK::CREATE_PATROL_ROUTE();
 *
 *
 * @param ped
 * @param patrolRouteName
 * @param alertState
 * @param canChatToPeds
 * @param useHeadLookAt
 */
function taskPatrol(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt) {
    return _in(0xbda5df49, 0xd080fe4e, ped, _ts(patrolRouteName), alertState, canChatToPeds, useHeadLookAt);
}
exports.taskPatrol = taskPatrol;
/**
 * Stand still (?)
 * @param ped
 * @param ms
 */
function taskPause(ped, ms) {
    return _in(0xe73a266d, 0xb0ca9042, ped, ms);
}
exports.taskPause = taskPause;
function taskPedSlideToCoord(ped, x, y, z, heading, speed) {
    return _in(0xd04fe676, 0x5d990a06, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(speed));
}
exports.taskPedSlideToCoord = taskPedSlideToCoord;
function taskPedSlideToCoordHdgRate(ped, x, y, z, heading, speed, headingChangeRate) {
    return _in(0x5a4a6a6d, 0x3dc64f52, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(speed), _fv(headingChangeRate));
}
exports.taskPedSlideToCoordHdgRate = taskPedSlideToCoordHdgRate;
function taskPerformSequence(ped, taskSequenceId) {
    return _in(0x5aba3986, 0xd90d8a3b, ped, taskSequenceId);
}
exports.taskPerformSequence = taskPerformSequence;
function taskPerformSequenceFromProgress(ped, taskIndex, progress1, progress2) {
    return _in(0x89221b16, 0x730234f0, ped, taskIndex, progress1, progress2);
}
exports.taskPerformSequenceFromProgress = taskPerformSequenceFromProgress;
function taskPerformSequenceLocally(ped, taskSequenceId) {
    return _in(0x8c33220c, 0x8d78ca0d, ped, taskSequenceId);
}
exports.taskPerformSequenceLocally = taskPerformSequenceLocally;
function taskPlaneChase(pilot, entityToFollow, x, y, z) {
    return _in(0x2d2386f2, 0x73ff7a25, pilot, entityToFollow, _fv(x), _fv(y), _fv(z));
}
exports.taskPlaneChase = taskPlaneChase;
function taskPlaneGotoPreciseVtol(ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot) {
    return _in(0xf7f9dcca, 0x89e7505b, ped, vehicle, _fv(x), _fv(y), _fv(z), flightHeight, minHeightAboveTerrain, useDesiredOrientation, _fv(desiredOrientation), autopilot);
}
exports.taskPlaneGotoPreciseVtol = taskPlaneGotoPreciseVtol;
function taskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
    return _in(0xbf19721f, 0xa34d32c0, pilot, plane, _fv(runwayStartX), _fv(runwayStartY), _fv(runwayStartZ), _fv(runwayEndX), _fv(runwayEndY), _fv(runwayEndZ));
}
exports.taskPlaneLand = taskPlaneLand;
/**
 * EXAMPLE USAGE:
 *
 * Fly around target (Precautiously, keeps high altitude):
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
 *
 * Fly around target (Dangerously, keeps VERY low altitude):
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
 *
 * Fly directly into target:
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
 *
 * EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
 *
 * 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
 * Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
 *
 * VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
 *
 * 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
 * 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
 * 300+ =  Vehicle behaves entirely like a normal gameplay plane.
 *
 * 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
 *
 * Scenario: Destination is an Entity on ground level, wide open field
 * -5000 = Pilot kamikazes directly into Entity
 * -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
 * -200 = Pilot flies lower than average around Entity.
 * 0 = Pilot flies around Entity, normal altitude
 * 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
 *
 * -- Valid mission types found in the exe: --
 *
 * 0 = None
 * 1 = Unk
 * 2 = CTaskVehicleRam
 * 3 = CTaskVehicleBlock
 * 4 = CTaskVehicleGoToPlane
 * 5 = CTaskVehicleStop
 * 6 = CTaskVehicleAttack
 * 7 = CTaskVehicleFollow
 * 8 = CTaskVehicleFleeAirborne
 * 9= CTaskVehicleCircle
 * 10 = CTaskVehicleEscort
 * 15 = CTaskVehicleFollowRecording
 * 16 = CTaskVehiclePoliceBehaviour
 * 17 = CTaskVehicleCrash
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param angularDrag
 * @param targetReached
 * @param targetHeading
 * @param maxZ
 * @param minZ
 * @param precise
 */
function taskPlaneMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise) {
    return _in(0x23703cd1, 0x54e83b88, pilot, aircraft, targetVehicle, targetPed, _fv(destinationX), _fv(destinationY), _fv(destinationZ), missionFlag, _fv(angularDrag), _fv(targetReached), _fv(targetHeading), _fv(maxZ), _fv(minZ), precise);
}
exports.taskPlaneMission = taskPlaneMission;
function taskPlaneTaxi(pilot, aircraft, x, y, z, cruiseSpeed, targetReached) {
    return _in(0x92c360b5, 0xf15d2302, pilot, aircraft, _fv(x), _fv(y), _fv(z), _fv(cruiseSpeed), _fv(targetReached));
}
exports.taskPlaneTaxi = taskPlaneTaxi;
function taskPlantBomb(ped, x, y, z, heading) {
    return _in(0x965fec69, 0x1d55e9bf, ped, _fv(x), _fv(y), _fv(z), _fv(heading));
}
exports.taskPlantBomb = taskPlantBomb;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * float speed > normal speed is 8.0f
 * ----------------------
 *
 * float speedMultiplier > multiply the playback speed
 * ----------------------
 *
 * int duration: time in millisecond
 * ----------------------
 * -1 _ _ _ _ _ _ _> Default (see flag)
 * 0 _ _ _ _ _ _ _ > Not play at all
 * Small value _ _ > Slow down animation speed
 * Other _ _ _ _ _ > freeze player control until specific time (ms) has
 * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
 * _ _ _ _ _ _ _ _ _ controllable.)
 *
 * int flag:
 * ----------------------
 * enum eAnimationFlags
 * {
 * ANIM_FLAG_NORMAL = 0,
 * ANIM_FLAG_REPEAT = 1,
 * ANIM_FLAG_STOP_LAST_FRAME = 2,
 * ANIM_FLAG_UPPERBODY = 16,
 * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
 * ANIM_FLAG_CANCELABLE = 120,
 * };
 * Odd number : loop infinitely
 * Even number : Freeze at last frame
 * Multiple of 4: Freeze at last frame but controllable
 *
 * 01 to 15 > Full body
 * 10 to 31 > Upper body
 * 32 to 47 > Full body > Controllable
 * 48 to 63 > Upper body > Controllable
 * ...
 * 001 to 255 > Normal
 * 256 to 511 > Garbled
 * ...
 *
 * playbackRate:
 *
 * values are between 0.0 and 1.0
 *
 *
 * lockX:
 *
 * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
 * > 1 for mini@sprunk
 *
 *
 * lockY:
 *
 * 0 in most cases
 * 1 for missfam5_yoga, missfra1mcs_2_crew_react
 *
 *
 * lockZ:
 *
 * 0 for single player
 * Can be 1 but only for MP
 * @param ped
 * @param animDictionary
 * @param animationName
 * @param blendInSpeed
 * @param blendOutSpeed
 * @param duration
 * @param flag
 * @param playbackRate
 * @param lockX
 * @param lockY
 * @param lockZ
 */
function taskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
    return _in(0xea47fe37, 0x19165b94, ped, _ts(animDictionary), _ts(animationName), _fv(blendInSpeed), _fv(blendOutSpeed), duration, flag, _fv(playbackRate), lockX, lockY, lockZ);
}
exports.taskPlayAnim = taskPlayAnim;
/**
 * It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param animEnterSpeed
 * @param animExitSpeed
 * @param duration
 * @param flag
 * @param animTime
 * @param rotOrder
 * @param ikFlags
 */
function taskPlayAnimAdvanced(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags) {
    return _in(0x83cdb10e, 0xa29b370b, ped, _ts(animDict), _ts(animName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(animEnterSpeed), _fv(animExitSpeed), duration, flag, _fv(animTime), rotOrder, ikFlags);
}
exports.taskPlayAnimAdvanced = taskPlayAnimAdvanced;
/**
 * Example from the scripts:
 * TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
 *
 * =========================================================
 * ^^ No offense, but Idk how that would really help anyone.
 *
 * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
 *
 * Known boneMaskTypes'
 * "BONEMASK_HEADONLY"
 * "BONEMASK_HEAD_NECK_AND_ARMS"
 * "BONEMASK_HEAD_NECK_AND_L_ARM"
 * "BONEMASK_HEAD_NECK_AND_R_ARM"
 *
 * p4 known args - 0.0f, 0.5f, 0.25f
 * p5 known args - 0.0f, 0.25f
 * p6 known args - 1 if a global if check is passed.
 * p7 known args - 1 if a global if check is passed.
 *
 * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
 * =========================================================
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animation
 * @param boneMaskType
 * @param blendInDuration
 * @param blendOutDuration
 * @param isLooping
 * @param holdLastFrame
 */
function taskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame) {
    return _in(0x8fbb6758, 0xb3b3e9ec, ped, _ts(animDict), _ts(animation), _ts(boneMaskType), _fv(blendInDuration), _fv(blendOutDuration), isLooping, holdLastFrame);
}
exports.taskPlayPhoneGestureAnimation = taskPlayPhoneGestureAnimation;
function taskPutPedDirectlyIntoCover(ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry) {
    return _in(0x4172393e, 0x6be1fece, ped, _fv(x), _fv(y), _fv(z), time, allowPeekingAndFiring, _fv(blendInDuration), forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
}
exports.taskPutPedDirectlyIntoCover = taskPutPedDirectlyIntoCover;
/**
 * from armenian3.c4
 *
 * TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
 *
 * @param ped
 * @param meleeTarget
 * @param blendInDuration
 * @param timeInMelee
 * @param strafePhaseSync
 * @param aiCombatFlags
 */
function taskPutPedDirectlyIntoMelee(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags) {
    return _in(0x1c6cd14a, 0x876ffe39, ped, meleeTarget, _fv(blendInDuration), _fv(timeInMelee), _fv(strafePhaseSync), aiCombatFlags);
}
exports.taskPutPedDirectlyIntoMelee = taskPutPedDirectlyIntoMelee;
/**
 * Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
 * p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param minZ
 * @param ropeHandle
 * @param clipSet
 * @param p10
 */
function taskRappelDownWallUsingClipsetOverride(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10) {
    return _in(0xeaf66acd, 0xdc794793, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(minZ), ropeHandle, _ts(clipSet), p10);
}
exports.taskRappelDownWallUsingClipsetOverride = taskRappelDownWallUsingClipsetOverride;
/**
 * minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
 *
 * Only appears twice in the scripts.
 *
 * TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
 * TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);
 * @param ped
 * @param minHeightAboveGround
 */
function taskRappelFromHeli(ped, minHeightAboveGround) {
    return _in(0x09693b03, 0x12f91649, ped, _fv(minHeightAboveGround));
}
exports.taskRappelFromHeli = taskRappelFromHeli;
function taskReactAndFleePed(ped, fleeTarget) {
    return _in(0x72c89646, 0x4915d1b1, ped, fleeTarget);
}
exports.taskReactAndFleePed = taskReactAndFleePed;
/**
 * The 2nd param (drawWeapon) is not implemented.
 *
 * -----------------------------------------------------------------------
 *
 * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
 *
 * if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
 * TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
 * }
 * @param ped
 * @param drawWeapon
 */
function taskReloadWeapon(ped, drawWeapon) {
    return _in(0x62d2916f, 0x56b9cd2d, ped, drawWeapon);
}
exports.taskReloadWeapon = taskReloadWeapon;
/**
 * From fm_mission_controller.c:
 * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
 * vVar28 = {0.094f, 0.02f, -0.005f};
 * vVar29 = {-92.24f, 63.64f, 150.24f};
 * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
 * set_entity_lod_dist(net_to_ent(uVar30), 500);
 * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
 * Var31.imm_4 = 1065353216;
 * Var31.imm_5 = 1065353216;
 * Var31.imm_9 = 1065353216;
 * Var31.imm_10 = 1065353216;
 * Var31.imm_14 = 1065353216;
 * Var31.imm_15 = 1065353216;
 * Var31.imm_17 = 1040187392;
 * Var31.imm_18 = 1040187392;
 * Var31.imm_19 = -1;
 * Var32.imm_4 = 1065353216;
 * Var32.imm_5 = 1065353216;
 * Var32.imm_9 = 1065353216;
 * Var32.imm_10 = 1065353216;
 * Var32.imm_14 = 1065353216;
 * Var32.imm_15 = 1065353216;
 * Var32.imm_17 = 1040187392;
 * Var32.imm_18 = 1040187392;
 * Var32.imm_19 = -1;
 * Var31 = 1;
 * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
 * Var31.imm_2 = "idle";
 * Var31.imm_20 = 1048633;
 * Var31.imm_4 = 0.5f;
 * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
 * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
 * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
 * remove_anim_dict("anim@heists@biolab@");
 * @param ped
 * @param priorityLowData
 * @param priorityMidData
 * @param priorityHighData
 * @param blendInDelta
 * @param blendOutDelta
 */
function taskScriptedAnimation(ped, blendInDelta, blendOutDelta) {
    const [priorityLowData_out, priorityMidData_out, priorityHighData_out] = _in(0x126ef75f, 0x1e17abe5, ped, _i, _i, _i, _fv(blendInDelta), _fv(blendOutDelta));
    return [priorityLowData_out, priorityMidData_out, priorityHighData_out];
}
exports.taskScriptedAnimation = taskScriptedAnimation;
function taskSeekCoverFromPed(ped, target, duration, allowPeekingAndFiring) {
    return _in(0x84d32b3b, 0xec531324, ped, target, duration, allowPeekingAndFiring);
}
exports.taskSeekCoverFromPed = taskSeekCoverFromPed;
function taskSeekCoverFromPos(ped, x, y, z, duration, allowPeekingAndFiring) {
    return _in(0x75ac2b60, 0x386d89f2, ped, _fv(x), _fv(y), _fv(z), duration, allowPeekingAndFiring);
}
exports.taskSeekCoverFromPos = taskSeekCoverFromPos;
/**
 * p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
 *
 * from michael2:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
 *
 *
 * appears to be shorter variation
 * from michael3:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param timeout
 * @param shortRoute
 */
function taskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute) {
    return _in(0x39246a69, 0x58ef072c, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), timeout, shortRoute);
}
exports.taskSeekCoverToCoords = taskSeekCoverToCoords;
/**
 * p5 is always -1
 * @param ped
 * @param coverpoint
 * @param x
 * @param y
 * @param z
 * @param time
 * @param allowPeekingAndFiring
 */
function taskSeekCoverToCoverPoint(ped, coverpoint, x, y, z, time, allowPeekingAndFiring) {
    return _in(0xd43d95c7, 0xa869447f, ped, coverpoint, _fv(x), _fv(y), _fv(z), time, allowPeekingAndFiring);
}
exports.taskSeekCoverToCoverPoint = taskSeekCoverToCoverPoint;
/**
 * I cant believe I have to define this, this is one of the best natives.
 *
 * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
 *
 * Since it is a task, every time the native is called the ped will stop for a moment.
 * @param ped
 * @param toggle
 */
function taskSetBlockingOfNonTemporaryEvents(ped, toggle) {
    return _in(0x90d21561, 0x98831d69, ped, toggle);
}
exports.taskSetBlockingOfNonTemporaryEvents = taskSetBlockingOfNonTemporaryEvents;
/**
 * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
 * @param ped
 * @param decisionMakerId
 */
function taskSetDecisionMaker(ped, decisionMakerId) {
    return _in(0xeb8517dd, 0xa73720da, ped, _ch(decisionMakerId));
}
exports.taskSetDecisionMaker = taskSetDecisionMaker;
function taskSetSphereDefensiveArea(ped, x, y, z, radius) {
    return _in(0x933c0651, 0x8b52a9a4, ped, _fv(x), _fv(y), _fv(z), _fv(radius));
}
exports.taskSetSphereDefensiveArea = taskSetSphereDefensiveArea;
function taskShockingEventReact(ped, eventHandle) {
    return _in(0x452419cb, 0xd838065b, ped, eventHandle);
}
exports.taskShockingEventReact = taskShockingEventReact;
/**
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param firingPattern
 */
function taskShootAtCoord(ped, x, y, z, duration, firingPattern) {
    return _in(0x46a6cc01, 0xe0826106, ped, _fv(x), _fv(y), _fv(z), duration, _ch(firingPattern));
}
exports.taskShootAtCoord = taskShootAtCoord;
/**
 * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
 * Entity aimedentity;
 * Player player = PLAYER::PLAYER_ID();
 * PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
 *
 * //bg is an array of peds
 * TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
 *
 * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
 *
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * @param entity
 * @param target
 * @param duration
 * @param firingPattern
 */
function taskShootAtEntity(entity, target, duration, firingPattern) {
    return _in(0x08da95e8, 0x298ae772, entity, target, duration, _ch(firingPattern));
}
exports.taskShootAtEntity = taskShootAtEntity;
/**
 * Makes the specified ped shuffle to the next vehicle seat.
 * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
 * @param ped
 * @param vehicle
 * @param useAlternateShuffle
 */
function taskShuffleToNextVehicleSeat(ped, vehicle, useAlternateShuffle) {
    return _in(0x7aa80209, 0xbda643eb, ped, vehicle, useAlternateShuffle);
}
exports.taskShuffleToNextVehicleSeat = taskShuffleToNextVehicleSeat;
function taskSkyDive(ped, instant) {
    return _in(0x601736cf, 0xe536b0a0, ped, instant);
}
exports.taskSkyDive = taskSkyDive;
/**
 * Makes the specified ped flee the specified distance from the specified position.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param time
 * @param preferPavements
 * @param quitIfOutOfRange
 */
function taskSmartFleeCoord(ped, x, y, z, distance, time, preferPavements, quitIfOutOfRange) {
    return _in(0x94587f17, 0xe9c365d5, ped, _fv(x), _fv(y), _fv(z), _fv(distance), time, preferPavements, quitIfOutOfRange);
}
exports.taskSmartFleeCoord = taskSmartFleeCoord;
/**
 * Makes a ped run away from another ped (fleeTarget).
 *
 * distance = ped will flee this distance.
 * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
 * @param ped
 * @param fleeTarget
 * @param safeDistance
 * @param fleeTime
 * @param preferPavements
 * @param updateToNearestHatedPed
 */
function taskSmartFleePed(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed) {
    return _in(0x22b0d0e3, 0x7ccb840d, ped, fleeTarget, _fv(safeDistance), fleeTime, preferPavements, updateToNearestHatedPed);
}
exports.taskSmartFleePed = taskSmartFleePed;
/**
 * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param scenarioName
 */
function taskStandGuard(ped, x, y, z, heading, scenarioName) {
    return _in(0xae032f8b, 0xba959e90, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _ts(scenarioName));
}
exports.taskStandGuard = taskStandGuard;
/**
 * Makes the specified ped stand still for (time) milliseconds.
 * @param ped
 * @param time
 */
function taskStandStill(ped, time) {
    return _in(0x919be13e, 0xed931959, ped, time);
}
exports.taskStandStill = taskStandStill;
/**
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 *
 * Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
 * ---------------
 * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
 *
 * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
 *
 * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
 *
 * I have no idea what the last 3 parameters are, but I'll try to find out.
 *
 * -going on the last 3 parameters, they appear to always be "0, 0, 1"
 *
 * p6 -1 also used in scrips
 *
 * p7 used for sitting scenarios
 *
 * p8 teleports ped to position
 * @param ped
 * @param scenarioName
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param duration
 * @param sittingScenario
 * @param teleport
 */
function taskStartScenarioAtPosition(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport) {
    return _in(0xfa4efc79, 0xf69d4f07, ped, _ts(scenarioName), _fv(x), _fv(y), _fv(z), _fv(heading), duration, sittingScenario, teleport);
}
exports.taskStartScenarioAtPosition = taskStartScenarioAtPosition;
/**
 * Plays a scenario on a Ped at their current location.
 *
 * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
 * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
 *
 * ----
 *
 * From "am_hold_up.ysc.c4" at line 339:
 *
 * TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
 *
 * I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
 * WORLD_HUMAN_SMOKING
 * WORLD_HUMAN_HANG_OUT_STREET
 * WORLD_HUMAN_STAND_MOBILE
 *
 * This makes sense, as these are what I commonly see when going by a liquor store.
 * -------------------------
 * List of scenarioNames: https://pastebin.com/6mrYTdQv
 * (^ Thank you so fucking much for this)
 *
 * Also these:
 * WORLD_FISH_FLEE
 * DRIVE
 * WORLD_HUMAN_HIKER
 * WORLD_VEHICLE_ATTRACTOR
 * WORLD_VEHICLE_BICYCLE_MOUNTAIN
 * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
 * WORLD_VEHICLE_BIKER
 * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
 * WORLD_VEHICLE_CONSTRUCTION_SOLO
 * WORLD_VEHICLE_DRIVE_PASSENGERS
 * WORLD_VEHICLE_DRIVE_SOLO
 * WORLD_VEHICLE_EMPTY
 * WORLD_VEHICLE_PARK_PARALLEL
 * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
 * WORLD_VEHICLE_POLICE_BIKE
 * WORLD_VEHICLE_POLICE_CAR
 * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
 * WORLD_VEHICLE_SALTON_DIRT_BIKE
 * WORLD_VEHICLE_TRUCK_LOGS
 *
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * @param ped
 * @param scenarioName
 * @param unkDelay
 * @param playEnterAnim
 */
function taskStartScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim) {
    return _in(0x142a0242, 0x5ff02bd9, ped, _ts(scenarioName), unkDelay, playEnterAnim);
}
exports.taskStartScenarioInPlace = taskStartScenarioInPlace;
/**
 * Makes the ped run to take cover
 * @param ped
 */
function taskStayInCover(ped) {
    return _in(0xe5da8615, 0xa6180789, ped);
}
exports.taskStayInCover = taskStayInCover;
/**
 * known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
 * @param killer
 * @param target
 * @param stealthKillActionResultHash
 * @param desiredMoveBlendRatio
 * @param stealthFlags
 */
function taskStealthKill(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags) {
    return _in(0xaa5dc055, 0x79d60bd9, killer, target, _ch(stealthKillActionResultHash), _fv(desiredMoveBlendRatio), stealthFlags);
}
exports.taskStealthKill = taskStealthKill;
function taskStopPhoneGestureAnimation(ped, blendOutOverride) {
    return _in(0x3fa00d4f, 0x4641bfae, ped, _fv(blendOutOverride));
}
exports.taskStopPhoneGestureAnimation = taskStopPhoneGestureAnimation;
/**
 * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
 *
 * p0 is always 0, p5 is always 1
 *
 * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
 *
 * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
 * @param ped
 * @param submarine
 * @param x
 * @param y
 * @param z
 * @param autopilot
 */
function taskSubmarineGotoAndStop(ped, submarine, x, y, z, autopilot) {
    return _in(0xc22b4057, 0x9a498ca4, ped, submarine, _fv(x), _fv(y), _fv(z), autopilot);
}
exports.taskSubmarineGotoAndStop = taskSubmarineGotoAndStop;
function taskSwapWeapon(ped, drawWeapon) {
    return _in(0xa21c5125, 0x5b205245, ped, drawWeapon);
}
exports.taskSwapWeapon = taskSwapWeapon;
/**
 * This function is called on peds in vehicles.
 *
 * anim: animation name
 * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
 * p5: no idea what it does but is usually -1
 * @param ped
 * @param animDict
 * @param lowAnimName
 * @param medAnimName
 * @param hiAnimName
 * @param runtime
 * @param targetEntity
 * @param turnRate
 * @param blendInDuration
 */
function taskSweepAimEntity(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration) {
    return _in(0x2047c021, 0x58d6405a, ped, _ts(animDict), _ts(lowAnimName), _ts(medAnimName), _ts(hiAnimName), runtime, targetEntity, _fv(turnRate), _fv(blendInDuration));
}
exports.taskSweepAimEntity = taskSweepAimEntity;
function taskSweepAimPosition(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration) {
    return _in(0x7afe8fdc, 0x10bc07d2, ped, _ts(animDict), _ts(lowAnimName), _ts(medAnimName), _ts(hiAnimName), runtime, _fv(x), _fv(y), _fv(z), _fv(turnRate), _fv(blendInDuration));
}
exports.taskSweepAimPosition = taskSweepAimPosition;
/**
 * TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param scene
 * @param animDictionary
 * @param animationName
 * @param blendIn
 * @param blendOut
 * @param flags
 * @param ragdollBlockingFlags
 * @param moverBlendDelta
 * @param ikFlags
 */
function taskSynchronizedScene(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags) {
    return _in(0xeea92914, 0x1f699854, ped, scene, _ts(animDictionary), _ts(animationName), _fv(blendIn), _fv(blendOut), flags, ragdollBlockingFlags, _fv(moverBlendDelta), ikFlags);
}
exports.taskSynchronizedScene = taskSynchronizedScene;
/**
 * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
 *
 * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
 * ---
 * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
 * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
 * ----------------------------------------------------
 * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param ignoreCollisionEntityIndex
 * @param createInvincibleProjectile
 */
function taskThrowProjectile(ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile) {
    return _in(0x7285951d, 0xbf6b5a51, ped, _fv(x), _fv(y), _fv(z), ignoreCollisionEntityIndex, createInvincibleProjectile);
}
exports.taskThrowProjectile = taskThrowProjectile;
/**
 * used in sequence task
 *
 * both parameters seems to be always 0
 * @param ped
 * @param toggleType
 */
function taskToggleDuck(ped, toggleType) {
    return _in(0xac96609b, 0x9995edf8, ped, toggleType);
}
exports.taskToggleDuck = taskToggleDuck;
/**
 * duration in milliseconds
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 */
function taskTurnPedToFaceCoord(ped, x, y, z, duration) {
    return _in(0x1dda930a, 0x0ac38571, ped, _fv(x), _fv(y), _fv(z), duration);
}
exports.taskTurnPedToFaceCoord = taskTurnPedToFaceCoord;
/**
 * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * @param ped
 * @param entity
 * @param duration
 */
function taskTurnPedToFaceEntity(ped, entity, duration) {
    return _in(0x5ad23d40, 0x115353ac, ped, entity, duration);
}
exports.taskTurnPedToFaceEntity = taskTurnPedToFaceEntity;
/**
 * Actually has 3 params, not 2.
 *
 * p0: Ped
 * p1: int (or bool?)
 * p2: int
 * @param ped
 * @param usePhone
 * @param desiredPhoneMode
 */
function taskUseMobilePhone(ped, usePhone, desiredPhoneMode) {
    return _in(0xbd2a8ec3, 0xaf4de7db, ped, usePhone, desiredPhoneMode);
}
exports.taskUseMobilePhone = taskUseMobilePhone;
function taskUseMobilePhoneTimed(ped, duration) {
    return _in(0x5ee02954, 0xa14c69db, ped, duration);
}
exports.taskUseMobilePhoneTimed = taskUseMobilePhoneTimed;
/**
 * p5 is always 0 in scripts
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param maxRange
 * @param timeToLeave
 */
function taskUseNearestScenarioChainToCoord(ped, x, y, z, maxRange, timeToLeave) {
    return _in(0x9fda1b3d, 0x7e7028b3, ped, _fv(x), _fv(y), _fv(z), _fv(maxRange), timeToLeave);
}
exports.taskUseNearestScenarioChainToCoord = taskUseNearestScenarioChainToCoord;
/**
 * p5 is always -1 or 0 in scripts
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param timeToLeave
 */
function taskUseNearestScenarioChainToCoordWarp(ped, x, y, z, radius, timeToLeave) {
    return _in(0x97a28e63, 0xf0ba5631, ped, _fv(x), _fv(y), _fv(z), _fv(radius), timeToLeave);
}
exports.taskUseNearestScenarioChainToCoordWarp = taskUseNearestScenarioChainToCoordWarp;
/**
 * Updated variables
 *
 * An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param duration
 */
function taskUseNearestScenarioToCoord(ped, x, y, z, distance, duration) {
    return _in(0x277f471b, 0xa9db000b, ped, _fv(x), _fv(y), _fv(z), _fv(distance), duration);
}
exports.taskUseNearestScenarioToCoord = taskUseNearestScenarioToCoord;
function taskUseNearestScenarioToCoordWarp(ped, x, y, z, radius, timeToLeave) {
    return _in(0x58e2e0f2, 0x3f6b76c3, ped, _fv(x), _fv(y), _fv(z), _fv(radius), timeToLeave);
}
exports.taskUseNearestScenarioToCoordWarp = taskUseNearestScenarioToCoordWarp;
function taskVehicleAimAtCoord(ped, x, y, z) {
    return _in(0x447c1e9e, 0xf844bc0f, ped, _fv(x), _fv(y), _fv(z));
}
exports.taskVehicleAimAtCoord = taskVehicleAimAtCoord;
function taskVehicleAimAtPed(ped, target) {
    return _in(0xe4188559, 0x2b08b097, ped, target);
}
exports.taskVehicleAimAtPed = taskVehicleAimAtPed;
/**
 * chases targetEnt fast and aggressively
 * --
 * Makes ped (needs to be in vehicle) chase targetEnt.
 * @param driver
 * @param targetEnt
 */
function taskVehicleChase(driver, targetEnt) {
    return _in(0x3c08a8e3, 0x0363b353, driver, targetEnt);
}
exports.taskVehicleChase = taskVehicleChase;
/**
 * info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p6
 * @param vehicleModel
 * @param drivingMode
 * @param stopRange
 * @param straightLineDistance
 */
function taskVehicleDriveToCoord(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance) {
    return _in(0xe2a2aa2f, 0x659d77a7, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), p6, _ch(vehicleModel), drivingMode, _fv(stopRange), _fv(straightLineDistance));
}
exports.taskVehicleDriveToCoord = taskVehicleDriveToCoord;
function taskVehicleDriveToCoordLongrange(ped, vehicle, x, y, z, speed, driveMode, stopRange) {
    return _in(0x158bb33f, 0x920d360c, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), driveMode, _fv(stopRange));
}
exports.taskVehicleDriveToCoordLongrange = taskVehicleDriveToCoordLongrange;
function taskVehicleDriveWander(ped, vehicle, speed, drivingStyle) {
    return _in(0x48014295, 0x9d337d00, ped, vehicle, _fv(speed), drivingStyle);
}
exports.taskVehicleDriveWander = taskVehicleDriveWander;
/**
 * Makes a ped follow the targetVehicle with <minDistance> in between.
 *
 * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
 *
 * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
 * -1 = behind
 * 0 = ahead
 * 1 = left
 * 2 = right
 * 3 = back left
 * 4 = back right
 *
 * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
 *
 * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param vehicle
 * @param targetVehicle
 * @param mode
 * @param speed
 * @param drivingStyle
 * @param minDistance
 * @param minHeightAboveTerrain
 * @param noRoadsDistance
 */
function taskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance) {
    return _in(0x0fa6e4b7, 0x5f302400, ped, vehicle, targetVehicle, mode, _fv(speed), drivingStyle, _fv(minDistance), minHeightAboveTerrain, _fv(noRoadsDistance));
}
exports.taskVehicleEscort = taskVehicleEscort;
/**
 * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
 *
 * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
 * @param driver
 * @param vehicle
 * @param targetEntity
 * @param speed
 * @param drivingStyle
 * @param minDistance
 */
function taskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance) {
    return _in(0xfc545a9f, 0x0626e3b6, driver, vehicle, targetEntity, _fv(speed), drivingStyle, minDistance);
}
exports.taskVehicleFollow = taskVehicleFollow;
/**
 *
 *
 * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
 * p3 = 786468
 * p4 = 0
 * p5 = 16
 * p6 = -1 (angle?)
 * p7/8/9 = usually v3.zero
 * p10 = bool (repeat?)
 * p11 = 1073741824
 *
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param ped
 * @param vehicle
 * @param WPRecording
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
function taskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) {
    return _in(0x3123faa6, 0xdb1cf7ed, ped, vehicle, _ts(WPRecording), p3, p4, p5, p6, _fv(p7), p8, _fv(p9));
}
exports.taskVehicleFollowWaypointRecording = taskVehicleFollowWaypointRecording;
/**
 * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
 *
 * WARNING:
 * A behaviorFlag value of 0 will result in a clunky, stupid driver!
 *
 * Recommended settings:
 * speed = 30.0f,
 * behaviorFlag = 156,
 * stoppingRange = 5.0f;
 *
 * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
 *
 * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
 *
 * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param behaviorFlag
 * @param stoppingRange
 */
function taskVehicleGotoNavmesh(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange) {
    return _in(0x195aeeb1, 0x3cefe2ee, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), behaviorFlag, _fv(stoppingRange));
}
exports.taskVehicleGotoNavmesh = taskVehicleGotoNavmesh;
/**
 * pilot, vehicle and altitude are rather self-explanatory.
 *
 * p4: is unused variable in the function.
 *
 * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
 *
 * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
 *
 * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
 *
 * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
 *
 * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
 * @param pilot
 * @param vehicle
 * @param entityToFollow
 * @param targetSpeed
 * @param drivingFlags
 * @param radius
 * @param altitude
 * @param heliFlags
 */
function taskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags) {
    return _in(0x1e09c320, 0x48fefd1c, pilot, vehicle, entityToFollow, _fv(targetSpeed), drivingFlags, _fv(radius), altitude, heliFlags);
}
exports.taskVehicleHeliProtect = taskVehicleHeliProtect;
/**
 * missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * @param driver
 * @param vehicle
 * @param vehicleTarget
 * @param missionType
 * @param cruiseSpeed
 * @param drivingStyle
 * @param targetReached
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
function taskVehicleMission(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic) {
    return _in(0x659427e0, 0xef36bcde, driver, vehicle, vehicleTarget, missionType, _fv(cruiseSpeed), drivingStyle, _fv(targetReached), _fv(straightLineDistance), DriveAgainstTraffic);
}
exports.taskVehicleMission = taskVehicleMission;
/**
 * See TASK_VEHICLE_MISSION
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param mission
 * @param cruiseSpeed
 * @param drivingStyle
 * @param targetReached
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
function taskVehicleMissionCoorsTarget(ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic) {
    return _in(0xf0af20aa, 0x7731f8c3, ped, vehicle, _fv(x), _fv(y), _fv(z), mission, _fv(cruiseSpeed), drivingStyle, _fv(targetReached), _fv(straightLineDistance), DriveAgainstTraffic);
}
exports.taskVehicleMissionCoorsTarget = taskVehicleMissionCoorsTarget;
/**
 * See TASK_VEHICLE_MISSION
 * @param ped
 * @param vehicle
 * @param pedTarget
 * @param missionType
 * @param maxSpeed
 * @param drivingStyle
 * @param minDistance
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
function taskVehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic) {
    return _in(0x9454528d, 0xf15d657a, ped, vehicle, pedTarget, missionType, _fv(maxSpeed), drivingStyle, _fv(minDistance), _fv(straightLineDistance), DriveAgainstTraffic);
}
exports.taskVehicleMissionPedTarget = taskVehicleMissionPedTarget;
/**
 * Modes:
 * 0 - ignore heading
 * 1 - park forward
 * 2 - park backwards
 *
 * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
 *
 * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param mode
 * @param radius
 * @param keepEngineOn
 */
function taskVehiclePark(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn) {
    return _in(0x0f3e34e9, 0x68ea374e, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(heading), mode, _fv(radius), keepEngineOn);
}
exports.taskVehiclePark = taskVehiclePark;
/**
 * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
 *
 * Here's how its used -
 *
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
 *
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0 -- [[1]] ], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
 *
 * FYI : Speedo is the name of van in which chop was put in the mission.
 * @param vehicle
 * @param animationSet
 * @param animationName
 */
function taskVehiclePlayAnim(vehicle, animationSet, animationName) {
    return _in(0x69f5c3bd, 0x0f3ebd89, vehicle, _ts(animationSet), _ts(animationName));
}
exports.taskVehiclePlayAnim = taskVehiclePlayAnim;
function taskVehicleShootAtCoord(ped, x, y, z, fireTolerance) {
    return _in(0x5190796e, 0xd39c9b6d, ped, _fv(x), _fv(y), _fv(z), _fv(fireTolerance));
}
exports.taskVehicleShootAtCoord = taskVehicleShootAtCoord;
function taskVehicleShootAtPed(ped, target, fireTolerance) {
    return _in(0x10ab107b, 0x887214d8, ped, target, _fv(fireTolerance));
}
exports.taskVehicleShootAtPed = taskVehicleShootAtPed;
/**
 * '1 - brake
 * '3 - brake + reverse
 * '4 - turn left 90 + braking
 * '5 - turn right 90 + braking
 * '6 - brake strong (handbrake?) until time ends
 * '7 - turn left + accelerate
 * '8 - turn right + accelerate
 * '9 - weak acceleration
 * '10 - turn left + restore wheel pos to center in the end
 * '11 - turn right + restore wheel pos to center in the end
 * '13 - turn left + go reverse
 * '14 - turn left + go reverse
 * '16 - crash the game after like 2 seconds :)
 * '17 - keep actual state, game crashed after few tries
 * '18 - game crash
 * '19 - strong brake + turn left/right
 * '20 - weak brake + turn left then turn right
 * '21 - weak brake + turn right then turn left
 * '22 - brake + reverse
 * '23 - accelerate fast
 * '24 - brake
 * '25 - brake turning left then when almost stopping it turns left more
 * '26 - brake turning right then when almost stopping it turns right more
 * '27 - brake until car stop or until time ends
 * '28 - brake + strong reverse acceleration
 * '30 - performs a burnout (brake until stop + brake and accelerate)
 * '31 - accelerate + handbrake
 * '32 - accelerate very strong
 *
 * Seems to be this:
 * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
 * @param driver
 * @param vehicle
 * @param action
 * @param time
 */
function taskVehicleTempAction(driver, vehicle, action, time) {
    return _in(0xc429dcee, 0xb339e129, driver, vehicle, action, time);
}
exports.taskVehicleTempAction = taskVehicleTempAction;
function taskWanderInArea(ped, x, y, z, radius, minimalLength, timeBetweenWalks) {
    return _in(0xe054346c, 0xa3a0f315, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(minimalLength), _fv(timeBetweenWalks));
}
exports.taskWanderInArea = taskWanderInArea;
function taskWanderSpecific(ped, conditionalAnimGroupStr, conditionalAnimStr, heading) {
    return _in(0x6919a2f1, 0x36426098, ped, _ts(conditionalAnimGroupStr), _ts(conditionalAnimStr), _fv(heading));
}
exports.taskWanderSpecific = taskWanderSpecific;
/**
 * Makes ped walk around the area.
 *
 * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
 * @param ped
 * @param heading
 * @param flags
 */
function taskWanderStandard(ped, heading, flags) {
    return _in(0xbb9ce077, 0x274f6a1b, ped, _fv(heading), flags);
}
exports.taskWanderStandard = taskWanderStandard;
function taskWarpPedDirectlyIntoCover(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier) {
    return _in(0x6e01e9e8, 0xd89f8276, ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
}
exports.taskWarpPedDirectlyIntoCover = taskWarpPedDirectlyIntoCover;
/**
 * Seat Numbers
 * -------------------------------
 * Driver = -1
 * Any = -2
 * Left-Rear = 1
 * Right-Front = 0
 * Right-Rear = 2
 * Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
 * @param ped
 * @param vehicle
 * @param seat
 */
function taskWarpPedIntoVehicle(ped, vehicle, seat) {
    return _in(0x9a7d0914, 0x11c5f684, ped, vehicle, seat);
}
exports.taskWarpPedIntoVehicle = taskWarpPedIntoVehicle;
/**
 * EX: Function.Call(Ped1, Ped2, Time, 0);
 *
 * The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
 *
 *
 *
 * Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
 * @param ped
 * @param target
 * @param minFireLoops
 * @param startState
 * @param forceShootOnGround
 * @param shootFromGroundTimer
 */
function taskWrithe(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer) {
    return _in(0xcddc2b77, 0xce54ac6e, ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
}
exports.taskWrithe = taskWrithe;
function tellGroupPedsInAreaToAttack(ped, p1, p2, hash, p4, p5) {
    return _in(0xad27d957, 0x598e49e9, ped, p1, _fv(p2), _ch(hash), p4, p5);
}
exports.tellGroupPedsInAreaToAttack = tellGroupPedsInAreaToAttack;
function terminateAllScriptsWithThisName(scriptName) {
    return _in(0x9dc711bc, 0x69c548df, _ts(scriptName));
}
exports.terminateAllScriptsWithThisName = terminateAllScriptsWithThisName;
function terminateThisThread() {
    return _in(0x1090044a, 0xd1da76fa);
}
exports.terminateThisThread = terminateThisThread;
function terminateThread(threadId) {
    return _in(0xc8b189ed, 0x9138bcd4, threadId);
}
exports.terminateThread = terminateThread;
/**
 * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
 * This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
 * @param toggle
 */
function terraingridActivate(toggle) {
    return _in(0xa356990e, 0x161c9e65, toggle);
}
exports.terraingridActivate = terraingridActivate;
/**
 * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
 * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * @param lowR
 * @param lowG
 * @param lowB
 * @param lowAlpha
 * @param r
 * @param g
 * @param b
 * @param alpha
 * @param highR
 * @param highG
 * @param highB
 * @param highAlpha
 */
function terraingridSetColours(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha) {
    return _in(0x5ce62918, 0xf8d703c7, lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
}
exports.terraingridSetColours = terraingridSetColours;
/**
 * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
 * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
 *
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 *
 * This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
 * The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
 * normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
 *
 * Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
 * @param x
 * @param y
 * @param z
 * @param forwardX
 * @param forwardY
 * @param forwardZ
 * @param sizeX
 * @param sizeY
 * @param sizeZ
 * @param gridScale
 * @param glowIntensity
 * @param normalHeight
 * @param heightDiff
 */
function terraingridSetParams(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff) {
    return _in(0x1c4fc575, 0x2bcd8e48, _fv(x), _fv(y), _fv(z), _fv(forwardX), _fv(forwardY), _fv(forwardZ), _fv(sizeX), _fv(sizeY), _fv(sizeZ), _fv(gridScale), _fv(glowIntensity), _fv(normalHeight), _fv(heightDiff));
}
exports.terraingridSetParams = terraingridSetParams;
/**
 * enum eScriptWaterTestResult
 * {
 * SCRIPT_WATER_TEST_RESULT_NONE,
 * SCRIPT_WATER_TEST_RESULT_WATER,
 * SCRIPT_WATER_TEST_RESULT_BLOCKED,
 * };
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param waterHeight
 */
function testProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flags, waterHeight) {
    const [retval, waterHeight_out] = _in(0x8974647e, 0xd222ea5f, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, _fi(waterHeight), _r, _ri);
    return [retval, waterHeight_out];
}
exports.testProbeAgainstAllWater = testProbeAgainstAllWater;
function testProbeAgainstWater(x1, y1, z1, x2, y2, z2, result) {
    const [retval, result_out] = _in(0xffa5d878, 0x809819db, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _v, _r);
    return [retval, _mv(result_out)];
}
exports.testProbeAgainstWater = testProbeAgainstWater;
/**
 * See TEST_PROBE_AGAINST_ALL_WATER.
 * @param x
 * @param y
 * @param z
 * @param flags
 * @param waterHeight
 */
function testVerticalProbeAgainstAllWater(x, y, z, flags, waterHeight) {
    const [retval, waterHeight_out] = _in(0x2b3451fa, 0x1e3142e2, _fv(x), _fv(y), _fv(z), flags, _fi(waterHeight), _r, _ri);
    return [retval, waterHeight_out];
}
exports.testVerticalProbeAgainstAllWater = testVerticalProbeAgainstAllWater;
function textureDownloadGetName(p0) {
    return _in(0x3448505b, 0x6e35262d, p0, _r, _s);
}
exports.textureDownloadGetName = textureDownloadGetName;
function textureDownloadHasFailed(p0) {
    return _in(0x5776ed56, 0x2c134687, p0, _r);
}
exports.textureDownloadHasFailed = textureDownloadHasFailed;
function textureDownloadRelease(p0) {
    return _in(0x487eb90b, 0x98e9fb19, p0);
}
exports.textureDownloadRelease = textureDownloadRelease;
function textureDownloadRequest(filePath, name, p3) {
    const [retval, gamerHandle_out] = _in(0x16160da7, 0x4a8e74a2, _i, _ts(filePath), _ts(name), p3, _r, _ri);
    return [retval, gamerHandle_out];
}
exports.textureDownloadRequest = textureDownloadRequest;
/**
 * Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
 */
function thefeedAutoPostGametipsOff() {
    return _in(0xaded7f57, 0x48acafe6);
}
exports.thefeedAutoPostGametipsOff = thefeedAutoPostGametipsOff;
/**
 * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
 */
function thefeedAutoPostGametipsOn() {
    return _in(0x56c8b608, 0xcfd49854);
}
exports.thefeedAutoPostGametipsOn = thefeedAutoPostGametipsOn;
function thefeedClearFrozenPost() {
    return _in(0x80fe4f3a, 0xb4e1b62a);
}
exports.thefeedClearFrozenPost = thefeedClearFrozenPost;
function thefeedFlushQueue() {
    return _in(0xa8fdb297, 0xa8d25fba);
}
exports.thefeedFlushQueue = thefeedFlushQueue;
/**
 * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 */
function thefeedForceRenderOff() {
    return _in(0x58304988, 0x4a2eee3c);
}
exports.thefeedForceRenderOff = thefeedForceRenderOff;
function thefeedForceRenderOn() {
    return _in(0xa13c11e1, 0xb5c06bfc);
}
exports.thefeedForceRenderOn = thefeedForceRenderOn;
/**
 * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
 */
function thefeedFreezeNextPost() {
    return _in(0xfdec055a, 0xb549e328);
}
exports.thefeedFreezeNextPost = thefeedFreezeNextPost;
/**
 * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
 */
function thefeedGetLastShownPhoneActivatableFeedId() {
    return _in(0x82352748, 0x437638ca, _r, _ri);
}
exports.thefeedGetLastShownPhoneActivatableFeedId = thefeedGetLastShownPhoneActivatableFeedId;
/**
 * Stops loading screen tips shown by invoking `THEFEED_SHOW`
 */
function thefeedHide() {
    return _in(0x32888337, 0x579a5970);
}
exports.thefeedHide = thefeedHide;
/**
 * Once called each frame hides all above radar notifications.
 */
function thefeedHideThisFrame() {
    return _in(0x25f87b30, 0xc382fca7);
}
exports.thefeedHideThisFrame = thefeedHideThisFrame;
function thefeedIsPaused() {
    return _in(0xa9cbfd40, 0xb3fa3010, _r);
}
exports.thefeedIsPaused = thefeedIsPaused;
function thefeedOnlyShowTooltips(toggle) {
    return _in(0x6f1554b0, 0xcc2089fa, toggle);
}
exports.thefeedOnlyShowTooltips = thefeedOnlyShowTooltips;
function thefeedPause() {
    return _in(0xfdb42399, 0x7fa30340);
}
exports.thefeedPause = thefeedPause;
/**
 * Removes a notification instantly instead of waiting for it to disappear
 * @param notificationId
 */
function thefeedRemoveItem(notificationId) {
    return _in(0xbe4390cb, 0x40b3e627, notificationId);
}
exports.thefeedRemoveItem = thefeedRemoveItem;
function thefeedReportLogoOff() {
    return _in(0xb695e2cd, 0x0a2da9ee);
}
exports.thefeedReportLogoOff = thefeedReportLogoOff;
function thefeedReportLogoOn() {
    return _in(0xd4438c05, 0x64490e63);
}
exports.thefeedReportLogoOn = thefeedReportLogoOn;
function thefeedResetAllParameters() {
    return _in(0xfdd85225, 0xb2dea55e);
}
exports.thefeedResetAllParameters = thefeedResetAllParameters;
function thefeedResume() {
    return _in(0xe1cd1e48, 0xe025e661);
}
exports.thefeedResume = thefeedResume;
/**
 * From the decompiled scripts:
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);
 *
 * sets background color for the next notification
 * 6 = red
 * 184 = green
 * 190 = yellow
 *
 * Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
 * @param hudColorIndex
 */
function thefeedSetBackgroundColorForNextPost(hudColorIndex) {
    return _in(0x92f0da1e, 0x27db96dc, hudColorIndex);
}
exports.thefeedSetBackgroundColorForNextPost = thefeedSetBackgroundColorForNextPost;
/**
 * Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
 * @param count
 */
function thefeedSetFlashDurationParameterForNextMessage(count) {
    return _in(0x17ad8c97, 0x06bdd88a, count);
}
exports.thefeedSetFlashDurationParameterForNextMessage = thefeedSetFlashDurationParameterForNextMessage;
function thefeedSetRgbaParameterForNextMessage(red, green, blue, alpha) {
    return _in(0x17430b91, 0x8701c342, red, green, blue, alpha);
}
exports.thefeedSetRgbaParameterForNextMessage = thefeedSetRgbaParameterForNextMessage;
function thefeedSetScriptedMenuHeight(pos) {
    return _in(0x55598d21, 0x339cb998, _fv(pos));
}
exports.thefeedSetScriptedMenuHeight = thefeedSetScriptedMenuHeight;
function thefeedSetSnapFeedItemPositions(p0) {
    return _in(0xbae4f9b9, 0x7cd43b30, p0);
}
exports.thefeedSetSnapFeedItemPositions = thefeedSetSnapFeedItemPositions;
function thefeedSetVibrateParameterForNextMessage(toggle) {
    return _in(0x4a0c7c9b, 0xb10abb36, toggle);
}
exports.thefeedSetVibrateParameterForNextMessage = thefeedSetVibrateParameterForNextMessage;
/**
 * Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
 */
function thefeedShow() {
    return _in(0x15cfa549, 0x788d35ef);
}
exports.thefeedShow = thefeedShow;
/**
 * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
 * @param txdString1
 * @param txnString1
 * @param txdString2
 * @param txnString2
 */
function thefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2) {
    return _in(0x317eba71, 0xd7543f52, _ts(txdString1), _ts(txnString1), _ts(txdString2), _ts(txnString2));
}
exports.thefeedUpdateItemTexture = thefeedUpdateItemTexture;
/**
 * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
 */
function timera() {
    return _in(0x83666f9f, 0xb8febd4b, _r, _ri);
}
exports.timera = timera;
function timerb() {
    return _in(0xc9d94441, 0x86b5a374, _r, _ri);
}
exports.timerb = timerb;
/**
 * Gets the current frame time.
 */
function timestep() {
    return _in(0x00000000, 0x50597ee2, _r, _rf);
}
exports.timestep = timestep;
function titleTextureDownloadRequest(filePath, name, p2) {
    return _in(0x0b203b4a, 0xfde53a4f, _ts(filePath), _ts(name), p2, _r, _ri);
}
exports.titleTextureDownloadRequest = titleTextureDownloadRequest;
function toFloat(value) {
    return _in(0xbbda7924, 0x48db5a89, value, _r, _rf);
}
exports.toFloat = toFloat;
function togglePausedRenderphases(toggle) {
    return _in(0xdfc252d8, 0xa3e15ab7, toggle);
}
exports.togglePausedRenderphases = togglePausedRenderphases;
function togglePlayerDamageOverlay(toggle) {
    return _in(0xe63d7c6e, 0xececb66b, toggle);
}
exports.togglePlayerDamageOverlay = togglePlayerDamageOverlay;
function toggleScenarioPedCowerInPlace(ped, toggle) {
    return _in(0x9a77dfd2, 0x95e29b09, ped, toggle);
}
exports.toggleScenarioPedCowerInPlace = toggleScenarioPedCowerInPlace;
/**
 * Toggles some stunt jump stuff.
 * @param toggle
 */
function toggleShowOptionalStuntJumpCamera(toggle) {
    return _in(0xfb80ab29, 0x9d2ee1bd, toggle);
}
exports.toggleShowOptionalStuntJumpCamera = toggleShowOptionalStuntJumpCamera;
function toggleStealthRadar(toggle) {
    return _in(0x6afdfb93, 0x754950c7, toggle);
}
exports.toggleStealthRadar = toggleStealthRadar;
/**
 * Toggles:
 * UNK17 - 17
 * Turbo - 18
 * UNK19 - 19
 * Tire Smoke - 20
 * UNK21 - 21
 * Xenon Headlights - 22
 * @param vehicle
 * @param modType
 * @param toggle
 */
function toggleVehicleMod(vehicle, modType, toggle) {
    return _in(0x2a1f4f37, 0xf95bad08, vehicle, modType, toggle);
}
exports.toggleVehicleMod = toggleVehicleMod;
function trackObjectVisibility(object) {
    return _in(0xb252bc03, 0x6b525623, object);
}
exports.trackObjectVisibility = trackObjectVisibility;
/**
 * in script hook .net
 *
 * Vehicle v = ...;
 * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
 * @param vehicle
 */
function trackVehicleVisibility(vehicle) {
    return _in(0x64473aef, 0xdcf47dca, vehicle);
}
exports.trackVehicleVisibility = trackVehicleVisibility;
/**
 * Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param noAnimation
 */
function transformToCar(vehicle, noAnimation) {
    return _in(0x2a69ffd1, 0xb42bff9e, vehicle, noAnimation);
}
exports.transformToCar = transformToCar;
/**
 * Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param noAnimation
 */
function transformToSubmarine(vehicle, noAnimation) {
    return _in(0xbe4c854f, 0xfdb6eebe, vehicle, noAnimation, _r);
}
exports.transformToSubmarine = transformToSubmarine;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
function triggerCommerceDataFetch(p0) {
    return _in(0xb606e6cc, 0x59664972, p0);
}
exports.triggerCommerceDataFetch = triggerCommerceDataFetch;
function triggerIdleAnimationOnPed(ped) {
    return _in(0xc2ee020f, 0x5fb4db53, ped);
}
exports.triggerIdleAnimationOnPed = triggerIdleAnimationOnPed;
/**
 * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
 *
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
function triggerMusicEvent(eventName) {
    return _in(0x706d57b0, 0xf50da710, _ts(eventName), _r);
}
exports.triggerMusicEvent = triggerMusicEvent;
function triggerPedScenarioPanicexittoflee(p0, p1, p2, p3) {
    return _in(0x25361a96, 0xe0f7e419, p0, p1, p2, p3, _r);
}
exports.triggerPedScenarioPanicexittoflee = triggerPedScenarioPanicexittoflee;
/**
 * time in ms to transition to fully blurred screen
 * @param transitionTime
 */
function triggerScreenblurFadeIn(transitionTime) {
    return _in(0xa328a24a, 0xaa6b7fdc, _fv(transitionTime), _r);
}
exports.triggerScreenblurFadeIn = triggerScreenblurFadeIn;
/**
 * time in ms to transition from fully blurred to normal
 * @param transitionTime
 */
function triggerScreenblurFadeOut(transitionTime) {
    return _in(0xefacc8ae, 0xf94430d5, _fv(transitionTime), _r);
}
exports.triggerScreenblurFadeOut = triggerScreenblurFadeOut;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 *
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 *
 * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
function triggerScriptEvent(eventGroup, eventDataSize, playerBits) {
    return _in(0x5ae99c57, 0x1d5bbe5d, eventGroup, _i, eventDataSize, playerBits);
}
exports.triggerScriptEvent = triggerScriptEvent;
function triggerSirenAudio(vehicle) {
    return _in(0x66c3fb05, 0x206041ba, vehicle);
}
exports.triggerSirenAudio = triggerSirenAudio;
function triggerSonarBlip(posX, posY, posZ, radius, p4) {
    return _in(0x72dd432f, 0x3cdfc0ee, _fv(posX), _fv(posY), _fv(posZ), _fv(radius), p4);
}
exports.triggerSonarBlip = triggerSonarBlip;
/**
 * p1: 0..16
 * @param vehicle
 * @param p1
 * @param p2
 */
function triggerVehiclePartBrokenCameraShake(vehicle, p1, p2) {
    return _in(0x5d96cfb5, 0x9da076a0, vehicle, p1, _fv(p2));
}
exports.triggerVehiclePartBrokenCameraShake = triggerVehiclePartBrokenCameraShake;
function ugcCancelQuery() {
    return _in(0xe9b99b68, 0x53181409);
}
exports.ugcCancelQuery = ugcCancelQuery;
function ugcClearCreateResult() {
    return _in(0x17440aa1, 0x5d1d3739);
}
exports.ugcClearCreateResult = ugcClearCreateResult;
function ugcClearModifyResult() {
    return _in(0xa1e5e020, 0x4a6fcc70);
}
exports.ugcClearModifyResult = ugcClearModifyResult;
function ugcClearOfflineQuery() {
    return _in(0x61a885d3, 0xf7cfee9a);
}
exports.ugcClearOfflineQuery = ugcClearOfflineQuery;
function ugcClearQueryResults() {
    return _in(0xba96394a, 0x0eecfa65);
}
exports.ugcClearQueryResults = ugcClearQueryResults;
function ugcCopyContent() {
    const [retval, p0_out, p1_out] = _in(0x152d90e4, 0xc1b4738a, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.ugcCopyContent = ugcCopyContent;
function ugcCreateContent(dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7) {
    const [retval, data_out] = _in(0xc84527e2, 0x35fca219, _i, dataCount, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), publish, p7, _r);
    return [retval, data_out];
}
exports.ugcCreateContent = ugcCreateContent;
function ugcCreateMission(contentName, description, tagsCsv, contentTypeName, publish, p5) {
    return _in(0xa5efc3e8, 0x47d60507, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), publish, p5, _r);
}
exports.ugcCreateMission = ugcCreateMission;
function ugcDidCreateSucceed() {
    return _in(0x24e4e51f, 0xc16305f9, _r);
}
exports.ugcDidCreateSucceed = ugcDidCreateSucceed;
function ugcDidDescriptionRequestSucceed(p0) {
    return _in(0x162c23ca, 0x83ed0a62, p0, _r);
}
exports.ugcDidDescriptionRequestSucceed = ugcDidDescriptionRequestSucceed;
function ugcDidGetSucceed() {
    return _in(0x941e5306, 0xbcd7c2c7, _r);
}
exports.ugcDidGetSucceed = ugcDidGetSucceed;
function ugcDidModifySucceed() {
    return _in(0x793ff272, 0xd5b365f4, _r);
}
exports.ugcDidModifySucceed = ugcDidModifySucceed;
function ugcDidQueryCreatorsSucceed() {
    return _in(0x4d02279c, 0x83be69fe, _r);
}
exports.ugcDidQueryCreatorsSucceed = ugcDidQueryCreatorsSucceed;
function ugcGetBookmarkedContent(p0, p1, p2, p3) {
    const [retval, p3_out] = _in(0xd5a4b599, 0x80401588, p0, p1, _ts(p2), _ii(p3), _r);
    return [retval, p3_out];
}
exports.ugcGetBookmarkedContent = ugcGetBookmarkedContent;
function ugcGetCachedDescription(p0, p1) {
    return _in(0x40f7e664, 0x72df3e5c, p0, p1, _r, _s);
}
exports.ugcGetCachedDescription = ugcGetCachedDescription;
function ugcGetContentCategory(p0) {
    return _in(0xa7bab11e, 0x7c9c6c5a, p0, _r, _ri);
}
exports.ugcGetContentCategory = ugcGetContentCategory;
function ugcGetContentCreatedByLocalPlayer(p0) {
    return _in(0x8c8d2739, 0xba44af0f, p0, _r);
}
exports.ugcGetContentCreatedByLocalPlayer = ugcGetContentCreatedByLocalPlayer;
function ugcGetContentCreatorGamerHandle(p0, p1) {
    const [retval, p1_out] = _in(0x58477079, 0x4d758c18, p0, _ii(p1), _r);
    return [retval, p1_out];
}
exports.ugcGetContentCreatorGamerHandle = ugcGetContentCreatorGamerHandle;
function ugcGetContentDescriptionHash(p0) {
    return _in(0x7cf04487, 0x87b23758, p0, _r, _ri);
}
exports.ugcGetContentDescriptionHash = ugcGetContentDescriptionHash;
function ugcGetContentFileVersion(p0, p1) {
    return _in(0x37025b27, 0xd9b658b1, p0, p1, _r, _ri);
}
exports.ugcGetContentFileVersion = ugcGetContentFileVersion;
function ugcGetContentHasHiResPhoto(p0) {
    return _in(0x7fcc39c4, 0x6c3c03bd, p0, _r);
}
exports.ugcGetContentHasHiResPhoto = ugcGetContentHasHiResPhoto;
function ugcGetContentHasLoResPhoto(p0) {
    return _in(0x1d610eb0, 0xfea716d9, p0, _r);
}
exports.ugcGetContentHasLoResPhoto = ugcGetContentHasLoResPhoto;
function ugcGetContentHasPlayerBookmarked(p0) {
    return _in(0x993cbe59, 0xd350d225, p0, _r);
}
exports.ugcGetContentHasPlayerBookmarked = ugcGetContentHasPlayerBookmarked;
function ugcGetContentHasPlayerRecord(p0) {
    return _in(0x70ea8da5, 0x7840f9be, p0, _r);
}
exports.ugcGetContentHasPlayerRecord = ugcGetContentHasPlayerRecord;
function ugcGetContentHash() {
    return _in(0x3a17a27d, 0x75c74887, _r, _ri);
}
exports.ugcGetContentHash = ugcGetContentHash;
/**
 * Return the mission id of a job.
 * @param p0
 */
function ugcGetContentId(p0) {
    return _in(0x55aa95f4, 0x81d694d2, p0, _r, _s);
}
exports.ugcGetContentId = ugcGetContentId;
function ugcGetContentIsPublished(p0) {
    return _in(0x3054f114, 0x121c21ea, p0, _r);
}
exports.ugcGetContentIsPublished = ugcGetContentIsPublished;
function ugcGetContentIsUsingScNickname(p0) {
    return _in(0xaeab9877, 0x27c5a8a4, p0, _r);
}
exports.ugcGetContentIsUsingScNickname = ugcGetContentIsUsingScNickname;
function ugcGetContentIsVerified(p0) {
    return _in(0xa9240a96, 0xc74cca13, p0, _r);
}
exports.ugcGetContentIsVerified = ugcGetContentIsVerified;
function ugcGetContentLanguage(p0) {
    return _in(0x32dd916f, 0x3f7c9672, p0, _r, _ri);
}
exports.ugcGetContentLanguage = ugcGetContentLanguage;
function ugcGetContentName(p0) {
    return _in(0xbf09786a, 0x7fcab582, p0, _r, _s);
}
exports.ugcGetContentName = ugcGetContentName;
function ugcGetContentNum() {
    return _in(0xe0a61384, 0x01bcb837, _r, _ri);
}
exports.ugcGetContentNum = ugcGetContentNum;
function ugcGetContentPath(p0, p1) {
    return _in(0xbaf6babf, 0x9e7ccc13, p0, p1, _r, _s);
}
exports.ugcGetContentPath = ugcGetContentPath;
function ugcGetContentRating(p0, p1) {
    return _in(0x1accfba3, 0xd8dab2ee, p0, p1, _r, _rf);
}
exports.ugcGetContentRating = ugcGetContentRating;
function ugcGetContentRatingCount(p0, p1) {
    return _in(0x759299c5, 0xbb31d2a9, p0, p1, _r, _ri);
}
exports.ugcGetContentRatingCount = ugcGetContentRatingCount;
function ugcGetContentRatingNegativeCount(p0, p1) {
    return _in(0x4e548c0d, 0x7ae39ff9, p0, p1, _r, _ri);
}
exports.ugcGetContentRatingNegativeCount = ugcGetContentRatingNegativeCount;
function ugcGetContentRatingPositiveCount(p0, p1) {
    return _in(0x87e5c46c, 0x187fe0ae, p0, p1, _r, _ri);
}
exports.ugcGetContentRatingPositiveCount = ugcGetContentRatingPositiveCount;
function ugcGetContentTotal() {
    return _in(0x769951e2, 0x455e2eb5, _r, _ri);
}
exports.ugcGetContentTotal = ugcGetContentTotal;
function ugcGetContentUpdatedDate(p0, p1) {
    return _in(0xcfd115b3, 0x73c0df63, p0, _ii(p1));
}
exports.ugcGetContentUpdatedDate = ugcGetContentUpdatedDate;
function ugcGetContentUserId(p0) {
    return _in(0xcd67ad04, 0x1a394c9c, p0, _r, _s);
}
exports.ugcGetContentUserId = ugcGetContentUserId;
function ugcGetContentUserName(p0) {
    return _in(0x703f1242, 0x5eca8bf5, p0, _r, _s);
}
exports.ugcGetContentUserName = ugcGetContentUserName;
function ugcGetCreateContentId() {
    return _in(0xc55a0b40, 0xffb1ed23, _r, _s);
}
exports.ugcGetCreateContentId = ugcGetCreateContentId;
function ugcGetCreateResult() {
    return _in(0xfbc5e768, 0xc7a77a6a, _r, _ri);
}
exports.ugcGetCreateResult = ugcGetCreateResult;
function ugcGetCreatorNum() {
    return _in(0x597f8dba, 0x9b206fc7, _r, _ri);
}
exports.ugcGetCreatorNum = ugcGetCreatorNum;
function ugcGetCreatorsByUserId() {
    const [retval, p0_out, p1_out] = _in(0xb746d20b, 0x17f2a229, _i, _i, _r);
    return [retval, p0_out, p1_out];
}
exports.ugcGetCreatorsByUserId = ugcGetCreatorsByUserId;
function ugcGetCrewContent(p0, p1, p2, p3, p4) {
    const [retval, p4_out] = _in(0x9f6e2821, 0x885caee2, p0, p1, p2, _ts(p3), _ii(p4), _r);
    return [retval, p4_out];
}
exports.ugcGetCrewContent = ugcGetCrewContent;
function ugcGetFriendContent(p0, p1, p2, p3) {
    const [retval, p3_out] = _in(0xf9e1ccae, 0x8ba4c281, p0, p1, _ts(p2), _ii(p3), _r);
    return [retval, p3_out];
}
exports.ugcGetFriendContent = ugcGetFriendContent;
function ugcGetGetByCategory(p0, p1, p2, p3, p4) {
    const [retval, p4_out] = _in(0x678bb03c, 0x1a3bd51e, p0, p1, p2, _ts(p3), _ii(p4), _r);
    return [retval, p4_out];
}
exports.ugcGetGetByCategory = ugcGetGetByCategory;
function ugcGetGetByContentId(contentId, contentTypeName) {
    return _in(0x815e5e30, 0x73da1d67, _ts(contentId), _ts(contentTypeName), _r);
}
exports.ugcGetGetByContentId = ugcGetGetByContentId;
function ugcGetGetByContentIds(dataCount, contentTypeName) {
    const [retval, data_out] = _in(0xb8322eeb, 0x38be7c26, _i, dataCount, _ts(contentTypeName), _r);
    return [retval, data_out];
}
exports.ugcGetGetByContentIds = ugcGetGetByContentIds;
function ugcGetModifyResult() {
    return _in(0x5a0a3d1a, 0x186a5508, _r, _ri);
}
exports.ugcGetModifyResult = ugcGetModifyResult;
function ugcGetMostRecentlyCreatedContent(p0, p1) {
    const [retval, p2_out, p3_out] = _in(0xa7862bc5, 0xed1dfd7e, p0, p1, _i, _i, _r);
    return [retval, p2_out, p3_out];
}
exports.ugcGetMostRecentlyCreatedContent = ugcGetMostRecentlyCreatedContent;
function ugcGetMostRecentlyPlayedContent(p0, p1) {
    const [retval, p2_out, p3_out] = _in(0x97a770be, 0xef227e2b, p0, p1, _i, _i, _r);
    return [retval, p2_out, p3_out];
}
exports.ugcGetMostRecentlyPlayedContent = ugcGetMostRecentlyPlayedContent;
function ugcGetMyContent(p0, p1, p2, p3) {
    const [retval, p3_out] = _in(0x3195f8dd, 0x0d531052, p0, p1, _ts(p2), _ii(p3), _r);
    return [retval, p3_out];
}
exports.ugcGetMyContent = ugcGetMyContent;
function ugcGetQueryResult() {
    return _in(0xedf7f927, 0x136c224b, _r, _ri);
}
exports.ugcGetQueryResult = ugcGetQueryResult;
/**
 * Return the root content id of a job.
 * @param p0
 */
function ugcGetRootContentId(p0) {
    return _in(0xc0173d6b, 0xff4e0348, p0, _r, _s);
}
exports.ugcGetRootContentId = ugcGetRootContentId;
function ugcGetTopRatedContent(p0, p1) {
    const [retval, p2_out, p3_out] = _in(0x5324a0e3, 0xe4ce3570, p0, p1, _i, _i, _r);
    return [retval, p2_out, p3_out];
}
exports.ugcGetTopRatedContent = ugcGetTopRatedContent;
function ugcHasCreateFinished() {
    return _in(0x5e24341a, 0x7f92a74b, _r);
}
exports.ugcHasCreateFinished = ugcHasCreateFinished;
function ugcHasDescriptionRequestFinished(p0) {
    return _in(0xebfa8d50, 0xaddc54c4, p0, _r);
}
exports.ugcHasDescriptionRequestFinished = ugcHasDescriptionRequestFinished;
function ugcHasGetFinished() {
    return _in(0x02ada21e, 0xa2f6918f, _r);
}
exports.ugcHasGetFinished = ugcHasGetFinished;
function ugcHasModifyFinished() {
    return _in(0x299ef3c5, 0x76773506, _r);
}
exports.ugcHasModifyFinished = ugcHasModifyFinished;
function ugcHasQueryCreatorsFinished() {
    return _in(0x63b406d7, 0x884bfa95, _r);
}
exports.ugcHasQueryCreatorsFinished = ugcHasQueryCreatorsFinished;
function ugcIsCreating() {
    return _in(0x9fedf868, 0x98f100e9, _r);
}
exports.ugcIsCreating = ugcIsCreating;
function ugcIsDescriptionRequestInProgress(p0) {
    return _in(0x2d5dc831, 0x176d0114, p0, _r);
}
exports.ugcIsDescriptionRequestInProgress = ugcIsDescriptionRequestInProgress;
function ugcIsGetting() {
    return _in(0xd53acdbe, 0xf24a46e8, _r);
}
exports.ugcIsGetting = ugcIsGetting;
function ugcIsLanguageSupported(p0) {
    return _in(0xf53e4846, 0x1b71eecb, p0, _r);
}
exports.ugcIsLanguageSupported = ugcIsLanguageSupported;
function ugcIsModifying() {
    return _in(0x45e81677, 0x2e93a9db, _r);
}
exports.ugcIsModifying = ugcIsModifying;
function ugcLoadOfflineQuery(p0) {
    return _in(0x5cae833b, 0x0ee0c500, p0, _r);
}
exports.ugcLoadOfflineQuery = ugcLoadOfflineQuery;
function ugcPublish(contentId, baseContentId, contentTypeName) {
    return _in(0x1de0f5f5, 0x0d723caa, _ts(contentId), _ts(baseContentId), _ts(contentTypeName), _r);
}
exports.ugcPublish = ugcPublish;
function ugcQueryByCategory(p0, p1, p2, p3, p4, p5) {
    return _in(0x692d58df, 0x40657e8c, p0, p1, p2, _ts(p3), p4, p5, _r);
}
exports.ugcQueryByCategory = ugcQueryByCategory;
function ugcQueryByContentId(contentId, latestVersion, contentTypeName) {
    return _in(0x158ec424, 0xf35ec469, _ts(contentId), latestVersion, _ts(contentTypeName), _r);
}
exports.ugcQueryByContentId = ugcQueryByContentId;
function ugcQueryByContentIds(count, latestVersion, contentTypeName) {
    const [retval, data_out] = _in(0xc7397a83, 0xf7a2a462, _i, count, latestVersion, _ts(contentTypeName), _r);
    return [retval, data_out];
}
exports.ugcQueryByContentIds = ugcQueryByContentIds;
function ugcQueryMostRecentlyCreatedContent(offset, count, contentTypeName, p3) {
    return _in(0x6d4cb481, 0xfac835e8, offset, count, _ts(contentTypeName), p3, _r);
}
exports.ugcQueryMostRecentlyCreatedContent = ugcQueryMostRecentlyCreatedContent;
function ugcQueryMyContent(p0, p1, p3, p4, p5) {
    const [retval, p2_out] = _in(0x9bf43881, 0x5f5d96ea, p0, p1, _i, p3, p4, p5, _r);
    return [retval, p2_out];
}
exports.ugcQueryMyContent = ugcQueryMyContent;
function ugcReleaseAllCachedDescriptions() {
    return _in(0x68103e22, 0x47887242);
}
exports.ugcReleaseAllCachedDescriptions = ugcReleaseAllCachedDescriptions;
function ugcReleaseCachedDescription(p0) {
    return _in(0x5a34cd9c, 0x3c5bec44, p0, _r);
}
exports.ugcReleaseCachedDescription = ugcReleaseCachedDescription;
function ugcRequestCachedDescription(p0) {
    return _in(0x5e016527, 0x8f6339ee, p0, _r, _ri);
}
exports.ugcRequestCachedDescription = ugcRequestCachedDescription;
function ugcRequestContentDataFromIndex(p0, p1) {
    return _in(0x171df6a0, 0xc07fb3dc, p0, p1, _r, _ri);
}
exports.ugcRequestContentDataFromIndex = ugcRequestContentDataFromIndex;
function ugcRequestContentDataFromParams(contentTypeName, contentId, p2, p3, p4) {
    return _in(0x7fd2990a, 0xf016795e, _ts(contentTypeName), _ts(contentId), p2, p3, p4, _r, _ri);
}
exports.ugcRequestContentDataFromParams = ugcRequestContentDataFromParams;
function ugcSetBookmarked(contentId, bookmarked, contentTypeName) {
    return _in(0x274a1519, 0xdfc1094f, _ts(contentId), bookmarked, _ts(contentTypeName), _r);
}
exports.ugcSetBookmarked = ugcSetBookmarked;
function ugcSetDeleted(p1, p2) {
    const [retval, p0_out] = _in(0xd05d1a6c, 0x74da3498, _i, p1, _ts(p2), _r);
    return [retval, p0_out];
}
exports.ugcSetDeleted = ugcSetDeleted;
function ugcSetPlayerData(contentId, rating, contentTypeName, p3) {
    return _in(0x692d808c, 0x34a82143, _ts(contentId), _fv(rating), _ts(contentTypeName), p3, _r);
}
exports.ugcSetPlayerData = ugcSetPlayerData;
function ugcSetQueryDataFromOffline(p0) {
    return _in(0xf98dde0a, 0x8ed09323, p0);
}
exports.ugcSetQueryDataFromOffline = ugcSetQueryDataFromOffline;
function ugcSetUsingOfflineContent(p0) {
    return _in(0xfd75dabc, 0x0957bf33, p0);
}
exports.ugcSetUsingOfflineContent = ugcSetUsingOfflineContent;
function ugcTextureDownloadRequest(p0, p1, p2, p3, p4, p5) {
    return _in(0x308f9645, 0x8b7087cc, _ts(p0), p1, p2, p3, _ts(p4), p5, _r, _ri);
}
exports.ugcTextureDownloadRequest = ugcTextureDownloadRequest;
function ugcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName, p7) {
    const [retval, data_out] = _in(0x648e7a54, 0x34af7969, _ts(contentId), _i, dataCount, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), p7, _r);
    return [retval, data_out];
}
exports.ugcUpdateContent = ugcUpdateContent;
function ugcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName, p5) {
    return _in(0x4645de99, 0x80999e93, _ts(contentId), _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), p5, _r);
}
exports.ugcUpdateMission = ugcUpdateMission;
function ugcWasQueryForceCancelled() {
    return _in(0xc87e740d, 0x9f3872cc, _r);
}
exports.ugcWasQueryForceCancelled = ugcWasQueryForceCancelled;
/**
 * It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
 *
 * presetName was always "CELEBRATION_WINNER"
 * All presets can be found in common\data\ui\uiscenes.meta
 * @param presetName
 * @param ped
 * @param slot
 * @param posX
 * @param posY
 * @param posZ
 */
function ui3dsceneAssignPedToSlot(presetName, ped, slot, posX, posY, posZ) {
    return _in(0x98c4fe6e, 0xc34154ca, _ts(presetName), ped, slot, _fv(posX), _fv(posY), _fv(posZ), _r);
}
exports.ui3dsceneAssignPedToSlot = ui3dsceneAssignPedToSlot;
function ui3dsceneClearPatchedData() {
    return _in(0x7a42b2e2, 0x36e71415);
}
exports.ui3dsceneClearPatchedData = ui3dsceneClearPatchedData;
function ui3dsceneIsAvailable() {
    return _in(0xd3a10fc7, 0xfd8d98cd, _r);
}
exports.ui3dsceneIsAvailable = ui3dsceneIsAvailable;
function ui3dsceneMakePushedPresetPersistent(toggle) {
    return _in(0x108be269, 0x59a9d9bb, toggle);
}
exports.ui3dsceneMakePushedPresetPersistent = ui3dsceneMakePushedPresetPersistent;
/**
 * All presets can be found in common\data\ui\uiscenes.meta
 * @param presetName
 */
function ui3dscenePushPreset(presetName) {
    return _in(0xf1cea8a4, 0x198d8e9a, _ts(presetName), _r);
}
exports.ui3dscenePushPreset = ui3dscenePushPreset;
/**
 * Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
 */
function uiStartedEndUserBenchmark() {
    return _in(0xea2f2061, 0x875eed90, _r);
}
exports.uiStartedEndUserBenchmark = uiStartedEndUserBenchmark;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param name
 * @param eventType
 */
function unblockDecisionMakerEvent(name, eventType) {
    return _in(0xd7cd9cf3, 0x4f2c99e8, _ch(name), eventType);
}
exports.unblockDecisionMakerEvent = unblockDecisionMakerEvent;
function unblockSpeechContextGroup(p0) {
    return _in(0x2acabed3, 0x37622df2, _ts(p0));
}
exports.unblockSpeechContextGroup = unblockSpeechContextGroup;
function uncuffPed(ped) {
    return _in(0x67406f2c, 0x8f87fc4f, ped);
}
exports.uncuffPed = uncuffPed;
function unfreezeRadioStation(radioStation) {
    return _in(0xfc00454c, 0xf60b91dd, _ts(radioStation));
}
exports.unfreezeRadioStation = unfreezeRadioStation;
function unhintAmbientAudioBank() {
    return _in(0x19af7ed9, 0xb9d23058);
}
exports.unhintAmbientAudioBank = unhintAmbientAudioBank;
function unhintNamedScriptAudioBank(audioBank) {
    return _in(0x11579d94, 0x0949c49e, _ts(audioBank));
}
exports.unhintNamedScriptAudioBank = unhintNamedScriptAudioBank;
function unhintScriptAudioBank() {
    return _in(0x9ac92eed, 0x5e4793ab);
}
exports.unhintScriptAudioBank = unhintScriptAudioBank;
function unloadAllCloudHats() {
    return _in(0x957e790e, 0xa1727b64);
}
exports.unloadAllCloudHats = unloadAllCloudHats;
function unloadCloudHat(name, p1) {
    return _in(0xa74802fb, 0x8d0b7814, _ts(name), _fv(p1));
}
exports.unloadCloudHat = unloadCloudHat;
function unlockMinimapAngle() {
    return _in(0x8183455e, 0x16c42e3a);
}
exports.unlockMinimapAngle = unlockMinimapAngle;
function unlockMinimapPosition() {
    return _in(0x3e93e06d, 0xb8ef1f30);
}
exports.unlockMinimapPosition = unlockMinimapPosition;
/**
 * "news" that play on the radio after you've done something in story mode(?)
 * @param newsStory
 */
function unlockMissionNewsStory(newsStory) {
    return _in(0xb165ab7c, 0x248b2dc1, newsStory);
}
exports.unlockMissionNewsStory = unlockMissionNewsStory;
/**
 * AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
 * @param radioStation
 * @param trackListName
 */
function unlockRadioStationTrackList(radioStation, trackListName) {
    return _in(0x031acb6a, 0xba18c729, _ts(radioStation), _ts(trackListName));
}
exports.unlockRadioStationTrackList = unlockRadioStationTrackList;
function unpatchDecalDiffuseMap(decalType) {
    return _in(0xb7ed70c4, 0x9521a61d, decalType);
}
exports.unpatchDecalDiffuseMap = unpatchDecalDiffuseMap;
function unpausePlaybackRecordedVehicle(vehicle) {
    return _in(0x8879ee09, 0x268305d5, vehicle);
}
exports.unpausePlaybackRecordedVehicle = unpausePlaybackRecordedVehicle;
/**
 * Does something similar to INTERIOR::DISABLE_INTERIOR.
 *
 * You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
 * @param interior
 */
function unpinInterior(interior) {
    return _in(0x261cce7e, 0xed010641, interior);
}
exports.unpinInterior = unpinInterior;
function unpinRopeVertex(ropeId, vertex) {
    return _in(0x4b5ae2ee, 0xe4a8f180, ropeId, vertex);
}
exports.unpinRopeVertex = unpinRopeVertex;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
function unregisterPedheadshot(id) {
    return _in(0x96b1361d, 0x9b24c2ff, id);
}
exports.unregisterPedheadshot = unregisterPedheadshot;
function unregisterScriptVariable(variable) {
    return _in(0x340a36a7, 0x00e99699, _ii(variable));
}
exports.unregisterScriptVariable = unregisterScriptVariable;
/**
 * This native does absolutely nothing, just a nullsub
 */
function unregisterScriptWithAudio() {
    return _in(0xa8638be2, 0x28d4751a);
}
exports.unregisterScriptWithAudio = unregisterScriptWithAudio;
function unrequestTennisBanks() {
    return _in(0x0150b6ff, 0x25a9e2e5);
}
exports.unrequestTennisBanks = unrequestTennisBanks;
function updateLightsOnEntity(entity) {
    return _in(0xdeadc0de, 0xdeadc0de, entity);
}
exports.updateLightsOnEntity = updateLightsOnEntity;
function updateNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return _in(0x109e9937, 0x3f290687, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8);
}
exports.updateNavmeshBlockingObject = updateNavmeshBlockingObject;
/**
 * Returns the current status of the onscreen keyboard, and updates the output.
 *
 * Status Codes:
 *
 * -1: Keyboard isn't active
 * 0: User still editing
 * 1: User has finished editing
 * 2: User has canceled editing
 */
function updateOnscreenKeyboard() {
    return _in(0x0cf2b696, 0xbbf945ae, _r, _ri);
}
exports.updateOnscreenKeyboard = updateOnscreenKeyboard;
/**
 * See SET_PED_HEAD_BLEND_DATA().
 * @param ped
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 */
function updatePedHeadBlendData(ped, shapeMix, skinMix, thirdMix) {
    return _in(0x723538f6, 0x1c647c5a, ped, _fv(shapeMix), _fv(skinMix), _fv(thirdMix));
}
exports.updatePedHeadBlendData = updatePedHeadBlendData;
function updatePlayerTeleport(player) {
    return _in(0xe23d5873, 0xc2394c61, player, _r);
}
exports.updatePlayerTeleport = updatePlayerTeleport;
/**
 * Does nothing (it's a nullsub).
 */
function updateRadarZoomToBlip() {
    return _in(0xd2049635, 0xdeb9c375);
}
exports.updateRadarZoomToBlip = updateRadarZoomToBlip;
function updateSoundCoord(soundId, x, y, z) {
    return _in(0x7ec3c679, 0xd0e7e46b, soundId, _fv(x), _fv(y), _fv(z));
}
exports.updateSoundCoord = updateSoundCoord;
function updateSpecialAbilityFromStat(player, p1) {
    return _in(0xffee8fa2, 0x9ab9a18e, player, p1);
}
exports.updateSpecialAbilityFromStat = updateSpecialAbilityFromStat;
function updateTaskAimGunScriptedTarget(ped, target, x, y, z, disableBlockingClip) {
    return _in(0x9724fb59, 0xa3e72ad0, ped, target, _fv(x), _fv(y), _fv(z), disableBlockingClip);
}
exports.updateTaskAimGunScriptedTarget = updateTaskAimGunScriptedTarget;
function updateTaskHandsUpDuration(ped, duration) {
    return _in(0xa98fcafd, 0x7893c834, ped, duration);
}
exports.updateTaskHandsUpDuration = updateTaskHandsUpDuration;
function updateTaskSweepAimEntity(ped, entity) {
    return _in(0xe4973dbd, 0xbe6e44b3, ped, entity);
}
exports.updateTaskSweepAimEntity = updateTaskSweepAimEntity;
function updateTaskSweepAimPosition(ped, x, y, z) {
    return _in(0xbb106883, 0xf5201fc4, ped, _fv(x), _fv(y), _fv(z));
}
exports.updateTaskSweepAimPosition = updateTaskSweepAimPosition;
/**
 * Just a nullsub (i.e. does absolutely nothing) since build 1604.
 * @param enableMixes
 */
function updateUnlockableDjRadioTracks(enableMixes) {
    return _in(0x47aed842, 0x13a47510, enableMixes);
}
exports.updateUnlockableDjRadioTracks = updateUnlockableDjRadioTracks;
/**
 * This native is used in both singleplayer and multiplayer scripts.
 *
 * Always used like this in scripts
 * PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());
 * @param player
 */
function updateWantedPositionThisFrame(player) {
    return _in(0xbc9490ca, 0x15aea8fb, player);
}
exports.updateWantedPositionThisFrame = updateWantedPositionThisFrame;
function useActiveCameraForTimeslicingCentre() {
    return _in(0x693478ac, 0xbd7f18e7);
}
exports.useActiveCameraForTimeslicingCentre = useActiveCameraForTimeslicingCentre;
/**
 * Sets gameplay camera to hash
 * @param camName
 */
function useDedicatedStuntCameraThisUpdate(camName) {
    return _in(0x425a920f, 0xdb9a0dda, _ts(camName));
}
exports.useDedicatedStuntCameraThisUpdate = useDedicatedStuntCameraThisUpdate;
/**
 * Related to displaying cash on the HUD
 * Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
 * @param toggle
 */
function useFakeMpCash(toggle) {
    return _in(0x170f541e, 0x1cadd1de, toggle);
}
exports.useFakeMpCash = useFakeMpCash;
function useFootstepScriptSweeteners(ped, p1, hash) {
    return _in(0xbf4dc178, 0x4be94dfa, ped, p1, _ch(hash));
}
exports.useFootstepScriptSweeteners = useFootstepScriptSweeteners;
/**
 * From the b678d decompiled scripts:
 *
 * GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param name
 */
function useParticleFxAsset(name) {
    return _in(0x6c38af36, 0x93a69a91, _ts(name));
}
exports.useParticleFxAsset = useParticleFxAsset;
function usePlayerColourInsteadOfTeamColour(toggle) {
    return _in(0x77758139, 0xec9b66c7, toggle);
}
exports.usePlayerColourInsteadOfTeamColour = usePlayerColourInsteadOfTeamColour;
function useScriptCamForAmbientPopulationOriginThisFrame(p0, p1) {
    return _in(0x27140184, 0x6bd26e92, p0, p1);
}
exports.useScriptCamForAmbientPopulationOriginThisFrame = useScriptCamForAmbientPopulationOriginThisFrame;
function useSirenAsHorn(vehicle, toggle) {
    return _in(0xfa932de3, 0x50266ef8, vehicle, toggle);
}
exports.useSirenAsHorn = useSirenAsHorn;
/**
 * Forces footstep tracks on all surfaces.
 * @param toggle
 */
function useSnowFootVfxWhenUnsheltered(toggle) {
    return _in(0xaeedad14, 0x20c65cc0, toggle);
}
exports.useSnowFootVfxWhenUnsheltered = useSnowFootVfxWhenUnsheltered;
/**
 * Forces vehicle trails on all surfaces.
 * @param toggle
 */
function useSnowWheelVfxWhenUnsheltered(toggle) {
    return _in(0x4cc7f0fe, 0xa5283fe0, toggle);
}
exports.useSnowWheelVfxWhenUnsheltered = useSnowWheelVfxWhenUnsheltered;
function useVehicleCamStuntSettingsThisUpdate() {
    return _in(0x6493cf69, 0x859b116a);
}
exports.useVehicleCamStuntSettingsThisUpdate = useVehicleCamStuntSettingsThisUpdate;
function useVehicleTargetingReticule(p0) {
    return _in(0x0c698d8f, 0x099174c7, p0);
}
exports.useVehicleTargetingReticule = useVehicleTargetingReticule;
function useWaypointRecordingAsAssistedMovementRoute(name, p1, p2, p3) {
    return _in(0x5a353b8e, 0x6b1095b5, _ts(name), p1, _fv(p2), _fv(p3));
}
exports.useWaypointRecordingAsAssistedMovementRoute = useWaypointRecordingAsAssistedMovementRoute;
function usingMissionCreator(toggle) {
    return _in(0xf14878fc, 0x50bec6ee, toggle);
}
exports.usingMissionCreator = usingMissionCreator;
/**
 * Calculates distance between vectors.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function vdist(x1, y1, z1, x2, y2, z2) {
    return _in(0x2a488c17, 0x6d52cca5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf);
}
exports.vdist = vdist;
/**
 * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
function vdist2(x1, y1, z1, x2, y2, z2) {
    return _in(0xb7a62832, 0x0eff8e47, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf);
}
exports.vdist2 = vdist2;
/**
 * calls from vehicle to net.
 *
 * @param vehicle
 */
function vehToNet(vehicle) {
    return _in(0xb4c94523, 0xf023419c, vehicle, _r, _ri);
}
exports.vehToNet = vehToNet;
function vehicleSetEnableNormaliseRampCarVerticalVeloctiy(p0, p1) {
    return _in(0x756ae6e9, 0x62168a04, p0, p1);
}
exports.vehicleSetEnableNormaliseRampCarVerticalVeloctiy = vehicleSetEnableNormaliseRampCarVerticalVeloctiy;
function vehicleSetEnableRampCarSideImpulse(p0, p1) {
    return _in(0x1bbac99c, 0x0bc53656, p0, p1);
}
exports.vehicleSetEnableRampCarSideImpulse = vehicleSetEnableRampCarSideImpulse;
function vehicleSetExtenableSideTargetRatio(p0, p1) {
    return _in(0xf3b0e0ae, 0xd097a3f5, p0, p1, _r, _ri);
}
exports.vehicleSetExtenableSideTargetRatio = vehicleSetExtenableSideTargetRatio;
function vehicleSetJetWashForceEnabled(p0) {
    return _in(0x9d30687c, 0x57baa0bb, p0);
}
exports.vehicleSetJetWashForceEnabled = vehicleSetJetWashForceEnabled;
function vehicleSetOverrideExtenableSideRatio(p0, p1) {
    return _in(0x0419b167, 0xee128f33, p0, p1, _r, _ri);
}
exports.vehicleSetOverrideExtenableSideRatio = vehicleSetOverrideExtenableSideRatio;
function vehicleSetOverrideSideRatio(p0, p1) {
    return _in(0xd3e51c0a, 0xb8c26eee, p0, p1, _r, _ri);
}
exports.vehicleSetOverrideSideRatio = vehicleSetOverrideSideRatio;
/**
 * Parachute models:
 * - sr_prop_specraces_para_s_01
 * - imp_prop_impexp_para_s (SecuroServ; Default)
 * Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
 * @param vehicle
 * @param modelHash
 */
function vehicleSetParachuteModelOverride(vehicle, modelHash) {
    return _in(0x4d610c6b, 0x56031351, vehicle, _ch(modelHash));
}
exports.vehicleSetParachuteModelOverride = vehicleSetParachuteModelOverride;
/**
 * Variations available for the generic parachute (sr_prop_specraces_para_s_01):
 * - 0: Rainbow
 * - 1: Red
 * - 2: White, blue, yellow
 * - 3: Black, red, white
 * - 4: Red, white, blue
 * - 5: Blue
 * - 6: Black
 * - 7: Black, yellow
 * @param vehicle
 * @param textureVariation
 */
function vehicleSetParachuteModelTintIndex(vehicle, textureVariation) {
    return _in(0xa74ad243, 0x9468c883, vehicle, textureVariation);
}
exports.vehicleSetParachuteModelTintIndex = vehicleSetParachuteModelTintIndex;
function vehicleSetRampAndRammingCarsTakeDamage(vehicle, toggle) {
    return _in(0x28d034a9, 0x3fe31bf5, vehicle, toggle);
}
exports.vehicleSetRampAndRammingCarsTakeDamage = vehicleSetRampAndRammingCarsTakeDamage;
function vehicleStartParachuting(vehicle, active) {
    return _in(0x0bffb028, 0xb3dd0a97, vehicle, active);
}
exports.vehicleStartParachuting = vehicleStartParachuting;
function vehicleWaypointPlaybackOverrideSpeed(vehicle, speed) {
    return _in(0x121f0593, 0xe0a431d7, vehicle, _fv(speed));
}
exports.vehicleWaypointPlaybackOverrideSpeed = vehicleWaypointPlaybackOverrideSpeed;
function vehicleWaypointPlaybackPause(vehicle) {
    return _in(0x8a4e6ac3, 0x73666bc5, vehicle);
}
exports.vehicleWaypointPlaybackPause = vehicleWaypointPlaybackPause;
function vehicleWaypointPlaybackResume(vehicle) {
    return _in(0xdc04fcaa, 0x7839d492, vehicle);
}
exports.vehicleWaypointPlaybackResume = vehicleWaypointPlaybackResume;
function vehicleWaypointPlaybackUseDefaultSpeed(vehicle) {
    return _in(0x5ceb25a7, 0xd2848963, vehicle);
}
exports.vehicleWaypointPlaybackUseDefaultSpeed = vehicleWaypointPlaybackUseDefaultSpeed;
/**
 * Calculates the magnitude of a vector.
 * @param x
 * @param y
 * @param z
 */
function vmag(x, y, z) {
    return _in(0x652d2eee, 0xf1d3e62c, _fv(x), _fv(y), _fv(z), _r, _rf);
}
exports.vmag = vmag;
/**
 * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
 * @param x
 * @param y
 * @param z
 */
function vmag2(x, y, z) {
    return _in(0xa8ceacb4, 0xf35ae058, _fv(x), _fv(y), _fv(z), _r, _rf);
}
exports.vmag2 = vmag2;
/**
 * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
 * @param ms
 */
function wait(ms) {
    return _in(0x4ede34fb, 0xadd967a6, ms);
}
exports.wait = wait;
function wasCutsceneSkipped() {
    return _in(0x40c8656e, 0xdaedd569, _r);
}
exports.wasCutsceneSkipped = wasCutsceneSkipped;
function wasFlyCamConstrainedOnPreviousUdpate(cam) {
    return _in(0x5c48a1d6, 0xe3b33179, cam, _r);
}
exports.wasFlyCamConstrainedOnPreviousUdpate = wasFlyCamConstrainedOnPreviousUdpate;
function wasPedKilledByStealth(ped) {
    return _in(0xf9800aa1, 0xa771b000, ped, _r);
}
exports.wasPedKilledByStealth = wasPedKilledByStealth;
function wasPedKilledByTakedown(ped) {
    return _in(0x7f08e260, 0x39c7347c, ped, _r);
}
exports.wasPedKilledByTakedown = wasPedKilledByTakedown;
function wasPedKnockedOut(ped) {
    return _in(0x61767f73, 0xeaceed21, ped, _r);
}
exports.wasPedKnockedOut = wasPedKnockedOut;
/**
 * Despite this function's name, it simply returns whether the specified handle is a Ped.
 * @param ped
 */
function wasPedSkeletonUpdated(ped) {
    return _in(0x11b499c1, 0xe0ff8559, ped, _r);
}
exports.wasPedSkeletonUpdated = wasPedSkeletonUpdated;
/**
 * This function is hard-coded to always return 1.
 * @param p0
 */
function wasVcWithdrawalSuccessful(p0) {
    return _in(0x6fcf8dde, 0xa146c45b, p0, _r);
}
exports.wasVcWithdrawalSuccessful = wasVcWithdrawalSuccessful;
function washDecalsFromVehicle(vehicle, p1) {
    return _in(0x5b712761, 0x429dbc14, vehicle, _fv(p1));
}
exports.washDecalsFromVehicle = washDecalsFromVehicle;
function washDecalsInRange(x, y, z, range, p4) {
    return _in(0x9c30613d, 0x50a6adef, _fv(x), _fv(y), _fv(z), _fv(range), _fv(p4));
}
exports.washDecalsInRange = washDecalsInRange;
function waterOverrideFadeIn(p0) {
    return _in(0xa8434f1d, 0xff41d6e7, _fv(p0));
}
exports.waterOverrideFadeIn = waterOverrideFadeIn;
function waterOverrideFadeOut(p0) {
    return _in(0xc3c221ad, 0xdde31a11, _fv(p0));
}
exports.waterOverrideFadeOut = waterOverrideFadeOut;
function waterOverrideSetOceannoiseminamplitude(minAmplitude) {
    return _in(0x31727907, 0xb2c43c55, _fv(minAmplitude));
}
exports.waterOverrideSetOceannoiseminamplitude = waterOverrideSetOceannoiseminamplitude;
function waterOverrideSetOceanwaveamplitude(amplitude) {
    return _in(0x405591ec, 0x8fd9096d, _fv(amplitude));
}
exports.waterOverrideSetOceanwaveamplitude = waterOverrideSetOceanwaveamplitude;
function waterOverrideSetOceanwavemaxamplitude(maxAmplitude) {
    return _in(0xb3e6360d, 0xde733e82, _fv(maxAmplitude));
}
exports.waterOverrideSetOceanwavemaxamplitude = waterOverrideSetOceanwavemaxamplitude;
function waterOverrideSetOceanwaveminamplitude(minAmplitude) {
    return _in(0xf751b16f, 0xb32abc1d, _fv(minAmplitude));
}
exports.waterOverrideSetOceanwaveminamplitude = waterOverrideSetOceanwaveminamplitude;
function waterOverrideSetRipplebumpiness(bumpiness) {
    return _in(0x7c9c0b1e, 0xeb1f9072, _fv(bumpiness));
}
exports.waterOverrideSetRipplebumpiness = waterOverrideSetRipplebumpiness;
function waterOverrideSetRippledisturb(disturb) {
    return _in(0xb9854dfd, 0xe0d833d6, _fv(disturb));
}
exports.waterOverrideSetRippledisturb = waterOverrideSetRippledisturb;
function waterOverrideSetRipplemaxbumpiness(maxBumpiness) {
    return _in(0x9f5e6bb6, 0xb34540da, _fv(maxBumpiness));
}
exports.waterOverrideSetRipplemaxbumpiness = waterOverrideSetRipplemaxbumpiness;
function waterOverrideSetRippleminbumpiness(minBumpiness) {
    return _in(0x6216b116, 0x083a7cb4, _fv(minBumpiness));
}
exports.waterOverrideSetRippleminbumpiness = waterOverrideSetRippleminbumpiness;
function waterOverrideSetShorewaveamplitude(amplitude) {
    return _in(0xb8f87ead, 0x7533b176, _fv(amplitude));
}
exports.waterOverrideSetShorewaveamplitude = waterOverrideSetShorewaveamplitude;
function waterOverrideSetShorewavemaxamplitude(maxAmplitude) {
    return _in(0xa7a11274, 0x90312c36, _fv(maxAmplitude));
}
exports.waterOverrideSetShorewavemaxamplitude = waterOverrideSetShorewavemaxamplitude;
function waterOverrideSetShorewaveminamplitude(minAmplitude) {
    return _in(0xc3ead29a, 0xb273ece8, _fv(minAmplitude));
}
exports.waterOverrideSetShorewaveminamplitude = waterOverrideSetShorewaveminamplitude;
/**
 * This seems to edit the water wave, intensity around your current location.
 *
 * 0.0f = Normal
 * 1.0f = So Calm and Smooth, a boat will stay still.
 * 3.0f = Really Intense.
 * @param strength
 */
function waterOverrideSetStrength(strength) {
    return _in(0xc54a08c8, 0x5ae4d410, _fv(strength));
}
exports.waterOverrideSetStrength = waterOverrideSetStrength;
function waterReflectionSetScriptObjectVisibility(p0) {
    return _in(0xca465d9c, 0xc0d231ba, p0);
}
exports.waterReflectionSetScriptObjectVisibility = waterReflectionSetScriptObjectVisibility;
function waypointPlaybackGetIsPaused(p0) {
    return _in(0x701375a7, 0xd43f01cb, p0, _r);
}
exports.waypointPlaybackGetIsPaused = waypointPlaybackGetIsPaused;
function waypointPlaybackOverrideSpeed(p0, p1, p2) {
    return _in(0x7d7d2b47, 0xfa788e85, p0, _fv(p1), p2);
}
exports.waypointPlaybackOverrideSpeed = waypointPlaybackOverrideSpeed;
function waypointPlaybackPause(p0, p1, p2) {
    return _in(0x0f342546, 0xaa06fed5, p0, p1, p2);
}
exports.waypointPlaybackPause = waypointPlaybackPause;
function waypointPlaybackResume(p0, p1, p2, p3) {
    return _in(0x244f70c8, 0x4c547d2d, p0, p1, p2, p3);
}
exports.waypointPlaybackResume = waypointPlaybackResume;
function waypointPlaybackStartAimingAtCoord(ped, x, y, z, p4) {
    return _in(0x8968400d, 0x900ed8b3, ped, _fv(x), _fv(y), _fv(z), p4);
}
exports.waypointPlaybackStartAimingAtCoord = waypointPlaybackStartAimingAtCoord;
function waypointPlaybackStartAimingAtPed(ped, target, p2) {
    return _in(0x20e33093, 0x7c399d29, ped, target, p2);
}
exports.waypointPlaybackStartAimingAtPed = waypointPlaybackStartAimingAtPed;
function waypointPlaybackStartShootingAtCoord(ped, x, y, z, p4, firingPattern) {
    return _in(0x057a25cf, 0xcc9db671, ped, _fv(x), _fv(y), _fv(z), p4, _ch(firingPattern));
}
exports.waypointPlaybackStartShootingAtCoord = waypointPlaybackStartShootingAtCoord;
function waypointPlaybackStartShootingAtPed(ped, ped2, p2, p3) {
    return _in(0xe70ba7b9, 0x0f8390dc, ped, ped2, p2, p3);
}
exports.waypointPlaybackStartShootingAtPed = waypointPlaybackStartShootingAtPed;
function waypointPlaybackStopAimingOrShooting(ped) {
    return _in(0x47efa040, 0xebb8e2ea, ped);
}
exports.waypointPlaybackStopAimingOrShooting = waypointPlaybackStopAimingOrShooting;
function waypointPlaybackUseDefaultSpeed(p0) {
    return _in(0x6599d834, 0xb12d0800, p0);
}
exports.waypointPlaybackUseDefaultSpeed = waypointPlaybackUseDefaultSpeed;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param x
 * @param y
 * @param z
 * @param point
 */
function waypointRecordingGetClosestWaypoint(name, x, y, z, point) {
    const [retval, point_out] = _in(0xb629a298, 0x081f876f, _ts(name), _fv(x), _fv(y), _fv(z), _ii(point), _r);
    return [retval, point_out];
}
exports.waypointRecordingGetClosestWaypoint = waypointRecordingGetClosestWaypoint;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param point
 * @param coord
 */
function waypointRecordingGetCoord(name, point, coord) {
    const [retval, coord_out] = _in(0x2fb89740, 0x5c90b361, _ts(name), point, _v, _r);
    return [retval, _mv(coord_out)];
}
exports.waypointRecordingGetCoord = waypointRecordingGetCoord;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param points
 */
function waypointRecordingGetNumPoints(name, points) {
    const [retval, points_out] = _in(0x5343532c, 0x01a07234, _ts(name), _ii(points), _r);
    return [retval, points_out];
}
exports.waypointRecordingGetNumPoints = waypointRecordingGetNumPoints;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 * @param point
 */
function waypointRecordingGetSpeedAtPoint(name, point) {
    return _in(0x005622ae, 0xbc33aca9, _ts(name), point, _r, _rf);
}
exports.waypointRecordingGetSpeedAtPoint = waypointRecordingGetSpeedAtPoint;
/**
 * Does nothing and always returns 0.
 * @param amount
 */
function withdrawVc(amount) {
    return _in(0xf70efa14, 0xfe091429, amount, _r, _ri);
}
exports.withdrawVc = withdrawVc;
function wouldEntityBeOccluded(entityModelHash, x, y, z, p4) {
    return _in(0xee5d2a12, 0x2e09ec42, _ch(entityModelHash), _fv(x), _fv(y), _fv(z), p4, _r);
}
exports.wouldEntityBeOccluded = wouldEntityBeOccluded;
