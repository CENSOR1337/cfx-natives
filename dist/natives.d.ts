import { Vector3 } from "cfx-shared";
export declare function abortVehicleCrewEmblemRequest(p0: number): [boolean, number];
export declare function absf(value: number): number;
export declare function absi(value: number): number;
export declare function acos(p0: number): number;
/**
 * Appears to remove stealth kill action from memory
 * @param hash
 * @param enable
 */
export declare function actionManagerEnableAction(hash: number, enable: boolean): void;
/**
 * mode can be any of these:
 * SLOWMO_T1_TRAILER_SMASH
 * SLOWMO_T1_RAYFIRE_EXPLOSION
 * SLOWMO_PROLOGUE_VAULT
 * NIGEL_02_SLOWMO_SETTING
 * JSH_EXIT_TUNNEL_SLOWMO
 * SLOWMO_BIG_SCORE_JUMP
 * SLOWMO_FIB4_TRUCK_SMASH
 * SLOWMO_EXTREME_04
 * SLOW_MO_METH_HOUSE_RAYFIRE
 * BARRY_02_SLOWMO
 * BARRY_01_SLOWMO
 * @param mode
 */
export declare function activateAudioSlowmoMode(mode: string): void;
export declare function activateDamageTrackerOnNetworkId(netID: number, toggle: boolean): void;
export declare function activateDamageTrackerOnPlayer(player: number, toggle: boolean): void;
/**
 * Does stuff like this:
 * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
 *
 * Example:
 * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
 * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
 *
 * BOOL p1 is a toggle to define the game in pause.
 * int p2 is unknown but -1 always works, not sure why though.
 *
 * [30/03/2017] ins1de :
 *
 * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
 *
 * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
 * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
 * - FE_MENU_VERSION_SP_PAUSE
 * - FE_MENU_VERSION_MP_PAUSE
 * - FE_MENU_VERSION_CREATOR_PAUSE
 * - FE_MENU_VERSION_CUTSCENE_PAUSE
 * - FE_MENU_VERSION_SAVEGAME
 * - FE_MENU_VERSION_PRE_LOBBY
 * - FE_MENU_VERSION_LOBBY
 * - FE_MENU_VERSION_MP_CHARACTER_SELECT
 * - FE_MENU_VERSION_MP_CHARACTER_CREATION
 * - FE_MENU_VERSION_EMPTY
 * - FE_MENU_VERSION_EMPTY_NO_BACKGROUND
 * - FE_MENU_VERSION_TEXT_SELECTION
 * - FE_MENU_VERSION_CORONA
 * - FE_MENU_VERSION_CORONA_LOBBY
 * - FE_MENU_VERSION_CORONA_JOINED_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_FRIENDS
 * - FE_MENU_VERSION_CORONA_INVITE_CREWS
 * - FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
 * - FE_MENU_VERSION_CORONA_RACE
 * - FE_MENU_VERSION_CORONA_BETTING
 * - FE_MENU_VERSION_JOINING_SCREEN
 * - FE_MENU_VERSION_LANDING_MENU
 * - FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
 * @param menuhash
 * @param togglePause
 * @param component
 */
export declare function activateFrontendMenu(menuhash: number, togglePause: boolean, component: number): void;
/**
 * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
 *
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
export declare function activateInteriorEntitySet(interior: number, entitySetName: string): void;
export declare function activateInteriorGroupsUsingCamera(): void;
export declare function activatePhysics(entity: number): void;
/**
 * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
 * @param p0
 */
export declare function activateRockstarEditor(p0: number): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 * @param p1
 */
export declare function activityFeedActionStartWithCommandLine(p0: string, p1: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export declare function activityFeedActionStartWithCommandLineAdd(p0: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export declare function activityFeedAddIntToCaption(p0: number): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export declare function activityFeedAddLiteralSubstringToCaption(p0: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export declare function activityFeedAddSubstringToCaption(p0: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 * @param p1
 */
export declare function activityFeedCreate(p0: string, p1: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export declare function activityFeedLargeImageUrl(p0: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 *
 * Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
 * @param p0
 */
export declare function activityFeedOnlinePlayedWithPost(p0: string): void;
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 */
export declare function activityFeedPost(): void;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export declare function addAmmoToPed(ped: number, weaponHash: number, ammo: number): void;
/**
 * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
 * @param ped
 * @param amount
 */
export declare function addArmourToPed(ped: number, amount: number): void;
/**
 * Adds a rectangular blip for the specified coordinates/area.
 *
 * It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
 *
 * By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
 *
 * Example image:
 * minimap https://w.wew.wtf/pdcjig.png
 * big map https://w.wew.wtf/zgcjcm.png
 *
 * (Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
 * @param x
 * @param y
 * @param z
 * @param width
 * @param height
 */
export declare function addBlipForArea(x: number, y: number, z: number, width: number, height: number): number;
/**
 * Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
 * @param x
 * @param y
 * @param z
 */
export declare function addBlipForCoord(x: number, y: number, z: number): number;
/**
 * Returns red ( default ) blip attached to entity.
 *
 * Example:
 * Blip blip; //Put this outside your case or option
 * blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
 * HUD::SET_BLIP_AS_FRIENDLY(blip, true);
 * @param entity
 */
export declare function addBlipForEntity(entity: number): number;
export declare function addBlipForPickup(pickup: number): number;
export declare function addBlipForRadius(posX: number, posY: number, posZ: number, radius: number): number;
/**
 * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
 *
 * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
 *
 * p8 big values ~100 will slow down the camera movement before reaching this node
 *
 * p9 != 0 seems to override the rotation/pitch (bool?)
 * @param camera
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param length
 * @param smoothingStyle
 * @param rotationOrder
 */
export declare function addCamSplineNode(camera: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, length: number, smoothingStyle: number, rotationOrder: number): void;
/**
 * p0 is the spline camera to which the node is being added.
 * p1 is the camera used to create the node.
 * p3 is always 3 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
export declare function addCamSplineNodeUsingCamera(cam: number, cam2: number, length: number, p3: number): void;
/**
 * p0 is the spline camera to which the node is being added.
 * p1 is the camera used to create the node.
 * p3 is always 3 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
export declare function addCamSplineNodeUsingCameraFrame(cam: number, cam2: number, length: number, p3: number): void;
/**
 * p2 is always 2 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param length
 * @param p2
 */
export declare function addCamSplineNodeUsingGameplayFrame(cam: number, length: number, p2: number): void;
export declare function addCoverBlockingArea(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void;
export declare function addCoverPoint(x: number, y: number, z: number, direction: number, usage: number, height: number, arc: number, isPriority: boolean): number;
/**
 * decal types:
 *
 * public enum DecalTypes
 * {
 * splatters_blood = 1010,
 * splatters_blood_dir = 1015,
 * splatters_blood_mist = 1017,
 * splatters_mud = 1020,
 * splatters_paint = 1030,
 * splatters_water = 1040,
 * splatters_water_hydrant = 1050,
 * splatters_blood2 = 1110,
 * weapImpact_metal = 4010,
 * weapImpact_concrete = 4020,
 * weapImpact_mattress = 4030,
 * weapImpact_mud = 4032,
 * weapImpact_wood = 4050,
 * weapImpact_sand = 4053,
 * weapImpact_cardboard = 4040,
 * weapImpact_melee_glass = 4100,
 * weapImpact_glass_blood = 4102,
 * weapImpact_glass_blood2 = 4104,
 * weapImpact_shotgun_paper = 4200,
 * weapImpact_shotgun_mattress,
 * weapImpact_shotgun_metal,
 * weapImpact_shotgun_wood,
 * weapImpact_shotgun_dirt,
 * weapImpact_shotgun_tvscreen,
 * weapImpact_shotgun_tvscreen2,
 * weapImpact_shotgun_tvscreen3,
 * weapImpact_melee_concrete = 4310,
 * weapImpact_melee_wood = 4312,
 * weapImpact_melee_metal = 4314,
 * burn1 = 4421,
 * burn2,
 * burn3,
 * burn4,
 * burn5,
 * bang_concrete_bang = 5000,
 * bang_concrete_bang2,
 * bang_bullet_bang,
 * bang_bullet_bang2 = 5004,
 * bang_glass = 5031,
 * bang_glass2,
 * solidPool_water = 9000,
 * solidPool_blood,
 * solidPool_oil,
 * solidPool_petrol,
 * solidPool_mud,
 * porousPool_water,
 * porousPool_blood,
 * porousPool_oil,
 * porousPool_petrol,
 * porousPool_mud,
 * porousPool_water_ped_drip,
 * liquidTrail_water = 9050
 * }
 * @param decalType
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param width
 * @param height
 * @param rCoef
 * @param gCoef
 * @param bCoef
 * @param opacity
 * @param timeout
 * @param p17
 * @param p18
 * @param p19
 */
export declare function addDecal(decalType: number, posX: number, posY: number, posZ: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, width: number, height: number, rCoef: number, gCoef: number, bCoef: number, opacity: number, timeout: number, p17: boolean, p18: boolean, p19: boolean): number;
/**
 * To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export declare function addDispatchSpawnAngledBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number;
export declare function addDispatchSpawnSphereBlockingArea(x1: number, y1: number, x2: number, y2: number): number;
/**
 * doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
 * p5 only set to true in single player native scripts.
 * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
 *
 * door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
 * All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
 *
 * Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
 * @param doorHash
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param scriptDoor
 * @param isLocal
 */
export declare function addDoorToSystem(doorHash: number, modelHash: number, x: number, y: number, z: number, p5: boolean, scriptDoor: boolean, isLocal: boolean): void;
/**
 * Example:
 * GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
 *
 * I tried this and nothing happened...
 * @param entity
 * @param icon
 */
export declare function addEntityIcon(entity: number, icon: string): number;
/**
 * All found occurrences in b678d:
 * https://pastebin.com/ceu67jz8
 * @param entity
 * @param groupName
 * @param p2
 */
export declare function addEntityToAudioMixGroup(entity: number, groupName: string, p2: number): void;
/**
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 *
 * explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 * @param noDamage
 */
export declare function addExplosion(x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number, noDamage: boolean): void;
/**
 * isAudible: If explosion makes a sound.
 * isInvisible: If the explosion is invisible or not.
 * explosionType: See ADD_EXPLOSION.
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param explosionFx
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export declare function addExplosionWithUserVfx(x: number, y: number, z: number, explosionType: number, explosionFx: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
/**
 * Adds an area that seems to be related to pickup physics behavior.
 * Max amount of areas is 10. Only works in multiplayer.
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export declare function addExtendedPickupProbeArea(x: number, y: number, z: number, radius: number): void;
export declare function addExtraCalmingQuad(xLow: number, yLow: number, xHigh: number, yHigh: number, height: number): number;
/**
 * Returns the index of the newly created hospital spawn point.
 *
 * p3 might be radius?
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export declare function addHospitalRestart(x: number, y: number, z: number, p3: number, p4: number): number;
/**
 * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
 * GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
 *
 * p0 is -1, 0 - 35
 * p1 is a char or string (whatever you wanna call it)
 * p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
 * p3 is again -1, 0 - 35
 * p4 is again -1, 0 - 35
 * p5 is either 0 or 1 (bool ?)
 * p6 is either 0 or 1 (The func to determine this is bool)
 * p7 is either 0 or 1 (The func to determine this is bool)
 * p8 is either 0 or 1 (The func to determine this is bool)
 * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
 * p10 is either 0 or 1 (The func to determine this is bool)
 * p11 is either 0 or 1 (The func to determine this is bool)
 * p12 is unknown as in TU27 X360 scripts it only goes to p11.
 * @param index
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 */
export declare function addLineToConversation(index: number, p1: string, p2: string, p3: number, p4: number, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: number, p10: boolean, p11: boolean, p12: boolean): void;
export declare function addModelToCreatorBudget(modelHash: number): boolean;
export declare function addNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: number): number;
export declare function addNavmeshRequiredRegion(x: number, y: number, radius: number): void;
export declare function addNextMessageToPreviousBriefs(p0: boolean): void;
export declare function addOilDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number;
/**
 * isAudible: If explosion makes a sound.
 * isInvisible: If the explosion is invisible or not.
 * explosionType: See ADD_EXPLOSION.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export declare function addOwnedExplosion(ped: number, x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
export declare function addPatrolRouteLink(nodeId1: number, nodeId2: number): void;
/**
 * Example:
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
 *
 * p0 is between 0 and 4 in the scripts.
 *
 * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
 *
 * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
 * Examples:
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7 -- [[3]] ], 0.0, 0.0, 0.0, 0);
 *
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17 -- [[44]] ]._f3, l_B0[17 -- [[44]] ]._f3, 2000);
 *
 * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
 *
 * p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
 * @param nodeId
 * @param nodeType
 * @param posX
 * @param posY
 * @param posZ
 * @param headingX
 * @param headingY
 * @param headingZ
 * @param duration
 */
export declare function addPatrolRouteNode(nodeId: number, nodeType: string, posX: number, posY: number, posZ: number, headingX: number, headingY: number, headingZ: number, duration: number): void;
/**
 * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
export declare function addPedAmmoByType(ped: number, ammoTypeHash: number, ammo: number): void;
/**
 * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
 *
 * collection - PedDecorationCollection filename hash
 * overlay - Item name hash
 *
 * Example:
 * Entry inside "mpbeach_overlays.xml" -
 * <Item>
 * <uvPos x="0.500000" y="0.500000" />
 * <scale x="0.600000" y="0.500000" />
 * <rotation value="0.000000" />
 * <nameHash>FM_Hair_Fuzz</nameHash>
 * <txdHash>mp_hair_fuzz</txdHash>
 * <txtHash>mp_hair_fuzz</txtHash>
 * <zone>ZONE_HEAD</zone>
 * <type>TYPE_TATTOO</type>
 * <faction>FM</faction>
 * <garment>All</garment>
 * <gender>GENDER_DONTCARE</gender>
 * <award />
 * <awardLevel />
 * </Item>
 *
 * Code:
 * PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
 *
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param ped
 * @param collection
 * @param overlay
 */
export declare function addPedDecorationFromHashes(ped: number, collection: number, overlay: number): void;
/**
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param ped
 * @param collection
 * @param overlay
 */
export declare function addPedDecorationFromHashesInCorona(ped: number, collection: number, overlay: number): void;
/**
 * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
 *
 * AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
 *
 * =================================================
 * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
 * @param index
 * @param ped
 * @param p2
 */
export declare function addPedToConversation(index: number, ped: number, p2: string): void;
export declare function addPetrolDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number;
export declare function addPetrolTrailDecalInfo(x: number, y: number, z: number, p3: number): void;
export declare function addPickupToInteriorRoomByName(pickup: number, roomName: string): void;
export declare function addPlayerTargetableEntity(player: number, entity: number): void;
export declare function addPointToGpsCustomRoute(x: number, y: number, z: number): void;
export declare function addPointToGpsMultiRoute(x: number, y: number, z: number): void;
export declare function addPoliceRestart(p0: number, p1: number, p2: number, p3: number, p4: number): number;
export declare function addPopMultiplierArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number, p7: number, p8: boolean, p9: boolean): number;
/**
 * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param pedMultiplier
 * @param vehicleMultiplier
 * @param p6
 * @param p7
 */
export declare function addPopMultiplierSphere(x: number, y: number, z: number, radius: number, pedMultiplier: number, vehicleMultiplier: number, p6: boolean, p7: boolean): number;
/**
 * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
 * @param name
 * @param groupHash
 */
export declare function addRelationshipGroup(name: string, groupHash: number): [boolean, number];
export declare function addReplayStatValue(value: number): void;
export declare function addRoadNodeSpeedZone(x: number, y: number, z: number, radius: number, speed: number, p5: boolean): number;
/**
 * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
 * __
 *
 * Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
 *
 * When attached, Position<vector> does not matter
 * When attached, Angle<vector> does not matter
 *
 * Rope Type:
 * 4 and bellow is a thick rope
 * 5 and up are small metal wires
 * 0 crashes the game
 *
 * Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
 *
 * windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
 *
 * Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
 *
 * breakable - Whether or not shooting the rope will break it.
 *
 * unkPtr - unknown ptr, always 0 in orig scripts
 * __
 *
 * Lengths can be calculated like so:
 *
 * float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
 *
 *
 * NOTES:
 *
 * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
 *
 * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param length
 * @param ropeType
 * @param maxLength
 * @param minLength
 * @param windingSpeed
 * @param p11
 * @param p12
 * @param rigid
 * @param p14
 * @param breakWhenShot
 * @param unkPtr
 */
export declare function addRope(x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, length: number, ropeType: number, maxLength: number, minLength: number, windingSpeed: number, p11: boolean, p12: boolean, rigid: boolean, p14: number, breakWhenShot: boolean, unkPtr: number): [number, number];
export declare function addScenarioBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean): number;
/**
 * BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
 *
 * - Nacorpio
 *
 * -----
 *
 * Hardcoded to not work in Multiplayer.
 * @param name
 * @param model
 * @param p2
 * @param p3
 */
export declare function addScriptToRandomPed(name: string, model: number, p2: number, p3: number): void;
export declare function addScriptedCoverArea(x: number, y: number, z: number, radius: number): void;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export declare function addShockingEventAtPosition(eventType: number, x: number, y: number, z: number, duration: number): number;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param entity
 * @param duration
 */
export declare function addShockingEventForEntity(eventType: number, entity: number, duration: number): number;
/**
 * See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param camX
 * @param camY
 * @param camZ
 * @param p15
 * @param p16
 * @param p17
 */
export declare function addStuntJump(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, camX: number, camY: number, camZ: number, p15: number, p16: number, p17: number): number;
/**
 * Creates a new stunt jump.
 *
 * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
 *
 * Info about the specific 'parameter sections':
 *
 *
 * **x1, y1, z1, x2, y2, z2 and radius1:**
 *
 * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
 *
 *
 * **x3, y3, z3, x4, y4, z4 and radius2:**
 *
 * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
 *
 *
 * **camX, camY and camZ:**
 *
 * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
 *
 *
 * **unk1, unk2 and unk3:**
 *
 * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
 *
 * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius1
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param radius2
 * @param camX
 * @param camY
 * @param camZ
 * @param p17
 * @param p18
 * @param p19
 */
export declare function addStuntJumpAngled(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius1: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, radius2: number, camX: number, camY: number, camZ: number, p17: number, p18: number, p19: number): number;
export declare function addTacticalNavMeshPoint(x: number, y: number, z: number): void;
export declare function addTcmodifierOverride(modifierName1: string, modifierName2: string): void;
export declare function addTextComponentFloat(value: number, decimalPlaces: number): void;
export declare function addTextComponentFormattedInteger(value: number, commaSeparated: boolean): void;
export declare function addTextComponentInteger(value: number): void;
export declare function addTextComponentSubstringBlipName(blip: number): void;
export declare function addTextComponentSubstringKeyboardDisplay(string: string): void;
/**
 * p1 was always -1
 * @param p0
 * @param p1
 */
export declare function addTextComponentSubstringPhoneNumber(p0: string, p1: number): void;
export declare function addTextComponentSubstringPlayerName(text: string): void;
export declare function addTextComponentSubstringTextLabel(labelName: string): void;
/**
 * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
 * @param gxtEntryHash
 */
export declare function addTextComponentSubstringTextLabelHashKey(gxtEntryHash: number): void;
/**
 * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
 * @param timestamp
 * @param flags
 */
export declare function addTextComponentSubstringTime(timestamp: number, flags: number): void;
/**
 * This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
 * @param website
 */
export declare function addTextComponentSubstringWebsite(website: string): void;
export declare function addToClockTime(hours: number, minutes: number, seconds: number): void;
export declare function addToItemset(item: number, itemset: number): boolean;
export declare function addValidVehicleHitHash(p0: number): void;
export declare function addVehicleCombatAngledAvoidanceArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
/**
 * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
 * @param vehicle
 * @param ped
 * @param boneIndex
 * @param x1
 * @param x2
 * @param x3
 * @param y1
 * @param y2
 * @param y3
 * @param z1
 * @param z2
 * @param z3
 * @param scale
 * @param p13
 * @param alpha
 */
export declare function addVehicleCrewEmblem(vehicle: number, ped: number, boneIndex: number, x1: number, x2: number, x3: number, y1: number, y2: number, y3: number, z1: number, z2: number, z3: number, scale: number, p13: number, alpha: number): boolean;
export declare function addVehiclePhoneExplosiveDevice(vehicle: number): void;
export declare function addVehicleStuckCheckWithWarp(p0: number, p1: number, p2: number, p3: boolean, p4: boolean, p5: boolean, p6: number): void;
/**
 * x, y, z: offset in world coords from some entity.
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export declare function addVehicleSubtaskAttackCoord(ped: number, x: number, y: number, z: number): void;
export declare function addVehicleSubtaskAttackPed(ped: number, target: number): void;
export declare function addVehicleUpsidedownCheck(vehicle: number): void;
export declare function adjustAmbientPedSpawnDensitiesThisFrame(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
export declare function adjustNextPosSizeAsNormalized169(): void;
export declare function advanceClockTimeTo(hour: number, minute: number, second: number): void;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export declare function allowAllPlayersToCollectPickupsOfType(pickupHash: number): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function allowAlternativeScriptControlsLayout(control: number): void;
/**
 * This native doesn't seem to do anything, might be a debug-only native.
 *
 * Confirmed, it is a debug native.
 * @param vehicle
 */
export declare function allowAmbientVehiclesToAvoidAdverseConditions(vehicle: number): void;
export declare function allowBoatBoomToAnimate(vehicle: number, toggle: boolean): void;
export declare function allowDamageEventsForNonNetworkedObjects(value: boolean): void;
/**
 * Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
 * @param allow
 */
export declare function allowDisplayOfMultiplayerCashText(allow: boolean): void;
export declare function allowEvasionHudIfDisablingHiddenEvasionThisFrame(player: number, p1: number): void;
export declare function allowMissionCreatorWarp(toggle: boolean): void;
export declare function allowMotionBlurDecay(p0: number, p1: boolean): void;
/**
 * Allows opening the pause menu this frame, when the player is dead.
 */
export declare function allowPauseWhenNotInStateOfPlayThisFrame(): void;
export declare function allowPickupArrowMarkerWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function allowPickupByNoneParticipant(pickup: number, toggle: boolean): void;
export declare function allowPlayerSwitchAscent(): void;
export declare function allowPlayerSwitchDescent(): void;
export declare function allowPlayerSwitchOutro(): void;
export declare function allowPlayerSwitchPan(): void;
export declare function allowPortablePickupToMigrateToNonParticipants(pickup: number, toggle: boolean): void;
export declare function allowSonarBlips(toggle: boolean): void;
export declare function allowTrainToBeRemovedByPopulation(p0: number): void;
/**
 * Example from michael2 script.
 *
 * CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 * @param amplitude
 */
export declare function animatedShakeCam(cam: number, p1: string, p2: string, p3: string, amplitude: number): void;
/**
 * CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export declare function animatedShakeScriptGlobal(p0: string, p1: string, p2: string, p3: number): void;
/**
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export declare function animpostfxGetCurrentTime(effectName: string): number;
/**
 * Returns whether the specified effect is active.
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export declare function animpostfxIsRunning(effectName: string): boolean;
/**
 * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
 * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 * @param duration
 * @param looped
 */
export declare function animpostfxPlay(effectName: string, duration: number, looped: boolean): void;
/**
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export declare function animpostfxStop(effectName: string): void;
/**
 * Stops ALL currently playing effects.
 */
export declare function animpostfxStopAll(): void;
/**
 * Stops the effect and sets a value (bool) in its data (+0x199) to false.
 * See ANIMPOSTFX_PLAY
 *
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export declare function animpostfxStopAndFlushRequests(effectName: string): void;
export declare function appClearBlock(): void;
export declare function appCloseApp(): void;
export declare function appCloseBlock(): void;
export declare function appDataValid(): boolean;
export declare function appDeleteAppData(appName: string): boolean;
export declare function appGetDeletedFileStatus(): number;
export declare function appGetFloat(property: string): number;
export declare function appGetInt(property: string): number;
export declare function appGetString(property: string): string;
export declare function appHasLinkedSocialClubAccount(): boolean;
export declare function appHasSyncedData(appName: string): boolean;
export declare function appSaveData(): void;
/**
 * Called in the gamescripts like:
 * APP::APP_SET_APP("car");
 * APP::APP_SET_APP("dog");
 * @param appName
 */
export declare function appSetApp(appName: string): void;
export declare function appSetBlock(blockName: string): void;
export declare function appSetFloat(property: string, value: number): void;
export declare function appSetInt(property: string, value: number): void;
export declare function appSetString(property: string, value: string): void;
/**
 * damages a ped with the given amount
 * @param ped
 * @param damageAmount
 * @param p2
 * @param p3
 */
export declare function applyDamageToPed(ped: number, damageAmount: number, p2: boolean, p3: number): void;
/**
 * Documented here:
 * gtaforums.com/topic/885669-precisely-define-object-physics/
 * gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
 *
 * forceFlags:
 * First bit (lowest): Strong force flag, factor 100
 * Second bit: Unkown flag
 * Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
 * If higher bits are unequal 0 the function doesn't applay any forces at all.
 * (As integer possible values are 0-7)
 *
 * 0: weak force
 * 1: strong force
 * 2: same as 0 (2nd bit?)
 * 3: same as 1
 * 4: weak momentum
 * 5: strong momentum
 * 6: same as 4
 * 7: same as 5
 *
 * isLocal: vector defined in local (body-fixed) coordinate frame
 * isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
 *
 * p8 !!! Whenever I set this !=0, my script stopped.
 * @param entity
 * @param forceFlags
 * @param x
 * @param y
 * @param z
 * @param offX
 * @param offY
 * @param offZ
 * @param boneIndex
 * @param isDirectionRel
 * @param ignoreUpVec
 * @param isForceRel
 * @param p12
 * @param p13
 */
export declare function applyForceToEntity(entity: number, forceFlags: number, x: number, y: number, z: number, offX: number, offY: number, offZ: number, boneIndex: number, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean, p12: boolean, p13: boolean): void;
/**
 * Applies a force to the specified entity.
 *
 * **List of force types (p1)**:
 * public enum ForceType
 * {
 * MinForce = 0,
 * MaxForceRot = 1,
 * MinForce2 = 2,
 * MaxForceRot2 = 3,
 * ForceNoRot = 4,
 * ForceRotPlusForce = 5
 * }
 * Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
 *
 * p6/relative - makes the xyz force not relative to world coords, but to something else
 * p7/highForce - setting false will make the force really low
 * @param entity
 * @param forceType
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param isDirectionRel
 * @param isForceRel
 * @param p8
 */
export declare function applyForceToEntityCenterOfMass(entity: number, forceType: number, x: number, y: number, z: number, p5: boolean, isDirectionRel: boolean, isForceRel: boolean, p8: boolean): void;
export declare function applyImpulseToCloth(posX: number, posY: number, posZ: number, vecX: number, vecY: number, vecZ: number, impulse: number): void;
/**
 * woundTypes:
 * - soak_splat
 * - wound_sheet
 * - BulletSmall
 * - BulletLarge
 * - ShotgunSmall
 * - ShotgunSmallMonolithic
 * - ShotgunLarge
 * - ShotgunLargeMonolithic
 * - NonFatalHeadshot
 * - stab
 * - BasicSlash
 * - Scripted_Ped_Splash_Back
 * - BackSplash
 * @param ped
 * @param boneIndex
 * @param xRot
 * @param yRot
 * @param zRot
 * @param woundType
 */
export declare function applyPedBlood(ped: number, boneIndex: number, xRot: number, yRot: number, zRot: number, woundType: string): void;
export declare function applyPedBloodByZone(ped: number, p1: number, p2: number, p3: number, p4: string): void;
export declare function applyPedBloodDamageByZone(ped: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function applyPedBloodSpecific(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: string): void;
/**
 * enum eDamageZone
 * {
 * DZ_Torso = 0,
 * DZ_Head,
 * DZ_LeftArm,
 * DZ_RightArm,
 * DZ_LeftLeg,
 * DZ_RightLeg,
 * };
 *
 * Decal Names:
 * scar
 * blushing
 * cs_flush_anger
 * cs_flush_anger_face
 * bruise
 * bruise_large
 * herpes
 * ArmorBullet
 * basic_dirt_cloth
 * basic_dirt_skin
 * cs_trev1_dirt
 *
 * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
 * @param ped
 * @param damageZone
 * @param xOffset
 * @param yOffset
 * @param heading
 * @param scale
 * @param alpha
 * @param variation
 * @param fadeIn
 * @param decalName
 */
export declare function applyPedDamageDecal(ped: number, damageZone: number, xOffset: number, yOffset: number, heading: number, scale: number, alpha: number, variation: number, fadeIn: boolean, decalName: string): void;
/**
 * Damage Packs:
 *
 * "SCR_TrevorTreeBang"
 * "HOSPITAL_0"
 * "HOSPITAL_1"
 * "HOSPITAL_2"
 * "HOSPITAL_3"
 * "HOSPITAL_4"
 * "HOSPITAL_5"
 * "HOSPITAL_6"
 * "HOSPITAL_7"
 * "HOSPITAL_8"
 * "HOSPITAL_9"
 * "SCR_Dumpster"
 * "BigHitByVehicle"
 * "SCR_Finale_Michael_Face"
 * "SCR_Franklin_finb"
 * "SCR_Finale_Michael"
 * "SCR_Franklin_finb2"
 * "Explosion_Med"
 * "SCR_Torture"
 * "SCR_TracySplash"
 * "Skin_Melee_0"
 *
 * Additional damage packs:
 *
 * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
 * Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
 * @param ped
 * @param damagePack
 * @param damage
 * @param mult
 */
export declare function applyPedDamagePack(ped: number, damagePack: string, damage: number, mult: number): void;
export declare function areAllNavmeshRegionsLoaded(): boolean;
/**
 * Appears to return false if any window is broken.
 * @param vehicle
 */
export declare function areAllVehicleWindowsIntact(vehicle: number): boolean;
export declare function areAnyCcsPending(): boolean;
/**
 * Returns false if every seat is occupied.
 * @param vehicle
 */
export declare function areAnyVehicleSeatsFree(vehicle: number): boolean;
export declare function areCreditsRunning(): boolean;
/**
 * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
 */
export declare function areCutsceneEntitiesNetworked(): boolean;
export declare function areEntitiesEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: number): boolean;
/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * @param vehicle
 */
export declare function areFoldingWingsDeployed(vehicle: number): boolean;
export declare function areMissileBaysDeployed(vehicle: number): boolean;
export declare function areNodesLoadedForArea(x1: number, y1: number, x2: number, y2: number): boolean;
export declare function areOnlinePoliciesUpToDate(): boolean;
export declare function arePlaneControlPanelsIntact(vehicle: number, p1: boolean): boolean;
export declare function arePlanePropellersIntact(plane: number): boolean;
export declare function arePlayerFlashingStarsAboutToDrop(player: number): boolean;
export declare function arePlayerStarsGreyedOut(player: number): boolean;
export declare function areProfileSettingsValid(): boolean;
export declare function areStringsEqual(string1: string, string2: string): boolean;
export declare function areWidescreenBordersActive(): boolean;
export declare function areWingsOfPlaneIntact(plane: number): boolean;
export declare function asin(p0: number): number;
export declare function assistedMovementCloseRoute(): void;
export declare function assistedMovementFlushRoute(): void;
export declare function assistedMovementIsRouteLoaded(route: string): boolean;
export declare function assistedMovementOverrideLoadDistanceThisFrame(dist: number): void;
export declare function assistedMovementRemoveRoute(route: string): void;
/**
 * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
 * @param route
 */
export declare function assistedMovementRequestRoute(route: string): void;
export declare function assistedMovementSetRouteProperties(route: string, props: number): void;
export declare function atan(p0: number): number;
export declare function atan2(p0: number, p1: number): number;
/**
 * Last param determines if its relative to the Entity
 * @param cam
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
export declare function attachCamToEntity(cam: number, entity: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void;
export declare function attachCamToPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, heading: boolean): void;
/**
 * This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
 * @param cam
 * @param vehicle
 * @param boneIndex
 * @param relativeRotation
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param fixedDirection
 */
export declare function attachCamToVehicleBone(cam: number, vehicle: number, boneIndex: number, relativeRotation: boolean, rotX: number, rotY: number, rotZ: number, offsetX: number, offsetY: number, offsetZ: number, fixedDirection: boolean): void;
export declare function attachContainerToHandlerFrameWhenLinedUp(vehicle: number, entity: number): void;
/**
 * Attaches entity 1 to entity 2.
 * @param ropeId
 * @param ent1
 * @param ent2
 * @param ent1_x
 * @param ent1_y
 * @param ent1_z
 * @param ent2_x
 * @param ent2_y
 * @param ent2_z
 * @param length
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
export declare function attachEntitiesToRope(ropeId: number, ent1: number, ent2: number, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number, p10: boolean, p11: boolean): [number, number];
export declare function attachEntityBoneToEntityBone(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, p4: boolean, p5: boolean): void;
export declare function attachEntityBoneToEntityBoneYForward(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, p4: boolean, p5: boolean): void;
export declare function attachEntityToCargobob(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
/**
 * Attaches entity1 to bone (boneIndex) of entity2.
 *
 * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
 *
 * useSoftPinning - if set to false attached entity will not detach when fixed
 * collision - controls collision between the two entities (FALSE disables collision).
 * isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
 * vertexIndex - position of vertex
 * fixedRot - if false it ignores entity vector
 *
 * @param entity1
 * @param entity2
 * @param boneIndex
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param useSoftPinning
 * @param collision
 * @param isPed
 * @param vertexIndex
 * @param fixedRot
 * @param p15
 */
export declare function attachEntityToEntity(entity1: number, entity2: number, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p9: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean, p15: number): void;
/**
 * breakForce is the amount of force required to break the bond.
 * p14 - is always 1 in scripts
 * p15 - is 1 or 0 in scripts - unknoun what it does
 * p16 - controls collision between the two entities (FALSE disables collision).
 * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
 * p18 - is always 2 in scripts.
 *
 *
 * @param entity1
 * @param entity2
 * @param boneIndex1
 * @param boneIndex2
 * @param xPos1
 * @param yPos1
 * @param zPos1
 * @param xPos2
 * @param yPos2
 * @param zPos2
 * @param xRot
 * @param yRot
 * @param zRot
 * @param breakForce
 * @param fixedRot
 * @param p15
 * @param collision
 * @param p17
 * @param p18
 */
export declare function attachEntityToEntityPhysically(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, xRot: number, yRot: number, zRot: number, breakForce: number, fixedRot: boolean, p15: boolean, collision: boolean, p17: boolean, p18: number): void;
export declare function attachEntityToEntityPhysicallyOverrideInverseMass(firstEntityIndex: number, secondEntityIndex: number, firstEntityBoneIndex: number, secondEntityBoneIndex: number, secondEntityOffsetX: number, secondEntityOffsetY: number, secondEntityOffsetZ: number, firstEntityOffsetX: number, firstEntityOffsetY: number, firstEntityOffsetZ: number, vecRotationX: number, vecRotationY: number, vecRotationZ: number, physicalStrength: number, constrainRotation: boolean, doInitialWarp: boolean, collideWithEntity: boolean, addInitialSeperation: boolean, rotOrder: number, invMassScaleA: number, invMassScaleB: number): void;
export declare function attachPortablePickupToPed(pickupObject: number, ped: number): void;
/**
 * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
 * @param ropeId
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param p5
 */
export declare function attachRopeToEntity(ropeId: number, entity: number, x: number, y: number, z: number, p5: boolean): void;
export declare function attachSynchronizedSceneToEntity(sceneID: number, entity: number, boneIndex: number): void;
/**
 * Might be more appropriate in AUDIO?
 * @param entity
 */
export declare function attachTvAudioToEntity(entity: number): void;
/**
 * This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
 * @param vehicle
 * @param trailer
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param coordsX
 * @param coordsY
 * @param coordsZ
 * @param rotationX
 * @param rotationY
 * @param rotationZ
 * @param disableCollisions
 */
export declare function attachVehicleOnToTrailer(vehicle: number, trailer: number, offsetX: number, offsetY: number, offsetZ: number, coordsX: number, coordsY: number, coordsZ: number, rotationX: number, rotationY: number, rotationZ: number, disableCollisions: number): void;
export declare function attachVehicleToCargobob(vehicle: number, cargobob: number, p2: number, x: number, y: number, z: number): void;
/**
 * HookOffset defines where the hook is attached. leave at 0 for default attachment.
 * @param towTruck
 * @param vehicle
 * @param rear
 * @param hookOffsetX
 * @param hookOffsetY
 * @param hookOffsetZ
 */
export declare function attachVehicleToTowTruck(towTruck: number, vehicle: number, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void;
export declare function attachVehicleToTrailer(vehicle: number, trailer: number, radius: number): void;
export declare function audioIsMusicPlaying(): boolean;
/**
 * This is an alias of AUDIO_IS_MUSIC_PLAYING.
 */
export declare function audioIsScriptedMusicPlaying(): boolean;
export declare function badSportPlayerLeftDetected(event: number, amountReceived: number): [boolean, number];
export declare function beginCreateLowQualityCopyOfPhoto(p0: number): boolean;
export declare function beginCreateMissionCreatorPhotoPreview(): boolean;
export declare function beginReplayStats(p0: number, p1: number): void;
/**
 * Push a function from the Scaleform onto the stack
 *
 * @param scaleform
 * @param methodName
 */
export declare function beginScaleformMovieMethod(scaleform: number, methodName: string): boolean;
/**
 * Starts frontend (pause menu) scaleform movie methods.
 * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
 * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
 * @param methodName
 */
export declare function beginScaleformMovieMethodOnFrontend(methodName: string): boolean;
/**
 * Starts frontend (pause menu) scaleform movie methods for header options.
 * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
 * @param methodName
 */
export declare function beginScaleformMovieMethodOnFrontendHeader(methodName: string): boolean;
/**
 * Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
 *
 * Known components:
 * 19 - MP_RANK_BAR
 * 20 - HUD_DIRECTOR_MODE
 *
 * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
 * @param hudComponent
 * @param methodName
 */
export declare function beginScaleformScriptHudMovieMethod(hudComponent: number, methodName: string): boolean;
export declare function beginSrl(): void;
export declare function beginTakeHighQualityPhoto(): boolean;
export declare function beginTakeMissionCreatorPhoto(): boolean;
export declare function beginTextCommandAddDirectlyToPreviousBriefs(p0: string): void;
/**
 * Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
 *
 *
 * e.g
 * void StartLoadingMessage(char *text, int spinnerType = 3)
 * {
 * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
 * }
 *  -- [[OR]]
 * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
 * {
 * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
 * WAIT(timeMs);
 * BUSYSPINNER_OFF();
 * }
 *
 *
 * These are some localized strings used in the loading spinner.
 * "PM_WAIT"                   = Please Wait
 * "CELEB_WPLYRS"              = Waiting For Players.
 * "CELL_SPINNER2"             = Scanning storage.
 * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
 * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
 * "FM_COR_AUTOD"                        = Just spinner no text
 * "FM_IHELP_WAT2"                        = Waiting for other players
 * "FM_JIP_WAITO"                            = Game options are being set
 * "FMMC_DOWNLOAD"                    = Downloading
 * "FMMC_PLYLOAD"                         = Loading
 * "FMMC_STARTTRAN"                    = Launching session
 * "HUD_QUITTING"                           =  Quiting session
 * "KILL_STRIP_IDM"                         = Waiting for to accept
 * "MP_SPINLOADING"                      = Loading
 * @param string
 */
export declare function beginTextCommandBusyspinnerOn(string: string): void;
/**
 * clears a print text command with this text
 * @param text
 */
export declare function beginTextCommandClearPrint(text: string): void;
/**
 * Used to be known as _SET_TEXT_COMPONENT_FORMAT
 * @param inputType
 */
export declare function beginTextCommandDisplayHelp(inputType: string): void;
/**
 * The following were found in the decompiled script files:
 * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
 *
 * ESDOLLA - cash
 * ESMINDOLLA - cash (negative)
 *
 * Used to be known as _SET_TEXT_ENTRY
 * @param text
 */
export declare function beginTextCommandDisplayText(text: string): void;
/**
 * int GetLineCount(char *text, float x, float y)
 * {
 * BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
 * }
 * @param entry
 */
export declare function beginTextCommandGetNumberOfLinesForString(entry: string): void;
export declare function beginTextCommandGetScreenWidthOfDisplayText(text: string): void;
/**
 * nothin doin.
 *
 * BOOL Message(const char* text)
 * {
 * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
 * }
 * @param text
 */
export declare function beginTextCommandIsMessageDisplayed(text: string): void;
/**
 * BOOL IsContextActive(char *ctx)
 * {
 * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
 * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
 * }
 * @param labelName
 */
export declare function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName: string): void;
export declare function beginTextCommandOverrideButtonText(gxtEntry: string): void;
/**
 * void ShowSubtitle(const char *text)
 * {
 * BEGIN_TEXT_COMMAND_PRINT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_PRINT(2000, true);
 * }
 * @param GxtEntry
 */
export declare function beginTextCommandPrint(GxtEntry: string): void;
/**
 * Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
 *
 * Examples:
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
 * HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 *
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 *
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 *
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * @param componentType
 */
export declare function beginTextCommandScaleformString(componentType: string): void;
/**
 * Starts a text command to change the name of a blip displayed in the pause menu.
 * This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
 * Example:
 *
 * HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");
 * HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
 * @param textLabel
 */
export declare function beginTextCommandSetBlipName(textLabel: string): void;
/**
 * Declares the entry type of a notification, for example "STRING".
 *
 * int ShowNotification(char *text)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
 * }
 * @param text
 */
export declare function beginTextCommandThefeedPost(text: string): void;
export declare function bgDoesLaunchParamExist(scriptIndex: number, p1: string): boolean;
/**
 * Deletes the given context from the background scripts context map.
 * @param contextName
 */
export declare function bgEndContext(contextName: string): void;
/**
 * Hashed version of BG_END_CONTEXT.
 * @param contextHash
 */
export declare function bgEndContextHash(contextHash: number): void;
export declare function bgGetLaunchParamValue(scriptIndex: number, p1: string): number;
export declare function bgGetScriptIdFromNameHash(p0: number): number;
/**
 * Returns true if bit 0 in GtaThread+0x154 is set.
 */
export declare function bgIsExitflagSet(): boolean;
/**
 * Sets bit 1 in GtaThread+0x154
 */
export declare function bgSetExitflagResponse(): void;
/**
 * Inserts the given context into the background scripts context map.
 * @param contextName
 */
export declare function bgStartContext(contextName: string): void;
/**
 * Hashed version of BG_START_CONTEXT.
 * @param contextHash
 */
export declare function bgStartContextHash(contextHash: number): void;
/**
 * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
 * Only works on vehicles with a police siren.
 * @param vehicle
 */
export declare function blipSiren(vehicle: number): void;
export declare function blockAllSpeechFromPed(ped: number, p1: boolean, p2: boolean): void;
export declare function blockDeathJingle(toggle: boolean): void;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 *
 * This is limited to 4 blocked events at a time.
 * @param name
 * @param eventType
 */
export declare function blockDecisionMakerEvent(name: number, eventType: number): void;
export declare function blockDispatchServiceResourceCreation(dispatchService: number, toggle: boolean): void;
export declare function blockFirstPersonOrientationResetThisUpdate(): void;
export declare function blockPedFromGeneratingDeadBodyEventsWhenDead(ped: number, toggle: boolean): void;
export declare function blockPlayersForAmbientPickup(p0: number, p1: number): void;
export declare function blockSpeechContextGroup(p0: string, p1: number): void;
export declare function breakEntityGlass(entity: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean): void;
export declare function breakObjectFragmentChild(p0: number, p1: number, p2: boolean): void;
/**
 * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
 *
 * . distance defines how far it will travel until stopping. Garage doors use 3.0.
 *
 * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
 * @param vehicle
 * @param distance
 * @param duration
 * @param p3
 */
export declare function bringVehicleToHalt(vehicle: number, distance: number, duration: number, p3: boolean): void;
export declare function busyspinnerIsDisplaying(): boolean;
export declare function busyspinnerIsOn(): boolean;
/**
 * Removes the loading prompt at the bottom right of the screen.
 */
export declare function busyspinnerOff(): void;
export declare function bypassCameraCollisionBuoyancyTestThisUpdate(): void;
export declare function bypassCutsceneCamRenderingThisUpdate(): void;
/**
 * Calculates the travel distance between a set of points.
 *
 * Doesn't seem to correlate with distance on gps sometimes.
 * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
/**
 * Calls the Scaleform function.
 * @param scaleform
 * @param method
 */
export declare function callScaleformMovieMethod(scaleform: number, method: string): void;
/**
 * Calls the Scaleform function and passes the parameters as floats.
 *
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
export declare function callScaleformMovieMethodWithNumber(scaleform: number, methodName: string, param1: number, param2: number, param3: number, param4: number, param5: number): void;
/**
 * Calls the Scaleform function and passes both float and string parameters (in their respective order).
 *
 * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
 *
 * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
 *
 * Examples:
 * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
 * GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
 *
 * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
 * GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
 * @param scaleform
 * @param methodName
 * @param floatParam1
 * @param floatParam2
 * @param floatParam3
 * @param floatParam4
 * @param floatParam5
 * @param stringParam1
 * @param stringParam2
 * @param stringParam3
 * @param stringParam4
 * @param stringParam5
 */
export declare function callScaleformMovieMethodWithNumberAndString(scaleform: number, methodName: string, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void;
/**
 * Calls the Scaleform function and passes the parameters as strings.
 *
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
export declare function callScaleformMovieMethodWithString(scaleform: number, methodName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void;
export declare function cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate(): void;
export declare function canAnchorBoatHere(vehicle: number): boolean;
export declare function canAnchorBoatHereIgnorePlayers(vehicle: number): boolean;
export declare function canCargobobPickUpEntity(p0: number, p1: number): boolean;
export declare function canCreateRandomBikeRider(): boolean;
export declare function canCreateRandomCops(): boolean;
export declare function canCreateRandomDriver(): boolean;
export declare function canCreateRandomPed(p0: boolean): boolean;
export declare function canKnockPedOffVehicle(ped: number): boolean;
export declare function canPayAmountToBoss(p0: number, p1: number, amount: number, p3: number): [boolean, number];
export declare function canPedHearPlayer(player: number, ped: number): boolean;
export declare function canPedInCombatSeeTarget(ped: number, target: number): boolean;
/**
 * Prevents the ped from going limp.
 *
 * [Example: Can prevent peds from falling when standing on moving vehicles.]
 * @param ped
 */
export declare function canPedRagdoll(ped: number): boolean;
export declare function canPedSeeHatedPed(ped1: number, ped2: number): boolean;
export declare function canPedShuffleToOrFromExtraSeat(ped: number, p1: number): [boolean, number];
export declare function canPedShuffleToOrFromTurretSeat(ped: number, p1: number): [boolean, number];
/**
 * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
 *
 *
 * I can confirm the above. This function is hard-coded to always return 1.
 */
export declare function canPhoneBeSeenOnScreen(): boolean;
export declare function canPlayerStartMission(player: number): boolean;
export declare function canRegisterMissionDoors(p0: number): boolean;
export declare function canRegisterMissionEntities(ped_amt: number, vehicle_amt: number, object_amt: number, pickup_amt: number): boolean;
export declare function canRegisterMissionObjects(amount: number): boolean;
export declare function canRegisterMissionPeds(amount: number): boolean;
export declare function canRegisterMissionPickups(amount: number): boolean;
export declare function canRegisterMissionVehicles(amount: number): boolean;
export declare function canRequestAssetsForCutsceneEntity(): boolean;
/**
 * modelHash (p1) was always 0 in R* scripts
 * @param cutsceneEntName
 * @param modelHash
 */
export declare function canSetEnterStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean;
export declare function canSetExitStateForCamera(p0: boolean): boolean;
export declare function canSetExitStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean;
export declare function canShuffleSeat(vehicle: number, seatIndex: number): boolean;
export declare function canUseMobilePhoneDuringCutscene(): boolean;
/**
 * this returns if you can use the weapon while using a parachute
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export declare function canUseWeaponOnParachute(weaponHash: number): boolean;
export declare function canVehicleReceiveCbRadio(vehicle: number): boolean;
export declare function cancelAllPoliceReports(): void;
/**
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
export declare function cancelMusicEvent(eventName: string): boolean;
/**
 * DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
 * Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
 */
export declare function cancelOnscreenKeyboard(): void;
/**
 * Stops recording and discards the recorded clip.
 */
export declare function cancelReplayRecording(): void;
export declare function cancelStuntJump(): void;
/**
 * Does something similar to INTERIOR::DISABLE_INTERIOR
 * @param interior
 * @param toggle
 */
export declare function capInterior(interior: number, toggle: boolean): void;
export declare function cascadeShadowsClearShadowSampleType(): void;
/**
 * When this is set to ON, shadows only draw as you get nearer.
 *
 * When OFF, they draw from a further distance.
 * @param toggle
 */
export declare function cascadeShadowsEnableEntityTracker(toggle: boolean): void;
export declare function cascadeShadowsEnableFreezer(p0: boolean): void;
export declare function cascadeShadowsInitSession(): void;
export declare function cascadeShadowsSetAircraftMode(p0: boolean): void;
export declare function cascadeShadowsSetBoundPosition(p0: number): void;
export declare function cascadeShadowsSetCascadeBounds(p0: number, p1: boolean, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number): void;
export declare function cascadeShadowsSetCascadeBoundsScale(p0: number): void;
export declare function cascadeShadowsSetDynamicDepthMode(p0: boolean): void;
export declare function cascadeShadowsSetDynamicDepthValue(p0: number): void;
export declare function cascadeShadowsSetEntityTrackerScale(p0: number): void;
export declare function cascadeShadowsSetScreenSizeCheckEnabled(p0: boolean): void;
/**
 * Possible values:
 * "CSM_ST_POINT"
 * "CSM_ST_LINEAR"
 * "CSM_ST_TWOTAP"
 * "CSM_ST_BOX3x3"
 * "CSM_ST_BOX4x4"
 * "CSM_ST_DITHER2_LINEAR"
 * "CSM_ST_CUBIC"
 * "CSM_ST_DITHER4"
 * "CSM_ST_DITHER16"
 * "CSM_ST_SOFT16"
 * "CSM_ST_DITHER16_RPDB"
 * "CSM_ST_POISSON16_RPDB_GNORM"
 * "CSM_ST_HIGHRES_BOX4x4"
 * "CSM_ST_CLOUDS_SIMPLE"
 * "CSM_ST_CLOUDS_LINEAR"
 * "CSM_ST_CLOUDS_TWOTAP"
 * "CSM_ST_CLOUDS_BOX3x3"
 * "CSM_ST_CLOUDS_BOX4x4"
 * "CSM_ST_CLOUDS_DITHER2_LINEAR"
 * "CSM_ST_CLOUDS_SOFT16"
 * "CSM_ST_CLOUDS_DITHER16_RPDB"
 * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
 * @param type
 */
export declare function cascadeShadowsSetShadowSampleType(type: string): void;
export declare function cascadeShadowsSetSplitZExpWeight(p0: number): void;
/**
 * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
 * @param value
 */
export declare function ceil(value: number): number;
export declare function cellCamActivate(p0: boolean, p1: boolean): void;
export declare function cellCamActivateSelfieMode(toggle: boolean): void;
export declare function cellCamActivateShallowDofMode(toggle: boolean): void;
export declare function cellCamIsCharVisibleNoFaceCheck(entity: number): boolean;
export declare function cellCamSetSelfieModeDistanceScaling(distanceScaling: number): void;
export declare function cellCamSetSelfieModeHeadPitchOffset(pitch: number): void;
export declare function cellCamSetSelfieModeHeadRollOffset(roll: number): void;
export declare function cellCamSetSelfieModeHeadYawOffset(yaw: number): void;
export declare function cellCamSetSelfieModeHorzPanOffset(horizontalPan: number): void;
export declare function cellCamSetSelfieModeRollOffset(roll: number): void;
export declare function cellCamSetSelfieModeSideOffsetScaling(p0: number): void;
export declare function cellCamSetSelfieModeVertPanOffset(vertPan: number): void;
/**
 * if the bool "Toggle" is "true" so the phone is lean.
 * if the bool "Toggle" is "false" so the phone is not lean.
 * @param toggle
 */
export declare function cellHorizontalModeToggle(toggle: boolean): void;
/**
 * For move the finger of player, the value of int goes 1 at 5.
 * @param direction
 */
export declare function cellSetInput(direction: number): void;
/**
 * Displays cash change notifications on HUD.
 * @param cash
 * @param bank
 */
export declare function changeFakeMpCash(cash: number, bank: number): void;
export declare function changeGoonLookingForWork(p0: number): void;
export declare function changePlayerPed(player: number, ped: number, p2: boolean, resetDamage: boolean): void;
export declare function changeUniform(p0: number, p1: number, p2: number): void;
export declare function cleanItemset(itemset: number): void;
export declare function cleanupAsyncInstall(): void;
export declare function clearAdditionalText(p0: number, p1: boolean): void;
export declare function clearAllBlipRoutes(): void;
export declare function clearAllBrokenGlass(): void;
export declare function clearAllHelpMessages(): void;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 */
export declare function clearAllPedProps(ped: number, p1: number): void;
export declare function clearAllPedVehicleForcedSeatUsage(ped: number): void;
export declare function clearAllPickupRewardTypeSuppression(): void;
export declare function clearAllTcmodifierOverrides(p0: string): void;
export declare function clearAmbientZoneListState(ambientZone: string, p1: boolean): void;
/**
 * This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);
 *
 * Still needs more research.
 *
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param zoneName
 * @param p1
 */
export declare function clearAmbientZoneState(zoneName: string, p1: boolean): void;
export declare function clearAngledAreaOfVehicles(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean, p12: number, p13: number): void;
/**
 * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
 * @param X
 * @param Y
 * @param Z
 * @param radius
 * @param p4
 * @param ignoreCopCars
 * @param ignoreObjects
 * @param p7
 */
export declare function clearArea(X: number, Y: number, Z: number, radius: number, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void;
/**
 * MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export declare function clearAreaLeaveVehicleHealth(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void;
/**
 * flags appears to always be 0
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export declare function clearAreaOfCops(x: number, y: number, z: number, radius: number, flags: number): void;
/**
 * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export declare function clearAreaOfObjects(x: number, y: number, z: number, radius: number, flags: number): void;
/**
 * Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export declare function clearAreaOfPeds(x: number, y: number, z: number, radius: number, flags: number): void;
/**
 * flags is usually 0 in the scripts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export declare function clearAreaOfProjectiles(x: number, y: number, z: number, radius: number, flags: number): void;
/**
 * Example:
 * CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export declare function clearAreaOfVehicles(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: number): void;
/**
 * This sets bit [offset] of [address] to off.
 *
 * Example:
 * MISC::CLEAR_BIT(&bitAddress, 1);
 *
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
 * @param address
 * @param offset
 */
export declare function clearBit(offset: number): number;
export declare function clearBrief(): void;
export declare function clearCodeRequestedAutosave(): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function clearControlLightEffect(control: number): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function clearControlShakeSuppressedId(control: number): void;
export declare function clearCoverPointForPed(ped: number): void;
/**
 * 3 calls in the b617d scripts, removed duplicate.
 *
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
 * @param radioStation
 */
export declare function clearCustomRadioTrackList(radioStation: string): void;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param name
 * @param eventType
 */
export declare function clearDecisionMakerEventResponse(name: number, eventType: number): void;
export declare function clearDefaultPrimaryTask(ped: number): void;
/**
 * Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
 *
 * See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
 */
export declare function clearDrawOrigin(): void;
export declare function clearDrivebyTaskUnderneathDrivingTask(ped: number): void;
export declare function clearDynamicPauseMenuErrorMessage(): void;
export declare function clearEntityLastDamageEntity(entity: number): void;
export declare function clearEntityLastWeaponDamage(entity: number): void;
/**
 * Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
 */
export declare function clearExtendedPickupProbeAreas(): void;
/**
 * Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
 */
export declare function clearExtraTcmodifier(): void;
export declare function clearFacialIdleAnimOverride(ped: number): void;
export declare function clearFakeConeArray(): void;
export declare function clearFloatingHelp(hudIndex: number, p1: boolean): void;
export declare function clearFocus(): void;
export declare function clearGarage(garageHash: number, isNetwork: boolean): void;
export declare function clearGpsCustomRoute(): void;
/**
 * Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
 * @param index
 */
export declare function clearGpsDisabledZoneAtIndex(index: number): void;
/**
 * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
 *
 * Doesn't seem like the flags are actually read by the game at all.
 */
export declare function clearGpsFlags(): void;
/**
 * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
 */
export declare function clearGpsMultiRoute(): void;
export declare function clearGpsPlayerWaypoint(): void;
/**
 * Does the same as SET_RACE_TRACK_RENDER(false);
 */
export declare function clearGpsRaceTrack(): void;
export declare function clearHdArea(): void;
export declare function clearHelp(toggle: boolean): void;
/**
 * Immediately removes entity from an interior. Like sets entity to `limbo` room.
 * @param entity
 */
export declare function clearInteriorStateOfEntity(entity: number): void;
export declare function clearLastDrivenVehicle(): void;
export declare function clearObjectsInsideGarage(garageHash: number, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void;
export declare function clearOverrideWeather(): void;
export declare function clearParticleFxShootoutBoat(): void;
export declare function clearPedAlternateMovementAnim(ped: number, stance: number, p2: number): void;
export declare function clearPedAlternateWalkAnim(ped: number, p1: number): void;
export declare function clearPedBloodDamage(ped: number): void;
/**
 * Somehow related to changing ped's clothes.
 * @param ped
 * @param p1
 */
export declare function clearPedBloodDamageByZone(ped: number, p1: number): void;
/**
 * p1: from 0 to 5 in the b617d scripts.
 * p2: "blushing" and "ALL" found in the b617d scripts.
 * @param ped
 * @param p1
 * @param p2
 */
export declare function clearPedDamageDecalByZone(ped: number, p1: number, p2: string): void;
export declare function clearPedDecorations(ped: number): void;
export declare function clearPedDecorationsLeaveScars(ped: number): void;
export declare function clearPedDriveByClipsetOverride(ped: number): void;
export declare function clearPedEnvDirt(ped: number): void;
export declare function clearPedFallUpperBodyClipsetOverride(ped: number): void;
export declare function clearPedInPauseMenu(): void;
export declare function clearPedLastDamageBone(ped: number): void;
/**
 * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
 * @param ped
 */
export declare function clearPedLastWeaponDamage(ped: number): void;
export declare function clearPedMotionInCoverClipsetOverride(ped: number): void;
export declare function clearPedNonCreationArea(): void;
export declare function clearPedParachutePackVariation(ped: number): void;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 * @param p2
 */
export declare function clearPedProp(ped: number, propId: number, p2: number): void;
/**
 * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
 * @param ped
 */
export declare function clearPedScubaGearVariation(ped: number): void;
export declare function clearPedSecondaryTask(ped: number): void;
export declare function clearPedStoredHatProp(ped: number): void;
export declare function clearPedTasks(ped: number): void;
/**
 * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
 * @param ped
 */
export declare function clearPedTasksImmediately(ped: number): void;
/**
 * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
 * @param ped
 */
export declare function clearPedWetness(ped: number): void;
export declare function clearPickupRewardTypeSuppression(rewardType: number): void;
export declare function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player: number): void;
export declare function clearPlayerHasDamagedAtLeastOnePed(player: number): void;
export declare function clearPlayerParachuteModelOverride(player: number): void;
export declare function clearPlayerParachutePackModelOverride(player: number): void;
export declare function clearPlayerParachuteVariationOverride(player: number): void;
export declare function clearPlayerReserveParachuteModelOverride(player: number): void;
/**
 * This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
 *
 * PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
 * @param player
 */
export declare function clearPlayerWantedLevel(player: number): void;
/**
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 *
 * Modified example from "am_imp_exp.c4", line 6418:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]]
 * STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
 * ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
 * @param scheduleId
 */
export declare function clearPopscheduleOverrideVehicleModel(scheduleId: number): void;
/**
 * This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
 * It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
 * @param vehicle
 */
export declare function clearPrimaryVehicleTask(vehicle: number): void;
export declare function clearPrints(): void;
/**
 * See SET_RAGDOLL_BLOCKING_FLAGS for flags
 * @param ped
 * @param blockingFlag
 */
export declare function clearRagdollBlockingFlags(ped: number, blockingFlag: number): void;
/**
 * Clears the relationship between two groups. This should be called twice (once for each group).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 *
 * Example:
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * @param relationship
 * @param group1
 * @param group2
 */
export declare function clearRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void;
/**
 * This native does absolutely nothing, just a nullsub
 */
export declare function clearReminderMessage(): void;
export declare function clearReplayStats(): void;
export declare function clearRestartCoordOverride(): void;
export declare function clearRoomForEntity(entity: number): void;
export declare function clearRoomForGameViewport(): void;
/**
 * Possibly used to clear scenario points.
 */
export declare function clearScenarioSpawnHistory(): void;
export declare function clearSequenceTask(taskSequenceId: number): number;
/**
 * This native does absolutely nothing, just a nullsub
 */
export declare function clearServiceEventArguments(): void;
export declare function clearSmallPrints(): void;
export declare function clearStatusOfSortedListOperation(): void;
export declare function clearTacticalNavMeshPoints(): void;
/**
 * p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
 * @param p0
 */
export declare function clearThisPrint(p0: string): void;
export declare function clearTimecycleModifier(): void;
export declare function clearTvChannelPlaylist(tvChannel: number): void;
export declare function clearValidVehicleHitHashes(): void;
export declare function clearVehicleCrashTask(vehicle: number): void;
export declare function clearVehicleCustomPrimaryColour(vehicle: number): void;
export declare function clearVehicleCustomSecondaryColour(vehicle: number): void;
export declare function clearVehicleGeneratorAreaOfInterest(): void;
export declare function clearVehiclePetroltankFireCulprit(vehicle: number): void;
export declare function clearVehiclePhoneExplosiveDevice(): void;
export declare function clearVehicleRouteHistory(vehicle: number): void;
export declare function clearWeatherTypeNowPersistNetwork(milliseconds: number): void;
export declare function clearWeatherTypePersist(): void;
export declare function clonePed(ped: number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): number;
export declare function clonePedAlt(ped: number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean, p4: boolean): number;
/**
 * Copies ped's components and props to targetPed.
 * @param ped
 * @param targetPed
 */
export declare function clonePedToTarget(ped: number, targetPed: number): void;
export declare function clonePedToTargetAlt(ped: number, targetPed: number, p2: boolean): void;
/**
 * Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
 * Related to its "Pre-networked state"?
 */
export declare function closeAllBarriersForRace(): void;
export declare function closeBombBayDoors(vehicle: number): void;
export declare function closeMpTextChat(): void;
export declare function closePatrolRoute(): void;
export declare function closeSafehouseGarages(): void;
export declare function closeSequenceTask(taskSequenceId: number): void;
export declare function closeSocialClubMenu(): void;
/**
 * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
 */
export declare function cloudCheckAvailability(): void;
export declare function cloudDeleteMemberFile(p0: string): number;
export declare function cloudDidRequestSucceed(requestId: number): boolean;
export declare function cloudGetAvailabilityCheckResult(): boolean;
export declare function cloudHasRequestCompleted(requestId: number): boolean;
export declare function cloudIsCheckingAvailability(): boolean;
export declare function codeWantsScriptToTakeControl(): boolean;
export declare function commitToLoadingscreenSelction(): void;
/**
 * Compares two strings up to a specified number of characters.
 *
 * Parameters:
 * str1 - String to be compared.
 * str2 - String to be compared.
 * matchCase - Comparison will be case-sensitive.
 * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
 *
 * Returns:
 * A value indicating the relationship between the strings:
 * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
 * 0 - The contents of both strings are equal.
 * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
 *
 * Examples:
 * MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
 * MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
 * MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
 * MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
 * MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
 *
 * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
 * MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
 * MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
 * @param str1
 * @param str2
 * @param matchCase
 * @param maxLength
 */
export declare function compareStrings(str1: string, str2: string, matchCase: boolean, maxLength: number): number;
/**
 * Works for vehicles with a retractable landing gear
 *
 * Landing gear states:
 *
 * 0: Deployed
 * 1: Closing
 * 2: Opening
 * 3: Retracted
 * @param vehicle
 * @param state
 */
export declare function controlLandingGear(vehicle: number, state: number): void;
/**
 * Forces the ped to use the mounted weapon.
 * Returns false if task is not possible.
 * @param ped
 */
export declare function controlMountedWeapon(ped: number): boolean;
/**
 * returns pickup hash.
 *
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export declare function convertOldPickupTypeToNew(pickupHash: number): number;
/**
 * Takes the specified time and writes it to the structure specified in the second argument.
 *
 * struct date_time
 * {
 * int year;
 * int PADDING1;
 * int month;
 * int PADDING2;
 * int day;
 * int PADDING3;
 * int hour;
 * int PADDING4;
 * int minute;
 * int PADDING5;
 * int second;
 * int PADDING6;
 * };
 * @param posixTime
 * @param timeStructure
 */
export declare function convertPosixTime(posixTime: number, timeStructure: number): number;
export declare function copyScriptStruct(size: number): [number, number];
/**
 * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
 * @param sourceVehicle
 * @param targetVehicle
 */
export declare function copyVehicleDamages(sourceVehicle: number, targetVehicle: number): void;
export declare function cos(value: number): number;
export declare function countPedsInCombatWithTarget(ped: number): number;
export declare function countPedsInCombatWithTargetWithinRadius(ped: number, x: number, y: number, z: number, radius: number): number;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param radius
 * @param weaponHash
 */
export declare function createAirDefenceAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, radius: number, weaponHash: number): number;
/**
 * Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param weaponHash
 */
export declare function createAirDefenceSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number, weaponHash: number): number;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param flags
 * @param value
 * @param modelHash
 * @param p7
 * @param p8
 */
export declare function createAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number;
/**
 * "DEFAULT_SCRIPTED_CAMERA"
 * "DEFAULT_ANIMATED_CAMERA"
 * "DEFAULT_SPLINE_CAMERA"
 * "DEFAULT_SCRIPTED_FLY_CAMERA"
 * "TIMED_SPLINE_CAMERA"
 * @param camName
 * @param p1
 */
export declare function createCam(camName: string, p1: boolean): number;
/**
 * camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
 * ------------
 * Camera names found in the b617d scripts:
 * "DEFAULT_ANIMATED_CAMERA"
 * "DEFAULT_SCRIPTED_CAMERA"
 * "DEFAULT_SCRIPTED_FLY_CAMERA"
 * "DEFAULT_SPLINE_CAMERA"
 * ------------
 * Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
 * @param camName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param p8
 * @param p9
 */
export declare function createCamWithParams(camName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number;
export declare function createCamera(camHash: number, p1: boolean): number;
/**
 * p9 uses 2 by default
 * @param camHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param p8
 * @param p9
 */
export declare function createCameraWithParams(camHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number;
/**
 * Creates a checkpoint. Returns the handle of the checkpoint.
 *
 * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
 *
 * Parameters:
 * * type - The type of checkpoint to create. See below for a list of checkpoint types.
 * * pos1 - The position of the checkpoint.
 * * pos2 - The position of the next checkpoint to point to.
 * * radius - The radius of the checkpoint.
 * * color - The color of the checkpoint.
 * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
 *
 * Checkpoint types:
 * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
 * 39----------?
 * 40----------Ring: just a ring
 * 41----------?
 * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
 * 45-47-------Cylinder no arrow or number
 *
 * If using type 42-44, reserved sets number / number and shape to display
 *
 * 0-99------------Just numbers (0-99)
 * 100-109-----------------Arrow (0-9)
 * 110-119------------Two arrows (0-9)
 * 120-129----------Three arrows (0-9)
 * 130-139----------------Circle (0-9)
 * 140-149------------CycleArrow (0-9)
 * 150-159----------------Circle (0-9)
 * 160-169----Circle  w/ pointer (0-9)
 * 170-179-------Perforated ring (0-9)
 * 180-189----------------Sphere (0-9)
 * @param type
 * @param posX1
 * @param posY1
 * @param posZ1
 * @param posX2
 * @param posY2
 * @param posZ2
 * @param diameter
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param reserved
 */
export declare function createCheckpoint(type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, diameter: number, red: number, green: number, blue: number, alpha: number, reserved: number): number;
/**
 * hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
 * @param p0
 * @param time
 * @param p2
 * @param entity
 */
export declare function createCinematicShot(p0: number, time: number, p2: boolean, entity: number): void;
/**
 * clanFlag: takes a number 0-5
 * @param ped
 * @param username
 * @param pointedClanTag
 * @param isRockstarClan
 * @param clanTag
 * @param clanFlag
 */
export declare function createFakeMpGamerTag(ped: number, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: number): number;
export declare function createForcedObject(x: number, y: number, z: number, p3: number, modelHash: number, p5: boolean): void;
/**
 * Creates a new ped group.
 * Groups can contain up to 8 peds.
 *
 * The parameter is unused.
 *
 * Returns a handle to the created group, or 0 if a group couldn't be created.
 * @param unused
 */
export declare function createGroup(unused: number): number;
/**
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 *
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 *
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * @param dispatchService
 * @param x
 * @param y
 * @param z
 * @param numUnits
 * @param radius
 * @param outIncidentID
 * @param p7
 * @param p8
 */
export declare function createIncident(dispatchService: number, x: number, y: number, z: number, numUnits: number, radius: number, p7: number, p8: number): [boolean, number];
/**
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 *
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 *
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * @param dispatchService
 * @param ped
 * @param numUnits
 * @param radius
 * @param outIncidentID
 * @param p5
 * @param p6
 */
export declare function createIncidentWithEntity(dispatchService: number, ped: number, numUnits: number, radius: number, p5: number, p6: number): [boolean, number];
export declare function createItemset(p0: boolean): number;
/**
 * Train models HAVE TO be loaded (requested) before you use this.
 * For variation 15 - request:
 *
 * freight
 * freightcar
 * freightgrain
 * freightcont1
 * freightcont2
 * freighttrailer
 *
 *
 * @param variation
 * @param x
 * @param y
 * @param z
 * @param direction
 * @param p5
 * @param p6
 */
export declare function createMissionTrain(variation: number, x: number, y: number, z: number, direction: boolean, p5: number, p6: number): number;
/**
 * Creates a mobile phone of the specified type.
 *
 * Possible phone types:
 *
 * 0 - Default phone / Michael's phone
 * 1 - Trevor's phone
 * 2 - Franklin's phone
 * 3 - Unused police phone
 * 4 - Prologue phone
 *
 * Higher values may crash your game.
 * @param phoneType
 */
export declare function createMobilePhone(phoneType: number): void;
/**
 * p5 = sets as true in scripts
 * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
 *
 * Network players do not see changes done with this.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
export declare function createModelHide(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void;
export declare function createModelHideExcludingScriptObjects(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void;
/**
 * Only works with objects!
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param originalModel
 * @param newModel
 * @param p6
 */
export declare function createModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void;
/**
 * Spawns one or more money pickups.
 *
 * x: The X-component of the world position to spawn the money pickups at.
 * y: The Y-component of the world position to spawn the money pickups at.
 * z: The Z-component of the world position to spawn the money pickups at.
 * value: The combined value of the pickups (in dollars).
 * amount: The number of pickups to spawn.
 * model: The model to use, or 0 for default money model.
 *
 * Example:
 * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
 *
 * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
 *
 * ==============================================
 *
 * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
 * @param x
 * @param y
 * @param z
 * @param value
 * @param amount
 * @param model
 */
export declare function createMoneyPickups(x: number, y: number, z: number, value: number, amount: number, model: number): void;
/**
 * clanFlag: takes a number 0-5
 * @param player
 * @param username
 * @param pointedClanTag
 * @param isRockstarClan
 * @param clanTag
 * @param clanFlag
 * @param r
 * @param g
 * @param b
 */
export declare function createMpGamerTagWithCrewColor(player: number, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: number, r: number, g: number, b: number): void;
export declare function createNewScriptedConversation(): void;
/**
 * Creates a new NaturalMotion message.
 *
 * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
 * messageId: The ID of the NaturalMotion message.
 *
 * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
 * @param startImmediately
 * @param messageId
 */
export declare function createNmMessage(startImmediately: boolean, messageId: number): void;
export declare function createNonNetworkedAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
export declare function createNonNetworkedPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number;
/**
 * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param bScriptHostObj
 * @param dynamic
 */
export declare function createObject(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number;
/**
 * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param bScriptHostObj
 * @param dynamic
 */
export declare function createObjectNoOffset(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number;
export declare function createParachuteBagObject(ped: number, p1: boolean, p2: boolean): number;
export declare function createPatrolRoute(): void;
/**
 * https://alloc8or.re/gta5/doc/enums/ePedType.txt
 *
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param pedType
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostPed
 */
export declare function createPed(pedType: number, modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostPed: boolean): number;
/**
 * pedType: see CREATE_PED
 *
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param vehicle
 * @param pedType
 * @param modelHash
 * @param seat
 * @param isNetwork
 * @param bScriptHostPed
 */
export declare function createPedInsideVehicle(vehicle: number, pedType: number, modelHash: number, seat: number, isNetwork: boolean, bScriptHostPed: boolean): number;
/**
 * Drops the Hook/Magnet on a cargobob
 *
 * state
 * enum eCargobobHook
 * {
 * CARGOBOB_HOOK = 0,
 * CARGOBOB_MAGNET = 1,
 * };
 * @param cargobob
 * @param state
 */
export declare function createPickUpRopeForCargobob(cargobob: number, state: number): void;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param value
 * @param p6
 * @param modelHash
 */
export declare function createPickup(pickupHash: number, posX: number, posY: number, posZ: number, p4: number, value: number, p6: boolean, modelHash: number): number;
/**
 * flags:
 * 8 (1 << 3): place on ground
 * 512 (1 << 9): spin around
 *
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param flag
 * @param amount
 * @param p9
 * @param p10
 * @param modelHash
 */
export declare function createPickupRotate(pickupHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, flag: number, amount: number, p9: number, p10: boolean, modelHash: number): number;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
export declare function createPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number;
/**
 * vb.net
 * Dim ped_handle As Integer
 * With Game.Player.Character
 * Dim pos As Vector3 = .Position + .ForwardVector * 3
 * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
 * End With
 *
 * Creates a Ped at the specified location, returns the Ped Handle.
 * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
 * @param posX
 * @param posY
 * @param posZ
 */
export declare function createRandomPed(posX: number, posY: number, posZ: number): number;
export declare function createRandomPedAsDriver(vehicle: number, returnHandle: boolean): number;
/**
 * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
 *
 * Parameters:
 * x/y/z - Generator position
 * heading - Generator heading
 * p4 - Unknown (always 5.0)
 * p5 - Unknown (always 3.0)
 * modelHash - Vehicle model hash
 * p7/8/9/10 - Unknown (always -1)
 * p11 - Unknown (usually TRUE, only one instance of FALSE)
 * p12/13 - Unknown (always FALSE)
 * p14 - Unknown (usally FALSE, only two instances of TRUE)
 * p15 - Unknown (always TRUE)
 * p16 - Unknown (always -1)
 *
 * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p4
 * @param p5
 * @param modelHash
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 * @param p14
 * @param p15
 * @param p16
 */
export declare function createScriptVehicleGenerator(x: number, y: number, z: number, heading: number, p4: number, p5: number, modelHash: number, p7: number, p8: number, p9: number, p10: number, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: number): number;
/**
 * p6 always 2 (but it doesnt seem to matter...)
 *
 * roll and pitch 0
 * yaw to Ped.rotation
 * @param x
 * @param y
 * @param z
 * @param roll
 * @param pitch
 * @param yaw
 * @param p6
 */
export declare function createSynchronizedScene(x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p6: number): number;
export declare function createSynchronizedSceneAtMapObject(x: number, y: number, z: number, radius: number, object: number): number;
/**
 * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
 */
export declare function createTrackedPoint(): number;
/**
 * p7 when set to true allows you to spawn vehicles under -100 z.
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostVeh
 * @param p7
 */
export declare function createVehicle(modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostVeh: boolean, p7: boolean): number;
/**
 * Now has 8 params.
 * @param weaponHash
 * @param ammoCount
 * @param x
 * @param y
 * @param z
 * @param showWorldModel
 * @param scale
 * @param p7
 * @param p8
 * @param p9
 */
export declare function createWeaponObject(weaponHash: number, ammoCount: number, x: number, y: number, z: number, showWorldModel: boolean, scale: number, p7: number, p8: number, p9: number): number;
export declare function customMinimapClearBlips(): void;
/**
 * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
 * @param x
 * @param y
 * @param z
 */
export declare function customMinimapCreateBlip(x: number, y: number, z: number): number;
/**
 * If toggle is true, the map is shown in full screen
 * If toggle is false, the map is shown in normal mode
 * @param toggle
 */
export declare function customMinimapSetActive(toggle: boolean): void;
/**
 * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
 * @param spriteId
 */
export declare function customMinimapSetBlipObject(spriteId: number): void;
export declare function damageObjectFragmentChild(p0: number, p1: number, p2: number): void;
export declare function dataarrayAddBool(value: boolean): number;
export declare function dataarrayAddDict(arrayData: number): [number, number];
export declare function dataarrayAddFloat(value: number): number;
export declare function dataarrayAddInt(value: number): number;
export declare function dataarrayAddString(value: string): number;
export declare function dataarrayAddVector(valueX: number, valueY: number, valueZ: number): number;
export declare function dataarrayGetBool(arrayIndex: number): [boolean, number];
export declare function dataarrayGetCount(arrayData: number): [number, number];
export declare function dataarrayGetDict(arrayIndex: number): [number, number];
export declare function dataarrayGetFloat(arrayIndex: number): [number, number];
export declare function dataarrayGetInt(arrayIndex: number): [number, number];
export declare function dataarrayGetString(arrayIndex: number): [string, number];
/**
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * @param arrayData
 * @param arrayIndex
 */
export declare function dataarrayGetType(arrayIndex: number): [number, number];
export declare function dataarrayGetVector(arrayIndex: number): [Vector3, number];
export declare function datadictCreateArray(key: string): [number, number];
export declare function datadictCreateDict(key: string): [number, number];
export declare function datadictGetArray(key: string): [number, number];
export declare function datadictGetBool(key: string): [boolean, number];
export declare function datadictGetDict(key: string): [number, number];
export declare function datadictGetFloat(key: string): [number, number];
export declare function datadictGetInt(key: string): [number, number];
export declare function datadictGetString(key: string): [string, number];
/**
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * @param objectData
 * @param key
 */
export declare function datadictGetType(key: string): [number, number];
export declare function datadictGetVector(key: string): [Vector3, number];
export declare function datadictSetBool(key: string, value: boolean): number;
export declare function datadictSetFloat(key: string, value: number): number;
export declare function datadictSetInt(key: string, value: number): number;
export declare function datadictSetString(key: string, value: string): number;
export declare function datadictSetVector(key: string, valueX: number, valueY: number, valueZ: number): number;
export declare function datafileClearWatchList(): void;
export declare function datafileCreate(p0: number): void;
export declare function datafileDelete(p0: number): void;
export declare function datafileDeleteForAdditionalDataFile(p0: number): void;
export declare function datafileDeleteRequestedFile(requestId: number): boolean;
export declare function datafileFlushMissionHeader(): void;
export declare function datafileGetFileDict(p0: number): number;
export declare function datafileGetFileDictForAdditionalDataFile(p0: number): number;
export declare function datafileHasLoadedFileData(requestId: number): boolean;
export declare function datafileHasValidFileData(requestId: number): boolean;
export declare function datafileIsSavePending(): boolean;
export declare function datafileIsValidRequestId(index: number): boolean;
/**
 * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
 *
 * Returns whether or not the file was successfully loaded.
 *
 * Example:
 * DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
 * @param filename
 * @param p1
 */
export declare function datafileLoadOfflineUgc(filename: string, p1: number): boolean;
export declare function datafileLoadOfflineUgcForAdditionalDataFile(p0: number, p1: number): boolean;
export declare function datafileSelectActiveFile(requestId: number, p1: number): boolean;
export declare function datafileSelectCreatorStats(p0: number, p1: number): boolean;
export declare function datafileSelectUgcData(p0: number, p1: number): boolean;
export declare function datafileSelectUgcPlayerData(p0: number, p1: number): boolean;
export declare function datafileSelectUgcStats(p0: number, p1: boolean, p2: number): boolean;
export declare function datafileStartSaveToCloud(filename: string, p1: number): boolean;
export declare function datafileStoreMissionHeader(p0: number): void;
export declare function datafileUpdateSaveToCloud(p0: boolean): [boolean, boolean];
/**
 * Adds the given requestID to the watch list.
 * @param requestId
 */
export declare function datafileWatchRequestId(requestId: number): void;
/**
 * see ACTIVATE_AUDIO_SLOWMO_MODE for modes
 * @param mode
 */
export declare function deactivateAudioSlowmoMode(mode: string): void;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
export declare function deactivateInteriorEntitySet(interior: number, entitySetName: string): void;
/**
 * Returns whether or not the specified property is set for the entity.
 * @param entity
 * @param propertyName
 */
export declare function decorExistOn(entity: number, propertyName: string): boolean;
export declare function decorGetBool(entity: number, propertyName: string): boolean;
export declare function decorGetFloat(entity: number, propertyName: string): number;
export declare function decorGetInt(entity: number, propertyName: string): number;
/**
 * type: see DECOR_REGISTER
 * @param propertyName
 * @param type
 */
export declare function decorIsRegisteredAsType(propertyName: string, type: number): boolean;
/**
 * https://alloc8or.re/gta5/doc/enums/eDecorType.txt
 * @param propertyName
 * @param type
 */
export declare function decorRegister(propertyName: string, type: number): void;
/**
 * Called after all decorator type initializations.
 */
export declare function decorRegisterLock(): void;
export declare function decorRemove(entity: number, propertyName: string): boolean;
/**
 * This function sets metadata of type bool to specified entity.
 *
 * @param entity
 * @param propertyName
 * @param value
 */
export declare function decorSetBool(entity: number, propertyName: string, value: boolean): boolean;
export declare function decorSetFloat(entity: number, propertyName: string, value: number): boolean;
/**
 * Sets property to int.
 * @param entity
 * @param propertyName
 * @param value
 */
export declare function decorSetInt(entity: number, propertyName: string, value: number): boolean;
export declare function decorSetTime(entity: number, propertyName: string, timestamp: number): boolean;
export declare function delayMpStoreOpen(): void;
export declare function deleteAllTrains(): void;
export declare function deleteCheckpoint(checkpoint: number): void;
export declare function deleteChildRope(ropeId: number): void;
/**
 * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
 * @param entity
 */
export declare function deleteEntity(entity: number): number;
/**
 * Delete an incident with a given id.
 *
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * @param incidentId
 */
export declare function deleteIncident(incidentId: number): void;
export declare function deleteMissionTrain(train: number): number;
/**
 * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
 * @param object
 */
export declare function deleteObject(object: number): number;
/**
 * From the b617d scripts:
 *
 * TASK::DELETE_PATROL_ROUTE("miss_merc0");
 * TASK::DELETE_PATROL_ROUTE("miss_merc1");
 * TASK::DELETE_PATROL_ROUTE("miss_merc2");
 * TASK::DELETE_PATROL_ROUTE("miss_dock");
 * @param patrolRoute
 */
export declare function deletePatrolRoute(patrolRoute: string): void;
/**
 * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
 * @param ped
 */
export declare function deletePed(ped: number): number;
export declare function deleteRope(ropeId: number): number;
export declare function deleteScriptVehicleGenerator(vehicleGenerator: number): void;
export declare function deleteStuntJump(p0: number): void;
/**
 * Deletes a vehicle.
 * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 *
 * eg how to use:
 * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * DELETE_VEHICLE(&vehicle);
 *
 * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
 * @param vehicle
 */
export declare function deleteVehicle(vehicle: number): number;
export declare function deleteWaypointsFromThisPlayer(): void;
/**
 * Does nothing and always returns false.
 * @param amount
 */
export declare function depositVc(amount: number): boolean;
/**
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * @param bScriptHostCam
 */
export declare function destroyAllCams(bScriptHostCam: boolean): void;
/**
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * @param cam
 * @param bScriptHostCam
 */
export declare function destroyCam(cam: number, bScriptHostCam: boolean): void;
export declare function destroyItemset(itemset: number): void;
/**
 * Destroys the currently active mobile phone.
 */
export declare function destroyMobilePhone(): void;
export declare function destroyTrackedPoint(point: number): void;
export declare function detachCam(cam: number): void;
export declare function detachContainerFromHandlerFrame(vehicle: number): void;
/**
 * If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
 * Set `dynamic` to true to keep velocity after dettaching
 * @param entity
 * @param dynamic
 * @param collision
 */
export declare function detachEntity(entity: number, dynamic: boolean, collision: boolean): void;
export declare function detachEntityFromCargobob(cargobob: number, entity: number): boolean;
export declare function detachPortablePickupFromPed(pickupObject: number): void;
export declare function detachRopeFromEntity(ropeId: number, entity: number): void;
export declare function detachSynchronizedScene(sceneID: number): void;
export declare function detachVehicleFromAnyCargobob(vehicle: number): boolean;
export declare function detachVehicleFromAnyTowTruck(vehicle: number): boolean;
export declare function detachVehicleFromCargobob(vehicle: number, cargobob: number): void;
/**
 * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
 * @param towTruck
 * @param vehicle
 */
export declare function detachVehicleFromTowTruck(towTruck: number, vehicle: number): void;
export declare function detachVehicleFromTrailer(vehicle: number): void;
export declare function detonateVehiclePhoneExplosiveDevice(): void;
export declare function disableAimCamThisUpdate(): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function disableAllControlActions(control: number): void;
export declare function disableCamCollisionForObject(entity: number): void;
export declare function disableCameraViewModeCycle(player: number): void;
export declare function disableCinematicBonnetCameraThisUpdate(): void;
export declare function disableCinematicSlowMoThisUpdate(): boolean;
export declare function disableCinematicVehicleIdleModeThisUpdate(): void;
export declare function disableCompositeShotgunDecals(toggle: boolean): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param disableRelatedActions
 */
export declare function disableControlAction(control: number, action: number, disableRelatedActions: boolean): void;
export declare function disableDownwashPtfx(toggle: boolean): void;
/**
 * Sets some flag on cinematic camera
 */
export declare function disableFirstPersonCameraWaterClippingTestThisUpdate(): void;
export declare function disableFirstPersonFlashEffectThisUpdate(): void;
export declare function disableFrontendThisFrame(): void;
/**
 * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
 */
export declare function disableGameplayCamAltitudeFovScalingThisUpdate(): void;
export declare function disableHdtexThisFrame(): void;
export declare function disableHeadBlendPaletteColor(ped: number): void;
/**
 * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
 * @param hospitalIndex
 * @param toggle
 */
export declare function disableHospitalRestart(hospitalIndex: number, toggle: boolean): void;
export declare function disableInWaterPtfx(toggle: boolean): void;
export declare function disableIndividualPlanePropeller(vehicle: number, propeller: number): void;
/**
 * Example:
 * This removes the interior from the strip club and when trying to walk inside the player just falls:
 *
 * INTERIOR::DISABLE_INTERIOR(118018, true);
 * @param interior
 * @param toggle
 */
export declare function disableInterior(interior: number, toggle: boolean): void;
export declare function disableMetroSystem(toggle: boolean): void;
/**
 * Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
 */
export declare function disableMoonCycleOverride(): void;
/**
 * Set toggle true to disable navmesh.
 * Set toggle false to enable navmesh.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param toggle
 */
export declare function disableNavmeshInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean): void;
export declare function disableNearClipScanThisUpdate(): void;
export declare function disableOcclusionThisFrame(): void;
/**
 * Disables first person camera for the current frame.
 *
 * Found in decompiled scripts:
 * GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
 * CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
 */
export declare function disableOnFootFirstPersonViewThisUpdate(): void;
export declare function disablePausemenuSpinner(p0: boolean): void;
export declare function disablePedHeatscaleOverride(ped: number): void;
export declare function disablePedInjuredOnGroundBehaviour(ped: number): void;
export declare function disablePedPainAudio(ped: number, toggle: boolean): void;
export declare function disablePlaneAileron(vehicle: number, p1: boolean, p2: boolean): void;
/**
 * Inhibits the player from using any method of combat including melee and firearms.
 *
 * NOTE: Only disables the firing for one frame
 * @param player
 * @param toggle
 */
export declare function disablePlayerFiring(player: number, toggle: boolean): void;
/**
 * Needs to be called every frame.
 * @param player
 */
export declare function disablePlayerHealthRecharge(player: number): void;
/**
 * Used only once in R* scripts (freemode.ysc).
 */
export declare function disablePlayerThrowGrenadeWhileUsingGun(): void;
export declare function disablePlayerVehicleRewards(player: number): void;
/**
 * Disables the spawn point at the police house on the specified index.
 *
 * policeIndex: The police house index.
 * toggle: true to enable the spawn point, false to disable.
 *
 * - Nacorpio
 * @param policeIndex
 * @param toggle
 */
export declare function disablePoliceRestart(policeIndex: number, toggle: boolean): void;
export declare function disableProcobjCreation(): void;
export declare function disableRegionVfx(p0: number): void;
/**
 * Does nothing (it's a nullsub).
 */
export declare function disableScreenDimmingThisFrame(): void;
export declare function disableScreenblurFade(): void;
export declare function disableScriptBrainSet(brainSet: number): void;
export declare function disableScuffDecals(toggle: boolean): void;
export declare function disableStuntJumpSet(p0: number): void;
export declare function disableSwitchOutroFx(): void;
/**
 * Sets a flag. A valid id is 0x157DC10D
 * @param id
 * @param toggle
 */
export declare function disableTidyingUpInGarage(id: number, toggle: boolean): void;
/**
 * Adds some kind of shadow to the vehicle.
 *
 * p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
 * @param vehicle
 * @param p1
 * @param p2
 */
export declare function disableVehcileDynamicAmbientScales(vehicle: number, p1: number, p2: number): void;
export declare function disableVehicleDistantlights(toggle: boolean): void;
export declare function disableVehicleExplosionBreakOffParts(): void;
export declare function disableVehicleTurretMovementThisFrame(vehicle: number): void;
/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param disabled
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
export declare function disableVehicleWeapon(disabled: boolean, weaponHash: number, vehicle: number, owner: number): void;
export declare function displayAmmoThisFrame(display: boolean): void;
export declare function displayAreaName(toggle: boolean): void;
/**
 * "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
 * "DISPLAY_CASH(true);" disables cash amount rendering
 * @param toggle
 */
export declare function displayCash(toggle: boolean): void;
/**
 * The messages are localized strings.
 * Examples:
 * "No_bus_money"
 * "Enter_bus"
 * "Tour_help"
 * "LETTERS_HELP2"
 * "Dummy"
 *
 * **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
 * --------
 * p1 doesn't seem to make a difference, regardless of the state it's in.
 *
 *
 * picture of where on the screen this is displayed?
 * @param message
 * @param p1
 */
export declare function displayHelpTextThisFrame(message: string, p1: boolean): void;
/**
 * If Hud should be displayed
 * @param toggle
 */
export declare function displayHud(toggle: boolean): void;
/**
 * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
 */
export declare function displayHudWhenNotInStateOfPlayThisFrame(): void;
export declare function displayHudWhenPausedThisFrame(): void;
/**
 * sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
 *
 * NOTE: windowTitle uses text labels, and an invalid value will display nothing.
 *
 * www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
 *
 * windowTitle's
 * -----------------
 * CELL_EMAIL_BOD  =   "Enter your Eyefind message"
 * CELL_EMAIL_BODE =   "Message too long. Try again"
 * CELL_EMAIL_BODF    =   "Forbidden message. Try again"
 * CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
 * CELL_EMAIL_SODE =   "Subject too long. Try again"
 * CELL_EMAIL_SODF    =   "Forbidden text. Try again"
 * CELL_EMASH_BOD   =   "Enter your Eyefind message"
 * CELL_EMASH_BODE =   "Message too long. Try again"
 * CELL_EMASH_BODF    =   "Forbidden message. Try again"
 * CELL_EMASH_SOD    =   "Enter your Eyefind subject"
 * CELL_EMASH_SODE =   "Subject too long. Try again"
 * CELL_EMASH_SODF    =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP10   =   "Enter Synopsis"
 * FMMC_KEY_TIP12  =   "Enter Custom Team Name"
 * FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP12N  =   "Custom Team Name"
 * FMMC_KEY_TIP8 =   "Enter Message"
 * FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
 * FMMC_KEY_TIP8S  =   "Enter Message"
 * FMMC_KEY_TIP9    =   "Enter Outfit Name"
 * FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
 * FMMC_KEY_TIP9N  =   "Outfit Name"
 * PM_NAME_CHALL  =   "Enter Challenge Name"
 * @param p0
 * @param windowTitle
 * @param p2
 * @param defaultText
 * @param defaultConcat1
 * @param defaultConcat2
 * @param defaultConcat3
 * @param maxInputLength
 */
export declare function displayOnscreenKeyboard(p0: number, windowTitle: string, p2: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: number): void;
export declare function displayOnscreenKeyboardWithLongerInitialString(p0: number, windowTitle: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, defaultConcat4: string, defaultConcat5: string, defaultConcat6: string, defaultConcat7: string, maxInputLength: number): number;
/**
 * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
 * Doesn't need to be called every frame.
 * Preview: https://i.imgur.com/DfqKWfJ.png
 *
 * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
 * @param toggle
 */
export declare function displayPlayerNameTagsOnBlips(toggle: boolean): void;
/**
 * If Minimap / Radar should be displayed.
 * @param toggle
 */
export declare function displayRadar(toggle: boolean): void;
/**
 * Displays the crosshair for this frame.
 */
export declare function displaySniperScopeThisFrame(): void;
/**
 * Purpose of the BOOL currently unknown.
 * Both, true and false, work
 * @param p0
 */
export declare function displaySystemSigninUi(p0: boolean): void;
/**
 * If value is set to true, and ambient siren sound will be played.
 * Appears to enable/disable an audio flag.
 * @param value
 */
export declare function distantCopCarSirens(value: boolean): void;
/**
 * This function is hard-coded to always return 1.
 */
export declare function dlcCheckCloudDataCorrect(): boolean;
/**
 * This function is hard-coded to always return 1.
 */
export declare function dlcCheckCompatPackConfiguration(): boolean;
export declare function doAutoSave(): void;
/**
 * Fades the screen in.
 *
 * duration: The time the fade should take, in milliseconds.
 * @param duration
 */
export declare function doScreenFadeIn(duration: number): void;
/**
 * Fades the screen out.
 *
 * duration: The time the fade should take, in milliseconds.
 * @param duration
 */
export declare function doScreenFadeOut(duration: number): void;
export declare function doesAirDefenceSphereExist(zoneId: number): boolean;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export declare function doesAnimDictExist(animDict: string): boolean;
export declare function doesBlipExist(blip: number): boolean;
export declare function doesBlipHaveGpsRoute(blip: number): boolean;
/**
 * Returns whether or not the passed camera handle exists.
 * @param cam
 */
export declare function doesCamExist(cam: number): boolean;
/**
 * Returns true only when the hook is active, will return false if the magnet is active
 * @param cargobob
 */
export declare function doesCargobobHavePickUpRope(cargobob: number): boolean;
/**
 * Returns true only when the magnet is active, will return false if the hook is active
 * @param cargobob
 */
export declare function doesCargobobHavePickupMagnet(cargobob: number): boolean;
/**
 * Checks if the ped can play the speech or has the speech file, p2 is usually false.
 * @param ped
 * @param speechName
 * @param p2
 */
export declare function doesContextExistForThisPed(ped: number, speechName: string, p2: boolean): boolean;
export declare function doesCurrentPedComponentHaveRestrictionTag(ped: number, componentId: number, restrictionTagHash: number): boolean;
export declare function doesCurrentPedPropHaveRestrictionTag(ped: number, componentId: number, restrictionTagHash: number): boolean;
export declare function doesCutsceneEntityExist(cutsceneEntName: string, modelHash: number): boolean;
export declare function doesCutsceneHandleExist(cutsceneHandle: number): number;
export declare function doesEntityBelongToThisScript(entity: number, p1: boolean): boolean;
/**
 * Checks whether an entity exists in the game world.
 * @param entity
 */
export declare function doesEntityExist(entity: number): boolean;
export declare function doesEntityHaveAnimDirector(entity: number): boolean;
export declare function doesEntityHaveDrawable(entity: number): boolean;
export declare function doesEntityHavePhysics(entity: number): boolean;
export declare function doesEntityHaveSkeleton(entity: number): boolean;
/**
 * Checks via CVehicleModelInfo
 * @param vehicle
 * @param extraId
 */
export declare function doesExtraExist(vehicle: number, extraId: number): boolean;
export declare function doesGroupExist(groupId: number): boolean;
export declare function doesLatestBriefStringExist(p0: number): boolean;
export declare function doesNavmeshBlockingObjectExist(p0: number): boolean;
/**
 * p5 is usually 0.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param hash
 * @param p5
 */
export declare function doesObjectOfTypeExistAtCoords(x: number, y: number, z: number, radius: number, hash: number, p5: boolean): boolean;
export declare function doesParticleFxLoopedExist(ptfxHandle: number): boolean;
export declare function doesPedHaveAiBlip(ped: number): boolean;
export declare function doesPickupExist(pickup: number): boolean;
export declare function doesPickupObjectExist(pickupObject: number): boolean;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export declare function doesPickupOfTypeExistInArea(pickupHash: number, x: number, y: number, z: number, radius: number): boolean;
export declare function doesPlayerVehHaveRadio(): boolean;
export declare function doesPopMultiplierAreaExist(id: number): boolean;
export declare function doesPopMultiplierSphereExist(id: number): boolean;
/**
 * Returns true if a destructible object with this handle exists, false otherwise.
 * @param object
 */
export declare function doesRayfireMapObjectExist(object: number): boolean;
export declare function doesRelationshipGroupExist(groupHash: number): boolean;
export declare function doesRopeExist(ropeId: number): [boolean, number];
export declare function doesScenarioBlockingAreaExists(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function doesScenarioExistInArea(x: number, y: number, z: number, radius: number, mustBeFree: boolean): boolean;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts:
 *
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "GRAPESEED_PLANES",
 * "KORTZ_SECURITY",
 * "LOST_BIKERS",
 * "LSA_Planes",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5"
 * "QUARRY",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE",
 * "Triathlon_1_Start",
 * "Triathlon_2_Start",
 * "Triathlon_3_Start"
 *
 * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 *
 * @param scenarioGroup
 */
export declare function doesScenarioGroupExist(scenarioGroup: string): boolean;
export declare function doesScenarioOfTypeExistInArea(x: number, y: number, z: number, scenarioName: string, radius: number, mustBeFree: boolean): boolean;
export declare function doesScriptExist(scriptName: string): boolean;
export declare function doesScriptOwnRope(ropeId: number): boolean;
export declare function doesScriptVehicleGeneratorExist(vehicleGenerator: number): boolean;
export declare function doesScriptWithNameHashExist(scriptHash: number): boolean;
/**
 * Checks if there is a cover point at position
 * @param x
 * @param y
 * @param z
 */
export declare function doesScriptedCoverPointExistAtCoords(x: number, y: number, z: number): boolean;
/**
 * Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
 *
 * componentId/last parameter seems to be unused.
 * @param componentHash
 * @param restrictionTagHash
 * @param componentId
 */
export declare function doesShopPedApparelHaveRestrictionTag(componentHash: number, restrictionTagHash: number, componentId: number): boolean;
export declare function doesTextBlockExist(gxt: string): boolean;
/**
 * Checks if the passed gxt name exists in the game files.
 * @param gxt
 */
export declare function doesTextLabelExist(gxt: string): boolean;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
export declare function doesThisPhotoSlotContainAValidPhoto(p0: number): boolean;
/**
 * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
 * @param vehicle
 */
export declare function doesVehicleAllowRappel(vehicle: number): boolean;
export declare function doesVehicleExistWithDecorator(decorator: string): number;
export declare function doesVehicleHaveCrewEmblem(vehicle: number, p1: number): boolean;
export declare function doesVehicleHaveRoof(vehicle: number): boolean;
export declare function doesVehicleHaveSearchlight(vehicle: number): boolean;
/**
 * Maximum amount of vehicles with vehicle stuck check appears to be 16.
 * @param vehicle
 */
export declare function doesVehicleHaveStuckVehicleCheck(vehicle: number): boolean;
export declare function doesVehicleHaveWeapons(vehicle: number): boolean;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param componentHash
 */
export declare function doesWeaponTakeWeaponComponent(weaponHash: number, componentHash: number): boolean;
export declare function dontRenderInGameUi(p0: boolean): void;
/**
 * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
 */
export declare function dontTiltMinimapThisFrame(): void;
export declare function dontZoomMinimapWhenRunningThisFrame(): void;
export declare function dontZoomMinimapWhenSnipingThisFrame(): void;
/**
 * Search radius: 0.5
 * @param x
 * @param y
 * @param z
 * @param modelHash
 * @param outDoorHash
 */
export declare function doorSystemFindExistingDoor(x: number, y: number, z: number, modelHash: number, outDoorHash: number): [boolean, number];
export declare function doorSystemGetAutomaticDistance(doorHash: number): number;
export declare function doorSystemGetDoorPendingState(doorHash: number): number;
export declare function doorSystemGetDoorState(doorHash: number): number;
export declare function doorSystemGetIsPhysicsLoaded(p0: number): boolean;
export declare function doorSystemGetOpenRatio(doorHash: number): number;
/**
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param distance
 * @param requestDoor
 * @param forceUpdate
 */
export declare function doorSystemSetAutomaticDistance(doorHash: number, distance: number, requestDoor: boolean, forceUpdate: boolean): void;
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param rate
 * @param requestDoor
 * @param forceUpdate
 */
export declare function doorSystemSetAutomaticRate(doorHash: number, rate: number, requestDoor: boolean, forceUpdate: boolean): void;
/**
 * Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
 * @param doorHash
 * @param p1
 */
export declare function doorSystemSetDoorOpenForRaces(doorHash: number, p1: boolean): void;
/**
 * Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
 * `requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
 * `forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
 * Door lock states:
 * 0: UNLOCKED
 * 1: LOCKED
 * 2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
 * 3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
 * 4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
 * 5: DOORSTATE_FORCE_OPEN_THIS_FRAME
 * 6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
 * @param doorHash
 * @param state
 * @param requestDoor
 * @param forceUpdate
 */
export declare function doorSystemSetDoorState(doorHash: number, state: number, requestDoor: boolean, forceUpdate: boolean): void;
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * @param doorHash
 * @param toggle
 */
export declare function doorSystemSetHoldOpen(doorHash: number, toggle: boolean): void;
/**
 * Sets the ajar angle of a door.
 * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param ajar
 * @param requestDoor
 * @param forceUpdate
 */
export declare function doorSystemSetOpenRatio(doorHash: number, ajar: number, requestDoor: boolean, forceUpdate: boolean): void;
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param removed
 * @param requestDoor
 * @param forceUpdate
 */
export declare function doorSystemSetSpringRemoved(doorHash: number, removed: boolean, requestDoor: boolean, forceUpdate: boolean): void;
export declare function drawBinkMovie(binkMovie: number, p1: number, p2: number, p3: number, p4: number, p5: number, r: number, g: number, b: number, a: number): void;
/**
 * x,y,z = start pos
 * x2,y2,z2 = end pos
 *
 * Draw's a 3D Box between the two x,y,z coords.
 * --------------
 * Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
 * End Sub
 *
 * [C#]
 * public void DrawBox(Vector3 a, Vector3 b, Color col)
 * {
 * Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
 * }
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawDebugBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x
 * @param y
 * @param z
 * @param size
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawDebugCross(x: number, y: number, z: number, size: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawDebugLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param r1
 * @param g1
 * @param b1
 * @param r2
 * @param g2
 * @param b2
 * @param alpha1
 * @param alpha2
 */
export declare function drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawDebugSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawDebugText(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawDebugText2d(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void;
/**
 * This native does absolutely nothing, just a nullsub
 */
export declare function drawFrontendBackgroundThisFrame(): void;
export declare function drawHudOverFadeThisFrame(): void;
export declare function drawLightWithRange(posX: number, posY: number, posZ: number, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void;
export declare function drawLightWithRangeex(x: number, y: number, z: number, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void;
/**
 * Draws a depth-tested line from one point to another.
 * ----------------
 * x1, y1, z1 : Coordinates for the first point
 * x2, y2, z2 : Coordinates for the second point
 * r, g, b, alpha : Color with RGBA-Values
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
 * End Sub
 *
 * [C#]
 * public void DrawLine(Vector3 from, Vector3 to, Color col)
 * {
 * Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
 * }
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawLowQualityPhotoToPhone(p0: boolean, p1: boolean): void;
/**
 * enum MarkerTypes
 * {
 * MarkerTypeUpsideDownCone = 0,
 * MarkerTypeVerticalCylinder = 1,
 * MarkerTypeThickChevronUp = 2,
 * MarkerTypeThinChevronUp = 3,
 * MarkerTypeCheckeredFlagRect = 4,
 * MarkerTypeCheckeredFlagCircle = 5,
 * MarkerTypeVerticleCircle = 6,
 * MarkerTypePlaneModel = 7,
 * MarkerTypeLostMCDark = 8,
 * MarkerTypeLostMCLight = 9,
 * MarkerTypeNumber0 = 10,
 * MarkerTypeNumber1 = 11,
 * MarkerTypeNumber2 = 12,
 * MarkerTypeNumber3 = 13,
 * MarkerTypeNumber4 = 14,
 * MarkerTypeNumber5 = 15,
 * MarkerTypeNumber6 = 16,
 * MarkerTypeNumber7 = 17,
 * MarkerTypeNumber8 = 18,
 * MarkerTypeNumber9 = 19,
 * MarkerTypeChevronUpx1 = 20,
 * MarkerTypeChevronUpx2 = 21,
 * MarkerTypeChevronUpx3 = 22,
 * MarkerTypeHorizontalCircleFat = 23,
 * MarkerTypeReplayIcon = 24,
 * MarkerTypeHorizontalCircleSkinny = 25,
 * MarkerTypeHorizontalCircleSkinny_Arrow = 26,
 * MarkerTypeHorizontalSplitArrowCircle = 27,
 * MarkerTypeDebugSphere = 28,
 * MarkerTypeDallorSign = 29,
 * MarkerTypeHorizontalBars = 30,
 * MarkerTypeWolfHead = 31
 * };
 *
 * dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
 *
 * faceCamera - Rotates only the y-axis (the heading) towards the camera
 *
 * p19 - no effect, default value in script is 2
 *
 * rotate - Rotates only on the y-axis (the heading)
 *
 * textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
 *
 * textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
 *
 * drawOnEnts - Draws the marker onto any entities that intersect it
 *
 * basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
 *
 * bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);
 *
 * his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
 *
 * GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);
 *
 *
 * @param type
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param bobUpAndDown
 * @param faceCamera
 * @param p19
 * @param rotate
 * @param textureDict
 * @param textureName
 * @param drawOnEnts
 */
export declare function drawMarker(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void;
export declare function drawMarkerEx(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean, p24: boolean, p25: boolean): void;
/**
 * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
 * Example https://imgur.com/nCbtS4H
 *
 * alpha - The alpha for the sphere. Goes from 0.0 to 1.0.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawMarkerSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void;
/**
 * x/y/z - Location of a vertex (in world coords), presumably.
 * ----------------
 * x1, y1, z1     : Coordinates for the first point
 * x2, y2, z2     : Coordinates for the second point
 * x3, y3, z3     : Coordinates for the third point
 * r, g, b, alpha : Color with RGBA-Values
 *
 * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
 * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
 * End Sub
 *
 * [C#]
 * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
 * {
 * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
 * }
 * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number): void;
/**
 * Draws a rectangle on the screen.
 *
 * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
 *
 * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
 *
 * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
 *
 * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
 *
 * -R: Red part of the color. (0-255)
 *
 * -G: Green part of the color. (0-255)
 *
 * -B: Blue part of the color. (0-255)
 *
 * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
 *
 * The total number of rectangles to be drawn in one frame is apparently limited to 399.
 *
 * @param x
 * @param y
 * @param width
 * @param height
 * @param r
 * @param g
 * @param b
 * @param a
 * @param p8
 */
export declare function drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number, p8: boolean): void;
export declare function drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number, p9: number): void;
export declare function drawScaleformMovie3d(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, rotationOrder: number): void;
export declare function drawScaleformMovie3dSolid(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, rotationOrder: number): void;
/**
 * unk is not used so no need
 * @param scaleform
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p5
 */
export declare function drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number, p5: number): void;
export declare function drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawShadowedSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadowId: number): void;
/**
 * Parameters:
 * * pos - coordinate where the spotlight is located
 * * dir - the direction vector the spotlight should aim at from its current position
 * * r,g,b - color of the spotlight
 * * distance - the maximum distance the light can reach
 * * brightness - the brightness of the light
 * * roundness - "smoothness" of the circle edge
 * * radius - the radius size of the spotlight
 * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
 *
 * Example in C# (spotlight aims at the closest vehicle):
 * Vector3 myPos = Game.Player.Character.Position;
 * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
 * Vector3 destinationCoords = nearest.Position;
 * Vector3 dirVector = destinationCoords - myPos;
 * dirVector.Normalize();
 * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param colorR
 * @param colorG
 * @param colorB
 * @param distance
 * @param brightness
 * @param hardness
 * @param radius
 * @param falloff
 */
export declare function drawSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, hardness: number, radius: number, falloff: number): void;
/**
 * Draws a 2D sprite on the screen.
 *
 * Parameters:
 * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
 *
 * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
 *
 * screenX/Y - Screen offset (0.5 = center)
 * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
 *
 * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
 *
 * red,green,blue - Sprite color (default = 255/255/255)
 *
 * alpha - opacity level
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 * @param p12
 */
export declare function drawSprite(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: boolean, p12: number): void;
/**
 * Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
 * x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
 * y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
 * width 0.0 - 1.0 is the reasonable amount generally
 * height 0.0 - 1.0 is the reasonable amount generally
 * p6 almost always 0.0
 * p11 seems to be unknown but almost always 0 int
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param p6
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 * @param p12
 */
export declare function drawSpriteArx(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, p6: number, red: number, green: number, blue: number, alpha: number, p11: number, p12: number): void;
/**
 * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
 *
 * u1, v1 - texture coordinates for the top-left corner
 * u2, v2 - texture coordinates for the bottom-right corner
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param u1
 * @param v1
 * @param u2
 * @param v2
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p15
 */
export declare function drawSpriteArxWithUv(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, u1: number, v1: number, u2: number, v2: number, heading: number, red: number, green: number, blue: number, alpha: number, p15: number): void;
/**
 * Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
 * These seem to be the only dicts ever requested by this native:
 *
 * prop_screen_biker_laptop
 * Prop_Screen_GR_Disruption
 * Prop_Screen_TaleOfUs
 * prop_screen_nightclub
 * Prop_Screen_IE_Adhawk
 * prop_screen_sm_free_trade_shipping
 * prop_screen_hacker_truck
 * MPDesktop
 * Prop_Screen_Nightclub
 * And a few others
 *
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 */
export declare function drawSpriteNamedRendertarget(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: number): void;
/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 *
 * p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
export declare function drawTexturedPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void;
/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 *
 * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red1
 * @param green1
 * @param blue1
 * @param alpha1
 * @param red2
 * @param green2
 * @param blue2
 * @param alpha2
 * @param red3
 * @param green3
 * @param blue3
 * @param alpha3
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
export declare function drawTexturedPolyWithThreeColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red1: number, green1: number, blue1: number, alpha1: number, red2: number, green2: number, blue2: number, alpha2: number, red3: number, green3: number, blue3: number, alpha3: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void;
/**
 * All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.
 *
 * "act_cinema.ysc", line 1483:
 * HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
 * HUD::SET_TEXT_RENDER_ID(l_AE);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
 * if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
 * } else {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * }
 *
 * "am_mp_property_int.ysc", line 102545:
 * if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
 * if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
 * HUD::SET_TEXT_RENDER_ID(a_2._f1);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * if (GRAPHICS::GET_TV_CHANNEL() == -1) {
 * sub_a8fa5(a_2, 1);
 * } else {
 * sub_a8fa5(a_2, 1);
 * GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
 * }
 * HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
 * }
 * }
 *
 * @param xPos
 * @param yPos
 * @param xScale
 * @param yScale
 * @param rotation
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, red: number, green: number, blue: number, alpha: number): void;
export declare function dropAmbientProp(ped: number): void;
/**
 * Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
 * @param toggle
 */
export declare function enableAlienBloodVfx(toggle: boolean): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function enableAllControlActions(control: number): void;
/**
 * Creates cartoon effect when Michel smokes the weed
 * @param toggle
 */
export declare function enableClownBloodVfx(toggle: boolean): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param enableRelatedActions
 */
export declare function enableControlAction(control: number, action: number, enableRelatedActions: boolean): void;
/**
 * https://alloc8or.re/gta5/doc/enums/DispatchType.txt
 * @param dispatchService
 * @param toggle
 */
export declare function enableDispatchService(dispatchService: number, toggle: boolean): void;
export declare function enableEntityBulletCollision(entity: number): void;
/**
 * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
 *
 * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
 * @param mapObjectHash
 */
export declare function enableExteriorCullModelThisFrame(mapObjectHash: number): void;
/**
 * Enables laser sight on any weapon.
 *
 * It doesn't work. Neither on tick nor OnKeyDown
 * @param toggle
 */
export declare function enableLaserSightRendering(toggle: boolean): void;
/**
 * The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
 * @param strength
 */
export declare function enableMoonCycleOverride(strength: number): void;
export declare function enableMovieKeyframeWait(toggle: boolean): void;
export declare function enableMovieSubtitles(toggle: boolean): void;
export declare function enableMpLight(ped: number, toggle: boolean): void;
export declare function enableProcobjCreation(): void;
export declare function enableSavingInGarage(garageHash: number, toggle: boolean): void;
export declare function enableScriptBrainSet(brainSet: number): void;
export declare function enableShadowCullModelThisFrame(mapObjectHash: number): void;
export declare function enableSpecialAbility(player: number, toggle: boolean, p2: number): void;
export declare function enableStadiumProbesThisFrame(toggle: boolean): void;
/**
 * Works for planes only.
 * @param vehicle
 * @param toggle
 */
export declare function enableStallWarningSounds(vehicle: number, toggle: boolean): void;
export declare function enableStuntJumpAudio(): void;
export declare function enableStuntJumpSet(p0: number): void;
export declare function enableSwitchPauseBeforeDescent(): void;
/**
 * Makes the ped jump around like they're in a tennis match
 * @param ped
 * @param toggle
 * @param p2
 */
export declare function enableTennisMode(ped: number, toggle: boolean, p2: boolean): void;
/**
 * Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
 * @param vehicle
 */
export declare function enableVehicleDynamicAmbientScales(vehicle: number): void;
export declare function enableVehicleExhaustPops(vehicle: number, toggle: boolean): void;
export declare function enableVehicleFanbeltDamage(vehicle: number, toggle: boolean): void;
export declare function endBeingBoss(p0: number, p1: number, p2: number): void;
export declare function endBeingGoon(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function endPetrolTrailDecals(): void;
export declare function endReplayStats(): void;
/**
 * Pops and calls the Scaleform function on the stack
 */
export declare function endScaleformMovieMethod(): void;
export declare function endScaleformMovieMethodReturnValue(): number;
/**
 * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
 */
export declare function endSrl(): void;
export declare function endTextCommandAddDirectlyToPreviousBriefs(p0: boolean): void;
/**
 * enum eBusySpinnerType
 * {
 * BUSY_SPINNER_LEFT,
 * BUSY_SPINNER_LEFT_2,
 * BUSY_SPINNER_LEFT_3,
 * BUSY_SPINNER_SAVE,
 * BUSY_SPINNER_RIGHT,
 * };
 * @param busySpinnerType
 */
export declare function endTextCommandBusyspinnerOn(busySpinnerType: number): void;
export declare function endTextCommandClearPrint(): void;
/**
 * shape goes from -1 to 50 (may be more).
 * p0 is always 0.
 *
 * Example:
 * void FloatingHelpText(const char* text)
 * {
 * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
 * }
 *
 * Image:
 * - imgbin.org/images/26209.jpg
 *
 * more inputs/icons:
 * - https://pastebin.com/nqNYWMSB
 *
 * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
 * @param p0
 * @param loop
 * @param beep
 * @param shape
 */
export declare function endTextCommandDisplayHelp(p0: number, loop: boolean, beep: boolean, shape: number): void;
/**
 * After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
 *
 * Used to be known as _DRAW_TEXT
 * @param x
 * @param y
 * @param p2
 */
export declare function endTextCommandDisplayText(x: number, y: number, p2: number): void;
/**
 * Determines how many lines the text string will use when drawn on screen.
 * Must use 0x521FB041D93DD0E4 for setting up
 * @param x
 * @param y
 */
export declare function endTextCommandGetNumberOfLinesForString(x: number, y: number): number;
export declare function endTextCommandGetScreenWidthOfDisplayText(p0: boolean): number;
export declare function endTextCommandIsMessageDisplayed(): boolean;
export declare function endTextCommandIsThisHelpMessageBeingDisplayed(p0: number): boolean;
export declare function endTextCommandOverrideButtonText(p0: number): void;
/**
 * Draws the subtitle at middle center of the screen.
 *
 * int duration = time in milliseconds to show text on screen before disappearing
 *
 * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
 *
 * Used to be known as _DRAW_SUBTITLE_TIMED
 * @param duration
 * @param drawImmediately
 */
export declare function endTextCommandPrint(duration: number, drawImmediately: boolean): void;
export declare function endTextCommandScaleformString(): void;
/**
 * Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
 * @param blip
 */
export declare function endTextCommandSetBlipName(blip: number): void;
/**
 * Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
 * Example:
 *
 * HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");
 * HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
 * @param textureDict
 * @param textureName
 * @param rpBonus
 * @param colorOverlay
 * @param titleLabel
 */
export declare function endTextCommandThefeedPostAward(textureDict: string, textureName: string, rpBonus: number, colorOverlay: number, titleLabel: string): number;
export declare function endTextCommandThefeedPostCrewRankupWithLiteralFlag(p0: string, p1: string, p2: string, p3: boolean, p4: boolean): number;
export declare function endTextCommandThefeedPostCrewtag(p0: boolean, p1: boolean, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, R: number, G: number, B: number): [number, number];
export declare function endTextCommandThefeedPostCrewtagWithGameName(p0: boolean, p1: boolean, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, playerName: string, R: number, G: number, B: number): [number, number];
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames: https://pastebin.com/XdpJVbHz
 *
 *
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 *
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
export declare function endTextCommandThefeedPostMessagetext(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * Needs more research.
 *
 * Only one type of usage in the scripts:
 *
 * HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
export declare function endTextCommandThefeedPostMessagetextSubtitleLabel(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 *
 * Example, only occurrence in the scripts:
 * v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @param duration
 */
export declare function endTextCommandThefeedPostMessagetextTu(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number): number;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames https://pastebin.com/XdpJVbHz
 *
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 *
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @param duration
 * @param clanTag
 */
export declare function endTextCommandThefeedPostMessagetextWithCrewTag(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number, clanTag: string): number;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames:  https://pastebin.com/XdpJVbHz
 *
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 *
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
 *
 *
 * int IconNotification(char *text, char *text2, char *Subject)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
 * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
 * }
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType1
 * @param sender
 * @param subject
 * @param duration
 * @param clanTag
 * @param iconType2
 * @param p9
 */
export declare function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName: string, textureName: string, flash: boolean, iconType1: number, sender: string, subject: string, duration: number, clanTag: string, iconType2: number, p9: number): number;
export declare function endTextCommandThefeedPostMpticker(blink: boolean, p1: boolean): number;
/**
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
 *
 * example:
 * HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - https://imgur.com/lGBPCz3
 * @param type
 * @param image
 * @param text
 */
export declare function endTextCommandThefeedPostReplay(type: number, image: number, text: string): number;
/**
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, button accepts "~INPUT_SOMETHING~"
 *
 * example:
 * HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - https://imgur.com/UPy0Ial
 *
 *
 * Examples from the scripts:
 * l_D1[1 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");
 * l_D1[1 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
 *
 * @param type
 * @param button
 * @param text
 */
export declare function endTextCommandThefeedPostReplayInput(type: number, button: string, text: string): number;
/**
 * List of picture names: https://pastebin.com/XdpJVbHz
 * Example result: https://i.imgur.com/SdEZ22m.png
 * @param statTitle
 * @param iconEnum
 * @param stepVal
 * @param barValue
 * @param isImportant
 * @param pictureTextureDict
 * @param pictureTextureName
 */
export declare function endTextCommandThefeedPostStats(statTitle: string, iconEnum: number, stepVal: boolean, barValue: number, isImportant: boolean, pictureTextureDict: string, pictureTextureName: string): number;
export declare function endTextCommandThefeedPostTicker(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostTickerForced(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostTickerWithTokens(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostUnlock(gxtLabel1: string, p1: number, gxtLabel2: string): number;
export declare function endTextCommandThefeedPostUnlockTu(gxtLabel1: string, p1: number, gxtLabel2: string, p3: number): number;
export declare function endTextCommandThefeedPostUnlockTuWithColor(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 *
 * List of picNames: https://pastebin.com/XdpJVbHz
 * HUD colors and their values: https://pastebin.com/d9aHPbXN
 *
 * Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
 * @param txdName1
 * @param textureName1
 * @param count1
 * @param txdName2
 * @param textureName2
 * @param count2
 * @param hudColor1
 * @param hudColor2
 */
export declare function endTextCommandThefeedPostVersusTu(txdName1: string, textureName1: string, count1: number, txdName2: string, textureName2: string, count2: number, hudColor1: number, hudColor2: number): number;
/**
 * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
 *
 * END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?
 */
export declare function endTextCommandUnparsedScaleformString(): void;
/**
 * From fm_deathmatch_creator and fm_race_creator:
 *
 * FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
 * FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
 * @param hash
 */
export declare function executeContentChangesetGroupForAll(hash: number): void;
/**
 * Forces the ped to fall back and kills it.
 *
 * It doesn't really explode the ped's head but it kills the ped
 * @param ped
 * @param weaponHash
 */
export declare function explodePedHead(ped: number, weaponHash: number): void;
/**
 * WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
 * @param ped
 * @param weaponHash
 * @param p2
 */
export declare function explodeProjectiles(ped: number, weaponHash: number, p2: boolean): void;
/**
 * Explodes a selected vehicle.
 *
 * Vehicle vehicle = Vehicle you want to explode.
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 *
 * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 */
export declare function explodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean): void;
export declare function explodeVehicleInCutscene(vehicle: number, p1: boolean): void;
/**
 * Appears only 3 times in the scripts, more specifically in michael1.ysc
 *
 * -
 * This can be used to prevent dying if you are "out of the world"
 * @param x
 * @param y
 * @param z
 */
export declare function extendWorldBoundaryForPlayer(x: number, y: number, z: number): void;
export declare function facebookCanPostToFacebook(): boolean;
export declare function facebookDidPostSucceed(): boolean;
export declare function facebookHasPostCompleted(): boolean;
export declare function facebookPostCompletedHeist(heistName: string, cashEarned: number, xpEarned: number): boolean;
export declare function facebookPostCompletedMilestone(milestoneId: number): boolean;
export declare function facebookPostCreateCharacter(): boolean;
/**
 * Fades nearby decals within the range specified
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export declare function fadeDecalsInRange(x: number, y: number, z: number, p3: number, p4: number): void;
/**
 * Hardcoded to not work in SP.
 * @param p0
 */
export declare function fadeOutLocalPlayer(p0: boolean): void;
export declare function fadeUpPedLight(p0: number): void;
export declare function filloutPmPlayerList(p1: number, p2: number): [boolean, number];
export declare function filloutPmPlayerListWithNames(p2: number, p3: number): [boolean, number, number];
export declare function finalizeHeadBlend(ped: number): void;
/**
 * In the script "player_scene_t_bbfight.c4":
 * "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4 -- [[16]] ], v_9, &v_A, &v_B))"
 * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
 * -- &l_19F[v_4 -- [[16]] ] (p1) is used in other natives in the script as the "animation" param.
 * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
 * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
 * "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
 * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDictionary
 * @param animName
 * @param p2
 * @param p3
 * @param p4
 */
export declare function findAnimEventPhase(animDictionary: string, animName: string, p2: string): [boolean, number, number];
/**
 * Finds the vehicle that is carrying this entity with a handler frame.
 * The model of the entity must be prop_contr_03b_ld or the function will return 0.
 * @param entity
 */
export declare function findHandlerVehicleContainerIsAttachedTo(entity: number): number;
export declare function findRadioStationIndex(stationNameHash: number): number;
/**
 * Native is significantly more complicated than simply generating a random vector & length.
 * The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible
 * @param ped
 */
export declare function findSpawnCoordinatesForHeli(ped: number): Vector3;
/**
 * Finds a position ahead of the player by predicting the players next actions.
 * The positions match path finding node positions.
 * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
 * @param posX
 * @param posY
 * @param posZ
 * @param fwdVecX
 * @param fwdVecY
 * @param fwdVecZ
 * @param distance
 * @param spawnPoint
 */
export declare function findSpawnPointInDirection(posX: number, posY: number, posZ: number, fwdVecX: number, fwdVecY: number, fwdVecZ: number, distance: number, spawnPoint: Vector3): [boolean, Vector3];
export declare function fireAirDefenceSphereWeaponAtPosition(zoneId: number, x: number, y: number, z: number): void;
export declare function fixObjectFragment(object: number): void;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 *
 * Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
 *
 * Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
 * @param vehicle
 * @param windowIndex
 */
export declare function fixVehicleWindow(vehicle: number, windowIndex: number): void;
export declare function flagPlayerContextInTournament(toggle: boolean): void;
export declare function flashAbilityBar(millisecondsToFlash: number): void;
/**
 * adds a short flash to the Radar/Minimap
 * Usage: UI.FLASH_MINIMAP_DISPLAY
 */
export declare function flashMinimapDisplay(): void;
export declare function flashMinimapDisplayWithColor(hudColorIndex: number): void;
export declare function flashWantedDisplay(p0: boolean): void;
export declare function floor(value: number): number;
export declare function forceActivatePhysicsOnUnfixedPickup(pickup: number, toggle: boolean): void;
export declare function forceActivatingTrackingOnEntity(p0: number, p1: number): void;
export declare function forceAllHeadingValuesToAlign(ped: number): void;
export declare function forceAllowTimeBasedFadingThisFrame(): void;
export declare function forceBonnetCameraRelativeHeadingAndPitch(p0: number, p1: number): void;
export declare function forceCamFarClip(cam: number, p1: number): void;
export declare function forceCameraRelativeHeadingAndPitch(roll: number, pitch: number, yaw: number): void;
export declare function forceCheckScriptVariables(): void;
export declare function forceCinematicRenderingThisUpdate(toggle: boolean): void;
/**
 * used with 1,2,8,64,128 in the scripts
 * @param cleanupFlags
 */
export declare function forceCleanup(cleanupFlags: number): void;
/**
 * PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
 * @param name
 * @param cleanupFlags
 */
export declare function forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void;
export declare function forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void;
export declare function forceCloseReportugcMenu(): void;
export declare function forceCloseTextInputBox(): void;
export declare function forceCloudMpStatsDownloadAndOverwriteLocalSave(): void;
/**
 * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
 * @param entity
 */
export declare function forceEntityAiAndAnimationUpdate(entity: number): void;
export declare function forceExposureReadback(toggle: boolean): void;
/**
 * Sets the localplayer playerinfo state back to playing (State 0)
 *
 * States are:
 * -1: "Invalid"
 * 0: "Playing"
 * 1: "Died"
 * 2: "Arrested"
 * 3: "Failed Mission"
 * 4: "Left Game"
 * 5: "Respawn"
 * 6: "In MP Cutscene"
 */
export declare function forceGameStatePlaying(): void;
export declare function forceInstantLegIkSetup(ped: number): void;
/**
 * creates single lightning+thunder at random position
 */
export declare function forceLightningFlash(): void;
/**
 * Changes start time of a tracklist (milliseconds)
 * R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)
 * @param radioStation
 * @param trackListName
 * @param milliseconds
 */
export declare function forceMusicTrackList(radioStation: string, trackListName: string, milliseconds: number): void;
export declare function forceNextMessageToPreviousBriefsList(p0: number): void;
export declare function forceOffWantedStarFlash(toggle: boolean): void;
export declare function forceParticleFxInVehicleInterior(p0: number, p1: number): void;
export declare function forcePedAiAndAnimationUpdate(ped: number, p1: boolean, p2: boolean): void;
/**
 * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
 *
 * enum eMotionState // 0x92A659FE
 * {
 * MotionState_None = 0xEE717723,
 * MotionState_Idle = 0x9072A713,
 * MotionState_Walk = 0xD827C3DB,
 * MotionState_Run = 0xFFF7E7A4,
 * MotionState_Sprint = 0xBD8817DB,
 * MotionState_Crouch_Idle = 0x43FB099E,
 * MotionState_Crouch_Walk = 0x08C31A98,
 * MotionState_Crouch_Run = 0x3593CF09,
 * MotionState_DoNothing = 0x0EC17E58,
 * MotionState_AnimatedVelocity = 0x551AAC43,
 * MotionState_InVehicle = 0x94D9D58D,
 * MotionState_Aiming = 0x3F67C6AF,
 * MotionState_Diving_Idle = 0x4848CDED,
 * MotionState_Diving_Swim = 0x916E828C,
 * MotionState_Swimming_TreadWater = 0xD1BF11C7,
 * MotionState_Dead = 0x0DBB071C,
 * MotionState_Stealth_Idle = 0x422D7A25,
 * MotionState_Stealth_Walk = 0x042AB6A2,
 * MotionState_Stealth_Run = 0xFB0B79E1,
 * MotionState_Parachuting = 0xBAC0F10B,
 * MotionState_ActionMode_Idle = 0xDA40A0DC,
 * MotionState_ActionMode_Walk = 0xD2905EA7,
 * MotionState_ActionMode_Run = 0x31BADE14,
 * MotionState_Jetpack = 0x535E6A5E
 * };
 * @param ped
 * @param motionStateHash
 * @param p2
 * @param p3
 * @param p4
 */
export declare function forcePedMotionState(ped: number, motionStateHash: number, p2: boolean, p3: number, p4: boolean): boolean;
export declare function forcePedPanicWalla(): void;
export declare function forcePedToOpenParachute(ped: number): void;
export declare function forcePickupRegenerate(p0: number): void;
export declare function forcePickupRotateFaceUp(): void;
/**
 * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
 * @param vehicle
 * @param p1
 */
export declare function forcePlaybackRecordedVehicleUpdate(vehicle: number, p1: boolean): void;
export declare function forcePortablePickupLastAccessiblePositionSetting(object: number): void;
export declare function forcePostfxBulletImpactsAfterHud(p0: boolean): void;
export declare function forceRenderInGameUi(toggle: boolean): void;
export declare function forceRoomForEntity(entity: number, interior: number, roomHashKey: number): void;
export declare function forceRoomForGameViewport(interiorID: number, roomHashKey: number): void;
/**
 * Not present in retail version of the game, actual definiton seems to be
 * _LOG_DEBUG_INFO(const char* category, const char* debugText);
 * @param p0
 */
export declare function forceScriptedGfxWhenFrontendActive(p0: string): void;
/**
 * Doesn't actually return anything.
 */
export declare function forceSonarBlipsThisFrame(): boolean;
/**
 * This has been found in use in the decompiled files.
 * @param player
 */
export declare function forceStartHiddenEvasion(player: number): void;
export declare function forceSubThrottleForTime(vehicle: number, p1: number, p2: number): void;
export declare function forceSubmarineNeurtalBuoyancy(p0: number, p1: number): void;
export declare function forceSubmarineSurfaceMode(vehicle: number, toggle: boolean): void;
export declare function forceTightspaceCustomFramingThisUpdate(): void;
/**
 * This native sets the audio of the specified vehicle to the audioName (p1).
 *
 * Use the audioNameHash found in vehicles.meta
 *
 * Example:
 * _SET_VEHICLE_AUDIO(veh, "ADDER");
 * The selected vehicle will now have the audio of the Adder.
 * @param vehicle
 * @param audioName
 */
export declare function forceUseAudioGameObject(vehicle: number, audioName: string): void;
export declare function forceVehicleCamStuntSettingsThisUpdate(): void;
export declare function forceZeroMassInCollisions(ped: number): void;
export declare function freeMemoryForHighQualityPhoto(): void;
export declare function freeMemoryForLowQualityPhoto(): void;
export declare function freeMemoryForMissionCreatorPhoto(): void;
export declare function freeMemoryForMissionCreatorPhotoPreview(): void;
/**
 * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
 * @param entity
 * @param toggle
 */
export declare function freezeEntityPosition(entity: number, toggle: boolean): void;
export declare function freezeMicrophone(): void;
export declare function freezeRadioStation(radioStation: string): void;
/**
 * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
 *
 * distToNxJunction seems to be the distance in metres * 10.0f
 *
 * direction:
 * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
 * 1 = Route is being calculated or the player is going in the wrong direction
 * 2 = Please Proceed the Highlighted Route
 * 3 = In (distToNxJunction) Turn Left
 * 4 = In (distToNxJunction) Turn Right
 * 5 = In (distToNxJunction) Keep Straight
 * 6 = In (distToNxJunction) Turn Sharply To The Left
 * 7 = In (distToNxJunction) Turn Sharply To The Right
 * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
 *
 * return value set to 0 always
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param direction
 * @param p5
 * @param distToNxJunction
 */
export declare function generateDirectionsToCoord(x: number, y: number, z: number, p3: boolean): [number, number, number, number];
export declare function generateVehicleCreationPosFromPaths(p1: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): [boolean, Vector3, Vector3];
/**
 * For Steam.
 * Always returns 0 in retail version of the game.
 * @param achievementId
 */
export declare function getAchievementProgress(achievementId: number): number;
/**
 * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * @param vehicle
 */
export declare function getActiveVehicleMissionType(vehicle: number): number;
/**
 * Returns current screen resolution.
 * @param x
 * @param y
 */
export declare function getActualScreenResolution(): [number, number];
export declare function getAiPedPedBlipIndex(ped: number): number;
/**
 * Returns the current AI BLIP for the specified ped
 * @param ped
 */
export declare function getAiPedVehicleBlipIndex(ped: number): number;
export declare function getAllVehicles(vehsStruct: number): [number, number];
export declare function getAllocatedStackSize(): number;
/**
 * Returns profile setting 17.
 */
export declare function getAllowMovementWhileZoomed(): boolean;
export declare function getAmbientVoiceNameHash(ped: number): number;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export declare function getAmmoInClip(ped: number, weaponHash: number, ammo: number): [boolean, number];
/**
 * WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
 *
 * From decompiled scripts
 * Returns total ammo in weapon
 *
 * GTALua Example :
 * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponhash
 */
export declare function getAmmoInPedWeapon(ped: number, weaponhash: number): number;
export declare function getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 */
export declare function getAnimDuration(animDict: string, animName: string): number;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
export declare function getAnimInitialOffsetPosition(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
export declare function getAnimInitialOffsetRotation(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3;
/**
 * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export declare function getApproxFloorForArea(x1: number, y1: number, x2: number, y2: number): number;
/**
 * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
 * @param x
 * @param y
 */
export declare function getApproxFloorForPoint(x: number, y: number): number;
/**
 * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export declare function getApproxHeightForArea(x1: number, y1: number, x2: number, y2: number): number;
/**
 * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
 * @param x
 * @param y
 */
export declare function getApproxHeightForPoint(x: number, y: number): number;
/**
 * Returns true when the bomb bay doors of this plane are open. False if they're closed.
 * @param aircraft
 */
export declare function getAreBombBayDoorsOpen(aircraft: number): boolean;
/**
 * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
 *
 * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
 */
export declare function getAreCameraControlsDisabled(): boolean;
export declare function getAspectRatio(b: boolean): number;
/**
 * Gets the position of the cargobob hook, in world coords.
 * @param cargobob
 */
export declare function getAttachedPickUpHookPosition(cargobob: number): Vector3;
export declare function getAudibleMusicTrackTextId(): number;
export declare function getBaseElementLocationFromMetadataBlock(p2: number, p3: boolean): [boolean, number, number];
/**
 * Returns value of the '-benchmarkIterations' command line option.
 */
export declare function getBenchmarkIterations(): number;
/**
 * Returns value of the '-benchmarkPass' command line option.
 */
export declare function getBenchmarkPass(): number;
/**
 * p1 is always 0 in the scripts.
 * @param ped
 * @param p1
 */
export declare function getBestPedWeapon(ped: number, p1: boolean): number;
/**
 * In percentage: 0.0 - 100.0
 * @param binkMovie
 */
export declare function getBinkMovieTime(binkMovie: number): number;
export declare function getBitsInRange(_var: number, rangeStart: number, rangeEnd: number): number;
export declare function getBlipAlpha(blip: number): number;
export declare function getBlipColour(blip: number): number;
export declare function getBlipCoords(blip: number): Vector3;
/**
 * Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
 * @param blip
 */
export declare function getBlipFadeDirection(blip: number): number;
/**
 * Returns the Blip handle of given Entity.
 * @param entity
 */
export declare function getBlipFromEntity(entity: number): number;
export declare function getBlipHudColour(blip: number): number;
export declare function getBlipInfoIdCoord(blip: number): Vector3;
export declare function getBlipInfoIdDisplay(blip: number): number;
export declare function getBlipInfoIdEntityIndex(blip: number): number;
/**
 * This function is hard-coded to always return 0.
 * @param blip
 */
export declare function getBlipInfoIdPickupIndex(blip: number): number;
/**
 * Returns a value based on what the blip is attached to
 * 1 - Vehicle
 * 2 - Ped
 * 3 - Object
 * 4 - Coord
 * 5 - unk
 * 6 - Pickup
 * 7 - Radius
 * @param blip
 */
export declare function getBlipInfoIdType(blip: number): number;
export declare function getBlipRotation(blip: number): number;
/**
 * Blips Images + IDs:
 * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
 * @param blip
 */
export declare function getBlipSprite(blip: number): number;
export declare function getBoatBoomPositionRatio(vehicle: number): number;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getBoatVehicleModelAgility(modelHash: number): number;
export declare function getBossGoonUuid(characterSlot: number, p1: number, p2: number): void;
/**
 * Returns true when both headlights are broken. This does not include extralights.
 * @param vehicle
 */
export declare function getBothVehicleHeadlightsDamaged(vehicle: number): boolean;
/**
 * enum Context
 * {
 * ON_FOOT,
 * IN_VEHICLE,
 * ON_BIKE,
 * IN_BOAT,
 * IN_AIRCRAFT,
 * IN_SUBMARINE,
 * IN_HELI,
 * IN_TURRET
 * };
 */
export declare function getCamActiveViewModeContext(): number;
export declare function getCamAnimCurrentPhase(cam: number): number;
export declare function getCamCoord(cam: number): Vector3;
export declare function getCamDofStrength(cam: number): number;
export declare function getCamFarClip(cam: number): number;
export declare function getCamFarDof(cam: number): number;
export declare function getCamFov(cam: number): number;
export declare function getCamNearClip(cam: number): number;
export declare function getCamNearDof(cam: number): number;
/**
 * The last parameter, as in other "ROT" methods, is usually 2.
 * @param cam
 * @param rotationOrder
 */
export declare function getCamRot(cam: number, rotationOrder: number): Vector3;
export declare function getCamSplineNodeIndex(cam: number): number;
/**
 * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
 * @param cam
 */
export declare function getCamSplineNodePhase(cam: number): number;
/**
 * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
 *
 * (returns 1.0f when no nodes has been added, reached end of non existing spline)
 * @param cam
 */
export declare function getCamSplinePhase(cam: number): number;
/**
 * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
 * @param context
 */
export declare function getCamViewModeForContext(context: number): number;
export declare function getCanPedBeGrabbedByScript(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: number): boolean;
/**
 * Used in decompiled scripts in combination with GET_VEHICLE_SIZE
 * p7 is usually 2
 * p8 is usually 1
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p7
 * @param p8
 */
export declare function getCanVehicleBePlacedHere(vehicle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number): boolean;
/**
 * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
 * @param vehicle
 */
export declare function getCarHasJump(vehicle: number): boolean;
export declare function getCauseOfMostRecentForceCleanup(): number;
export declare function getCgoffset(entity: number): Vector3;
/**
 * Returns a substring of a specified length starting at a specified position.
 *
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);
 * @param text
 * @param position
 * @param length
 */
export declare function getCharacterFromAudioConversationFilename(text: string, position: number, length: number): string;
/**
 * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
 *
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);
 * // Overflows are possibly replaced with underscores (needs verification)
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?
 * @param text
 * @param startPosition
 * @param endPosition
 */
export declare function getCharacterFromAudioConversationFilenameBytes(text: string, startPosition: number, endPosition: number): string;
/**
 * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
 *
 * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
 *
 * Example:
 * // Condensed example of how Rockstar uses this function
 * strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
 *
 * --
 *
 * "fm_race_creator.ysc", line 85115:
 * // parameters modified for clarity
 * BOOL sub_8e5aa(char *text, int length) {
 * for (i = 0; i <= (length - 2); i += 1) {
 * if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {
 * return FALSE;
 * }
 * }
 * return TRUE;
 * }
 * @param text
 * @param position
 * @param length
 * @param maxLength
 */
export declare function getCharacterFromAudioConversationFilenameWithByteLimit(text: string, position: number, length: number, maxLength: number): string;
export declare function getCharacterMenuPedFloatStat(statHash: number, p2: boolean): [boolean, number];
export declare function getCharacterMenuPedIntStat(p0: number, p2: number): [boolean, number];
export declare function getCharacterMenuPedMaskedIntStat(statHash: number, p2: number, mask: number, p4: boolean): [boolean, number];
export declare function getCityDensity(): number;
export declare function getClipSetForScriptedGunTask(gunTaskType: number): string;
export declare function getClockDayOfMonth(): number;
/**
 * Gets the current day of the week.
 *
 * 0: Sunday
 * 1: Monday
 * 2: Tuesday
 * 3: Wednesday
 * 4: Thursday
 * 5: Friday
 * 6: Saturday
 */
export declare function getClockDayOfWeek(): number;
/**
 * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
 */
export declare function getClockHours(): number;
/**
 * Gets the current ingame clock minute.
 */
export declare function getClockMinutes(): number;
export declare function getClockMonth(): number;
/**
 * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
 */
export declare function getClockSeconds(): number;
export declare function getClockYear(): number;
export declare function getClosestBlipInfoId(blipSprite: number): number;
/**
 * Returns TRUE if it found something. FALSE if not.
 * @param outPosition
 * @param x
 * @param y
 * @param z
 */
export declare function getClosestFirePos(x: number, y: number, z: number): [boolean, Vector3];
/**
 * Get the closest vehicle node to a given position.
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param unknown1
 * @param unknown2
 */
export declare function getClosestMajorVehicleNode(x: number, y: number, z: number, unknown1: number, unknown2: number): [boolean, Vector3];
/**
 * Has 8 params in the latest patches.
 *
 * isMission - if true doesn't return mission objects
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param isMission
 * @param p6
 * @param p7
 */
export declare function getClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, isMission: boolean, p6: boolean, p7: boolean): number;
/**
 * Gets the closest ped in a radius.
 *
 * Ped Types:
 * Any ped = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 *
 * ------------------
 * P4 P5 P7 P8
 * 1  0  x  x  = return nearest walking Ped
 * 1  x  0  x  = return nearest walking Ped
 * x  1  1  x  = return Ped you are using
 * 0  0  x  x  = no effect
 * 0  x  0  x  = no effect
 *
 * x = can be 1 or 0. Does not have any obvious changes.
 *
 * This function does not return ped who is:
 * 1. Standing still
 * 2. Driving
 * 3. Fleeing
 * 4. Attacking
 *
 * This function only work if the ped is:
 * 1. walking normally.
 * 2. waiting to cross a road.
 *
 * Note: PED::GET_PED_NEARBY_PEDS works for more peds.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param outPed
 * @param p7
 * @param p8
 * @param pedType
 */
export declare function getClosestPed(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p7: boolean, p8: boolean, pedType: number): [boolean, number];
/**
 * clamp: sets whether the product should be clamped between the given coordinates
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param clamp
 */
export declare function getClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): Vector3;
/**
 * p1 seems to be always 1.0f in the scripts
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export declare function getClosestRoad(x: number, y: number, z: number, p3: number, p4: number, p10: boolean): [boolean, Vector3, Vector3, number, number, number];
/**
 * Example usage
 * VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)
 *
 * x, y, z: Position to get closest vehicle to.
 * radius: Max radius to get a vehicle.
 * modelHash: Limit to vehicles with this model. 0 for any.
 * flags: The bitwise flags altering the function's behaviour.
 *
 * Does not return police cars or helicopters.
 *
 * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
 *
 * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
 *
 * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
 * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
 *
 * Conversion of found flags to binary: https://pastebin.com/kghNFkRi
 *
 * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
 *
 * It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
 *
 * -------------------------------------------------------------------------
 *
 * Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
export declare function getClosestVehicle(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number;
/**
 * https://gtaforums.com/topic/843561-pathfind-node-types
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param nodeFlags
 * @param p5
 * @param p6
 */
export declare function getClosestVehicleNode(x: number, y: number, z: number, nodeFlags: number, p5: number, p6: number): [boolean, Vector3];
/**
 * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
 *
 * nodeType: 0 = main roads, 1 = any dry path, 3 = water
 * p6 is always 3.0
 * p7 is always 0
 *
 * gtaforums.com/topic/843561-pathfind-node-types
 *
 * Example of usage, moving vehicle to closest path/road:
 * Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
 * Vector3 closestVehicleNodeCoords;
 * float roadHeading;
 * PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);
 * ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
 * ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
 * VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
 *
 * ------------------------------------------------------------------
 * C# Example (ins1de) : https://pastebin.com/fxtMWAHD
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param outHeading
 * @param nodeType
 * @param p6
 * @param p7
 */
export declare function getClosestVehicleNodeWithHeading(x: number, y: number, z: number, nodeType: number, p6: number, p7: number): [boolean, Vector3, number];
/**
 * Returns POSIX timestamp, an int representing the cloud time.
 */
export declare function getCloudTimeAsInt(): number;
/**
 * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
 */
export declare function getCloudTimeAsString(): string;
export declare function getCloudsAlpha(): number;
export declare function getCollisionNormalOfLastHitForEntity(entity: number): Vector3;
/**
 * p0: Ped Handle
 * p1: int i | 0 <= i <= 27
 *
 * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
 *
 * <BlindFireChance value="0.1"/>
 * <WeaponShootRateModifier value="1.0"/>
 * <TimeBetweenBurstsInCover value="1.25"/>
 * <BurstDurationInCover value="2.0"/>
 * <TimeBetweenPeeks value="10.0"/>
 * <WeaponAccuracy value="0.18"/>
 * <FightProficiency value="0.8"/>
 * <StrafeWhenMovingChance value="1.0"/>
 * <WalkWhenStrafingChance value="0.0"/>
 * <AttackWindowDistanceForCover value="55.0"/>
 * <TimeToInvalidateInjuredTarget value="9.0"/>
 * <TriggerChargeTime_Near value="4.0"/>
 * <TriggerChargeTime_Far value="10.0"/>
 *
 * -------------Confirmed by editing combatbehavior.meta:
 * p1:
 * 0=BlindFireChance
 * 1=BurstDurationInCover
 * 3=TimeBetweenBurstsInCover
 * 4=TimeBetweenPeeks
 * 5=StrafeWhenMovingChance
 * 8=WalkWhenStrafingChance
 * 11=AttackWindowDistanceForCover
 * 12=TimeToInvalidateInjuredTarget
 * 16=OptimalCoverDistance
 *
 * @param ped
 * @param p1
 */
export declare function getCombatFloat(ped: number, p1: number): number;
/**
 * index2 is unused
 * @param index
 * @param index2
 */
export declare function getCommerceItemCat(index: number, index2: number): string;
export declare function getCommerceItemId(index: number): string;
export declare function getCommerceItemName(index: number): string;
export declare function getCommerceItemNumCats(index: number): number;
export declare function getCommerceItemTexturename(index: number): string;
export declare function getCommerceProductPrice(index: number): string;
export declare function getContentIdIndex(contentId: number): number;
/**
 * Returns pointer to an empty string.
 */
export declare function getContentToLoad(): string;
/**
 * This function is hard-coded to always return 0.
 */
export declare function getContentToLoadType(): number;
/**
 * control: unused parameter
 * @param control
 * @param controlGroup
 * @param allowXOSwap
 */
export declare function getControlGroupInstructionalButtonsString(control: number, controlGroup: number, allowXOSwap: boolean): string;
/**
 * Returns time in ms since last input.
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function getControlHowLongAgo(control: number): number;
/**
 * allowXOSwap appears to always be true.
 *
 * EG:
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1)  -- [[INPUT_FRONTEND_ACCEPT (e.g. Enter button)]]
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1)  -- [[INPUT_FRONTEND_CANCEL (e.g. ESC button)]]
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1)  -- [[INPUT_CONTEXT (e.g. E button)]]
 *
 * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
 *
 * control: unused parameter
 * @param control
 * @param action
 * @param allowXOSwap
 */
export declare function getControlInstructionalButtonsString(control: number, action: number, allowXOSwap: boolean): string;
/**
 * Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function getControlNormal(control: number, action: number): number;
/**
 * Seems to return values between -1 and 1 for controls like gas and steering.
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function getControlUnboundNormal(control: number, action: number): number;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function getControlValue(control: number, action: number): number;
/**
 * 0 -> up
 * 1 -> lowering down
 * 2 -> down
 * 3 -> raising up
 * @param vehicle
 */
export declare function getConvertibleRoofState(vehicle: number): number;
export declare function getCoordsAndRotationOfClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, rotationOrder: number): [boolean, Vector3, Vector3];
export declare function getCoordsOfProjectileTypeInAngledArea(vecAngledAreaPoint1X: number, vecAngledAreaPoint1Y: number, vecAngledAreaPoint1Z: number, vecAngledAreaPoint2X: number, vecAngledAreaPoint2Y: number, vecAngledAreaPoint2Z: number, distanceOfOppositeFace: number, weaponType: number, bIsPlayer: boolean): [boolean, Vector3];
export declare function getCoordsOfProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, projectileHash: number, ownedByPlayer: boolean): [boolean, Vector3];
export declare function getCoordsOfProjectileTypeWithinDistance(ped: number, weaponHash: number, distance: number, p4: boolean): [boolean, Vector3];
export declare function getCurrWeatherState(): [number, number, number];
/**
 * if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
 */
export declare function getCurrentFrontendMenuVersion(): number;
/**
 * 0 = american (en-US)
 * 1 = french (fr-FR)
 * 2 = german (de-DE)
 * 3 = italian (it-IT)
 * 4 = spanish (es-ES)
 * 5 = brazilian (pt-BR)
 * 6 = polish (pl-PL)
 * 7 = russian (ru-RU)
 * 8 = korean (ko-KR)
 * 9 = chinesetrad (zh-TW)
 * 10 = japanese (ja-JP)
 * 11 = mexican (es-MX)
 * 12 = chinesesimp (zh-CN)
 */
export declare function getCurrentLanguage(): number;
export declare function getCurrentNumberOfCloudPhotos(): number;
/**
 * Example in VB
 *
 * Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
 * Dim arg As New OutputArgument()
 * Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
 * Return arg.GetResult(Of Integer)()
 * End Function
 *
 * Usage:
 * If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
 * Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
 * @param ped
 * @param weaponHash
 */
export declare function getCurrentPedVehicleWeapon(ped: number, weaponHash: number): [boolean, number];
/**
 * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
 * p2 seems to be 1 most of the time.
 *
 *
 *
 *
 *
 * p2 is not implemented
 *
 * disassembly said that?
 *
 * @param ped
 * @param weaponHash
 * @param p2
 */
export declare function getCurrentPedWeapon(ped: number, p2: boolean): [boolean, number];
export declare function getCurrentPedWeaponEntityIndex(ped: number, p1: number): number;
export declare function getCurrentPlaybackForVehicle(vehicle: number): number;
export declare function getCurrentScriptedConversationLine(): number;
export declare function getCurrentTrackPlayTime(radioStationName: string): number;
export declare function getCurrentTrackSoundName(radioStationName: string): number;
export declare function getCurrentTvClipNamehash(): number;
export declare function getCurrentWebpageId(): number;
export declare function getCurrentWebsiteId(): number;
/**
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export declare function getCutFileConcatCount(cutsceneName: string): number;
export declare function getCutsceneConcatSectionPlaying(): number;
export declare function getCutsceneEndTime(): number;
export declare function getCutscenePlayDuration(): number;
export declare function getCutsceneSectionPlaying(): number;
export declare function getCutsceneTime(): number;
export declare function getCutsceneTotalDuration(): number;
export declare function getDeadPedPickupCoords(ped: number, p1: number, p2: number): Vector3;
export declare function getDebugCam(): number;
export declare function getDecalWashLevel(decal: number): number;
/**
 * Gets the aggressiveness factor of the ocean waves.
 */
export declare function getDeepOceanScaler(): number;
export declare function getDefaultAmmoForWeaponPickup(pickupHash: number): number;
/**
 * This function is hard-coded to always return 1.
 */
export declare function getDefaultScriptRendertargetRenderId(): number;
export declare function getDefaultSecondaryTintForBarber(colorID: number): number;
export declare function getDefaultSecondaryTintForCreator(colorId: number): number;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function getDisabledControlNormal(control: number, action: number): number;
/**
 * The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function getDisabledControlUnboundNormal(control: number, action: number): number;
/**
 * Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
 * -----------------------------------------------------------------------------------------------------------------------------------------
 *
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 *
 * Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getDisplayNameFromVehicleModel(modelHash: number): string;
/**
 * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
 * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
 *
 * Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param useZ
 */
export declare function getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number;
/**
 * dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
 * outData is a struct of 3 8-byte items.
 * The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
 * @param dlcVehicleIndex
 * @param outData
 */
export declare function getDlcVehicleData(dlcVehicleIndex: number, outData: number): [boolean, number];
export declare function getDlcVehicleFlags(dlcVehicleIndex: number): number;
export declare function getDlcVehicleModLockHash(hash: number): number;
/**
 * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
 * @param dlcVehicleIndex
 */
export declare function getDlcVehicleModel(dlcVehicleIndex: number): number;
/**
 * p0 seems to be the weapon index
 * p1 seems to be the weapon component index
 * struct DlcComponentData{
 * int attachBone;
 * int padding1;
 * int bActiveByDefault;
 * int padding2;
 * int unk;
 * int padding3;
 * int componentHash;
 * int padding4;
 * int unk2;
 * int padding5;
 * int componentCost;
 * int padding6;
 * char nameLabel[64];
 * char descLabel[64];
 * };
 *
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
export declare function getDlcWeaponComponentData(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr: number): [boolean, number];
/**
 * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
export declare function getDlcWeaponComponentDataSp(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr: number): [boolean, number];
/**
 *
 * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
 * struct DlcWeaponData
 * {
 * int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this
 * int padding1;
 * int weaponHash;
 * int padding2;
 * int unk;
 * int padding3;
 * int weaponCost;
 * int padding4;
 * int ammoCost;
 * int padding5;
 * int ammoType;
 * int padding6;
 * int defaultClipSize;
 * int padding7;
 * char nameLabel[64];
 * char descLabel[64];
 * char desc2Label[64]; // usually "the" + name
 * char upperCaseNameLabel[64];
 * };
 * @param dlcWeaponIndex
 * @param outData
 */
export declare function getDlcWeaponData(dlcWeaponIndex: number, outData: number): [boolean, number];
/**
 * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
 * @param dlcWeaponIndex
 * @param outData
 */
export declare function getDlcWeaponDataSp(dlcWeaponIndex: number, outData: number): [boolean, number];
/**
 * Appears to return true if the vehicle has any damage, including cosmetically.
 * @param vehicle
 */
export declare function getDoesVehicleHaveDamageDecals(vehicle: number): boolean;
/**
 * Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.
 * @param vehicle
 */
export declare function getDoesVehicleHaveTombstone(vehicle: number): boolean;
export declare function getDriftTyresSet(vehicle: number): boolean;
export declare function getEntityAlpha(entity: number): number;
/**
 * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
 *
 * Example:
 * 0.000000 - mark the starting of animation.
 * 0.500000 - mark the midpoint of the animation.
 * 1.000000 - mark the end of animation.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 */
export declare function getEntityAnimCurrentTime(entity: number, animDict: string, animName: string): number;
/**
 * Returns a float value representing animation's total playtime in milliseconds.
 *
 * Example:
 * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
 * return 20800.000000
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 */
export declare function getEntityAnimTotalTime(entity: number, animDict: string, animName: string): number;
export declare function getEntityAttachedTo(entity: number): number;
export declare function getEntityAttachedToCargobob(p0: number): number;
export declare function getEntityAttachedToTowTruck(towTruck: number): number;
export declare function getEntityBoneCount(entity: number): number;
/**
 * Returns the index of the bone. If the bone was not found, -1 will be returned.
 *
 * list:
 * https://pastebin.com/D7JMnX1g
 *
 * BoneNames:
 * chassis,
 * windscreen,
 * seat_pside_r,
 * seat_dside_r,
 * bodyshell,
 * suspension_lm,
 * suspension_lr,
 * platelight,
 * attach_female,
 * attach_male,
 * bonnet,
 * boot,
 * chassis_dummy,  //Center of the dummy
 * chassis_Control,    //Not found yet
 * door_dside_f,   //Door left, front
 * door_dside_r,   //Door left, back
 * door_pside_f,   //Door right, front
 * door_pside_r,   //Door right, back
 * Gun_GripR,
 * windscreen_f,
 * platelight, //Position where the light above the numberplate is located
 * VFX_Emitter,
 * window_lf,  //Window left, front
 * window_lr,  //Window left, back
 * window_rf,  //Window right, front
 * window_rr,  //Window right, back
 * engine, //Position of the engine
 * gun_ammo,
 * ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
 * wheel_lf,   //Wheel left, front
 * wheel_lr,   //Wheel left, back
 * wheel_rf,   //Wheel right, front
 * wheel_rr,   //Wheel right, back
 * exhaust,    //Exhaust. shows only the position of the stock-exhaust
 * overheat,   //A position on the engine(not exactly sure, how to name it)
 * misc_e, //Not a car-bone.
 * seat_dside_f,   //Driver-seat
 * seat_pside_f,   //Seat next to driver
 * Gun_Nuzzle,
 * seat_r
 *
 * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
 *
 *
 * @param entity
 * @param boneName
 */
export declare function getEntityBoneIndexByName(entity: number, boneName: string): number;
export declare function getEntityBoneObjectPostion(entity: number, boneIndex: number): Vector3;
/**
 * Gets the local rotation of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
export declare function getEntityBoneObjectRotation(entity: number, boneIndex: number): Vector3;
/**
 * Gets the world position of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
export declare function getEntityBonePostion(entity: number, boneIndex: number): Vector3;
/**
 * Gets the world rotation of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
export declare function getEntityBoneRotation(entity: number, boneIndex: number): Vector3;
export declare function getEntityCanBeDamaged(entity: number): boolean;
export declare function getEntityCollisionDisabled(entity: number): boolean;
/**
 * Gets the current coordinates for a specified entity.
 * `entity` = The entity to get the coordinates from.
 * `alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
 * @param entity
 * @param alive
 */
export declare function getEntityCoords(entity: number, alive: boolean): Vector3;
/**
 * Gets the entity's forward vector.
 * @param entity
 */
export declare function getEntityForwardVector(entity: number): Vector3;
/**
 * Gets the X-component of the entity's forward vector.
 * @param entity
 */
export declare function getEntityForwardX(entity: number): number;
/**
 * Gets the Y-component of the entity's forward vector.
 * @param entity
 */
export declare function getEntityForwardY(entity: number): number;
/**
 * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
 * @param entity
 */
export declare function getEntityHeading(entity: number): number;
/**
 * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
 *
 * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
 * @param entity
 */
export declare function getEntityHeadingFromEulers(entity: number): number;
/**
 * Returns an integer value of entity's current health.
 *
 * Example of range for ped:
 * - Player [0 to 200]
 * - Ped [100 to 200]
 * - Vehicle [0 to 1000]
 * - Object [0 to 1000]
 *
 * Health is actually a float value but this native casts it to int.
 * In order to get the actual value, do:
 * float health = *(float *)(entityAddress + 0x280);
 * @param entity
 */
export declare function getEntityHealth(entity: number): number;
export declare function getEntityHeight(entity: number, X: number, Y: number, Z: number, atTop: boolean, inWorldCoords: boolean): number;
/**
 * Return height (z-dimension) above ground.
 * Example: The pilot in a titan plane is 1.844176 above ground.
 *
 * How can i convert it to meters?
 * Everything seems to be in meters, probably this too.
 * @param entity
 */
export declare function getEntityHeightAboveGround(entity: number): number;
export declare function getEntityIndexOfCutsceneEntity(cutsceneEntName: string, modelHash: number): number;
export declare function getEntityIndexOfRegisteredEntity(cutsceneEntName: string, modelHash: number): number;
/**
 * Returns the LOD distance of an entity.
 * @param entity
 */
export declare function getEntityLodDist(entity: number): number;
export declare function getEntityMatrix(entity: number): [Vector3, Vector3, Vector3, Vector3];
/**
 * Return an integer value of entity's maximum health.
 *
 * Example:
 * - Player = 200
 * - Ped = 150
 * @param entity
 */
export declare function getEntityMaxHealth(entity: number): number;
/**
 * Returns the model hash from the entity
 * @param entity
 */
export declare function getEntityModel(entity: number): number;
/**
 * Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
 * This native does not appear to have anything to do with pickups as in scripts it is used with objects.
 *
 * Example from fm_mission_controller_2020.c:
 *
 * iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));
 * @param entity
 * @param modelHash
 */
export declare function getEntityOfTypeAttachedToEntity(entity: number, modelHash: number): number;
export declare function getEntityPitch(entity: number): number;
/**
 * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
 * Returns false if no entity found.
 * @param player
 * @param entity
 */
export declare function getEntityPlayerIsFreeAimingAt(player: number, entity: number): [boolean, number];
/**
 * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
 * @param entity
 */
export declare function getEntityPopulationType(entity: number): number;
export declare function getEntityProofs(entity: number): [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];
/**
 * w is the correct parameter name!
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
export declare function getEntityQuaternion(entity: number): [number, number, number, number];
/**
 * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
 * (Sideways Roll) such as a vehicle tipped on its side
 * @param entity
 */
export declare function getEntityRoll(entity: number): number;
/**
 * rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
 *
 * rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
 * What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
 *
 * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
 *
 * Rotation Orders:
 * 0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
 * 1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
 * 2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
 * 3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
 * 4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
 * 5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
 * @param entity
 * @param rotationOrder
 */
export declare function getEntityRotation(entity: number, rotationOrder: number): Vector3;
export declare function getEntityRotationVelocity(entity: number): Vector3;
/**
 * Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
 * @param entity
 * @param script
 */
export declare function getEntityScript(entity: number, script: number): [string, number];
/**
 * result is in meters per second
 *
 * ------------------------------------------------------------
 * So would the conversion to mph and km/h, be along the lines of this.
 *
 * float speed = GET_ENTITY_SPEED(veh);
 * float kmh = (speed * 3.6);
 * float mph = (speed * 2.236936);
 * ------------------------------------------------------------
 * @param entity
 */
export declare function getEntitySpeed(entity: number): number;
/**
 * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
 * @param entity
 * @param relative
 */
export declare function getEntitySpeedVector(entity: number, relative: boolean): Vector3;
/**
 * Get how much of the entity is submerged.  1.0f is whole entity.
 * @param entity
 */
export declare function getEntitySubmergedLevel(entity: number): number;
/**
 * Returns:
 * 0 = no entity
 * 1 = ped
 * 2 = vehicle
 * 3 = object
 * @param entity
 */
export declare function getEntityType(entity: number): number;
export declare function getEntityUprightValue(entity: number): number;
export declare function getEntityVelocity(entity: number): Vector3;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export declare function getEntryPointPosition(vehicle: number, doorId: number): Vector3;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 * @param eventIndex
 */
export declare function getEventAtIndex(eventGroup: number, eventIndex: number): number;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 *
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * @param eventGroup
 * @param eventIndex
 * @param eventData
 * @param eventDataSize
 */
export declare function getEventData(eventGroup: number, eventIndex: number, eventDataSize: number): [boolean, number];
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 * @param eventIndex
 */
export declare function getEventExists(eventGroup: number, eventIndex: number): boolean;
export declare function getEverHadBadPackOrder(): boolean;
/**
 * See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
 * Returns an integer representing the Timecycle modifier
 */
export declare function getExtraTcmodifier(): number;
/**
 * This function is hard-coded to always return 0.
 */
export declare function getExtracontentCloudResult(): number;
/**
 * Getter for SET_FAKE_SPECTATOR_MODE
 */
export declare function getFakeSpectatorMode(): boolean;
/**
 * Gets the height of the vehicle's suspension.
 * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
 * 0.000 is the stock suspension.
 * 0.008 is Ultra Suspension.
 * @param vehicle
 */
export declare function getFakeSuspensionLoweringAmount(vehicle: number): number;
export declare function getFakeWantedLevel(): number;
/**
 * Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.
 * @param labelName
 */
export declare function getFilenameForAudioConversation(labelName: string): string;
export declare function getFinalRenderedCamCoord(): Vector3;
export declare function getFinalRenderedCamFarClip(): number;
export declare function getFinalRenderedCamFarDof(): number;
/**
 * Gets some camera fov
 */
export declare function getFinalRenderedCamFov(): number;
export declare function getFinalRenderedCamMotionBlurStrength(): number;
export declare function getFinalRenderedCamNearClip(): number;
export declare function getFinalRenderedCamNearDof(): number;
/**
 * p0 seems to consistently be 2 across scripts
 *
 * Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
 * @param rotationOrder
 */
export declare function getFinalRenderedCamRot(rotationOrder: number): Vector3;
export declare function getFinalRenderedRemotePlayerCamFov(player: number): number;
export declare function getFinalRenderedRemotePlayerCamRot(player: number, rotationOrder: number): Vector3;
export declare function getFirstBlipInfoId(blipSprite: number): number;
export declare function getFirstNCharactersOfLiteralString(string: string, length: number): string;
export declare function getFirstPersonAimCamZoomFactor(): number;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getFlyingVehicleModelAgility(modelHash: number): number;
export declare function getFmFemaleShopPedApparelItemIndex(p0: number): number;
export declare function getFmMaleShopPedApparelItemIndex(p0: number): number;
export declare function getFocusPedOnScreen(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
/**
 * See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value
 */
export declare function getFollowPedCamViewMode(): number;
export declare function getFollowPedCamZoomLevel(): number;
/**
 * Returns the type of camera:
 *
 * enum _viewmode //0xA11D7CA8
 * {
 * THIRD_PERSON_NEAR = 0,
 * THIRD_PERSON_MEDIUM = 1,
 * THIRD_PERSON_FAR = 2,
 * CINEMATIC = 3,
 * FIRST_PERSON = 4
 * };
 */
export declare function getFollowVehicleCamViewMode(): number;
export declare function getFollowVehicleCamZoomLevel(): number;
export declare function getForcedComponent(componentHash: number, forcedComponentIndex: number): [number, number, number];
export declare function getForcedProp(componentHash: number, forcedPropIndex: number): [number, number, number];
export declare function getFrameCount(): number;
export declare function getFrameTime(): number;
export declare function getGameTimer(): number;
export declare function getGameplayCamCoord(): Vector3;
export declare function getGameplayCamFov(): number;
export declare function getGameplayCamRelativeHeading(): number;
export declare function getGameplayCamRelativePitch(): number;
/**
 * p0 dosen't seem to change much, I tried it with 0, 1, 2:
 * 0-Pitch(X): -70.000092
 * 0-Roll(Y): -0.000001
 * 0-Yaw(Z): -43.886459
 * 1-Pitch(X): -70.000092
 * 1-Roll(Y): -0.000001
 * 1-Yaw(Z): -43.886463
 * 2-Pitch(X): -70.000092
 * 2-Roll(Y): -0.000002
 * 2-Yaw(Z): -43.886467
 * @param rotationOrder
 */
export declare function getGameplayCamRot(rotationOrder: number): Vector3;
/**
 * Returns the ActionScript flagValue.
 * ActionScript flags are global flags that scaleforms use
 * Flags found during testing
 * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
 * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
 * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
 * 9: Returns the current selection on the mobile phone scaleform
 *
 * There are 20 flags in total.
 * @param flagIndex
 */
export declare function getGlobalActionscriptFlag(flagIndex: number): number;
export declare function getGlobalWaterFile(): number;
export declare function getGpsBlipRouteFound(): boolean;
export declare function getGpsBlipRouteLength(): number;
export declare function getGroundZAndNormalFor3dCoord(x: number, y: number, z: number): [boolean, number, Vector3];
export declare function getGroundZExcludingObjectsFor3dCoord(x: number, y: number, z: number, p4: boolean, p5: boolean): [boolean, number];
/**
 * Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
 *
 * x: Position on the X-axis to get ground elevation at.
 * y: Position on the Y-axis to get ground elevation at.
 * z: Position on the Z-axis to get ground elevation at.
 * groundZ: The ground elevation at the specified position.
 * ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
 *
 * Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
 * @param x
 * @param y
 * @param z
 * @param groundZ
 * @param ignoreWater
 * @param p5
 */
export declare function getGroundZFor3dCoord(x: number, y: number, z: number, ignoreWater: boolean, p5: boolean): [boolean, number];
/**
 * p1 may be a BOOL representing whether or not the group even exists
 * @param groupID
 * @param p1
 * @param sizeInMembers
 */
export declare function getGroupSize(groupID: number): [number, number];
export declare function getHasObjectBeenCompletelyDestroyed(p0: number): boolean;
export declare function getHasRetractableWheels(vehicle: number): boolean;
export declare function getHasRocketBoost(vehicle: number): boolean;
export declare function getHasVehicleBeenHitByShunt(vehicle: number): boolean;
/**
 * This native converts its past string to hash. It is hashed using jenkins one at a time method.
 * @param string
 */
export declare function getHashKey(string: string): number;
export declare function getHashNameForComponent(entity: number, componentId: number, drawableVariant: number, textureVariant: number): number;
export declare function getHashNameForProp(entity: number, componentId: number, propIndex: number, propTextureIndex: number): number;
/**
 * Returns a hash representing which part of the map the given coords are located.
 *
 * Possible return values:
 * (Hash of) city -> -289320599
 * (Hash of) countryside -> 2072609373
 *
 * C# Example :
 *
 * Ped player = Game.Player.Character;
 * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
 * @param x
 * @param y
 * @param z
 */
export declare function getHashOfMapAreaAtCoords(x: number, y: number, z: number): number;
export declare function getHashOfThisScriptName(): number;
/**
 * A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
 * @param ped
 */
export declare function getHeadBlendEyeColor(ped: number): number;
/**
 * dx = x1 - x2
 * dy = y1 - y2
 * @param dx
 * @param dy
 */
export declare function getHeadingFromVector2d(dx: number, dy: number): number;
/**
 * Max 1000.
 * At 0 the main rotor will stall.
 * @param vehicle
 */
export declare function getHeliMainRotorHealth(vehicle: number): number;
/**
 * Max 1000.
 * At -100 both helicopter rotors will stall.
 * @param vehicle
 */
export declare function getHeliTailBoomHealth(vehicle: number): number;
/**
 * Max 1000.
 * At 0 the tail rotor will stall.
 * @param vehicle
 */
export declare function getHeliTailRotorHealth(vehicle: number): number;
export declare function getHudColour(hudColorIndex: number): [number, number, number, number];
export declare function getHudComponentPosition(id: number): Vector3;
/**
 * World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
export declare function getHudScreenPositionFromWorldPosition(worldX: number, worldY: number, worldZ: number): [number, number, number];
export declare function getHydraulicSuspensionRaiseFactor(vehicle: number, wheelId: number): number;
export declare function getIdOfThisThread(): number;
/**
 * x1, y1, z1 -- Coords of your ped model
 * x2, y2, z2 -- Coords of the ped you want to switch to
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function getInVehicleClipsetHashForSeat(vehicle: number, p1: number): number;
export declare function getIndexOfCurrentLevel(): number;
export declare function getIndexedItemInItemset(index: number, itemset: number): number;
/**
 * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
 *
 * Example for VB.NET
 * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
 * @param x
 * @param y
 * @param z
 */
export declare function getInteriorAtCoords(x: number, y: number, z: number): number;
/**
 * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
 *
 * Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
 *
 * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
 *
 * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
 * @param x
 * @param y
 * @param z
 * @param interiorType
 */
export declare function getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string): number;
/**
 * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
 * @param x
 * @param y
 * @param z
 * @param typeHash
 */
export declare function getInteriorAtCoordsWithTypehash(x: number, y: number, z: number, typeHash: number): number;
export declare function getInteriorFromCollision(x: number, y: number, z: number): number;
/**
 * Returns the handle of the interior that the entity is in. Returns 0 if outside.
 * @param entity
 */
export declare function getInteriorFromEntity(entity: number): number;
/**
 * Returns the current interior id from gameplay camera
 */
export declare function getInteriorFromPrimaryView(): number;
/**
 * Returns the group ID of the specified interior.
 * 0 = default
 * 1 = subway station, subway tracks, sewers
 * 3 = train tunnel under mirror park
 * 5 = tunnel near del perro
 * 6 = train tunnel near chilliad
 * 7 = train tunnel near josiah
 * 8 = train tunnel in sandy shores
 * 9 = braddock tunnel (near chilliad)
 * 12 = tunnel under fort zancudo
 * 14 = train tunnel under cypress flats
 * 18 = rockford plaza parking garage
 * 19 = arcadius parking garage
 * 20 = union depository parking garage
 * 21 = fib parking garage
 * @param interior
 */
export declare function getInteriorGroupId(interior: number): number;
export declare function getInteriorHeading(interior: number): number;
export declare function getInteriorLocationAndNamehash(interior: number): [Vector3, number];
export declare function getIsArticulatedJointAtMaxAngle(p0: number, p1: number): boolean;
export declare function getIsArticulatedJointAtMinAngle(object: number, p1: number): boolean;
/**
 * Returns true if profile setting 208 is equal to 0.
 */
export declare function getIsAutoSaveOff(): boolean;
export declare function getIsBoatCapsized(vehicle: number): boolean;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export declare function getIsDoorValid(vehicle: number, doorId: number): boolean;
export declare function getIsEntityAFrag(object: number): boolean;
/**
 * false = Any resolution < 1280x720
 * true = Any resolution >= 1280x720
 */
export declare function getIsHidef(): boolean;
export declare function getIsInitialLoadingScreenActive(): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function getIsLaunchFromLiveArea(): boolean;
/**
 * From the driver's perspective, is the left headlight broken.
 * @param vehicle
 */
export declare function getIsLeftVehicleHeadlightDamaged(vehicle: number): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function getIsLiveAreaLaunchWithContent(): boolean;
export declare function getIsLoadingScreenActive(): boolean;
/**
 * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
 * @param player
 * @param p1
 */
export declare function getIsMoppingAreaFreeInFrontOfPlayer(player: number, p1: number): boolean;
/**
 * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * @param ped
 * @param gadgetHash
 */
export declare function getIsPedGadgetEquipped(ped: number, gadgetHash: number): boolean;
export declare function getIsPetrolDecalInRange(xCoord: number, yCoord: number, zCoord: number, radius: number): boolean;
/**
 * Appears once in "re_dealgonewrong"
 * @param player
 */
export declare function getIsPlayerDrivingOnHighway(player: number): boolean;
/**
 * Only 1 occurrence. p1 was 2.
 * @param player
 * @param p1
 */
export declare function getIsPlayerDrivingWreckless(player: number, p1: number): boolean;
/**
 * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
 */
export declare function getIsPlayerInAnimalForm(): boolean;
export declare function getIsPreloadedConversationReady(): boolean;
/**
 * From the driver's perspective, is the right headlight broken.
 * @param vehicle
 */
export declare function getIsRightVehicleHeadlightDamaged(vehicle: number): boolean;
/**
 * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
 * @param ped
 * @param taskIndex
 */
export declare function getIsTaskActive(ped: number, taskIndex: number): boolean;
export declare function getIsTimecycleTransitioningOut(): boolean;
/**
 * Returns profile setting 225.
 */
export declare function getIsUsingAlternateDriveby(): boolean;
export declare function getIsUsingAlternateHandbrake(): boolean;
/**
 * Returns profile setting 237.
 */
export declare function getIsUsingFpsThirdPersonCover(): boolean;
/**
 * Returns profile setting 243.
 */
export declare function getIsUsingHoodCamera(): boolean;
/**
 * Returns whether this vehicle is currently disabled by an EMP mine.
 * @param vehicle
 */
export declare function getIsVehicleDisabledByEmp(vehicle: number): boolean;
/**
 * Returns true when in a vehicle, false whilst entering/exiting.
 * @param vehicle
 */
export declare function getIsVehicleEngineRunning(vehicle: number): boolean;
export declare function getIsVehiclePrimaryColourCustom(vehicle: number): boolean;
/**
 * Check if Vehicle Secondary is avaliable for customize
 * @param vehicle
 */
export declare function getIsVehicleSecondaryColourCustom(vehicle: number): boolean;
export declare function getIsVehicleShunting(vehicle: number): boolean;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 */
export declare function getIsWaypointRecordingLoaded(name: string): boolean;
export declare function getIsWheelsRetracted(vehicle: number): boolean;
/**
 * Setting Aspect Ratio Manually in game will return:
 *
 * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
 * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
 *
 * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
 */
export declare function getIsWidescreen(): boolean;
export declare function getItemsetSize(itemset: number): number;
export declare function getJackTarget(ped: number): number;
/**
 * Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
 * @param entity
 */
export declare function getKeyForEntityInRoom(entity: number): number;
/**
 * Landing gear states:
 *
 * 0: Deployed
 * 1: Closing (Retracting)
 * 2: (Landing gear state 2 is never used.)
 * 3: Opening (Deploying)
 * 4: Retracted
 *
 * Returns the current state of the vehicles landing gear.
 * @param vehicle
 */
export declare function getLandingGearState(vehicle: number): number;
export declare function getLastDrivenVehicle(): number;
export declare function getLastEntityHitByEntity(entity: number): number;
export declare function getLastMaterialHitByEntity(entity: number): number;
export declare function getLastPedInVehicleSeat(vehicle: number, seatIndex: number): number;
/**
 * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
 * @param vehicle
 */
export declare function getLastShuntVehicle(vehicle: number): number;
/**
 * Returns the length of the string passed (much like strlen).
 * @param string
 */
export declare function getLengthOfLiteralString(string: string): number;
export declare function getLengthOfLiteralStringInBytes(string: string): number;
/**
 * Returns the string length of the string from the gxt string .
 * @param gxt
 */
export declare function getLengthOfStringWithThisTextLabel(gxt: string): number;
export declare function getLightOverrideMaxIntensityScale(): number;
export declare function getLinePlaneIntersection(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number): [boolean, number];
/**
 * Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.
 *
 * example
 *
 * int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
 * for (int i = 0; i < count; i++)
 * {
 * const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
 * }
 *
 *
 * this example will work fine to fetch all names
 * for example for Sanchez we get
 *
 * SANC_LV1
 * SANC_LV2
 * SANC_LV3
 * SANC_LV4
 * SANC_LV5
 *
 *
 * Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
 *
 * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
 * @param vehicle
 * @param liveryIndex
 */
export declare function getLiveryName(vehicle: number, liveryIndex: number): string;
/**
 * Hardcoded to always return 2.
 * @param p0
 */
export declare function getLoadHighQualityPhotoStatus(p0: number): number;
/**
 * Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.
 */
export declare function getLocalPlayerAimState(): number;
/**
 * Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.
 */
export declare function getLocalPlayerGamepadAimState(): number;
/**
 * Gets local system time as year, month, day, hour, minute and second.
 *
 * Example usage:
 *
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * or use std::tm struct
 *
 * TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
 *
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export declare function getLocalTime(): [number, number, number, number, number, number];
export declare function getLockonDistanceOfCurrentPedWeapon(ped: number): number;
export declare function getLodscale(): number;
export declare function getMainPlayerBlipId(): number;
/**
 * Will return a vehicle's manufacturer display label.
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getMakeNameFromVehicleModel(modelHash: number): string;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export declare function getMaxAmmo(ped: number, weaponHash: number, ammo: number): [boolean, number];
/**
 * Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
export declare function getMaxAmmoByType(ped: number, ammoTypeHash: number, ammo: number): [boolean, number];
/**
 * p2 is mostly 1 in the scripts.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param p2
 */
export declare function getMaxAmmoInClip(ped: number, weaponHash: number, p2: boolean): number;
export declare function getMaxNumNetworkObjects(): number;
export declare function getMaxNumNetworkPeds(): number;
export declare function getMaxNumNetworkPickups(): number;
export declare function getMaxNumNetworkVehicles(): number;
export declare function getMaxRangeOfCurrentPedWeapon(ped: number): number;
/**
 * Gets the maximum wanted level the player can get.
 * Ranges from 0 to 5.
 */
export declare function getMaxWantedLevel(): number;
/**
 * This function is hard-coded to always return 96.
 */
export declare function getMaximumNumberOfCloudPhotos(): number;
/**
 * This function is hard-coded to always return 0.
 */
export declare function getMaximumNumberOfPhotos(): number;
export declare function getMeleeTargetForPed(ped: number): number;
/**
 * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
 * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
 * selectedItemUniqueId: this is uniqueID of the currently selected menu item
 *
 * when the pausemenu is closed:
 * lastItemMenuId = -1
 * selectedItemMenuId = -1
 * selectedItemUniqueId = 0
 *
 * when the header gains focus:
 * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
 * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
 * selectedItemUniqueId = -1
 *
 * when focus is moved from the header to a pausemenu page:
 * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
 * selectedItemMenuId = -1
 * selectedItemUniqueId updates as normal
 * @param lastItemMenuId
 * @param selectedItemMenuId
 * @param selectedItemUniqueId
 */
export declare function getMenuLayoutChangedEventDetails(): [number, number, number];
/**
 * p0 was always 0xAE2602A3.
 * @param statHash
 * @param outValue
 */
export declare function getMenuPedBoolStat(statHash: number, outValue: boolean): [boolean, boolean];
export declare function getMenuPedFloatStat(statHash: number, outValue: number): [boolean, number];
export declare function getMenuPedIntStat(p0: number, p1: number): [boolean, number];
export declare function getMenuPedMaskedIntStat(statHash: number, mask: number, p3: boolean): [boolean, number];
export declare function getMenuTriggerEventDetails(): [number, number];
export declare function getMillisecondsPerGameMinute(): number;
export declare function getMinimapFowCoordinateIsRevealed(x: number, y: number, z: number): boolean;
export declare function getMinimapFowDiscoveryRatio(): number;
export declare function getMissionFlag(): boolean;
export declare function getMobilePhonePosition(position: Vector3): Vector3;
export declare function getMobilePhoneRenderId(renderId: number): number;
export declare function getMobilePhoneRotation(p1: number): Vector3;
/**
 * Returns the name for the type of vehicle mod(Armour, engine etc)
 *
 * @param vehicle
 * @param modType
 */
export declare function getModSlotName(vehicle: number, modType: number): string;
/**
 * Returns the text label of a mod type for a given vehicle
 *
 * Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language
 * @param vehicle
 * @param modType
 * @param modValue
 */
export declare function getModTextLabel(vehicle: number, modType: number, modValue: number): string;
/**
 * Gets the dimensions of a model.
 *
 * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
 *
 * Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
 * @param modelHash
 * @param minimum
 * @param maximum
 */
export declare function getModelDimensions(modelHash: number): [Vector3, Vector3];
/**
 * Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
 */
export declare function getMotionblurMaxVelScaler(): number;
/**
 *
 * Function just returns 0
 * void __fastcall ped__get_mount(NativeContext *a1)
 * {
 * NativeContext *v1; // rbx@1
 *
 * v1 = a1;
 * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
 * v1->Returns->Item1= 0;
 * }
 * @param ped
 */
export declare function getMount(ped: number): number;
export declare function getMouseEvent(scaleformHandle: number): [boolean, number, number, number];
export declare function getMpLightEnabled(ped: number): boolean;
export declare function getMpOutfitDataFromMetadata(): [boolean, number, number];
export declare function getMusicPlaytime(): number;
export declare function getMusicVolSlider(): number;
export declare function getNameOfScriptWithThisId(threadId: number): string;
/**
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 *
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param x
 * @param y
 * @param z
 */
export declare function getNameOfZone(x: number, y: number, z: number): string;
export declare function getNamedRendertargetRenderId(name: string): number;
/**
 * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
 * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
 * Looks like the native returns an int for the path's state:
 * 1 - ???
 * 2 - ???
 * 3 - Finished Generating
 * @param ped
 * @param distanceRemaining
 * @param isPathReady
 */
export declare function getNavmeshRouteDistanceRemaining(ped: number): [number, number, boolean];
/**
 * See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
 * @param ped
 */
export declare function getNavmeshRouteResult(ped: number): number;
export declare function getNearestParticipantToEntity(entity: number): number;
export declare function getNearestPlayerToEntity(entity: number): number;
export declare function getNearestPlayerToEntityOnTeam(entity: number, team: number): number;
/**
 * Could this be used alongside either,
 * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
 * @param soundId
 */
export declare function getNetworkIdFromSoundId(soundId: number): number;
export declare function getNetworkTime(): number;
/**
 * Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
 * Could be used for benchmarking since it can return times in ticks.
 */
export declare function getNetworkTimeAccurate(): number;
export declare function getNewSelectedMissionCreatorBlip(): number;
export declare function getNextAudibleBeat(): [boolean, number, number, number];
export declare function getNextBlipInfoId(blipSprite: number): number;
/**
 * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
 */
export declare function getNextGpsDisabledZoneIndex(): number;
/**
 * Returns weather name hash
 */
export declare function getNextWeatherTypeHashName(): number;
export declare function getNoLoadingScreen(): boolean;
export declare function getNorthBlidIndex(): number;
export declare function getNthClosestVehicleNode(x: number, y: number, z: number, nthClosest: number, nodeFlags: number, unknown1: number, unknown2: number): [boolean, Vector3];
/**
 * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
 *
 * p10 always equals 3.0
 * p11 always equals 0
 * @param x
 * @param y
 * @param z
 * @param desiredX
 * @param desiredY
 * @param desiredZ
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param nodeFlags
 * @param p10
 * @param p11
 */
export declare function getNthClosestVehicleNodeFavourDirection(x: number, y: number, z: number, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, nodeFlags: number, p10: number, p11: number): [boolean, Vector3, number];
/**
 * Returns the id.
 * @param x
 * @param y
 * @param z
 * @param nth
 * @param nodeFlags
 * @param p5
 * @param p6
 */
export declare function getNthClosestVehicleNodeId(x: number, y: number, z: number, nth: number, nodeFlags: number, p5: number, p6: number): number;
export declare function getNthClosestVehicleNodeIdWithHeading(x: number, y: number, z: number, nthClosest: number, nodeFlags: number, p7: number, p8: number): [number, Vector3, number];
/**
 * Get the nth closest vehicle node and its heading.
 * @param x
 * @param y
 * @param z
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param outNumLanes
 * @param nodeFlags
 * @param unknown3
 * @param unknown4
 */
export declare function getNthClosestVehicleNodeWithHeading(x: number, y: number, z: number, nthClosest: number, nodeFlags: number, unknown3: number, unknown4: number): [boolean, Vector3, number, number];
export declare function getNumCommerceItems(): number;
export declare function getNumCreatedMissionObjects(p0: boolean): number;
export declare function getNumCreatedMissionPeds(p0: boolean): number;
export declare function getNumCreatedMissionVehicles(p0: boolean): number;
export declare function getNumDlcVehicles(): number;
/**
 * Returns the total number of DLC weapon components.
 * @param dlcWeaponIndex
 */
export declare function getNumDlcWeaponComponents(dlcWeaponIndex: number): number;
/**
 * Returns the total number of DLC weapon components that are available in SP.
 * @param dlcWeaponIndex
 */
export declare function getNumDlcWeaponComponentsSp(dlcWeaponIndex: number): number;
/**
 * Returns the total number of DLC weapons.
 */
export declare function getNumDlcWeapons(): number;
/**
 * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
 */
export declare function getNumDlcWeaponsSp(): number;
/**
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 * @param paintType
 * @param p1
 */
export declare function getNumModColors(paintType: number, p1: boolean): number;
export declare function getNumModKits(vehicle: number): number;
export declare function getNumNavmeshesExistingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function getNumPedHairTints(): number;
export declare function getNumPedMakeupTints(): number;
/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
export declare function getNumReservedMissionObjects(p0: boolean, p1: number): number;
/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
export declare function getNumReservedMissionPeds(p0: boolean, p1: number): number;
/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
export declare function getNumReservedMissionVehicles(p0: boolean, p1: number): number;
export declare function getNumSuccessfulStuntJumps(): number;
/**
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * @param character
 */
export declare function getNumTattooShopDlcItems(character: number): number;
export declare function getNumUnlockedRadioStations(): number;
/**
 * Returns how many possible mods a vehicle has for a given mod type
 * @param vehicle
 * @param modType
 */
export declare function getNumVehicleMods(vehicle: number, modType: number): number;
export declare function getNumVehicleWindowTints(): number;
export declare function getNumberOfActiveBlips(): number;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 */
export declare function getNumberOfEvents(eventGroup: number): number;
export declare function getNumberOfFiresInRange(x: number, y: number, z: number, radius: number): number;
export declare function getNumberOfFreeStacksOfThisSize(stackSize: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export declare function getNumberOfPedDrawableVariations(ped: number, componentId: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 */
export declare function getNumberOfPedPropDrawableVariations(ped: number, propId: number): number;
/**
 * Need to check behavior when drawableId = -1
 *
 * - Doofy.Ass
 * Why this function doesn't work and return nill value?
 * GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
 *
 * tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
 *
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 * @param drawableId
 */
export declare function getNumberOfPedPropTextureVariations(ped: number, propId: number, drawableId: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 */
export declare function getNumberOfPedTextureVariations(ped: number, componentId: number, drawableId: number): number;
/**
 * Gets the number of players in the current session.
 * If not multiplayer, always returns 1.
 */
export declare function getNumberOfPlayers(): number;
export declare function getNumberOfPlayersInTeam(team: number): number;
export declare function getNumberOfStreamingRequests(): number;
/**
 * Gets the number of instances of the specified script is currently running.
 *
 * Actually returns numRefs - 1.
 * if (program)
 * v3 = rage::scrProgram::GetNumRefs(program) - 1;
 * return v3;
 * @param scriptHash
 */
export declare function getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash: number): number;
/**
 * Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.
 * @param vehicle
 */
export declare function getNumberOfVehicleColours(vehicle: number): number;
export declare function getNumberOfVehicleDoors(vehicle: number): number;
/**
 * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
 */
export declare function getNumberOfVehicleNumberPlates(): number;
export declare function getNumberResourcesAllocatedToWantedLevel(dispatchService: number): number;
export declare function getObjectFragmentDamageHealth(p0: number, p1: boolean): number;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
export declare function getObjectIndexFromEntityIndex(entity: number): number;
export declare function getObjectTintIndex(object: number): number;
export declare function getOffsetFromCoordAndHeadingInWorldCoords(xPos: number, yPos: number, zPos: number, heading: number, xOffset: number, yOffset: number, zOffset: number): Vector3;
/**
 * Converts world coords (posX - Z) to coords relative to the entity
 *
 * Example:
 * posX is given as 50
 * entity's x coord is 40
 * the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
 * @param entity
 * @param posX
 * @param posY
 * @param posZ
 */
export declare function getOffsetFromEntityGivenWorldCoords(entity: number, posX: number, posY: number, posZ: number): Vector3;
/**
 * Offset values are relative to the entity.
 *
 * x = left/right
 * y = forward/backward
 * z = up/down
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export declare function getOffsetFromEntityInWorldCoords(entity: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
export declare function getOffsetFromInteriorInWorldCoords(interior: number, x: number, y: number, z: number): Vector3;
/**
 * Online version is defined here: update\update.rpf\common\data\version.txt
 *
 * Example:
 *
 * [ONLINE_VERSION_NUMBER]
 * 1.33
 *
 * _GET_ONLINE_VERSION() will return "1.33"
 */
export declare function getOnlineVersion(): string;
/**
 * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
 */
export declare function getOnscreenKeyboardResult(): string;
/**
 * Checks if Chernobog's stabilizers are deployed or not.
 * These are the metal supports that allow it to fire.
 * This native only applies to the Chernobog.
 * @param vehicle
 */
export declare function getOutriggersDeployed(vehicle: number): boolean;
/**
 * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
 *
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 */
export declare function getOwnerOfExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export declare function getOwnerOfExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): number;
export declare function getPackedIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
/**
 * Needs more research. Gets the stat name of a masked int?
 *
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_INT"
 * "_MP_NGPSTAT_INT"
 * "_MP_LRPSTAT_INT"
 * "_MP_APAPSTAT_INT"
 * "_MP_LR2PSTAT_INT"
 * "_MP_BIKEPSTAT_INT"
 * "_MP_IMPEXPPSTAT_INT"
 * "_MP_GUNRPSTAT_INT"
 * "_NGDLCPSTAT_INT"
 * "_MP_NGDLCPSTAT_INT"
 * "_DLCSMUGCHARPSTAT_INT"
 * "_GANGOPSPSTAT_INT"
 * "_BUSINESSBATPSTAT_INT"
 * "_ARENAWARSPSTAT_INT"
 * "_CASINOPSTAT_INT"
 * "_CASINOHSTPSTAT_INT"
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 * @param section
 */
export declare function getPackedNgIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number;
export declare function getPackedStatBoolCode(index: number, characterSlot: number): boolean;
export declare function getPackedStatIntCode(index: number, characterSlot: number): number;
export declare function getPackedTuIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
export declare function getPatrolTaskInfo(ped: number): [boolean, number, number];
export declare function getPauseMenuPosition(): Vector3;
/**
 * Returns:
 *
 * 0
 * 5
 * 10
 * 15
 * 20
 * 25
 * 30
 * 35
 *
 */
export declare function getPauseMenuState(): number;
export declare function getPedAccuracy(ped: number): number;
/**
 * Returns the ped's alertness (0-3).
 *
 * Values :
 *
 * 0 : Neutral
 * 1 : Heard something (gun shot, hit, etc)
 * 2 : Knows (the origin of the event)
 * 3 : Fully alerted (is facing the event?)
 *
 * If the Ped does not exist, returns -1.
 * @param ped
 */
export declare function getPedAlertness(ped: number): number;
export declare function getPedAmmoByType(ped: number, ammoTypeHash: number): number;
/**
 * Returns the current ammo type of the specified ped's specified weapon.
 * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
 * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export declare function getPedAmmoTypeFromWeapon(ped: number, weaponHash: number): number;
export declare function getPedArmour(ped: number): number;
export declare function getPedAsGroupLeader(groupID: number): number;
/**
 * from fm_mission_controller.c4 (variable names changed for clarity):
 *
 * int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
 * PED::GET_GROUP_SIZE(group, &unused, &groupSize);
 * if (groupSize >= 1) {
 * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
 * . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
 * . . . . . . . . //and so on
 * @param groupID
 * @param memberNumber
 */
export declare function getPedAsGroupMember(groupID: number, memberNumber: number): number;
/**
 * Gets the position of the specified bone of the specified ped.
 *
 * ped: The ped to get the position of a bone from.
 * boneId: The ID of the bone to get the position from. This is NOT the index.
 * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
 * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
 * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
 * @param ped
 * @param boneId
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export declare function getPedBoneCoords(ped: number, boneId: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
/**
 * no bone= -1
 *
 * boneIds:
 * SKEL_ROOT = 0x0,
 * SKEL_Pelvis = 0x2e28,
 * SKEL_L_Thigh = 0xe39f,
 * SKEL_L_Calf = 0xf9bb,
 * SKEL_L_Foot = 0x3779,
 * SKEL_L_Toe0 = 0x83c,
 * IK_L_Foot = 0xfedd,
 * PH_L_Foot = 0xe175,
 * MH_L_Knee = 0xb3fe,
 * SKEL_R_Thigh = 0xca72,
 * SKEL_R_Calf = 0x9000,
 * SKEL_R_Foot = 0xcc4d,
 * SKEL_R_Toe0 = 0x512d,
 * IK_R_Foot = 0x8aae,
 * PH_R_Foot = 0x60e6,
 * MH_R_Knee = 0x3fcf,
 * RB_L_ThighRoll = 0x5c57,
 * RB_R_ThighRoll = 0x192a,
 * SKEL_Spine_Root = 0xe0fd,
 * SKEL_Spine0 = 0x5c01,
 * SKEL_Spine1 = 0x60f0,
 * SKEL_Spine2 = 0x60f1,
 * SKEL_Spine3 = 0x60f2,
 * SKEL_L_Clavicle = 0xfcd9,
 * SKEL_L_UpperArm = 0xb1c5,
 * SKEL_L_Forearm = 0xeeeb,
 * SKEL_L_Hand = 0x49d9,
 * SKEL_L_Finger00 = 0x67f2,
 * SKEL_L_Finger01 = 0xff9,
 * SKEL_L_Finger02 = 0xffa,
 * SKEL_L_Finger10 = 0x67f3,
 * SKEL_L_Finger11 = 0x1049,
 * SKEL_L_Finger12 = 0x104a,
 * SKEL_L_Finger20 = 0x67f4,
 * SKEL_L_Finger21 = 0x1059,
 * SKEL_L_Finger22 = 0x105a,
 * SKEL_L_Finger30 = 0x67f5,
 * SKEL_L_Finger31 = 0x1029,
 * SKEL_L_Finger32 = 0x102a,
 * SKEL_L_Finger40 = 0x67f6,
 * SKEL_L_Finger41 = 0x1039,
 * SKEL_L_Finger42 = 0x103a,
 * PH_L_Hand = 0xeb95,
 * IK_L_Hand = 0x8cbd,
 * RB_L_ForeArmRoll = 0xee4f,
 * RB_L_ArmRoll = 0x1470,
 * MH_L_Elbow = 0x58b7,
 * SKEL_R_Clavicle = 0x29d2,
 * SKEL_R_UpperArm = 0x9d4d,
 * SKEL_R_Forearm = 0x6e5c,
 * SKEL_R_Hand = 0xdead,
 * SKEL_R_Finger00 = 0xe5f2,
 * SKEL_R_Finger01 = 0xfa10,
 * SKEL_R_Finger02 = 0xfa11,
 * SKEL_R_Finger10 = 0xe5f3,
 * SKEL_R_Finger11 = 0xfa60,
 * SKEL_R_Finger12 = 0xfa61,
 * SKEL_R_Finger20 = 0xe5f4,
 * SKEL_R_Finger21 = 0xfa70,
 * SKEL_R_Finger22 = 0xfa71,
 * SKEL_R_Finger30 = 0xe5f5,
 * SKEL_R_Finger31 = 0xfa40,
 * SKEL_R_Finger32 = 0xfa41,
 * SKEL_R_Finger40 = 0xe5f6,
 * SKEL_R_Finger41 = 0xfa50,
 * SKEL_R_Finger42 = 0xfa51,
 * PH_R_Hand = 0x6f06,
 * IK_R_Hand = 0x188e,
 * RB_R_ForeArmRoll = 0xab22,
 * RB_R_ArmRoll = 0x90ff,
 * MH_R_Elbow = 0xbb0,
 * SKEL_Neck_1 = 0x9995,
 * SKEL_Head = 0x796e,
 * IK_Head = 0x322c,
 * FACIAL_facialRoot = 0xfe2c,
 * FB_L_Brow_Out_000 = 0xe3db,
 * FB_L_Lid_Upper_000 = 0xb2b6,
 * FB_L_Eye_000 = 0x62ac,
 * FB_L_CheekBone_000 = 0x542e,
 * FB_L_Lip_Corner_000 = 0x74ac,
 * FB_R_Lid_Upper_000 = 0xaa10,
 * FB_R_Eye_000 = 0x6b52,
 * FB_R_CheekBone_000 = 0x4b88,
 * FB_R_Brow_Out_000 = 0x54c,
 * FB_R_Lip_Corner_000 = 0x2ba6,
 * FB_Brow_Centre_000 = 0x9149,
 * FB_UpperLipRoot_000 = 0x4ed2,
 * FB_UpperLip_000 = 0xf18f,
 * FB_L_Lip_Top_000 = 0x4f37,
 * FB_R_Lip_Top_000 = 0x4537,
 * FB_Jaw_000 = 0xb4a0,
 * FB_LowerLipRoot_000 = 0x4324,
 * FB_LowerLip_000 = 0x508f,
 * FB_L_Lip_Bot_000 = 0xb93b,
 * FB_R_Lip_Bot_000 = 0xc33b,
 * FB_Tongue_000 = 0xb987,
 * RB_Neck_1 = 0x8b93,
 * IK_Root = 0xdd1c
 * @param ped
 * @param boneId
 */
export declare function getPedBoneIndex(ped: number, boneId: number): number;
/**
 * Returns the hash of the weapon/model/object that killed the ped.
 * @param ped
 */
export declare function getPedCauseOfDeath(ped: number): number;
/**
 * See SET_PED_COMBAT_MOVEMENT
 * @param ped
 */
export declare function getPedCombatMovement(ped: number): number;
/**
 * See SET_PED_COMBAT_RANGE
 * @param ped
 */
export declare function getPedCombatRange(ped: number): number;
/**
 * See SET_PED_CONFIG_FLAG
 * @param ped
 * @param flagId
 * @param p2
 */
export declare function getPedConfigFlag(ped: number, flagId: number, p2: boolean): boolean;
export declare function getPedCurrentMoveBlendRatio(ped: number): [boolean, number, number];
/**
 * Returns the zoneID for the overlay if it is a member of collection.
 * enum ePedDecorationZone
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_MEDALS = 6,
 * ZONE_INVALID = 7
 * };
 *
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param collection
 * @param overlay
 */
export declare function getPedDecorationZoneFromHashes(collection: number, overlay: number): number;
export declare function getPedDecorationsState(ped: number): number;
export declare function getPedDefensiveAreaPosition(ped: number, p1: boolean): Vector3;
export declare function getPedDesiredMoveBlendRatio(ped: number): number;
export declare function getPedDiesInWater(ped: number): boolean;
/**
 * Ids
 * 0 - Head
 * 1 - Beard
 * 2 - Hair
 * 3 - Torso
 * 4 - Legs
 * 5 - Hands
 * 6 - Foot
 * 7 - ------
 * 8 - Accessories 1
 * 9 - Accessories 2
 * 10- Decals
 * 11 - Auxiliary parts for torso
 * @param ped
 * @param componentId
 */
export declare function getPedDrawableVariation(ped: number, componentId: number): number;
/**
 * Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
 * Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
 * @param ped
 */
export declare function getPedEmissiveScale(ped: number): number;
export declare function getPedEnveffScale(ped: number): number;
/**
 * Gets the offset the specified ped has moved since the previous tick.
 *
 * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
 *
 * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
 * @param ped
 * @param worldSpace
 */
export declare function getPedExtractedDisplacement(ped: number, worldSpace: boolean): Vector3;
/**
 * Returns the group id of which the specified ped is a member of.
 * @param ped
 */
export declare function getPedGroupIndex(ped: number): number;
/**
 * Input: Haircolor index, value between 0 and 63 (inclusive).
 * Output: RGB values for the haircolor specified in the input.
 *
 * This is used with the hair color swatches scaleform.
 * Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
 * @param hairColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
export declare function getPedHairTintColor(hairColorIndex: number): [number, number, number];
/**
 * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
 * pass this struct in the second parameter
 * struct headBlendData
 * {
 * int shapeFirst;
 * int padding1;
 * int shapeSecond;
 * int padding2;
 * int shapeThird;
 * int padding3;
 * int skinFirst;
 * int padding4;
 * int skinSecond;
 * int padding5;
 * int skinThird;
 * int padding6;
 * float shapeMix;
 * int padding7;
 * float skinMix;
 * int padding8;
 * float thirdMix;
 * int padding9;
 * bool isParent;
 * };
 * @param ped
 * @param headBlendData
 */
export declare function getPedHeadBlendData(ped: number, headBlendData: number): [boolean, number];
/**
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 *
 * Used when calling SET_PED_HEAD_BLEND_DATA.
 * @param type
 */
export declare function getPedHeadBlendFirstIndex(type: number): number;
/**
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * @param type
 */
export declare function getPedHeadBlendNumHeads(type: number): number;
/**
 * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
 *
 * This might be the once removed native GET_PED_HEAD_OVERLAY.
 * @param ped
 * @param overlayID
 */
export declare function getPedHeadOverlay(ped: number, overlayID: number): number;
export declare function getPedHeadOverlayNum(overlayID: number): number;
export declare function getPedHelmetStoredHatPropIndex(ped: number): number;
export declare function getPedHelmetStoredHatTexIndex(ped: number): number;
/**
 * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
 *
 * Seat indexes:
 * -1 = Driver
 * 0 = Front Right Passenger
 * 1 = Back Left Passenger
 * 2 = Back Right Passenger
 * 3 = Further Back Left Passenger (vehicles > 4 seats)
 * 4 = Further Back Right Passenger (vehicles > 4 seats)
 * etc.
 *
 * If p2 is true it uses a different GetOccupant function.
 * @param vehicle
 * @param seatIndex
 * @param p2
 */
export declare function getPedInVehicleSeat(vehicle: number, seatIndex: number, p2: boolean): number;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
export declare function getPedIndexFromEntityIndex(entity: number): number;
export declare function getPedLastDamageBone(ped: number, outBone: number): [boolean, number];
/**
 * Pass ped. Pass address of Vector3.
 * The coord will be put into the Vector3.
 * The return will determine whether there was a coord found or not.
 * @param ped
 * @param coords
 */
export declare function getPedLastWeaponImpactCoord(ped: number, coords: Vector3): [boolean, Vector3];
/**
 * Input: Makeup color index, value between 0 and 63 (inclusive).
 * Output: RGB values for the makeup color specified in the input.
 *
 * This is used with the makeup color swatches scaleform.
 * Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
 * @param makeupColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
export declare function getPedMakeupTintColor(makeupColorIndex: number): [number, number, number];
export declare function getPedMaxHealth(ped: number): number;
export declare function getPedMoney(ped: number): number;
/**
 * sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
 * ignore - ped type to ignore
 *
 * Return value is the number of peds found and added to the array passed.
 *
 * -----------------------------------
 *
 * To make this work in most menu bases at least in C++ do it like so,
 *
 * Formatted Example: https://pastebin.com/D8an9wwp
 *
 * -----------------------------------
 *
 * Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
 * @param ped
 * @param sizeAndPeds
 * @param ignore
 */
export declare function getPedNearbyPeds(ped: number, ignore: number): [number, number];
/**
 * Returns size of array, passed into the second variable.
 *
 * See below for usage information.
 *
 * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
 *
 * //Setup the array
 * const int numElements = 10;
 * const int arrSize = numElements * 2 + 2;
 * Any veh[arrSize];
 * //0 index is the size of the array
 * veh[0] = numElements;
 *
 * int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
 *
 * if (veh != NULL)
 * {
 * //Simple loop to go through results
 * for (int i = 0; i < count; i++)
 * {
 * int offsettedID = i * 2 + 2;
 * //Make sure it exists
 * if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
 * {
 * //Do something
 * }
 * }
 * }
 * @param ped
 * @param sizeAndVehs
 */
export declare function getPedNearbyVehicles(ped: number, sizeAndVehs: number): [number, number];
/**
 * Returns the base/default ammo type of the specified ped's specified weapon.
 * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export declare function getPedOriginalAmmoTypeFromWeapon(ped: number, weaponHash: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export declare function getPedPaletteVariation(ped: number, componentId: number): number;
/**
 * -1: no landing
 * 0: landing on both feet
 * 1: stumbling
 * 2: rolling
 * 3: ragdoll
 * @param ped
 */
export declare function getPedParachuteLandingType(ped: number): number;
/**
 * Returns:
 *
 * -1: Normal
 * 0: Wearing parachute on back
 * 1: Parachute opening
 * 2: Parachute open
 * 3: Falling to doom (e.g. after exiting parachute)
 *
 * Normal means no parachute?
 * @param ped
 */
export declare function getPedParachuteState(ped: number): number;
export declare function getPedParachuteTintIndex(ped: number, outTintIndex: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param p2
 */
export declare function getPedPropIndex(ped: number, componentId: number, p2: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export declare function getPedPropTextureIndex(ped: number, componentId: number): number;
export declare function getPedRagdollBoneIndex(ped: number, bone: number): number;
export declare function getPedRelationshipGroupDefaultHash(ped: number): number;
export declare function getPedRelationshipGroupHash(ped: number): number;
export declare function getPedResetFlag(ped: number, flagId: number): boolean;
/**
 * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
 *
 * Is best to check if the Ped is dead before asking for its killer.
 * @param ped
 */
export declare function getPedSourceOfDeath(ped: number): number;
/**
 * Returns whether the entity is in stealth mode
 * @param ped
 */
export declare function getPedStealthMovement(ped: number): boolean;
export declare function getPedTargetFromCombatPed(ped: number, p1: number): number;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export declare function getPedTextureVariation(ped: number, componentId: number): number;
export declare function getPedTimeOfDeath(ped: number): number;
/**
 * https://alloc8or.re/gta5/doc/enums/ePedType.txt
 * @param ped
 */
export declare function getPedType(ped: number): number;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doord
 */
export declare function getPedUsingVehicleDoor(vehicle: number, doord: number): number;
export declare function getPedVisualFieldCenterAngle(ped: number): number;
export declare function getPedWaypointDistance(p0: number): number;
export declare function getPedWaypointProgress(ped: number): number;
export declare function getPedWeaponCamoIndex(ped: number, weaponHash: number): number;
/**
 * Returns -1 if camoComponentHash is invalid/not attached to the weapon.
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 */
export declare function getPedWeaponComponentTintIndex(ped: number, weaponHash: number, camoComponentHash: number): number;
/**
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export declare function getPedWeaponTintIndex(ped: number, weaponHash: number): number;
export declare function getPedWeapontypeInSlot(ped: number, weaponSlot: number): number;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export declare function getPedheadshotTxdString(id: number): string;
export declare function getPedsJacker(ped: number): number;
export declare function getPhoneGestureAnimCurrentTime(ped: number): number;
export declare function getPhoneGestureAnimTotalTime(ped: number): number;
export declare function getPickupCoords(pickup: number): Vector3;
export declare function getPickupGenerationRangeMultiplier(): number;
export declare function getPickupObject(pickup: number): number;
/**
 * Returns the pickup hash for the given weapon hash
 * @param weaponHash
 */
export declare function getPickupTypeFromWeaponHash(weaponHash: number): number;
export declare function getPlayerCurrentStealthNoise(player: number): number;
/**
 * Always returns false.
 * @param player
 */
export declare function getPlayerDebugInvincible(player: number): boolean;
export declare function getPlayerFakeWantedLevel(player: number): number;
/**
 * Returns the group ID the player is member of.
 * @param player
 */
export declare function getPlayerGroup(player: number): number;
export declare function getPlayerHasDrivenAllVehicles(): boolean;
export declare function getPlayerHasReserveParachute(player: number): boolean;
export declare function getPlayerHealthRechargeMaxPercent(player: number): number;
/**
 * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
 */
export declare function getPlayerIndex(): number;
/**
 * Returns the Player's Invincible status.
 *
 * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
 *
 * bool IsPlayerInvincible(Player player)
 * {
 * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
 *
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 *
 * return false;
 * }
 *
 *
 * @param player
 */
export declare function getPlayerInvincible(player: number): boolean;
export declare function getPlayerMaxArmour(player: number): number;
export declare function getPlayerName(player: number): string;
export declare function getPlayerParachuteModelOverride(player: number): number;
export declare function getPlayerParachutePackTintIndex(player: number, tintIndex: number): number;
export declare function getPlayerParachuteSmokeTrailColor(player: number): [number, number, number];
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param tintIndex
 */
export declare function getPlayerParachuteTintIndex(player: number, tintIndex: number): number;
/**
 * Gets the ped for a specified player index.
 * @param player
 */
export declare function getPlayerPed(player: number): number;
export declare function getPlayerPedIsFollowing(ped: number): number;
/**
 * Does the same like PLAYER::GET_PLAYER_PED
 * @param player
 */
export declare function getPlayerPedScriptIndex(player: number): number;
export declare function getPlayerRadioStationGenre(): number;
/**
 * Returns 255 (radio off index) if the function fails.
 */
export declare function getPlayerRadioStationIndex(): number;
/**
 * Returns active radio station name
 */
export declare function getPlayerRadioStationName(): string;
export declare function getPlayerReceivedBattleEventRecently(player: number, p1: number, p2: boolean): boolean;
export declare function getPlayerReserveParachuteModelOverride(player: number): number;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param index
 */
export declare function getPlayerReserveParachuteTintIndex(player: number, index: number): number;
export declare function getPlayerRgbColour(player: number): [number, number, number];
export declare function getPlayerShortSwitchState(): number;
export declare function getPlayerSprintStaminaRemaining(player: number): number;
export declare function getPlayerSprintTimeRemaining(player: number): number;
export declare function getPlayerSwitchInterpOutCurrentTime(): number;
export declare function getPlayerSwitchInterpOutDuration(): number;
export declare function getPlayerSwitchJumpCutIndex(): number;
export declare function getPlayerSwitchState(): number;
export declare function getPlayerSwitchType(): number;
/**
 * Assigns the handle of locked-on melee target to *entity that you pass it.
 * Returns false if no entity found.
 * @param player
 * @param entity
 */
export declare function getPlayerTargetEntity(player: number, entity: number): [boolean, number];
/**
 * Gets the player's team.
 * Does nothing in singleplayer.
 * @param player
 */
export declare function getPlayerTeam(player: number): number;
export declare function getPlayerUnderwaterTimeRemaining(player: number): number;
export declare function getPlayerWantedCentrePosition(player: number): Vector3;
export declare function getPlayerWantedLevel(player: number): number;
/**
 * Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
 */
export declare function getPlayersLastVehicle(): number;
export declare function getPmPlayerCrewColor(): [boolean, number, number, number];
export declare function getPointAreaOverlap(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean;
/**
 * p3 can be 0, 1 or 2.
 * @param result
 * @param p1
 * @param p2
 * @param p3
 */
export declare function getPosAlongGpsTypeRoute(p1: boolean, p2: number, p3: number): [boolean, Vector3];
export declare function getPosFromFiredEvent(ped: number, eventType: number, outData: number): [boolean, number];
export declare function getPositionBySideOfRoad(x: number, y: number, z: number, p3: number, outPosition: Vector3): [boolean, Vector3];
/**
 * Distance traveled in the vehicles current recording.
 * @param vehicle
 */
export declare function getPositionInRecording(vehicle: number): number;
/**
 * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
 *
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param time
 * @param script
 */
export declare function getPositionOfVehicleRecordingAtTime(recording: number, time: number, script: string): Vector3;
export declare function getPositionOfVehicleRecordingIdAtTime(id: number, time: number): Vector3;
/**
 * Gets system time as year, month, day, hour, minute and second.
 *
 * Example usage:
 *
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 *
 * TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
 *
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export declare function getPosixTime(): [number, number, number, number, number, number];
/**
 * Returns current weather name hash
 */
export declare function getPrevWeatherTypeHashName(): number;
export declare function getProfileSetting(profileSetting: number): number;
export declare function getProjectileOfProjectileTypeWithinDistance(ped: number, weaponHash: number, distance: number, p5: boolean): [boolean, Vector3, number];
/**
 * Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.
 * @param radioStation
 */
export declare function getRadioStationName(radioStation: number): string;
export declare function getRainLevel(): number;
export declare function getRandomEventFlag(): boolean;
export declare function getRandomFloatInRange(startRange: number, endRange: number): number;
export declare function getRandomIntInRange(startRange: number, endRange: number): number;
export declare function getRandomMwcIntInRange(startRange: number, endRange: number): number;
/**
 * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
 *
 * Ped Types:
 * Any = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * @param x
 * @param y
 * @param z
 * @param xRadius
 * @param yRadius
 * @param zRadius
 * @param pedType
 */
export declare function getRandomPedAtCoord(x: number, y: number, z: number, xRadius: number, yRadius: number, zRadius: number, pedType: number): number;
export declare function getRandomVehicleBackBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
export declare function getRandomVehicleFrontBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
/**
 * Gets a random vehicle in a sphere at the specified position, of the specified radius.
 *
 * x: The X-component of the position of the sphere.
 * y: The Y-component of the position of the sphere.
 * z: The Z-component of the position of the sphere.
 * radius: The radius of the sphere. Max is 9999.9004.
 * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
 * flags: The bitwise flags that modifies the behaviour of this function.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
export declare function getRandomVehicleInSphere(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number;
/**
 * Not present in the retail version! It's just a nullsub.
 *
 * p0 always true (except in one case)
 * successIndicator: 0 if success, -1 if failed
 * @param p0
 * @param modelHash
 * @param successIndicator
 */
export declare function getRandomVehicleModelInMemory(p0: boolean): [number, number];
export declare function getRandomVehicleNode(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean): [boolean, Vector3, number];
/**
 * returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param clamp
 */
export declare function getRatioOfClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): number;
/**
 * Example:
 * OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param name
 */
export declare function getRayfireMapObject(x: number, y: number, z: number, radius: number, name: string): number;
/**
 * `object`: The des-object handle to get the animation progress from.
 * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
 * @param object
 */
export declare function getRayfireMapObjectAnimPhase(object: number): number;
/**
 * GET_GAME_TIMER() / 1000
 */
export declare function getRealWorldTime(): number;
/**
 * Gets the relationship between two groups. This should be called twice (once for each group).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 *
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
 * @param group1
 * @param group2
 */
export declare function getRelationshipBetweenGroups(group1: number, group2: number): number;
/**
 * Gets the relationship between two peds. This should be called twice (once for each ped).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 *
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
 * @param ped1
 * @param ped2
 */
export declare function getRelationshipBetweenPeds(ped1: number, ped2: number): number;
/**
 * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
 * @param size
 * @param font
 */
export declare function getRenderedCharacterHeight(size: number, font: number): number;
export declare function getRenderingCam(): number;
export declare function getReplayStatAtIndex(index: number): number;
export declare function getReplayStatCount(): number;
export declare function getReplayStatMissionId(): number;
export declare function getReplayStatMissionType(): number;
export declare function getRequestingnightvision(): boolean;
export declare function getReservedMissionEntitiesInArea(x: number, y: number, z: number, p3: number): [number, number, number];
export declare function getRoadBoundaryUsingHeading(x: number, y: number, z: number, heading: number, outPosition: Vector3): [boolean, Vector3];
export declare function getRoomKeyForGameViewport(): number;
/**
 * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
 * @param entity
 */
export declare function getRoomKeyFromEntity(entity: number): number;
export declare function getRopeLastVertexCoord(ropeId: number): Vector3;
export declare function getRopeVertexCoord(ropeId: number, vertex: number): Vector3;
export declare function getRopeVertexCount(ropeId: number): number;
/**
 * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
 *
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param time
 * @param script
 */
export declare function getRotationOfVehicleRecordingAtTime(recording: number, time: number, script: string): Vector3;
export declare function getRotationOfVehicleRecordingIdAtTime(id: number, time: number): Vector3;
/**
 * Flags are:
 * 1 = 1 = B02_IsFootpath
 * 2 = 4 = !B15_InteractionUnk
 * 4 = 0x20 = !B14_IsInterior
 * 8 = 0x40 = !B07_IsWater
 * 16 = 0x200 = B17_IsFlatGround
 * When onGround == true outPosition is a position located on the nearest pavement.
 *
 * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
 *
 * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
 *
 * 16 works for me, 0 crashed the script.
 * @param x
 * @param y
 * @param z
 * @param onGround
 * @param outPosition
 * @param flags
 */
export declare function getSafeCoordForPed(x: number, y: number, z: number, onGround: boolean, flags: number): [boolean, Vector3];
export declare function getSafePickupCoords(x: number, y: number, z: number, p3: number, p4: number): Vector3;
/**
 * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
 */
export declare function getSafeZoneSize(): number;
export declare function getSaveHouseDetailsAfterSuccessfulLoad(): [boolean, Vector3, number, boolean, boolean];
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * @param methodReturn
 */
export declare function getScaleformMovieMethodReturnValueBool(methodReturn: number): boolean;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
 * @param methodReturn
 */
export declare function getScaleformMovieMethodReturnValueInt(methodReturn: number): number;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
 * @param methodReturn
 */
export declare function getScaleformMovieMethodReturnValueString(methodReturn: number): string;
export declare function getScreenAspectRatio(): number;
export declare function getScreenCodeWantsScriptToControl(): number;
/**
 * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
 *
 * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
 *
 *
 * For .NET users...
 *
 * VB:
 * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
 *
 * Dim x2dp, y2dp As New Native.OutputArgument
 *
 * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
 * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
 *
 * End Function
 *
 * C#:
 * Vector2 World3DToScreen2d(Vector3 pos)
 * {
 * var x2dp = new OutputArgument();
 * var y2dp = new OutputArgument();
 *
 * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
 * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
 * }
 * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
 *
 * Used to be called _WORLD3D_TO_SCREEN2D
 *
 * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
export declare function getScreenCoordFromWorldCoord(worldX: number, worldY: number, worldZ: number): [boolean, number, number];
/**
 * int screenresx,screenresy;
 * GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
 * @param x
 * @param y
 */
export declare function getScreenResolution(): [number, number];
export declare function getScreenblurFadeCurrentTime(): number;
/**
 * Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
 * @param x
 * @param y
 * @param calculatedX
 * @param calculatedY
 */
export declare function getScriptGfxAlignPosition(x: number, y: number): [number, number];
/**
 * Gets the status of a script-assigned task.
 * taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
 * @param ped
 * @param taskHash
 */
export declare function getScriptTaskStatus(ped: number, taskHash: number): number;
export declare function getScriptedCoverPointCoords(coverpoint: number): Vector3;
export declare function getSeatPedIsTryingToEnter(ped: number): number;
/**
 * Returns the hash of the weapon.
 *
 * var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
 * sub_27D3(num7);
 * switch (num7)
 * {
 * case 0x24B17070:
 *
 * Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
 *
 * -------------------------------------------------------------------------
 *
 * The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 */
export declare function getSelectedPedWeapon(ped: number): number;
/**
 * returned values:
 * 0 to 7 = task that's currently in progress, 0 meaning the first one.
 * -1 no task sequence in progress.
 * @param ped
 */
export declare function getSequenceProgress(ped: number): number;
/**
 * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
 *
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param entityHit
 */
export declare function getShapeTestResult(shapeTestHandle: number): [number, boolean, Vector3, Vector3, number];
/**
 * Returns the result of a shape test, also returning the material of any touched surface.
 *
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 *
 * Unless the return value is 2, the other return values are undefined.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param materialHash
 * @param entityHit
 */
export declare function getShapeTestResultIncludingMaterial(shapeTestHandle: number): [number, boolean, Vector3, Vector3, number, number];
/**
 * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
 * @param componentHash
 */
export declare function getShopPedApparelForcedComponentCount(componentHash: number): number;
/**
 * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
 * @param componentHash
 */
export declare function getShopPedApparelForcedPropCount(componentHash: number): number;
export declare function getShopPedApparelVariantComponentCount(componentHash: number): number;
/**
 * `propHash`: Ped helmet prop hash?
 * This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
 * @param propHash
 */
export declare function getShopPedApparelVariantPropCount(propHash: number): number;
/**
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * @param componentHash
 * @param outComponent
 */
export declare function getShopPedComponent(componentHash: number, outComponent: number): number;
export declare function getShopPedOutfit(p0: number, p1: number): number;
/**
 * See https://git.io/JtcBH for example and structs.
 * @param outfitHash
 * @param variantIndex
 * @param outComponentVariant
 */
export declare function getShopPedOutfitComponentVariant(outfitHash: number, variantIndex: number, outComponentVariant: number): [boolean, number];
export declare function getShopPedOutfitLocate(p0: number): number;
/**
 * See https://git.io/JtcBH for example and structs.
 * @param outfitHash
 * @param variantIndex
 * @param outPropVariant
 */
export declare function getShopPedOutfitPropVariant(outfitHash: number, variantIndex: number, outPropVariant: number): [boolean, number];
/**
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * @param componentHash
 * @param outProp
 */
export declare function getShopPedProp(componentHash: number, outProp: number): number;
/**
 * See https://git.io/JtcRf for example and structs.
 * @param componentId
 * @param outComponent
 */
export declare function getShopPedQueryComponent(componentId: number, outComponent: number): number;
/**
 * Returns some sort of index/offset for components.
 * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
 * @param componentHash
 */
export declare function getShopPedQueryComponentIndex(componentHash: number): number;
/**
 * outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
 * See https://git.io/JtcB8 for example and outfit struct.
 * @param outfitIndex
 * @param outfit
 */
export declare function getShopPedQueryOutfit(outfitIndex: number, outfit: number): number;
/**
 * See https://git.io/JtcRf for example and structs.
 * @param componentId
 * @param outProp
 */
export declare function getShopPedQueryProp(componentId: number, outProp: number): number;
/**
 * Returns some sort of index/offset for props.
 * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
 * @param componentHash
 */
export declare function getShopPedQueryPropIndex(componentHash: number): number;
export declare function getSizeOfSaveData(p0: boolean): number;
export declare function getSnowLevel(): number;
export declare function getSoundId(): number;
export declare function getSoundIdFromNetworkId(netId: number): number;
export declare function getSpawnCoordsForVehicleNode(nodeAddress: number, towardsCoorsX: number, towardsCoorsY: number, towardsCoorsZ: number): [Vector3, Vector3, number];
export declare function getStandardBlipEnumId(): number;
/**
 * Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData
 * @param dataType
 * @param statIndex
 * @param charSlot
 */
export declare function getStatHashForCharacterStat(dataType: number, statIndex: number, charSlot: number): number;
/**
 * locked is 0 if no door is found
 * locked is 0 if door is unlocked
 * locked is 1 if door is found and unlocked.
 *
 * -------------
 * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 */
export declare function getStateOfClosestDoorOfType(type: number, x: number, y: number, z: number): [boolean, number];
/**
 * Get a destructible object's state.
 * Substract 1 to get the real state.
 * See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
 * For example, if the object just spawned (state 2), the native will return 3.
 * @param object
 */
export declare function getStateOfRayfireMapObject(object: number): number;
export declare function getStatusOfCreateLowQualityCopyOfPhoto(p0: number): number;
export declare function getStatusOfCreateMissionCreatorPhotoPreview(): number;
export declare function getStatusOfLoadMissionCreatorPhoto(p0: number): [number, number];
export declare function getStatusOfManualSave(): number;
export declare function getStatusOfMissionRepeatSave(): number;
export declare function getStatusOfSaveHighQualityPhoto(): number;
/**
 * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
 * appcamera, appmedia, and cellphone_controller.
 * @param p0
 */
export declare function getStatusOfSortedListOperation(p0: number): number;
export declare function getStatusOfTakeHighQualityPhoto(): number;
export declare function getStatusOfTakeMissionCreatorPhoto(): number;
/**
 * 0 = succeeded
 * 1 = pending
 * 2 = failed
 * @param p0
 */
export declare function getStatusOfTextureDownload(p0: number): number;
export declare function getStreamPlayTime(): number;
/**
 * Determines the name of the street which is the closest to the given coordinates.
 *
 * x,y,z - the coordinates of the street
 * streetName - returns a hash to the name of the street the coords are on
 * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
 *
 * Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
 * @param x
 * @param y
 * @param z
 * @param streetName
 * @param crossingRoad
 */
export declare function getStreetNameAtCoord(x: number, y: number, z: number): [number, number];
/**
 * This functions converts the hash of a street name into a readable string.
 *
 * For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
 * @param hash
 */
export declare function getStreetNameFromHashKey(hash: number): string;
export declare function getSubmarineIsUnderDesignDepth(submarine: number): boolean;
export declare function getSubmarineNumberOfAirLeaks(submarine: number): number;
export declare function getSynchronizedScenePhase(sceneID: number): number;
export declare function getSynchronizedSceneRate(sceneID: number): number;
export declare function getSystemTimeStep(): number;
export declare function getTaskMoveNetworkEvent(ped: number, eventName: string): boolean;
export declare function getTaskMoveNetworkSignalBool(ped: number, signalName: string): boolean;
export declare function getTaskMoveNetworkSignalFloat(ped: number, signalName: string): number;
export declare function getTaskMoveNetworkState(ped: number): string;
export declare function getTaskRappelDownWallState(ped: number): number;
/**
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 *
 *
 * enum TattooZoneData
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_UNKNOWN = 6,
 * ZONE_NONE = 7,
 * };
 * struct outComponent
 * {
 * // these vars are suffixed with 4 bytes of padding each.
 * uint unk;
 * int unk2;
 * uint tattooCollectionHash;
 * uint tattooNameHash;
 * int unk3;
 * TattooZoneData zoneId;
 * uint unk4;
 * uint unk5;
 * // maybe more, not sure exactly, decompiled scripts are very vague around this part.
 * }
 * @param characterType
 * @param decorationIndex
 * @param outComponent
 */
export declare function getTattooShopDlcItemData(characterType: number, decorationIndex: number, outComponent: number): [boolean, number];
/**
 * Returns some sort of index/offset for overlays/decorations.
 *
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * @param overlayHash
 * @param p1
 * @param character
 */
export declare function getTattooShopDlcItemIndex(overlayHash: number, p1: number, character: number): number;
export declare function getTennisSwingAnimCanBeInterrupted(ped: number): boolean;
export declare function getTennisSwingAnimComplete(ped: number): boolean;
export declare function getTennisSwingAnimSwung(ped: number): boolean;
/**
 * Returns the texture resolution of the passed texture dict+name.
 *
 * Note: Most texture resolutions are doubled compared to the console version of the game.
 * @param textureDict
 * @param textureName
 */
export declare function getTextureResolution(textureDict: string, textureName: string): Vector3;
export declare function getThisScriptName(): string;
export declare function getTimeAsString(time: number): string;
/**
 * Subtracts the second argument from the first.
 * @param timeA
 * @param timeB
 */
export declare function getTimeDifference(timeA: number, timeB: number): number;
/**
 * Adds the first argument to the second.
 * @param timeA
 * @param timeB
 */
export declare function getTimeOffset(timeA: number, timeB: number): number;
export declare function getTimePedDamagedByWeapon(ped: number, weaponHash: number): number;
/**
 * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
 * @param vehicle
 */
export declare function getTimePositionInRecording(vehicle: number): number;
/**
 * Returns the time since the character was arrested in (ms) milliseconds.
 *
 * example
 *
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
 *
 * UI.DrawSubtitle(time.ToString());
 *
 * if player has not been arrested, the int returned will be -1.
 */
export declare function getTimeSinceLastArrest(): number;
/**
 * Returns the time since the character died in (ms) milliseconds.
 *
 * example
 *
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
 *
 * UI.DrawSubtitle(time.ToString());
 *
 * if player has not died, the int returned will be -1.
 */
export declare function getTimeSinceLastDeath(): number;
export declare function getTimeSincePlayerDroveAgainstTraffic(player: number): number;
export declare function getTimeSincePlayerDroveOnPavement(player: number): number;
export declare function getTimeSincePlayerHitPed(player: number): number;
export declare function getTimeSincePlayerHitVehicle(player: number): number;
/**
 * Only use for this in the PC scripts is:
 *
 * if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
 */
export declare function getTimecycleModifierIndex(): number;
export declare function getTimecycleTransitionModifierIndex(): number;
export declare function getTintIndexForLastGenHairTexture(modelHash: number, drawableId: number, textureId: number): number;
export declare function getTogglePausedRenderphasesStatus(): boolean;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export declare function getTotalDurationOfVehicleRecording(recording: number, script: string): number;
export declare function getTotalDurationOfVehicleRecordingId(id: number): number;
export declare function getTotalSuccessfulStuntJumps(): number;
export declare function getTrackedPedPixelcount(ped: number): number;
/**
 * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
 * @param train
 * @param trailerNumber
 */
export declare function getTrainCarriage(train: number, trailerNumber: number): number;
export declare function getTvChannel(): number;
export declare function getTvVolume(): number;
/**
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 */
export declare function getTyreHealth(vehicle: number, wheelIndex: number): number;
/**
 * Returns the multiplier value from SET_TYRE_WEAR_RATE
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 */
export declare function getTyreWearRate(vehicle: number, wheelIndex: number): number;
/**
 * 0.0 = no memory used
 * 1.0 = all memory used
 *
 * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
 */
export declare function getUsedCreatorBudget(): number;
/**
 * Checks some commerce stuff
 */
export declare function getUserPremiumAccess(): number;
/**
 * Checks some commerce stuff
 */
export declare function getUserStarterAccess(): number;
export declare function getUsingnightvision(): boolean;
export declare function getUsingseethrough(): boolean;
/**
 * Gets current UTC time
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export declare function getUtcTime(): [number, number, number, number, number, number];
export declare function getVariantComponent(componentHash: number, variantComponentIndex: number): [number, number, number];
export declare function getVariantProp(componentHash: number, variantPropIndex: number): [number, number, number];
export declare function getVariationChosenForScriptedLine(p0: number): [number, number];
/**
 * static - max acceleration
 * @param vehicle
 */
export declare function getVehicleAcceleration(vehicle: number): number;
/**
 * Returns attached vehicle (Vehicle in parameter must be cargobob)
 * @param cargobob
 */
export declare function getVehicleAttachedToCargobob(cargobob: number): number;
/**
 * Seems related to vehicle health, like the one in IV.
 * Max 1000, min 0.
 * Vehicle does not necessarily explode or become undrivable at 0.
 * @param vehicle
 */
export declare function getVehicleBodyHealth(vehicle: number): number;
/**
 * Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * @param vehicle
 */
export declare function getVehicleBombAmmo(vehicle: number): number;
export declare function getVehicleCanDeployParachute(vehicle: number): boolean;
/**
 * iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
 * if (iVar3 == joaat("weapon_stickybomb"))
 * {
 * func_171(726);
 * iLocal_260 = 1;
 * }
 * @param vehicle
 */
export declare function getVehicleCauseOfDestruction(vehicle: number): number;
/**
 * Returns an int
 *
 * Vehicle Classes:
 * 0: Compacts
 * 1: Sedans
 * 2: SUVs
 * 3: Coupes
 * 4: Muscle
 * 5: Sports Classics
 * 6: Sports
 * 7: Super
 * 8: Motorcycles
 * 9: Off-road
 * 10: Industrial
 * 11: Utility
 * 12: Vans
 * 13: Cycles
 * 14: Boats
 * 15: Helicopters
 * 16: Planes
 * 17: Service
 * 18: Emergency
 * 19: Military
 * 20: Commercial
 * 21: Trains
 *
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
 *
 * const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
 * @param vehicle
 */
export declare function getVehicleClass(vehicle: number): number;
export declare function getVehicleClassEstimatedMaxSpeed(vehicleClass: number): number;
/**
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
 *
 * const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleClassFromName(modelHash: number): number;
export declare function getVehicleClassMaxAcceleration(vehicleClass: number): number;
export declare function getVehicleClassMaxAgility(vehicleClass: number): number;
export declare function getVehicleClassMaxBraking(vehicleClass: number): number;
export declare function getVehicleClassMaxTraction(vehicleClass: number): number;
/**
 * What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export declare function getVehicleColor(vehicle: number): [number, number, number];
/**
 * Returns the index of the color combination found in the vehicle's carvariations.meta entry.
 * @param vehicle
 */
export declare function getVehicleColourCombination(vehicle: number): number;
export declare function getVehicleColours(vehicle: number): [number, number];
/**
 * Some kind of flags.
 * @param vehicle
 */
export declare function getVehicleColoursWhichCanBeSet(vehicle: number): number;
/**
 * Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
 * Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
 * @param vehicle
 */
export declare function getVehicleCountermeasureAmmo(vehicle: number): number;
export declare function getVehicleCrewEmblemRequestState(vehicle: number, p1: number): number;
/**
 * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
 * @param vehicle
 */
export declare function getVehicleCurrentTimeInSlipStream(vehicle: number): number;
export declare function getVehicleCustomPrimaryColour(vehicle: number): [number, number, number];
export declare function getVehicleCustomSecondaryColour(vehicle: number): [number, number, number];
/**
 * Returns hash of default vehicle horn
 *
 * Hash is stored in audVehicleAudioEntity
 * @param vehicle
 */
export declare function getVehicleDefaultHorn(vehicle: number): number;
export declare function getVehicleDefaultHornIgnoreMods(vehicle: number): number;
/**
 * The only example I can find of this function in the scripts, is this:
 *
 * struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
 *
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * PC scripts:
 *
 * v_5 -- [[{3}]]  = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export declare function getVehicleDeformationAtPos(vehicle: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
/**
 * Dirt level does not become greater than 15.0
 * @param vehicle
 */
export declare function getVehicleDirtLevel(vehicle: number): number;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export declare function getVehicleDoorAngleRatio(vehicle: number, doorId: number): number;
/**
 * enum VehicleLockStatus = {
 * None = 0,
 * Unlocked = 1,
 * Locked = 2,
 * LockedForPlayer = 3,
 * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
 * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
 * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
 * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
 * }
 * @param vehicle
 */
export declare function getVehicleDoorLockStatus(vehicle: number): number;
export declare function getVehicleDoorsLockedForPlayer(vehicle: number, player: number): boolean;
/**
 * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
 *
 * Minimum: -4000
 * Maximum: 1000
 *
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * @param vehicle
 */
export declare function getVehicleEngineHealth(vehicle: number): number;
/**
 * The result is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 */
export declare function getVehicleEnveffScale(vehicle: number): number;
export declare function getVehicleEstimatedMaxSpeed(vehicle: number): number;
export declare function getVehicleExtraColour5(vehicle: number, color: number): number;
export declare function getVehicleExtraColour6(vehicle: number, color: number): number;
export declare function getVehicleExtraColours(vehicle: number): [number, number];
export declare function getVehicleFlightNozzlePosition(plane: number): number;
/**
 * Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
 * @param vehicle
 */
export declare function getVehicleHasKers(vehicle: number): boolean;
export declare function getVehicleHasLandingGear(vehicle: number): boolean;
export declare function getVehicleHasParachute(vehicle: number): boolean;
/**
 * 0 min 100 max
 * starts at 100
 * Seams to have health zones
 * Front of vehicle when damaged goes from 100-50 and stops at 50.
 * Rear can be damaged from 100-0
 * Only tested with two cars.
 *
 * any idea how this differs from the first one?
 *
 * --
 * May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
 *
 * example:
 *
 * v_F = ENTITY::GET_ENTITY_MODEL(v_3);
 * if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
 * if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {
 * NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
 * }
 * }
 * @param vehicle
 * @param maxEngineHealth
 * @param maxPetrolTankHealth
 * @param maxBodyHealth
 * @param maxMainRotorHealth
 * @param maxTailRotorHealth
 * @param maxUnkHealth
 */
export declare function getVehicleHealthPercentage(vehicle: number, maxEngineHealth: number, maxPetrolTankHealth: number, maxBodyHealth: number, maxMainRotorHealth: number, maxTailRotorHealth: number, maxUnkHealth: number): number;
export declare function getVehicleHomingLockedontoState(p0: number): number;
/**
 * Returns a value depending on the lock-on state of vehicle weapons.
 * 0: not locked on
 * 1: locking on
 * 2: locked on
 * @param vehicle
 */
export declare function getVehicleHomingLockonState(vehicle: number): number;
export declare function getVehicleHornSoundIndex(vehicle: number): number;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
export declare function getVehicleIndexFromEntityIndex(entity: number): number;
/**
 * Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
 * @param vehicle
 * @param doorId
 */
export declare function getVehicleIndividualDoorLockStatus(vehicle: number, doorId: number): number;
export declare function getVehicleIsDummy(p0: number): boolean;
export declare function getVehicleIsMercenary(vehicle: number): boolean;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param vehicle
 */
export declare function getVehicleLayoutHash(vehicle: number): number;
export declare function getVehicleLightsState(vehicle: number): [boolean, boolean, boolean];
/**
 * -1 = no livery
 * @param vehicle
 */
export declare function getVehicleLivery(vehicle: number): number;
/**
 * Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.
 * @param vehicle
 */
export declare function getVehicleLivery2(vehicle: number): number;
/**
 * Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.
 * @param vehicle
 */
export declare function getVehicleLivery2Count(vehicle: number): number;
/**
 * Returns -1 if the vehicle has no livery
 * @param vehicle
 */
export declare function getVehicleLiveryCount(vehicle: number): number;
export declare function getVehicleLockOnTarget(vehicle: number, entity: number): [boolean, number];
export declare function getVehicleMaxBraking(vehicle: number): number;
export declare function getVehicleMaxNumberOfPassengers(vehicle: number): number;
export declare function getVehicleMaxTraction(vehicle: number): number;
/**
 * In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
 *
 * Returns -1 if the vehicle mod is stock
 * @param vehicle
 * @param modType
 */
export declare function getVehicleMod(vehicle: number, modType: number): number;
export declare function getVehicleModColor1(vehicle: number): [number, number, number];
/**
 * Returns a string which is the codename of the vehicle's currently selected primary color
 *
 * p1 is always 0
 * @param vehicle
 * @param p1
 */
export declare function getVehicleModColor1Name(vehicle: number, p1: boolean): string;
export declare function getVehicleModColor2(vehicle: number): [number, number];
/**
 * Returns a string which is the codename of the vehicle's currently selected secondary color
 * @param vehicle
 */
export declare function getVehicleModColor2Name(vehicle: number): string;
/**
 * Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export declare function getVehicleModIdentifierHash(vehicle: number, modType: number, modIndex: number): number;
export declare function getVehicleModKit(vehicle: number): number;
export declare function getVehicleModKitType(vehicle: number): number;
export declare function getVehicleModModifierValue(vehicle: number, modType: number, modIndex: number): number;
/**
 * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
 * @param vehicle
 * @param modType
 */
export declare function getVehicleModVariation(vehicle: number, modType: number): number;
/**
 * Returns the acceleration of the specified model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelAcceleration(modelHash: number): number;
/**
 * 9.8 * thrust if air vehicle, else 0.38 + drive force?
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelAccelerationMaxMods(modelHash: number): number;
/**
 * Returns max speed (without mods) of the specified vehicle model in m/s.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelEstimatedMaxSpeed(modelHash: number): number;
/**
 * Returns max braking of the specified vehicle model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelMaxBraking(modelHash: number): number;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelMaxBrakingMaxMods(modelHash: number): number;
/**
 * Returns max traction of the specified vehicle model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelMaxTraction(modelHash: number): number;
/**
 * Returns max number of passengers (including the driver) for the specified vehicle model.
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function getVehicleModelNumberOfSeats(modelHash: number): number;
/**
 * Returns `nMonetaryValue` from handling.meta for specific model.
 * @param vehicleModel
 */
export declare function getVehicleModelValue(vehicleModel: number): number;
/**
 * Gets the color of the neon lights of the specified vehicle.
 *
 * See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export declare function getVehicleNeonColour(vehicle: number): [number, number, number];
/**
 * indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * @param vehicle
 * @param index
 */
export declare function getVehicleNeonEnabled(vehicle: number, index: number): boolean;
/**
 * Returns false for nodes that aren't used for GPS routes.
 * Example:
 * Nodes in Fort Zancudo and LSIA are false
 * @param nodeID
 */
export declare function getVehicleNodeIsGpsAllowed(nodeID: number): boolean;
/**
 * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
 * Normal roads where plenty of Peds spawn will return false
 * @param nodeID
 */
export declare function getVehicleNodeIsSwitchedOff(nodeID: number): boolean;
/**
 * Calling this with an invalid node id, will crash the game.
 * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
 * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
 * @param nodeId
 * @param outPosition
 */
export declare function getVehicleNodePosition(nodeId: number, outPosition: Vector3): Vector3;
/**
 * Gets the density and flags of the closest node to the specified position.
 * Density is a value between 0 and 15, indicating how busy the road is.
 * Flags is a bit field.
 * @param x
 * @param y
 * @param z
 * @param density
 * @param flags
 */
export declare function getVehicleNodeProperties(x: number, y: number, z: number): [boolean, number, number];
export declare function getVehicleNumOfBrokenLoosenParts(vehicle: number): number;
/**
 * Also includes some "turnOffBones" when vehicle mods are installed.
 * @param vehicle
 */
export declare function getVehicleNumOfBrokenOffParts(vehicle: number): number;
/**
 * Gets the number of passengers.
 *
 * This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
 *
 * To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
 * @param vehicle
 * @param includeDriver
 * @param includeDeadOccupants
 */
export declare function getVehicleNumberOfPassengers(vehicle: number, includeDriver: boolean, includeDeadOccupants: boolean): number;
/**
 * Returns the license plate text from a vehicle. 8 chars maximum.
 * @param vehicle
 */
export declare function getVehicleNumberPlateText(vehicle: number): string;
/**
 * Returns the PlateType of a vehicle
 * Blue_on_White_1 = 3,
 * Blue_on_White_2 = 0,
 * Blue_on_White_3 = 4,
 * Yellow_on_Blue = 2,
 * Yellow_on_Black = 1,
 * North_Yankton = 5,
 * @param vehicle
 */
export declare function getVehicleNumberPlateTextIndex(vehicle: number): number;
export declare function getVehiclePedIsEntering(ped: number): number;
/**
 * Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
 * @param ped
 * @param includeEntering
 */
export declare function getVehiclePedIsIn(ped: number, includeEntering: boolean): number;
export declare function getVehiclePedIsTryingToEnter(ped: number): number;
/**
 * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
 * @param ped
 */
export declare function getVehiclePedIsUsing(ped: number): number;
/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs
 * @param vehicle
 */
export declare function getVehiclePetrolTankHealth(vehicle: number): number;
export declare function getVehiclePlateType(vehicle: number): number;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export declare function getVehicleRecordingId(recording: number, script: string): number;
/**
 * Outputs 2 Vector3's.
 * Scripts check if out2.x - out1.x > someshit.x
 * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
 * @param vehicle
 * @param out1
 * @param out2
 */
export declare function getVehicleSize(vehicle: number): [Vector3, Vector3];
export declare function getVehicleTrailerParentVehicle(trailer: number): number;
/**
 * Gets the trailer of a vehicle and puts it into the trailer parameter.
 * @param vehicle
 * @param trailer
 */
export declare function getVehicleTrailerVehicle(vehicle: number, trailer: number): [boolean, number];
export declare function getVehicleTyreSmokeColor(vehicle: number): [number, number, number];
export declare function getVehicleTyresCanBurst(vehicle: number): boolean;
export declare function getVehicleWaypointProgress(vehicle: number): number;
export declare function getVehicleWaypointTargetPoint(vehicle: number): number;
export declare function getVehicleWeaponRestrictedAmmo(vehicle: number, weaponIndex: number): number;
/**
 * Returns an int
 *
 * Wheel Types:
 * 0: Sport
 * 1: Muscle
 * 2: Lowrider
 * 3: SUV
 * 4: Offroad
 * 5: Tuner
 * 6: Bike Wheels
 * 7: High End
 * 8: Benny's Originals
 * 9: Benny's Bespoke
 * 10: Racing
 * 11: Street
 * 12: Track
 *
 * Tested in Los Santos Customs
 * @param vehicle
 */
export declare function getVehicleWheelType(vehicle: number): number;
export declare function getVehicleWindowTint(vehicle: number): number;
/**
 * Returns the headlight color index from the vehicle. Value between 0, 12.
 * Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
 * Must enable xenon headlights before it'll take affect.
 *
 * Returns an int, value between 0-12 or 255 if no color is set.
 * @param vehicle
 */
export declare function getVehicleXenonLightColorIndex(vehicle: number): number;
/**
 * Remnant from GTA IV. Does nothing in GTA V.
 * @param player
 */
export declare function getWantedLevelRadius(player: number): number;
/**
 * Drft
 * @param wantedLevel
 */
export declare function getWantedLevelThreshold(wantedLevel: number): number;
export declare function getWantedLevelTimeToEscape(): number;
/**
 * Has to do with the confirmation overlay (E.g. confirm exit)
 */
export declare function getWarningScreenMessageHash(): number;
/**
 * This function set height to the value of z-axis of the water surface.
 *
 * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
 *
 * note: seems to return true when you are in water
 * @param x
 * @param y
 * @param z
 * @param height
 */
export declare function getWaterHeight(x: number, y: number, z: number, height: number): [boolean, number];
export declare function getWaterHeightNoWaves(x: number, y: number, z: number, height: number): [boolean, number];
export declare function getWaypointBlipEnumId(): number;
export declare function getWaypointDistanceAlongRoute(name: string, point: number): number;
/**
 * // Returns the size of the default weapon component clip.
 *
 * Use it like this:
 *
 * char cClipSize[32];
 * Hash cur;
 * if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
 * {
 * if (WEAPON::IS_WEAPON_VALID(cur))
 * {
 * int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
 * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
 * vDrawString(cClipSize, 0.5f, 0.5f);
 * }
 * }
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export declare function getWeaponClipSize(weaponHash: number): number;
export declare function getWeaponComponentHudStats(componentHash: number, outData: number): [boolean, number];
export declare function getWeaponComponentTypeModel(componentHash: number): number;
/**
 * Returns the amount of extra components the specified component has.
 * Returns -1 if the component isn't of type CWeaponComponentVariantModel.
 * @param componentHash
 */
export declare function getWeaponComponentVariantExtraCount(componentHash: number): number;
/**
 * Returns the model hash of the extra component at specified index.
 * @param componentHash
 * @param extraComponentIndex
 */
export declare function getWeaponComponentVariantExtraModel(componentHash: number, extraComponentIndex: number): number;
/**
 * This native does not return damages of weapons from the melee and explosive group.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param componentHash
 */
export declare function getWeaponDamage(weaponHash: number, componentHash: number): number;
/**
 * enum class eDamageType
 * {
 * UNKNOWN = 0,
 * NONE = 1,
 * MELEE = 2,
 * BULLET = 3,
 * BULLET_RUBBER = 4,
 * EXPLOSIVE = 5,
 * FIRE = 6,
 * COLLISION = 7,
 * FALL = 8,
 * DROWN = 9,
 * ELECTRIC = 10,
 * BARBED_WIRE = 11,
 * FIRE_EXTINGUISHER = 12,
 * SMOKE = 13,
 * WATER_CANNON = 14,
 * TRANQUILIZER = 15,
 * };
 *
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export declare function getWeaponDamageType(weaponHash: number): number;
/**
 * struct WeaponHudStatsData
 * {
 * BYTE hudDamage; // 0x0000
 * char _0x0001[0x7]; // 0x0001
 * BYTE hudSpeed; // 0x0008
 * char _0x0009[0x7]; // 0x0009
 * BYTE hudCapacity; // 0x0010
 * char _0x0011[0x7]; // 0x0011
 * BYTE hudAccuracy; // 0x0018
 * char _0x0019[0x7]; // 0x0019
 * BYTE hudRange; // 0x0020
 * };
 *
 * Usage:
 *
 * WeaponHudStatsData data;
 * if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
 * {
 * // BYTE damagePercentage = data.hudDamage and so on
 * }
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param outData
 */
export declare function getWeaponHudStats(weaponHash: number, outData: number): [boolean, number];
/**
 * Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponObject
 * @param camoComponentHash
 */
export declare function getWeaponObjectComponentTintIndex(weaponObject: number, camoComponentHash: number): number;
/**
 * Drops the current weapon and returns the object
 *
 * Unknown behavior when unarmed.
 * @param ped
 * @param p1
 */
export declare function getWeaponObjectFromPed(ped: number, p1: boolean): number;
export declare function getWeaponObjectTintIndex(weapon: number): number;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export declare function getWeaponTimeBetweenShots(weaponHash: number): number;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export declare function getWeaponTintCount(weaponHash: number): number;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export declare function getWeaponTypeFromPickupType(pickupHash: number): number;
export declare function getWeapontypeGroup(weaponHash: number): number;
/**
 * Returns the model of any weapon.
 *
 * Can also take an ammo hash?
 * sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
 * @param weaponHash
 */
export declare function getWeapontypeModel(weaponHash: number): number;
export declare function getWeapontypeSlot(weaponHash: number): number;
export declare function getWindDirection(): Vector3;
export declare function getWindSpeed(): number;
/**
 * Returns the coordinates of an entity-bone.
 * @param entity
 * @param boneIndex
 */
export declare function getWorldPositionOfEntityBone(entity: number, boneIndex: number): Vector3;
export declare function getZoneAtCoords(x: number, y: number, z: number): number;
/**
 * 'zoneName' corresponds to an entry in 'popzone.ipl'.
 *
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 *
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param zoneName
 */
export declare function getZoneFromNameId(zoneName: string): number;
export declare function getZonePopschedule(zoneId: number): number;
/**
 * cellphone range 1- 5 used for signal bar in iFruit phone
 * @param zoneId
 */
export declare function getZoneScumminess(zoneId: number): number;
/**
 * 1 - Welcome to Los Santos
 * 2 - A Friendship Resurrected
 * 3 - A Fair Day's Pay
 * 4 - The Moment of Truth
 * 5 - To Live or Die in Los Santos
 * 6 - Diamond Hard
 * 7 - Subversive
 * 8 - Blitzed
 * 9 - Small Town, Big Job
 * 10 - The Government Gimps
 * 11 - The Big One!
 * 12 - Solid Gold, Baby!
 * 13 - Career Criminal
 * 14 - San Andreas Sightseer
 * 15 - All's Fare in Love and War
 * 16 - TP Industries Arms Race
 * 17 - Multi-Disciplined
 * 18 - From Beyond the Stars
 * 19 - A Mystery, Solved
 * 20 - Waste Management
 * 21 - Red Mist
 * 22 - Show Off
 * 23 - Kifflom!
 * 24 - Three Man Army
 * 25 - Out of Your Depth
 * 26 - Altruist Acolyte
 * 27 - A Lot of Cheddar
 * 28 - Trading Pure Alpha
 * 29 - Pimp My Sidearm
 * 30 - Wanted: Alive Or Alive
 * 31 - Los Santos Customs
 * 32 - Close Shave
 * 33 - Off the Plane
 * 34 - Three-Bit Gangster
 * 35 - Making Moves
 * 36 - Above the Law
 * 37 - Numero Uno
 * 38 - The Midnight Club
 * 39 - Unnatural Selection
 * 40 - Backseat Driver
 * 41 - Run Like The Wind
 * 42 - Clean Sweep
 * 43 - Decorated
 * 44 - Stick Up Kid
 * 45 - Enjoy Your Stay
 * 46 - Crew Cut
 * 47 - Full Refund
 * 48 - Dialling Digits
 * 49 - American Dream
 * 50 - A New Perspective
 * 51 - Be Prepared
 * 52 - In the Name of Science
 * 53 - Dead Presidents
 * 54 - Parole Day
 * 55 - Shot Caller
 * 56 - Four Way
 * 57 - Live a Little
 * 58 - Can't Touch This
 * 59 - Mastermind
 * 60 - Vinewood Visionary
 * 61 - Majestic
 * 62 - Humans of Los Santos
 * 63 - First Time Director
 * 64 - Animal Lover
 * 65 - Ensemble Piece
 * 66 - Cult Movie
 * 67 - Location Scout
 * 68 - Method Actor
 * 69 - Cryptozoologist
 * 70 - Getting Started
 * 71 - The Data Breaches
 * 72 - The Bogdan Problem
 * 73 - The Doomsday Scenario
 * 74 - A World Worth Saving
 * 75 - Orbital Obliteration
 * 76 - Elitist
 * 77 - Masterminds
 * @param achievementId
 */
export declare function giveAchievementToPlayer(achievementId: number): boolean;
/**
 * Gives a weapon to PED with a delay, example:
 *
 * WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param bForceInHand
 */
export declare function giveDelayedWeaponToPed(ped: number, weaponHash: number, ammoCount: number, bForceInHand: boolean): void;
/**
 * Gives the specified loadout to the specified ped.
 * Loadouts are defined in common.rpf\data\ai\loadouts.meta
 * @param ped
 * @param loadoutHash
 */
export declare function giveLoadoutToPed(ped: number, loadoutHash: number): void;
/**
 * PoliceMotorcycleHelmet   1024
 * RegularMotorcycleHelmet   4096
 * FiremanHelmet 16384
 * PilotHeadset  32768
 * PilotHelmet   65536
 * --
 * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
 * @param ped
 * @param cannotRemove
 * @param helmetFlag
 * @param textureIndex
 */
export declare function givePedHelmet(ped: number, cannotRemove: boolean, helmetFlag: number, textureIndex: number): void;
/**
 * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
 *
 * If a message hasn't been created already, this function does nothing.
 * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
 * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 *
 * Call order:
 * SET_PED_TO_RAGDOLL
 * CREATE_NM_MESSAGE
 * GIVE_PED_NM_MESSAGE
 *
 * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
 * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * @param ped
 */
export declare function givePedNmMessage(ped: number): void;
/**
 * p1 is either 1 or 2 in the PC scripts.
 * @param ped
 * @param p1
 */
export declare function givePedToPauseMenu(ped: number, p1: number): void;
export declare function givePlayerRagdollControl(player: number, toggle: boolean): void;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export declare function giveWeaponComponentToPed(ped: number, weaponHash: number, componentHash: number): void;
/**
 * componentHash:
 * (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
 * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
 * @param weaponObject
 * @param componentHash
 */
export declare function giveWeaponComponentToWeaponObject(weaponObject: number, componentHash: number): void;
export declare function giveWeaponObjectToPed(weaponObject: number, ped: number): void;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param isHidden
 * @param bForceInHand
 */
export declare function giveWeaponToPed(ped: number, weaponHash: number, ammoCount: number, isHidden: boolean, bForceInHand: boolean): void;
export declare function golfTrailGetMaxHeight(): number;
export declare function golfTrailGetVisualControlPoint(p0: number): Vector3;
export declare function golfTrailSetColour(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void;
export declare function golfTrailSetEnabled(toggle: boolean): void;
export declare function golfTrailSetFacing(p0: boolean): void;
/**
 * 12 matches across 4 scripts. All 4 scripts were job creators.
 *
 * type ranged from 0 - 2.
 * p4 was always 0.2f. Likely scale.
 * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
 *
 * Tested but noticed nothing.
 * @param type
 * @param xPos
 * @param yPos
 * @param zPos
 * @param p4
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function golfTrailSetFixedControlPoint(type: number, xPos: number, yPos: number, zPos: number, p4: number, red: number, green: number, blue: number, alpha: number): void;
export declare function golfTrailSetFixedControlPointEnable(p0: boolean): void;
/**
 * p8 seems to always be false.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export declare function golfTrailSetPath(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): void;
export declare function golfTrailSetRadius(p0: number, p1: number, p2: number): void;
/**
 * Only appeared in Golf & Golf_mp. Parameters were all ptrs
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export declare function golfTrailSetShaderParams(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function golfTrailSetTessellation(p0: number, p1: number): void;
export declare function grabPausemenuOwnership(): void;
export declare function grassbatchDisableFlattening(): void;
export declare function grassbatchEnableFlatteningExtInSphere(x: number, y: number, z: number, p3: number, p4: number, p5: number, p6: number, scale: number): void;
/**
 * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 */
export declare function grassbatchEnableFlatteningInSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number): void;
/**
 * Example from am_mp_drone script:
 *
 * CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);
 * @param cam
 * @param entity
 * @param xRot
 * @param yRot
 * @param zRot
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
export declare function hardAttachCamToEntity(cam: number, entity: number, xRot: number, yRot: number, zRot: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void;
export declare function hardAttachCamToPedBone(cam: number, ped: number, boneIndex: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): void;
/**
 * See GIVE_ACHIEVEMENT_TO_PLAYER
 * @param achievementId
 */
export declare function hasAchievementBeenPassed(achievementId: number): boolean;
export declare function hasActionModeAssetLoaded(asset: string): boolean;
export declare function hasAdditionalTextLoaded(slot: number): boolean;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export declare function hasAnimDictLoaded(animDict: string): boolean;
/**
 * if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
 * @param entity
 * @param actionHash
 */
export declare function hasAnimEventFired(entity: number, actionHash: number): boolean;
/**
 * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 *
 * Animation set and clip set are synonymous.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
export declare function hasAnimSetLoaded(animSet: string): boolean;
/**
 * Hardcoded to always return true.
 */
export declare function hasAsyncInstallFinished(): boolean;
/**
 * p3 - possibly radius?
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 */
export declare function hasBulletImpactedInArea(x: number, y: number, z: number, p3: number, p4: boolean, p5: boolean): boolean;
export declare function hasBulletImpactedInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): boolean;
/**
 * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
 *
 * INT_SCORES_SCORTED was a hash collision
 * @param hash
 * @param amount
 */
export declare function hasCheatWithHashBeenActivated(hash: number, amount: number): boolean;
/**
 * Alias for HAS_ANIM_SET_LOADED.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
export declare function hasClipSetLoaded(clipSet: string): boolean;
export declare function hasClosestObjectOfTypeBeenBroken(p0: number, p1: number, p2: number, p3: number, modelHash: number, p5: number): boolean;
export declare function hasClosestObjectOfTypeBeenCompletelyDestroyed(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): boolean;
/**
 * Sets the value of the specified variable to 0.
 * Always returns true.
 * @param p0
 * @param unused
 */
export declare function hasCloudRequestsFinished(unused: number): [boolean, boolean];
export declare function hasCodeRequestedAutosave(): boolean;
export declare function hasCollisionForModelLoaded(model: number): boolean;
export declare function hasCollisionLoadedAroundEntity(entity: number): boolean;
/**
 * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export declare function hasCutFileLoaded(cutsceneName: string): boolean;
/**
 * Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
 */
export declare function hasCutsceneCutThisFrame(): boolean;
export declare function hasCutsceneFinished(): boolean;
export declare function hasCutsceneLoaded(): boolean;
export declare function hasDirectorModeBeenLaunchedByCode(): boolean;
/**
 * P3 is always 3 as far as i cant tell
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 * @param p3
 */
export declare function hasEntityAnimFinished(entity: number, animDict: string, animName: string, p3: number): boolean;
export declare function hasEntityBeenDamagedByAnyObject(entity: number): boolean;
export declare function hasEntityBeenDamagedByAnyPed(entity: number): boolean;
export declare function hasEntityBeenDamagedByAnyVehicle(entity: number): boolean;
/**
 * Entity 1 = Victim
 * Entity 2 = Attacker
 *
 * p2 seems to always be 1
 * @param entity1
 * @param entity2
 * @param p2
 */
export declare function hasEntityBeenDamagedByEntity(entity1: number, entity2: number, p2: boolean): boolean;
/**
 * It determines what weapons caused damage:
 *
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param entity
 * @param weaponHash
 * @param weaponType
 */
export declare function hasEntityBeenDamagedByWeapon(entity: number, weaponHash: number, weaponType: number): boolean;
/**
 * traceType is always 17 in the scripts.
 *
 * There is other codes used for traceType:
 * 19 - in jewelry_prep1a
 * 126 - in am_hunt_the_beast
 * 256 & 287 - in fm_mission_controller
 * @param entity1
 * @param entity2
 * @param traceType
 */
export declare function hasEntityClearLosToEntity(entity1: number, entity2: number, traceType: number): boolean;
export declare function hasEntityClearLosToEntityAdjustForCover(entity1: number, entity2: number, traceType: number): boolean;
/**
 * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
 * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
 * @param entity1
 * @param entity2
 */
export declare function hasEntityClearLosToEntityInFront(entity1: number, entity2: number): boolean;
/**
 * Called on tick.
 * Tested with vehicles, returns true whenever the vehicle is touching any entity.
 *
 * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
 * @param entity
 */
export declare function hasEntityCollidedWithAnything(entity: number): boolean;
export declare function hasForceCleanupOccurred(cleanupFlags: number): boolean;
export declare function hasGameInstalledThisSession(): boolean;
export declare function hasInstantFillVehiclePopulationFinished(): boolean;
export declare function hasLoadedMpDataSet(): boolean;
export declare function hasLoadedSpDataSet(): boolean;
export declare function hasMenuLayoutChangedEventOccurred(): boolean;
export declare function hasMenuTriggerEventOccurred(): boolean;
/**
 * Checks if the specified model has loaded into memory.
 * @param model
 */
export declare function hasModelLoaded(model: number): boolean;
export declare function hasNamedPtfxAssetLoaded(fxName: string): boolean;
export declare function hasNetworkTimeStarted(): boolean;
export declare function hasObjectBeenBroken(object: number, p1: number): boolean;
/**
 * Get inputted "Cheat code", for example:
 *
 * while (TRUE)
 * {
 * if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))
 * {
 * // Do something.
 * }
 * SYSTEM::WAIT(0);
 * }
 *
 * Calling this will also set the last saved string hash to zero.
 *
 * @param hash
 */
export declare function hasPcCheatWithHashBeenActivated(hash: number): boolean;
/**
 * It determines what weapons caused damage:
 *
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param weaponType
 */
export declare function hasPedBeenDamagedByWeapon(ped: number, weaponHash: number, weaponType: number): boolean;
/**
 * p2 should be FALSE, otherwise it seems to always return FALSE
 *
 * Bool does not check if the weapon is current equipped, unfortunately.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param p2
 */
export declare function hasPedGotWeapon(ped: number, weaponHash: number, p2: boolean): boolean;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export declare function hasPedGotWeaponComponent(ped: number, weaponHash: number, componentHash: number): boolean;
export declare function hasPedHeadBlendFinished(ped: number): boolean;
export declare function hasPedPreloadPropDataFinished(ped: number): boolean;
export declare function hasPedPreloadVariationDataFinished(ped: number): boolean;
export declare function hasPedReceivedEvent(ped: number, eventId: number): boolean;
export declare function hasPedheadshotImgUploadFailed(): boolean;
export declare function hasPedheadshotImgUploadSucceeded(): boolean;
export declare function hasPickupBeenCollected(pickup: number): boolean;
export declare function hasPlayerBeenSpottedInStolenVehicle(player: number): boolean;
export declare function hasPlayerDamagedAtLeastOneNonAnimalPed(player: number): boolean;
export declare function hasPlayerDamagedAtLeastOnePed(player: number): boolean;
export declare function hasPlayerLeftTheWorld(player: number): boolean;
export declare function hasPreloadModsFinished(vehicle: number): boolean;
export declare function hasPtfxAssetLoaded(): boolean;
/**
 * Hardcoded to return false.
 */
export declare function hasResumedFromSuspend(): boolean;
export declare function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean;
/**
 * Only values used in the scripts are:
 *
 * "heist_mp"
 * "heistmap_mp"
 * "instructional_buttons"
 * "heist_pre"
 * @param scaleformName
 */
export declare function hasScaleformMovieFilenameLoaded(scaleformName: string): boolean;
export declare function hasScaleformMovieLoaded(scaleformHandle: number): boolean;
export declare function hasScaleformScriptHudMovieLoaded(hudComponent: number): boolean;
export declare function hasScriptHiddenHelpThisFrame(): boolean;
/**
 * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
 * @param scriptName
 */
export declare function hasScriptLoaded(scriptName: string): boolean;
export declare function hasScriptWithNameHashLoaded(scriptHash: number): boolean;
export declare function hasSoundFinished(soundId: number): boolean;
export declare function hasStealthModeAssetLoaded(asset: string): boolean;
export declare function hasStreamedTextureDictLoaded(textureDict: string): boolean;
/**
 * Checks if the specified gxt has loaded into the passed slot.
 * @param gxt
 * @param slot
 */
export declare function hasThisAdditionalTextLoaded(gxt: string, slot: number): boolean;
/**
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export declare function hasThisCutsceneLoaded(cutsceneName: string): boolean;
/**
 * This function is hard-coded to always return 1.
 * @param p0
 */
export declare function hasVcWithdrawalCompleted(p0: number): boolean;
export declare function hasVehicleAssetLoaded(vehicleAsset: number): boolean;
/**
 * Fourth Parameter = unsure, almost always -1
 * @param driver
 * @param vehicle
 * @param weaponHash
 * @param p3
 */
export declare function hasVehicleGotProjectileAttached(driver: number, vehicle: number, weaponHash: number, p3: number): boolean;
export declare function hasVehiclePetroltankSetOnFireByEntity(p0: number, p1: number): boolean;
export declare function hasVehiclePhoneExplosiveDevice(): boolean;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export declare function hasVehicleRecordingBeenLoaded(recording: number, script: string): boolean;
export declare function hasWeaponAssetLoaded(weaponHash: number): boolean;
/**
 * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
 * @param weapon
 * @param componentHash
 */
export declare function hasWeaponGotWeaponComponent(weapon: number, componentHash: number): boolean;
export declare function haveAllStreamingRequestsCompleted(ped: number): boolean;
/**
 * control: unused parameter
 * @param control
 */
export declare function haveControlsChanged(control: number): boolean;
export declare function haveCreditsReachedEnd(): boolean;
export declare function haveReplayStatsBeenStored(): boolean;
export declare function haveVehicleModsStreamedIn(vehicle: number): boolean;
export declare function haveVehicleRearDoorsBeenBlownOpenByStickybomb(vehicle: number): boolean;
export declare function hideHelpTextThisFrame(): void;
/**
 * Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
 */
export declare function hideHudAndRadarThisFrame(): void;
/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * - 1 : WANTED_STARS
 * - 2 : WEAPON_ICON
 * - 3 : CASH
 * - 4 : MP_CASH
 * - 5 : MP_MESSAGE
 * - 6 : VEHICLE_NAME
 * - 7 : AREA_NAME
 * - 8 : VEHICLE_CLASS
 * - 9 : STREET_NAME
 * - 10 : HELP_TEXT
 * - 11 : FLOATING_HELP_TEXT_1
 * - 12 : FLOATING_HELP_TEXT_2
 * - 13 : CASH_CHANGE
 * - 14 : RETICLE
 * - 15 : SUBTITLE_TEXT
 * - 16 : RADIO_STATIONS
 * - 17 : SAVING_GAME
 * - 18 : GAME_STREAM
 * - 19 : WEAPON_WHEEL
 * - 20 : WEAPON_WHEEL_STATS
 * - 21 : HUD_COMPONENTS
 * - 22 : HUD_WEAPONS
 *
 * These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
 * @param id
 */
export declare function hideHudComponentThisFrame(id: number): void;
export declare function hideHudmarkersThisFrame(): void;
export declare function hideLoadingOnFadeThisFrame(): void;
export declare function hideMinimapExteriorMapThisFrame(): void;
export declare function hideMinimapInteriorMapThisFrame(): void;
export declare function hideNumberOnBlip(blip: number): void;
export declare function hidePedBloodDamageByZone(ped: number, p1: number, p2: boolean): void;
/**
 * Hides the players weapon during a cutscene.
 * @param ped
 * @param toggle
 */
export declare function hidePedWeaponForScriptedCutscene(ped: number, toggle: boolean): void;
export declare function hidePortablePickupWhenDetached(pickupObject: number, toggle: boolean): void;
export declare function hideScriptedHudComponentThisFrame(id: number): void;
/**
 * Hides area and vehicle name HUD components for one frame.
 */
export declare function hideStreetAndCarNamesThisFrame(): void;
/**
 * Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
 * @param vehicle
 * @param toggle
 */
export declare function hideTombstone(vehicle: number, toggle: boolean): void;
/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export declare function hintAmbientAudioBank(audioBank: string, p1: boolean, p2: number): boolean;
/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export declare function hintMissionAudioBank(audioBank: string, p1: boolean, p2: number): boolean;
/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export declare function hintScriptAudioBank(audioBank: string, p1: boolean, p2: number): boolean;
export declare function hiredLimo(p0: number, p1: number): void;
/**
 * Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
 */
export declare function hudForceSpecialVehicleWeaponWheel(): void;
/**
 * Forces the weapon wheel to show/hide.
 * @param show
 */
export declare function hudForceWeaponWheel(show: boolean): void;
/**
 * Returns the weapon hash to the selected/highlighted weapon in the wheel
 */
export declare function hudGetWeaponWheelCurrentlyHighlighted(): number;
/**
 * Returns the weapon hash active in a specific weapon wheel slotList
 * @param weaponTypeIndex
 */
export declare function hudGetWeaponWheelTopSlot(weaponTypeIndex: number): number;
/**
 * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
 * @param weaponHash
 */
export declare function hudSetWeaponWheelTopSlot(weaponHash: number): void;
/**
 * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
 * @param toggle
 */
export declare function hudShowingCharacterSwitchSelection(toggle: boolean): void;
/**
 * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
 */
export declare function hudSuppressWeaponWheelResultsThisFrame(): void;
export declare function ignoreMenuPreferenceForBonnetCameraThisUpdate(): void;
export declare function ignoreNextRestart(toggle: boolean): void;
export declare function increasePlayerJumpSuppressionRange(player: number): void;
export declare function informCodeOfContentIdOfCurrentUgcMission(p0: string): void;
export declare function initCreatorBudget(): void;
/**
 * Used in carsteal3 script with schemeName = "Carsteal4_spycar".
 * @param schemeName
 */
export declare function initPcScriptedControls(schemeName: string): boolean;
export declare function initShopPedComponent(outComponent: number): number;
export declare function initShopPedProp(outProp: number): number;
export declare function initSynchSceneAudioWithEntity(audioEvent: string, entity: number): void;
export declare function initSynchSceneAudioWithPosition(audioEvent: string, x: number, y: number, z: number): void;
export declare function instantlyFillPedPopulation(): void;
export declare function instantlyFillVehiclePopulation(): void;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * --------------------------------------------------------
 * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
 *
 * @param value
 */
export declare function intToParticipantindex(value: number): number;
/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param value
 */
export declare function intToPlayerindex(value: number): number;
/**
 * Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
 * Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
 * @param ped
 * @param voiceline
 * @param speaker
 */
export declare function interruptConversation(ped: number, voiceline: string, speaker: string): void;
/**
 * One call found in the b617d scripts:
 *
 * AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0 -- [[1]] ]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
 * @param ped
 * @param p1
 * @param speaker
 */
export declare function interruptConversationAndPause(ped: number, p1: string, speaker: string): void;
/**
 * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
 */
export declare function invalidateCinematicVehicleIdleMode(): void;
/**
 * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
 */
export declare function invalidateIdleCam(): void;
export declare function iplGroupSwapCancel(): void;
export declare function iplGroupSwapFinish(): void;
export declare function iplGroupSwapIsActive(): boolean;
export declare function iplGroupSwapIsReady(): boolean;
export declare function iplGroupSwapStart(iplName1: string, iplName2: string): void;
/**
 * val is 1-20 (0 will return false)
 * @param val
 */
export declare function isActiveScaleformMovieDeleting(val: number): boolean;
export declare function isAimCamActive(): boolean;
export declare function isAimCamActiveInAccurateMode(): boolean;
export declare function isAirDefenceSphereInArea(x: number, y: number, z: number, radius: number, outZoneId: number): [boolean, number];
/**
 * Example:
 *
 * bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 */
export declare function isAlarmPlaying(alarmName: string): boolean;
export declare function isAllowedIndependentCameraModes(): boolean;
/**
 * Common in the scripts:
 * AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
 * @param ped
 */
export declare function isAmbientSpeechDisabled(ped: number): boolean;
export declare function isAmbientSpeechPlaying(ped: number): boolean;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 */
export declare function isAmbientZoneEnabled(ambientZone: string): boolean;
export declare function isAnEntity(handle: number): boolean;
export declare function isAnimalVocalizationPlaying(pedHandle: number): boolean;
export declare function isAnyEntityAttachedToHandlerFrame(vehicle: number): boolean;
export declare function isAnyEntityEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: number): boolean;
export declare function isAnyHostilePedNearPoint(ped: number, x: number, y: number, z: number, radius: number): boolean;
export declare function isAnyObjectNearPoint(x: number, y: number, z: number, range: number, p4: boolean): boolean;
export declare function isAnyPedNearPoint(x: number, y: number, z: number, radius: number): boolean;
export declare function isAnyPedRappellingFromHeli(vehicle: number): boolean;
export declare function isAnyPedShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): boolean;
export declare function isAnyPositionalSpeechPlaying(): boolean;
export declare function isAnySpeechPlaying(ped: number): boolean;
export declare function isAnyVehicleNearPoint(x: number, y: number, z: number, radius: number): boolean;
export declare function isAreaOccupied(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: number, p12: boolean): boolean;
export declare function isAreaOccupiedSlow(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number): boolean;
/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
export declare function isAudioSceneActive(scene: string): boolean;
/**
 * Used to block some of the prostitute stuff due to laws in Australia.
 */
export declare function isAussieVersion(): boolean;
export declare function isAutoSaveInProgress(): boolean;
/**
 * Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
 * @param vehicle
 */
export declare function isBigVehicle(vehicle: number): boolean;
export declare function isBlipFlashing(blip: number): boolean;
export declare function isBlipOnMinimap(blip: number): boolean;
export declare function isBlipShortRange(blip: number): boolean;
export declare function isBoatAnchored(vehicle: number): boolean;
export declare function isBonnetCinematicCamRendering(): boolean;
/**
 * For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param ownedByPlayer
 */
export declare function isBulletInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, ownedByPlayer: boolean): boolean;
export declare function isBulletInArea(x: number, y: number, z: number, radius: number, ownedByPlayer: boolean): boolean;
export declare function isBulletInBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean;
/**
 * Returns whether or not the passed camera handle is active.
 * @param cam
 */
export declare function isCamActive(cam: number): boolean;
export declare function isCamInterpolating(cam: number): boolean;
export declare function isCamPlayingAnim(cam: number, animName: string, animDictionary: string): boolean;
export declare function isCamRendering(cam: number): boolean;
export declare function isCamShaking(cam: number): boolean;
export declare function isCamSplinePaused(cam: number): boolean;
/**
 * Tests some cinematic camera flags
 */
export declare function isCinematicCamInputActive(): boolean;
export declare function isCinematicCamRendering(): boolean;
export declare function isCinematicCamShaking(): boolean;
export declare function isCinematicFirstPersonVehicleInteriorCamRendering(): boolean;
export declare function isCinematicIdleCamRendering(): boolean;
/**
 * Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
 * @param p0
 */
export declare function isCinematicShotActive(p0: number): boolean;
export declare function isCodeGameplayHintActive(): boolean;
/**
 * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
 * @param x
 * @param y
 * @param z
 */
export declare function isCollisionMarkedOutside(x: number, y: number, z: number): boolean;
/**
 * Returns true if command line option '-benchmark' is set.
 */
export declare function isCommandlineEndUserBenchmark(): boolean;
export declare function isCommerceDataFetchInProgress(): boolean;
export declare function isCommerceDataValid(): boolean;
export declare function isCommerceStoreOpen(): boolean;
export declare function isContentItemLocked(itemHash: number): boolean;
/**
 * control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
 * For more info, see https://docs.fivem.net/docs/game-references/controls/
 * @param control
 * @param action
 */
export declare function isControlEnabled(control: number, action: number): boolean;
/**
 * Returns whether a control was newly pressed since the last check.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isControlJustPressed(control: number, action: number): boolean;
/**
 * Returns whether a control was newly released since the last check.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isControlJustReleased(control: number, action: number): boolean;
/**
 * Returns whether a control is currently pressed.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isControlPressed(control: number, action: number): boolean;
/**
 * Returns whether a control is currently _not_ pressed.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isControlReleased(control: number, action: number): boolean;
export declare function isControlledVehicleUnableToGetToRoad(ped: number): boolean;
export declare function isConversationPedDead(ped: number): boolean;
/**
 * xyz - relative to the world origin.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function isCopPedInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
/**
 * Usage:
 *
 * public bool isCopInRange(Vector3 Location, float Range)
 * {
 * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
 * }
 * @param x1
 * @param x2
 * @param y1
 * @param y2
 * @param z1
 * @param z2
 */
export declare function isCopVehicleInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean;
export declare function isCurrentHeadPropAHelmet(p0: number): boolean;
export declare function isCutsceneActive(): boolean;
/**
 * This function is hard-coded to always return 1.
 * @param cutsceneName
 */
export declare function isCutsceneAuthorized(cutsceneName: string): boolean;
export declare function isCutscenePlaybackFlagSet(flag: number): boolean;
export declare function isCutscenePlaying(): boolean;
export declare function isDamageTrackerActiveOnNetworkId(netID: number): boolean;
export declare function isDamageTrackerActiveOnPlayer(player: number): boolean;
export declare function isDecalAlive(decal: number): boolean;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isDisabledControlJustPressed(control: number, action: number): boolean;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isDisabledControlJustReleased(control: number, action: number): boolean;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isDisabledControlPressed(control: number, action: number): boolean;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function isDisabledControlReleased(control: number, action: number): boolean;
/**
 * Returns true if the given DLC pack is present.
 * @param dlcHash
 */
export declare function isDlcPresent(dlcHash: number): boolean;
export declare function isDlcVehicleMod(hash: number): boolean;
export declare function isDoorClosed(doorHash: number): boolean;
/**
 * if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))
 * {
 * OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
 * }
 * @param doorHash
 */
export declare function isDoorRegisteredWithSystem(doorHash: number): boolean;
export declare function isDrivebyTaskUnderneathDrivingTask(ped: number): boolean;
/**
 * XBOX ONE
 */
export declare function isDurangoVersion(): boolean;
export declare function isEntityAGhost(entity: number): boolean;
export declare function isEntityAMissionEntity(entity: number): boolean;
export declare function isEntityAPed(entity: number): boolean;
export declare function isEntityAVehicle(entity: number): boolean;
export declare function isEntityAnObject(entity: number): boolean;
/**
 * Checks if entity is within x/y/zSize distance of x/y/z.
 *
 * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p7
 * @param p8
 * @param p9
 */
export declare function isEntityAtCoord(entity: number, xPos: number, yPos: number, zPos: number, xSize: number, ySize: number, zSize: number, p7: boolean, p8: boolean, p9: number): boolean;
/**
 * Checks if entity1 is within the box defined by x/y/zSize of entity2.
 *
 * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
 * @param entity1
 * @param entity2
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p5
 * @param p6
 * @param p7
 */
export declare function isEntityAtEntity(entity1: number, entity2: number, xSize: number, ySize: number, zSize: number, p5: boolean, p6: boolean, p7: number): boolean;
/**
 * Whether the entity is attached to any other entity.
 * @param entity
 */
export declare function isEntityAttached(entity: number): boolean;
export declare function isEntityAttachedToAnyObject(entity: number): boolean;
export declare function isEntityAttachedToAnyPed(entity: number): boolean;
export declare function isEntityAttachedToAnyVehicle(entity: number): boolean;
export declare function isEntityAttachedToEntity(from: number, to: number): boolean;
export declare function isEntityAttachedToHandlerFrame(vehicle: number, entity: number): boolean;
export declare function isEntityDead(entity: number, p1: boolean): boolean;
export declare function isEntityFocus(entity: number): boolean;
export declare function isEntityInAir(entity: number): boolean;
/**
 * `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
 * `p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param entity
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includeZ
 * @param p10
 */
export declare function isEntityInAngledArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean, p10: number): boolean;
export declare function isEntityInArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean, p9: number): boolean;
export declare function isEntityInGhostCollision(entity: number): boolean;
export declare function isEntityInWater(entity: number): boolean;
/**
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param entity
 * @param zone
 */
export declare function isEntityInZone(entity: number, zone: string): boolean;
export declare function isEntityOccluded(entity: number): boolean;
export declare function isEntityOnFire(entity: number): boolean;
/**
 * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
 * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
 * Chipping
 * @param entity
 */
export declare function isEntityOnScreen(entity: number): boolean;
/**
 * See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
 *
 * Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
 *
 * p4 is always 3 in the scripts.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 * @param taskFlag
 */
export declare function isEntityPlayingAnim(entity: number, animDict: string, animName: string, taskFlag: number): boolean;
/**
 * a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
 *
 * how can I make an entity static???
 * @param entity
 */
export declare function isEntityStatic(entity: number): boolean;
export declare function isEntityTouchingEntity(entity: number, targetEntity: number): boolean;
export declare function isEntityTouchingModel(entity: number, modelHash: number): boolean;
export declare function isEntityUpright(entity: number, angle: number): boolean;
export declare function isEntityUpsidedown(entity: number): boolean;
export declare function isEntityVisible(entity: number): boolean;
export declare function isEntityVisibleToScript(entity: number): boolean;
export declare function isEntityWaitingForWorldCollision(entity: number): boolean;
/**
 * Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
 *
 * seatIndex  = -1 being the driver seat.
 * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
 * side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
 * onEnter = check if you can enter (true) or exit (false) a vehicle.
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param side
 * @param onEnter
 */
export declare function isEntryPointForSeatClear(ped: number, vehicle: number, seatIndex: number, side: boolean, onEnter: boolean): boolean;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function isExplosionActiveInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
/**
 * explosionType: See ADD_EXPLOSION, -1 for any explosion type
 *
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export declare function isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): boolean;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export declare function isExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): boolean;
/**
 * Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
 * @param vehicle
 * @param extraId
 */
export declare function isExtraBrokenOff(vehicle: number, extraId: number): boolean;
export declare function isFirstPersonAimCamActive(): boolean;
export declare function isFlashLightOn(ped: number): boolean;
export declare function isFloatingHelpTextOnScreen(hudIndex: number): boolean;
export declare function isFollowPedCamActive(): boolean;
export declare function isFollowVehicleCamActive(): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function isFrontendFading(): boolean;
export declare function isFrontendReadyForControl(): boolean;
/**
 * Hardcoded to return 1
 */
export declare function isGameInControlOfMusic(): boolean;
export declare function isGameplayCamLookingBehind(): boolean;
/**
 * Examples when this function will return 0 are:
 * - During busted screen.
 * - When player is coming out from a hospital.
 * - When player is coming out from a police station.
 * - When player is buying gun from AmmuNation.
 */
export declare function isGameplayCamRendering(): boolean;
export declare function isGameplayCamShaking(): boolean;
export declare function isGameplayHintActive(): boolean;
export declare function isGarageEmpty(garageHash: number, p1: boolean, p2: number): boolean;
export declare function isHandlerFrameLinedUpWithContainer(vehicle: number, entity: number): boolean;
export declare function isHeliLandingAreaBlocked(vehicle: number): boolean;
export declare function isHeliPartBroken(vehicle: number, p1: boolean, p2: boolean, p3: boolean): boolean;
export declare function isHelpMessageBeingDisplayed(): boolean;
export declare function isHelpMessageFadingOut(): boolean;
export declare function isHelpMessageOnScreen(): boolean;
/**
 * Checks whether the horn of a vehicle is currently played.
 * @param vehicle
 */
export declare function isHornActive(vehicle: number): boolean;
export declare function isHoveringOverMissionCreatorBlip(): boolean;
/**
 * Full list of components below
 *
 * HUD = 0;
 * HUD_WANTED_STARS = 1;
 * HUD_WEAPON_ICON = 2;
 * HUD_CASH = 3;
 * HUD_MP_CASH = 4;
 * HUD_MP_MESSAGE = 5;
 * HUD_VEHICLE_NAME = 6;
 * HUD_AREA_NAME = 7;
 * HUD_VEHICLE_CLASS = 8;
 * HUD_STREET_NAME = 9;
 * HUD_HELP_TEXT = 10;
 * HUD_FLOATING_HELP_TEXT_1 = 11;
 * HUD_FLOATING_HELP_TEXT_2 = 12;
 * HUD_CASH_CHANGE = 13;
 * HUD_RETICLE = 14;
 * HUD_SUBTITLE_TEXT = 15;
 * HUD_RADIO_STATIONS = 16;
 * HUD_SAVING_GAME = 17;
 * HUD_GAME_STREAM = 18;
 * HUD_WEAPON_WHEEL = 19;
 * HUD_WEAPON_WHEEL_STATS = 20;
 * MAX_HUD_COMPONENTS = 21;
 * MAX_HUD_WEAPONS = 22;
 * MAX_SCRIPTED_HUD_COMPONENTS = 141;
 * @param id
 */
export declare function isHudComponentActive(id: number): boolean;
export declare function isHudHidden(): boolean;
export declare function isHudPreferenceSwitchedOn(): boolean;
export declare function isImeInProgress(): boolean;
export declare function isInItemset(item: number, itemset: number): boolean;
export declare function isInVehicleMobilePhoneCameraRendering(): boolean;
/**
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * @param incidentId
 */
export declare function isIncidentValid(incidentId: number): boolean;
export declare function isInteriorCapped(interior: number): boolean;
export declare function isInteriorDisabled(interior: number): boolean;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
export declare function isInteriorEntitySetActive(interior: number, entitySetName: string): boolean;
export declare function isInteriorReady(interior: number): boolean;
export declare function isInteriorScene(): boolean;
export declare function isInterpolatingFromScriptCams(): boolean;
export declare function isInterpolatingToScriptCams(): boolean;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param iplName
 */
export declare function isIplActive(iplName: string): boolean;
export declare function isItemsetValid(itemset: number): boolean;
export declare function isJapaneseVersion(): boolean;
export declare function isLookInverted(): boolean;
export declare function isMemoryCardInUse(): boolean;
export declare function isMessageBeingDisplayed(): boolean;
export declare function isMinigameInProgress(): boolean;
export declare function isMinimapRendering(): boolean;
export declare function isMissionCompletePlaying(): boolean;
export declare function isMissionCompleteReadyForUi(): boolean;
export declare function isMissionCreatorBlip(blip: number): boolean;
export declare function isMissionNewsStoryUnlocked(newsStory: number): boolean;
export declare function isMissionTrain(train: number): boolean;
export declare function isMobileInterferenceActive(): boolean;
export declare function isMobilePhoneCallOngoing(): boolean;
export declare function isMobilePhoneRadioActive(): boolean;
export declare function isMobilePhoneToPedEar(ped: number): boolean;
export declare function isModelAPed(model: number): boolean;
/**
 * Returns whether the specified model represents a vehicle.
 * @param model
 */
export declare function isModelAVehicle(model: number): boolean;
/**
 * Check if model is in cdimage(rpf)
 * @param model
 */
export declare function isModelInCdimage(model: number): boolean;
/**
 * Returns whether the specified model exists in the game.
 * @param model
 */
export declare function isModelValid(model: number): boolean;
export declare function isMountedWeaponTaskUnderneathDrivingTask(ped: number): boolean;
/**
 * Used with IS_LOOK_INVERTED() and negates its affect.
 *
 * --
 *
 * Not sure how the person above got that description, but here's an actual example:
 *
 * if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {
 * if (a_5) {
 * if (PAD::IS_LOOK_INVERTED()) {
 * a_3 *= -1;
 * }
 * if (PAD::IS_MOUSE_LOOK_INVERTED()) {
 * a_3 *= -1;
 * }
 * }
 * }
 */
export declare function isMouseLookInverted(): boolean;
/**
 * Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
 */
export declare function isMouseRolledOverInstructionalButtons(): boolean;
export declare function isMoveBlendRatioRunning(ped: number): boolean;
export declare function isMoveBlendRatioSprinting(ped: number): boolean;
export declare function isMoveBlendRatioStill(ped: number): boolean;
export declare function isMoveBlendRatioWalking(ped: number): boolean;
export declare function isMpGamerTagActive(gamerTagId: number): boolean;
export declare function isMpGamerTagFree(gamerTagId: number): boolean;
export declare function isMpGamerTagMovieActive(): boolean;
/**
 * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
 */
export declare function isMpTextChatTyping(): boolean;
export declare function isMultiheadFadeUp(): boolean;
export declare function isMusicOneshotPlaying(): boolean;
export declare function isNamedRendertargetLinked(modelHash: number): boolean;
export declare function isNamedRendertargetRegistered(name: string): boolean;
export declare function isNavigatingMenuContent(): boolean;
/**
 * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
 *
 * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function isNavmeshRequiredRegionInUse(): boolean;
export declare function isNetworkIdOwnedByParticipant(netId: number): boolean;
export declare function isNetworkLoadingScene(): boolean;
export declare function isNetworkVehicleRunningRespotTimer(networkID: number): boolean;
export declare function isNewLoadSceneActive(): boolean;
export declare function isNewLoadSceneLoaded(): boolean;
export declare function isNextWeatherType(weatherType: string): boolean;
export declare function isObjectAPickup(object: number): boolean;
export declare function isObjectAPortablePickup(object: number): boolean;
/**
 * Despite the name, it does work for any entity type.
 * @param garageHash
 * @param entity
 * @param p2
 * @param p3
 */
export declare function isObjectEntirelyInsideGarage(garageHash: number, entity: number, p2: number, p3: number): boolean;
export declare function isObjectNearPoint(objectHash: number, x: number, y: number, z: number, range: number): boolean;
/**
 * Despite the name, it does work for any entity type.
 * @param garageHash
 * @param entity
 * @param p2
 */
export declare function isObjectPartiallyInsideGarage(garageHash: number, entity: number, p2: number): boolean;
export declare function isObjectVisible(object: number): boolean;
export declare function isObjectWithinBrainActivationRange(object: number): boolean;
/**
 * Returns the same as IS_SOCIAL_CLUB_ACTIVE
 */
export declare function isOnlinePoliciesMenuActive(): boolean;
/**
 * PS4
 */
export declare function isOrbisVersion(): boolean;
export declare function isPauseMenuActive(): boolean;
export declare function isPauseMenuRestarting(): boolean;
export declare function isPausemapInInteriorMode(): boolean;
export declare function isPcVersion(): boolean;
/**
 * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
 * @param ped
 */
export declare function isPedAPlayer(ped: number): boolean;
export declare function isPedActiveInScenario(ped: number): boolean;
export declare function isPedAimingFromCover(ped: number): boolean;
/**
 * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
 *
 * Type flag bit values:
 * 1 = Melee weapons
 * 2 = Explosive weapons
 * 4 = Any other weapons
 *
 * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
 * 7 returns true if you are equipped with any weapon except your fists.
 * 6 returns true if you are equipped with any weapon except melee weapons.
 * 5 returns true if you are equipped with any weapon except the Explosives weapon group.
 * 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
 * 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
 * 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
 * 1 returns true only if you are equipped with any Melee weapon.
 * 0 never returns true.
 *
 * Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
 * @param ped
 * @param typeFlags
 */
export declare function isPedArmed(ped: number, typeFlags: number): boolean;
/**
 * This function is hard-coded to always return 0.
 * @param ped
 */
export declare function isPedBeingArrested(ped: number): boolean;
export declare function isPedBeingJacked(ped: number): boolean;
export declare function isPedBeingStealthKilled(ped: number): boolean;
/**
 * p1 is always 0
 * @param ped
 * @param p1
 */
export declare function isPedBeingStunned(ped: number, p1: number): boolean;
export declare function isPedBlushFacepaintTintForBarber(colorId: number): boolean;
export declare function isPedBlushTintForBarber(colorID: number): boolean;
export declare function isPedBlushTintForCreator(colorId: number): boolean;
export declare function isPedClimbing(ped: number): boolean;
/**
 * Checks if the component variation is valid, this works great for randomizing components using loops.
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 *
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 */
export declare function isPedComponentVariationValid(ped: number, componentId: number, drawableId: number, textureId: number): boolean;
export declare function isPedCuffed(ped: number): boolean;
/**
 * This native returns a true or false value.
 *
 * Ped ped = The ped whose weapon you want to check.
 * @param ped
 */
export declare function isPedCurrentWeaponSilenced(ped: number): boolean;
/**
 * Seems to consistently return true if the ped is dead.
 *
 * p1 is always passed 1 in the scripts.
 *
 * I suggest to remove "OR_DYING" part, because it does not detect dying phase.
 *
 * That's what the devs call it, cry about it.
 *
 * lol
 * @param ped
 * @param p1
 */
export declare function isPedDeadOrDying(ped: number, p1: boolean): boolean;
export declare function isPedDefensiveAreaActive(ped: number, p1: boolean): boolean;
export declare function isPedDiving(ped: number): boolean;
export declare function isPedDoingABeastJump(p0: number): boolean;
export declare function isPedDoingDriveby(ped: number): boolean;
export declare function isPedDucking(ped: number): boolean;
/**
 * Presumably returns the Entity that the Ped is currently diving out of the way of.
 *
 * var num3;
 * if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
 * if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
 * @param ped
 * @param evadingEntity
 */
export declare function isPedEvasiveDiving(ped: number, evadingEntity: number): [boolean, number];
export declare function isPedExclusiveDriverOfVehicle(ped: number, vehicle: number, outIndex: number): [boolean, number];
/**
 * angle is ped's view cone
 * @param ped
 * @param otherPed
 * @param angle
 */
export declare function isPedFacingPed(ped: number, otherPed: number, angle: number): boolean;
export declare function isPedFalling(ped: number): boolean;
/**
 * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
 * If the handle is invalid, the function returns true.
 * @param ped
 */
export declare function isPedFatallyInjured(ped: number): boolean;
export declare function isPedFleeing(ped: number): boolean;
export declare function isPedGesturing(p0: number): boolean;
export declare function isPedGettingIntoAVehicle(ped: number): boolean;
export declare function isPedGettingUp(ped: number): boolean;
export declare function isPedGoingIntoCover(ped: number): boolean;
export declare function isPedGroupMember(ped: number, groupId: number): boolean;
export declare function isPedHairTintForBarber(colorID: number): boolean;
export declare function isPedHairTintForCreator(colorId: number): boolean;
export declare function isPedHangingOnToVehicle(ped: number): boolean;
export declare function isPedHeadingTowardsPosition(ped: number, x: number, y: number, z: number, p4: number): boolean;
export declare function isPedHeadtrackingEntity(ped: number, entity: number): boolean;
export declare function isPedHeadtrackingPed(ped1: number, ped2: number): boolean;
export declare function isPedHelmetVisorUp(ped: number): boolean;
/**
 * Returns true/false if the ped is/isn't humanoid.
 * @param ped
 */
export declare function isPedHuman(ped: number): boolean;
/**
 * Returns whether the specified ped is hurt.
 * @param ped
 */
export declare function isPedHurt(ped: number): boolean;
export declare function isPedInAnyBoat(ped: number): boolean;
export declare function isPedInAnyHeli(ped: number): boolean;
export declare function isPedInAnyPlane(ped: number): boolean;
export declare function isPedInAnyPoliceVehicle(ped: number): boolean;
export declare function isPedInAnySub(ped: number): boolean;
export declare function isPedInAnyTaxi(ped: number): boolean;
export declare function isPedInAnyTrain(ped: number): boolean;
/**
 * Gets a value indicating whether the specified ped is in any vehicle.
 *
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * @param ped
 * @param atGetIn
 */
export declare function isPedInAnyVehicle(ped: number, atGetIn: boolean): boolean;
/**
 * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
 *
 * p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4 -- [[14]] ], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
 * @param ped
 * @param target
 */
export declare function isPedInCombat(ped: number, target: number): boolean;
/**
 * p1 is nearly always 0 in the scripts.
 * @param ped
 * @param exceptUseWeapon
 */
export declare function isPedInCover(ped: number, exceptUseWeapon: boolean): boolean;
export declare function isPedInCoverFacingLeft(ped: number): boolean;
export declare function isPedInCurrentConversation(ped: number): boolean;
export declare function isPedInFlyingVehicle(ped: number): boolean;
export declare function isPedInGroup(ped: number): boolean;
export declare function isPedInHighCover(ped: number): boolean;
/**
 * Notes: The function only returns true while the ped is:
 * A.) Swinging a random melee attack (including pistol-whipping)
 *
 * B.) Reacting to being hit by a melee attack (including pistol-whipping)
 *
 * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
 *
 * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
 * @param ped
 */
export declare function isPedInMeleeCombat(ped: number): boolean;
export declare function isPedInModel(ped: number, modelHash: number): boolean;
export declare function isPedInParachuteFreeFall(ped: number): boolean;
/**
 * Gets a value indicating whether the specified ped is in the specified vehicle.
 *
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * @param ped
 * @param vehicle
 * @param atGetIn
 */
export declare function isPedInVehicle(ped: number, vehicle: number, atGetIn: boolean): boolean;
/**
 * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
 * Returns `true` if the ped is in writhe, `false` otherwise.
 * @param ped
 */
export declare function isPedInWrithe(ped: number): boolean;
/**
 * Gets a value indicating whether this ped's health is below its injured threshold.
 *
 * The default threshold is 100.
 * @param ped
 */
export declare function isPedInjured(ped: number): boolean;
export declare function isPedJacking(ped: number): boolean;
export declare function isPedJumping(ped: number): boolean;
export declare function isPedJumpingOutOfVehicle(ped: number): boolean;
export declare function isPedLanding(p0: number): boolean;
export declare function isPedLipstickTintForBarber(colorID: number): boolean;
export declare function isPedLipstickTintForCreator(colorId: number): boolean;
/**
 * Returns true/false if the ped is/isn't male.
 * @param ped
 */
export declare function isPedMale(ped: number): boolean;
export declare function isPedModel(ped: number, modelHash: number): boolean;
export declare function isPedOnAnyBike(ped: number): boolean;
export declare function isPedOnFoot(ped: number): boolean;
/**
 * Same function call as PED::GET_MOUNT, aka just returns 0
 * @param ped
 */
export declare function isPedOnMount(ped: number): boolean;
export declare function isPedOnSpecificVehicle(ped: number, vehicle: number): boolean;
/**
 * Gets a value indicating whether the specified ped is on top of any vehicle.
 *
 * Return 1 when ped is on vehicle.
 * Return 0 when ped is not on a vehicle.
 *
 * @param ped
 */
export declare function isPedOnVehicle(ped: number): boolean;
/**
 * Returns true if the ped is currently opening a door (CTaskOpenDoor).
 * @param ped
 */
export declare function isPedOpeningDoor(ped: number): boolean;
export declare function isPedPerformingACounterAttack(ped: number): boolean;
export declare function isPedPerformingMeleeAction(ped: number): boolean;
export declare function isPedPerformingStealthKill(ped: number): boolean;
export declare function isPedPlantingBomb(ped: number): boolean;
/**
 * Used only once (am_mp_property_int)
 *
 * ped was PLAYER_PED_ID()
 *
 * Related to CTaskAmbientClips.
 * @param ped
 */
export declare function isPedPlayingBaseClipInScenario(ped: number): boolean;
export declare function isPedProne(ped: number): boolean;
/**
 * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
 * @param ped
 */
export declare function isPedRagdoll(ped: number): boolean;
/**
 * Returns whether the specified ped is reloading.
 * @param ped
 */
export declare function isPedReloading(ped: number): boolean;
export declare function isPedRespondingToEvent(ped: number, event: number): boolean;
export declare function isPedRingtonePlaying(ped: number): boolean;
export declare function isPedRunning(ped: number): boolean;
export declare function isPedRunningArrestTask(ped: number): boolean;
export declare function isPedRunningMeleeTask(ped: number): boolean;
export declare function isPedRunningMobilePhoneTask(ped: number): boolean;
export declare function isPedRunningRagdollTask(ped: number): boolean;
export declare function isPedShaderReady(ped: number): boolean;
export declare function isPedSheltered(ped: number): boolean;
/**
 * Returns whether the specified ped is shooting.
 * @param ped
 */
export declare function isPedShooting(ped: number): boolean;
export declare function isPedShootingInArea(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean): boolean;
/**
 * Detect if ped is in any vehicle
 * [True/False]
 * @param ped
 */
export declare function isPedSittingInAnyVehicle(ped: number): boolean;
/**
 * Detect if ped is sitting in the specified vehicle
 * [True/False]
 * @param ped
 * @param vehicle
 */
export declare function isPedSittingInVehicle(ped: number, vehicle: number): boolean;
export declare function isPedSprinting(ped: number): boolean;
export declare function isPedStill(ped: number): boolean;
/**
 * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
 * @param ped
 */
export declare function isPedStopped(ped: number): boolean;
/**
 * What's strafing?
 * @param ped
 */
export declare function isPedStrafing(ped: number): boolean;
export declare function isPedSwimming(ped: number): boolean;
export declare function isPedSwimmingUnderWater(ped: number): boolean;
export declare function isPedSwitchingWeapon(Ped: number): boolean;
export declare function isPedTakingOffHelmet(ped: number): boolean;
export declare function isPedTracked(ped: number): boolean;
export declare function isPedTryingToEnterALockedVehicle(ped: number): boolean;
export declare function isPedUsingActionMode(ped: number): boolean;
export declare function isPedUsingAnyScenario(ped: number): boolean;
/**
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * @param ped
 * @param scenario
 */
export declare function isPedUsingScenario(ped: number, scenario: string): boolean;
export declare function isPedVaulting(ped: number): boolean;
export declare function isPedWalking(ped: number): boolean;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export declare function isPedWeaponComponentActive(ped: number, weaponHash: number, componentHash: number): boolean;
export declare function isPedWeaponReadyToShoot(ped: number): boolean;
/**
 * Returns true if the ped passed through the parenthesis is wearing a helmet.
 * @param ped
 */
export declare function isPedWearingHelmet(ped: number): boolean;
export declare function isPedheadshotImgUploadAvailable(): boolean;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export declare function isPedheadshotReady(id: number): boolean;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export declare function isPedheadshotValid(id: number): boolean;
export declare function isPickupWeaponObjectValid(object: number): boolean;
export declare function isPlaneLandingGearIntact(plane: number): boolean;
export declare function isPlaybackGoingOnForVehicle(vehicle: number): boolean;
export declare function isPlaybackUsingAiGoingOnForVehicle(vehicle: number): boolean;
/**
 * Returns true if an unk value is greater than 0.0f
 * @param player
 */
export declare function isPlayerBattleAware(player: number): boolean;
/**
 * Return true while player is being arrested / busted.
 *
 * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
 *
 * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
 * @param player
 * @param atArresting
 */
export declare function isPlayerBeingArrested(player: number, atArresting: boolean): boolean;
export declare function isPlayerBluetoothEnable(player: number): boolean;
/**
 * Returns TRUE if the player ('s ped) is climbing at the moment.
 * @param player
 */
export declare function isPlayerClimbing(player: number): boolean;
/**
 * Can the player control himself, used to disable controls for player for things like a cutscene.
 *
 * ---
 *
 * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
 * @param player
 */
export declare function isPlayerControlOn(player: number): boolean;
export declare function isPlayerDead(player: number): boolean;
export declare function isPlayerEntirelyInsideGarage(garageHash: number, player: number, p2: number, p3: number): boolean;
/**
 * Gets a value indicating whether the specified player is currently aiming freely.
 * @param player
 */
export declare function isPlayerFreeAiming(player: number): boolean;
/**
 * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
 * @param player
 * @param entity
 */
export declare function isPlayerFreeAimingAtEntity(player: number, entity: number): boolean;
export declare function isPlayerFreeForAmbientTask(player: number): boolean;
export declare function isPlayerInCutscene(player: number): boolean;
/**
 * this function is hard-coded to always return 0.
 */
export declare function isPlayerLoggingInNp(): boolean;
/**
 * Returns TRUE if the game is in online mode and FALSE if in offline mode.
 *
 * This is an alias for NETWORK_IS_SIGNED_ONLINE.
 */
export declare function isPlayerOnline(): boolean;
export declare function isPlayerPartiallyInsideGarage(garageHash: number, player: number, p2: number): boolean;
/**
 * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
 * @param player
 */
export declare function isPlayerPlaying(player: number): boolean;
export declare function isPlayerPressingHorn(player: number): boolean;
export declare function isPlayerReadyForCutscene(player: number): boolean;
/**
 * Returns true if the player is riding a train.
 * @param player
 */
export declare function isPlayerRidingTrain(player: number): boolean;
export declare function isPlayerScriptControlOn(player: number): boolean;
/**
 * Returns true if the player is currently switching, false otherwise.
 * (When the camera is in the sky moving from Trevor to Franklin for example)
 */
export declare function isPlayerSwitchInProgress(): boolean;
export declare function isPlayerTargettingAnything(player: number): boolean;
export declare function isPlayerTargettingEntity(player: number, entity: number): boolean;
export declare function isPlayerTeleportActive(): boolean;
export declare function isPlayerVehRadioEnable(): boolean;
export declare function isPlayerVehicleWeaponToggledToNonHoming(p0: number): boolean;
export declare function isPlayerWantedLevelGreater(player: number, wantedLevel: number): boolean;
export declare function isPlayingPhoneGestureAnim(ped: number): boolean;
export declare function isPlaylistOnChannel(tvChannel: number, p1: number): boolean;
/**
 * An angled area is an X-Z oriented rectangle with three parameters:
 * 1. origin: the mid-point along a base edge of the rectangle;
 * 2. extent: the mid-point of opposite base edge on the other Z;
 * 3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
 *
 * The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
 * 1. golf_mp https://i.imgur.com/JhsQAK9.png
 * 2. am_taxi https://i.imgur.com/TJWCZaT.jpg
 * @param xPos
 * @param yPos
 * @param zPos
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includeZ
 */
export declare function isPointInAngledArea(xPos: number, yPos: number, zPos: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean): boolean;
export declare function isPointObscuredByAMissionEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): boolean;
/**
 * Gets a value indicating whether the specified position is on a road.
 * The vehicle parameter is not implemented (ignored).
 * @param x
 * @param y
 * @param z
 * @param vehicle
 */
export declare function isPointOnRoad(x: number, y: number, z: number, vehicle: number): boolean;
export declare function isPopMultiplierAreaNetworked(id: number): boolean;
/**
 * `range`: The range, seems to not be very accurate during testing.
 * `p4`: Unknown, when set to true it seems to always return true no matter what I try.
 * `checkVehicle`: Check for any vehicles in that area.
 * `checkPeds`: Check for any peds in that area.
 * `ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
 * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
 *
 * Returns true if there is anything in that location matching the provided parameters.
 * @param x
 * @param y
 * @param z
 * @param range
 * @param p4
 * @param checkVehicles
 * @param checkPeds
 * @param p7
 * @param p8
 * @param ignoreEntity
 * @param p10
 */
export declare function isPositionOccupied(x: number, y: number, z: number, range: number, p4: boolean, checkVehicles: boolean, checkPeds: boolean, p7: boolean, p8: boolean, ignoreEntity: number, p10: boolean): boolean;
export declare function isPrevWeatherType(weatherType: string): boolean;
/**
 * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
 *
 * - Nacorpio
 *
 *
 * ownedByPlayer = only projectiles fired by the player will be detected.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param ownedByPlayer
 */
export declare function isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean;
/**
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 * @param ownedByPlayer
 */
export declare function isProjectileTypeInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: number, ownedByPlayer: boolean): boolean;
/**
 * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param type
 * @param ownedByPlayer
 */
export declare function isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, type: number, ownedByPlayer: boolean): boolean;
export declare function isProjectileTypeWithinDistance(x: number, y: number, z: number, projectileHash: number, radius: number, ownedByPlayer: boolean): boolean;
export declare function isPropLightOverriden(object: number): boolean;
/**
 * PS5 (Prospero) version...
 */
export declare function isProsperoVersion(): boolean;
export declare function isPs3Version(): boolean;
export declare function isRadarHidden(): boolean;
export declare function isRadarPreferenceSwitchedOn(): boolean;
export declare function isRadioFadedOut(): boolean;
export declare function isRadioRetuning(): boolean;
export declare function isRadioStationFavourited(radioStation: string): boolean;
export declare function isRemotePlayerInNonClonedVehicle(player: number): boolean;
export declare function isReplayAvailable(): boolean;
export declare function isReplayInitialized(): boolean;
export declare function isReplayRecordSpaceAvailable(p0: boolean): boolean;
/**
 * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
 *
 * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
 * retn
 */
export declare function isReplayRecording(): boolean;
export declare function isReportugcMenuOpen(): boolean;
export declare function isRocketBoostActive(vehicle: number): boolean;
export declare function isRopeAttachedAtBothEnds(ropeId: number): [boolean, number];
export declare function isSafeToStartPlayerSwitch(): boolean;
/**
 * val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
 * @param val
 */
export declare function isScaleformMovieDeleting(val: number): boolean;
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
 * @param methodReturn
 */
export declare function isScaleformMovieMethodReturnValueReady(methodReturn: number): boolean;
/**
 * Xbox Series (Scarlett) version...
 */
export declare function isScarlettVersion(): boolean;
export declare function isScePlatform(): boolean;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts:
 *
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "BLIMP",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "KORTZ_SECURITY",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5",
 * "Rampage1",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE"
 *
 * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 * @param scenarioGroup
 */
export declare function isScenarioGroupEnabled(scenarioGroup: string): boolean;
export declare function isScenarioOccupied(x: number, y: number, z: number, maxRange: number, onlyUsersActuallyAtScenario: boolean): boolean;
/**
 * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * Occurrences in the b617d scripts:
 * "PROP_HUMAN_SEAT_CHAIR",
 * "WORLD_HUMAN_DRINKING",
 * "WORLD_HUMAN_HANG_OUT_STREET",
 * "WORLD_HUMAN_SMOKING",
 * "WORLD_MOUNTAIN_LION_WANDER",
 * "WORLD_HUMAN_DRINKING"
 *
 * Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.
 *
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 *
 * @param scenarioType
 */
export declare function isScenarioTypeEnabled(scenarioType: string): boolean;
export declare function isScreenFadedIn(): boolean;
export declare function isScreenFadedOut(): boolean;
export declare function isScreenFadingIn(): boolean;
export declare function isScreenFadingOut(): boolean;
/**
 * Returns whether screen transition to blur/from blur is running.
 */
export declare function isScreenblurFadeRunning(): boolean;
/**
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 */
export declare function isScriptGlobalShaking(): boolean;
export declare function isScriptedConversationLoaded(): boolean;
export declare function isScriptedConversationOngoing(): boolean;
export declare function isScriptedHudComponentActive(id: number): boolean;
export declare function isScriptedHudComponentHiddenThisFrame(id: number): boolean;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param anim
 */
export declare function isScriptedScenarioPedUsingConditionalAnim(ped: number, animDict: string, anim: string): boolean;
export declare function isScriptedSpeechPlaying(p0: number): boolean;
export declare function isSeatWarpOnly(vehicle: number, seatIndex: number): boolean;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export declare function isShockingEventInSphere(eventType: number, x: number, y: number, z: number, radius: number): boolean;
/**
 * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function isSniperInverted(): boolean;
export declare function isSocialClubActive(): boolean;
export declare function isSpecialAbilityActive(player: number, p1: number): boolean;
export declare function isSpecialAbilityEnabled(player: number, p1: number): boolean;
export declare function isSpecialAbilityMeterFull(player: number, p1: number): boolean;
export declare function isSpecialAbilityUnlocked(playerModel: number): boolean;
export declare function isSphereVisible(x: number, y: number, z: number, radius: number): boolean;
export declare function isSphereVisibleToAnotherMachine(p0: number, p1: number, p2: number, p3: number): boolean;
export declare function isSphereVisibleToPlayer(p0: number, p1: number, p2: number, p3: number, p4: number): boolean;
/**
 * Returns true when the srl from BEGIN_SRL is loaded.
 */
export declare function isSrlLoaded(): boolean;
export declare function isSteamVersion(): boolean;
export declare function isStoreAvailableToUser(): boolean;
export declare function isStorePendingNetworkShutdownToOpen(): boolean;
export declare function isStreamPlaying(): boolean;
export declare function isStreamingAdditionalText(p0: number): boolean;
export declare function isStreamvolActive(): boolean;
export declare function isStringNull(string: string): boolean;
export declare function isStringNullOrEmpty(string: string): boolean;
export declare function isStuntJumpInProgress(): boolean;
export declare function isStuntJumpMessageShowing(): boolean;
export declare function isSubtitlePreferenceSwitchedOn(): boolean;
export declare function isSwitchReadyForDescent(): boolean;
export declare function isSwitchSkippingDescent(): boolean;
export declare function isSwitchToMultiFirstpartFinished(): boolean;
export declare function isSynchronizedSceneHoldLastFrame(sceneID: number): boolean;
export declare function isSynchronizedSceneLooped(sceneID: number): boolean;
/**
 * Returns true if a synchronized scene is running
 * @param sceneId
 */
export declare function isSynchronizedSceneRunning(sceneId: number): boolean;
export declare function isSystemUiBeingDisplayed(): boolean;
export declare function isTargetPedInPerceptionArea(ped: number, targetPed: number, p2: number, p3: number, p4: number, p5: number): boolean;
export declare function isTaskMoveNetworkActive(ped: number): boolean;
export declare function isTaskMoveNetworkReadyForTransition(ped: number): boolean;
export declare function isTaxiLightOn(vehicle: number): boolean;
export declare function isTennisMode(ped: number): boolean;
export declare function isThisAMinigameScript(): boolean;
export declare function isThisModelABicycle(model: number): boolean;
export declare function isThisModelABike(model: number): boolean;
export declare function isThisModelABoat(model: number): boolean;
/**
 * To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
 * @param model
 */
export declare function isThisModelACar(model: number): boolean;
export declare function isThisModelAHeli(model: number): boolean;
/**
 * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
 * @param model
 */
export declare function isThisModelAJetski(model: number): boolean;
export declare function isThisModelAPlane(model: number): boolean;
export declare function isThisModelAQuadbike(model: number): boolean;
export declare function isThisModelATrain(model: number): boolean;
export declare function isThisModelAnAmphibiousCar(model: number): boolean;
export declare function isThisModelAnAmphibiousQuadbike(model: number): boolean;
export declare function isThreadActive(threadId: number): boolean;
/**
 * Returns true if the two times are equal; otherwise returns false.
 * @param timeA
 * @param timeB
 */
export declare function isTimeEqualTo(timeA: number, timeB: number): boolean;
/**
 * Subtracts the second argument from the first, then returns whether the result is negative.
 * @param timeA
 * @param timeB
 */
export declare function isTimeLessThan(timeA: number, timeB: number): boolean;
/**
 * Subtracts the first argument from the second, then returns whether the result is negative.
 * @param timeA
 * @param timeB
 */
export declare function isTimeMoreThan(timeA: number, timeB: number): boolean;
export declare function isToggleModOn(vehicle: number, modType: number): boolean;
/**
 * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
 *
 *
 * Target needs to be tracked.. won't work otherwise.
 * @param ped
 */
export declare function isTrackedPedVisible(ped: number): boolean;
export declare function isTrackedPointVisible(point: number): boolean;
export declare function isTurretSeat(vehicle: number, seatIndex: number): boolean;
export declare function isTvshowCurrentlyPlaying(videoCliphash: number): boolean;
export declare function isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId: number): boolean;
export declare function isUserOldEnoughToAccessStore(): boolean;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function isUsingCursor(control: number): boolean;
/**
 * control: unused parameter
 * @param control
 */
export declare function isUsingKeyboardAndMouse(control: number): boolean;
export declare function isUsingPedScubaGearVariation(p0: number): boolean;
/**
 * control: see IS_CONTROL_ENABLED
 *
 * Hardcoded to return false.
 * @param control
 */
export declare function isUsingRemotePlay(control: number): boolean;
export declare function isValidInterior(interior: number): boolean;
/**
 * Returns true if the vehicle has a convertible roof.
 *
 * p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
 * @param vehicle
 * @param p1
 */
export declare function isVehicleAConvertible(vehicle: number, p1: boolean): boolean;
export declare function isVehicleAlarmActivated(vehicle: number): boolean;
export declare function isVehicleAttachedToCargobob(cargobob: number, vehicleAttached: number): boolean;
/**
 * Scripts verify that towTruck is the first parameter, not the second.
 * @param towTruck
 * @param vehicle
 */
export declare function isVehicleAttachedToTowTruck(towTruck: number, vehicle: number): boolean;
export declare function isVehicleAttachedToTrailer(vehicle: number): boolean;
export declare function isVehicleAudiblyDamaged(vehicle: number): boolean;
/**
 * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
 * @param vehicle
 */
export declare function isVehicleBeingBroughtToHalt(vehicle: number): boolean;
export declare function isVehicleBumperBouncing(vehicle: number, frontBumper: boolean): boolean;
export declare function isVehicleBumperBrokenOff(vehicle: number, frontBumper: boolean): boolean;
/**
 * doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
 * @param veh
 * @param doorID
 */
export declare function isVehicleDoorDamaged(veh: number, doorID: number): boolean;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export declare function isVehicleDoorFullyOpen(vehicle: number, doorId: number): boolean;
/**
 * p1 is always 0 in the scripts.
 *
 * p1 = check if vehicle is on fire
 * @param vehicle
 * @param isOnFireCheck
 */
export declare function isVehicleDriveable(vehicle: number, isOnFireCheck: boolean): boolean;
export declare function isVehicleExtraTurnedOn(vehicle: number, extraId: number): boolean;
export declare function isVehicleHighDetail(vehicle: number): boolean;
/**
 * Returns whether the specified vehicle is currently in a burnout.
 *
 *
 * vb.net
 * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
 * End Function
 * @param vehicle
 */
export declare function isVehicleInBurnout(vehicle: number): boolean;
/**
 * garageName example "Michael - Beverly Hills"
 *
 * Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
 * @param garageName
 * @param vehicle
 */
export declare function isVehicleInGarageArea(garageName: string, vehicle: number): boolean;
export declare function isVehicleInSubmarineMode(vehicle: number): boolean;
/**
 * Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export declare function isVehicleModGen9Exclusive(vehicle: number, modType: number, modIndex: number): boolean;
export declare function isVehicleModel(vehicle: number, model: number): boolean;
/**
 * Returns true if the id is non zero.
 * @param vehicleNodeId
 */
export declare function isVehicleNodeIdValid(vehicleNodeId: number): boolean;
/**
 * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
 * End Function
 *
 * @param vehicle
 */
export declare function isVehicleOnAllWheels(vehicle: number): boolean;
export declare function isVehicleParachuteDeployed(vehicle: number): boolean;
/**
 * Returns true if the vehicle is being slipstreamed by another vehicle
 * @param vehicle
 */
export declare function isVehicleProducingSlipStream(vehicle: number): boolean;
export declare function isVehicleRadioOn(vehicle: number): boolean;
/**
 * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
 *
 * @Author Nac
 * @param vehicle
 */
export declare function isVehicleSearchlightOn(vehicle: number): boolean;
/**
 * Check if a vehicle seat is free.
 *
 * seatIndex  = -1 being the driver seat.
 * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
 * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
 * @param vehicle
 * @param seatIndex
 * @param isTaskRunning
 */
export declare function isVehicleSeatFree(vehicle: number, seatIndex: number, isTaskRunning: boolean): boolean;
export declare function isVehicleSirenAudioOn(vehicle: number): boolean;
export declare function isVehicleSirenOn(vehicle: number): boolean;
/**
 * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
 * @param vehicle
 */
export declare function isVehicleSprayable(vehicle: number): boolean;
/**
 * Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
 * @param vehicle
 */
export declare function isVehicleStolen(vehicle: number): boolean;
/**
 * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
 *
 * For some vehicles it returns true if the current speed is <= 0.00039999999.
 * @param vehicle
 */
export declare function isVehicleStopped(vehicle: number): boolean;
export declare function isVehicleStoppedAtTrafficLights(vehicle: number): boolean;
export declare function isVehicleStuckOnRoof(vehicle: number): boolean;
/**
 * p1 can be anywhere from 0 to 3 in the scripts.
 * p2 being how long in milliseconds the vehicle has been stuck
 * @param vehicle
 * @param p1
 * @param ms
 */
export declare function isVehicleStuckTimerUp(vehicle: number, p1: number, ms: number): boolean;
/**
 * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
 * completely - is to check if tire completely gone from rim.
 *
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param wheelID
 * @param completely
 */
export declare function isVehicleTyreBurst(vehicle: number, wheelID: number, completely: boolean): boolean;
/**
 * must be called after TRACK_VEHICLE_VISIBILITY
 *
 * it's not instant so probabilly must pass an 'update' to see correct result.
 * @param vehicle
 */
export declare function isVehicleVisible(vehicle: number): boolean;
/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
export declare function isVehicleWeaponDisabled(weaponHash: number, vehicle: number, owner: number): boolean;
/**
 * This will return false if the window is broken, or rolled down.
 * Window indexes:
 * 0 = Front Right Window
 * 1 = Front Left Window
 * 2 = Back Right Window
 * 3 = Back Left Window
 *
 *
 * Those numbers go on for vehicles that have more than 4 doors with windows.
 * @param vehicle
 * @param windowIndex
 */
export declare function isVehicleWindowIntact(vehicle: number, windowIndex: number): boolean;
export declare function isWantedAndHasBeenSeenByCops(player: number): boolean;
export declare function isWarningMessageActive(): boolean;
export declare function isWarningMessageReadyForControl(): boolean;
export declare function isWaypointActive(): boolean;
export declare function isWaypointPlaybackGoingOnForPed(ped: number): boolean;
export declare function isWaypointPlaybackGoingOnForVehicle(vehicle: number): boolean;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export declare function isWeaponValid(weaponHash: number): boolean;
/**
 * Gets whether the world point the calling script is registered to is within desired range of the player.
 */
export declare function isWorldPointWithinBrainActivationRange(): boolean;
export declare function isXbox360Version(): boolean;
export declare function isXboxPlatform(): boolean;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export declare function knockOffPedProp(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean): void;
export declare function knockPedOffVehicle(ped: number): void;
/**
 * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
 */
export declare function landingScreenStartedEndUserBenchmark(): boolean;
export declare function leaderboards2ReadByHandle(): [boolean, number, number];
export declare function leaderboards2ReadByPlaform(gamerHandleCsv: string, platformName: string): [boolean, number];
export declare function leaderboards2ReadByRadius(p1: number): [boolean, number, number];
export declare function leaderboards2ReadByRank(p1: number, p2: number): [boolean, number];
export declare function leaderboards2ReadByRow(p2: number, p4: number, p6: number): [boolean, number, number, number, number];
export declare function leaderboards2ReadByScoreFloat(p1: number, p2: number): [boolean, number];
export declare function leaderboards2ReadByScoreInt(p1: number, p2: number): [boolean, number];
export declare function leaderboards2ReadFriendsByRow(p2: number, p3: boolean, p4: number, p5: number): [boolean, number, number];
export declare function leaderboards2ReadGetRowDataEnd(): void;
export declare function leaderboards2ReadGetRowDataFloat(p0: number, p1: number): number;
export declare function leaderboards2ReadGetRowDataInfo(p0: number, p1: number): [boolean, number];
export declare function leaderboards2ReadGetRowDataInt(p0: number, p1: number): number;
export declare function leaderboards2ReadGetRowDataStart(p0: number): [boolean, number];
export declare function leaderboards2ReadRankPrediction(): [boolean, number, number, number];
export declare function leaderboards2WriteData(p0: number): [boolean, number];
export declare function leaderboards2WriteDataForEventType(): [boolean, number, number];
export declare function leaderboardsCacheDataRow(p0: number): [boolean, number];
export declare function leaderboardsClearCacheData(): void;
export declare function leaderboardsClearCacheDataId(p0: number): void;
export declare function leaderboardsGetCacheDataRow(p0: number, p1: number, p2: number): [boolean, number];
export declare function leaderboardsGetCacheExists(p0: number): boolean;
export declare function leaderboardsGetCacheNumberOfRows(p0: number): number;
export declare function leaderboardsGetCacheTime(p0: number): number;
export declare function leaderboardsGetColumnId(p0: number, p1: number, p2: number): number;
export declare function leaderboardsGetColumnType(p0: number, p1: number, p2: number): number;
export declare function leaderboardsGetNumberOfColumns(p0: number, p1: number): number;
export declare function leaderboardsReadAnyPending(): boolean;
export declare function leaderboardsReadClear(p0: number, p1: number, p2: number): number;
export declare function leaderboardsReadClearAll(): number;
export declare function leaderboardsReadPending(p0: number, p1: number, p2: number): boolean;
export declare function leaderboardsReadSuccessful(p0: number, p1: number, p2: number): boolean;
export declare function leaderboardsWriteAddColumn(p0: number, p1: number, p2: number): void;
export declare function leaderboardsWriteAddColumnLong(p0: number, p1: number, p2: number): void;
export declare function linkNamedRendertarget(modelHash: number): void;
/**
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param entity
 */
export declare function linkStaticEmitterToEntity(emitterName: string, entity: number): void;
export declare function loadAllObjectsNow(): void;
export declare function loadAllPathNodes(set: boolean): boolean;
/**
 * The following cloudhats are useable:
 * altostratus
 * Cirrus
 * cirrocumulus
 * Clear 01
 * Cloudy 01
 * Contrails
 * Horizon
 * horizonband1
 * horizonband2
 * horizonband3
 * horsey
 * Nimbus
 * Puffs
 * RAIN
 * Snowy 01
 * Stormy 01
 * stratoscumulus
 * Stripey
 * shower
 * Wispy
 *
 * @param name
 * @param transitionTime
 */
export declare function loadCloudHat(name: string, transitionTime: number): void;
/**
 * 0 - default
 * 1 - HeistIsland
 * @param waterType
 */
export declare function loadGlobalWaterFile(waterType: number): void;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
export declare function loadHighQualityPhoto(p0: number): boolean;
export declare function loadMissionCreatorPhoto(p1: number, p2: number, p3: number): [boolean, number];
export declare function loadMovieMeshSet(movieMeshSetName: string): number;
/**
 * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
 * @param ropeId
 * @param rope_preset
 */
export declare function loadRopeData(ropeId: number, rope_preset: string): void;
export declare function loadScene(x: number, y: number, z: number): void;
/**
 * Example:
 * AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
 *
 * All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
 *
 * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
 *
 * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param streamName
 * @param soundSet
 */
export declare function loadStream(streamName: string, soundSet: string): boolean;
/**
 * Example:
 * AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
 *
 * Only called a few times in the scripts.
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param streamName
 * @param startOffset
 * @param soundSet
 */
export declare function loadStreamWithStartOffset(streamName: string, startOffset: number, soundSet: string): boolean;
export declare function lobbyAutoMultiplayerEvent(): boolean;
export declare function lobbyAutoMultiplayerFreemode(): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function lobbyAutoMultiplayerMenu(): boolean;
export declare function lobbyAutoMultiplayerRandomJob(): boolean;
export declare function lobbySetAutoMpRandomJob(toggle: boolean): void;
export declare function lobbySetAutoMultiplayer(toggle: boolean): void;
export declare function lobbySetAutoMultiplayerEvent(toggle: boolean): void;
/**
 * Possible return values: 0, 1, 2
 */
export declare function localizationGetSystemDateType(): number;
/**
 * Same return values as GET_CURRENT_LANGUAGE
 */
export declare function localizationGetSystemLanguage(): number;
export declare function lockDoorsWhenNoLongerNeeded(vehicle: number): void;
/**
 * Locks the minimap to the specified angle in integer degrees.
 *
 * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
 * @param angle
 */
export declare function lockMinimapAngle(angle: number): void;
/**
 * Locks the minimap to the specified world position.
 * @param x
 * @param y
 */
export declare function lockMinimapPosition(x: number, y: number): void;
/**
 * Disables the radio station (hides it from the radio wheel).
 * @param radioStationName
 * @param toggle
 */
export declare function lockRadioStation(radioStationName: string, toggle: boolean): void;
export declare function lockRadioStationTrackList(radioStation: string, trackListName: string): void;
export declare function log10(value: number): number;
export declare function lowerConvertibleRoof(vehicle: number, instantlyLower: boolean): void;
export declare function lowerForkliftForks(forklift: number): void;
/**
 * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
 * @param ped
 */
export declare function makePedReload(ped: number): boolean;
export declare function markPedDecorationsAsClonedFromLocalPlayer(ped: number, p1: boolean): void;
export declare function modifyVehicleTopSpeed(vehicle: number, value: number): void;
/**
 * Sets the water height for a given position and radius.
 *
 * @param x
 * @param y
 * @param radius
 * @param height
 */
export declare function modifyWater(x: number, y: number, radius: number, height: number): void;
export declare function moveVehicleDecals(p0: number, p1: number): void;
/**
 * Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
 * @param toggle
 */
export declare function mpTextChatDisable(toggle: boolean): void;
export declare function mpTextChatIsTeamJob(p0: number): void;
export declare function netGameserverBasketAddItem(quantity: number): [boolean, number];
export declare function netGameserverBasketApplyServerData(p0: number, p1: number): [boolean, number];
export declare function netGameserverBasketEnd(): boolean;
export declare function netGameserverBasketIsActive(): boolean;
export declare function netGameserverBasketIsFull(): boolean;
export declare function netGameserverBasketStart(categoryHash: number, actionHash: number, flags: number): [boolean, number];
export declare function netGameserverBeginService(categoryHash: number, itemHash: number, actionTypeHash: number, value: number, flags: number): [boolean, number];
export declare function netGameserverCatalogIsValid(): boolean;
export declare function netGameserverCatalogItemIsValid(name: string): boolean;
export declare function netGameserverCatalogItemKeyIsValid(hash: number): boolean;
export declare function netGameserverCheckoutStart(transactionId: number): boolean;
export declare function netGameserverClearSession(p0: number): boolean;
export declare function netGameserverDeleteCharacter(slot: number, transfer: boolean, reason: number): boolean;
export declare function netGameserverDeleteCharacterGetStatus(): number;
export declare function netGameserverDeleteSetTelemetryNonceSeed(): boolean;
export declare function netGameserverEndService(transactionId: number): boolean;
export declare function netGameserverGetCatalogCloudCrc(): number;
/**
 * bool is always true in game scripts
 * @param itemHash
 * @param categoryHash
 * @param p2
 */
export declare function netGameserverGetPrice(itemHash: number, categoryHash: number, p2: boolean): number;
export declare function netGameserverGetSessionStateAndStatus(): [boolean, number, boolean];
export declare function netGameserverInitSession(): boolean;
export declare function netGameserverIsCatalogCurrent(): boolean;
export declare function netGameserverIsSessionRefreshPending(): boolean;
export declare function netGameserverIsSessionValid(charSlot: number): boolean;
export declare function netGameserverRefreshServerCatalog(): boolean;
export declare function netGameserverRetrieveCatalogRefreshStatus(state: number): [boolean, number];
export declare function netGameserverRetrieveInitSessionStatus(p0: number): [boolean, number];
export declare function netGameserverRetrieveSessionErrorCode(p0: number): [boolean, number];
export declare function netGameserverRetrieveStartSessionStatus(p0: number): [boolean, number];
export declare function netGameserverSessionApplyReceivedData(charSlot: number): boolean;
export declare function netGameserverSetTelemetryNonceSeed(p0: number): boolean;
export declare function netGameserverStartSession(charSlot: number): boolean;
export declare function netGameserverStartSessionPending(): boolean;
/**
 * Note: only one of the arguments can be set to true at a time
 * @param inventory
 * @param playerbalance
 */
export declare function netGameserverStartSessionRestart(inventory: boolean, playerbalance: boolean): boolean;
export declare function netGameserverTransactionInProgress(): boolean;
export declare function netGameserverTransferBankToWallet(charSlot: number, amount: number): boolean;
/**
 * Same as 0x350AA5EBC03D3BD2
 */
export declare function netGameserverTransferBankToWalletGetStatus(): number;
/**
 * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
 */
export declare function netGameserverTransferCashSetTelemetryNonceSeed(): boolean;
export declare function netGameserverTransferWalletToBank(charSlot: number, amount: number): boolean;
/**
 * Same as 0x23789E777D14CE44
 */
export declare function netGameserverTransferWalletToBankGetStatus(): number;
export declare function netGameserverUseServerTransactions(): boolean;
/**
 * gets the entity id of a network id
 * @param netHandle
 */
export declare function netToEnt(netHandle: number): number;
/**
 * gets the object id of a network id
 * @param netHandle
 */
export declare function netToObj(netHandle: number): number;
/**
 * gets the ped id of a network id
 * @param netHandle
 */
export declare function netToPed(netHandle: number): number;
export declare function netToVeh(netHandle: number): number;
export declare function networkAcceptPresenceInvite(p0: number): boolean;
export declare function networkAccessTunableBool(tunableContext: string, tunableName: string): boolean;
export declare function networkAccessTunableBoolHash(tunableContext: number, tunableName: number): boolean;
export declare function networkAccessTunableBoolModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value: boolean): [boolean, boolean];
export declare function networkAccessTunableFloat(tunableContext: string, tunableName: string, value: number): [boolean, number];
export declare function networkAccessTunableFloatHash(tunableContext: number, tunableName: number, value: number): [boolean, number];
export declare function networkAccessTunableFloatModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value: number): [boolean, number];
export declare function networkAccessTunableInt(tunableContext: string, tunableName: string, value: number): [boolean, number];
export declare function networkAccessTunableIntHash(tunableContext: number, tunableName: number, value: number): [boolean, number];
export declare function networkAccessTunableIntModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value: number): [boolean, number];
export declare function networkAccessTunableModificationDetectionClear(): boolean;
export declare function networkActionFollowInvite(): boolean;
export declare function networkAddClientEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number;
export declare function networkAddClientEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
/**
 * To remove, see: NETWORK_REMOVE_ENTITY_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export declare function networkAddEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number;
export declare function networkAddEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function networkAddEntityToSynchronisedScene(entity: number, netScene: number, animDict: string, animName: string, speed: number, speedMulitiplier: number, flag: number): void;
/**
 * ..
 * @param p0
 * @param p1
 */
export declare function networkAddFollowers(p1: number): number;
export declare function networkAddFriend(message: string): [boolean, number];
export declare function networkAddInvalidObjectModel(modelHash: number): void;
/**
 * Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
 * In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
 * @param netScene
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param flags
 */
export declare function networkAddMapEntityToSynchronisedScene(netScene: number, modelHash: number, x: number, y: number, z: number, p5: number, p6: string, p7: number, p8: number, flags: number): void;
export declare function networkAddPedToSynchronisedScene(ped: number, netScene: number, animDict: string, animnName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: number): void;
export declare function networkAddPedToSynchronisedSceneWithIk(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
export declare function networkAddSynchronisedSceneCamera(netScene: number, animDict: string, animName: string): void;
export declare function networkAllowCloningWhileInTutorial(p0: number, p1: number): void;
/**
 * teamId must be < 3, instanceId must be < 64
 * @param teamId
 * @param instanceId
 */
export declare function networkAllowGangToJoinTutorialSession(teamId: number, instanceId: number): void;
export declare function networkAllowInviteProcessInPlayerSwitch(p0: boolean): void;
export declare function networkAllowRemoteAttachmentModification(entity: number, toggle: boolean): void;
export declare function networkAllowRemoteSyncedSceneLocalPlayerRequests(p0: number): void;
export declare function networkAmIBlockedByGamer(gamerHandle: number): [boolean, number];
export declare function networkAmIBlockedByPlayer(player: number): boolean;
export declare function networkAmIMutedByGamer(gamerHandle: number): [boolean, number];
export declare function networkAmIMutedByPlayer(player: number): boolean;
export declare function networkApplyCachedPlayerHeadBlendData(ped: number, player: number): boolean;
export declare function networkApplyPedScarData(ped: number, p1: number): void;
export declare function networkApplyTransitionParameter(p0: number, p1: number): void;
export declare function networkApplyTransitionParameterString(p0: number, string: string, p2: boolean): void;
export declare function networkApplyVoiceProximityOverride(x: number, y: number, z: number): void;
export declare function networkAreHandlesTheSame(): [boolean, number, number];
export declare function networkArePlayersInSameTutorialSession(player: number, index: number): boolean;
export declare function networkAreSocialClubPoliciesCurrent(): boolean;
export declare function networkAreTransitionDetailsValid(p0: number): boolean;
export declare function networkAttachSynchronisedSceneToEntity(netScene: number, entity: number, bone: number): void;
export declare function networkBail(p0: number, p1: number, p2: number): void;
export declare function networkBailTransition(p0: number, p1: number, p2: number): void;
export declare function networkBlockInvites(toggle: boolean): void;
export declare function networkBlockJoinQueueInvites(toggle: boolean): void;
export declare function networkBlockProxyMigrationBetweenTutorialSessions(p0: number): void;
/**
 * p1 = 0 (always)
 * p2 = 1 (always)
 * @param cost
 * @param p1
 * @param p2
 * @param p3
 */
export declare function networkBuyAirstrike(cost: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkBuyBackupGang(p0: number, p1: number, p2: boolean, p3: boolean, npcProvider: number): void;
/**
 * p1 is just an assumption. p2 was false and p3 was true.
 * @param amount
 * @param victim
 * @param p2
 * @param p3
 * @param p4
 */
export declare function networkBuyBounty(amount: number, victim: number, p2: boolean, p3: boolean, p4: number): void;
export declare function networkBuyContrabandMission(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void;
/**
 * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
 *
 * The last 3 parameters are,
 * 2,0,1 in the am_ferriswheel.c
 * 1,0,1 in the am_rollercoaster.c
 *
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export declare function networkBuyFairgroundRide(amount: number, p1: number, p2: boolean, p3: boolean, p4: number): void;
export declare function networkBuyHealthcare(cost: number, p1: boolean, p2: boolean): void;
/**
 * p1 = 0 (always)
 * p2 = 1 (always)
 * @param cost
 * @param p1
 * @param p2
 * @param p3
 */
export declare function networkBuyHeliStrike(cost: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkBuyItem(amount: number, item: number, p2: number, p3: number, p4: boolean, item_name: string, p6: number, p7: number, p8: number, p9: boolean): void;
export declare function networkBuyProperty(cost: number, propertyName: number, p2: boolean, p3: boolean): void;
export declare function networkBuySmokes(p0: number, p1: boolean, p2: boolean): void;
export declare function networkCacheLocalPlayerHeadBlendData(): void;
/**
 * 11 - Need to download tunables.
 * 12 - Need to download background script.
 *
 * Returns 1 if the multiplayer is loaded, otherwhise 0.
 * @param loadingState
 */
export declare function networkCanAccessMultiplayer(loadingState: number): [boolean, number];
export declare function networkCanBail(): boolean;
export declare function networkCanBet(amount: number): boolean;
export declare function networkCanCommunicateWithGamer(gamerHandle: number): [boolean, number];
export declare function networkCanEnterMultiplayer(): boolean;
export declare function networkCanGamerPlayMultiplayerWithMe(gamerHandle: number): [boolean, number];
export declare function networkCanPlayMultiplayerWithGamer(gamerHandle: number): [boolean, number];
export declare function networkCanQueueForPreviousSessionJoin(): boolean;
export declare function networkCanReceiveLocalInvite(gamerHandle: number): [boolean, number];
export declare function networkCanReceivePlayerCash(p0: number, p1: number, p2: number, p3: number): boolean;
export declare function networkCanSendLocalInvite(gamerHandle: number): [boolean, number];
export declare function networkCanSessionEnd(): boolean;
export declare function networkCanSetWaypoint(): boolean;
export declare function networkCanShareJobCash(): boolean;
export declare function networkCanSpendMoney(p0: number, p1: boolean, p2: boolean, p3: boolean, p4: number, p5: number): boolean;
export declare function networkCanSpendMoney2(p0: number, p1: boolean, p2: boolean, p3: boolean, p5: number, p6: number): [boolean, number];
export declare function networkCanTextChatWithGamer(gamerHandle: number): [boolean, number];
export declare function networkCanViewGamerUserContent(gamerHandle: number): [boolean, number];
export declare function networkCancelRespawnSearch(): void;
export declare function networkCancelTransitionMatchmaking(): void;
/**
 * Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
 * @param p0
 */
export declare function networkCapEmptyCrowdingVehiclesRemoval(p0: number): void;
export declare function networkCasinoBuyChips(p0: number, p1: number): boolean;
/**
 * GTAO_CASINO_HOUSE
 * GTAO_CASINO_INSIDETRACK
 * GTAO_CASINO_LUCKYWHEEL
 * GTAO_CASINO_BLACKJACK
 * GTAO_CASINO_ROULETTE
 * GTAO_CASINO_SLOTS
 * GTAO_CASINO_PURCHASE_CHIPS
 *
 * NETWORK_C*
 * @param hash
 */
export declare function networkCasinoCanBet(hash: number): boolean;
export declare function networkCasinoCanBetAmount(p0: number): boolean;
export declare function networkCasinoCanBetPvc(): boolean;
export declare function networkCasinoCanBuyChipsPvc(): boolean;
export declare function networkCasinoSellChips(p0: number, p1: number): boolean;
export declare function networkChangeTransitionSlots(p0: number, p1: boolean): void;
export declare function networkCheckCommunicationPrivileges(p0: number, p1: number, p2: boolean): boolean;
export declare function networkCheckDataManagerForHandle(p0: number, gamerHandle: number): [boolean, number];
export declare function networkCheckDataManagerSucceededForHandle(p0: number, gamerHandle: number): [boolean, number];
export declare function networkCheckOnlinePrivileges(p0: number, p1: boolean): boolean;
export declare function networkCheckPrivileges(p0: number, p1: number, p2: number): boolean;
/**
 * Returns true if profile setting 901 is set to true and sets it to false.
 */
export declare function networkCheckRosLinkWentdownNotNet(): boolean;
export declare function networkCheckTextCommunicationPrivileges(p0: number, p1: number, p2: number): boolean;
export declare function networkCheckUserContentPrivileges(p0: number, p1: number, p2: boolean): boolean;
export declare function networkClanAnyDownloadMembershipPending(): boolean;
export declare function networkClanCrewinfoGetCrewranktitle(p0: number, p1: string): boolean;
/**
 * Only documented...
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 */
export declare function networkClanCrewinfoGetStringValue(animDict: string, animName: string): boolean;
export declare function networkClanDownloadMembership(gamerHandle: number): [boolean, number];
export declare function networkClanDownloadMembershipPending(p0: number): [boolean, number];
export declare function networkClanGetEmblemTxdName(txdName: string): [boolean, number];
export declare function networkClanGetLocalMembershipsCount(): number;
export declare function networkClanGetMembership(p2: number): [boolean, number, number];
export declare function networkClanGetMembershipCount(p0: number): [number, number];
export declare function networkClanGetMembershipDesc(p1: number): [boolean, number];
export declare function networkClanGetMembershipValid(p1: number): [boolean, number];
/**
 * bufferSize is 35 in the scripts.
 * @param clanDesc
 * @param bufferSize
 * @param formattedTag
 */
export declare function networkClanGetUiFormattedTag(bufferSize: number, formattedTag: string): number;
export declare function networkClanHasCrewinfoMetadataBeenReceived(): boolean;
export declare function networkClanIsEmblemReady(p0: number, p1: number): [boolean, number];
/**
 * bufferSize is 35 in the scripts.
 * @param clanDesc
 * @param bufferSize
 */
export declare function networkClanIsRockstarClan(bufferSize: number): [boolean, number];
export declare function networkClanJoin(clanDesc: number): boolean;
/**
 * bufferSize is 35 in the scripts.
 *
 * bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
 *
 * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
 *
 * https://pastebin.com/cSZniHak
 * @param clanDesc
 * @param bufferSize
 * @param gamerHandle
 */
export declare function networkClanPlayerGetDesc(bufferSize: number): [boolean, number, number];
export declare function networkClanPlayerIsActive(gamerHandle: number): [boolean, number];
export declare function networkClanReleaseEmblem(p0: number): void;
export declare function networkClanRemoteMembershipsAreInCache(p0: number): [boolean, number];
export declare function networkClanRequestEmblem(p0: number): boolean;
export declare function networkClanServiceIsValid(): boolean;
export declare function networkClearCharacterWallet(characterSlot: number): void;
export declare function networkClearClockTimeOverride(): void;
export declare function networkClearFollowInvite(): boolean;
export declare function networkClearFollowers(): void;
export declare function networkClearFoundGamers(): void;
export declare function networkClearGetGamerStatus(): void;
export declare function networkClearGroupActivity(): void;
export declare function networkClearInvalidObjectModels(): void;
export declare function networkClearOfflineInvitePending(): void;
export declare function networkClearPropertyId(): void;
export declare function networkClearQueuedJoinRequest(): void;
export declare function networkClearTransitionCreatorHandle(): void;
export declare function networkClearVoiceChannel(): void;
export declare function networkClearVoiceProximityOverride(): void;
export declare function networkCloseTransitionMatchmaking(): void;
export declare function networkConcealEntity(entity: number, toggle: boolean): void;
export declare function networkConcealPlayer(player: number, toggle: boolean, p2: boolean): void;
export declare function networkCreateSynchronisedScene(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, rotationOrder: number, useOcclusionPortal: boolean, looped: boolean, p9: number, animTime: number, p11: number): number;
export declare function networkDeductCash(amount: number, p1: string, p2: string, p3: boolean, p4: boolean, p5: boolean): void;
/**
 * Does nothing (it's a nullsub).
 */
export declare function networkDeferCashTransactionsUntilShopSave(): void;
/**
 * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
 * @param characterSlot
 * @param p1
 * @param p2
 */
export declare function networkDeleteCharacter(characterSlot: number, p1: boolean, p2: boolean): void;
export declare function networkDidFindGamersSucceed(): boolean;
export declare function networkDidGetGamerStatusSucceed(): boolean;
export declare function networkDisableInvincibleFlashing(player: number, toggle: boolean): void;
export declare function networkDisableLeaveRemotePedBehind(toggle: boolean): void;
export declare function networkDisableProximityMigration(netID: number): void;
export declare function networkDisableRealtimeMultiplayer(): void;
export declare function networkDisableVoiceBandwidthRestriction(player: number): void;
/**
 * Hardcoded to return -1.
 * @param p0
 * @param p1
 */
export declare function networkDisplaynamesFromHandlesStart(p1: number): [number, number];
export declare function networkDoTransitionQuickmatch(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean;
export declare function networkDoTransitionQuickmatchAsync(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean;
export declare function networkDoTransitionQuickmatchWithGroup(p0: number, p1: number, p2: number, p3: number, p5: number, p6: number, p7: number): [boolean, number];
/**
 * p2 is true 3/4 of the occurrences I found.
 * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
 * @param p0
 * @param p1
 * @param p2
 * @param players
 * @param p4
 */
export declare function networkDoTransitionToFreemode(p1: number, p2: boolean, players: number, p4: boolean): [boolean, number];
export declare function networkDoTransitionToGame(p0: boolean, maxPlayers: number): boolean;
export declare function networkDoTransitionToNewFreemode(p1: number, players: number, p3: boolean, p4: boolean, p5: boolean): [boolean, number];
export declare function networkDoTransitionToNewGame(p0: boolean, maxPlayers: number, p2: boolean): boolean;
export declare function networkDoesEntityExistWithNetworkId(netId: number): boolean;
export declare function networkDoesNetworkIdExist(netId: number): boolean;
export declare function networkDoesTunableExist(tunableContext: string, tunableName: string): boolean;
export declare function networkDoesTunableExistHash(tunableContext: number, tunableName: number): boolean;
/**
 * Does nothing (it's a nullsub).
 */
export declare function networkDumpNetIfConfig(): void;
export declare function networkEarnAgency(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkEarnAgencyContract(p0: number, p1: number): void;
export declare function networkEarnAgencyPhone(p0: number, p1: number, p2: number): void;
export declare function networkEarnAgencySafe(p0: number): void;
export declare function networkEarnArcade(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkEarnArenaCareerProgression(amount: number, p1: number): void;
export declare function networkEarnArenaSkillLevelProgression(amount: number, p1: number): void;
export declare function networkEarnArenaWar(amount: number, p1: number, p2: number, p3: number): void;
export declare function networkEarnArenaWarAssassinateTarget(amount: number): void;
export declare function networkEarnArenaWarEventCargo(amount: number): void;
export declare function networkEarnAssassinateTargetKilled(amount: number): void;
export declare function networkEarnAutoshopBusiness(p0: number, p1: number, p2: number): void;
export declare function networkEarnAutoshopIncome(p0: number, p1: number): void;
/**
 * Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS
 * @param amount
 * @param p1
 */
export declare function networkEarnAvenger(amount: number, p1: number): void;
export declare function networkEarnAwardAcidLab(p0: number, p1: number): void;
export declare function networkEarnAwardContract(p0: number, p1: number): void;
export declare function networkEarnAwardDailyStash(p0: number, p1: number): void;
export declare function networkEarnAwardDeadDrop(p0: number, p1: number): void;
export declare function networkEarnAwardFixerMission(p0: number, p1: number): void;
export declare function networkEarnAwardJuggaloMission(p0: number, p1: number): void;
export declare function networkEarnAwardPhone(p0: number, p1: number): void;
export declare function networkEarnAwardRandomEvent(p0: number, p1: number): void;
export declare function networkEarnAwardShortTrip(p0: number, p1: number): void;
export declare function networkEarnAwardTaxi(p0: number, p1: number): void;
export declare function networkEarnBbEventBonus(amount: number): void;
export declare function networkEarnBeachPartyLostFound(p0: number, p1: number, p2: number): void;
export declare function networkEarnBiker(p0: number): void;
export declare function networkEarnBikerShop(p0: number, p1: number): void;
export declare function networkEarnBonusObjective(amount: number, p1: number, p2: number): void;
export declare function networkEarnBoss(p0: number, p1: number, p2: number): void;
export declare function networkEarnBountyHunterReward(p0: number): void;
export declare function networkEarnCarclubMembership(p0: number): void;
export declare function networkEarnCasinoAward(amount: number, hash: number): void;
export declare function networkEarnCasinoCollectableCompletedCollection(amount: number): void;
export declare function networkEarnCasinoHeist(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
export declare function networkEarnCasinoHeistAwards(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkEarnCasinoMissionParticipation(amount: number): void;
export declare function networkEarnCasinoMissionReward(amount: number): void;
export declare function networkEarnCasinoStoryMissionReward(amount: number): void;
export declare function networkEarnCasinoTimeTrialWin(amount: number): void;
export declare function networkEarnChallenge(amount: number, p1: number, p2: number): void;
export declare function networkEarnCollectableCompletedCollection(amount: number, p1: number): void;
export declare function networkEarnCollectableItem(amount: number, p1: number): void;
export declare function networkEarnCollectables(p0: number, p1: number, p2: number): void;
export declare function networkEarnCollectablesActionFigures(amount: number): void;
export declare function networkEarnDailyObjectiveEvent(amount: number): void;
export declare function networkEarnDailyStashHouseCompleted(p0: number, p1: number): void;
export declare function networkEarnDailyStashHouseParticipation(p0: number, p1: number): void;
export declare function networkEarnDailyVehicle(p0: number, p1: number): void;
export declare function networkEarnDailyVehicleBonus(p0: number): void;
export declare function networkEarnDarChallenge(amount: number, p1: number): void;
export declare function networkEarnDispatchCall(amount: number, p1: number): void;
export declare function networkEarnDoomsdayFinaleBonus(amount: number, vehicleHash: number): void;
export declare function networkEarnFirstTimeBonus(p0: number, p1: number, p2: number): void;
export declare function networkEarnFixerAgencyShortTrip(p0: number, p1: number): void;
export declare function networkEarnFixerFinale(p0: number, p1: number): void;
export declare function networkEarnFixerPrep(p0: number, p1: number): void;
export declare function networkEarnFixerRivalDelivery(p0: number, p1: number): void;
export declare function networkEarnFmbbWageBonus(p0: number): void;
/**
 * JUGGALO_PHONE_MISSION...
 * @param p0
 * @param p1
 */
export declare function networkEarnFooliganJob(p0: number, p1: number): void;
/**
 * JUGGALO_PHONE_MISSION_PARTICIPATION...
 * @param p0
 * @param p1
 */
export declare function networkEarnFooliganJobParticipation(p0: number, p1: number): void;
/**
 * DSPORT
 * @param p0
 * @param p1
 */
export declare function networkEarnFromAiTargetKill(p0: number, p1: number): void;
/**
 * Example for p1: "AM_DISTRACT_COPS"
 * @param p0
 * @param p1
 * @param p2
 */
export declare function networkEarnFromAmbientJob(p0: number, p1: string, p2: number): number;
export declare function networkEarnFromBendJob(amount: number, heistHash: string): void;
export declare function networkEarnFromBetting(amount: number, p1: string): void;
export declare function networkEarnFromBounty(amount: number, p3: number): [number, number];
export declare function networkEarnFromBusinessBattle(p0: number): void;
export declare function networkEarnFromBusinessHubSell(p0: number, p1: number, p2: number): void;
export declare function networkEarnFromBusinessProduct(amount: number, p1: number, p2: number, p3: number): void;
export declare function networkEarnFromCashingOut(amount: number): void;
export declare function networkEarnFromChallengeWin(p0: number, p2: boolean): number;
export declare function networkEarnFromClubManagementParticipation(p0: number, p1: number): void;
export declare function networkEarnFromContraband(amount: number, p1: number): void;
export declare function networkEarnFromCrateDrop(amount: number): void;
export declare function networkEarnFromCriminalMastermind(p0: number, p1: number, p2: number): void;
/**
 * type either Monthly,Weekly,Daily
 * @param amount
 * @param type
 * @param characterSlot
 */
export declare function networkEarnFromDailyObjectives(amount: number, type: string, characterSlot: number): void;
export declare function networkEarnFromDestroyingContraband(p0: number, p1: number, p2: number): void;
export declare function networkEarnFromFmbbBossWork(p0: number): void;
export declare function networkEarnFromFmbbPhonecallMission(p0: number): void;
export declare function networkEarnFromGangattackPickup(amount: number): void;
export declare function networkEarnFromHangarTrade(p0: number, p1: number): void;
export declare function networkEarnFromHoldups(amount: number): void;
export declare function networkEarnFromImportExport(amount: number, modelHash: number): void;
export declare function networkEarnFromIslandHeistDjMission(p0: number, p1: number): void;
export declare function networkEarnFromJob(amount: number, p1: string): void;
export declare function networkEarnFromJobBonus(p0: number): [number, number];
export declare function networkEarnFromJobx2(amount: number, p1: string): void;
export declare function networkEarnFromNotBadsport(amount: number): void;
export declare function networkEarnFromPersonalVehicle(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void;
export declare function networkEarnFromPickup(amount: number): void;
export declare function networkEarnFromPremiumJob(amount: number, p1: string): void;
export declare function networkEarnFromProperty(amount: number, propertyName: number): void;
/**
 * For the money bags that drop a max of $40,000. Often called 40k bags.
 *
 * Most likely NETWORK_EARN_FROM_ROB***
 * @param amount
 */
export declare function networkEarnFromRobArmoredCars(amount: number): void;
export declare function networkEarnFromSellBunker(amount: number, bunkerHash: number): void;
export declare function networkEarnFromSmugglerWork(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function networkEarnFromVehicle(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
export declare function networkEarnFromVehicleExport(amount: number, p1: number, p2: number): void;
export declare function networkEarnFromWarehouse(amount: number, id: number): void;
export declare function networkEarnGangopsAward(amount: number, p1: string, p2: number): void;
export declare function networkEarnGangopsElite(amount: number, p1: string, actIndex: number): void;
export declare function networkEarnGangopsFinale(amount: number, p1: string): void;
export declare function networkEarnGangopsPrepParticipation(amount: number): void;
export declare function networkEarnGangopsSetup(amount: number, p1: string): void;
export declare function networkEarnGangopsWages(amount: number, p1: number): void;
export declare function networkEarnGangopsWagesBonus(amount: number, p1: number): void;
export declare function networkEarnGoon(p0: number, p1: number, p2: number): void;
export declare function networkEarnHackerTruck(p0: number, amount: number, p2: number, p3: number): void;
export declare function networkEarnHeistAward(p0: number, p1: number, p2: number): void;
export declare function networkEarnIslandHeist(amount1: number, p1: number, p2: number, p3: number, amount2: number, p5: number): void;
export declare function networkEarnJuggaloStoryMission(p0: number, p1: number): void;
export declare function networkEarnJuggaloStoryMissionParticipation(p0: number, p1: number): void;
export declare function networkEarnNightclub(p0: number): void;
export declare function networkEarnNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
export declare function networkEarnNightclubDancing(p0: number): void;
export declare function networkEarnProgressHub(p0: number, p1: number): void;
export declare function networkEarnPurchaseClubHouse(p0: number, p1: number): void;
export declare function networkEarnRcTimeTrial(amount: number): void;
export declare function networkEarnRdrBonus(amount: number, p1: number): void;
export declare function networkEarnSellAcid(p0: number, p1: number): void;
export declare function networkEarnSellBase(amount: number, baseNameHash: number): void;
export declare function networkEarnSellParticipationAcidLab(p0: number, p1: number): void;
export declare function networkEarnSellPrizeVehicle(amount: number, p1: number, p2: number): void;
export declare function networkEarnSetupParticipationAcidLab(p0: number, p1: number): void;
export declare function networkEarnSightseeingReward(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkEarnSmugglerAgency(amount: number, p1: number, p2: number, p3: number): void;
export declare function networkEarnSmugglerOps(p0: number, p1: number, p2: number): void;
export declare function networkEarnSourceParticipationAcidLab(p0: number, p1: number): void;
export declare function networkEarnSpinTheWheelCash(amount: number): void;
export declare function networkEarnStreetDealer(p0: number, p1: number): void;
export declare function networkEarnTargetRefund(amount: number, p1: number): void;
export declare function networkEarnTaxiJob(p0: number, p1: number): void;
export declare function networkEarnTunerAward(p0: number, p1: number, p2: number): void;
export declare function networkEarnTunerRobbery(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkEarnUpgradeAgency(p0: number, p1: number): void;
export declare function networkEarnUpgradeArcade(p0: number, p1: number, p2: number): void;
export declare function networkEarnUpgradeAutoshop(p0: number, p1: number): void;
export declare function networkEarnWagePayment(amount: number, p1: number): void;
export declare function networkEarnWagePaymentBonus(amount: number): void;
export declare function networkEarnYatchMission(amount: number, p1: number): void;
export declare function networkEconomyHasFixedCrazyNumbers(): boolean;
export declare function networkEnableEmptyCrowdingVehiclesRemoval(toggle: boolean): void;
export declare function networkEnableExtraVehicleOrientationBlendChecks(netId: number, toggle: boolean): void;
export declare function networkEnableVoiceBandwidthRestriction(player: number): void;
export declare function networkEndTutorialSession(): void;
export declare function networkEntityAreaDoesExist(areaHandle: number): boolean;
export declare function networkEntityAreaHaveAllReplied(areaHandle: number): boolean;
export declare function networkEntityAreaIsOccupied(areaHandle: number): boolean;
export declare function networkEntityGetObjectId(entity: number): number;
export declare function networkEntityUseHighPrecisionRotation(netId: number, toggle: boolean): void;
export declare function networkExplodeHeli(vehicle: number, isAudible: boolean, isInvisible: boolean, netId: number): void;
/**
 * In the console script dumps, this is only referenced once.
 * NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
 *
 * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
 * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
 *
 * am_plane_takedown.c
 * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
 *
 * armenian2.c
 * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
 *
 * fm_horde_controler.c
 * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
 *
 * fm_mission_controller.c, has 6 hits so not going to list them.
 *
 * Side note, setting the first parameter to 0 seems to mute sound or so?
 *
 * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
 *
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 * @param netId
 */
export declare function networkExplodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean, netId: number): boolean;
/**
 * state - 0 does 5 fades
 * state - 1 does 6 fades
 *
 * p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
 * @param entity
 * @param state
 * @param p2
 */
export declare function networkFadeInEntity(entity: number, state: boolean, p2: number): void;
/**
 * normal - transition like when your coming out of LSC
 * slow - transition like when you walk into a mission
 *
 * @param entity
 * @param normal
 * @param slow
 */
export declare function networkFadeOutEntity(entity: number, normal: boolean, slow: boolean): void;
export declare function networkFindGamersInCrew(crewId: number): boolean;
/**
 * p0 is always 0. p1 is pointing to a global.
 * @param p0
 * @param p1
 */
export declare function networkFindLargestBunchOfPlayers(p0: number, p1: number): boolean;
/**
 * Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
 * There can be up to 15 attributes, they are as follows:
 *
 * 0 = Races
 * 1 = Parachuting
 * 2 = Horde
 * 3 = Darts
 * 4 = Arm Wrestling
 * 5 = Tennis
 * 6 = Golf
 * 7 = Shooting Range
 * 8 = Deathmatch
 * 9 = MPPLY_MCMWIN/MPPLY_CRMISSION
 * @param attribute
 * @param fallbackLimit
 * @param lowerLimit
 * @param upperLimit
 */
export declare function networkFindMatchedGamers(attribute: number, fallbackLimit: number, lowerLimit: number, upperLimit: number): boolean;
export declare function networkFinishBroadcastingData(): void;
/**
 * NETWORK_F[I-O]
 */
export declare function networkForceLocalPlayerScarSync(): void;
export declare function networkForceLocalUseOfSyncedSceneCamera(netScene: number): void;
export declare function networkGamerHasHeadset(gamerHandle: number): [boolean, number];
export declare function networkGamertagFromHandlePending(): boolean;
export declare function networkGamertagFromHandleStart(gamerHandle: number): [boolean, number];
export declare function networkGamertagFromHandleSucceeded(): boolean;
export declare function networkGetActivityPlayerNum(p0: boolean): number;
export declare function networkGetAgeGroup(): number;
export declare function networkGetAssistedDamageOfEntity(player: number, entity: number, p2: number): [boolean, number];
/**
 * NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
 * @param player
 * @param entity
 * @param p2
 */
export declare function networkGetAssistedKillOfEntity(player: number, entity: number, p2: number): [boolean, number];
export declare function networkGetAverageLatency(player: number): number;
export declare function networkGetAveragePacketLoss(player: number): number;
/**
 * Same as NETWORK_GET_AVERAGE_LATENCY
 * @param player
 */
export declare function networkGetAveragePing(player: number): number;
export declare function networkGetBoneIdOfFatalHit(): number;
/**
 * Returns true if bank balance >= amount.
 * @param amount
 */
export declare function networkGetCanSpendFromBank(amount: number): boolean;
/**
 * Returns true if bank balance + wallet balance >= amount.
 * @param amount
 * @param characterSlot
 */
export declare function networkGetCanSpendFromBankAndWallet(amount: number, characterSlot: number): boolean;
/**
 * Returns true if wallet balance >= amount.
 * @param amount
 * @param characterSlot
 */
export declare function networkGetCanSpendFromWallet(amount: number, characterSlot: number): boolean;
/**
 * Returns false if amount > wallet balance or daily transfer limit has been hit.
 * @param amount
 */
export declare function networkGetCanTransferCash(amount: number): boolean;
/**
 * Return the content modifier id (the tunables context if you want) of a specific content.
 *
 * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
 *
 * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
 *
 * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
 *
 * @param contentHash
 */
export declare function networkGetContentModifierListId(contentHash: number): number;
export declare function networkGetCurrentlySelectedGamerHandleFromInviteMenu(p0: number): [boolean, number];
export declare function networkGetDestroyerOfEntity(entity: number, weaponHash: number): [number, number];
export declare function networkGetDestroyerOfNetworkId(netId: number, weaponHash: number): [number, number];
/**
 * This function is hard-coded to always return 0.
 * @param p0
 * @param p1
 * @param p2
 */
export declare function networkGetDisplaynamesFromHandles(p0: number, p1: number, p2: number): number;
export declare function networkGetEntityFromNetworkId(netId: number): number;
/**
 * I've had this return the player's ped handle sometimes, but also other random entities.
 * Whatever p0 is, it's at least not synced to other players.
 * At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
 * But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
 *
 * Returns an entity handle or -1, value changes based on p0's value.
 * @param p0
 */
export declare function networkGetEntityFromObjectId(p0: number): number;
export declare function networkGetEntityIsLocal(entity: number): boolean;
export declare function networkGetEntityIsNetworked(entity: number): boolean;
export declare function networkGetEntityKillerOfPlayer(player: number, weaponHash: number): [number, number];
export declare function networkGetEvcBalance(): number;
export declare function networkGetFoundGamer(p1: number): [boolean, number];
export declare function networkGetFriendCount(): number;
export declare function networkGetFriendDisplayName(friendIndex: number): string;
export declare function networkGetFriendName(friendIndex: number): string;
export declare function networkGetGameMode(): number;
export declare function networkGetGamerStatusFromQueue(): boolean;
export declare function networkGetGamerStatusResult(p1: number): [boolean, number];
export declare function networkGetGamertagFromHandle(gamerHandle: number): [string, number];
export declare function networkGetGlobalMultiplayerClock(): [number, number, number];
export declare function networkGetHighestReliableResendCount(player: number): number;
/**
 * scriptName examples:
 * "freemode", "AM_CR_SecurityVan", ...
 *
 * Most of the time, these values are used:
 * instance_id = -1
 * position_hash = 0
 * @param scriptName
 * @param instance_id
 * @param position_hash
 */
export declare function networkGetHostOfScript(scriptName: string, instance_id: number, position_hash: number): number;
export declare function networkGetHostOfThisScript(): number;
export declare function networkGetHostPlayerIndex(): number;
export declare function networkGetInstanceIdOfThisScript(): number;
export declare function networkGetInviteReplyStatus(p0: number): number;
export declare function networkGetKillerOfPlayer(player: number, weaponHash: number): [number, number];
export declare function networkGetLastEntityPosReceivedOverNetwork(entity: number): Vector3;
/**
 * Returns the coordinates of another player.
 * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
 * @param player
 */
export declare function networkGetLastPlayerPosReceivedOverNetwork(player: number): Vector3;
/**
 * Used by NetBlender
 * @param entity
 */
export declare function networkGetLastVelReceivedOverNetwork(entity: number): Vector3;
export declare function networkGetLocalHandle(gamerHandleSize: number): number;
export declare function networkGetLocalSceneFromNetworkId(netId: number): number;
export declare function networkGetMaxFriends(): number;
export declare function networkGetMaxNumParticipants(): number;
/**
 * NETWORK_GET_M[A-U]
 * @param p0
 * @param p1
 * @param p2
 */
export declare function networkGetMuteCountForPlayer(p0: number): [number, number];
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export declare function networkGetNetStatisticsInfo(p0: number): number;
export declare function networkGetNetworkIdFromEntity(entity: number): number;
/**
 * Hardcoded to return zero.
 *
 * ==== PS4 specific info ====
 *
 * Returns some sort of unavailable reason:
 * -1 = REASON_INVALID
 * 0 = REASON_OTHER
 * 1 = REASON_SYSTEM_UPDATE
 * 2 = REASON_GAME_UPDATE
 * 3 = REASON_SIGNED_OUT
 * 4 = REASON_AGE
 * 5 = REASON_CONNECTION
 *
 * =================================
 */
export declare function networkGetNpUnavailableReason(): number;
/**
 * Returns the amount of players connected in the current session. Only works when connected to a session/server.
 */
export declare function networkGetNumConnectedPlayers(): number;
export declare function networkGetNumFoundGamers(): number;
export declare function networkGetNumParticipants(): number;
export declare function networkGetNumPresenceInvites(): number;
export declare function networkGetNumScriptParticipants(scriptName: string, instance_id: number, position_hash: number): number;
export declare function networkGetNumTransitionNonAsyncGamers(): number;
export declare function networkGetNumUnackedReliables(player: number): number;
export declare function networkGetNumberBodyTrackerHits(): number;
export declare function networkGetParticipantIndex(index: number): number;
export declare function networkGetPlatformPartyMemberCount(): number;
export declare function networkGetPlatformPartyMembers(dataSize: number): [number, number];
export declare function networkGetPlayerAccountId(player: number): number;
export declare function networkGetPlayerFromGamerHandle(gamerHandle: number): [number, number];
export declare function networkGetPlayerIndex(player: number): number;
/**
 * Returns the Player associated to a given Ped when in an online session.
 * @param ped
 */
export declare function networkGetPlayerIndexFromPed(ped: number): number;
export declare function networkGetPlayerIsHighEarner(): boolean;
export declare function networkGetPlayerLoudness(player: number): number;
export declare function networkGetPlayerOwnsWaypoint(player: number): boolean;
export declare function networkGetPlayerTutorialSessionInstance(player: number): number;
export declare function networkGetPositionHashOfThisScript(): number;
export declare function networkGetPredictedVelocity(entity: number, maxSpeedToPredict: number): Vector3;
export declare function networkGetPresenceInviteContentId(p0: number): string;
export declare function networkGetPresenceInviteFromAdmin(p0: number): boolean;
export declare function networkGetPresenceInviteHandle(p0: number, p1: number): [boolean, number];
export declare function networkGetPresenceInviteId(p0: number): number;
export declare function networkGetPresenceInviteIndexById(p0: number): number;
export declare function networkGetPresenceInviteInviter(p0: number): string;
export declare function networkGetPresenceInviteIsTournament(p0: number): boolean;
export declare function networkGetPresenceInvitePlaylistCurrent(p0: number): number;
export declare function networkGetPresenceInvitePlaylistLength(p0: number): number;
export declare function networkGetPresenceInviteSessionId(p0: number): number;
export declare function networkGetPrimaryClanDataCancel(): void;
export declare function networkGetPrimaryClanDataClear(): boolean;
export declare function networkGetPrimaryClanDataNew(): [boolean, number, number];
export declare function networkGetPrimaryClanDataPending(): boolean;
export declare function networkGetPrimaryClanDataStart(p1: number): [boolean, number];
export declare function networkGetPrimaryClanDataSuccess(): boolean;
export declare function networkGetPvcBalance(): number;
/**
 * Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
 */
export declare function networkGetPvcTransferBalance(): number;
export declare function networkGetRandomFloatRanged(rangeStart: number, rangeEnd: number): number;
export declare function networkGetRandomInt(): number;
/**
 * Same as GET_RANDOM_INT_IN_RANGE
 * @param rangeStart
 * @param rangeEnd
 */
export declare function networkGetRandomIntRanged(rangeStart: number, rangeEnd: number): number;
/**
 * Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
 */
export declare function networkGetRemainingTransferBalance(): number;
/**
 * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
 * @param randomInt
 * @param coordinates
 * @param heading
 */
export declare function networkGetRespawnResult(randomInt: number): [Vector3, number];
export declare function networkGetRespawnResultFlags(p0: number): number;
export declare function networkGetScriptStatus(): number;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export declare function networkGetSignallingInfo(p0: number): number;
export declare function networkGetStringBankBalance(): string;
export declare function networkGetStringBankWalletBalance(character: number): string;
export declare function networkGetStringWalletBalance(characterSlot: number): string;
export declare function networkGetTalkerProximity(): number;
export declare function networkGetThisScriptIsNetworkScript(): boolean;
export declare function networkGetTimeoutTime(): number;
export declare function networkGetTotalNumPlayers(): number;
export declare function networkGetTransitionHost(gamerHandle: number): [boolean, number];
/**
 * Returns count.
 * @param data
 * @param dataCount
 */
export declare function networkGetTransitionMembers(dataCount: number): [number, number];
/**
 * Actually returns the version (TUNABLE_VERSION)
 */
export declare function networkGetTunableCloudCrc(): number;
export declare function networkGetUnreliableResendCount(player: number): number;
export declare function networkGetVcBalance(): number;
export declare function networkGetVcBankBalance(): number;
export declare function networkGetVcWalletBalance(characterSlot: number): number;
export declare function networkGivePlayerJobshareCash(amount: number, gamerHandle: number): number;
export declare function networkHandleFromFriend(friendIndex: number, gamerHandleSize: number): number;
export declare function networkHandleFromMemberId(memberId: string, gamerHandleSize: number): number;
export declare function networkHandleFromPlayer(player: number, gamerHandleSize: number): number;
export declare function networkHandleFromUserId(userId: string, gamerHandleSize: number): number;
export declare function networkHasAgeRestrictions(): boolean;
export declare function networkHasAutomuteOverride(): boolean;
export declare function networkHasBoneBeenHitByKiller(boneIndex: number): boolean;
export declare function networkHasCachedPlayerHeadBlendData(player: number): boolean;
export declare function networkHasConfirmedInvite(): boolean;
export declare function networkHasControlOfDoor(doorHash: number): boolean;
export declare function networkHasControlOfEntity(entity: number): boolean;
export declare function networkHasControlOfNetworkId(netId: number): boolean;
export declare function networkHasControlOfPickup(pickup: number): boolean;
export declare function networkHasEntityBeenRegisteredWithThisThread(entity: number): boolean;
export declare function networkHasFollowInvite(): boolean;
export declare function networkHasHeadset(): boolean;
export declare function networkHasInvitedGamer(p0: number): [boolean, number];
export declare function networkHasInvitedGamerToTransition(p0: number): [boolean, number];
export declare function networkHasMadeInviteDecision(gamerHandle: number): [boolean, number];
export declare function networkHasPendingInvite(): boolean;
export declare function networkHasPlayerStartedTransition(player: number): boolean;
export declare function networkHasReceivedHostBroadcastData(): boolean;
/**
 * index is always 18 in scripts
 * @param index
 */
export declare function networkHasRosPrivilege(index: number): boolean;
export declare function networkHasRosPrivilegeEndDate(privilege: number): [boolean, number, number];
export declare function networkHasRosPrivilegePlayedLastGen(): boolean;
export declare function networkHasRosPrivilegeSpecialEditionContent(): boolean;
export declare function networkHasSocialClubAccount(): boolean;
export declare function networkHasSocialNetworkingSharingPriv(): boolean;
export declare function networkHasTransitionInviteBeenAcked(p0: number): [boolean, number];
/**
 * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
 */
export declare function networkHasValidRosCredentials(): boolean;
export declare function networkHasViewGamerUserContentResult(gamerHandle: number): [boolean, number];
export declare function networkHashFromGamerHandle(gamerHandle: number): [number, number];
export declare function networkHashFromPlayerHandle(player: number): number;
export declare function networkHaveCommunicationPrivileges(p0: number, player: number): boolean;
export declare function networkHaveOnlinePrivileges(): boolean;
export declare function networkHavePlatformSubscription(): boolean;
export declare function networkHaveRosBannedPriv(): boolean;
export declare function networkHaveRosCreateTicketPriv(): boolean;
export declare function networkHaveRosLeaderboardWritePriv(): boolean;
export declare function networkHaveRosMultiplayerPriv(): boolean;
export declare function networkHaveRosSocialClubPriv(): boolean;
export declare function networkHaveScsPrivateMsgPriv(): boolean;
export declare function networkHaveUserContentPrivileges(p0: number): boolean;
export declare function networkHideProjectileInCutscene(): void;
/**
 * p0: Unknown int
 * p1: Unknown int
 * p2: Unknown int
 * p3: Unknown int
 * p4: Unknown always 0 in decompiled scripts
 * p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
 * p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
 * p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
 * p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
 * p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
 *
 * From what I can tell it looks like it does the following:
 * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
 * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export declare function networkHostTransition(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: boolean, p7: number, p8: number, p9: number): boolean;
export declare function networkIgnoreRemoteWaypoints(): void;
export declare function networkInitializeCash(wallet: number, bank: number): void;
export declare function networkInviteGamers(p1: number, p3: number): [boolean, number, number];
export declare function networkInviteGamersToTransition(p1: number): [boolean, number];
export declare function networkIsActivitySession(): boolean;
export declare function networkIsActivitySpectator(): boolean;
export declare function networkIsActivitySpectatorFromHandle(gamerHandle: number): [boolean, number];
export declare function networkIsAddingFriend(): boolean;
export declare function networkIsAnyPlayerNear(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): boolean;
export declare function networkIsCableConnected(): boolean;
/**
 * This would be nice to see if someone is in party chat, but 2 sad notes.
 * 1) It only becomes true if said person is speaking in that party at the time.
 * 2) It will never, become true unless you are in that party with said person.
 * @param gamerHandle
 */
export declare function networkIsChattingInPlatformParty(gamerHandle: number): [boolean, number];
export declare function networkIsClockTimeOverridden(): boolean;
export declare function networkIsCloudAvailable(): boolean;
export declare function networkIsCloudBackgroundScriptRequestPending(): boolean;
export declare function networkIsConnectedViaRelay(player: number): boolean;
/**
 * This function is hard-coded to always return 1.
 */
export declare function networkIsConnetedToNpPresence(): boolean;
export declare function networkIsDoorNetworked(doorHash: number): boolean;
/**
 * Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
 * @param entity
 */
export declare function networkIsEntityConcealed(entity: number): boolean;
export declare function networkIsEntityFading(entity: number): boolean;
export declare function networkIsFindingGamers(): boolean;
export declare function networkIsFriend(gamerHandle: number): [boolean, number];
export declare function networkIsFriendHandleOnline(gamerHandle: number): [boolean, number];
export declare function networkIsFriendInMultiplayer(friendName: string): boolean;
/**
 * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
 * @param friendName
 */
export declare function networkIsFriendInSameTitle(friendName: string): boolean;
export declare function networkIsFriendIndexOnline(friendIndex: number): boolean;
export declare function networkIsFriendOnline(name: string): boolean;
export declare function networkIsGameInProgress(): boolean;
export declare function networkIsGamerBlockedByMe(gamerHandle: number): [boolean, number];
export declare function networkIsGamerInMySession(gamerHandle: number): [boolean, number];
export declare function networkIsGamerMutedByMe(gamerHandle: number): [boolean, number];
export declare function networkIsGamerTalking(gamerHandle: number): [boolean, number];
export declare function networkIsGettingGamerStatus(): boolean;
export declare function networkIsHandleValid(gamerHandleSize: number): [boolean, number];
/**
 * If you are host, returns true else returns false.
 */
export declare function networkIsHost(): boolean;
export declare function networkIsHostOfThisScript(): boolean;
export declare function networkIsInMpCutscene(): boolean;
/**
 * Hardcoded to return false.
 */
export declare function networkIsInPlatformParty(): boolean;
/**
 * Hardcoded to return false.
 */
export declare function networkIsInPlatformPartyChat(): boolean;
export declare function networkIsInSession(): boolean;
export declare function networkIsInSpectatorMode(): boolean;
export declare function networkIsInTransition(): boolean;
export declare function networkIsInTutorialSession(): boolean;
export declare function networkIsInactiveProfile(p0: number): [boolean, number];
export declare function networkIsLocalPlayerInvincible(): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function networkIsLoggedInToPsn(): boolean;
export declare function networkIsMultiplayerDisabled(): boolean;
/**
 * Returns true if the specified network id is controlled by someone else.
 * @param netId
 */
export declare function networkIsNetworkIdRemotelyControlled(netId: number): boolean;
/**
 * This function is hard-coded to always return 1.
 */
export declare function networkIsNpAvailable(): boolean;
/**
 * This function is hard-coded to always return 1.
 */
export declare function networkIsNpPending(): boolean;
export declare function networkIsOfflineInvitePending(): boolean;
export declare function networkIsParticipantActive(p0: number): boolean;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
export declare function networkIsPendingFriend(p0: number): boolean;
export declare function networkIsPlatformSubscriptionCheckPending(): boolean;
export declare function networkIsPlayerAParticipant(player: number): boolean;
export declare function networkIsPlayerAParticipantOnScript(player: number, script: string, instance_id: number): boolean;
export declare function networkIsPlayerActive(player: number): boolean;
export declare function networkIsPlayerBlockedByMe(player: number): boolean;
export declare function networkIsPlayerConcealed(player: number): boolean;
export declare function networkIsPlayerConnected(player: number): boolean;
export declare function networkIsPlayerFading(player: number): boolean;
export declare function networkIsPlayerInMpCutscene(player: number): boolean;
export declare function networkIsPlayerMutedByMe(player: number): boolean;
export declare function networkIsPlayerOnBlocklist(gamerHandle: number): [boolean, number];
/**
 * returns true if someone is screaming or talking in a microphone
 * @param player
 */
export declare function networkIsPlayerTalking(player: number): boolean;
/**
 * Hardcoded to return false.
 */
export declare function networkIsPrivilegeCheckInProgress(): boolean;
export declare function networkIsPushToTalkActive(): boolean;
export declare function networkIsQueuingForSessionJoin(): boolean;
export declare function networkIsRefreshingRosCredentials(): boolean;
export declare function networkIsScriptActive(scriptName: string, instance_id: number, p2: boolean, position_hash: number): boolean;
export declare function networkIsScriptActiveByHash(scriptHash: number, p1: number, p2: boolean, p3: number): boolean;
export declare function networkIsSessionActive(): boolean;
export declare function networkIsSessionBusy(): boolean;
/**
 * This checks if player is playing on gta online or not.
 * Please add an if and block your mod if this is "true".
 */
export declare function networkIsSessionStarted(): boolean;
export declare function networkIsShowingSystemUiOrRecentlyRequestedUpsell(): boolean;
/**
 * Returns whether the player is signed into Social Club.
 */
export declare function networkIsSignedIn(): boolean;
/**
 * Returns whether the game is not in offline mode.
 *
 * seemed not to work for some ppl
 */
export declare function networkIsSignedOnline(): boolean;
export declare function networkIsThreadANetworkScript(threadId: number): boolean;
/**
 * This function is hard-coded to always return 0.
 */
export declare function networkIsTitleUpdateRequired(): boolean;
export declare function networkIsTransitionBusy(): boolean;
export declare function networkIsTransitionClosedCrew(): boolean;
export declare function networkIsTransitionClosedFriends(): boolean;
export declare function networkIsTransitionHost(): boolean;
export declare function networkIsTransitionHostFromHandle(gamerHandle: number): [boolean, number];
export declare function networkIsTransitionLeavePostponed(): boolean;
export declare function networkIsTransitionMatchmaking(): boolean;
export declare function networkIsTransitionOpenToMatchmaking(): boolean;
export declare function networkIsTransitionPrivate(): boolean;
export declare function networkIsTransitionSolo(): boolean;
export declare function networkIsTransitionStarted(): boolean;
export declare function networkIsTransitionToGame(): boolean;
export declare function networkIsTransitionVisibilityLocked(): boolean;
export declare function networkIsTunableCloudRequestPending(): boolean;
export declare function networkIsTutorialSessionChangePending(): boolean;
export declare function networkIsUsingOnlinePromotion(): boolean;
export declare function networkJoinGroupActivity(): boolean;
export declare function networkJoinPreviouslyFailedSession(): boolean;
export declare function networkJoinPreviouslyFailedTransition(): boolean;
/**
 * int handle[76];
 * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
 * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
 * NETWORK_JOIN_TRANSITION(uVar2);
 * nothing doin.
 * @param player
 */
export declare function networkJoinTransition(player: number): boolean;
export declare function networkKeepEntityCollisionDisabledAfterAnimScene(p0: number, p1: number): void;
export declare function networkLaunchTransition(): boolean;
export declare function networkLeavePedBehindBeforeCutscene(player: number, p1: boolean): void;
/**
 * p4 and p5 are always 0 in scripts
 * @param player
 * @param x
 * @param y
 * @param z
 * @param p4
 * @param p5
 */
export declare function networkLeavePedBehindBeforeWarp(player: number, x: number, y: number, z: number, p4: boolean, p5: boolean): void;
export declare function networkLeaveTransition(): boolean;
export declare function networkManualDeleteCharacter(characterSlot: number): void;
export declare function networkMarkAsPreferredActivity(p0: boolean): void;
export declare function networkMarkAsWaitingAsync(p0: boolean): void;
export declare function networkMarkTransitionGamerAsFullyJoined(p0: number): [boolean, number];
export declare function networkMemberIdFromGamerHandle(gamerHandle: number): [string, number];
export declare function networkMoneyCanBet(amount: number, p1: boolean, p2: boolean): boolean;
export declare function networkNeedToStartNewGameButBlocked(): boolean;
export declare function networkOnReturnToSinglePlayer(): void;
export declare function networkOpenTransitionMatchmaking(): void;
/**
 * Could possibly bypass being muted or automatically muted
 * @param player
 * @param toggle
 */
export declare function networkOverrideChatRestrictions(player: number, toggle: boolean): void;
export declare function networkOverrideClockRate(ms: number): void;
/**
 * Works in Singleplayer too.
 * Passing wrong data (e.g. hours above 23) will cause the game to crash.
 * @param hours
 * @param minutes
 * @param seconds
 */
export declare function networkOverrideClockTime(hours: number, minutes: number, seconds: number): void;
export declare function networkOverrideCoordsAndHeading(entity: number, x: number, y: number, z: number, heading: number): void;
/**
 * R* uses this to hear all player when spectating.
 * It allows you to hear other online players when their chat is on none, crew and or friends
 * @param player
 * @param toggle
 */
export declare function networkOverrideReceiveRestrictions(player: number, toggle: boolean): void;
/**
 * p0 is always false in scripts.
 * @param toggle
 */
export declare function networkOverrideReceiveRestrictionsAll(toggle: boolean): void;
/**
 * This is used alongside the native,
 * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
 * @param player
 * @param toggle
 */
export declare function networkOverrideSendRestrictions(player: number, toggle: boolean): void;
export declare function networkOverrideSendRestrictionsAll(toggle: boolean): void;
export declare function networkOverrideTeamRestrictions(team: number, toggle: boolean): void;
export declare function networkOverrideTransitionChat(p0: boolean): void;
export declare function networkPatchPostCutsceneHs4fTunEnt(ped: number): void;
export declare function networkPayEmployeeWage(p0: number, p1: boolean, p2: boolean): void;
export declare function networkPayMatchEntryFee(amount: number, matchId: string, p2: boolean, p3: boolean): void;
export declare function networkPermissionsHasGamerRecord(gamerHandle: number): [boolean, number];
export declare function networkPlayerGetCheaterReason(): number;
/**
 * Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
 * @param player
 */
export declare function networkPlayerGetName(player: number): string;
/**
 * Returns a string of the player's Rockstar Id.
 * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
 * @param player
 * @param userID
 */
export declare function networkPlayerGetUserid(player: number, userID: number): [string, number];
export declare function networkPlayerHasHeadset(player: number): boolean;
/**
 * Does exactly the same thing as PLAYER_ID()
 */
export declare function networkPlayerIdToInt(): number;
export declare function networkPlayerIndexIsCheater(player: number): boolean;
export declare function networkPlayerIsBadsport(): boolean;
export declare function networkPlayerIsCheater(): boolean;
/**
 * Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
 * Returns always false in Singleplayer.
 *
 * No longer used for dev checks since first mods were released on PS3 & 360.
 * R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
 * if that is present it will unlock dev stuff.
 * @param player
 */
export declare function networkPlayerIsRockstarDev(player: number): boolean;
export declare function networkPreventScriptHostMigration(): void;
export declare function networkQueryRespawnResults(p0: number): [number, number];
export declare function networkQueueGamerForStatus(p0: number): [boolean, number];
export declare function networkQuitMpToDesktop(): void;
export declare function networkReceivePlayerJobshareCash(value: number, gamerHandle: number): number;
/**
 * index
 * -------
 * See function sub_1005 in am_boat_taxi.ysc
 *
 * context
 * ----------
 * "BACKUP_VAGOS"
 * "BACKUP_LOST"
 * "BACKUP_FAMILIES"
 * "HIRE_MUGGER"
 * "HIRE_MERCENARY"
 * "BUY_CARDROPOFF"
 * "HELI_PICKUP"
 * "BOAT_PICKUP"
 * "CLEAR_WANTED"
 * "HEAD_2_HEAD"
 * "CHALLENGE"
 * "SHARE_LAST_JOB"
 * "DEFAULT"
 *
 * reason
 * ---------
 * "NOTREACHTARGET"
 * "TARGET_ESCAPE"
 * "DELIVERY_FAIL"
 * "NOT_USED"
 * "TEAM_QUIT"
 * "SERVER_ERROR"
 * "RECEIVE_LJ_L"
 * "CHALLENGE_PLAYER_LEFT"
 * "DEFAULT"
 *
 * unk
 * -----
 * Unknown bool value
 *
 *
 * @param index
 * @param context
 * @param reason
 * @param p3
 */
export declare function networkRefundCash(index: number, context: string, reason: string, p3: boolean): void;
export declare function networkRegisterEntityAsNetworked(entity: number): void;
export declare function networkRegisterHighFrequencyHostBroadcastVariables(p0: number, p1: number, p2: number): void;
export declare function networkRegisterHighFrequencyPlayerBroadcastVariables(p0: number, p1: number, p2: number): void;
export declare function networkRegisterHostBroadcastVariables(numVars: number, debugName: string): number;
export declare function networkRegisterPlayerBroadcastVariables(numVars: number, debugName: string): number;
export declare function networkRemainInGameChat(p0: boolean): void;
export declare function networkRemoveAllQueuedJoinRequests(): void;
export declare function networkRemoveAllTransitionInvite(): void;
export declare function networkRemoveAndCancelAllInvites(): void;
export declare function networkRemoveAndCancelAllTransitionInvites(): void;
export declare function networkRemoveEntityArea(areaHandle: number): boolean;
export declare function networkRemoveInvalidObjectModel(modelHash: number): void;
export declare function networkRemovePresenceInvite(p0: number): boolean;
export declare function networkRemoveTransitionInvite(p0: number): number;
export declare function networkReportCodeTamper(): void;
export declare function networkRequestCloudBackgroundScripts(): boolean;
export declare function networkRequestCloudTunables(): void;
export declare function networkRequestControlOfDoor(doorID: number): boolean;
export declare function networkRequestControlOfEntity(entity: number): boolean;
export declare function networkRequestControlOfNetworkId(netId: number): boolean;
/**
 * Triggers a CEventNetworkInviteConfirmed event
 */
export declare function networkRequestInviteConfirmedEvent(): boolean;
export declare function networkRequestToBeHostOfThisScript(): void;
export declare function networkResetBodyTracker(): void;
/**
 * Hardcoded to return true.
 */
export declare function networkResolvePrivilegeUserContent(): boolean;
export declare function networkResurrectLocalPlayer(x: number, y: number, z: number, heading: number, p4: boolean, changetime: boolean, p6: boolean, p7: number, p8: number): void;
export declare function networkRetainActivityGroup(): void;
export declare function networkSeedRandomNumberGenerator(seed: number): void;
/**
 * Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
 * @param gamerHandle
 * @param p1
 * @param dataCount
 * @param p3
 */
export declare function networkSendImportantTransitionInviteViaPresence(p1: string, dataCount: number, p3: number): [boolean, number];
export declare function networkSendInviteViaPresence(p1: string, dataCount: number, p3: number): [boolean, number];
export declare function networkSendQueuedJoinRequest(): void;
/**
 * Message is limited to 64 characters.
 * @param message
 * @param gamerHandle
 */
export declare function networkSendTextMessage(message: string, gamerHandle: number): [boolean, number];
export declare function networkSendTransitionGamerInstruction(p1: string, p2: number, p3: number, p4: boolean): [boolean, number];
export declare function networkSendTransitionInviteViaPresence(p1: string, dataCount: number, p3: number): [boolean, number];
export declare function networkServiceEarnGangopsRivalDelivery(earnedMoney: number): void;
/**
 * groupId range: [0, 4]
 * @param groupId
 */
export declare function networkSessionAddActiveMatchmakingGroup(groupId: number): void;
export declare function networkSessionBlockJoinRequests(toggle: boolean): void;
export declare function networkSessionCancelInvite(): void;
/**
 * num player slots allowed in session, seems to work? 32 max
 * @param slots
 * @param p1
 */
export declare function networkSessionChangeSlots(slots: number, p1: boolean): void;
export declare function networkSessionDoActivityQuickmatch(p0: number, p1: number, p2: number, p3: number, p4: number): boolean;
/**
 * p4 seems to be unused in 1.60/build 2628
 * @param crewId
 * @param p1
 * @param p2
 * @param maxPlayers
 */
export declare function networkSessionDoCrewMatchmaking(crewId: number, p1: number, p2: number, maxPlayers: number): boolean;
export declare function networkSessionDoFreeroamQuickmatch(p0: number, p1: number, p2: number): boolean;
export declare function networkSessionDoFriendMatchmaking(p0: number, p1: number, p2: number): boolean;
/**
 * p0 is always false and p1 varies.
 * NETWORK_SESSION_END(0, 1)
 * NETWORK_SESSION_END(0, 0)
 * Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
 * @param p0
 * @param p1
 */
export declare function networkSessionEnd(p0: boolean, p1: boolean): boolean;
export declare function networkSessionForceCancelInvite(): void;
export declare function networkSessionGetHostAimPreference(): number;
export declare function networkSessionGetInviter(gamerHandle: number): number;
export declare function networkSessionGetKickVote(player: number): boolean;
export declare function networkSessionGetMatchmakingGroupFree(p0: number): number;
export declare function networkSessionGetPrivateSlots(): number;
/**
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * @param p0
 * @param maxPlayers
 * @param p2
 */
export declare function networkSessionHost(p0: number, maxPlayers: number, p2: boolean): boolean;
export declare function networkSessionHostClosed(p0: number, maxPlayers: number): boolean;
/**
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * @param p0
 * @param maxPlayers
 */
export declare function networkSessionHostFriendsOnly(p0: number, maxPlayers: number): boolean;
/**
 * Loads up the map that is loaded when beeing in mission creator
 * Player gets placed in a mix between online/offline mode
 * p0 is always 2 in R* scripts.
 *
 * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
 * @param p0
 */
export declare function networkSessionHostSinglePlayer(p0: number): void;
/**
 * Seems to be true while "Getting GTA Online session details" shows up.
 */
export declare function networkSessionIsAwaitingInviteResponse(): boolean;
export declare function networkSessionIsClosedCrew(): boolean;
export declare function networkSessionIsClosedFriends(): boolean;
export declare function networkSessionIsDisplayingInviteConfirmation(): boolean;
export declare function networkSessionIsInVoiceSession(): boolean;
export declare function networkSessionIsPrivate(): boolean;
export declare function networkSessionIsSolo(): boolean;
export declare function networkSessionIsVisible(): boolean;
export declare function networkSessionIsVoiceSessionActive(): boolean;
export declare function networkSessionIsVoiceSessionBusy(): boolean;
export declare function networkSessionJoinInvite(): void;
/**
 * Only works as host.
 * @param player
 */
export declare function networkSessionKickPlayer(player: number): void;
export declare function networkSessionLeave(p0: number): boolean;
export declare function networkSessionLeaveSinglePlayer(): void;
export declare function networkSessionMarkVisible(toggle: boolean): void;
export declare function networkSessionReserveSlotsTransition(p0: number, p1: number, p2: number): boolean;
export declare function networkSessionSetCrewLimitMaxMembersTransition(p0: number): void;
export declare function networkSessionSetGamemode(p0: number): void;
export declare function networkSessionSetMatchmakingGroup(matchmakingGroup: number): void;
/**
 * playerType is an unsigned int from 0 to 4
 * 0 = regular joiner
 * 4 = spectator
 * @param playerType
 * @param playerCount
 */
export declare function networkSessionSetMatchmakingGroupMax(playerType: number, playerCount: number): void;
/**
 * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
 * @param p0
 */
export declare function networkSessionSetMatchmakingMentalState(p0: number): void;
export declare function networkSessionSetMatchmakingPropertyId(p0: boolean): void;
export declare function networkSessionSetNumBosses(num: number): void;
export declare function networkSessionSetScriptValidateJoin(): void;
export declare function networkSessionSetUniqueCrewLimit(p0: number): void;
export declare function networkSessionSetUniqueCrewLimitTransition(p0: number): void;
export declare function networkSessionSetUniqueCrewOnlyCrewsTransition(p0: boolean): void;
export declare function networkSessionValidateJoin(p0: boolean): void;
export declare function networkSessionVoiceConnectToPlayer(gamerHandle: number): number;
export declare function networkSessionVoiceHost(): boolean;
export declare function networkSessionVoiceLeave(): boolean;
export declare function networkSessionVoiceRespondToRequest(p0: boolean, p1: number): void;
export declare function networkSessionVoiceSetTimeout(timeout: number): void;
export declare function networkSessionWasInvited(): boolean;
export declare function networkSetActivityPlayerMax(p0: number): void;
export declare function networkSetActivitySpectator(toggle: boolean): void;
export declare function networkSetActivitySpectatorMax(maxSpectators: number): void;
export declare function networkSetAntagonisticToPlayer(toggle: boolean, player: number): void;
export declare function networkSetAttributeDamageToPlayer(ped: number, player: number): boolean;
export declare function networkSetCanReceiveRsInvites(p0: boolean): void;
export declare function networkSetCurrentChatOption(newChatOption: number): void;
export declare function networkSetCurrentDataManagerHandle(p0: number): [boolean, number];
export declare function networkSetCurrentPublicContentId(missionId: string): void;
/**
 * mpSettingSpawn:
 *
 * enum eMpSettingSpawn
 * {
 * MP_SETTING_SPAWN_NULL,
 * MP_SETTING_SPAWN_PROPERTY,
 * MP_SETTING_SPAWN_LAST_POSITION,
 * MP_SETTING_SPAWN_GARAGE,
 * MP_SETTING_SPAWN_RANDOM,
 * MP_SETTING_SPAWN_PRIVATE_YACHT,
 * MP_SETTING_SPAWN_OFFICE,
 * MP_SETTING_SPAWN_CLUBHOUSE,
 * MP_SETTING_SPAWN_IE_WAREHOUSE,
 * MP_SETTING_SPAWN_BUNKER,
 * MP_SETTING_SPAWN_HANGAR,
 * MP_SETTING_SPAWN_DEFUNCT_BASE,
 * MP_SETTING_SPAWN_NIGHTCLUB,
 * MP_SETTING_SPAWN_ARENA_GARAGE,
 * MP_SETTING_SPAWN_CASINO_APARTMENT,
 * MP_SETTING_SPAWN_ARCADE,
 * MP_SETTING_SPAWN_SUBMARINE,
 * MP_SETTING_SPAWN_CAR_MEET,
 * MP_SETTING_SPAWN_AUTO_SHOP,
 * MP_SETTING_SPAWN_FIXER_HQ,
 * MP_SETTING_SPAWN_MAX,
 * };
 * @param mpSettingSpawn
 */
export declare function networkSetCurrentSpawnLocationOption(mpSettingSpawn: number): void;
export declare function networkSetCurrentlySelectedGamerHandleFromInviteMenu(p0: number): [boolean, number];
export declare function networkSetCustomArenaBallParams(netId: number): void;
/**
 * Appears to set whether a transition should be started when the session is migrating.
 * @param toggle
 */
export declare function networkSetDoNotLaunchFromJoinAsMigratedHost(toggle: boolean): void;
export declare function networkSetEntityCanBlend(entity: number, toggle: boolean): void;
/**
 * if set to true other network players can't see it
 * if set to false other network player can see it
 * =========================================
 * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
 *
 * pc or last gen?
 *
 * ^^ last-gen
 * @param entity
 * @param toggle
 */
export declare function networkSetEntityOnlyExistsForParticipants(entity: number, toggle: boolean): void;
export declare function networkSetFriendlyFireOption(toggle: boolean): void;
export declare function networkSetGamerInvitedToTransition(gamerHandle: number): number;
export declare function networkSetIgnoreSpectatorChatLimitsSameTeam(toggle: boolean): void;
export declare function networkSetInFreeCamMode(toggle: boolean): void;
export declare function networkSetInMpCutscene(p0: boolean, p1: boolean): void;
export declare function networkSetInProgressFinishTime(p0: number): void;
export declare function networkSetInSpectatorMode(toggle: boolean, playerPed: number): void;
export declare function networkSetInSpectatorModeExtended(toggle: boolean, playerPed: number, p2: boolean): void;
export declare function networkSetInviteFailedMessageForInviteMenu(): [number, number];
export declare function networkSetInviteOnCallForInviteMenu(p0: number): number;
export declare function networkSetLocalPlayerInvincibleTime(time: number): void;
export declare function networkSetLocalPlayerSyncLookAt(toggle: boolean): void;
export declare function networkSetLookAtTalkers(p0: boolean): void;
export declare function networkSetMinimumRankForMission(p0: boolean): void;
export declare function networkSetMissionFinished(): void;
/**
 * Stops current cutscene with a fade transition
 * p0: always true in R* Scripts
 * You will need to manually fade the screen back in
 * SET_CUTSCENE_INPUTS_PARTIALLY_FADE?
 * @param p0
 */
export declare function networkSetMocapCutsceneCanBeSkipped(p0: boolean): void;
export declare function networkSetNoLongerNeeded(entity: number, toggle: boolean): void;
export declare function networkSetNoSpectatorChat(toggle: boolean): void;
export declare function networkSetObjectCanBlendWhenFixed(object: number, toggle: boolean): void;
export declare function networkSetObjectScopeDistance(object: number, range: number): void;
export declare function networkSetOverrideSpectatorMode(toggle: boolean): void;
export declare function networkSetOverrideTutorialSessionChat(toggle: boolean): void;
export declare function networkSetPlayerIsPassive(toggle: boolean): void;
/**
 * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
 * @param p0
 */
export declare function networkSetPlayerMentalState(p0: number): void;
/**
 * Does nothing. It's just a nullsub.
 * @param toggle
 */
export declare function networkSetPresenceSessionInvitesBlocked(toggle: boolean): void;
export declare function networkSetPrivilegeCheckResultNotNeeded(): void;
/**
 * value must be < 255
 * @param id
 */
export declare function networkSetPropertyId(id: number): void;
export declare function networkSetProximityAffectsTeam(toggle: boolean): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export declare function networkSetRichPresence(p0: number, p1: number, p2: number, p3: number): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param textLabel
 */
export declare function networkSetRichPresenceString(p0: number, textLabel: string): void;
export declare function networkSetSameTeamAsLocalPlayer(p0: number, p1: number): boolean;
export declare function networkSetScriptAutomuted(p0: number): boolean;
export declare function networkSetScriptControllingTeams(p0: number): void;
export declare function networkSetScriptIsSafeForNetworkGame(): void;
export declare function networkSetScriptReadyForEvents(toggle: boolean): void;
export declare function networkSetSpectatorToNonSpectatorTextChat(toggle: boolean): void;
export declare function networkSetTalkerProximity(value: number): void;
/**
 * A value between 1.0 and 5.0
 *
 * _NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?
 * @param p0
 */
export declare function networkSetTaskCutsceneInscopeMultipler(p0: number): void;
export declare function networkSetTeamOnlyChat(toggle: boolean): void;
export declare function networkSetThisScriptIsNetworkScript(maxNumMissionParticipants: number, p1: boolean, instanceId: number): void;
export declare function networkSetTransitionActivityId(p0: number): void;
export declare function networkSetTransitionCreatorHandle(p0: number): number;
export declare function networkSetTransitionVisibilityLock(p0: boolean, p1: boolean): void;
/**
 * Used by MetricVEHICLE_DIST_DRIVEN
 * @param toggle
 */
export declare function networkSetVehicleDrivenInTestDrive(toggle: boolean): void;
/**
 * Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN
 * @param location
 */
export declare function networkSetVehicleDrivenLocation(location: number): void;
export declare function networkSetVoiceActive(toggle: boolean): void;
export declare function networkSetVoiceChannel(channel: number): void;
export declare function networkShouldShowPromotionAlertScreen(): boolean;
/**
 * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
 */
export declare function networkShouldShowStrictNatWarning(): boolean;
export declare function networkShowAccountUpgradeUi(): void;
/**
 * Does nothing (it's a nullsub).
 * @param player
 */
export declare function networkShowChatRestrictionMsc(player: number): void;
export declare function networkShowProfileUi(gamerHandle: number): number;
/**
 * This native does absolutely nothing, just a nullsub
 */
export declare function networkShowPsnUgcRestriction(): void;
export declare function networkSkipRadioResetNextClose(): void;
export declare function networkSkipRadioResetNextOpen(): void;
/**
 * Returns true if dinput8.dll is present in the game directory.
 * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
 */
export declare function networkSkipRadioWarning(): boolean;
export declare function networkSpendAgency(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpendApartmentUtilities(amount: number, p1: boolean, p2: boolean, data: number): number;
export declare function networkSpendArcade(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpendArcadeMgmt(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpendArenaPremium(amount: number, p1: boolean, p2: boolean): void;
/**
 * type either, 1 for cam spectate, 2 for drone
 * @param amount
 * @param type
 * @param p2
 * @param p3
 */
export declare function networkSpendArenaSpectatorBox(amount: number, type: number, p2: boolean, p3: boolean): void;
export declare function networkSpendAutoshopModify(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpendBeachParty(p0: number): void;
export declare function networkSpendBikeShop(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBoss(p0: number, p1: number, p2: number): void;
export declare function networkSpendBountyHunterMission(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpendBusinessPropertyFees(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuyAcidLab(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuyAgency(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuyArcade(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuyArena(amount: number, p1: boolean, p2: boolean, p3: string): void;
export declare function networkSpendBuyAutoshop(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuyCasino(amount: number, p1: boolean, p2: boolean, data: number): number;
export declare function networkSpendBuyMfgarage(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuySub(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendBuySupplies(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendCarClubBar(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendCarClubMembership(amount1: number, p1: number, p2: number, amount2: number, p4: number): void;
export declare function networkSpendCarClubTakeover(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendCasinoClub(amount1: number, p1: number, p2: boolean, p3: number, p4: number, p5: number, p6: number, amount2: number, p8: number): void;
export declare function networkSpendCasinoGeneric(amount: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpendCasinoHeist(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): void;
export declare function networkSpendCasinoHeistSkipMission(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendCasinoMembership(amount: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendCompSuv(p0: number, p1: number, p2: number, p3: number): void;
/**
 * Hardcoded to return 0.
 * @param amount
 */
export declare function networkSpendEarnedFromBankAndWallets(amount: number): number;
export declare function networkSpendGangopsCannon(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendGangopsRepairCost(p0: number, p1: number, p2: number): void;
export declare function networkSpendGangopsSkipMission(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendGangopsStartStrand(type: number, amount: number, p2: boolean, p3: boolean): void;
export declare function networkSpendGangopsTripSkip(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpendGoon(p0: number, p1: number, amount: number): void;
export declare function networkSpendGunrunning(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendHidden(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendInteractionMenuAbility(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendIslandHeist(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendMakeItRain(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpendNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendNightclubBarDrink(amount: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpendPlayArcade(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpendRenameAcidLab(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendRenameAcidProduct(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendSetCommonFields(p0: number, p1: number, p2: number, p3: boolean): void;
export declare function networkSpendSetDiscount(p0: boolean): void;
export declare function networkSpendSourceBike(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendSpinTheWheelPayment(amount: number, p1: number, p2: boolean): void;
export declare function networkSpendSubmarine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function networkSpendSupply(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendSuvFstTrvl(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendUpgradeAcidLabArmor(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendUpgradeAcidLabEquipment(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendUpgradeAcidLabMines(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendUpgradeAcidLabScoop(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendUpgradeAgency(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendUpgradeArcade(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendUpgradeArena(amount: number, p1: boolean, p2: boolean, p3: string): void;
export declare function networkSpendUpgradeAutoshop(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendUpgradeCasino(amount: number, p1: boolean, p2: boolean, data: number): number;
export declare function networkSpendUpgradeMfgarage(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendUpgradeSub(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpendVehicleRequested(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpentAirFreight(hangarCargoSourcingPrice: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number, warehouseId: number, warehouseSlot: number): void;
export declare function networkSpentAmmoDrop(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentArenaJoinSpectator(amount: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpentArrestBail(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentBallisticEquipment(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentBankInterest(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentBetting(amount: number, p1: number, matchId: string, p3: boolean, p4: boolean): void;
export declare function networkSpentBoatPickup(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentBossGoon(amount: number, p1: boolean, p2: boolean): boolean;
export declare function networkSpentBounty(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentBullShark(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentBuyBase(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentBuyBunker(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentBuyOfftheradar(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentBuyPassiveMode(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentBuyRevealPlayers(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentBuyTiltrotor(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentBuyTruck(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentBuyWantedlevel(p0: number, p2: boolean, p3: boolean, p4: number): number;
export declare function networkSpentCallPlayer(p0: number, p2: boolean, p3: boolean): number;
export declare function networkSpentCargoSourcing(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function networkSpentCarwash(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void;
export declare function networkSpentCashDrop(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentChangeAppearance(p0: number, p1: number, p2: number): void;
export declare function networkSpentCinema(p0: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpentEmployAssassins(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentFromRockstar(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentHangarStaffCharges(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentHangarUtilityCharges(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentHeliPickup(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentHireMercenary(p0: number, p1: boolean, p2: boolean, p3: number): void;
/**
 * Only used once in a script (am_contact_requests)
 * p1 = 0
 * p2 = 1
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export declare function networkSpentHireMugger(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentHoldups(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentImportExportRepair(p0: number, p1: number, p2: number): void;
export declare function networkSpentInStripclub(p0: number, p1: boolean, p2: number, p3: boolean): void;
export declare function networkSpentJobSkip(amount: number, matchId: string, p2: boolean, p3: boolean): void;
export declare function networkSpentJukebox(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentMcAbility(p0: number, p1: number, p2: number, p3: number, p4: number): void;
/**
 * Hash p3 = MISSILE_JAMMER
 * @param amount
 * @param fromBank
 * @param fromBankAndWallet
 * @param p3
 */
export declare function networkSpentMissileJammer(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number): void;
export declare function networkSpentMoveSubmarine(p0: number, p1: number, p2: number): void;
export declare function networkSpentMoveYacht(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentNightclubEntryFee(player: number, amount: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpentNoCops(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentOrderBodyguardVehicle(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentOrderWarehouseVehicle(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPaHeliPickup(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPaServiceDancer(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPaServiceHeli(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPaServiceImpound(p0: number, p1: number, p2: number): void;
export declare function networkSpentPaServiceSnack(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPaServiceVehicle(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPayBusinessSupplies(p0: number, p1: number, p2: number, p3: number): void;
/**
 * According to how I understood this in the freemode script alone,
 * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
 *
 * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
 *
 * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
 *
 * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
 *
 * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
 * bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
 * @param amount
 * @param vehicleModel
 * @param gamerHandle
 * @param notBankrupt
 * @param hasTheMoney
 */
export declare function networkSpentPayVehicleInsurancePremium(amount: number, vehicleModel: number, notBankrupt: boolean, hasTheMoney: boolean): number;
export declare function networkSpentPlayerHealthcare(p0: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpentProstitutes(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentPurchaseBusinessProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPurchaseClubHouse(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPurchaseHackerTruck(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPurchaseHangar(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPurchaseImpexpWarehouseProperty(amount: number, p2: boolean, p3: boolean): number;
export declare function networkSpentPurchaseNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPurchaseOfficeGarage(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentPurchaseOfficeProperty(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpentPurchaseWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentRdrHatchetBonus(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentRehireDj(amount: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpentRenameOrganization(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentRequestHeist(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentRequestJob(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentRobbedByMugger(amount: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpentSkipCargoSourceSetup(amount: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number): void;
/**
 * Hash p3 = STEALTH_MODULE
 * @param amount
 * @param fromBank
 * @param fromBankAndWallet
 * @param p3
 */
export declare function networkSpentStealthModule(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number): void;
export declare function networkSpentTaxi(amount: number, p1: boolean, p2: boolean, p3: number, p4: number): void;
export declare function networkSpentTelescope(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentTradeBusinessProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentTradeImpexpWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeBase(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeBusinessProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeClubHouse(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeHackerTruck(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeHangar(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeImpexpWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeOfficeGarage(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeOfficeProperty(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function networkSpentUpgradeTiltrotor(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeTruck(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpgradeWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentUpradeBunker(p0: number, p1: number, p2: number, p3: number): void;
export declare function networkSpentVehicleExportMods(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
export declare function networkSpentWager(p0: number, p1: number, amount: number): void;
export declare function networkStartCommunicationPermissionsCheck(p0: number): number;
/**
 * One of the first things it does is get the players ped.
 * Then it calls a function that is used in some tasks and ped based functions.
 * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 * @param p6
 * @param p7
 * @param flags
 */
export declare function networkStartRespawnSearchForPlayer(player: number, x: number, y: number, z: number, radius: number, p5: number, p6: number, p7: number, flags: number): boolean;
/**
 * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
 * @param player
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p8
 * @param p9
 * @param p10
 * @param flags
 */
export declare function networkStartRespawnSearchInAngledAreaForPlayer(player: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p8: number, p9: number, p10: number, flags: number): boolean;
export declare function networkStartSoloTutorialSession(): void;
export declare function networkStartSynchronisedScene(netScene: number): void;
/**
 * Always returns -1. Seems to be XB1 specific.
 * @param netHandle
 */
export declare function networkStartUserContentPermissionsCheck(netHandle: number): [number, number];
export declare function networkStopSynchronisedScene(netScene: number): void;
export declare function networkStoreInviteThroughRestart(): void;
export declare function networkSuppressInvite(toggle: boolean): void;
/**
 * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
 */
export declare function networkTextChatIsTyping(): boolean;
export declare function networkTransitionAddStage(hash: number, p1: number, p2: number, state: number, p4: number): boolean;
export declare function networkTransitionBlockJoinRequests(p0: boolean): void;
export declare function networkTransitionFinish(p0: number, p1: number, p2: number): boolean;
export declare function networkTransitionSetActivityIsland(p0: number): void;
export declare function networkTransitionSetContentCreator(p0: number): void;
export declare function networkTransitionSetInProgress(p0: number): void;
export declare function networkTransitionStart(p0: number, p1: number, p2: number, p3: number): boolean;
/**
 * Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
 * @param entity
 * @param toggle
 */
export declare function networkTriggerDamageEventForZeroDamage(entity: number, toggle: boolean): void;
export declare function networkTriggerDamageEventForZeroWeaponHash(entity: number, toggle: boolean): void;
/**
 * Returns defaultValue if the tunable doesn't exist.
 * @param tunableContext
 * @param tunableName
 * @param defaultValue
 */
export declare function networkTryAccessTunableBoolHash(tunableContext: number, tunableName: number, defaultValue: boolean): boolean;
export declare function networkTryToSetThisScriptIsNetworkScript(p0: number, p1: boolean, p2: number): boolean;
export declare function networkUgcNav(p0: number, p1: number): void;
export declare function networkUnregisterNetworkedEntity(entity: number): void;
export declare function networkUpdateLoadScene(): boolean;
export declare function networkUseHighPrecisionBlending(netID: number, toggle: boolean): void;
/**
 * Implemented only for trains.
 * @param vehicle
 * @param toggle
 */
export declare function networkUseHighPrecisionTrainBlending(vehicle: number, toggle: boolean): void;
export declare function networkUseLogarithmicBlendingThisFrame(entity: number): void;
export declare function networkWaitingPopClearTutorialSession(): boolean;
export declare function networkWasGameSuspended(): boolean;
export declare function networkYohanSourceGoods(p0: number, p1: number, p2: number, p3: number): void;
/**
 * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
 * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
 * Returns True if success, used only 7 times in decompiled scripts of 1868
 * @param posX
 * @param posY
 * @param posZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param radius
 * @param p7
 */
export declare function newLoadSceneStart(posX: number, posY: number, posZ: number, offsetX: number, offsetY: number, offsetZ: number, radius: number, p7: number): boolean;
export declare function newLoadSceneStartSphere(x: number, y: number, z: number, radius: number, p4: number): boolean;
export declare function newLoadSceneStop(): void;
/**
 * p0 was always 2 in R* scripts.
 * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
 * @param p0
 */
export declare function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0: number): void;
/**
 * Lets objects spawn online simply do it like this:
 *
 * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
 * @param object
 */
export declare function objToNet(object: number): number;
/**
 * This loads the GTA:O dlc map parts (high end garages, apartments).
 * Works in singleplayer.
 * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
 */
export declare function onEnterMp(): void;
/**
 * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
 * Works in singleplayer.
 */
export declare function onEnterSp(): void;
/**
 * is this like setting is as no longer needed?
 * @param object
 */
export declare function onlyCleanUpObjectWhenOutOfRange(object: number): void;
export declare function openAllBarriersForRace(p0: boolean): void;
export declare function openBombBayDoors(vehicle: number): void;
export declare function openCommerceStore(p0: string, p1: string, p2: number): void;
export declare function openOnlinePoliciesMenu(): void;
/**
 * patrolRoutes found in the b617d scripts:
 * "miss_Ass0",
 * "miss_Ass1",
 * "miss_Ass2",
 * "miss_Ass3",
 * "miss_Ass4",
 * "miss_Ass5",
 * "miss_Ass6",
 * "MISS_PATROL_6",
 * "MISS_PATROL_7",
 * "MISS_PATROL_8",
 * "MISS_PATROL_9",
 * "miss_Tower_01",
 * "miss_Tower_02",
 * "miss_Tower_03",
 * "miss_Tower_04",
 * "miss_Tower_05",
 * "miss_Tower_06",
 * "miss_Tower_07",
 * "miss_Tower_08",
 * "miss_Tower_10"
 * @param patrolRoute
 */
export declare function openPatrolRoute(patrolRoute: string): void;
/**
 * Shows a menu for reporting UGC content.
 */
export declare function openReportugcMenu(): void;
export declare function openSequenceTask(taskSequenceId: number): number;
/**
 * Uses the `SOCIAL_CLUB2` scaleform.
 * menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS
 * @param menu
 */
export declare function openSocialClubMenu(menu: number): void;
export declare function orderBossVehicle(p0: number, p1: number, vehicleHash: number): void;
/**
 * Max value for p1 is 15.
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export declare function overrideCamSplineMotionBlur(cam: number, p1: number, p2: number, p3: number): void;
export declare function overrideCamSplineVelocity(cam: number, p1: number, p2: number, p3: number): void;
export declare function overrideFreezeFlags(p0: boolean): void;
export declare function overrideInteriorSmokeEnd(): void;
export declare function overrideInteriorSmokeLevel(level: number): void;
export declare function overrideInteriorSmokeName(name: string): void;
/**
 * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
 * Max scaling seems to be 200.0, normal is 1.0
 * See https://gfycat.com/DetailedHauntingIncatern
 * @param scaling
 */
export declare function overrideLodscaleThisFrame(scaling: number): void;
/**
 * Sets audio flag "OverrideMicrophoneSettings"
 * @param hash
 * @param toggle
 */
export declare function overrideMicrophoneSettings(hash: number, toggle: boolean): void;
export declare function overrideMpTextChatColor(p0: number, hudColor: number): void;
export declare function overrideMpTextChatTeamString(gxtEntryHash: number): void;
export declare function overrideNightvisionLightRange(p0: number): void;
/**
 * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
 * @param ped
 * @param txd
 * @param txn
 */
export declare function overridePedCrewLogoTexture(ped: number, txd: string, txn: string): boolean;
/**
 * Used for helis.
 * @param vehicle
 * @param health
 */
export declare function overridePlaneDamageThrehsold(vehicle: number, health: number): void;
/**
 * Sets audio flag "OverridePlayerGroundMaterial"
 * @param hash
 * @param toggle
 */
export declare function overridePlayerGroundMaterial(hash: number, toggle: boolean): void;
/**
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 *
 * Modified example from "am_imp_exp.c4", line 6406:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]]
 * ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
 * STREAMING::REQUEST_MODEL(vehicleHash);
 * @param scheduleId
 * @param vehicleHash
 */
export declare function overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number): void;
export declare function overrideSaveHouse(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: number, p7: number): boolean;
/**
 * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
 * @param voiceEffect
 */
export declare function overrideTrevorRage(voiceEffect: string): void;
export declare function overrideUnderwaterStream(p0: string, p1: boolean): void;
/**
 * Overrides the vehicle's horn hash.
 * When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
 *
 * vehicle - the vehicle whose horn should be overwritten
 * mute - p1 seems to be an option for muting the horn
 * p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
 * @param vehicle
 * @param override
 * @param hornHash
 */
export declare function overrideVehHorn(vehicle: number, override: boolean, hornHash: number): void;
/**
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
 * @param p0
 */
export declare function packedStatGetIntStatIndex(p0: number): number;
/**
 * Return the local Participant ID
 */
export declare function participantId(): number;
/**
 * Return the local Participant ID.
 *
 * This native is exactly the same as 'PARTICIPANT_ID' native.
 */
export declare function participantIdToInt(): number;
export declare function passKeyboardInputToScaleform(scaleformHandle: number): boolean;
export declare function patchDecalDiffuseMap(decalType: number, textureDict: string, textureName: string): void;
export declare function pauseClock(toggle: boolean): void;
export declare function pauseDeathArrestRestart(toggle: boolean): void;
/**
 * Activates the specified frontend menu context.
 * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
 * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
 * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
 * This basically allows you to hide certain menu sections, or things like instructional buttons.
 * @param contextHash
 */
export declare function pauseMenuActivateContext(contextHash: number): void;
export declare function pauseMenuDeactivateContext(contextHash: number): void;
export declare function pauseMenuGetHairColourIndex(): number;
export declare function pauseMenuGetMouseClickEvent(): [boolean, number, number, number];
export declare function pauseMenuGetMouseHoverIndex(): number;
export declare function pauseMenuGetMouseHoverUniqueId(): number;
export declare function pauseMenuIsContextActive(contextHash: number): boolean;
export declare function pauseMenuIsContextMenuActive(): boolean;
export declare function pauseMenuRedrawInstructionalButtons(p0: number): void;
export declare function pauseMenuSetBusySpinner(p0: boolean, position: number, spinnerIndex: number): void;
export declare function pauseMenuSetWarnOnTabChange(p0: boolean): void;
export declare function pauseMenuceptionGoDeeper(page: number): void;
export declare function pauseMenuceptionTheKick(): void;
export declare function pausePlaybackRecordedVehicle(vehicle: number): void;
export declare function pauseScriptedConversation(p0: boolean): void;
export declare function pauseToggleFullscreenMap(p0: number): void;
/**
 * Checks if the specified sexiness flag is set
 *
 * enum eSexinessFlags
 * {
 * SF_JEER_AT_HOT_PED = 0,
 * SF_HURRIEDFEMALES_SEXY = 1,
 * SF_HOT_PERSON = 2,
 * };
 * @param ped
 * @param sexinessFlag
 */
export declare function pedHasSexinessFlagSet(ped: number, sexinessFlag: number): boolean;
export declare function pedHasUseScenarioTask(ped: number): boolean;
/**
 * gets the network id of a ped
 * @param ped
 */
export declare function pedToNet(ped: number): number;
export declare function phonephotoeditorIsActive(): boolean;
export declare function phonephotoeditorSetFrameTxd(textureDict: string, p1: boolean): boolean;
export declare function phonephotoeditorToggle(p0: boolean): boolean;
export declare function pinInteriorInMemory(interior: number): void;
export declare function pinRopeVertex(ropeId: number, vertex: number, x: number, y: number, z: number): void;
export declare function placeObjectOnGroundOrObjectProperly(object: number): boolean;
export declare function placeObjectOnGroundProperly(object: number): boolean;
/**
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param speechName
 * @param voiceName
 * @param x
 * @param y
 * @param z
 * @param speechParam
 */
export declare function playAmbientSpeechFromPositionNative(speechName: string, voiceName: string, x: number, y: number, z: number, speechParam: string): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 */
export declare function playAnimOnRunningScenario(ped: number, animDict: string, animName: string): void;
/**
 * Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
 * This native is works only when you call it on the ped with right model (ac_chop only ?)
 * Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
 * @param pedHandle
 * @param p1
 * @param speechName
 */
export declare function playAnimalVocalization(pedHandle: number, p1: number, speechName: string): void;
export declare function playBinkMovie(binkMovie: number): void;
/**
 * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
 *
 * p9 is unknown at this time.
 * p10 throughout all the X360 Scripts is always 2.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param cam
 * @param animName
 * @param animDictionary
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param p10
 */
export declare function playCamAnim(cam: number, animName: string, animDictionary: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p9: boolean, p10: number): boolean;
/**
 * Only call found in the b617d scripts:
 *
 * AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundName
 * @param soundsetName
 */
export declare function playDeferredSoundFrontend(soundName: string, soundsetName: string): void;
export declare function playEndCreditsMusic(play: boolean): void;
/**
 * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
 *
 * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animName
 * @param animDict
 * @param p3
 * @param loop
 * @param stayInAnim
 * @param p6
 * @param delta
 * @param bitset
 */
export declare function playEntityAnim(entity: number, animName: string, animDict: string, p3: number, loop: boolean, stayInAnim: boolean, p6: boolean, delta: number, bitset: number): boolean;
export declare function playEntityScriptedAnim(entity: number, blendInDelta: number, blendOutDelta: number): [number, number, number];
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animName
 * @param animDict
 */
export declare function playFacialAnim(ped: number, animName: string, animDict: string): void;
/**
 * Called 38 times in the scripts. There are 5 different audioNames used.
 * One unknown removed below.
 *
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
 * @param audioName
 */
export declare function playMissionCompleteAudio(audioName: string): void;
export declare function playObjectAutoStartAnim(p0: number): void;
/**
 * Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
 *
 * Last 2 parameters always seem to be 0.
 *
 * EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
 *
 * Known Pain IDs
 * ________________________
 *
 * 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
 * 6 - Scream (Short)
 * 7 - Scared Scream (Kinda Long)
 * 8 - On Fire
 *
 * @param ped
 * @param painID
 * @param p1
 * @param p3
 */
export declare function playPain(ped: number, painID: number, p1: number, p3: number): void;
/**
 * Plays ambient speech. See also _0x5C57B85D.
 *
 * See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
 *
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param speechParam
 * @param p3
 */
export declare function playPedAmbientSpeechAndCloneNative(ped: number, speechName: string, speechParam: string, p3: number): void;
/**
 * Plays ambient speech. See also _0x444180DB.
 *
 * ped: The ped to play the ambient speech.
 * speechName: Name of the speech to play, eg. "GENERIC_HI".
 * speechParam: Can be one of the following:
 * SPEECH_PARAMS_STANDARD
 * SPEECH_PARAMS_ALLOW_REPEAT
 * SPEECH_PARAMS_BEAT
 * SPEECH_PARAMS_FORCE
 * SPEECH_PARAMS_FORCE_FRONTEND
 * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
 * SPEECH_PARAMS_FORCE_NORMAL
 * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
 * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
 * SPEECH_PARAMS_FORCE_SHOUTED
 * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
 * SPEECH_PARAMS_MEGAPHONE
 * SPEECH_PARAMS_HELI
 * SPEECH_PARAMS_FORCE_MEGAPHONE
 * SPEECH_PARAMS_FORCE_HELI
 * SPEECH_PARAMS_INTERRUPT
 * SPEECH_PARAMS_INTERRUPT_SHOUTED
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE
 * SPEECH_PARAMS_INTERRUPT_FRONTEND
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
 * SPEECH_PARAMS_ADD_BLIP
 * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
 * SPEECH_PARAMS_ADD_BLIP_FORCE
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
 * SPEECH_PARAMS_SHOUTED
 * SPEECH_PARAMS_SHOUTED_CLEAR
 * SPEECH_PARAMS_SHOUTED_CRITICAL
 *
 * Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
 *
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param speechParam
 * @param p3
 */
export declare function playPedAmbientSpeechNative(ped: number, speechName: string, speechParam: string, p3: number): void;
/**
 * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
 *
 * EX (C#):
 * GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
 *
 * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
 *
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param voiceName
 * @param speechParam
 * @param p4
 */
export declare function playPedAmbientSpeechWithVoiceNative(ped: number, speechName: string, voiceName: string, speechParam: string, p4: boolean): void;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
 *
 * AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 * AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 *
 * @param ringtoneName
 * @param ped
 * @param p2
 */
export declare function playPedRingtone(ringtoneName: string, ped: number, p2: boolean): void;
/**
 * Plays the given police radio message.
 *
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
 * Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
 * @param name
 * @param p1
 */
export declare function playPoliceReport(name: string, p1: number): number;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 * @param p4
 * @param p5
 */
export declare function playSound(soundId: number, audioName: string, audioRef: string, p3: boolean, p4: number, p5: boolean): void;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
 *
 * gtaforums.com/topic/795622-audio-for-mods
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param x
 * @param y
 * @param z
 * @param audioRef
 * @param isNetwork
 * @param range
 * @param p8
 */
export declare function playSoundFromCoord(soundId: number, audioName: string, x: number, y: number, z: number, audioRef: string, isNetwork: boolean, range: number, p8: boolean): void;
/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0
 * No changes made in b678d.
 *
 * gtaforums.com/topic/795622-audio-for-mods
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param entity
 * @param audioRef
 * @param isNetwork
 * @param p5
 */
export declare function playSoundFromEntity(soundId: number, audioName: string, entity: number, audioRef: string, isNetwork: boolean, p5: number): void;
/**
 * Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
 * p1 is always the model of p2
 * @param soundId
 * @param model
 * @param entity
 * @param soundSetHash
 * @param p4
 * @param p5
 */
export declare function playSoundFromEntityHash(soundId: number, model: number, entity: number, soundSetHash: number, p4: number, p5: number): void;
/**
 * List: https://pastebin.com/DCeRiaLJ
 *
 * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
 *
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 */
export declare function playSoundFrontend(soundId: number, audioName: string, audioRef: string, p3: boolean): void;
/**
 * Used with AUDIO::LOAD_STREAM
 *
 * Example from finale_heist2b.c4:
 * TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2 -- [[14]] ], l_4C8[2 -- [[14]] ]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
 * PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2 -- [[14]] ]._f7, 0.0);
 * PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2 -- [[14]] ], 0, 0);
 * PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2 -- [[14]] ], 38, 1);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2 -- [[14]] ], 1);
 * if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
 * AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0 -- [[1]] ]);
 * }
 * @param object
 */
export declare function playStreamFromObject(object: number): void;
export declare function playStreamFromPed(ped: number): void;
export declare function playStreamFromPosition(x: number, y: number, z: number): void;
export declare function playStreamFromVehicle(vehicle: number): void;
export declare function playStreamFrontend(): void;
export declare function playSynchronizedAudioEvent(sceneID: number): boolean;
/**
 * Examples:
 *
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
 *
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7 -- [[1]] ], l_F4D[15 -- [[1]] ], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
 * @param p0
 * @param p1
 * @param animName
 * @param animDictionary
 */
export declare function playSynchronizedCamAnim(p0: number, p1: number, animName: string, animDictionary: string): boolean;
/**
 * p4 and p7 are usually 1000.0f.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param syncedScene
 * @param animation
 * @param propName
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export declare function playSynchronizedEntityAnim(entity: number, syncedScene: number, animation: string, propName: string, p4: number, p5: number, p6: number, p7: number): boolean;
/**
 * p6,p7 probably animname and animdict
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export declare function playSynchronizedMapEntityAnim(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: string, p7: string, p8: number, p9: number, p10: number, p11: number): boolean;
export declare function playTennisDiveAnim(ped: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 * @param p5
 */
export declare function playTennisSwingAnim(ped: number, animDict: string, animName: string, p3: number, p4: number, p5: boolean): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export declare function playVehicleDoorCloseSound(vehicle: number, doorId: number): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export declare function playVehicleDoorOpenSound(vehicle: number, doorId: number): void;
/**
 * Only 1 match. ob_sofa_michael.
 *
 * PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export declare function playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
/**
 * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 */
export declare function playerDetachVirtualBound(): void;
/**
 * This returns YOUR 'identity' as a Player type.
 *
 * Always returns 0 in story mode.
 */
export declare function playerId(): number;
/**
 * Returns current player ped
 */
export declare function playerPedId(): number;
export declare function playstatsAbandonedMc(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsAcidMissionEnd(p0: number): void;
export declare function playstatsAcidRnd(p0: number): void;
export declare function playstatsAcquiredHiddenPackage(p0: number): void;
export declare function playstatsActivityDone(p0: number, activityId: number): void;
export declare function playstatsAppendDirectorMetric(p0: number): number;
export declare function playstatsArcadeCabinet(p0: number): void;
export declare function playstatsArcadeGame(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
export declare function playstatsArcadeLoveMatch(p0: number, p1: number): void;
export declare function playstatsArenaWarsEnded(data: number): number;
export declare function playstatsArenaWarsSpectator(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsAttritionStageEnd(p0: number): void;
export declare function playstatsAwardBadSport(id: number): void;
export declare function playstatsAwardNav(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsAwardXp(amount: number, type: number, category: number): void;
export declare function playstatsBackgroundScriptAction(action: string, value: number): void;
export declare function playstatsBanAlert(p0: number): void;
export declare function playstatsBcCarJacking(p0: number): void;
export declare function playstatsBcCashing(p0: number): void;
export declare function playstatsBcFindersKeepers(p0: number): void;
export declare function playstatsBcMostWanted(p0: number): void;
export declare function playstatsBcPointToPoint(p0: number): void;
export declare function playstatsBcProtectionRacket(p0: number): void;
export declare function playstatsBcSalvage(p0: number): void;
export declare function playstatsBcSmashAndGrab(p0: number): void;
export declare function playstatsBusinessBattleEnded(p0: number): void;
export declare function playstatsBuyContrabandMission(data: number): number;
export declare function playstatsBwAirFreight(p0: number): void;
export declare function playstatsBwAssault(p0: number): void;
export declare function playstatsBwBellyOfTheBeast(p0: number): void;
export declare function playstatsBwBossonbossdeathmatch(p0: number): void;
export declare function playstatsBwFragileGoods(p0: number): void;
export declare function playstatsBwHeadHunter(p0: number): void;
export declare function playstatsBwHuntTheBoss(p0: number): void;
export declare function playstatsBwSightseer(p0: number): void;
export declare function playstatsBwYatchattack(p0: number): void;
export declare function playstatsCarclubChallenge(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsCarclubPoints(p0: number): void;
export declare function playstatsCarclubPrize(p0: number, vehicleModel: number): void;
export declare function playstatsCasinoBlackjack(p0: number): void;
export declare function playstatsCasinoBlackjackLight(p0: number): void;
export declare function playstatsCasinoChip(p0: number): void;
export declare function playstatsCasinoInsideTrack(p0: number): void;
export declare function playstatsCasinoInsideTrackLight(p0: number): void;
export declare function playstatsCasinoLuckySeven(p0: number): void;
export declare function playstatsCasinoRoulette(p0: number): void;
export declare function playstatsCasinoRouletteLight(p0: number): void;
export declare function playstatsCasinoSlotMachine(p0: number): void;
export declare function playstatsCasinoSlotMachineLight(p0: number): void;
export declare function playstatsCasinoStoryMissionEnded(p0: number, p1: number): void;
export declare function playstatsCasinoThreeCardPoker(p0: number): void;
export declare function playstatsCasinoThreeCardPokerLight(p0: number): void;
export declare function playstatsChangeMcOutfit(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsChangeMcRole(p0: number, p1: number, p2: number, p3: number, role: number, p5: number, p6: number): void;
export declare function playstatsCheatApplied(cheat: string): void;
export declare function playstatsClothChange(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsCollectiblePickedUp(p0: number, objectHash: number, p2: number, p3: number, moneyAmount: number, rpAmount: number, chipsAmount: number, p7: number, p8: number, p9: number, p10: number): void;
export declare function playstatsCopyRankIntoNewSlot(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
export declare function playstatsCrateCreated(p0: number, p1: number, p2: number): void;
export declare function playstatsCrateDropMissionDone(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
export declare function playstatsCreateMatchHistoryId2(): [boolean, number, number];
export declare function playstatsDarCheckpoint(data: number): number;
export declare function playstatsDefendContrabandMission(data: number): number;
export declare function playstatsDjMissionEnded(p0: number): void;
export declare function playstatsDjUsage(p0: number, p1: number): void;
export declare function playstatsDroneUsage(p0: number, p1: number, p2: number): void;
export declare function playstatsDupeDetected(data: number): number;
export declare function playstatsEarnedMcPoints(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function playstatsEnterSessionPack(data: number): number;
export declare function playstatsExtraEvent(p0: number): void;
export declare function playstatsFastTrvl(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): void;
/**
 * p3: VehicleConversion, SCAdminCashGift
 * p4: 0
 * @param posX
 * @param posY
 * @param posZ
 * @param p3
 * @param p4
 * @param amount
 */
export declare function playstatsFlowLow(posX: number, posY: number, posZ: number, p3: string, p4: number, amount: number): void;
export declare function playstatsFmEventAtob(p0: number): void;
export declare function playstatsFmEventChallenges(p0: number): void;
export declare function playstatsFmEventCheckpointcollection(p0: number): void;
export declare function playstatsFmEventCompetitiveurbanwarfare(p0: number): void;
export declare function playstatsFmEventCriminaldamage(p0: number): void;
export declare function playstatsFmEventDeaddrop(p0: number): void;
export declare function playstatsFmEventHotproperty(p0: number): void;
export declare function playstatsFmEventHuntbeast(p0: number): void;
export declare function playstatsFmEventKingofthecastle(p0: number): void;
export declare function playstatsFmEventPasstheparcel(p0: number): void;
export declare function playstatsFmEventPennedin(p0: number): void;
export declare function playstatsFmEventUrbanwarfare(p0: number): void;
export declare function playstatsFmEventVehicletarget(p0: number): void;
export declare function playstatsFmHeistPrepEnded(data: number): number;
export declare function playstatsFmMissionEnd(p0: number, p1: number, p2: number): void;
export declare function playstatsFreemodeCasinoMissionEnded(data: number): number;
export declare function playstatsFriendActivity(p0: number, p1: boolean): void;
export declare function playstatsGunrunningMissionEnded(data: number): number;
export declare function playstatsGunrunningRnd(p0: number): void;
export declare function playstatsHeist3Drone(p0: number): void;
export declare function playstatsHeist3Finale(p0: number): void;
export declare function playstatsHeist3Hack(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function playstatsHeist3Prep(p0: number): void;
export declare function playstatsHeist4Finale(p0: number): void;
export declare function playstatsHeist4Hack(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsHeist4Prep(p0: number): void;
export declare function playstatsHeistSaveCheat(hash: number, p1: number): void;
export declare function playstatsHitContrabandDestroyLimit(p0: number): void;
export declare function playstatsHoldUpMissionDone(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsHubEntry(p0: number): void;
export declare function playstatsHubExit(p0: number): void;
export declare function playstatsIdle(p0: number, p1: number, p2: number): void;
export declare function playstatsIdleKick(msStoodIdle: number): void;
export declare function playstatsImpexpMissionEnded(p0: number): void;
export declare function playstatsImportExportMissionDone(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsInstMissionEnd(p0: number): void;
export declare function playstatsInstancedHeistEnded(p1: number, p2: number, p3: number): number;
export declare function playstatsInventory(p0: number): void;
export declare function playstatsJobActivityEnd(): [number, number, number, number];
export declare function playstatsJobBend(): [number, number, number, number];
export declare function playstatsJobLtsEnd(): [number, number, number, number];
export declare function playstatsJobLtsRoundEnd(): [number, number, number, number];
export declare function playstatsKillYourself(): void;
export declare function playstatsLeaveJobChain(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsMasterControl(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsMatchStarted(p0: number, p1: number, p2: number): void;
export declare function playstatsMcClubhouseActivity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
export declare function playstatsMcFormationEnds(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
export declare function playstatsMcKilledRivalMcMember(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsMcRequestBike(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsMinigameUsage(p0: number, p1: number, p2: number): void;
export declare function playstatsMissionCheckpoint(p0: string, p1: number, p2: number, p3: number): void;
export declare function playstatsMissionEnded(p0: number): void;
export declare function playstatsMissionOver(p0: string, p1: number, p2: number, p3: boolean, p4: boolean, p5: boolean): void;
export declare function playstatsMissionStarted(p0: string, p1: number, p2: number, p3: boolean): void;
export declare function playstatsMissionVote(p0: number): void;
export declare function playstatsNightclubMissionEnded(p0: number): void;
export declare function playstatsNjvsVote(p0: number): void;
export declare function playstatsNpcInvite(p0: string): void;
export declare function playstatsNpcPhone(p0: number): number;
/**
 * This native does absolutely nothing, just a nullsub
 * @param totalTimeMs
 * @param p1
 * @param p2
 */
export declare function playstatsOddjobDone(totalTimeMs: number, p1: number, p2: boolean): void;
export declare function playstatsPegasusAsPersonalAircraft(modelHash: number): void;
export declare function playstatsPimenuHideOptions(data: number): number;
export declare function playstatsPlayerStyle(p0: number): void;
export declare function playstatsPropChange(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsQuickfixTool(element: number, item: string): void;
export declare function playstatsQuitMode(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsRaceCheckpoint(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsRaceToPointMissionDone(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsRandomEvent(p0: number): void;
export declare function playstatsRandomMissionDone(name: string, p1: number, p2: number, p3: number): void;
export declare function playstatsRankUp(rank: number): void;
export declare function playstatsRecoverContrabandMission(data: number): number;
export declare function playstatsRivalBehavior(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
export declare function playstatsRobberyFinale(p0: number): void;
export declare function playstatsRobberyPrep(p0: number): void;
export declare function playstatsRosBet(amount: number, act: number, player: number, cm: number): void;
export declare function playstatsSellContrabandMission(data: number): number;
export declare function playstatsSetJoinType(joinType: number): void;
export declare function playstatsShopItem(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsShopmenuNav(p0: number, p1: number, p2: number): void;
export declare function playstatsShowroomNav(p0: number, p1: number, entity: number): void;
/**
 * Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.
 * @param data
 */
export declare function playstatsShowroomOverview(data: number): number;
export declare function playstatsSmugglerMissionEnded(data: number): number;
export declare function playstatsSpentPiCustomLoadout(amount: number): void;
export declare function playstatsSpinWheel(p0: number, p1: number, p2: number, p3: number): void;
/**
 * Allows CEventNetworkStuntPerformed to be triggered.
 */
export declare function playstatsStartTrackingStunts(): void;
export declare function playstatsStartedSessionInOfflinemode(): void;
export declare function playstatsStoneHatchetEnded(data: number): number;
/**
 * Disallows CEventNetworkStuntPerformed to be triggered.
 */
export declare function playstatsStopTrackingStunts(): void;
export declare function playstatsSubWeap(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsSwitchMcEmblem(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsSwitchPassiveMode(p0: boolean, p1: number, p2: number, p3: number): void;
export declare function playstatsVehDel(bossId1: number, bossId2: number, bossType: number, vehicleID: number, reason: number): void;
export declare function playstatsWarehouseMissionEnded(p0: number): void;
/**
 * This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
 * @param weaponHash
 * @param componentHashTo
 * @param componentHashFrom
 */
export declare function playstatsWeaponModeChange(weaponHash: number, componentHashTo: number, componentHashFrom: number): void;
export declare function playstatsWebsiteVisited(scaleformHash: number, p1: number): void;
/**
 * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
 */
export declare function plmGetConstrainedDurationMs(): number;
/**
 * aka "constrained"
 */
export declare function plmIsInConstrainedMode(): boolean;
export declare function pointCamAtCoord(cam: number, x: number, y: number, z: number): void;
/**
 * p5 always seems to be 1 i.e TRUE
 * @param cam
 * @param entity
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export declare function pointCamAtEntity(cam: number, entity: number, p2: number, p3: number, p4: number, p5: boolean): void;
/**
 * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
 * @param cam
 * @param ped
 * @param boneIndex
 * @param x
 * @param y
 * @param z
 * @param p6
 */
export declare function pointCamAtPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, p6: boolean): void;
/**
 * Pops off the "roof" bone in the direction of the specified offset from the vehicle.
 * @param vehicle
 * @param x
 * @param y
 * @param z
 */
export declare function popOffVehicleRoofWithImpulse(vehicle: number, x: number, y: number, z: number): void;
/**
 * Detaches the vehicle's windscreen.
 * For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
 * @param vehicle
 */
export declare function popOutVehicleWindscreen(vehicle: number): void;
export declare function popTimecycleModifier(): void;
/**
 * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
 */
export declare function populateNow(): void;
export declare function pow(base: number, exponent: number): number;
/**
 * This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
 * For instance, GTA:O opening cutscene.
 * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
 * https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
 * @param srl
 */
export declare function prefetchSrl(srl: string): void;
export declare function preloadBusyspinner(): void;
export declare function preloadCloudHat(name: string): void;
export declare function preloadScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function preloadScriptPhoneConversation(p0: boolean, p1: boolean): void;
export declare function preloadVehicleAudioBank(vehicleModel: number): void;
export declare function preloadVehicleMod(vehicle: number, modType: number, modIndex: number): void;
/**
 * Example:
 *
 * bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 */
export declare function prepareAlarm(alarmName: string): boolean;
/**
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
export declare function prepareMusicEvent(eventName: string): boolean;
/**
 * p1 is always 0 in the scripts
 * @param audioEvent
 * @param p1
 */
export declare function prepareSynchronizedAudioEvent(audioEvent: string, p1: number): boolean;
export declare function prepareSynchronizedAudioEventForScene(sceneID: number, audioEvent: string): boolean;
export declare function presenceEventUpdatestatFloat(statHash: number, value: number, p2: number): void;
export declare function presenceEventUpdatestatInt(statHash: number, value: number, p2: number): void;
export declare function presenceEventUpdatestatIntWithString(statHash: number, value: number, p2: number, string: string): void;
/**
 * Only one match in the scripts:
 *
 * GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
 * @param timecycleModifierName
 */
export declare function presetInteriorAmbientCache(timecycleModifierName: string): void;
export declare function preventArrestStateThisFrame(): void;
export declare function preventCollectionOfPortablePickup(object: number, p1: boolean, p2: boolean): void;
/**
 * This isn't a hash collision.
 * @param p0
 * @param p1
 * @param p2
 */
export declare function processCashGift(p2: string): [string, number, number];
/**
 * Called to update entity attachments.
 * @param entity
 */
export declare function processEntityAttachments(entity: number): void;
export declare function procgrassDisableAmbscalescan(): void;
export declare function procgrassDisableCullsphere(handle: number): void;
export declare function procgrassEnableAmbscalescan(): void;
export declare function procgrassEnableCullsphere(handle: number, x: number, y: number, z: number, scale: number): void;
export declare function procgrassIsCullsphereEnabled(handle: number): boolean;
export declare function pulseBlip(blip: number): void;
export declare function pushTimecycleModifier(): void;
export declare function queryMovieMeshSetState(p0: number): number;
export declare function queueMissionRepeatLoad(): boolean;
/**
 * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
 * Returns 1 if the message isn't currently on screen
 */
export declare function queueMissionRepeatSave(): boolean;
export declare function queueMissionRepeatSaveForBenchmarkTest(): boolean;
/**
 * 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
 * @param p0
 */
export declare function queueOperationToCreateSortedListOfPhotos(p0: number): boolean;
/**
 * Exits the game and downloads a fresh social club update on next restart.
 */
export declare function quitGame(): void;
export declare function raiseConvertibleRoof(vehicle: number, instantlyRaise: boolean): void;
export declare function reactivateAllObjectBrainsThatAreWaitingTillOutOfRange(): void;
export declare function reactivateAllWorldBrainsThatAreWaitingTillOutOfRange(): void;
/**
 * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
 *
 * Here are possible values of argument -
 *
 * "ob_tv"
 * "launcher_Darts"
 * @param scriptName
 */
export declare function reactivateNamedObjectBrainsWaitingTillOutOfRange(scriptName: string): void;
/**
 * Possible values:
 *
 * act_cinema
 * am_mp_carwash_launch
 * am_mp_carwash_control
 * am_mp_property_ext
 * chop
 * fairgroundHub
 * launcher_BasejumpHeli
 * launcher_BasejumpPack
 * launcher_CarWash
 * launcher_golf
 * launcher_Hunting_Ambient
 * launcher_MrsPhilips
 * launcher_OffroadRacing
 * launcher_pilotschool
 * launcher_Racing
 * launcher_rampage
 * launcher_rampage
 * launcher_range
 * launcher_stunts
 * launcher_stunts
 * launcher_tennis
 * launcher_Tonya
 * launcher_Triathlon
 * launcher_Yoga
 * ob_mp_bed_low
 * ob_mp_bed_med
 * @param scriptName
 */
export declare function reactivateNamedWorldBrainsWaitingTillOutOfRange(scriptName: string): void;
export declare function recordBrokenGlass(x: number, y: number, z: number, radius: number): void;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 * @param p1
 * @param p2
 */
export declare function recordGreatestMoment(p0: number, p1: number, p2: number): void;
export declare function refillAmmoInstantly(ped: number): boolean;
export declare function refreshClosestOceanShoreline(): void;
export declare function refreshInterior(interior: number): void;
export declare function refreshPlayerListStats(p0: number): boolean;
export declare function refreshWaypoint(): void;
export declare function registerBoolToSave(name: string): number;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 * @param p1
 */
export declare function registerEffectForReplayEditor(p0: string, p1: boolean): void;
export declare function registerEntityForCutscene(cutscenePed: number, cutsceneEntName: string, p2: number, modelHash: number, p4: number): void;
export declare function registerEnumToSave(name: string): number;
export declare function registerFloatToSave(name: string): number;
/**
 * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
 * @param ped
 * @param radius
 */
export declare function registerHatedTargetsAroundPed(ped: number, radius: number): void;
export declare function registerInt64ToSave(name: string): number;
export declare function registerIntToSave(name: string): number;
export declare function registerNamedRendertarget(name: string, p1: boolean): boolean;
/**
 * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
 */
export declare function registerNoirLensEffect(): void;
/**
 * Registers a script for any object with a specific model hash.
 *
 * BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
 *
 * - Nacorpio
 * @param scriptName
 * @param modelHash
 * @param p2
 * @param activationRange
 * @param p4
 * @param p5
 */
export declare function registerObjectScriptBrain(scriptName: string, modelHash: number, p2: number, activationRange: number, p4: number, p5: number): void;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param ped
 */
export declare function registerPedheadshot(ped: number): number;
export declare function registerPedheadshotHires(ped: number): number;
/**
 * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
 * @param ped
 */
export declare function registerPedheadshotTransparent(ped: number): number;
export declare function registerPostfxBulletImpact(weaponWorldPosX: number, weaponWorldPosY: number, weaponWorldPosZ: number, intensity: number): void;
/**
 * returns savehouseHandle
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export declare function registerSaveHouse(x: number, y: number, z: number, p3: number, p4: string, p5: number, p6: number): number;
/**
 * Registers a protected variable that will be checked for modifications by the anticheat
 * @param variable
 */
export declare function registerScriptVariable(variable: number): number;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export declare function registerScriptWithAudio(p0: number): void;
/**
 * PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
 *
 * l_216 = RECSBRobber1
 * @param ped
 * @param target
 */
export declare function registerTarget(ped: number, target: number): void;
/**
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");
 * @param p0
 * @param name
 */
export declare function registerTextLabel15ToSave(name: string): number;
/**
 * Only found 3 times in decompiled scripts.
 *
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A -- [[6]] ], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
 * @param p0
 * @param name
 */
export declare function registerTextLabel23ToSave(name: string): number;
/**
 * Only found 2 times in decompiled scripts.
 *
 * MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0 -- [[8]] ], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
 * MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A -- [[8]] ], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
 * @param p0
 * @param name
 */
export declare function registerTextLabel31ToSave(name: string): number;
/**
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A -- [[16]] ], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");
 * @param p0
 * @param name
 */
export declare function registerTextLabel63ToSave(name: string): number;
export declare function registerTextLabelToSave(name: string): number;
export declare function registerWorldPointScriptBrain(scriptName: string, activationRange: number, p2: number): void;
export declare function releaseAllCommerceItemImages(): void;
export declare function releaseAmbientAudioBank(): void;
export declare function releaseBinkMovie(binkMovie: number): void;
/**
 * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
 * To disable the keys, use `0xEC9264727EEC0F28`
 */
export declare function releaseControlOfFrontend(): void;
export declare function releaseMissionAudioBank(): void;
export declare function releaseMovieMeshSet(movieMeshSet: number): void;
export declare function releaseNamedRendertarget(name: string): boolean;
/**
 * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
 * @param audioBank
 */
export declare function releaseNamedScriptAudioBank(audioBank: string): void;
export declare function releasePedPreloadPropData(ped: number): void;
export declare function releasePedPreloadVariationData(ped: number): void;
export declare function releasePedheadshotImgUpload(id: number): void;
export declare function releasePreloadMods(vehicle: number): void;
export declare function releaseScriptAudioBank(): void;
/**
 * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
 * @param entityHit
 */
export declare function releaseScriptGuidFromEntity(entityHit: number): void;
export declare function releaseSoundId(soundId: number): void;
export declare function releaseWeaponAudio(): void;
export declare function reloadMapMenu(): void;
export declare function remapLodscaleRangeThisFrame(p0: number, p1: number, p2: number, p3: number): void;
export declare function remoteCheaterPlayerDetected(player: number, a: number, b: number): boolean;
export declare function removeActionModeAsset(asset: string): void;
export declare function removeAirDefenceSphere(zoneId: number): boolean;
export declare function removeAllAirDefenceSpheres(): void;
export declare function removeAllCoverBlockingAreas(): void;
/**
 * setting the last params to false it does that same so I would suggest its not a toggle
 * @param ped
 * @param p1
 */
export declare function removeAllPedWeapons(ped: number, p1: boolean): void;
/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export declare function removeAllPickupsOfType(pickupHash: number): void;
/**
 * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
 * @param weaponHash
 * @param explode
 */
export declare function removeAllProjectilesOfType(weaponHash: number, explode: boolean): void;
export declare function removeAllShockingEvents(p0: boolean): void;
/**
 * entity must be a valid entity; ped can be NULL
 * @param entity
 * @param ped
 */
export declare function removeAllStickyBombsFromEntity(entity: number, ped: number): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export declare function removeAnimDict(animDict: string): void;
/**
 * Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 *
 * Animation set and clip set are synonymous.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
export declare function removeAnimSet(animSet: string): void;
/**
 * In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
 *
 * E.g.:
 *
 * Ped pped = PLAYER::PLAYER_PED_ID();
 * Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
 * Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
 *
 * works fine.
 * But later attempting to delete it with:
 *
 * Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
 * if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);
 *
 * doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
 *
 * Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
 * -------------
 *
 * Passing the address of the variable instead of the value works for me.
 * e.g.
 * int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
 * HUD::REMOVE_BLIP(&blip);
 *
 *
 * Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
 * @param blip
 */
export declare function removeBlip(blip: number): number;
/**
 * Alias for REMOVE_ANIM_SET.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
export declare function removeClipSet(clipSet: string): void;
/**
 * Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
 * @param ped
 */
export declare function removeCopBlipFromPed(ped: number): void;
export declare function removeCoverBlockingAreasAtPosition(x: number, y: number, z: number): void;
export declare function removeCoverPoint(coverpoint: number): void;
/**
 * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export declare function removeCutFile(cutsceneName: string): void;
export declare function removeCutscene(): void;
export declare function removeDecal(decal: number): void;
export declare function removeDecalsFromObject(obj: number): void;
export declare function removeDecalsFromObjectFacing(obj: number, x: number, y: number, z: number): void;
export declare function removeDecalsFromVehicle(vehicle: number): void;
/**
 * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
 * @param x
 * @param y
 * @param z
 * @param range
 */
export declare function removeDecalsInRange(x: number, y: number, z: number, range: number): void;
export declare function removeDispatchSpawnBlockingArea(p0: number): void;
/**
 * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
 * Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
 * @param doorHash
 * @param p1
 */
export declare function removeDoorFromSystem(doorHash: number, p1: number): void;
export declare function removeEntityFromAudioMixGroup(entity: number, p1: number): void;
/**
 * p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
 * @param calmingQuad
 */
export declare function removeExtraCalmingQuad(calmingQuad: number): void;
export declare function removeFakeConeData(blip: number): void;
export declare function removeForcedObject(x: number, y: number, z: number, p3: number, modelHash: number): void;
export declare function removeFromItemset(item: number, itemset: number): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param handle
 */
export declare function removeGrassCullSphere(handle: number): void;
export declare function removeGroup(groupId: number): void;
/**
 * Removes an IPL from the map.
 *
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 *
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
 *
 * C++:
 * STREAMING::REMOVE_IPL("trevorstrailertidy");
 *
 * iplName = Name of IPL you want to remove.
 * @param iplName
 */
export declare function removeIpl(iplName: string): void;
export declare function removeModelFromCreatorBudget(modelHash: number): void;
/**
 * This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
 * p5 should be false, true does nothing
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
export declare function removeModelHide(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void;
export declare function removeModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void;
export declare function removeMpGamerTag(gamerTagId: number): void;
export declare function removeMultiplayerBankCash(): void;
/**
 * Removes multiplayer cash hud each frame
 */
export declare function removeMultiplayerHudCash(): void;
export declare function removeMultiplayerWalletCash(): void;
export declare function removeNamedPtfxAsset(fxName: string): void;
export declare function removeNavmeshBlockingObject(p0: number): void;
export declare function removeNavmeshRequiredRegions(): void;
export declare function removeObjectHighDetailModel(object: number): void;
export declare function removeParticleFx(ptfxHandle: number, p1: boolean): void;
export declare function removeParticleFxFromEntity(entity: number): void;
export declare function removeParticleFxInRange(X: number, Y: number, Z: number, radius: number): void;
/**
 * Ped will no longer get angry when you stay near him.
 * @param ped
 * @param toggle
 */
export declare function removePedDefensiveArea(ped: number, toggle: boolean): void;
/**
 * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
 * @param ped
 */
export declare function removePedElegantly(ped: number): number;
export declare function removePedFromGroup(ped: number): void;
export declare function removePedHelmet(ped: number, instantly: boolean): void;
export declare function removePedPreferredCoverSet(ped: number): void;
/**
 * Retracts the hook on the cargobob.
 *
 * Note: after you retract it the natives for dropping the hook no longer work
 * @param cargobob
 */
export declare function removePickUpRopeForCargobob(cargobob: number): void;
export declare function removePickup(pickup: number): void;
export declare function removePlayerHelmet(player: number, p2: boolean): void;
export declare function removePlayerTargetableEntity(player: number, entity: number): void;
export declare function removePopMultiplierArea(id: number, p1: boolean): void;
/**
 * Removes population multiplier sphere
 * @param id
 * @param p1
 */
export declare function removePopMultiplierSphere(id: number, p1: boolean): void;
/**
 * Found in the b617d scripts, duplicates removed:
 *
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
 * @param p0
 */
export declare function removePortalSettingsOverride(p0: string): void;
export declare function removePtfxAsset(): void;
export declare function removeRelationshipGroup(groupHash: number): void;
export declare function removeRoadNodeSpeedZone(speedzone: number): boolean;
export declare function removeScaleformScriptHudMovie(hudComponent: number): void;
export declare function removeScenarioBlockingArea(p0: number, p1: boolean): void;
export declare function removeScenarioBlockingAreas(): void;
export declare function removeScriptFire(fireHandle: number): void;
/**
 * Resets values set by SET_SCRIPT_FIRE_POSITION
 */
export declare function removeScriptFirePosition(): void;
export declare function removeShockingEvent(event: number): boolean;
export declare function removeShockingEventSpawnBlockingAreas(): void;
export declare function removeSpecificCoverBlockingAreas(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void;
export declare function removeStealthModeAsset(asset: string): void;
export declare function removeVehicleAsset(vehicleAsset: number): void;
export declare function removeVehicleCombatAvoidanceArea(p0: number): void;
export declare function removeVehicleCrewEmblem(vehicle: number, p1: number): void;
export declare function removeVehicleHighDetailModel(vehicle: number): void;
export declare function removeVehicleMod(vehicle: number, modType: number): void;
/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export declare function removeVehicleRecording(recording: number, script: string): void;
export declare function removeVehicleStuckCheck(vehicle: number): void;
export declare function removeVehicleUpsidedownCheck(vehicle: number): void;
/**
 * windowIndex:
 * 0 = Front Right Window
 * 1 = Front Left Window
 * 2 = Back Right Window
 * 3 = Back Left Window
 * 4 = Unknown
 * 5 = Unknown
 * 6 = Windscreen
 * 7 = Rear Windscreen
 * @param vehicle
 * @param windowIndex
 */
export declare function removeVehicleWindow(vehicle: number, windowIndex: number): void;
export declare function removeVehiclesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void;
export declare function removeWarningMessageOptionItems(): void;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 */
export declare function removeWaypointRecording(name: string): void;
export declare function removeWeaponAsset(weaponHash: number): void;
/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export declare function removeWeaponComponentFromPed(ped: number, weaponHash: number, componentHash: number): void;
/**
 * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
 * @param object
 * @param componentHash
 */
export declare function removeWeaponComponentFromWeaponObject(object: number, componentHash: number): void;
/**
 * This native removes a specified weapon from your selected ped.
 *
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
 *
 * C++:
 * WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
 *
 * The code above removes the knife from the player.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export declare function removeWeaponFromPed(ped: number, weaponHash: number): void;
/**
 * draws circular marker at pos
 * -1 = none
 * 0 = red
 * 1 = green
 * 2 = blue
 * 3 = green larger
 * 4 = nothing
 * 5 = green small
 * @param x
 * @param y
 * @param z
 * @param colorIndex
 */
export declare function renderFakePickupGlow(x: number, y: number, z: number, colorIndex: number): void;
/**
 * ease - smooth transition between the camera's positions
 * easeTime - Time in milliseconds for the transition to happen
 *
 * If you have created a script (rendering) camera, and want to go back to the
 * character (gameplay) camera, call this native with render set to 0.
 * Setting ease to 1 will smooth the transition.
 * @param render
 * @param ease
 * @param easeTime
 * @param p3
 * @param p4
 * @param p5
 */
export declare function renderScriptCams(render: boolean, ease: boolean, easeTime: number, p3: boolean, p4: boolean, p5: number): void;
export declare function renderShadowedLightsWithNoShadows(p0: boolean): void;
/**
 * makes hudColorIndex2 color into hudColorIndex color
 * @param hudColorIndex
 * @param hudColorIndex2
 */
export declare function replaceHudColour(hudColorIndex: number, hudColorIndex2: number): void;
export declare function replaceHudColourWithRgba(hudColorIndex: number, r: number, g: number, b: number, a: number): void;
export declare function replayCancelEvent(): void;
/**
 * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
 *
 * first one seems to be a string of a mission name, second one seems to be a bool/toggle
 *
 * p1 was always 0.
 *
 * @param missionNameLabel
 * @param p1
 */
export declare function replayCheckForEventThisFrame(missionNameLabel: string, p1: number): void;
/**
 * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
 */
export declare function replayControlShutdown(): void;
/**
 * This will disable the ability to make camera changes in R* Editor.
 */
export declare function replayDisableCameraMovementThisFrame(): void;
export declare function replayGetMaxDistanceAllowedFromPlayer(): number;
/**
 * This disable the recording feature and has to be called every frame.
 */
export declare function replayPreventRecordingThisFrame(): void;
export declare function replayRecordBackForTime(p0: number, p1: number, p2: number): void;
export declare function replayResetEventInfo(): void;
export declare function replayStartEvent(p0: number): void;
export declare function replayStopEvent(): void;
/**
 * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
 */
export declare function replaySystemHasRequestedAScriptCleanup(): boolean;
/**
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
 *
 * From am_armybase.ysc.c4:
 *
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
 *
 * -----
 *
 * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7
 *
 * -----
 * crimeType:
 * 1: Firearms possession
 * 2: Person running a red light ("5-0-5")
 * 3: Reckless driver
 * 4: Speeding vehicle (a "5-10")
 * 5: Traffic violation (a "5-0-5")
 * 6: Motorcycle rider without a helmet
 * 7: Vehicle theft (a "5-0-3")
 * 8: Grand Theft Auto
 * 9: ???
 * 10: ???
 * 11: Assault on a civilian (a "2-40")
 * 12: Assault on an officer
 * 13: Assault with a deadly weapon (a "2-45")
 * 14: Officer shot (a "2-45")
 * 15: Pedestrian struck by a vehicle
 * 16: Officer struck by a vehicle
 * 17: Helicopter down (an "AC"?)
 * 18: Civilian on fire (a "2-40")
 * 19: Officer set on fire (a "10-99")
 * 20: Car on fire
 * 21: Air unit down (an "AC"?)
 * 22: An explosion (a "9-96")
 * 23: A stabbing (a "2-45") (also something else I couldn't understand)
 * 24: Officer stabbed (also something else I couldn't understand)
 * 25: Attack on a vehicle ("MDV"?)
 * 26: Damage to property
 * 27: Suspect threatening officer with a firearm
 * 28: Shots fired
 * 29: ???
 * 30: ???
 * 31: ???
 * 32: ???
 * 33: ???
 * 34: A "2-45"
 * 35: ???
 * 36: A "9-25"
 * 37: ???
 * 38: ???
 * 39: ???
 * 40: ???
 * 41: ???
 * 42: ???
 * 43: Possible disturbance
 * 44: Civilian in need of assistance
 * 45: ???
 * 46: ???
 * @param player
 * @param crimeType
 * @param wantedLvlThresh
 */
export declare function reportCrime(player: number, crimeType: number, wantedLvlThresh: number): void;
export declare function reportPoliceSpottedPlayer(player: number): void;
export declare function requestActionModeAsset(asset: string): void;
/**
 * Alias of REQUEST_COLLISION_AT_COORD.
 * @param x
 * @param y
 * @param z
 */
export declare function requestAdditionalCollisionAtCoord(x: number, y: number, z: number): void;
/**
 * Request a gxt into the passed slot.
 * @param gxt
 * @param slot
 */
export declare function requestAdditionalText(gxt: string, slot: number): void;
export declare function requestAdditionalTextForDlc(gxt: string, slot: number): void;
/**
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
 * Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export declare function requestAmbientAudioBank(audioBank: string, p1: boolean, p2: number): boolean;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export declare function requestAnimDict(animDict: string): void;
/**
 * Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
export declare function requestAnimSet(animSet: string): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
export declare function requestClipSet(clipSet: string): void;
export declare function requestCollisionAtCoord(x: number, y: number, z: number): void;
export declare function requestCollisionForModel(model: number): void;
export declare function requestCommerceItemImage(index: number): boolean;
/**
 * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export declare function requestCutFile(cutsceneName: string): void;
/**
 * flags: Usually 8
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 * @param flags
 */
export declare function requestCutscene(cutsceneName: string, flags: number): void;
/**
 * flags: Usually 8
 *
 * playbackFlags: Which scenes should be played.
 * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 * @param playbackFlags
 * @param flags
 */
export declare function requestCutsceneWithPlaybackList(cutsceneName: string, playbackFlags: number, flags: number): void;
export declare function requestEarlyLightCheck(): void;
/**
 * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
 *
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param iplName
 */
export declare function requestIpl(iplName: string): void;
export declare function requestMenuPedModel(model: number): void;
/**
 * All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
 * Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export declare function requestMissionAudioBank(audioBank: string, p1: boolean, p2: number): boolean;
/**
 * Request a model to be loaded into memory.
 *
 * @param model
 */
export declare function requestModel(model: number): void;
/**
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * @param interior
 * @param roomName
 */
export declare function requestModelsInRoom(interior: number, roomName: string): void;
/**
 * From the b678d decompiled scripts:
 *
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
 * @param fxName
 */
export declare function requestNamedPtfxAsset(fxName: string): void;
/**
 * Used internally for long range tasks
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export declare function requestPathNodesInAreaThisFrame(x1: number, y1: number, x2: number, y2: number): boolean;
export declare function requestPedRestrictedVehicleVisibilityTracking(ped: number, p1: boolean): void;
export declare function requestPedUseSmallBboxVisibilityTracking(ped: number, p1: boolean): void;
export declare function requestPedVehicleVisibilityTracking(ped: number, p1: boolean): void;
export declare function requestPedVisibilityTracking(ped: number): void;
export declare function requestPedheadshotImgUpload(id: number): boolean;
/**
 * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
 */
export declare function requestPtfxAsset(): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
export declare function requestRagdollBoundsUpdate(p0: number, p1: number): void;
export declare function requestScaleformMovie(scaleformName: string): number;
export declare function requestScaleformMovieInstance(scaleformName: string): number;
/**
 * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
 *
 * These seem to be the only scaleforms ever requested by this native:
 * "breaking_news"
 * "desktop_pc"
 * "ECG_MONITOR"
 * "Hacking_PC"
 * "TEETH_PULLING"
 *
 * Note: Unless this hash is out-of-order, this native is next-gen only.
 *
 * @param scaleformName
 */
export declare function requestScaleformMovieSkipRenderWhilePaused(scaleformName: string): number;
/**
 * Another REQUEST_SCALEFORM_MOVIE equivalent.
 * @param scaleformName
 */
export declare function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName: string): number;
export declare function requestScaleformScriptHudMovie(hudComponent: number): void;
export declare function requestScript(scriptName: string): void;
/**
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
 * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export declare function requestScriptAudioBank(audioBank: string, p1: boolean, p2: number): boolean;
/**
 * formerly _REQUEST_STREAMED_SCRIPT
 * @param scriptHash
 */
export declare function requestScriptWithNameHash(scriptHash: number): void;
export declare function requestStealthModeAsset(asset: string): void;
/**
 * This function can requests texture dictonaries from following RPFs:
 * scaleform_generic.rpf
 * scaleform_minigames.rpf
 * scaleform_minimap.rpf
 * scaleform_web.rpf
 *
 * last param isnt a toggle
 * @param textureDict
 * @param p1
 */
export declare function requestStreamedTextureDict(textureDict: string, p1: boolean): void;
export declare function requestTaskMoveNetworkStateTransition(ped: number, name: string): boolean;
export declare function requestTennisBanks(ped: number): void;
/**
 * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
 *
 * vehicle found that have asset's:
 * cargobob3
 * submersible
 * blazer
 * @param vehicleHash
 * @param vehicleAsset
 */
export declare function requestVehicleAsset(vehicleHash: number, vehicleAsset: number): void;
export declare function requestVehicleDial(vehicle: number): void;
export declare function requestVehicleHighDetailModel(vehicle: number): void;
/**
 * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
 * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
 * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
 * @param recording
 * @param script
 */
export declare function requestVehicleRecording(recording: number, script: string): void;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 *
 * Max number of loaded recordings is 32.
 * @param name
 */
export declare function requestWaypointRecording(name: string): void;
/**
 * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
 *
 * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
 * @param weaponHash
 * @param p1
 * @param p2
 */
export declare function requestWeaponAsset(weaponHash: number, p1: number, p2: number): void;
export declare function requestWeaponHighDetailModel(weaponObject: number): void;
export declare function reserveLocalNetworkMissionObjects(amount: number): void;
export declare function reserveLocalNetworkMissionPeds(amount: number): void;
export declare function reserveLocalNetworkMissionVehicles(amount: number): void;
export declare function reserveNetworkMissionObjects(amount: number): void;
export declare function reserveNetworkMissionPeds(amount: number): void;
export declare function reserveNetworkMissionVehicles(amount: number): void;
/**
 * Sets an value related to timecycles.
 * @param p0
 */
export declare function resetAdaptation(p0: number): void;
export declare function resetAiMeleeWeaponDamageModifier(): void;
export declare function resetAiWeaponDamageModifier(): void;
/**
 * Sets the waves intensity back to original (1.0 in most cases).
 */
export declare function resetDeepOceanScaler(): void;
export declare function resetDisableBreaking(object: number): void;
export declare function resetDispatchIdealSpawnDistance(): void;
export declare function resetDispatchSpawnBlockingAreas(): void;
export declare function resetDispatchSpawnLocation(): void;
export declare function resetDispatchTimeBetweenSpawnAttempts(p0: number): void;
export declare function resetEndUserBenchmark(): void;
export declare function resetEntityAlpha(entity: number): void;
export declare function resetExclusiveScenarioGroup(): void;
export declare function resetFacialIdleAnim(ped: number): void;
/**
 * Resets the effect of SET_FORMATION_LEADER
 */
export declare function resetFormationLeader(): void;
export declare function resetGameplayCamFullAttachParentTransformTimer(): void;
/**
 * Resets the entity ghost alpha to the default value (128)
 */
export declare function resetGhostAlpha(): void;
export declare function resetGlobalActionscriptFlag(flagIndex: number): void;
export declare function resetGroupFormationDefaultSpacing(groupHandle: number): void;
export declare function resetHudComponentValues(id: number): void;
/**
 * 2 matches in 1 script - am_hold_up
 *
 * Used in multiplayer scripts?
 */
export declare function resetLawResponseDelayOverride(): void;
/**
 * Resets the effect of SET_PARTICLE_FX_OVERRIDE
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param name
 */
export declare function resetParticleFxOverride(name: string): void;
export declare function resetPausedRenderphases(): void;
export declare function resetPedAudioFlags(ped: number): void;
export declare function resetPedInVehicleContext(ped: number): void;
/**
 * Resets the value for the last vehicle driven by the Ped.
 * @param ped
 */
export declare function resetPedLastVehicle(ped: number): void;
/**
 * If p1 is 0.0, I believe you are back to normal.
 * If p1 is 1.0, it looks like you can only rotate the ped, not walk.
 *
 * Using the following code to reset back to normal
 * PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
 * @param ped
 * @param p1
 */
export declare function resetPedMovementClipset(ped: number, p1: number): void;
export declare function resetPedRagdollTimer(ped: number): void;
export declare function resetPedStrafeClipset(ped: number): void;
export declare function resetPedVisibleDamage(ped: number): void;
export declare function resetPedWeaponMovementClipset(ped: number): void;
/**
 * Similar to RESET_ENTITY_ALPHA
 * @param entity
 */
export declare function resetPickupEntityGlow(entity: number): void;
export declare function resetPlayerArrestState(player: number): void;
export declare function resetPlayerInputGait(player: number): void;
export declare function resetPlayerStamina(player: number): void;
export declare function resetReticuleValues(): void;
export declare function resetScenarioGroupsEnabled(): void;
export declare function resetScenarioTypesEnabled(): void;
/**
 * This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
 * This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
 */
export declare function resetScriptGfxAlign(): void;
export declare function resetStoreNetworkGameTracking(): void;
export declare function resetTrevorRage(): void;
export declare function resetVehicleStartupRevSound(vehicle: number): void;
/**
 * The inner function has a switch on the second parameter. It's the stuck timer index.
 *
 * Here's some pseudo code I wrote for the inner function:
 * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
 * {
 * switch (timerIndex)
 * {
 * case 0:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * case 1:
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * case 2:
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * case 3:
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * case 4:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * break;
 * };
 * }
 * @param vehicle
 * @param nullAttributes
 */
export declare function resetVehicleStuckTimer(vehicle: number, nullAttributes: number): void;
export declare function resetVehicleWheels(vehicle: number, toggle: boolean): void;
export declare function resetWantedLevelDifficulty(player: number): void;
export declare function resetWantedLevelHiddenEscapeTime(player: number): void;
export declare function resetWantedResponseNumPedsToSpawn(): void;
export declare function resetWorldBoundaryForPlayer(): void;
/**
 * Before using this native click the native above and look at the decription.
 *
 * Example:
 * int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
 * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
 * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
 *
 * This native refreshes the frontend menu.
 *
 * p1 = Hash of Menu
 * p2 = Unknown but always works with -1.
 * @param menuHash
 * @param p1
 */
export declare function restartFrontendMenu(menuHash: number, p1: number): void;
/**
 * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
 */
export declare function restartGame(): void;
export declare function restartScriptedConversation(): void;
export declare function restorePlayerStamina(player: number, p1: number): void;
/**
 * This function will simply bring the dead person back to life.
 *
 * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
 *
 * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
 *
 * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
 * @param ped
 */
export declare function resurrectPed(ped: number): void;
export declare function retainEntityInInterior(entity: number, interior: number): void;
/**
 * From fm_deathmatch_creator and fm_race_creator:
 *
 * FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
 * FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
 * @param hash
 */
export declare function revertContentChangesetGroupForAll(hash: number): void;
/**
 * It will revive/cure the injured ped. The condition is ped must not be dead.
 *
 * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
 *
 * This function is well suited there.
 * @param ped
 */
export declare function reviveInjuredPed(ped: number): void;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
export declare function rollDownWindow(vehicle: number, windowIndex: number): void;
/**
 * Roll down all the windows of the vehicle passed through the first parameter.
 * @param vehicle
 */
export declare function rollDownWindows(vehicle: number): void;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
export declare function rollUpWindow(vehicle: number, windowIndex: number): void;
export declare function ropeAreTexturesLoaded(): boolean;
export declare function ropeAttachVirtualBoundGeom(ropeId: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): void;
export declare function ropeChangeScriptOwner(p0: number, p1: boolean, p2: boolean): void;
export declare function ropeConvertToSimple(ropeId: number): void;
export declare function ropeDrawEnabled(p1: boolean): number;
export declare function ropeDrawShadowEnabled(toggle: boolean): number;
/**
 * Forces a rope to a certain length.
 * @param ropeId
 * @param length
 */
export declare function ropeForceLength(ropeId: number, length: number): void;
export declare function ropeGetDistanceBetweenEnds(ropeId: number): number;
/**
 * Loads rope textures for all ropes in the current scene.
 */
export declare function ropeLoadTextures(): void;
/**
 * Reset a rope to a certain length.
 * @param ropeId
 * @param length
 */
export declare function ropeResetLength(ropeId: number, length: number): void;
export declare function ropeSetRefframevelocityColliderorder(ropeId: number, p1: number): void;
export declare function ropeSetSmoothReelin(ropeId: number, p1: boolean): void;
export declare function ropeSetUpdateOrder(ropeId: number, p1: number): void;
export declare function ropeSetUpdatePinverts(ropeId: number): void;
/**
 * Unloads rope textures for all ropes in the current scene.
 */
export declare function ropeUnloadTextures(): void;
export declare function rotateObject(object: number, p1: number, p2: number, p3: boolean): boolean;
export declare function round(value: number): number;
/**
 * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
 */
export declare function saveEndUserBenchmark(): void;
/**
 * 1 match in 1 script. cellphone_controller.
 * p0 is -1 in scripts.
 * @param unused
 */
export declare function saveHighQualityPhoto(unused: number): boolean;
export declare function saveReplayRecording(): boolean;
export declare function savemigrationIsMpEnabled(): boolean;
export declare function savemigrationMpGetAccount(p0: number, p1: number): [boolean, number];
export declare function savemigrationMpGetAccountsStatus(): number;
export declare function savemigrationMpGetStatus(): number;
export declare function savemigrationMpNumAccounts(): number;
export declare function savemigrationMpRequestAccounts(): boolean;
export declare function savemigrationMpRequestStatus(): boolean;
/**
 * Returns the nickname of the logged-in Rockstar Social Club account.
 */
export declare function scAccountInfoGetNickname(): string;
export declare function scAchievementInfoStatus(p0: number): [boolean, number];
export declare function scCacheNewRockstarMsgs(toggle: boolean): void;
export declare function scCommunityEventGetDisplayName(p0: string): boolean;
export declare function scCommunityEventGetDisplayNameById(p0: number, p1: string): boolean;
export declare function scCommunityEventGetDisplayNameForType(p0: string, p1: string): boolean;
export declare function scCommunityEventGetEventId(): number;
export declare function scCommunityEventGetEventIdForType(p0: string): number;
export declare function scCommunityEventGetExtraDataFloat(p0: string, p1: number): [boolean, number];
export declare function scCommunityEventGetExtraDataFloatById(p0: number, p1: string, p2: number): [boolean, number];
export declare function scCommunityEventGetExtraDataFloatForType(p0: string, p2: string): [boolean, number];
export declare function scCommunityEventGetExtraDataInt(p0: string, p1: number): [boolean, number];
export declare function scCommunityEventGetExtraDataIntById(p0: number, p1: string, p2: number): [boolean, number];
export declare function scCommunityEventGetExtraDataIntForType(p0: string, p2: string): [boolean, number];
export declare function scCommunityEventGetExtraDataString(p0: string, p1: string): boolean;
export declare function scCommunityEventGetExtraDataStringById(p0: number, p1: string, p2: string): boolean;
export declare function scCommunityEventGetExtraDataStringForType(p0: string, p1: string, p2: string): boolean;
export declare function scCommunityEventIsActive(): boolean;
export declare function scCommunityEventIsActiveById(p0: number): boolean;
export declare function scCommunityEventIsActiveForType(p0: string): boolean;
export declare function scEmailDeleteEmails(p1: number): number;
export declare function scEmailGetEmailAtIndex(p0: number, p1: number): [boolean, number];
export declare function scEmailGetNumRetrievedEmails(): number;
export declare function scEmailGetRetrievalStatus(): number;
export declare function scEmailMessageClearRecipList(): void;
export declare function scEmailMessagePushGamerToRecipList(gamerHandle: number): number;
export declare function scEmailRetrieveEmails(offset: number, limit: number): void;
export declare function scEmailSendEmail(p0: string): void;
export declare function scEmailSetCurrentEmailTag(p0: number): boolean;
export declare function scGamerdataGetActiveXpBonus(value: number): [boolean, number];
export declare function scGamerdataGetBool(name: string): boolean;
export declare function scGamerdataGetFloat(name: string, value: number): [boolean, number];
export declare function scGamerdataGetInt(name: string, value: number): [boolean, number];
export declare function scGamerdataGetString(name: string, value: string): boolean;
export declare function scGetNewRockstarMsg(): string;
/**
 * Same as HAS_ACHIEVEMENT_BEEN_PASSED
 * @param achievementId
 */
export declare function scHasAchievementBeenPassed(achievementId: number): boolean;
export declare function scHasNewRockstarMsg(): boolean;
export declare function scInboxGetBountyDataAtIndex(index: number, outData: number): [boolean, number];
export declare function scInboxGetMessageIsReadAtIndex(msgIndex: number): boolean;
export declare function scInboxGetMessageTypeAtIndex(msgIndex: number): number;
export declare function scInboxGetTotalNumMessages(): number;
export declare function scInboxMessageDoApply(p0: number): boolean;
export declare function scInboxMessageGetDataBool(p0: number, p1: string): boolean;
export declare function scInboxMessageGetDataInt(p0: number, context: string, out: number): [boolean, number];
export declare function scInboxMessageGetDataString(p0: number, context: string, out: string): boolean;
export declare function scInboxMessageGetRawTypeAtIndex(p0: number): string;
export declare function scInboxMessageGetUgcdata(p0: number, p1: number): [boolean, number];
export declare function scInboxMessagePushGamerT0RecipList(gamerHandle: number): number;
export declare function scInboxSendBountyToRecipList(data: number): [boolean, number];
export declare function scInboxSendUgcstatupdateToRecipList(data: number): number;
export declare function scInboxSetMessageAsReadAtIndex(msgIndex: number): boolean;
export declare function scLicenseplateAdd(plateText: string): [boolean, number, number];
export declare function scLicenseplateCheckString(p0: string, p1: number): [boolean, number];
export declare function scLicenseplateGetAddIsPending(token: number): boolean;
export declare function scLicenseplateGetAddStatus(token: number): number;
export declare function scLicenseplateGetCheckIsPending(p0: number): boolean;
export declare function scLicenseplateGetCheckIsValid(p0: number): boolean;
export declare function scLicenseplateGetCount(token: number): number;
export declare function scLicenseplateGetIsvalidIsPending(token: number): boolean;
export declare function scLicenseplateGetIsvalidStatus(token: number): number;
export declare function scLicenseplateGetPlate(token: number, plateIndex: number): string;
export declare function scLicenseplateGetPlateData(token: number, plateIndex: number): string;
export declare function scLicenseplateIsvalid(plateText: string, token: number): [boolean, number];
export declare function scLicenseplateSetPlateData(oldPlateText: string, newPlateText: string, plateData: number): [boolean, number];
/**
 * Fills some 0x30 sized struct
 * @param p0
 */
export declare function scPauseNewsGetPendingStory(p0: number): boolean;
export declare function scPauseNewsInitStarterPack(p0: number): boolean;
export declare function scPauseNewsShutdown(): void;
export declare function scPresenceAttrSetFloat(attrHash: number, value: number): boolean;
export declare function scPresenceAttrSetInt(attrHash: number, value: number): boolean;
export declare function scPresenceAttrSetString(attrHash: number, value: string): boolean;
export declare function scPresenceSetActivityRating(p0: number, p1: number): boolean;
/**
 * Starts a task to check an entered string for profanity on the ROS/Social Club services.
 *
 * See also: 1753344C770358AE, 82E4A58BABC15AE7.
 * @param string
 * @param token
 */
export declare function scProfanityCheckString(string: string, token: number): [boolean, number];
export declare function scProfanityCheckStringUgc(string: string, token: number): [boolean, number];
export declare function scProfanityGetCheckIsPending(token: number): boolean;
export declare function scProfanityGetCheckIsValid(token: number): boolean;
export declare function scProfanityGetStringPassed(token: number): boolean;
export declare function scProfanityGetStringStatus(token: number): number;
export declare function scTransitionNewsEnd(): void;
export declare function scTransitionNewsGetExtraDataIntTu(p0: string, p1: number): [boolean, number];
export declare function scTransitionNewsHasExtraDataTu(): boolean;
export declare function scTransitionNewsShow(p0: number): boolean;
export declare function scTransitionNewsShowNextItem(): boolean;
export declare function scTransitionNewsShowTimed(p0: number, p1: number): boolean;
/**
 * Pushes a boolean for the Scaleform function onto the stack.
 * @param value
 */
export declare function scaleformMovieMethodAddParamBool(value: boolean): void;
/**
 * Pushes a float for the Scaleform function onto the stack.
 * @param value
 */
export declare function scaleformMovieMethodAddParamFloat(value: number): void;
/**
 * Pushes an integer for the Scaleform function onto the stack.
 * @param value
 */
export declare function scaleformMovieMethodAddParamInt(value: number): void;
export declare function scaleformMovieMethodAddParamLatestBriefString(value: number): void;
/**
 * Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
 * Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
 * @param string
 */
export declare function scaleformMovieMethodAddParamLiteralString(string: string): void;
export declare function scaleformMovieMethodAddParamPlayerNameString(string: string): void;
export declare function scaleformMovieMethodAddParamTextureNameString(string: string): void;
/**
 * If bool Toggle = true so the mobile is hide to screen.
 * If bool Toggle = false so the mobile is show to screen.
 * @param toggle
 */
export declare function scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void;
export declare function scriptOverridesWindElevation(p0: boolean, p1: number): void;
export declare function scriptRaceGetPlayerSplitTime(player: number): [boolean, number, number];
export declare function scriptRaceInit(p0: number, p1: number, p2: number, p3: number): void;
export declare function scriptRacePlayerHitCheckpoint(player: number, p1: number, p2: number, p3: number): void;
export declare function scriptRaceShutdown(): void;
/**
 * If the function returns 0, the end of the iteration has been reached.
 */
export declare function scriptThreadIteratorGetNextThreadId(): number;
/**
 * Starts a new iteration of the current threads.
 * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
 */
export declare function scriptThreadIteratorReset(): void;
export declare function seethroughGetMaxThickness(): number;
export declare function seethroughReset(): void;
export declare function seethroughSetColorNear(red: number, green: number, blue: number): void;
export declare function seethroughSetFadeEnddistance(distance: number): void;
export declare function seethroughSetFadeStartdistance(distance: number): void;
/**
 * min: 0.0
 * max: 0.75
 * @param index
 * @param heatScale
 */
export declare function seethroughSetHeatscale(index: number, heatScale: number): void;
export declare function seethroughSetHighlightNoise(noise: number): void;
export declare function seethroughSetHilightIntensity(intensity: number): void;
/**
 * 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
 * min: 1.0
 * max: 10000.0
 * @param thickness
 */
export declare function seethroughSetMaxThickness(thickness: number): void;
export declare function seethroughSetNoiseMax(amount: number): void;
export declare function seethroughSetNoiseMin(amount: number): void;
export declare function sendMetricGhostingToPlayer(p0: number): void;
export declare function sendMetricPunishBodyguard(p0: number): void;
export declare function sendMetricVipPoach(p0: number, p1: number, p2: number): void;
/**
 * See TRIGGER_SCRIPT_EVENT
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
export declare function sendTuScriptEvent(eventGroup: number, eventDataSize: number, playerBits: number): number;
export declare function setAbilityBarValue(p0: number, p1: number): void;
export declare function setAbilityBarVisibility(visible: boolean): void;
/**
 * For Steam.
 * Does nothing and always returns false in the retail version of the game.
 * @param achievementId
 * @param progress
 */
export declare function setAchievementProgress(achievementId: number, progress: number): boolean;
export declare function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object: number, toggle: boolean): void;
export declare function setAdditionalRotationForRecordedVehiclePlayback(vehicle: number, x: number, y: number, z: number, p4: number): void;
/**
 * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
 * @param toggle
 */
export declare function setAggressiveHorns(toggle: boolean): void;
export declare function setAiMeleeWeaponDamageModifier(modifier: number): void;
export declare function setAiWeaponDamageModifier(value: number): void;
/**
 * This can be between 1.0f - 14.9f
 *
 * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
 *
 *
 * @param player
 * @param multiplier
 */
export declare function setAirDragMultiplierForPlayersVehicle(player: number, multiplier: number): void;
export declare function setAircraftIgnoreHightmapOptimisation(vehicle: number, p1: number): void;
export declare function setAircraftPilotSkillNoiseScalar(vehicle: number, p1: number): void;
export declare function setAllLowPriorityVehicleGeneratorsActive(active: boolean): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export declare function setAllMapdataCulled(p0: number): void;
export declare function setAllMpGamerTagsVisibility(gamerTagId: number, toggle: boolean): void;
export declare function setAllNeutralRandomPedsFlee(player: number, toggle: boolean): void;
/**
 * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
 *
 * @param player
 */
export declare function setAllNeutralRandomPedsFleeThisFrame(player: number): void;
export declare function setAllRandomPedsFlee(player: number, toggle: boolean): void;
export declare function setAllRandomPedsFleeThisFrame(player: number): void;
export declare function setAllVehicleGeneratorsActive(): void;
/**
 * When p6 is true, vehicle generators are active.
 * p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param toggle
 * @param p7
 */
export declare function setAllVehicleGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean, p7: boolean): void;
export declare function setAllowAbilityBar(toggle: boolean): void;
export declare function setAllowCommaOnTextInput(p0: number): void;
export declare function setAllowCustomVehicleDriveByCamThisUpdate(p0: boolean): void;
export declare function setAllowLockonToPedIfFriendly(ped: number, toggle: boolean): void;
/**
 * p1 is always set to 1
 * @param entity
 * @param p1
 */
export declare function setAllowMigrateToSpectator(entity: number, p1: number): void;
export declare function setAllowRammingSoopOrRamp(p0: number, p1: number): void;
/**
 * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
 * @param type
 */
export declare function setAllowStreamHeistIslandNodes(type: number): void;
export declare function setAllowStreamPrologueNodes(toggle: boolean): void;
export declare function setAllowStuntJumpCamera(ped: number, toggle: boolean): void;
export declare function setAllowVehicleExplodesOnContact(vehicle: number, toggle: boolean): void;
export declare function setAmbientLawPedAccuracyModifier(multiplier: number): void;
export declare function setAmbientPedRangeMultiplierThisFrame(multiplier: number): void;
export declare function setAmbientPedsDropMoney(p0: boolean): void;
export declare function setAmbientVehicleNeonEnabled(p0: boolean): void;
export declare function setAmbientVehicleRangeMultiplierThisFrame(value: number): void;
/**
 * Audio List
 * gtaforums.com/topic/795622-audio-for-mods/
 *
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
 * @param ped
 * @param name
 */
export declare function setAmbientVoiceName(ped: number, name: string): void;
export declare function setAmbientVoiceNameHash(ped: number, hash: number): void;
export declare function setAmbientZoneListState(ambientZone: string, p1: boolean, p2: boolean): void;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 * @param p1
 * @param p2
 */
export declare function setAmbientZoneListStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param zoneName
 * @param p1
 * @param p2
 */
export declare function setAmbientZoneState(zoneName: string, p1: boolean, p2: boolean): void;
/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 * @param p1
 * @param p2
 */
export declare function setAmbientZoneStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export declare function setAmmoInClip(ped: number, weaponHash: number, ammo: number): boolean;
export declare function setAnimLooped(entity: number, looped: boolean, priority: number, secondary: boolean): void;
export declare function setAnimPhase(entity: number, phase: number, priority: number, secondary: boolean): void;
export declare function setAnimRate(entity: number, rate: number, priority: number, secondary: boolean): void;
export declare function setAnimWeight(entity: number, weight: number, priority: number, index: number, secondary: boolean): void;
/**
 * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
 * @param animal
 * @param mood
 */
export declare function setAnimalMood(animal: number, mood: number): void;
export declare function setApplyWaypointOfPlayer(player: number, hudColor: number): void;
export declare function setArenaThemeAndVariationForTakenPhoto(p0: number, p1: number): void;
export declare function setArriveDistanceOverrideForVehiclePersuitAttack(vehicle: number, p1: number): void;
/**
 * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
 * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
 *
 * Used in Humane Labs Heist for EMP.
 *
 * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
 * @param state
 */
export declare function setArtificialLightsState(state: boolean): void;
/**
 * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
 * @param toggle
 */
export declare function setArtificialVehicleLightsState(toggle: boolean): void;
/**
 * Possible flag names:
 * "ActivateSwitchWheelAudio"
 * "AllowAmbientSpeechInSlowMo"
 * "AllowCutsceneOverScreenFade"
 * "AllowForceRadioAfterRetune"
 * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
 * "AllowPlayerAIOnMission"
 * "AllowPoliceScannerWhenPlayerHasNoControl"
 * "AllowRadioDuringSwitch"
 * "AllowRadioOverScreenFade"
 * "AllowScoreAndRadio"
 * "AllowScriptedSpeechInSlowMo"
 * "AvoidMissionCompleteDelay"
 * "DisableAbortConversationForDeathAndInjury"
 * "DisableAbortConversationForRagdoll"
 * "DisableBarks"
 * "DisableFlightMusic"
 * "DisableReplayScriptStreamRecording"
 * "EnableHeadsetBeep"
 * "ForceConversationInterrupt"
 * "ForceSeamlessRadioSwitch"
 * "ForceSniperAudio"
 * "FrontendRadioDisabled"
 * "HoldMissionCompleteWhenPrepared"
 * "IsDirectorModeActive"
 * "IsPlayerOnMissionForSpeech"
 * "ListenerReverbDisabled"
 * "LoadMPData"
 * "MobileRadioInGame"
 * "OnlyAllowScriptTriggerPoliceScanner"
 * "PlayMenuMusic"
 * "PoliceScannerDisabled"
 * "ScriptedConvListenerMaySpeak"
 * "SpeechDucksScore"
 * "SuppressPlayerScubaBreathing"
 * "WantedMusicDisabled"
 * "WantedMusicOnMission"
 *
 * -------------------------------
 * No added flag names between b393d and b573d, including b573d.
 *
 * #######################################################################
 *
 * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
 *
 * -----------------------------------------------------------------------
 *
 * All flag IDs and hashes:
 *
 * ID: 00 | Hash: 0x0FED7A7F
 * ID: 01 | Hash: 0x20A7858F
 * ID: 02 | Hash: 0xA11C2259
 * ID: 03 | Hash: 0x08DE4700
 * ID: 04 | Hash: 0x989F652F
 * ID: 05 | Hash: 0x3C9E76BA
 * ID: 06 | Hash: 0xA805FEB0
 * ID: 07 | Hash: 0x4B94EA26
 * ID: 08 | Hash: 0x803ACD34
 * ID: 09 | Hash: 0x7C741226
 * ID: 10 | Hash: 0x31DB9EBD
 * ID: 11 | Hash: 0xDF386F18
 * ID: 12 | Hash: 0x669CED42
 * ID: 13 | Hash: 0x51F22743
 * ID: 14 | Hash: 0x2052B35C
 * ID: 15 | Hash: 0x071472DC
 * ID: 16 | Hash: 0xF9928BCC
 * ID: 17 | Hash: 0x7ADBDD48
 * ID: 18 | Hash: 0xA959BA1A
 * ID: 19 | Hash: 0xBBE89B60
 * ID: 20 | Hash: 0x87A08871
 * ID: 21 | Hash: 0xED1057CE
 * ID: 22 | Hash: 0x1584AD7A
 * ID: 23 | Hash: 0x8582CFCB
 * ID: 24 | Hash: 0x7E5E2FB0
 * ID: 25 | Hash: 0xAE4F72DB
 * ID: 26 | Hash: 0x5D16D1FA
 * ID: 27 | Hash: 0x06B2F4B8
 * ID: 28 | Hash: 0x5D4CDC96
 * ID: 29 | Hash: 0x8B5A48BA
 * ID: 30 | Hash: 0x98FBD539
 * ID: 31 | Hash: 0xD8CB0473
 * ID: 32 | Hash: 0x5CBB4874
 * ID: 33 | Hash: 0x2E9F93A9
 * ID: 34 | Hash: 0xD93BEA86
 * ID: 35 | Hash: 0x92109B7D
 * ID: 36 | Hash: 0xB7EC9E4D
 * ID: 37 | Hash: 0xCABDBB1D
 * ID: 38 | Hash: 0xB3FD4A52
 * ID: 39 | Hash: 0x370D94E5
 * ID: 40 | Hash: 0xA0F7938F
 * ID: 41 | Hash: 0xCBE1CE81
 * ID: 42 | Hash: 0xC27F1271
 * ID: 43 | Hash: 0x9E3258EB
 * ID: 44 | Hash: 0x551CDA5B
 * ID: 45 | Hash: 0xCB6D663C
 * ID: 46 | Hash: 0x7DACE87F
 * ID: 47 | Hash: 0xF9DE416F
 * ID: 48 | Hash: 0x882E6E9E
 * ID: 49 | Hash: 0x16B447E7
 * ID: 50 | Hash: 0xBD867739
 * ID: 51 | Hash: 0xA3A58604
 * ID: 52 | Hash: 0x7E046BBC
 * ID: 53 | Hash: 0xD95FDB98
 * ID: 54 | Hash: 0x5842C0ED
 * ID: 55 | Hash: 0x285FECC6
 * ID: 56 | Hash: 0x9351AC43
 * ID: 57 | Hash: 0x50032E75
 * ID: 58 | Hash: 0xAE6D0D59
 * ID: 59 | Hash: 0xD6351785
 * ID: 60 | Hash: 0xD25D71BC
 * ID: 61 | Hash: 0x1F7F6423
 * ID: 62 | Hash: 0xE24C3AA6
 * ID: 63 | Hash: 0xBFFDD2B7
 * @param flagName
 * @param toggle
 */
export declare function setAudioFlag(flagName: string, toggle: boolean): void;
/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 * @param variable
 * @param value
 */
export declare function setAudioSceneVariable(scene: string, variable: string, value: number): void;
export declare function setAudioScriptCleanupTime(time: number): void;
/**
 * Needs to be called every frame.
 * Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
 * @param mode
 */
export declare function setAudioSpecialEffectMode(mode: number): void;
export declare function setAudioVehiclePriority(vehicle: number, p1: number): void;
export declare function setAutoGiveParachuteWhenEnterPlane(player: number, toggle: boolean): void;
export declare function setAutoGiveScubaGearWhenExitVehicle(player: number, toggle: boolean): void;
export declare function setBackfaceculling(toggle: boolean): void;
export declare function setBeastJumpThisFrame(player: number): void;
/**
 * Toggles the big minimap state like in GTA:Online.
 * @param toggleBigMap
 * @param showFullMap
 */
export declare function setBigmapActive(toggleBigMap: boolean, showFullMap: boolean): void;
/**
 * When enabled, the player won't fall off the bike when landing from large heights.
 * @param vehicle
 * @param toggle
 */
export declare function setBikeEasyToLand(vehicle: number, toggle: boolean): void;
/**
 * Only works on bikes, both X and Y work in the -1 - 1 range.
 *
 * X forces the bike to turn left or right (-1, 1)
 * Y forces the bike to lean to the left or to the right (-1, 1)
 *
 * Example with X -1/Y 1
 * http://i.imgur.com/TgIuAPJ.jpg
 * @param vehicle
 * @param x
 * @param y
 */
export declare function setBikeOnStand(vehicle: number, x: number, y: number): void;
export declare function setBinkMovie(name: string): number;
export declare function setBinkMovieAudioFrontend(binkMovie: number, p1: boolean): void;
/**
 * In percentage: 0.0 - 100.0
 * @param binkMovie
 * @param progress
 */
export declare function setBinkMovieTime(binkMovie: number, progress: number): void;
/**
 * binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
 * @param binkMovie
 * @param value
 */
export declare function setBinkMovieVolume(binkMovie: number, value: number): void;
export declare function setBinkShouldSkip(binkMovie: number, bShouldSkip: boolean): void;
/**
 * This sets bit [offset] of [address] to on.
 *
 * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
 *
 * Example:
 * MISC::SET_BIT(&bitAddress, 1);
 *
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
 *
 * Please note, this method may assign a value to [address] when used.
 * @param address
 * @param offset
 */
export declare function setBit(offset: number): number;
export declare function setBitsInRange(rangeStart: number, rangeEnd: number, p3: number): number;
/**
 * Sets alpha-channel for blip color.
 *
 * Example:
 *
 * Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
 * HUD::SET_BLIP_COLOUR(blip , 3);
 * HUD::SET_BLIP_ALPHA(blip , 64);
 *
 * @param blip
 * @param alpha
 */
export declare function setBlipAlpha(blip: number, alpha: number): void;
/**
 * false for enemy
 * true for friendly
 * @param blip
 * @param toggle
 */
export declare function setBlipAsFriendly(blip: number, toggle: boolean): void;
/**
 * Makes a blip go small when off the minimap.
 * @param blip
 * @param toggle
 */
export declare function setBlipAsMinimalOnEdge(blip: number, toggle: boolean): void;
export declare function setBlipAsMissionCreatorBlip(blip: number, toggle: boolean): void;
/**
 * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
 * @param blip
 * @param toggle
 */
export declare function setBlipAsShortRange(blip: number, toggle: boolean): void;
export declare function setBlipBright(blip: number, toggle: boolean): void;
/**
 * Example: https://i.imgur.com/skY6vAJ.png
 *
 * Index:
 * 1 = No distance shown in legend
 * 2 = Distance shown in legend
 * 7 = "Other Players" category, also shows distance in legend
 * 10 = "Property" category
 * 11 = "Owned Property" category
 *
 * Any other value behaves like index = 1, index wraps around after 255
 * Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
 * Legend entries:
 * 7 = Other Players (BLIP_OTHPLYR)
 * 10 = Property (BLIP_PROPCAT)
 * 11 = Owned Property (BLIP_APARTCAT)
 *
 * Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
 * @param blip
 * @param index
 */
export declare function setBlipCategory(blip: number, index: number): void;
/**
 * https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
 * @param blip
 * @param color
 */
export declare function setBlipColour(blip: number, color: number): void;
export declare function setBlipCoords(blip: number, posX: number, posY: number, posZ: number): void;
/**
 * Display Id behaviours:
 * 0 = Doesn't show up, ever, anywhere.
 * 1 = Doesn't show up, ever, anywhere.
 * 2 = Shows on both main map and minimap. (Selectable on map)
 * 3 = Shows on main map only. (Selectable on map)
 * 4 = Shows on main map only. (Selectable on map)
 * 5 = Shows on minimap only.
 * 6 = Shows on both main map and minimap. (Selectable on map)
 * 7 = Doesn't show up, ever, anywhere.
 * 8 = Shows on both main map and minimap. (Not selectable on map)
 * 9 = Shows on minimap only.
 * 10 = Shows on both main map and minimap. (Not selectable on map)
 *
 * Anything higher than 10 seems to be exactly the same as 10.
 * @param blip
 * @param displayId
 */
export declare function setBlipDisplay(blip: number, displayId: number): void;
/**
 * Must be toggled before being queued for animation
 * @param blip
 * @param toggle
 */
export declare function setBlipExtendedHeightThreshold(blip: number, toggle: boolean): void;
export declare function setBlipFade(blip: number, opacity: number, duration: number): void;
export declare function setBlipFlashInterval(blip: number, p1: number): void;
/**
 * Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
 * @param blip
 * @param duration
 */
export declare function setBlipFlashTimer(blip: number, duration: number): void;
export declare function setBlipFlashes(blip: number, toggle: boolean): void;
export declare function setBlipFlashesAlternate(blip: number, toggle: boolean): void;
export declare function setBlipHiddenOnLegend(blip: number, toggle: boolean): void;
export declare function setBlipHighDetail(blip: number, toggle: boolean): void;
export declare function setBlipMarkerLongDistance(p0: number, p1: number): void;
/**
 * Doesn't work if the label text of gxtEntry is >= 80.
 * @param blip
 * @param gxtEntry
 */
export declare function setBlipNameFromTextFile(blip: number, gxtEntry: string): void;
export declare function setBlipNameToPlayerName(blip: number, player: number): void;
/**
 * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
 * @param blip
 * @param priority
 */
export declare function setBlipPriority(blip: number, priority: number): void;
/**
 * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
 * @param blip
 * @param rotation
 */
export declare function setBlipRotation(blip: number, rotation: number): void;
/**
 * Does not require whole number/integer rotations.
 * @param blip
 * @param heading
 */
export declare function setBlipRotationWithFloat(blip: number, heading: number): void;
/**
 * Enable / disable showing route for the Blip-object.
 * @param blip
 * @param enabled
 */
export declare function setBlipRoute(blip: number, enabled: boolean): void;
export declare function setBlipRouteColour(blip: number, colour: number): void;
export declare function setBlipScale(blip: number, scale: number): void;
/**
 * See https://imgur.com/a/lLkEsMN
 * @param blip
 * @param xScale
 * @param yScale
 */
export declare function setBlipScale2d(blip: number, xScale: number, yScale: number): void;
/**
 * Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).
 * @param blip
 * @param r
 * @param g
 * @param b
 */
export declare function setBlipSecondaryColour(blip: number, r: number, g: number, b: number): void;
export declare function setBlipShortHeightThreshold(p0: number, p1: number): void;
/**
 * As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
 * @param blip
 * @param toggle
 * @param hudColorIndex
 */
export declare function setBlipShowCone(blip: number, toggle: boolean, hudColorIndex: number): void;
/**
 * Sets the displayed sprite for a specific blip..
 *
 * You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
 * https://pastebin.com/Bpj9Sfft
 *
 * Blips Images + IDs:
 * https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
 * @param blip
 * @param spriteId
 */
export declare function setBlipSprite(blip: number, spriteId: number): void;
export declare function setBlipUseHeightIndicatorOnEdge(blip: number, p1: number): void;
export declare function setBlockWantedFlash(disabled: boolean): void;
/**
 * works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
 * @param ped
 * @param toggle
 */
export declare function setBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void;
export declare function setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(p0: boolean): void;
export declare function setBoatAnchor(vehicle: number, toggle: boolean): void;
export declare function setBoatDisableAvoidance(vehicle: number, p1: boolean): void;
export declare function setBoatIgnoreLandProbes(p0: number, p1: number): void;
export declare function setBoatLowLodAnchorDistance(vehicle: number, value: number): void;
export declare function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle: number, toggle: boolean): void;
export declare function setBoatSinksWhenWrecked(vehicle: number, toggle: boolean): void;
export declare function setBoatWrecked(vehicle: number): void;
/**
 * Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks
 * @param vehicle
 * @param toggle
 */
export declare function setBoundsAffectWaterProbes(vehicle: number, toggle: boolean): void;
export declare function setCalmedWaveHeightScaler(height: number): void;
/**
 * Set camera as active/inactive.
 * @param cam
 * @param active
 */
export declare function setCamActive(cam: number, active: boolean): void;
/**
 * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
 *
 * @param camTo
 * @param camFrom
 * @param duration
 * @param easeLocation
 * @param easeRotation
 */
export declare function setCamActiveWithInterp(camTo: number, camFrom: number, duration: number, easeLocation: number, easeRotation: number): void;
/**
 * Allows you to aim and shoot at the direction the camera is facing.
 * @param cam
 * @param toggle
 */
export declare function setCamAffectsAiming(cam: number, toggle: boolean): void;
export declare function setCamAnimCurrentPhase(cam: number, phase: number): void;
/**
 * Rotates the radar to match the camera's Z rotation
 * @param cam
 * @param toggle
 */
export declare function setCamControlsMiniMapHeading(cam: number, toggle: boolean): void;
/**
 * Sets the position of the cam.
 * @param cam
 * @param posX
 * @param posY
 * @param posZ
 */
export declare function setCamCoord(cam: number, posX: number, posY: number, posZ: number): void;
/**
 * if p0 is 0, effect is cancelled
 *
 * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
 *
 * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
 * @param p0
 */
export declare function setCamDeathFailEffectState(p0: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param camera
 * @param name
 */
export declare function setCamDebugName(camera: number, name: string): void;
/**
 * This native has its name defined inside its codE
 *
 * @param camera
 * @param p1
 */
export declare function setCamDofFnumberOfLens(camera: number, p1: number): void;
/**
 * Native name labeled within its code
 * @param camera
 * @param multiplier
 */
export declare function setCamDofFocalLengthMultiplier(camera: number, multiplier: number): void;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
export declare function setCamDofFocusDistanceBias(camera: number, p1: number): void;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
export declare function setCamDofMaxNearInFocusDistance(camera: number, p1: number): void;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
export declare function setCamDofMaxNearInFocusDistanceBlendLevel(camera: number, p1: number): void;
export declare function setCamDofOverriddenFocusDistance(camera: number, p1: number): void;
export declare function setCamDofOverriddenFocusDistanceBlendLevel(p0: number, p1: number): void;
export declare function setCamDofPlanes(cam: number, p1: number, p2: number, p3: number, p4: number): void;
/**
 * This native has a name defined inside its code
 * @param camera
 * @param state
 */
export declare function setCamDofShouldKeepLookAtTargetInFocus(camera: number, state: boolean): void;
export declare function setCamDofStrength(cam: number, dofStrength: number): void;
export declare function setCamFarClip(cam: number, farClip: number): void;
export declare function setCamFarDof(cam: number, farDOF: number): void;
/**
 * Sets the field of view of the cam.
 * ---------------------------------------------
 * Min: 1.0f
 * Max: 130.0f
 * @param cam
 * @param fieldOfView
 */
export declare function setCamFov(cam: number, fieldOfView: number): void;
/**
 * The native seems to only be called once.
 *
 * The native is used as so,
 * CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
 * In the exile1 script.
 * @param cam
 * @param p1
 */
export declare function setCamInheritRollVehicle(cam: number, p1: boolean): void;
/**
 * When set to true shadows appear more smooth but less detailed.
 * Set to false by default.
 * @param cam
 * @param toggle
 */
export declare function setCamIsInsideVehicle(cam: number, toggle: boolean): void;
export declare function setCamMotionBlurStrength(cam: number, strength: number): void;
export declare function setCamNearClip(cam: number, nearClip: number): void;
export declare function setCamNearDof(cam: number, nearDOF: number): void;
export declare function setCamParams(cam: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fieldOfView: number, p8: number, p9: number, p10: number, p11: number): void;
/**
 * Sets the rotation of the cam.
 * Last parameter unknown.
 *
 * Last parameter seems to always be set to 2.
 * @param cam
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotationOrder
 */
export declare function setCamRot(cam: number, rotX: number, rotY: number, rotZ: number, rotationOrder: number): void;
export declare function setCamShakeAmplitude(cam: number, amplitude: number): void;
/**
 * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
 * @param cam
 * @param timeDuration
 */
export declare function setCamSplineDuration(cam: number, timeDuration: number): void;
export declare function setCamSplineNodeEase(cam: number, easingFunction: number, p2: number, p3: number): void;
export declare function setCamSplineNodeExtraFlags(cam: number, p1: number, flags: number): void;
export declare function setCamSplineNodeVelocityScale(cam: number, p1: number, scale: number): void;
export declare function setCamSplinePhase(cam: number, p1: number): void;
export declare function setCamSplineSmoothingStyle(cam: number, smoothingStyle: number): void;
export declare function setCamUseShallowDofMode(cam: number, toggle: boolean): void;
/**
 * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
 * @param context
 * @param viewMode
 */
export declare function setCamViewModeForContext(context: number, viewMode: number): void;
export declare function setCanAdjustGroundClearance(vehicle: number, p1: boolean): void;
/**
 * Setting ped to true allows the ped to shoot "friendlies".
 *
 * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
 *
 * p1 = false & p2 = false for unable to aim at.
 * p1 = true & p2 = false for able to aim at.
 * @param ped
 * @param toggle
 * @param p2
 */
export declare function setCanAttackFriendly(ped: number, toggle: boolean, p2: boolean): void;
/**
 * p1 always false.
 * @param entity
 * @param toggle
 */
export declare function setCanAutoVaultOnEntity(entity: number, toggle: boolean): void;
/**
 * p1 always false.
 * @param entity
 * @param toggle
 */
export declare function setCanClimbOnEntity(entity: number, toggle: boolean): void;
export declare function setCanDisplayMinimapDuringCutsceneThisUpdate(): void;
/**
 * Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
 * @param ped
 * @param toggle
 */
export declare function setCanPedSelectAllWeapons(ped: number, toggle: boolean): void;
/**
 * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param toggle
 */
export declare function setCanPedSelectInventoryWeapon(ped: number, weaponHash: number, toggle: boolean): void;
/**
 * Hardcoded to not work in multiplayer.
 * @param vehicle
 * @param state
 */
export declare function setCanResprayVehicle(vehicle: number, state: boolean): void;
export declare function setCanUseHydraulics(vehicle: number, toggle: boolean): void;
/**
 * Initially used in Max Payne 3, that's why we know the name.
 * @param vehicle
 */
export declare function setCarBootOpen(vehicle: number): void;
export declare function setCarGeneratorsCanUpdateDuringCutscene(p0: boolean): void;
export declare function setCarHighSpeedBumpSeverityMultiplier(multiplier: number): void;
export declare function setCargobobExcludeFromPickupEntity(p0: number, p1: number): void;
export declare function setCargobobExtaPickupRange(p0: number, p1: number): void;
/**
 * Stops cargobob from being able to detach the attached vehicle.
 * @param cargobob
 * @param toggle
 */
export declare function setCargobobForceDontDetachVehicle(cargobob: number, toggle: boolean): void;
/**
 * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
 * @param cargobob
 * @param isActive
 */
export declare function setCargobobPickupMagnetActive(cargobob: number, isActive: boolean): void;
export declare function setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle: number, p1: boolean): void;
export declare function setCargobobPickupMagnetFalloff(cargobob: number, p1: number): void;
export declare function setCargobobPickupMagnetPullRopeLength(vehicle: number, p1: number): void;
export declare function setCargobobPickupMagnetPullStrength(cargobob: number, p1: number): void;
export declare function setCargobobPickupMagnetReducedFalloff(cargobob: number, p1: number): void;
export declare function setCargobobPickupMagnetReducedStrength(cargobob: number, p1: number): void;
export declare function setCargobobPickupMagnetSetAmbientMode(vehicle: number, p1: boolean, p2: boolean): void;
export declare function setCargobobPickupMagnetSetTargetedMode(vehicle: number, cargobob: number): void;
export declare function setCargobobPickupMagnetStrength(cargobob: number, strength: number): void;
export declare function setCargobobPickupRopeDampingMultiplier(p0: number, p1: number): void;
export declare function setCargobobPickupRopeType(p0: number, p1: number): void;
export declare function setCarjackMissionRemovalParameters(p0: number, p1: number): void;
export declare function setCgAtBoundcenter(entity: number): void;
export declare function setCgoffset(entity: number, x: number, y: number, z: number): void;
/**
 * Only used in R* Script fm_content_cargo
 * @param vehicle
 * @param p1
 */
export declare function setCheckForEnoughRoomForPed(vehicle: number, p1: boolean): void;
/**
 * This does not move an existing checkpoint... so wtf.
 * @param checkpoint
 * @param posX
 * @param posY
 * @param posZ
 * @param unkX
 * @param unkY
 * @param unkZ
 */
export declare function setCheckpointClipplaneWithPosNorm(checkpoint: number, posX: number, posY: number, posZ: number, unkX: number, unkY: number, unkZ: number): void;
/**
 * Sets the cylinder height of the checkpoint.
 *
 * Parameters:
 * * nearHeight - The height of the checkpoint when inside of the radius.
 * * farHeight - The height of the checkpoint when outside of the radius.
 * * radius - The radius of the checkpoint.
 * @param checkpoint
 * @param nearHeight
 * @param farHeight
 * @param radius
 */
export declare function setCheckpointCylinderHeight(checkpoint: number, nearHeight: number, farHeight: number, radius: number): void;
/**
 * Unknown. Called after creating a checkpoint (type: 51) in the creators.
 * @param checkpoint
 */
export declare function setCheckpointDecalRotAlignedToCameraRot(checkpoint: number): void;
export declare function setCheckpointDirection(checkpoint: number, posX: number, posY: number, posZ: number): void;
export declare function setCheckpointForceDirection(checkpoint: number): void;
export declare function setCheckpointForceOldArrowPointing(checkpoint: number): void;
export declare function setCheckpointInsideCylinderHeightScale(checkpoint: number, scale: number): void;
export declare function setCheckpointInsideCylinderScale(checkpoint: number, scale: number): void;
/**
 * Sets the checkpoint color.
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function setCheckpointRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void;
/**
 * Sets the checkpoint icon color.
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function setCheckpointRgba2(checkpoint: number, red: number, green: number, blue: number, alpha: number): void;
export declare function setCinematicButtonActive(p0: boolean): void;
export declare function setCinematicCamShakeAmplitude(p0: number): void;
/**
 * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
 * @param toggle
 */
export declare function setCinematicModeActive(toggle: boolean): void;
export declare function setCinematicNewsChannelActiveThisUpdate(): void;
export declare function setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle: number, toggle: boolean): void;
export declare function setClockDate(day: number, month: number, year: number): void;
/**
 * SET_CLOCK_TIME(12, 34, 56);
 * @param hour
 * @param minute
 * @param second
 */
export declare function setClockTime(hour: number, minute: number, second: number): void;
export declare function setCloudSettingsOverride(p0: string): void;
export declare function setCloudsAlpha(opacity: number): void;
export declare function setColourOfNextTextComponent(hudColor: number): void;
/**
 * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
 * @param ped
 * @param combatType
 * @param p2
 */
export declare function setCombatFloat(ped: number, combatType: number, p2: number): void;
export declare function setContentIdIndex(contentId: number, index: number): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param red
 * @param green
 * @param blue
 */
export declare function setControlLightEffectColor(control: number, red: number, green: number, blue: number): void;
/**
 * control: see IS_CONTROL_ENABLED
 * duration in milliseconds
 * frequency should range from about 10 (slow vibration) to 255 (very fast)
 *
 * example:
 * SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
 * @param control
 * @param duration
 * @param frequency
 */
export declare function setControlShake(control: number, duration: number, frequency: number): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param uniqueId
 */
export declare function setControlShakeSuppressedId(control: number, uniqueId: number): void;
/**
 * Does nothing (it's a nullsub).
 * @param control
 * @param leftDuration
 * @param leftFrequency
 * @param rightDuration
 * @param rightFrequency
 */
export declare function setControlTriggerShake(control: number, leftDuration: number, leftFrequency: number, rightDuration: number, rightFrequency: number): void;
/**
 * This is for simulating player input.
 * value is a float value from 0 - 1
 *
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param value
 */
export declare function setControlValueNextFrame(control: number, action: number, value: number): boolean;
export declare function setConversationAudioControlledByAnim(p0: boolean): void;
export declare function setConversationAudioPlaceholder(p0: boolean): void;
export declare function setConvertibleRoof(vehicle: number, p1: boolean): void;
export declare function setConvertibleRoofLatchState(vehicle: number, state: boolean): void;
export declare function setCopBlipSprite(p0: number, p1: number): void;
export declare function setCopBlipSpriteAsStandard(): void;
export declare function setCopPerceptionOverrides(seeingRange: number, seeingRangePeripheral: number, hearingRange: number, visualFieldMinAzimuthAngle: number, visualFieldMaxAzimuthAngle: number, fieldOfGazeMaxAngle: number, p6: number): void;
export declare function setCorpseRagdollFriction(ped: number, p1: number): void;
export declare function setCreateRandomCops(toggle: boolean): void;
export declare function setCreateRandomCopsNotOnScenarios(toggle: boolean): void;
export declare function setCreateRandomCopsOnScenarios(toggle: boolean): void;
export declare function setCreditsActive(toggle: boolean): void;
export declare function setCreditsFadeOutWithScreen(toggle: boolean): void;
/**
 * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
 *
 * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
 *
 * Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
 *
 * CLEAR  0x36A83D84
 * EXTRASUNNY  0x97AA0A79
 * CLOUDS  0x30FDAF5C
 * OVERCAST    0xBB898D2D
 * RAIN    0x54A69840
 * CLEARING    0x6DB1A50D
 * THUNDER 0xB677829F
 * SMOG    0x10DCF4B5
 * FOGGY   0xAE737644
 * XMAS    0xAAC9C895
 * SNOWLIGHT   0x23FB812B
 * BLIZZARD    0x27EA2814
 *
 *
 *
 *
 *
 *  -- [[ OLD INVALID INFO BELOW ]]
 * Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
 *
 * If an invalid hash is specified for sourceWeather, the current weather type will be used.
 * If an invalid hash is specified for targetWeather, the next weather type will be used.
 * If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
 * @param weatherType1
 * @param weatherType2
 * @param percentWeather2
 */
export declare function setCurrWeatherState(weatherType1: number, weatherType2: number, percentWeather2: number): void;
/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export declare function setCurrentPedVehicleWeapon(ped: number, weaponHash: number): boolean;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param bForceInHand
 */
export declare function setCurrentPedWeapon(ped: number, weaponHash: number, bForceInHand: boolean): void;
export declare function setCurrentPlayerTcmodifier(modifierName: string): void;
export declare function setCursorPosition(x: number, y: number): boolean;
export declare function setCustomMpHudColor(hudColorId: number): void;
export declare function setCustomPickupWeaponHash(pickupHash: number, pickup: number): void;
/**
 * Examples:
 *
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * @param radioStation
 * @param trackListName
 * @param p2
 */
export declare function setCustomRadioTrackList(radioStation: string, trackListName: string, p2: boolean): void;
/**
 * All occurrences found in b617d, sorted alphabetically and identical lines removed:
 *
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param name
 */
export declare function setCutsceneAudioOverride(name: string): void;
/**
 * Hardcoded to only work in multiplayer.
 * @param p0
 */
export declare function setCutsceneCamFarClipThisUpdate(p0: number): void;
export declare function setCutsceneCanBeSkipped(p0: boolean): void;
export declare function setCutsceneEntityStreamingFlags(cutsceneEntName: string, p1: number, p2: number): void;
export declare function setCutsceneFadeValues(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function setCutsceneMultiheadFade(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function setCutsceneMultiheadFadeManual(p0: boolean): void;
/**
 * p3 could be heading. Needs more research.
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export declare function setCutsceneOrigin(x: number, y: number, z: number, p3: number, p4: number): void;
export declare function setCutsceneOriginAndOrientation(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void;
/**
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
export declare function setCutscenePedComponentVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number): void;
export declare function setCutscenePedComponentVariationFromPed(cutsceneEntName: string, ped: number, modelHash: number): void;
/**
 * Thanks R*! ;)
 *
 * if ((l_161 == 0) || (l_161 == 2)) {
 * sub_2ea27("Trying to set Jimmy prop variation");
 * CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);
 * }
 *
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
export declare function setCutscenePedPropVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number): void;
/**
 * Only used twice in R* scripts
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function setCutsceneTriggerArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
/**
 * Requires a component_at_*_flsh to be attached to the weapon object
 * @param object
 * @param toggle
 */
export declare function setCutscenesWeaponFlashlightOnThisFrame(object: number, toggle: boolean): void;
export declare function setDamping(entity: number, vertex: number, value: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param enabled
 */
export declare function setDebugLinesAndSpheresDrawingActive(enabled: boolean): void;
export declare function setDecalBulletImpactRangeScale(p0: number): void;
export declare function setDecisionMaker(ped: number, name: number): void;
/**
 * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
 *
 * Works only ~200 meters around the player.
 * @param intensity
 */
export declare function setDeepOceanScaler(intensity: number): void;
/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * @param vehicle
 * @param deploy
 * @param p2
 */
export declare function setDeployFoldingWings(vehicle: number, deploy: boolean, p2: boolean): void;
export declare function setDeployMissileBays(vehicle: number, deploy: boolean): void;
export declare function setDepthwriting(toggle: boolean): void;
export declare function setDescriptionForUgcMissionEightStrings(p0: boolean, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string, p8: string): void;
export declare function setDipStraightDownWhenCrashingPlane(vehicle: number, toggle: boolean): void;
export declare function setDirectorModeAvailable(toggle: boolean): void;
export declare function setDirectorModeLaunchedByScript(): void;
export declare function setDisableAmbientMeleeMove(player: number, toggle: boolean): void;
/**
 * Sets a flag on heli and another vehicle type.
 * @param vehicle
 * @param toggle
 */
export declare function setDisableAutomaticCrashTask(vehicle: number, toggle: boolean): void;
export declare function setDisableBmxExtraTrickForces(p0: number): void;
export declare function setDisableBreaking(object: number, toggle: boolean): void;
export declare function setDisableCollisionsBetweenCarsAndCarParachute(p0: number): void;
export declare function setDisableDamageWithPickedUpEntity(p0: number, p1: number): boolean;
export declare function setDisableDecalRenderingThisFrame(): void;
export declare function setDisableExplodeFromBodyDamageOnCollision(vehicle: number, value: number): void;
export declare function setDisableFragDamage(object: number, toggle: boolean): void;
export declare function setDisableHeliExplodeFromBodyDamage(p0: number, p1: number): void;
export declare function setDisableHighFallDeath(ped: number, toggle: boolean): void;
/**
 * Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
 * For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
 * For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
 * But for opressor 2 you still can fly if you somehow get back in the air.
 * @param vehicle
 * @param toggle
 */
export declare function setDisableHoverModeFlight(vehicle: number, toggle: boolean): void;
/**
 * Disables collision for this vehicle (maybe it also supports other entities, not sure).
 * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
 * Example: https://streamable.com/6n45d5
 * Not sure if there is a native (and if so, which one) that resets the collisions.
 * @param vehicle
 */
export declare function setDisableMapCollision(vehicle: number): void;
export declare function setDisablePedMapCollision(ped: number): void;
export declare function setDisablePedStandOnTop(vehicle: number, toggle: boolean): void;
export declare function setDisablePetrolDecalsIgnitingThisFrame(): void;
export declare function setDisablePetrolDecalsRecyclingThisFrame(): void;
export declare function setDisablePretendOccupants(vehicle: number, toggle: boolean): void;
export declare function setDisableRandomTrainsThisFrame(toggle: boolean): void;
export declare function setDisableRetractingWeaponBlades(toggle: boolean): void;
export declare function setDisableSuperdummy(vehicle: number, p1: boolean): void;
/**
 * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
 * @param vehicle
 * @param turretId
 */
export declare function setDisableTurretMovement(vehicle: number, turretId: number): void;
export declare function setDisableVehicleEngineFires(vehicle: number, toggle: boolean): void;
export declare function setDisableVehicleExplosionsDamage(toggle: boolean): void;
export declare function setDisableVehiclePetrolTankDamage(vehicle: number, toggle: boolean): void;
export declare function setDisableVehiclePetrolTankFires(vehicle: number, toggle: boolean): void;
/**
 * True stops vtols from switching modes. Doesn't stop the sound though.
 * @param vehicle
 * @param toggle
 */
export declare function setDisableVerticalFlightModeTransition(vehicle: number, toggle: boolean): void;
export declare function setDisableWantedConesResponse(vehicle: number, toggle: boolean): void;
/**
 * Sets some global vehicle related bool
 * @param toggle
 */
export declare function setDisableWeaponBladeForces(toggle: boolean): void;
export declare function setDispatchCopsForPlayer(player: number, toggle: boolean): void;
export declare function setDispatchIdealSpawnDistance(distance: number): void;
export declare function setDispatchSpawnLocation(x: number, y: number, z: number): void;
export declare function setDispatchTimeBetweenSpawnAttempts(p0: number, p1: number): void;
export declare function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0: number, p1: number): void;
export declare function setDistanceBlurStrengthOverride(p0: number): void;
/**
 * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
 * @param toggle
 */
export declare function setDistantCarsEnabled(toggle: boolean): void;
/**
 * This is a NOP function. It does nothing at all.
 * @param toggle
 */
export declare function setDitchPoliceModels(toggle: boolean): void;
export declare function setDontAllowPlayerToEnterVehicleIfLockedForPlayer(vehicle: number, p1: boolean): void;
/**
 * R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
 * @param vehicle
 * @param toggle
 */
export declare function setDontProcessVehicleGlass(vehicle: number, toggle: boolean): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param isBreakable
 */
export declare function setDoorAllowedToBeBrokenOff(vehicle: number, doorId: number, isBreakable: boolean): void;
/**
 * Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
 * From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
 *
 * Example in C#:
 * Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
 * Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
 * Function.Call(Hash.CLEAR_DRAW_ORIGIN);
 *
 * Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
 * If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
 *
 * This function also effects the drawing of texts and other UI-elements.
 * The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
 * @param x
 * @param y
 * @param z
 * @param p3
 */
export declare function setDrawOrigin(x: number, y: number, z: number, p3: boolean): void;
export declare function setDriftTyres(vehicle: number, toggle: boolean): void;
/**
 * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
 * @param object
 * @param toggle
 * @param p2
 */
export declare function setDriveArticulatedJoint(object: number, toggle: boolean, p2: number): void;
export declare function setDriveArticulatedJointWithInflictor(object: number, toggle: boolean, p2: number, ped: number): void;
export declare function setDriveTaskCruiseSpeed(driver: number, cruiseSpeed: number): void;
/**
 * This native is used to set the driving style for specific ped.
 *
 * Driving styles id seems to be:
 * 786468
 * 262144
 * 786469
 *
 * http://gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param drivingStyle
 */
export declare function setDriveTaskDrivingStyle(ped: number, drivingStyle: number): void;
export declare function setDriveTaskMaxCruiseSpeed(ped: number, speed: number): void;
/**
 * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 */
export declare function setDrivebyTaskTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number): void;
/**
 * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
 * @param driver
 * @param ability
 */
export declare function setDriverAbility(driver: number, ability: number): void;
/**
 * range 0.0f - 1.0f
 * @param driver
 * @param aggressiveness
 */
export declare function setDriverAggressiveness(driver: number, aggressiveness: number): void;
/**
 * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
 * @param driver
 * @param modifier
 */
export declare function setDriverRacingModifier(driver: number, modifier: number): void;
/**
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param radioStation
 * @param p2
 */
export declare function setEmitterRadioStation(emitterName: string, radioStation: string, p2: number): void;
/**
 * Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
 * @param ped
 * @param toggle
 */
export declare function setEnableBoundAnkles(ped: number, toggle: boolean): void;
/**
 * ped can not pull out a weapon when true
 * @param ped
 * @param toggle
 */
export declare function setEnableHandcuffs(ped: number, toggle: boolean): void;
export declare function setEnablePedEnveffScale(ped: number, toggle: boolean): void;
/**
 * Enables diving motion when underwater.
 * @param ped
 * @param toggle
 */
export declare function setEnableScuba(ped: number, toggle: boolean): void;
/**
 * Enable/Disables global slipstream physics
 * @param toggle
 */
export declare function setEnableVehicleSlipstreaming(toggle: boolean): void;
/**
 * skin - everything alpha except skin
 * Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
 * @param entity
 * @param alphaLevel
 * @param skin
 */
export declare function setEntityAlpha(entity: number, alphaLevel: number, skin: boolean): void;
export declare function setEntityAlwaysPrerender(entity: number, toggle: boolean): void;
export declare function setEntityAngularVelocity(entity: number, x: number, y: number, z: number): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animName
 * @param time
 */
export declare function setEntityAnimCurrentTime(entity: number, animDictionary: string, animName: string, time: number): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animName
 * @param speedMultiplier
 */
export declare function setEntityAnimSpeed(entity: number, animDictionary: string, animName: string, speedMultiplier: number): void;
/**
 * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
 *
 * p1 has no effect when either its on or off
 * maybe a quick disassembly will tell us what it does
 *
 * p2 has no effect when either its on or off
 * maybe a quick disassembly will tell us what it does
 * @param entity
 * @param p1
 * @param p2
 */
export declare function setEntityAsMissionEntity(entity: number, p1: boolean, p2: boolean): void;
/**
 * Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
 * If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
 * Entities marked as no longer needed, will be deleted as the engine sees fit.
 * Use this if you just want to just let the game delete the ped:
 * void MarkPedAsAmbientPed(Ped ped) {
 * auto addr = getScriptHandleBaseAddress(ped);
 *
 * if (!addr) {
 * return;
 * }
 *
 * //the game uses only lower 4 bits as entity population type
 * BYTE origValue = *(BYTE *)(addr + 0xDA);
 * *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
 * }
 * @param entity
 */
export declare function setEntityAsNoLongerNeeded(entity: number): number;
export declare function setEntityCanBeDamaged(entity: number, toggle: boolean): void;
export declare function setEntityCanBeDamagedByRelationshipGroup(entity: number, bCanBeDamaged: boolean, relGroup: number): void;
/**
 * Sets whether the entity can be targeted without being in line-of-sight.
 * @param entity
 * @param toggle
 */
export declare function setEntityCanBeTargetedWithoutLos(entity: number, toggle: boolean): void;
export declare function setEntityCanOnlyBeDamagedByEntity(entity1: number, entity2: number): void;
export declare function setEntityCanOnlyBeDamagedByScriptParticipants(entity: number, toggle: boolean): void;
export declare function setEntityCantCauseCollisionDamagedEntity(entity1: number, entity2: number): void;
export declare function setEntityCollision(entity: number, toggle: boolean, keepPhysics: boolean): void;
export declare function setEntityCompletelyDisableCollision(entity: number, toggle: boolean, keepPhysics: boolean): void;
/**
 * p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
 *
 * Often ends with 1, 0, 0, 1); in the scripts. It works.
 *
 * Axis - Invert Axis Flags
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param clearArea
 */
export declare function setEntityCoords(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void;
/**
 * Axis - Invert Axis Flags
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export declare function setEntityCoordsNoOffset(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): void;
export declare function setEntityCoordsWithoutPlantsReset(entity: number, xPos: number, yPos: number, zPos: number, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void;
export declare function setEntityDynamic(entity: number, toggle: boolean): void;
export declare function setEntityFlagRenderSmallShadow(object: number, toggle: boolean): void;
/**
 * Sets entity+38 to C (when false) or 0xFF3f (when true)
 * @param entity
 * @param toggle
 */
export declare function setEntityFlagSuppressShadow(entity: number, toggle: boolean): void;
export declare function setEntityForNullConvPed(p0: number, entity: number): void;
export declare function setEntityGhostedForGhostPlayers(entity: number, toggle: boolean): void;
export declare function setEntityHasGravity(entity: number, toggle: boolean): void;
/**
 * Set the heading of an entity in degrees also known as "Yaw".
 * @param entity
 * @param heading
 */
export declare function setEntityHeading(entity: number, heading: number): void;
/**
 * health >= 0
 * male ped ~= 100 - 200
 * female ped ~= 0 - 100
 * @param entity
 * @param health
 * @param p2
 */
export declare function setEntityHealth(entity: number, health: number, p2: number): void;
export declare function setEntityIconColor(entity: number, red: number, green: number, blue: number, alpha: number): void;
export declare function setEntityIconVisibility(entity: number, toggle: boolean): void;
/**
 * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
 *
 * If you use this for a ped and you want Ragdoll to stay enabled, then do:
 * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
 *
 * Use this if you want to get the invincibility status:
 * bool IsPedInvincible(Ped ped)
 * {
 * auto addr = getScriptHandleBaseAddress(ped);
 *
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 *
 * return false;
 * }
 * @param entity
 * @param toggle
 */
export declare function setEntityInvincible(entity: number, toggle: boolean): void;
export declare function setEntityIsInVehicle(entity: number): void;
export declare function setEntityIsTargetPriority(entity: number, p1: boolean, p2: number): void;
export declare function setEntityLights(entity: number, toggle: boolean): void;
/**
 * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
 * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
 * @param entity
 * @param toggle
 * @param p2
 */
export declare function setEntityLoadCollisionFlag(entity: number, toggle: boolean, p2: number): void;
/**
 * Makes the provided entity visible for yourself for the current frame.
 * @param entity
 */
export declare function setEntityLocallyInvisible(entity: number): void;
export declare function setEntityLocallyVisible(entity: number): void;
/**
 * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
 * @param entity
 * @param value
 */
export declare function setEntityLodDist(entity: number, value: number): void;
/**
 * For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
 * @param entity
 * @param value
 */
export declare function setEntityMaxHealth(entity: number, value: number): void;
export declare function setEntityMaxSpeed(entity: number, speed: number): void;
export declare function setEntityMirrorReflectionFlag(entity: number, p1: boolean): void;
export declare function setEntityMotionBlur(entity: number, toggle: boolean): void;
/**
 * Calling this function disables collision between two entities.
 * The importance of the order for entity1 and entity2 is unclear.
 * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
 * @param entity1
 * @param entity2
 * @param thisFrameOnly
 */
export declare function setEntityNoCollisionEntity(entity1: number, entity2: number, thisFrameOnly: boolean): void;
export declare function setEntityNoweapondecals(entity: number, p1: boolean): void;
export declare function setEntityOnlyDamagedByPlayer(entity: number, toggle: boolean): void;
export declare function setEntityOnlyDamagedByRelationshipGroup(entity: number, p1: boolean, p2: number): void;
/**
 * Enable / disable each type of damage.
 *
 * waterProof is damage related to water not drowning
 * --------------
 * p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);
 *
 * @param entity
 * @param bulletProof
 * @param fireProof
 * @param explosionProof
 * @param collisionProof
 * @param meleeProof
 * @param steamProof
 * @param p7
 * @param waterProof
 */
export declare function setEntityProofs(entity: number, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, steamProof: boolean, p7: boolean, waterProof: boolean): void;
/**
 * w is the correct parameter name!
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
export declare function setEntityQuaternion(entity: number, x: number, y: number, z: number, w: number): void;
export declare function setEntityRecordsCollisions(entity: number, toggle: boolean): void;
export declare function setEntityRenderScorched(entity: number, toggle: boolean): void;
export declare function setEntityRequiresMoreExpensiveRiverCheck(entity: number, toggle: boolean): void;
/**
 * rotationOrder refers to the order yaw pitch roll is applied
 * value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
 * Unsure what value corresponds to what rotation order, more testing will be needed for that.
 * For the most part R* uses 1 or 2 as the order.
 * p5 is usually set as true
 *
 * @param entity
 * @param pitch
 * @param roll
 * @param yaw
 * @param rotationOrder
 * @param p5
 */
export declare function setEntityRotation(entity: number, pitch: number, roll: number, yaw: number, rotationOrder: number, p5: boolean): void;
/**
 * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
 *
 * "Allow Freeze If No Collision"
 * @param entity
 * @param toggle
 */
export declare function setEntityShouldFreezeWaitingOnCollision(entity: number, toggle: boolean): void;
/**
 * Only called once in the scripts.
 *
 * Related to weapon objects.
 *
 * @param entity
 * @param p1
 */
export declare function setEntitySortBias(entity: number, p1: number): void;
/**
 * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
 *
 * 0 = green
 * 1 = red
 * 2 = yellow
 * 3 = reset changes
 * changing lights may not change the behavior of vehicles
 * @param entity
 * @param state
 */
export declare function setEntityTrafficlightOverride(entity: number, state: number): void;
export declare function setEntityUseMaxDistanceForWaterReflection(entity: number, p1: boolean): void;
/**
 * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
 * @param entity
 * @param x
 * @param y
 * @param z
 */
export declare function setEntityVelocity(entity: number, x: number, y: number, z: number): void;
/**
 * p2 is always 0.
 * @param entity
 * @param toggle
 * @param p2
 */
export declare function setEntityVisible(entity: number, toggle: boolean, p2: boolean): void;
export declare function setEntityVisibleInCutscene(p0: number, p1: boolean, p2: boolean): void;
export declare function setEntityWaterReflectionFlag(entity: number, toggle: boolean): void;
export declare function setEqippedWeaponStartSpinningAtFullSpeed(ped: number): void;
export declare function setEveryoneIgnorePlayer(player: number, toggle: boolean): void;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Groups found in the scripts used with this native:
 *
 * "AMMUNATION",
 * "QUARRY",
 * "Triathlon_1",
 * "Triathlon_2",
 * "Triathlon_3"
 * @param scenarioGroup
 */
export declare function setExclusiveScenarioGroup(scenarioGroup: string): void;
/**
 * Used only once in the scripts (fm_mission_controller) like so:
 *
 * TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");
 * @param ped
 * @param state
 */
export declare function setExpectedCloneNextTaskMoveNetworkState(ped: number, state: string): boolean;
export declare function setExplosiveAmmoThisFrame(player: number): void;
export declare function setExplosiveMeleeThisFrame(player: number): void;
export declare function setExposuretweak(toggle: boolean): void;
/**
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 */
export declare function setExtraTcmodifier(modifierName: string): void;
/**
 * Clipsets:
 * facials@gen_female@base
 * facials@gen_male@base
 * facials@p_m_zero@base
 *
 * Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
 * mood_drunk_1
 * mood_stressed_1
 * mood_happy_1
 * mood_talking_1
 *
 * @param ped
 * @param animDict
 */
export declare function setFacialClipset(ped: number, animDict: string): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animName
 * @param animDict
 */
export declare function setFacialIdleAnimOverride(ped: number, animName: string, animDict: string): void;
/**
 * Sets whether the game should fade in after the player dies or is arrested.
 * @param toggle
 */
export declare function setFadeInAfterDeathArrest(toggle: boolean): void;
export declare function setFadeInAfterLoad(toggle: boolean): void;
/**
 * Sets whether the game should fade out after the player is arrested.
 * @param toggle
 */
export declare function setFadeOutAfterArrest(toggle: boolean): void;
/**
 * Sets whether the game should fade out after the player dies.
 * @param toggle
 */
export declare function setFadeOutAfterDeath(toggle: boolean): void;
/**
 * p2 maybe z float?
 * @param x
 * @param y
 * @param p2
 */
export declare function setFakeGpsPlayerPositionThisFrame(x: number, y: number, p2: number): void;
/**
 * Argument must be 0.0f or above 38.0f, or it will be ignored.
 * @param altitude
 * @param p1
 * @param p2
 */
export declare function setFakeMinimapMaxAltimeterHeight(altitude: number, p1: boolean, p2: number): void;
/**
 * Sets the position of the arrow icon representing the player on both the minimap and world map.
 *
 * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
 * @param x
 * @param y
 */
export declare function setFakePausemapPlayerPositionThisFrame(x: number, y: number): void;
/**
 * Setter for GET_FAKE_SPECTATOR_MODE
 * @param toggle
 */
export declare function setFakeSpectatorMode(toggle: boolean): void;
/**
 * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
 *
 * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
 * @param fakeWantedLevel
 */
export declare function setFakeWantedLevel(fakeWantedLevel: number): void;
export declare function setFarDrawVehicles(toggle: boolean): void;
export declare function setFireAmmoThisFrame(player: number): void;
export declare function setFirstPersonAimCamNearClipThisUpdate(p0: number): void;
export declare function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(p0: number, p1: number): void;
export declare function setFirstPersonAimCamRelativePitchLimitsThisUpdate(p0: number, p1: number): void;
export declare function setFirstPersonAimCamZoomFactor(zoomFactor: number): void;
export declare function setFirstPersonAimCamZoomFactorLimitsThisUpdate(p0: number, p1: number): void;
export declare function setFirstPersonFlashEffectType(p0: number): void;
export declare function setFirstPersonFlashEffectVehicleModelHash(vehicleModel: number): void;
/**
 * From b617 scripts:
 *
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");
 * @param vehicleName
 */
export declare function setFirstPersonFlashEffectVehicleModelName(vehicleName: string): void;
/**
 * Does nothing
 * @param yaw
 */
export declare function setFirstPersonShooterCameraHeading(yaw: number): void;
export declare function setFirstPersonShooterCameraPitch(pitch: number): void;
export declare function setFlammabilityMultiplier(p0: number): void;
/**
 * Purpose of p0 and p1 unknown.
 * @param p0
 * @param p1
 * @param fadeIn
 * @param duration
 * @param fadeOut
 */
export declare function setFlash(p0: number, p1: number, fadeIn: number, duration: number, fadeOut: number): void;
/**
 * Enables/disables flashlight on ped's weapon.
 * @param ped
 * @param toggle
 */
export declare function setFlashLightActiveHistory(ped: number, toggle: boolean): void;
export declare function setFlashLightFadeDistance(distance: number): boolean;
export declare function setFleeingVehiclesUseSwitchedOffNodes(p0: number): void;
export declare function setFloatingHelpTextScreenPosition(hudIndex: number, x: number, y: number): void;
export declare function setFloatingHelpTextStyle(hudIndex: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function setFloatingHelpTextToEntity(hudIndex: number, entity: number, offsetX: number, offsetY: number): void;
export declare function setFloatingHelpTextWorldPosition(hudIndex: number, x: number, y: number, z: number): void;
export declare function setFlyCamCoordAndConstrain(cam: number, x: number, y: number, z: number): void;
export declare function setFlyCamHorizontalResponse(cam: number, p1: number, p2: number, p3: number): void;
export declare function setFlyCamMaxHeight(cam: number, height: number): void;
export declare function setFlyCamVerticalControlsThisUpdate(cam: number): void;
export declare function setFlyCamVerticalResponse(cam: number, p1: number, p2: number, p3: number): void;
/**
 * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
 * @param entity
 */
export declare function setFocusEntity(entity: number): void;
/**
 * Override the area where the camera will render the terrain.
 * p3, p4 and p5 are usually set to 0.0
 *
 * @param x
 * @param y
 * @param z
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export declare function setFocusPosAndVel(x: number, y: number, z: number, offsetX: number, offsetY: number, offsetZ: number): void;
export declare function setFollowCamIgnoreAttachParentMovementThisUpdate(): void;
export declare function setFollowPedCamLadderAlignThisUpdate(): void;
/**
 * From the scripts:
 *
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * @param camName
 * @param p1
 */
export declare function setFollowPedCamThisUpdate(camName: string, p1: number): boolean;
/**
 * Sets the type of Player camera:
 *
 * 0 - Third Person Close
 * 1 - Third Person Mid
 * 2 - Third Person Far
 * 4 - First Person
 * @param viewMode
 */
export declare function setFollowPedCamViewMode(viewMode: number): void;
export declare function setFollowVehicleCamHighAngleModeEveryUpdate(p0: boolean, p1: boolean): void;
export declare function setFollowVehicleCamHighAngleModeThisUpdate(p0: boolean): void;
export declare function setFollowVehicleCamSeatThisUpdate(seatIndex: number): void;
/**
 * Sets the type of Player camera in vehicles:
 * viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
 * @param viewMode
 */
export declare function setFollowVehicleCamViewMode(viewMode: number): void;
export declare function setFollowVehicleCamZoomLevel(zoomLevel: number): void;
export declare function setForceFixLinkMatrices(vehicle: number): void;
export declare function setForceFootstepUpdate(ped: number, toggle: boolean): void;
export declare function setForceHdVehicle(vehicle: number, toggle: boolean): void;
/**
 * No observed effect.
 * @param vehicle
 * @param p1
 */
export declare function setForceLowLodAnchorMode(vehicle: number, p1: boolean): void;
export declare function setForceMotionblur(toggle: boolean): void;
export declare function setForceObjectThisFrame(x: number, y: number, z: number, p3: number): void;
export declare function setForceShowGps(toggle: boolean): void;
export declare function setForceStepType(ped: number, p1: boolean, type: number, p3: number): void;
export declare function setForceVehicleEngineDamageByBullet(p0: number, p1: boolean): void;
export declare function setForcedJumpThisFrame(player: number): void;
/**
 * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
 * @param vehicle
 * @param height
 */
export declare function setForkliftForkHeight(vehicle: number, height: number): void;
export declare function setFormationLeader(vehicle: number, x: number, y: number, z: number, p4: number): void;
export declare function setFreemodePrologueDone(p0: number, characterSlot: number): void;
/**
 * Sets profile setting 940 and 941
 * @param profileSetting
 * @param settingValue
 */
export declare function setFreemodeStrandProgressionStatus(profileSetting: number, settingValue: number): void;
export declare function setFrontendActive(active: boolean): void;
export declare function setFrontendRadioActive(active: boolean): void;
/**
 * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
 * @param toggle
 */
export declare function setGamePaused(toggle: boolean): void;
export declare function setGamePausesForStreaming(toggle: boolean): void;
export declare function setGameplayCamAltitudeFovScalingState(p0: boolean): void;
export declare function setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity: number): void;
/**
 * Forces gameplay cam to specified ped as if you were the ped or spectating it
 * @param ped
 */
export declare function setGameplayCamFollowPedThisUpdate(ped: number): void;
export declare function setGameplayCamIgnoreEntityCollisionThisUpdate(entity: number): void;
/**
 * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * @param p0
 */
export declare function setGameplayCamMaxMotionBlurStrengthThisUpdate(p0: number): void;
/**
 * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * @param p0
 */
export declare function setGameplayCamMotionBlurScalingThisUpdate(p0: number): void;
/**
 * Sets the camera position relative to heading in float from -360 to +360.
 *
 * Heading is alwyas 0 in aiming camera.
 * @param heading
 */
export declare function setGameplayCamRelativeHeading(heading: number): void;
/**
 * This native sets the camera's pitch (rotation on the x-axis).
 * @param angle
 * @param scalingFactor
 */
export declare function setGameplayCamRelativePitch(angle: number, scalingFactor: number): void;
/**
 * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
 * @param amplitude
 */
export declare function setGameplayCamShakeAmplitude(amplitude: number): void;
export declare function setGameplayCoordHint(x: number, y: number, z: number, duration: number, blendOutDuration: number, blendInDuration: number, p6: number): void;
/**
 * p8 could be some sort of flag. Scripts use:
 * -244429742
 * 0
 * 1726668277
 * 1844968929
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 * @param p8
 */
export declare function setGameplayEntityHint(entity: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number, p8: number): void;
export declare function setGameplayHintBaseOrbitPitchOffset(value: number): void;
export declare function setGameplayHintCameraBlendToFollowPedMediumViewMode(toggle: boolean): void;
export declare function setGameplayHintCameraRelativeSideOffset(xOffset: number): void;
export declare function setGameplayHintCameraRelativeVerticalOffset(yOffset: number): void;
export declare function setGameplayHintFollowDistanceScalar(value: number): void;
export declare function setGameplayHintFov(FOV: number): void;
export declare function setGameplayObjectHint(object: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void;
export declare function setGameplayPedHint(ped: number, x1: number, y1: number, z1: number, p4: boolean, duration: number, blendOutDuration: number, blendInDuration: number): void;
/**
 * Focuses the camera on the specified vehicle.
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 */
export declare function setGameplayVehicleHint(vehicle: number, offsetX: number, offsetY: number, offsetZ: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void;
export declare function setGarbageTrucks(toggle: boolean): void;
/**
 * Must be a value between 1 and 254
 * @param alpha
 */
export declare function setGhostAlpha(alpha: number): void;
/**
 * Set state to true to extend the wings, false to retract them.
 * @param vehicle
 * @param state
 */
export declare function setGliderActive(vehicle: number, state: boolean): void;
/**
 * Needs to be looped! And yes, it does work and is not a hash collision.
 * Birds will try to reach the given height.
 * @param height
 */
export declare function setGlobalMinBirdFlightHeight(height: number): void;
export declare function setGlobalPositionOffsetForRecordedVehiclePlayback(vehicle: number, x: number, y: number, z: number): void;
export declare function setGlobalRadioSignalLevel(p0: number): void;
/**
 * Used for GTAO CEO/Associate spawned vehicles.
 * @param vehicle
 * @param toggle
 */
export declare function setGoonBossVehicle(vehicle: number, toggle: boolean): void;
export declare function setGpsActive(active: boolean): void;
/**
 * radarThickness: The width of the GPS route on the radar
 * mapThickness: The width of the GPS route on the map
 * @param toggle
 * @param radarThickness
 * @param mapThickness
 */
export declare function setGpsCustomRouteRender(toggle: boolean, radarThickness: number, mapThickness: number): void;
export declare function setGpsDisabledZone(x1: number, y1: number, z1: number, x2: number, y2: number, z3: number): void;
/**
 * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
 * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
 *
 * **Setting a waypoint at the same coordinate:**
 * Disabled Zone: https://i.imgur.com/P9VUuxM.png
 * Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param index
 */
export declare function setGpsDisabledZoneAtIndex(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, index: number): void;
/**
 * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
 *
 * Doesn't seem like the flags are actually read by the game at all.
 * @param p0
 * @param p1
 */
export declare function setGpsFlags(p0: number, p1: number): void;
export declare function setGpsFlashes(toggle: boolean): void;
export declare function setGpsMultiRouteRender(toggle: boolean): void;
/**
 * This function is hard-coded to always return 0.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export declare function setGrassCullSphere(p0: number, p1: number, p2: number, p3: number): number;
/**
 * level can be from 0 to 3
 * 0: 9.8 - normal
 * 1: 2.4 - low
 * 2: 0.1 - very low
 * 3: 0.0 - off
 * @param level
 */
export declare function setGravityLevel(level: number): void;
export declare function setGroundEffectReducesDrag(toggle: boolean): void;
/**
 * 0: Default
 * 1: Circle Around Leader
 * 2: Alternative Circle Around Leader
 * 3: Line, with Leader at center
 * @param groupId
 * @param formationType
 */
export declare function setGroupFormation(groupId: number, formationType: number): void;
export declare function setGroupFormationSpacing(groupId: number, x: number, y: number, z: number): void;
/**
 * Sets the range at which members will automatically leave the group.
 * @param groupHandle
 * @param separationRange
 */
export declare function setGroupSeparationRange(groupHandle: number, separationRange: number): void;
export declare function setHasPostedAllVehiclesDriven(): void;
/**
 * Sets profile setting 866
 * @param value
 */
export declare function setHasSpecialeditionContent(value: number): void;
export declare function setHdArea(x: number, y: number, z: number, radius: number): void;
/**
 * Used for freemode (online) characters.
 *
 * For some reason, the scripts use a rounded float for the index.
 * Indexes:
 * 1. black
 * 2. very light blue/green
 * 3. dark blue
 * 4. brown
 * 5. darker brown
 * 6. light brown
 * 7. blue
 * 8. light blue
 * 9. pink
 * 10. yellow
 * 11. purple
 * 12. black
 * 13. dark green
 * 14. light brown
 * 15. yellow/black pattern
 * 16. light colored spiral pattern
 * 17. shiny red
 * 18. shiny half blue/half red
 * 19. half black/half light blue
 * 20. white/red perimter
 * 21. green snake
 * 22. red snake
 * 23. dark blue snake
 * 24. dark yellow
 * 25. bright yellow
 * 26. all black
 * 28. red small pupil
 * 29. devil blue/black
 * 30. white small pupil
 * 31. glossed over
 * @param ped
 * @param index
 */
export declare function setHeadBlendEyeColor(ped: number, index: number): void;
/**
 * p4 seems to vary from 0 to 3.
 * Preview: https://gfycat.com/MaleRareAmazonparrot
 * @param ped
 * @param r
 * @param g
 * @param b
 * @param id
 */
export declare function setHeadBlendPaletteColor(ped: number, r: number, g: number, b: number, id: number): void;
export declare function setHealthHudDisplayValues(health: number, capacity: number, wasAdded: boolean): void;
/**
 * Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
 * @param p0
 * @param p1
 */
export declare function setHealthSnacksCarriedByAllNewPeds(p0: number, p1: number): void;
/**
 * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
 *
 * this native works on planes to?
 * @param vehicle
 */
export declare function setHeliBladesFullSpeed(vehicle: number): void;
/**
 * Sets the speed of the helicopter blades in percentage of the full speed.
 *
 * vehicleHandle: The helicopter.
 * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
 * @param vehicle
 * @param speed
 */
export declare function setHeliBladesSpeed(vehicle: number, speed: number): void;
/**
 * Stops the cargobob from being able to attach any vehicle
 * @param vehicle
 * @param toggle
 */
export declare function setHeliCanPickupEntityThatHasPickUpDisabled(vehicle: number, toggle: boolean): void;
export declare function setHeliCombatOffset(vehicle: number, x: number, y: number, z: number): void;
/**
 * value between 0.0 and 1.0
 * @param helicopter
 * @param multiplier
 */
export declare function setHeliControlLaggingRateScalar(helicopter: number, multiplier: number): void;
export declare function setHeliMainRotorHealth(vehicle: number, health: number): void;
export declare function setHeliResistToExplosion(vehicle: number, toggle: boolean): void;
export declare function setHeliTailBoomCanBreakOff(vehicle: number, toggle: boolean): boolean;
export declare function setHeliTailRotorHealth(vehicle: number, health: number): void;
export declare function setHeliTurbulenceScalar(vehicle: number, p1: number): void;
export declare function setHelpMessageStyle(style: number, hudColor: number, alpha: number, p3: number, p4: number): void;
export declare function setHidofOverride(p0: boolean, p1: boolean, nearplaneOut: number, nearplaneIn: number, farplaneOut: number, farplaneIn: number): void;
/**
 * Makes the ped ragdoll like when falling from a great height
 * @param ped
 * @param minTime
 * @param maxTime
 * @param entryType
 */
export declare function setHighFallTask(ped: number, minTime: number, maxTime: number, entryType: number): void;
export declare function setHornEnabled(vehicle: number, toggle: boolean): void;
export declare function setHornPermanentlyOn(vehicle: number): void;
export declare function setHornPermanentlyOnTime(vehicle: number, time: number): void;
export declare function setHoverModeWingRatio(vehicle: number, ratio: number): void;
export declare function setHudComponentPosition(id: number, x: number, y: number): void;
/**
 * Works only on vehicles that support hydraulics.
 * @param vehicle
 * @param wheelId
 * @param value
 */
export declare function setHydraulicSuspensionRaiseFactor(vehicle: number, wheelId: number, value: number): void;
/**
 * States:
 * 4 = raise
 * 5 = lower
 * 6 = jump
 * @param vehicle
 * @param state
 */
export declare function setHydraulicVehicleState(vehicle: number, state: number): void;
/**
 * Sets vehicle wheel hydraulic states transition. Known states:
 * 0 - reset
 * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
 * 2 - jump using wheel
 * @param vehicle
 * @param wheelId
 * @param state
 * @param value
 * @param p4
 */
export declare function setHydraulicWheelState(vehicle: number, wheelId: number, state: number, value: number, p4: number): void;
/**
 * If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
 *
 * Only used once in each carmod script, on a car that does not have hydraulics to begin with.
 * @param vehicle
 * @param toggle
 */
export declare function setHydraulicsControl(vehicle: number, toggle: boolean): void;
export declare function setIdealSpawnDistanceForIncident(incidentId: number, p1: number): void;
export declare function setIgnoreLowPriorityShockingEvents(player: number, toggle: boolean): void;
export declare function setIgnoreNoGpsFlag(toggle: boolean): void;
/**
 * See: SET_BLIP_ROUTE
 * @param toggle
 */
export declare function setIgnoreNoGpsFlagUntilFirstNormalNode(toggle: boolean): void;
export declare function setIgnorePlanesSmallPitchChange(p0: number, p1: number): void;
export declare function setIkTarget(ped: number, ikIndex: number, entityLookAt: number, boneLookAt: number, offsetX: number, offsetY: number, offsetZ: number, p7: number, blendInDuration: number, blendOutDuration: number): void;
/**
 * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
 * @param toggle
 */
export declare function setInArenaMode(toggle: boolean): void;
export declare function setInStuntMode(p0: boolean): void;
/**
 * Forces gameplay cam to specified vehicle as if you were in it
 * @param p0
 * @param p1
 */
export declare function setInVehicleCamStateThisUpdate(p0: number, p1: number): void;
export declare function setIncidentRequestedUnits(incidentId: number, dispatchService: number, numUnits: number): void;
export declare function setIncreaseWheelCrushDamage(vehicle: number, toggle: boolean): void;
export declare function setInitialPlayerStation(radioStation: string): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export declare function setInputExclusive(control: number, action: number): void;
export declare function setInsideVeryLargeInterior(toggle: boolean): void;
export declare function setInsideVerySmallInterior(toggle: boolean): void;
/**
 * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
 * @param flag
 */
export declare function setInstancePriorityHint(flag: number): void;
/**
 * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
 * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
 *
 * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
 * @param p0
 */
export declare function setInstancePriorityMode(p0: number): void;
export declare function setInteriorActive(interiorID: number, toggle: boolean): void;
/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 * @param color
 */
export declare function setInteriorEntitySetTintIndex(interior: number, entitySetName: string, color: number): void;
/**
 * Only used once in the entire game scripts.
 * Does not actually return anything.
 * @param interior
 */
export declare function setInteriorInUse(interior: number): boolean;
export declare function setInvertGhosting(p0: boolean): void;
/**
 * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
 * Doesn't work for planes/helis.
 * @param vehicle
 * @param state
 */
export declare function setInvertVehicleControls(vehicle: number, state: boolean): void;
/**
 * Jenkins hash _might_ be 0xFC227584.
 * @param entity
 * @param toggle
 */
export declare function setIsExteriorOnly(entity: number, toggle: boolean): void;
export declare function setIsObjectArticulated(object: number, toggle: boolean): void;
export declare function setIsObjectBall(object: number, toggle: boolean): void;
/**
 * Enables the specified island. For more information, see islandhopper.meta
 * @param name
 * @param toggle
 */
export declare function setIslandEnabled(name: string, toggle: boolean): void;
export declare function setJobActivityIdStarted(p0: number, characterSlot: number): void;
/**
 * Only appears in lamar1 script.
 * @param ped
 * @param p1
 */
export declare function setLadderClimbInputState(ped: number, p1: number): void;
export declare function setLastDrivenVehicle(vehicle: number): void;
export declare function setLastViewedShopItem(p0: number, p1: number, p2: number): void;
export declare function setLawPedsCanAttackNonWantedPlayerThisFrame(player: number): void;
/**
 * PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation
 *
 * ***
 *
 * In "am_hold_up.ysc" used once:
 *
 * l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
 * PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));
 * @param p0
 */
export declare function setLawResponseDelayOverride(p0: number): void;
export declare function setLightOverrideMaxIntensityScale(p0: number): void;
export declare function setLightsCutoffDistanceTweak(distance: number): void;
export declare function setLocalPlayerAsGhost(toggle: boolean, p1: boolean): void;
export declare function setLocalPlayerCanCollectPortablePickups(toggle: boolean): void;
export declare function setLocalPlayerInvisibleLocally(bIncludePlayersVehicle: boolean): void;
/**
 * Maximum amount of pickup models that can be disallowed is 30.
 * @param modelHash
 * @param toggle
 */
export declare function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash: number, toggle: boolean): void;
export declare function setLocalPlayerVisibleInCutscene(p0: boolean, p1: boolean): void;
export declare function setLocalPlayerVisibleLocally(bIncludePlayersVehicle: boolean): void;
export declare function setLockAdaptiveDofDistance(p0: boolean): void;
/**
 * Hardcoded not to work in multiplayer environments.
 * When you set locked to 0 the door open and to 1 the door close
 * OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
 *
 * OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param xRotMult
 * @param yRotMult
 * @param zRotMult
 */
export declare function setLockedUnstreamedInDoorOfType(modelHash: number, x: number, y: number, z: number, locked: boolean, xRotMult: number, yRotMult: number, zRotMult: number): void;
/**
 * Possible p0 values:
 *
 * "prologue"
 * "Prologue_Main"
 * @param name
 * @param toggle
 */
export declare function setMapdatacullboxEnabled(name: string, toggle: boolean): void;
export declare function setMaxArmourHudDisplay(maximumValue: number): void;
export declare function setMaxHealthHudDisplay(maximumValue: number): void;
export declare function setMaxNumPortablePickupsCarriedByPlayer(modelHash: number, number: number): void;
export declare function setMaxWantedLevel(maxWantedLevel: number): void;
/**
 * This native controls where the game plays audio from. By default the microphone is positioned on the player.
 * When p0 is true the game will play audio from the 3 positions inputted.
 * It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
 * The scripts mostly use it with only one position such as in fbi3.c:
 * AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));
 * @param toggle
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 */
export declare function setMicrophonePosition(toggle: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void;
export declare function setMinigameInProgress(toggle: boolean): void;
export declare function setMinimapBlockWaypoint(toggle: boolean): void;
/**
 * This native is used to colorize certain map components like the army base at the top of the map.
 * p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
 * @param componentId
 * @param toggle
 * @param overrideColor
 */
export declare function setMinimapComponent(componentId: number, toggle: boolean, overrideColor: number): boolean;
export declare function setMinimapFowDoNotUpdate(p0: boolean): void;
/**
 * Up to eight coordinates may be revealed per frame
 * @param x
 * @param y
 * @param z
 */
export declare function setMinimapFowRevealCoordinate(x: number, y: number, z: number): void;
/**
 * Not much is known so far on what it does _exactly_.
 * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
 * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
 * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
 * Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
 * @param hole
 */
export declare function setMinimapGolfCourse(hole: number): void;
export declare function setMinimapGolfCourseOff(): void;
/**
 * If true, the entire map will be revealed.
 *
 * FOW = Fog of War
 * @param toggle
 */
export declare function setMinimapHideFow(toggle: boolean): void;
/**
 * Toggles the North Yankton map
 * @param toggle
 */
export declare function setMinimapInPrologue(toggle: boolean): void;
export declare function setMinimapInSpectatorMode(toggle: boolean, ped: number): void;
export declare function setMinimapSonarSweep(toggle: boolean): void;
/**
 * If true, the player can't save the game.
 *
 *
 * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
 *
 * ^ also, if the mission flag is already set, the function does nothing at all
 * @param toggle
 */
export declare function setMissionFlag(toggle: boolean): void;
export declare function setMissionName(p0: boolean, name: string): void;
export declare function setMissionNameForUgcMission(p0: boolean, name: string): void;
/**
 * p1 is always 0
 * @param train
 * @param p1
 */
export declare function setMissionTrainAsNoLongerNeeded(p1: boolean): number;
export declare function setMissionTrainCoords(train: number, x: number, y: number, z: number): void;
export declare function setMobilePhoneDofState(toggle: boolean): void;
export declare function setMobilePhonePosition(posX: number, posY: number, posZ: number): void;
export declare function setMobilePhoneRadioState(state: boolean): void;
/**
 * Last parameter is unknown and always zero.
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p3
 */
export declare function setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: number): void;
/**
 * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
 * @param scale
 */
export declare function setMobilePhoneScale(scale: number): void;
export declare function setMobileRadioEnabledDuringGameplay(toggle: boolean): void;
/**
 * Unloads model from memory
 * @param model
 */
export declare function setModelAsNoLongerNeeded(model: number): void;
/**
 * Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
 * @param p0
 */
export declare function setMotionblurMaxVelScaler(p0: number): void;
/**
 * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 * @param taskMode
 * @param ignoreTargetVehDeadCheck
 */
export declare function setMountedWeaponTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number, taskMode: number, ignoreTargetVehDeadCheck: boolean): void;
/**
 * Changes the mouse cursor's sprite.
 * 1 = Normal
 * 6 = Left Arrow
 * 7 = Right Arrow
 * @param spriteId
 */
export declare function setMouseCursorStyle(spriteId: number): void;
/**
 * Shows the cursor on screen for one frame.
 */
export declare function setMouseCursorThisFrame(): void;
/**
 * Shows/hides the frontend cursor on the pause menu or similar menus.
 * Clicking off and then on the game window will show it again.
 * @param toggle
 */
export declare function setMouseCursorVisible(toggle: boolean): void;
/**
 * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
 * @param ped
 * @param name
 */
export declare function setMovementModeOverride(ped: number, name: string): void;
/**
 * Sets flag's sprite transparency. 0-255.
 * @param gamerTagId
 * @param component
 * @param alpha
 */
export declare function setMpGamerTagAlpha(gamerTagId: number, component: number, alpha: number): void;
export declare function setMpGamerTagBigText(gamerTagId: number, string: string): void;
/**
 * Sets a gamer tag's component colour
 *
 * gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
 * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
 * @param gamerTagId
 * @param component
 * @param hudColorIndex
 */
export declare function setMpGamerTagColour(gamerTagId: number, component: number, hudColorIndex: number): void;
/**
 * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
 * Should be enabled as flag (2). Has 0 opacity by default.
 *
 * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
 * -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
 * @param gamerTagId
 * @param hudColorIndex
 */
export declare function setMpGamerTagHealthBarColour(gamerTagId: number, hudColorIndex: number): void;
export declare function setMpGamerTagName(gamerTagId: number, string: string): void;
export declare function setMpGamerTagNumPackages(gamerTagId: number, p1: number): void;
/**
 * enum eMpGamerTagComponent
 * {
 * MP_TAG_GAMER_NAME,
 * MP_TAG_CREW_TAG,
 * MP_TAG_HEALTH_ARMOUR,
 * MP_TAG_BIG_TEXT,
 * MP_TAG_AUDIO_ICON,
 * MP_TAG_USING_MENU,
 * MP_TAG_PASSIVE_MODE,
 * MP_TAG_WANTED_STARS,
 * MP_TAG_DRIVER,
 * MP_TAG_CO_DRIVER,
 * MP_TAG_TAGGED,
 * MP_TAG_GAMER_NAME_NEARBY,
 * MP_TAG_ARROW,
 * MP_TAG_PACKAGES,
 * MP_TAG_INV_IF_PED_FOLLOWING,
 * MP_TAG_RANK_TEXT,
 * MP_TAG_TYPING,
 * MP_TAG_BAG_LARGE,
 * MP_TAG_ARROW,
 * MP_TAG_GANG_CEO,
 * MP_TAG_GANG_BIKER,
 * MP_TAG_BIKER_ARROW,
 * MP_TAG_MC_ROLE_PRESIDENT,
 * MP_TAG_MC_ROLE_VICE_PRESIDENT,
 * MP_TAG_MC_ROLE_ROAD_CAPTAIN,
 * MP_TAG_MC_ROLE_SARGEANT,
 * MP_TAG_MC_ROLE_ENFORCER,
 * MP_TAG_MC_ROLE_PROSPECT,
 * MP_TAG_TRANSMITTER,
 * MP_TAG_BOMB
 * };
 * @param gamerTagId
 * @param component
 * @param toggle
 * @param p3
 */
export declare function setMpGamerTagVisibility(gamerTagId: number, component: number, toggle: boolean, p3: number): void;
/**
 * displays wanted star above head
 * @param gamerTagId
 * @param wantedlvl
 */
export declare function setMpGamerTagWantedLevel(gamerTagId: number, wantedlvl: number): void;
export declare function setMpGamerTagsPointHealth(gamerTagId: number, value: number, maximumValue: number): void;
export declare function setMpGamerTagsShouldUsePointsHealth(gamerTagId: number, toggle: boolean): void;
/**
 * Displays a bunch of icons above the players name, and level, and their name twice
 * @param gamerTagId
 * @param toggle
 */
export declare function setMpGamerTagsShouldUseVehicleHealth(gamerTagId: number, toggle: boolean): void;
export declare function setMultiplayerBankCash(): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
export declare function setMultiplayerHudCash(p0: number, p1: boolean): void;
export declare function setMultiplayerWalletCash(): void;
export declare function setNetworkCutsceneEntities(toggle: boolean): void;
/**
 * Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
 * @param vehicle
 * @param toggle
 */
export declare function setNetworkEnableHighSpeedEdgeFallDetection(vehicle: number, toggle: boolean): void;
export declare function setNetworkIdAlwaysExistsForPlayer(netId: number, player: number, toggle: boolean): void;
/**
 * "No Reassign" in CPhysicalScriptGameStateDataNode
 * @param netId
 * @param toggle
 */
export declare function setNetworkIdCanBeReassigned(netId: number, toggle: boolean): void;
/**
 * Whether or not another player is allowed to take control of the entity
 * @param netId
 * @param toggle
 */
export declare function setNetworkIdCanMigrate(netId: number, toggle: boolean): void;
export declare function setNetworkIdExistsOnAllMachines(netId: number, toggle: boolean): void;
export declare function setNetworkIdPassControlInTutorial(netId: number, state: boolean): void;
export declare function setNetworkIdVisibleInCutscene(netId: number, p1: boolean, p2: boolean): void;
export declare function setNetworkIdVisibleInCutsceneHack(netId: number, p1: boolean, p2: boolean): void;
export declare function setNetworkIdVisibleInCutsceneRemainHack(p0: number, p1: number): void;
export declare function setNetworkVehicleAsGhost(vehicle: number, toggle: boolean): void;
/**
 * rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
 * @param vehicle
 * @param multiplier
 */
export declare function setNetworkVehicleMaxPositionDeltaMultiplier(vehicle: number, multiplier: number): void;
export declare function setNetworkVehicleRespotTimer(netId: number, time: number, p2: number, p3: number): void;
export declare function setNewWaypoint(x: number, y: number): void;
/**
 * This native does absolutely nothing, just a nullsub
 *
 * R* Comment:
 * SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
 * @param nextMoveState
 */
export declare function setNextDesiredMoveState(nextMoveState: number): void;
export declare function setNextPlayerTcmodifier(modifierName: string): void;
export declare function setNextRadioTrack(radioName: string, radioTrack: string, p2: string, p3: string): void;
/**
 * Enables Night Vision.
 *
 * Example:
 * C#: Function.Call(Hash.SET_NIGHTVISION, true);
 * C++: GRAPHICS::SET_NIGHTVISION(true);
 *
 * BOOL toggle:
 * true = turns night vision on for your player.
 * false = turns night vision off for your player.
 * @param toggle
 */
export declare function setNightvision(toggle: boolean): void;
export declare function setNoDuckingForConversation(p0: boolean): void;
export declare function setNoLoadingScreen(toggle: boolean): void;
export declare function setNoiseoveride(toggle: boolean): void;
export declare function setNoisinessoveride(value: number): void;
export declare function setNonParticipantsOfThisScriptAsGhosts(p0: boolean): void;
export declare function setNumberOfParkedVehicles(value: number): void;
/**
 * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
 * @param object
 * @param toggle
 */
export declare function setObjectAllowLowLodBuoyancy(object: number, toggle: boolean): void;
/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param object
 */
export declare function setObjectAsNoLongerNeeded(object: number): number;
/**
 * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
 * @param object
 * @param toggle
 */
export declare function setObjectForceVehiclesToAvoid(object: number, toggle: boolean): void;
export declare function setObjectGlowInSameTeam(pickup: number): void;
export declare function setObjectIsAPressurePlate(object: number, toggle: boolean): void;
export declare function setObjectIsSpecialGolfball(object: number, toggle: boolean): void;
export declare function setObjectIsVisibleInMirrors(object: number, toggle: boolean): void;
/**
 * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
 *
 * Other parameters seem to be unknown.
 *
 * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
 * p3: seems similar to p2
 * p4: makes obj fall slower the higher the value
 * p5: similar to p4
 * @param object
 * @param weight
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param gravity
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param buoyancy
 */
export declare function setObjectPhysicsParams(object: number, weight: number, p2: number, p3: number, p4: number, p5: number, gravity: number, p7: number, p8: number, p9: number, p10: number, buoyancy: number): void;
export declare function setObjectSpeedBoostAmount(object: number, p1: number): void;
export declare function setObjectSpeedBoostDuration(object: number, duration: number): void;
export declare function setObjectTakesDamageFromCollidingWithBuildings(p0: number, p1: boolean): void;
export declare function setObjectTargettable(object: number, targettable: boolean): void;
/**
 * enum ObjectPaintVariants
 * {
 * Pacific = 0,
 * Azure = 1,
 * Nautical = 2,
 * Continental = 3,
 * Battleship = 4,
 * Intrepid = 5,
 * Uniform = 6,
 * Classico = 7,
 * Mediterranean = 8,
 * Command = 9,
 * Mariner = 10,
 * Ruby = 11,
 * Vintage = 12,
 * Pristine = 13,
 * Merchant = 14,
 * Voyager = 15
 * };
 * @param object
 * @param textureVariation
 */
export declare function setObjectTintIndex(object: number, textureVariation: number): void;
export declare function setOnIslandXForTakenPhoto(p0: number): void;
export declare function setOnlyAllowAmmoCollectionWhenLow(p0: boolean): void;
export declare function setOpenRearDoorsOnExplosion(vehicle: number, toggle: boolean): void;
export declare function setOverrideNitrousLevel(vehicle: number, toggle: boolean, level: number, power: number, rechargeTime: number, disableSound: boolean): void;
export declare function setOverrideVehicleDoorTorque(p0: number, p1: number, p2: number): void;
/**
 * Appears to have an optional bool parameter that is unused in the scripts.
 *
 * If you pass true, something will be set to zero.
 * @param weatherType
 */
export declare function setOverrideWeather(weatherType: string): void;
/**
 * Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
 * @param weatherType
 * @param p1
 */
export declare function setOverrideWeatherex(weatherType: string, p1: boolean): void;
export declare function setPackedStatBoolCode(index: number, value: boolean, characterSlot: number): void;
export declare function setPackedStatIntCode(index: number, value: number, characterSlot: number): void;
/**
 * Toggles a value (bool) for cutscenes.
 * @param toggle
 */
export declare function setPadCanShakeDuringCutscene(toggle: boolean): void;
export declare function setParachuteTaskTarget(ped: number, x: number, y: number, z: number): void;
export declare function setParachuteTaskThrust(ped: number, thrust: number): void;
export declare function setParkedVehicleDensityMultiplierThisFrame(multiplier: number): void;
export declare function setParticleFxBangScrapeLodrangeScale(p0: number): void;
export declare function setParticleFxBloodScale(p0: number): void;
export declare function setParticleFxBulletImpactLodrangeScale(p0: number): void;
export declare function setParticleFxBulletImpactScale(scale: number): void;
export declare function setParticleFxBulletTraceNoAngleReject(p0: boolean): void;
export declare function setParticleFxCamInsideNonplayerVehicle(vehicle: number, p1: boolean): void;
export declare function setParticleFxCamInsideVehicle(p0: boolean): void;
export declare function setParticleFxFootLodrangeScale(p0: number): void;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param p0
 */
export declare function setParticleFxFootOverrideName(p0: string): void;
/**
 * Used only once in the scripts (taxi_clowncar)
 * @param toggle
 */
export declare function setParticleFxForceVehicleInterior(toggle: boolean): void;
export declare function setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void;
/**
 * only works on some fx's
 *
 * p4 = 0
 * @param ptfxHandle
 * @param r
 * @param g
 * @param b
 * @param p4
 */
export declare function setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number, p4: boolean): void;
export declare function setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string, amount: number, noNetwork: boolean): void;
export declare function setParticleFxLoopedFarClipDist(ptfxHandle: number, range: number): void;
export declare function setParticleFxLoopedOffsets(ptfxHandle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number): void;
export declare function setParticleFxLoopedScale(ptfxHandle: number, scale: number): void;
/**
 * Usage example for C#:
 *
 * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
 *
 * Note: the argument alpha ranges from 0.0f-1.0f !
 * @param alpha
 */
export declare function setParticleFxNonLoopedAlpha(alpha: number): void;
/**
 * only works on some fx's, not networked
 * @param r
 * @param g
 * @param b
 */
export declare function setParticleFxNonLoopedColour(r: number, g: number, b: number): void;
export declare function setParticleFxNonLoopedEmitterSize(p0: number, p1: number, scale: number): void;
export declare function setParticleFxNonLoopedScale(scale: number): void;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param oldAsset
 * @param newAsset
 */
export declare function setParticleFxOverride(oldAsset: string, newAsset: string): void;
export declare function setParticleFxShootoutBoat(p0: number): void;
export declare function setParticleFxSlipstreamLodrangeScale(scale: number): void;
export declare function setPauseExteriorRenderingWhileInInterior(): void;
export declare function setPauseMenuActive(toggle: boolean): void;
/**
 * Toggles the light state for the pause menu ped in frontend menus.
 *
 * This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
 *
 *
 * Example:
 * Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
 * Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
 * @param state
 */
export declare function setPauseMenuPedLighting(state: boolean): void;
/**
 * Toggles the pause menu ped sleep state for frontend menus.
 *
 * Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
 *
 * `state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
 * @param state
 */
export declare function setPauseMenuPedSleepState(state: boolean): void;
/**
 * accuracy = 0-100, 100 being perfectly accurate
 * @param ped
 * @param accuracy
 */
export declare function setPedAccuracy(ped: number, accuracy: number): void;
export declare function setPedAiBlipForcedOn(ped: number, toggle: boolean): void;
export declare function setPedAiBlipGangId(ped: number, gangId: number): void;
export declare function setPedAiBlipHasCone(ped: number, toggle: boolean): void;
export declare function setPedAiBlipNoticeRange(ped: number, range: number): void;
export declare function setPedAiBlipSprite(ped: number, spriteId: number): void;
/**
 * value ranges from 0 to 3.
 * @param ped
 * @param value
 */
export declare function setPedAlertness(ped: number, value: number): void;
/**
 * ntoggle was always false except in one instance (b678).
 *
 * The one time this is set to true seems to do with when you fail the mission.
 * @param toggle
 */
export declare function setPedAllowHurtCombatForAllMissionPeds(toggle: boolean): void;
export declare function setPedAllowMinorReactionsAsMissionPed(ped: number, toggle: boolean): void;
export declare function setPedAllowVehiclesOverride(ped: number, toggle: boolean): void;
export declare function setPedAllowedToDuck(ped: number, toggle: boolean): void;
/**
 * stance:
 * 0 = idle
 * 1 = walk
 * 2 = running
 *
 * p5 = usually set to true
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param stance
 * @param animDictionary
 * @param animationName
 * @param p4
 * @param p5
 */
export declare function setPedAlternateMovementAnim(ped: number, stance: number, animDictionary: string, animationName: string, p4: number, p5: boolean): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 */
export declare function setPedAlternateWalkAnim(ped: number, animDict: string, animName: string, p3: number, p4: boolean): void;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 * @param p3
 */
export declare function setPedAmmo(ped: number, weaponHash: number, ammo: number, p3: boolean): void;
/**
 * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
export declare function setPedAmmoByType(ped: number, ammoTypeHash: number, ammo: number): void;
export declare function setPedAmmoToDrop(ped: number, p1: number): void;
export declare function setPedAngledDefensiveArea(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: boolean): void;
/**
 * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
 * @param ped
 * @param toggle
 */
export declare function setPedAoBlobRendering(ped: number, toggle: boolean): void;
/**
 * Sets the armor of the specified ped.
 *
 * ped: The Ped to set the armor of.
 * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
 * @param ped
 * @param amount
 */
export declare function setPedArmour(ped: number, amount: number): void;
/**
 * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
 * @param ped
 * @param toggle
 */
export declare function setPedAsCop(ped: number, toggle: boolean): void;
export declare function setPedAsEnemy(ped: number, toggle: boolean): void;
export declare function setPedAsGroupLeader(ped: number, groupId: number): void;
export declare function setPedAsGroupMember(ped: number, groupId: number): void;
/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param ped
 */
export declare function setPedAsNoLongerNeeded(ped: number): number;
export declare function setPedBlendFromParents(ped: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function setPedBlocksPathingWhenDead(ped: number, toggle: boolean): void;
export declare function setPedBoundsOrientation(ped: number, p1: number, p2: number, x: number, y: number, z: number): void;
export declare function setPedCanArmIk(ped: number, toggle: boolean): void;
export declare function setPedCanBeDraggedOut(ped: number, toggle: boolean): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
export declare function setPedCanBeKnockedOffBike(p0: number, p1: number): void;
/**
 * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
 * @param ped
 * @param state
 */
export declare function setPedCanBeKnockedOffVehicle(ped: number, state: number): void;
export declare function setPedCanBeShotInVehicle(ped: number, toggle: boolean): void;
export declare function setPedCanBeTargetedWhenInjured(ped: number, toggle: boolean): void;
export declare function setPedCanBeTargetedWithoutLos(ped: number, toggle: boolean): void;
export declare function setPedCanBeTargetted(ped: number, toggle: boolean): void;
export declare function setPedCanBeTargettedByPlayer(ped: number, player: number, toggle: boolean): void;
export declare function setPedCanBeTargettedByTeam(ped: number, team: number, toggle: boolean): void;
/**
 * It simply makes the said ped to cower behind cover object(wall, desk, car)
 *
 * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
 * @param ped
 * @param toggle
 */
export declare function setPedCanCowerInCover(ped: number, toggle: boolean): void;
export declare function setPedCanEvasiveDive(ped: number, toggle: boolean): void;
export declare function setPedCanHeadIk(ped: number, toggle: boolean): void;
export declare function setPedCanLegIk(ped: number, toggle: boolean): void;
export declare function setPedCanLosePropsOnDamage(ped: number, toggle: boolean, p2: number): void;
export declare function setPedCanPeekInCover(ped: number, toggle: boolean): void;
export declare function setPedCanPlayAmbientAnims(ped: number, toggle: boolean): void;
export declare function setPedCanPlayAmbientBaseAnims(ped: number, toggle: boolean): void;
/**
 * Appears only in fm_mission_controller and used only 3 times.
 *
 * ped was always PLAYER_PED_ID()
 * p1 was always true
 * p2 was always true
 * @param ped
 * @param blockIdleClips
 * @param removeIdleClipIfPlaying
 */
export declare function setPedCanPlayAmbientIdles(ped: number, blockIdleClips: boolean, removeIdleClipIfPlaying: boolean): void;
export declare function setPedCanPlayGestureAnims(ped: number, toggle: boolean): void;
/**
 * Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
 * @param ped
 * @param toggle
 */
export declare function setPedCanPlayInCarIdles(ped: number, toggle: boolean): void;
/**
 * p2 usually 0
 * @param ped
 * @param toggle
 * @param p2
 */
export declare function setPedCanPlayVisemeAnims(ped: number, toggle: boolean, p2: boolean): void;
export declare function setPedCanRagdoll(ped: number, toggle: boolean): void;
export declare function setPedCanRagdollFromPlayerImpact(ped: number, toggle: boolean): void;
export declare function setPedCanSmashGlass(ped: number, p1: boolean, p2: boolean): void;
export declare function setPedCanSwitchWeapon(ped: number, toggle: boolean): void;
/**
 * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
 *
 * Only works in singleplayer
 * @param pedHandle
 * @param groupHandle
 * @param toggle
 */
export declare function setPedCanTeleportToGroupLeader(pedHandle: number, groupHandle: number, toggle: boolean): void;
export declare function setPedCanTorsoIk(ped: number, toggle: boolean): void;
export declare function setPedCanTorsoReactIk(ped: number, p1: boolean): void;
export declare function setPedCanTorsoVehicleIk(ped: number, p1: boolean): void;
export declare function setPedCanUseAutoConversationLookat(ped: number, toggle: boolean): void;
/**
 * Overrides the ped's collision capsule radius for the current tick.
 * Must be called every tick to be effective.
 *
 * Setting this to 0.001 will allow warping through some objects.
 * @param ped
 * @param value
 */
export declare function setPedCapsule(ped: number, value: number): void;
export declare function setPedChanceOfFiringBlanks(ped: number, xBias: number, yBias: number): void;
/**
 * Enables/disables ped's "quiet" footstep sound.
 * @param ped
 * @param toggle
 */
export declare function setPedClothEventsEnabled(ped: number, toggle: boolean): void;
export declare function setPedClothPackageIndex(p0: number, p1: number): void;
export declare function setPedClothPinFrames(p0: number, p1: number): void;
export declare function setPedClothProne(p0: number, p1: boolean): void;
/**
 * enum eCombatAbility // 0xE793438C
 * {
 * CA_Poor,
 * CA_Average,
 * CA_Professional,
 * CA_NumTypes
 * };
 * @param ped
 * @param abilityLevel
 */
export declare function setPedCombatAbility(ped: number, abilityLevel: number): void;
/**
 * enum eCombatAttributes // 0x0E8E7201
 * {
 * BF_CanUseCover = 0,
 * BF_CanUseVehicles = 1,
 * BF_CanDoDrivebys = 2,
 * BF_CanLeaveVehicle = 3,
 * BF_CanUseDynamicStrafeDecisions = 4,
 * BF_AlwaysFight = 5,
 * BF_0x66BB9FCC = 6,
 * BF_0x6837DA41 = 7,
 * BF_0xB4A13A5A = 8,
 * BF_0xEE326AAD = 9,
 * BF_0x7DF2CCFA = 10,
 * BF_0x0036D422 = 11,
 * BF_BlindFireWhenInCover = 12,
 * BF_Aggressive = 13,
 * BF_CanInvestigate = 14,
 * BF_HasRadio = 15,
 * BF_0x6BDE28D1 = 16,
 * BF_AlwaysFlee = 17,
 * BF_0x7852797D = 18,
 * BF_0x33497B95 = 19,
 * BF_CanTauntInVehicle = 20,
 * BF_CanChaseTargetOnFoot = 21,
 * BF_WillDragInjuredPedsToSafety = 22,
 * BF_0xCD7168B8 = 23,
 * BF_UseProximityFiringRate = 24,
 * BF_0x48F914F8 = 25,
 * BF_0x2EA543D0 = 26,
 * BF_PerfectAccuracy = 27,
 * BF_CanUseFrustratedAdvance = 28,
 * BF_0x3D131AC1 = 29,
 * BF_0x3AD95F27 = 30,
 * BF_MaintainMinDistanceToTarget = 31,
 * BF_0xEAD68AD2 = 32,
 * BF_0xA206C2E0 = 33,
 * BF_CanUsePeekingVariations = 34,
 * BF_0xA5715184 = 35,
 * BF_0xD5265533 = 36,
 * BF_0x2B84C2BF = 37,
 * BF_DisableBulletReactions = 38,
 * BF_CanBust = 39,
 * BF_0xAA525726 = 40,
 * BF_CanCommandeerVehicles = 41,
 * BF_CanFlank = 42,
 * BF_SwitchToAdvanceIfCantFindCover = 43,
 * BF_SwitchToDefensiveIfInCover = 44,
 * BF_0xEB4786A0 = 45,
 * BF_CanFightArmedPedsWhenNotArmed = 46,
 * BF_0xA08E9402 = 47,
 * BF_0x952EAD7D = 48,
 * BF_UseEnemyAccuracyScaling = 49,
 * BF_CanCharge = 50,
 * BF_0xDA8C2BD3 = 51,
 * BF_0x6562F017 = 52,
 * BF_0xA2C3D53B = 53,
 * BF_AlwaysEquipBestWeapon = 54,
 * BF_CanSeeUnderwaterPeds = 55,
 * BF_0xF619486B = 56,
 * BF_0x61EB63A3 = 57,
 * BF_DisableFleeFromCombat = 58,
 * BF_0x8976D12B = 59,
 * BF_CanThrowSmokeGrenade = 60,
 * BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
 * BF_0x5452A10C = 62,
 * BF_FleesFromInvincibleOpponents = 63,
 * BF_DisableBlockFromPursueDuringVehicleChase = 64,
 * BF_DisableSpinOutDuringVehicleChase = 65,
 * BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
 * BF_0x0B404731 = 67,
 * BF_DisableReactToBuddyShot = 68,
 * BF_0x7FFD6AEB = 69,
 * BF_0x51F4AEF8 = 70,
 * BF_PermitChargeBeyondDefensiveArea = 71,
 * BF_0x63E0A8E2 = 72,
 * BF_0xDF974436 = 73,
 * BF_0x556C080B = 74,
 * BF_0xA4D50035 = 75,
 * BF_SetDisableShoutTargetPositionOnCombatStart = 76,
 * BF_DisableRespondedToThreatBroadcast = 77,
 * BF_0xCBB01765 = 78,
 * BF_0x4F862ED4 = 79,
 * BF_0xEF9C7C40 = 80,
 * BF_0xE51B494F = 81,
 * BF_0x054D0199 = 82,
 * BF_0xD36BCE94 = 83,
 * BF_0xFB11F690 = 84,
 * BF_0xD208A9AD = 85,
 * BF_AllowDogFighting = 86,
 * BF_0x07A6E531 = 87,
 * BF_0x34F9317B = 88,
 * BF_0x4240F5A9 = 89,
 * BF_0xEE129DBD = 90,
 * BF_0x053AEAD9 = 91
 * };
 * @param ped
 * @param attributeId
 * @param enabled
 */
export declare function setPedCombatAttributes(ped: number, attributeId: number, enabled: boolean): void;
/**
 * enum eCombatMovement // 0x4F456B61
 * {
 * CM_Stationary,
 * CM_Defensive,
 * CM_WillAdvance,
 * CM_WillRetreat
 * };
 * @param ped
 * @param combatMovement
 */
export declare function setPedCombatMovement(ped: number, combatMovement: number): void;
/**
 * enum eCombatRange // 0xB69160F5
 * {
 * CR_Near,
 * CR_Medium,
 * CR_Far,
 * CR_VeryFar,
 * CR_NumRanges
 * };
 * @param ped
 * @param combatRange
 */
export declare function setPedCombatRange(ped: number, combatRange: number): void;
/**
 * paletteId: 0 to 3.
 *
 * componentId:
 * enum ePedVarComp
 * {
 * PV_COMP_INVALID = -1,
 * PV_COMP_HEAD,
 * PV_COMP_BERD,
 * PV_COMP_HAIR,
 * PV_COMP_UPPR,
 * PV_COMP_LOWR,
 * PV_COMP_HAND,
 * PV_COMP_FEET,
 * PV_COMP_TEEF,
 * PV_COMP_ACCS,
 * PV_COMP_TASK,
 * PV_COMP_DECL,
 * PV_COMP_JBIB,
 * PV_COMP_MAX
 * };
 *
 * Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 *
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param paletteId
 */
export declare function setPedComponentVariation(ped: number, componentId: number, drawableId: number, textureId: number, paletteId: number): void;
/**
 * enum ePedConfigFlags
 * {
 * _CPED_CONFIG_FLAG_0xC63DE95E = 1,
 * CPED_CONFIG_FLAG_NoCriticalHits = 2,
 * CPED_CONFIG_FLAG_DrownsInWater = 3,
 * CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
 * _CPED_CONFIG_FLAG_0x37D196F4 = 5,
 * _CPED_CONFIG_FLAG_0xE2462399 = 6,
 * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
 * _CPED_CONFIG_FLAG_0xEDDEB838 = 8,
 * _CPED_CONFIG_FLAG_0xB398B6FD = 9,
 * _CPED_CONFIG_FLAG_0xF6664E68 = 10,
 * _CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
 * _CPED_CONFIG_FLAG_0xCE394045 = 12,
 * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
 * _CPED_CONFIG_FLAG_0xCD8D1411 = 14,
 * _CPED_CONFIG_FLAG_0xB031F1A9 = 15,
 * _CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
 * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
 * _CPED_CONFIG_FLAG_0x380165BD = 18,
 * _CPED_CONFIG_FLAG_0x07C045C7 = 19,
 * _CPED_CONFIG_FLAG_0x583B5E2D = 20,
 * _CPED_CONFIG_FLAG_0x475EDA58 = 21,
 * _CPED_CONFIG_FLAG_0x8629D05B = 22,
 * _CPED_CONFIG_FLAG_0x1522968B = 23,
 * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
 * _CPED_CONFIG_FLAG_0x4CC09C4B = 25,
 * _CPED_CONFIG_FLAG_0x034F3053 = 26,
 * _CPED_CONFIG_FLAG_0xD91BA7CC = 27,
 * _CPED_CONFIG_FLAG_0x5C8DC66E = 28,
 * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
 * _CPED_CONFIG_FLAG_0x6580B9D2 = 30,
 * _CPED_CONFIG_FLAG_0x0EF7A297 = 31,
 * CPED_CONFIG_FLAG_WillFlyThruWindscreen = 32,
 * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
 * CPED_CONFIG_FLAG_HasHelmet = 34,
 * CPED_CONFIG_FLAG_UseHelmet = 35,
 * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
 * _CPED_CONFIG_FLAG_0xB130D17B = 37,
 * _CPED_CONFIG_FLAG_0x5F071200 = 38,
 * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
 * _CPED_CONFIG_FLAG_0xC287AAFF = 40,
 * _CPED_CONFIG_FLAG_0x203328CC = 41,
 * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
 * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
 * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
 * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
 * _CPED_CONFIG_FLAG_0xDB115BFA = 46,
 * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
 * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
 * _CPED_CONFIG_FLAG_0xF8E99565 = 49,
 * _CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
 * _CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
 * _CPED_CONFIG_FLAG_NoCollison = 52,
 * _CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
 * _CPED_CONFIG_FLAG_0xD749FC41 = 54,
 * _CPED_CONFIG_FLAG_0x357F63F3 = 55,
 * _CPED_CONFIG_FLAG_0xC5E60961 = 56,
 * _CPED_CONFIG_FLAG_0x29275C3E = 57,
 * CPED_CONFIG_FLAG_IsFiring = 58,
 * CPED_CONFIG_FLAG_WasFiring = 59,
 * CPED_CONFIG_FLAG_IsStanding = 60,
 * CPED_CONFIG_FLAG_WasStanding = 61,
 * CPED_CONFIG_FLAG_InVehicle = 62,
 * CPED_CONFIG_FLAG_OnMount = 63,
 * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
 * CPED_CONFIG_FLAG_IsSwimming = 65,
 * CPED_CONFIG_FLAG_WasSwimming = 66,
 * CPED_CONFIG_FLAG_IsSkiing = 67,
 * CPED_CONFIG_FLAG_IsSitting = 68,
 * CPED_CONFIG_FLAG_KilledByStealth = 69,
 * CPED_CONFIG_FLAG_KilledByTakedown = 70,
 * CPED_CONFIG_FLAG_Knockedout = 71,
 * _CPED_CONFIG_FLAG_0x3E3C4560 = 72,
 * _CPED_CONFIG_FLAG_0x2994C7B7 = 73,
 * _CPED_CONFIG_FLAG_0x6D59D275 = 74,
 * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
 * CPED_CONFIG_FLAG_IsInTheAir = 76,
 * _CPED_CONFIG_FLAG_0x2D493FB7 = 77,
 * CPED_CONFIG_FLAG_IsAimingGun = 78,
 * _CPED_CONFIG_FLAG_0x14D69875 = 79,
 * _CPED_CONFIG_FLAG_0x40B05311 = 80,
 * _CPED_CONFIG_FLAG_0x8B230BC5 = 81,
 * _CPED_CONFIG_FLAG_0xC74E5842 = 82,
 * _CPED_CONFIG_FLAG_0x9EA86147 = 83,
 * _CPED_CONFIG_FLAG_0x674C746C = 84,
 * _CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
 * _CPED_CONFIG_FLAG_0xC144A1EF = 86,
 * _CPED_CONFIG_FLAG_0x0548512D = 87,
 * _CPED_CONFIG_FLAG_0x31C93909 = 88,
 * _CPED_CONFIG_FLAG_0xA0269315 = 89,
 * _CPED_CONFIG_FLAG_0xD4D59D4D = 90,
 * _CPED_CONFIG_FLAG_0x411D4420 = 91,
 * _CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
 * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
 * _CPED_CONFIG_FLAG_0x300E4CD3 = 94,
 * _CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
 * _CPED_CONFIG_FLAG_0x89C2EF13 = 96,
 * CPED_CONFIG_FLAG_VaultFromCover = 97,
 * _CPED_CONFIG_FLAG_0x02A852C8 = 98,
 * _CPED_CONFIG_FLAG_0x3D9407F1 = 99,
 * _CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
 * CPED_CONFIG_FLAG_ForcedAim = 101,
 * _CPED_CONFIG_FLAG_0xB942D71A = 102,
 * _CPED_CONFIG_FLAG_0xD26C55A8 = 103,
 * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
 * CPED_CONFIG_FLAG_ForceReload = 105,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
 * _CPED_CONFIG_FLAG_0x83C0A4BF = 111,
 * _CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
 * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
 * _CPED_CONFIG_FLAG_0x43B80B79 = 114,
 * _CPED_CONFIG_FLAG_0x0D2A9309 = 115,
 * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
 * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
 * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
 * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
 * CPED_CONFIG_FLAG_IsHandCuffed = 120,
 * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
 * CPED_CONFIG_FLAG_DisableMelee = 122,
 * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
 * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
 * _CPED_CONFIG_FLAG_0x5FED6BFD = 125,
 * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
 * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
 * CPED_CONFIG_FLAG_CanBeAgitated = 128,
 * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
 * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
 * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
 * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
 * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
 * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
 * CPED_CONFIG_FLAG_IsScuba = 135,
 * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
 * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
 * CPED_CONFIG_FLAG_RidingTrain = 138,
 * CPED_CONFIG_FLAG_ArrestResult = 139,
 * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
 * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
 * _CPED_CONFIG_FLAG_0x6901E731 = 142,
 * _CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
 * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
 * CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
 * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
 * CPED_CONFIG_FLAG_StairsDetected = 147,
 * CPED_CONFIG_FLAG_SlopeDetected = 148,
 * _CPED_CONFIG_FLAG_0x1A15670B = 149,
 * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
 * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
 * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
 * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
 * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
 * CPED_CONFIG_FLAG_CanPerformArrest = 155,
 * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
 * CPED_CONFIG_FLAG_CanBeArrested = 157,
 * _CPED_CONFIG_FLAG_0xF7960FF5 = 158,
 * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
 * _CPED_CONFIG_FLAG_0x0C6C3099 = 160,
 * _CPED_CONFIG_FLAG_0x645F927A = 161,
 * _CPED_CONFIG_FLAG_0xA86549B9 = 162,
 * _CPED_CONFIG_FLAG_0x8AAF337A = 163,
 * _CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
 * _CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
 * CPED_CONFIG_FLAG_IsInjured = 166,
 * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
 * _CPED_CONFIG_FLAG_0xD8072639 = 168,
 * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
 * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
 * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
 * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
 * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
 * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
 * _CPED_CONFIG_FLAG_0x90008BFA = 175,
 * _CPED_CONFIG_FLAG_0x07C7A910 = 176,
 * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
 * _CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
 * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
 * CPED_CONFIG_FLAG_IsInCustody = 180,
 * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
 * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
 * CPED_CONFIG_FLAG_IsAgitated = 183,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
 * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
 * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
 * CPED_CONFIG_FLAG_HasHurtStarted = 187,
 * CPED_CONFIG_FLAG_DisableHurt = 188,
 * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
 * _CPED_CONFIG_FLAG_0x32FC208B = 190,
 * _CPED_CONFIG_FLAG_0x0C296E5A = 191,
 * _CPED_CONFIG_FLAG_0xE63B73EC = 192,
 * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
 * CPED_CONFIG_FLAG_UsingScenario = 194,
 * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
 * _CPED_CONFIG_FLAG_0xD88C58A1 = 196,
 * _CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
 * _CPED_CONFIG_FLAG_0xEA02B420 = 198,
 * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
 * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
 * _CPED_CONFIG_FLAG_0x5E6466F6 = 201,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
 * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
 * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
 * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
 * _CPED_CONFIG_FLAG_0x415B26B9 = 207,
 * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
 * CPED_CONFIG_FLAG_DodgedPlayer = 209,
 * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
 * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
 * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
 * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
 * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
 * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
 * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
 * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
 * _CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
 * _CPED_CONFIG_FLAG_0x848FFEF2 = 219,
 * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
 * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
 * _CPED_CONFIG_FLAG_0x84F722FA = 222,
 * _CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
 * _CPED_CONFIG_FLAG_0x728AA918 = 224,
 * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
 * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
 * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
 * _CPED_CONFIG_FLAG_0x1EA7225F = 228,
 * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
 * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
 * _CPED_CONFIG_FLAG_0xFC3E572D = 231,
 * _CPED_CONFIG_FLAG_0x08E9F9CF = 232,
 * _CPED_CONFIG_FLAG_0x2D3BA52D = 233,
 * _CPED_CONFIG_FLAG_0xFD2F53EA = 234,
 * _CPED_CONFIG_FLAG_0x31A1B03B = 235,
 * CPED_CONFIG_FLAG_IsHoldingProp = 236,
 * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
 * _CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
 * _CPED_CONFIG_FLAG_0x26149198 = 239,
 * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
 * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
 * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
 * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
 * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
 * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
 * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
 * _CPED_CONFIG_FLAG_0x0C754ACA = 247,
 * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
 * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
 * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
 * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
 * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
 * CPED_CONFIG_FLAG_OnStairs = 253,
 * _CPED_CONFIG_FLAG_0xE1A2F73F = 254,
 * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
 * _CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
 * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
 * _CPED_CONFIG_FLAG_0x329DCF1A = 258,
 * _CPED_CONFIG_FLAG_0x8D90DD1B = 259,
 * _CPED_CONFIG_FLAG_0xB8A292B7 = 260,
 * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
 * _CPED_CONFIG_FLAG_0x2AF558F0 = 262,
 * _CPED_CONFIG_FLAG_0x82251455 = 263,
 * _CPED_CONFIG_FLAG_0x30CF498B = 264,
 * _CPED_CONFIG_FLAG_0xE1CD50AF = 265,
 * _CPED_CONFIG_FLAG_0x72E4AE48 = 266,
 * _CPED_CONFIG_FLAG_0xC2657EA1 = 267,
 * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
 * CPED_CONFIG_FLAG_OnStairSlope = 270,
 * _CPED_CONFIG_FLAG_0xA0897933 = 271,
 * CPED_CONFIG_FLAG_DontBlipCop = 272,
 * CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
 * _CPED_CONFIG_FLAG_0xF7823618 = 274,
 * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
 * CPED_CONFIG_FLAG_EdgeDetected = 276,
 * _CPED_CONFIG_FLAG_0x92B67896 = 277,
 * _CPED_CONFIG_FLAG_0xCAD677C9 = 278,
 * CPED_CONFIG_FLAG_AvoidTearGas = 279,
 * _CPED_CONFIG_FLAG_0x5276AC7B = 280,
 * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
 * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
 * _CPED_CONFIG_FLAG_0x9139724D = 283,
 * _CPED_CONFIG_FLAG_0xA1457461 = 284,
 * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
 * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
 * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
 * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
 * _CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
 * _CPED_CONFIG_FLAG_0xF3F5758C = 290,
 * _CPED_CONFIG_FLAG_0x2A9307F1 = 291,
 * _CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
 * _CPED_CONFIG_FLAG_0xA06A3C6C = 293,
 * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
 * _CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
 * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
 * _CPED_CONFIG_FLAG_0xB31F1187 = 297,
 * _CPED_CONFIG_FLAG_0x84315402 = 298,
 * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
 * _CPED_CONFIG_FLAG_0xC7829B67 = 300,
 * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
 * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
 * _CPED_CONFIG_FLAG_0x2ADA871B = 303,
 * _CPED_CONFIG_FLAG_0x47BC8A58 = 304,
 * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
 * _CPED_CONFIG_FLAG_0x4A133C50 = 306,
 * _CPED_CONFIG_FLAG_0xC58099C3 = 307,
 * _CPED_CONFIG_FLAG_0xF3D76D41 = 308,
 * _CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
 * CPED_CONFIG_FLAG_IsInCluster = 310,
 * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
 * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
 * _CPED_CONFIG_FLAG_0xD4136C22 = 313,
 * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
 * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
 * _CPED_CONFIG_FLAG_0xD5C98277 = 316,
 * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
 * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
 * _CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
 * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
 * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
 * CPED_CONFIG_FLAG_HasHighHeels = 322,
 * _CPED_CONFIG_FLAG_0x86B01E54 = 323,
 * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
 * _CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
 * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
 * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
 * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
 * CPED_CONFIG_FLAG_DisableTalkTo = 329,
 * CPED_CONFIG_FLAG_DontBlip = 330,
 * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
 * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
 * _CPED_CONFIG_FLAG_0x150468FD = 333,
 * _CPED_CONFIG_FLAG_0x914EBD6B = 334,
 * _CPED_CONFIG_FLAG_0x79AF3B6D = 335,
 * _CPED_CONFIG_FLAG_0x75C7A632 = 336,
 * _CPED_CONFIG_FLAG_0x52D530E2 = 337,
 * _CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
 * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
 * _CPED_CONFIG_FLAG_0x12ADB567 = 340,
 * _CPED_CONFIG_FLAG_0x105C8518 = 341,
 * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
 * _CPED_CONFIG_FLAG_0xED152C3E = 343,
 * _CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
 * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
 * _CPED_CONFIG_FLAG_0xCDDFE830 = 346,
 * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
 * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
 * CPED_CONFIG_FLAG_EquipJetpack = 349,
 * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
 * _CPED_CONFIG_FLAG_0xE13D1F7C = 351,
 * _CPED_CONFIG_FLAG_0x40E25FB9 = 352,
 * _CPED_CONFIG_FLAG_0x930629D9 = 353,
 * _CPED_CONFIG_FLAG_0xECCF0C7F = 354,
 * _CPED_CONFIG_FLAG_0xB6E9613B = 355,
 * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
 * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
 * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
 * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
 * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
 * CPED_CONFIG_FLAG_HasReserveParachute = 362,
 * CPED_CONFIG_FLAG_UseReserveParachute = 363,
 * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
 * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
 * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
 * _CPED_CONFIG_FLAG_0xD7E07D37 = 367,
 * _CPED_CONFIG_FLAG_0x03C4FD24 = 368,
 * _CPED_CONFIG_FLAG_0x7675789A = 369,
 * _CPED_CONFIG_FLAG_0xB7288A88 = 370,
 * _CPED_CONFIG_FLAG_0xC06B6291 = 371,
 * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
 * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
 * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
 * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
 * _CPED_CONFIG_FLAG_0x147F1FFB = 376,
 * _CPED_CONFIG_FLAG_0x4376DD79 = 377,
 * _CPED_CONFIG_FLAG_0xCD3DB518 = 378,
 * _CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
 * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
 * _CPED_CONFIG_FLAG_0xBCD816CD = 381,
 * _CPED_CONFIG_FLAG_0xCF02DD69 = 382,
 * _CPED_CONFIG_FLAG_0xF73AFA2E = 383,
 * _CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
 * _CPED_CONFIG_FLAG_0xF601F7EE = 385,
 * _CPED_CONFIG_FLAG_0xA91350FC = 386,
 * _CPED_CONFIG_FLAG_0x3AB23B96 = 387,
 * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
 * CPED_CONFIG_FLAG_HasBareFeet = 389,
 * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
 * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
 * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
 * _CPED_CONFIG_FLAG_0xC11D3E8F = 393,
 * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
 * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
 * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
 * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
 * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
 * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
 * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
 * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
 * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
 * _CPED_CONFIG_FLAG_0x5E5B9591 = 403,
 * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
 * _CPED_CONFIG_FLAG_0x77840177 = 405,
 * _CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
 * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
 * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
 * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
 * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
 * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
 * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
 * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
 * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
 * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
 * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
 * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
 * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
 * _CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
 * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
 * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
 * _CPED_CONFIG_FLAG_0xFE401D26 = 423,
 * CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
 * _CPED_CONFIG_FLAG_0x2B42AE82 = 425,
 * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
 * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
 * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
 * CPED_CONFIG_FLAG_DisableStartEngine = 429,
 * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
 * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
 * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
 * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
 * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
 * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
 * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
 * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
 * _CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
 * _CPED_CONFIG_FLAG_0x50178878 = 440,
 * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
 * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
 * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
 * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
 * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
 * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
 * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
 * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
 * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
 * CPED_CONFIG_FLAG_PedIsArresting = 450,
 * CPED_CONFIG_FLAG_IsDecoyPed = 451,
 * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
 * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
 * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
 * _CPED_CONFIG_FLAG_0xB68D3EAB = 455,
 * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
 * _CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
 * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
 * };
 * @param ped
 * @param flagId
 * @param value
 */
export declare function setPedConfigFlag(ped: number, flagId: number, value: boolean): void;
/**
 * teleports ped to coords along with the vehicle ped is in
 * @param ped
 * @param posX
 * @param posY
 * @param posZ
 */
export declare function setPedCoordsKeepVehicle(ped: number, posX: number, posY: number, posZ: number): void;
export declare function setPedCoordsNoGang(ped: number, posX: number, posY: number, posZ: number): void;
/**
 * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
 * @param ped
 * @param p1
 */
export declare function setPedCowerHash(ped: number, p1: string): void;
/**
 * Has 5 parameters since latest patches.
 * @param ped
 * @param visible
 * @param deselectWeapon
 * @param p3
 * @param p4
 */
export declare function setPedCurrentWeaponVisible(ped: number, visible: boolean, deselectWeapon: boolean, p3: boolean, p4: boolean): void;
export declare function setPedCycleVehicleWeaponsOnly(ped: number): void;
/**
 * Sets Ped Default Clothes
 * @param ped
 */
export declare function setPedDefaultComponentVariation(ped: number): void;
export declare function setPedDefensiveAreaAttachedToPed(ped: number, attachPed: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: boolean): void;
export declare function setPedDefensiveAreaDirection(ped: number, p1: number, p2: number, p3: number, p4: boolean): void;
export declare function setPedDefensiveSphereAttachedToPed(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void;
export declare function setPedDefensiveSphereAttachedToVehicle(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void;
export declare function setPedDensityMultiplierThisFrame(multiplier: number): void;
export declare function setPedDesiredHeading(ped: number, heading: number): void;
export declare function setPedDesiredMoveBlendRatio(ped: number, newMoveBlendRatio: number): void;
export declare function setPedDiesInSinkingVehicle(ped: number, toggle: boolean): void;
export declare function setPedDiesInVehicle(ped: number, toggle: boolean): void;
export declare function setPedDiesInWater(ped: number, toggle: boolean): void;
export declare function setPedDiesInstantlyInWater(ped: number, toggle: boolean): void;
export declare function setPedDiesWhenInjured(ped: number, toggle: boolean): void;
export declare function setPedDriveByClipsetOverride(ped: number, clipset: string): void;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param ammoCount
 */
export declare function setPedDropsInventoryWeapon(ped: number, weaponHash: number, xOffset: number, yOffset: number, zOffset: number, ammoCount: number): void;
export declare function setPedDropsWeapon(ped: number): void;
export declare function setPedDropsWeaponsWhenDead(ped: number, toggle: boolean): void;
/**
 * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
 * @param ped
 * @param toggle
 */
export declare function setPedDucking(ped: number, toggle: boolean): void;
/**
 * intensity: 0.0f - 1.0f
 *
 * This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
 * @param ped
 * @param intensity
 */
export declare function setPedEmissiveScale(ped: number, intensity: number): void;
export declare function setPedEnableCrewEmblem(ped: number, toggle: boolean): void;
export declare function setPedEnableWeaponBlocking(ped: number, toggle: boolean): void;
/**
 * Something related to the environmental effects natives.
 * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 */
export declare function setPedEnveffColorModulator(ped: number, p1: number, p2: number, p3: number): void;
/**
 * In agency_heist3b.c4, its like this 90% of the time:
 *
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);
 * PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);
 * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
 *
 * and its like this 10% of the time:
 *
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);
 * PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
 * PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);
 * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
 * @param ped
 * @param p1
 */
export declare function setPedEnveffCpvAdd(ped: number, p1: number): void;
/**
 * Values look to be between 0.0 and 1.0
 * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
 *
 * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
 * @param ped
 * @param value
 */
export declare function setPedEnveffScale(ped: number, value: number): void;
/**
 * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
 * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
 * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
 * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
 * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
 * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
 * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
 * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
 * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
 * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
 * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
 * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
 * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
 * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
 * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
 * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
 *
 * Firing pattern info: https://pastebin.com/Px036isB
 * @param ped
 * @param patternHash
 */
export declare function setPedFiringPattern(ped: number, patternHash: number): void;
/**
 * bit 1 (0x2) = use vehicle
 * bit 15 (0x8000) = force cower
 * @param ped
 * @param attributeFlags
 * @param enable
 */
export declare function setPedFleeAttributes(ped: number, attributeFlags: number, enable: boolean): void;
/**
 * Enables/disables ped's "loud" footstep sound.
 * @param ped
 * @param toggle
 */
export declare function setPedFootstepsEventsEnabled(ped: number, toggle: boolean): void;
/**
 * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * p2 is always true.
 * @param ped
 * @param gadgetHash
 * @param p2
 */
export declare function setPedGadget(ped: number, gadgetHash: number, p2: boolean): void;
/**
 * BOOL p1: 0 = Female; 1 = Male
 * @param ped
 * @param p1
 */
export declare function setPedGender(ped: number, p1: boolean): void;
export declare function setPedGeneratesDeadBodyEvents(ped: number, toggle: boolean): void;
/**
 * From the scripts:
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_FRA0");
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
 * @param ped
 * @param animGroupGesture
 */
export declare function setPedGestureGroup(ped: number, animGroupGesture: string): void;
export declare function setPedGetOutUpsideDownVehicle(ped: number, toggle: boolean): void;
/**
 * enable or disable the gravity of a ped
 *
 * Examples:
 * PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
 * PED::SET_PED_GRAVITY(Local_289[iVar0  -- [[20]] ], 0x00000001);
 * @param ped
 * @param toggle
 */
export declare function setPedGravity(ped: number, toggle: boolean): void;
export declare function setPedGroupMemberPassengerIndex(ped: number, index: number): void;
export declare function setPedHairTint(ped: number, colorID: number, highlightColorID: number): void;
/**
 * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
 *
 * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
 * @param ped
 * @param hasCone
 */
export declare function setPedHasAiBlip(ped: number, hasCone: boolean): void;
/**
 * color: see SET_BLIP_COLOUR
 * @param ped
 * @param hasCone
 * @param color
 */
export declare function setPedHasAiBlipWithColour(ped: number, hasCone: boolean, color: number): void;
/**
 * The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
 *
 * The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
 *
 * !!!Can someone add working example for this???
 *
 * try this:
 * headBlendData headData;
 * GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
 *
 * SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
 * , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
 *
 *
 * For more info please refer to this topic.
 * gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
 * @param ped
 * @param shapeFirstID
 * @param shapeSecondID
 * @param shapeThirdID
 * @param skinFirstID
 * @param skinSecondID
 * @param skinThirdID
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 * @param isParent
 */
export declare function setPedHeadBlendData(ped: number, shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void;
/**
 * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
 *
 * overlayID       Part                  Index, to disable
 * 0               Blemishes             0 - 23, 255
 * 1               Facial Hair           0 - 28, 255
 * 2               Eyebrows              0 - 33, 255
 * 3               Ageing                0 - 14, 255
 * 4               Makeup                0 - 74, 255
 * 5               Blush                 0 - 6, 255
 * 6               Complexion            0 - 11, 255
 * 7               Sun Damage            0 - 10, 255
 * 8               Lipstick              0 - 9, 255
 * 9               Moles/Freckles        0 - 17, 255
 * 10              Chest Hair            0 - 16, 255
 * 11              Body Blemishes        0 - 11, 255
 * 12              Add Body Blemishes    0 - 1, 255
 * @param ped
 * @param overlayID
 * @param index
 * @param opacity
 */
export declare function setPedHeadOverlay(ped: number, overlayID: number, index: number, opacity: number): void;
/**
 *
 *
 * ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
 *
 * Called after SET_PED_HEAD_OVERLAY().
 * @param ped
 * @param overlayID
 * @param colorType
 * @param colorID
 * @param secondColorID
 */
export declare function setPedHeadOverlayTint(ped: number, overlayID: number, colorType: number, colorID: number, secondColorID: number): void;
export declare function setPedHealthPendingLastDamageEventOverrideFlag(toggle: boolean): void;
export declare function setPedHearingRange(ped: number, value: number): void;
export declare function setPedHeatscaleOverride(ped: number, heatScale: number): void;
export declare function setPedHelmet(ped: number, canWearHelmet: boolean): void;
export declare function setPedHelmetFlag(ped: number, helmetFlag: number): void;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propIndex
 * @param p2
 */
export declare function setPedHelmetPropIndex(ped: number, propIndex: number, p2: boolean): void;
export declare function setPedHelmetTextureIndex(ped: number, textureIndex: number): void;
export declare function setPedHelmetVisorPropIndices(ped: number, p1: boolean, p2: number, p3: number): void;
export declare function setPedHighlyPerceptive(ped: number, toggle: boolean): void;
export declare function setPedIdRange(ped: number, value: number): void;
/**
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
 * @param ped
 * @param context
 */
export declare function setPedInVehicleContext(ped: number, context: number): void;
export declare function setPedIncreasedAvoidanceRadius(ped: number): void;
/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param toggle
 * @param weaponHash
 */
export declare function setPedInfiniteAmmo(ped: number, toggle: boolean, weaponHash: number): void;
export declare function setPedInfiniteAmmoClip(ped: number, toggle: boolean): void;
export declare function setPedInjuredOnGroundBehaviour(ped: number, p1: number): void;
export declare function setPedInteriorWallaDensity(p0: number, p1: number): void;
/**
 * Ped: The ped to warp.
 * vehicle: The vehicle to warp the ped into.
 * Seat_Index: [-1 is driver seat, -2 first free passenger seat]
 *
 * Moreinfo of Seat Index
 * DriverSeat = -1
 * Passenger = 0
 * Left Rear = 1
 * RightRear = 2
 * @param ped
 * @param vehicle
 * @param seatIndex
 */
export declare function setPedIntoVehicle(ped: number, vehicle: number, seatIndex: number): void;
export declare function setPedIsAvoidedByOthers(p0: number, p1: boolean): void;
/**
 * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
 *
 * ====================================================
 *
 * As mentioned above, this only sets the drunk sound to ped/player.
 *
 * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
 *
 * Below is an example
 *
 * if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
 * {
 * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
 * }
 * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
 *
 *
 *
 * And to stop the effect use
 * RESET_PED_MOVEMENT_CLIPSET
 * @param ped
 * @param toggle
 */
export declare function setPedIsDrunk(ped: number, toggle: boolean): void;
export declare function setPedIsIgnoredByAutoOpenDoors(ped: number, p1: boolean): void;
export declare function setPedKeepTask(ped: number, toggle: boolean): void;
/**
 * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
 * @param ped
 * @param mode
 */
export declare function setPedLegIkMode(ped: number, mode: number): void;
export declare function setPedLodMultiplier(ped: number, multiplier: number): void;
/**
 * Sets the maximum health of a ped.
 * @param ped
 * @param value
 */
export declare function setPedMaxHealth(ped: number, value: number): void;
export declare function setPedMaxMoveBlendRatio(ped: number, value: number): void;
export declare function setPedMaxTimeInWater(ped: number, value: number): void;
export declare function setPedMaxTimeUnderwater(ped: number, value: number): void;
/**
 * Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
 *
 *
 *
 * 0 - Nose Width (Thin/Wide)
 *
 * 1 - Nose Peak (Up/Down)
 *
 * 2 - Nose Length (Long/Short)
 *
 * 3 - Nose Bone Curveness (Crooked/Curved)
 *
 * 4 - Nose Tip (Up/Down)
 *
 * 5 - Nose Bone Twist (Left/Right)
 *
 * 6 - Eyebrow (Up/Down)
 *
 * 7 - Eyebrow (In/Out)
 *
 * 8 - Cheek Bones (Up/Down)
 *
 * 9 - Cheek Sideways Bone Size (In/Out)
 *
 * 10 - Cheek Bones Width (Puffed/Gaunt)
 *
 * 11 - Eye Opening (Both) (Wide/Squinted)
 *
 * 12 - Lip Thickness (Both) (Fat/Thin)
 *
 * 13 - Jaw Bone Width (Narrow/Wide)
 *
 * 14 - Jaw Bone Shape (Round/Square)
 *
 * 15 - Chin Bone (Up/Down)
 *
 * 16 - Chin Bone Length (In/Out or Backward/Forward)
 *
 * 17 - Chin Bone Shape (Pointed/Square)
 *
 * 18 - Chin Hole (Chin Bum)
 *
 * 19 - Neck Thickness (Thin/Thick)
 * @param ped
 * @param index
 * @param scale
 */
export declare function setPedMicroMorph(ped: number, index: number, scale: number): void;
/**
 * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
 * @param ped
 * @param ms
 */
export declare function setPedMinGroundTimeForStungun(ped: number, ms: number): void;
export declare function setPedMinMoveBlendRatio(ped: number, value: number): void;
/**
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param modelHash
 * @param toggle
 */
export declare function setPedModelIsSuppressed(modelHash: number, toggle: boolean): void;
/**
 * Maximum possible amount of money on MP is 2000. ~JX
 *
 * -----------------------------------------------------------------------------
 *
 * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
 * @param ped
 * @param amount
 */
export declare function setPedMoney(ped: number, amount: number): void;
export declare function setPedMotionBlur(ped: number, toggle: boolean): void;
/**
 * Found in the b617d scripts:
 * PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");
 * @param ped
 * @param p1
 */
export declare function setPedMotionInCoverClipsetOverride(ped: number, p1: string): void;
export declare function setPedMoveAnimsBlendOut(ped: number): void;
export declare function setPedMoveRateInWaterOverride(ped: number, p1: number): void;
/**
 * Min: 0.00
 * Max: 10.00
 *
 * Can be used in combo with fast run cheat.
 *
 * When value is set to 10.00:
 * Sprinting without fast run cheat: 66 m/s
 * Sprinting with fast run cheat: 77 m/s
 *
 * Needs to be looped!
 *
 * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
 * @param ped
 * @param value
 */
export declare function setPedMoveRateOverride(ped: number, value: number): void;
/**
 * transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
 *
 * List of movement clipsets:
 * Thanks to elsewhat for list.
 *
 * "ANIM_GROUP_MOVE_BALLISTIC"
 * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 * "clipset@move@trash_fast_turn"
 * "FEMALE_FAST_RUNNER"
 * "missfbi4prepp1_garbageman"
 * "move_characters@franklin@fire"
 * "move_characters@Jimmy@slow@"
 * "move_characters@michael@fire"
 * "move_f@flee@a"
 * "move_f@scared"
 * "move_f@sexy@a"
 * "move_heist_lester"
 * "move_injured_generic"
 * "move_lester_CaneUp"
 * "move_m@bag"
 * "MOVE_M@BAIL_BOND_NOT_TAZERED"
 * "MOVE_M@BAIL_BOND_TAZERED"
 * "move_m@brave"
 * "move_m@casual@d"
 * "move_m@drunk@moderatedrunk"
 * "MOVE_M@DRUNK@MODERATEDRUNK"
 * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 * "MOVE_M@DRUNK@VERYDRUNK"
 * "move_m@fire"
 * "move_m@gangster@var_e"
 * "move_m@gangster@var_f"
 * "move_m@gangster@var_i"
 * "move_m@JOG@"
 * "MOVE_M@PRISON_GAURD"
 * "MOVE_P_M_ONE"
 * "MOVE_P_M_ONE_BRIEFCASE"
 * "move_p_m_zero_janitor"
 * "move_p_m_zero_slow"
 * "move_ped_bucket"
 * "move_ped_crouched"
 * "move_ped_mop"
 * "MOVE_M@FEMME@"
 * "MOVE_F@FEMME@"
 * "MOVE_M@GANGSTER@NG"
 * "MOVE_F@GANGSTER@NG"
 * "MOVE_M@POSH@"
 * "MOVE_F@POSH@"
 * "MOVE_M@TOUGH_GUY@"
 * "MOVE_F@TOUGH_GUY@"
 *
 * ~ NotCrunchyTaco
 *
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param clipSet
 * @param transitionSpeed
 */
export declare function setPedMovementClipset(ped: number, clipSet: string, transitionSpeed: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 *
 * *untested but char *name could also be a hash for a localized string
 * @param ped
 * @param name
 */
export declare function setPedNameDebug(ped: number, name: string): void;
export declare function setPedNeverLeavesGroup(ped: number, toggle: boolean): void;
export declare function setPedNoTimeDelayBeforeShot(p0: number): void;
/**
 * The distance between these points, is the diagonal of a box (remember it's 3D).
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function setPedNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
export declare function setPedPanicExitScenario(p0: number, p1: number, p2: number, p3: number): boolean;
export declare function setPedParachuteTintIndex(ped: number, tintIndex: number): void;
export declare function setPedPathAvoidFire(ped: number, avoidFire: boolean): void;
export declare function setPedPathCanDropFromHeight(ped: number, Toggle: boolean): void;
export declare function setPedPathCanUseClimbovers(ped: number, Toggle: boolean): void;
export declare function setPedPathCanUseLadders(ped: number, Toggle: boolean): void;
/**
 * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
 * @param ped
 * @param modifier
 */
export declare function setPedPathClimbCostModifier(ped: number, modifier: number): void;
export declare function setPedPathMayEnterWater(ped: number, mayEnterWater: boolean): void;
export declare function setPedPathPreferToAvoidWater(ped: number, avoidWater: boolean): void;
/**
 * p6 is always 0
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 */
export declare function setPedPathsBackToOriginal(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void;
export declare function setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: number): void;
export declare function setPedPhonePaletteIdx(p0: number, p1: number): void;
/**
 * i could be time. Only example in the decompiled scripts uses it as -1.
 * @param ped
 * @param pinned
 * @param i
 */
export declare function setPedPinnedDown(ped: number, pinned: boolean, i: number): boolean;
/**
 * This native does absolutely nothing, just a nullsub
 * @param ped
 * @param toggle
 */
export declare function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped: number, toggle: boolean): void;
/**
 * Control how many new (ambient?) peds will spawn in the game world.
 * Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
 * @param p0
 */
export declare function setPedPopulationBudget(p0: number): void;
export declare function setPedPreferredCoverSet(ped: number, itemSet: number): void;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 * @param TextureId
 */
export declare function setPedPreloadPropData(ped: number, componentId: number, drawableId: number, TextureId: number): number;
/**
 * from extreme3.c4
 * PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
 *
 * p1 is probably componentId
 * @param ped
 * @param slot
 * @param drawableId
 * @param textureId
 */
export declare function setPedPreloadVariationData(ped: number, slot: number, drawableId: number, textureId: number): number;
/**
 * This is only called once in the scripts.
 *
 * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
 * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
 * PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
 * @param ped
 * @param lookAt
 */
export declare function setPedPrimaryLookat(ped: number, lookAt: number): void;
/**
 * ComponentId can be set to various things based on what category you're wanting to set
 * enum PedPropsData
 * {
 * PED_PROP_HATS = 0,
 * PED_PROP_GLASSES = 1,
 * PED_PROP_EARS = 2,
 * PED_PROP_WATCHES = 3,
 * };
 * Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 * @param TextureId
 * @param attach
 * @param p5
 */
export declare function setPedPropIndex(ped: number, componentId: number, drawableId: number, TextureId: number, attach: boolean, p5: number): void;
export declare function setPedRaceAndVoiceGroup(ped: number, p1: number, voiceGroup: number): void;
export declare function setPedRagdollForceFall(ped: number): void;
/**
 * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
 * @param ped
 * @param toggle
 */
export declare function setPedRagdollOnCollision(ped: number, toggle: boolean): void;
/**
 * p1 is always 0 in R* scripts.
 *
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 */
export declare function setPedRandomComponentVariation(ped: number, p1: number): void;
/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 */
export declare function setPedRandomProps(ped: number): void;
export declare function setPedRelationshipGroupDefaultHash(ped: number, hash: number): void;
export declare function setPedRelationshipGroupHash(ped: number, hash: number): void;
export declare function setPedReserveParachuteTintIndex(ped: number, p1: number): void;
/**
 * PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
 * Known values:
 * PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
 * @param ped
 * @param flagId
 * @param doReset
 */
export declare function setPedResetFlag(ped: number, flagId: number, doReset: boolean): void;
/**
 * This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
 * @param ped
 */
export declare function setPedScubaGearVariation(ped: number): void;
export declare function setPedSeeingRange(ped: number, value: number): void;
/**
 * Returns handle of the projectile.
 * @param ped
 * @param p1
 */
export declare function setPedShootOrdnanceWeapon(ped: number, p1: number): number;
/**
 * shootRate 0-1000
 * @param ped
 * @param shootRate
 */
export declare function setPedShootRate(ped: number, shootRate: number): void;
export declare function setPedShootsAtCoord(ped: number, x: number, y: number, z: number, toggle: boolean): void;
export declare function setPedShouldIgnoreScenarioExitCollisionChecks(ped: number, p1: boolean): void;
export declare function setPedShouldIgnoreScenarioNavChecks(p0: number, p1: boolean): void;
export declare function setPedShouldPlayDirectedNormalScenarioExit(p0: number, p1: number, p2: number, p3: number): boolean;
export declare function setPedShouldPlayFleeScenarioExit(ped: number, p1: number, p2: number, p3: number): boolean;
export declare function setPedShouldPlayImmediateScenarioExit(ped: number): void;
export declare function setPedShouldPlayNormalScenarioExit(ped: number): void;
export declare function setPedShouldProbeForScenarioExitsInOneFrame(p0: number, p1: boolean): void;
export declare function setPedSphereDefensiveArea(ped: number, x: number, y: number, z: number, radius: number, p5: boolean, p6: boolean): void;
export declare function setPedStayInVehicleWhenJacked(ped: number, toggle: boolean): void;
/**
 * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
 * @param ped
 * @param p1
 * @param action
 */
export declare function setPedStealthMovement(ped: number, p1: boolean, action: string): void;
export declare function setPedSteerBias(ped: number, value: number): void;
export declare function setPedSteersAroundDeadBodies(ped: number, toggle: boolean): void;
export declare function setPedSteersAroundObjects(ped: number, toggle: boolean): void;
export declare function setPedSteersAroundPeds(ped: number, toggle: boolean): void;
export declare function setPedSteersAroundVehicles(ped: number, toggle: boolean): void;
/**
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param clipSet
 */
export declare function setPedStrafeClipset(ped: number, clipSet: string): void;
export declare function setPedStunGunFiniteAmmo(p0: number, p1: number): void;
/**
 * Ped no longer takes critical damage modifiers if set to FALSE.
 * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
 * @param ped
 * @param toggle
 */
export declare function setPedSuffersCriticalHits(ped: number, toggle: boolean): void;
/**
 * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
 * @param ped
 * @param sweat
 */
export declare function setPedSweat(ped: number, sweat: number): void;
/**
 * enum eTargetLossResponseType
 * {
 * TLR_ExitTask,
 * TLR_NeverLoseTarget,
 * TLR_SearchForTarget
 * };
 * @param ped
 * @param responseType
 */
export declare function setPedTargetLossResponse(ped: number, responseType: number): void;
export declare function setPedToInformRespectedFriends(ped: number, radius: number, maxFriends: number): void;
export declare function setPedToLoadCover(ped: number, toggle: boolean): void;
/**
 * p4/p5: Unused in TU27
 * Ragdoll Types:
 * **0**: CTaskNMRelax
 * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
 * **Else**: CTaskNMBalance
 * time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
 *
 * time2- Unknown time, in milliseconds
 *
 * ragdollType-
 * 0 : Normal ragdoll
 * 1 : Falls with stiff legs/body
 * 2 : Narrow leg stumble(may not fall)
 * 3 : Wide leg stumble(may not fall)
 *
 * p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
 *
 *
 *
 *
 * EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
 *
 * Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
 * @param ped
 * @param time1
 * @param time2
 * @param ragdollType
 * @param p4
 * @param p5
 * @param p6
 */
export declare function setPedToRagdoll(ped: number, time1: number, time2: number, ragdollType: number, p4: boolean, p5: boolean, p6: boolean): boolean;
/**
 * Return variable is never used in R*'s scripts.
 *
 * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
 *
 * enum eRagdollType
 * {
 * RD_MALE=0,
 * RD_FEMALE = 1,
 * RD_MALE_LARGE = 2,
 * RD_CUSTOM = 3,
 * }
 *
 * x, y, and z are coordinates, most likely to where the ped will fall.
 *
 * p8 to p13 are always 0f in R*'s scripts.
 *
 * (Simplified) Example of the usage of the function from R*'s scripts:
 * ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
 *
 * @param ped
 * @param time
 * @param p2
 * @param ragdollType
 * @param x
 * @param y
 * @param z
 * @param velocity
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
export declare function setPedToRagdollWithFall(ped: number, time: number, p2: number, ragdollType: number, x: number, y: number, z: number, velocity: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean;
export declare function setPedTreatedAsFriendly(p0: number, p1: number, p2: number): void;
export declare function setPedUpperBodyDamageOnly(ped: number, toggle: boolean): void;
/**
 * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
 * @param ped
 * @param p1
 * @param p2
 * @param action
 */
export declare function setPedUsingActionMode(ped: number, p1: boolean, p2: number, action: string): void;
/**
 * seatIndex must be <= 2
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param flags
 * @param p4
 */
export declare function setPedVehicleForcedSeatUsage(ped: number, vehicle: number, seatIndex: number, flags: number, p4: number): void;
export declare function setPedVisualFieldCenterAngle(ped: number, angle: number): void;
export declare function setPedVisualFieldMaxAngle(ped: number, value: number): void;
/**
 * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
 * @param ped
 * @param angle
 */
export declare function setPedVisualFieldMaxElevationAngle(ped: number, angle: number): void;
export declare function setPedVisualFieldMinAngle(ped: number, value: number): void;
/**
 * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
 * -90f should let the ped see 90 degrees below them, for example.
 * @param ped
 * @param angle
 */
export declare function setPedVisualFieldMinElevationAngle(ped: number, angle: number): void;
export declare function setPedVisualFieldPeripheralRange(ped: number, range: number): void;
/**
 * Assigns some ambient voice to the ped.
 * @param ped
 */
export declare function setPedVoiceFull(ped: number): void;
/**
 * From the scripts:
 *
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
 * @param ped
 * @param voiceGroupHash
 */
export declare function setPedVoiceGroup(ped: number, voiceGroupHash: number): void;
/**
 * Dat151RelType == 29
 * @param ped
 * @param voiceGroupHash
 */
export declare function setPedVoiceGroupFromRaceToPvg(ped: number, voiceGroupHash: number): void;
export declare function setPedWallaDensity(p0: number, p1: number): void;
export declare function setPedWaypointRouteOffset(ped: number, x: number, y: number, z: number): boolean;
/**
 * Colors:
 * 0 = Gray
 * 1 = Dark Gray
 * 2 = Black
 * 3 = White
 * 4 = Blue
 * 5 = Cyan
 * 6 = Aqua
 * 7 = Cool Blue
 * 8 = Dark Blue
 * 9 = Royal Blue
 * 10 = Plum
 * 11 = Dark Purple
 * 12 = Purple
 * 13 = Red
 * 14 = Wine Red
 * 15 = Magenta
 * 16 = Pink
 * 17 = Salmon
 * 18 = Hot Pink
 * 19 = Rust Orange
 * 20 = Brown
 * 21 = Earth
 * 22 = Orange
 * 23 = Light Orange
 * 24 = Dark Yellow
 * 25 = Yellow
 * 26 = Light Brown
 * 27 = Lime Green
 * 28 = Olive
 * 29 = Moss
 * 30 = Turquoise
 * 31 = Dark Green
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 * @param colorIndex
 */
export declare function setPedWeaponComponentTintIndex(ped: number, weaponHash: number, camoComponentHash: number, colorIndex: number): void;
export declare function setPedWeaponMovementClipset(ped: number, clipSet: string): void;
/**
 * tintIndex can be the following:
 *
 * 0 - Normal
 * 1 - Green
 * 2 - Gold
 * 3 - Pink
 * 4 - Army
 * 5 - LSPD
 * 6 - Orange
 * 7 - Platinum
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param tintIndex
 */
export declare function setPedWeaponTintIndex(ped: number, weaponHash: number, tintIndex: number): void;
export declare function setPedWetness(ped: number, wetLevel: number): void;
/**
 * combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
 * @param ped
 */
export declare function setPedWetnessEnabledThisFrame(ped: number): void;
/**
 * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
 *
 *
 * @param ped
 * @param height
 */
export declare function setPedWetnessHeight(ped: number, height: number): void;
export declare function setPedWillOnlyAttackWantedPlayer(p0: number, p1: number): void;
/**
 * Sets some bit and float of vehicle. float is >= 0
 * @param vehicle
 * @param toggle
 * @param p2
 */
export declare function setPedsCanFallOffThisVehicleFromLargeFallDamage(vehicle: number, toggle: boolean, p2: number): void;
export declare function setPickUpByCargobobDisabled(entity: number, toggle: boolean): void;
export declare function setPickupAmmoAmountScaler(p0: number): void;
export declare function setPickupCollidesWithProjectiles(p0: number, p1: number): void;
export declare function setPickupGenerationRangeMultiplier(multiplier: number): void;
/**
 * p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
 * @param pickup
 * @param p1
 */
export declare function setPickupGlowOffset(pickup: number, p1: number): void;
export declare function setPickupHiddenWhenUncollectable(pickup: number, toggle: boolean): void;
/**
 * p0 is either 0 or 50 in scripts.
 * @param p0
 */
export declare function setPickupObjectAlphaWhenTransparent(p0: number): void;
export declare function setPickupObjectArrowMarker(pickup: number, toggle: boolean): void;
export declare function setPickupObjectCollectableInVehicle(pickup: number): void;
/**
 * p1 is always -0.2 in scripts and p2 is always true in scripts.
 * @param pickup
 * @param p1
 * @param p2
 */
export declare function setPickupObjectGlowOffset(pickup: number, p1: number, p2: boolean): void;
export declare function setPickupObjectGlowWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupObjectTransparentWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupRegenerationTime(pickup: number, duration: number): void;
/**
 * min: 1.9f, max: 100.0f
 * @param cargobob
 * @param length1
 * @param length2
 * @param p3
 */
export declare function setPickupRopeLengthForCargobob(cargobob: number, length1: number, length2: number, p3: boolean): void;
export declare function setPickupRopeLengthWithoutCreatingRopeForCargobob(p0: number, p1: number, p2: number): void;
export declare function setPickupTrackDamageEvents(pickup: number, toggle: boolean): void;
export declare function setPickupTransparentWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupUncollectable(pickup: number, toggle: boolean): void;
/**
 * Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
 * @param vehicle
 * @param health
 */
export declare function setPlaneEngineHealth(vehicle: number, health: number): void;
export declare function setPlanePropellerHealth(plane: number, health: number): boolean;
export declare function setPlaneResistToExplosion(vehicle: number, toggle: boolean): void;
export declare function setPlaneSectionDamageScale(vehicle: number, p1: number, p2: number): void;
/**
 * This native sets the turbulence multiplier. It only works for planes.
 * 0.0 = no turbulence at all.
 * 1.0 = heavy turbulence.
 * Works by just calling it once, does not need to be called every tick.
 * @param vehicle
 * @param multiplier
 */
export declare function setPlaneTurbulenceMultiplier(vehicle: number, multiplier: number): void;
export declare function setPlaybackSpeed(vehicle: number, speed: number): void;
/**
 * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
 * @param vehicle
 * @param drivingStyle
 */
export declare function setPlaybackToUseAi(vehicle: number, drivingStyle: number): void;
/**
 * Time is number of milliseconds before reverting, zero for indefinitely.
 * @param vehicle
 * @param time
 * @param drivingStyle
 * @param p3
 */
export declare function setPlaybackToUseAiTryToRevertBackLater(vehicle: number, time: number, drivingStyle: number, p3: boolean): void;
export declare function setPlayerAngry(ped: number, toggle: boolean): void;
export declare function setPlayerBluetoothState(player: number, state: boolean): void;
/**
 * Sets whether this player can be hassled by gangs.
 * @param player
 * @param toggle
 */
export declare function setPlayerCanBeHassledByGangs(player: number, toggle: boolean): void;
export declare function setPlayerCanCollectDroppedMoney(player: number, p1: boolean): void;
export declare function setPlayerCanDamagePlayer(player1: number, player2: number, toggle: boolean): void;
/**
 * Set whether this player should be able to do drive-bys.
 *
 * "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
 *
 * @param player
 * @param toggle
 */
export declare function setPlayerCanDoDriveBy(player: number, toggle: boolean): void;
export declare function setPlayerCanLeaveParachuteSmokeTrail(player: number, enabled: boolean): void;
/**
 * Sets whether this player can take cover.
 * @param player
 * @param toggle
 */
export declare function setPlayerCanUseCover(player: number, toggle: boolean): void;
/**
 * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
 * @param value
 */
export declare function setPlayerClothLockCounter(value: number): void;
/**
 * Every occurrence was either 0 or 2.
 * @param index
 */
export declare function setPlayerClothPackageIndex(index: number): void;
export declare function setPlayerClothPinFrames(player: number, p1: number): void;
/**
 * Flags:
 * SPC_AMBIENT_SCRIPT = (1 << 1),
 * SPC_CLEAR_TASKS = (1 << 2),
 * SPC_REMOVE_FIRES = (1 << 3),
 * SPC_REMOVE_EXPLOSIONS = (1 << 4),
 * SPC_REMOVE_PROJECTILES = (1 << 5),
 * SPC_DEACTIVATE_GADGETS = (1 << 6),
 * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
 * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
 * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
 * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
 * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
 * SPC_ALLOW_PAD_SHAKE = (1 << 12)
 *
 * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
 * @param player
 * @param bHasControl
 * @param flags
 */
export declare function setPlayerControl(player: number, bHasControl: boolean, flags: number): void;
export declare function setPlayerExplosiveDamageModifier(player: number, p1: number): void;
export declare function setPlayerFallDistanceToTriggerRagdollOverride(player: number, p1: number): void;
export declare function setPlayerForceSkipAimIntro(player: number, toggle: boolean): void;
export declare function setPlayerForcedAim(player: number, toggle: boolean): void;
export declare function setPlayerForcedZoom(player: number, toggle: boolean): void;
export declare function setPlayerHasReserveParachute(player: number): void;
export declare function setPlayerHealthRechargeMaxPercent(player: number, limit: number): void;
/**
 * `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
 * Use 1.0 to reset it back to normal
 * @param player
 * @param regenRate
 */
export declare function setPlayerHealthRechargeMultiplier(player: number, regenRate: number): void;
export declare function setPlayerHomingDisabledForAllVehicleWeapons(p0: number, p1: number): void;
export declare function setPlayerIconColour(color: number): void;
/**
 * Simply sets you as invincible (Health will not deplete).
 *
 * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
 * *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
 * @param player
 * @param toggle
 */
export declare function setPlayerInvincible(player: number, toggle: boolean): void;
export declare function setPlayerInvincibleButHasReactions(player: number, toggle: boolean): void;
export declare function setPlayerInvisibleLocally(player: number, bIncludePlayersVehicle: boolean): void;
/**
 * If toggle is true, the ped's head is shown in the pause menu
 * If toggle is false, the ped's head is not shown in the pause menu
 * @param toggle
 */
export declare function setPlayerIsInAnimalForm(toggle: boolean): void;
/**
 * If toggle is true, hides special ability bar / character name in the pause menu
 * If toggle is false, shows special ability bar / character name in the pause menu
 * @param toggle
 */
export declare function setPlayerIsInDirectorMode(toggle: boolean): void;
export declare function setPlayerIsRepeatingAMission(toggle: boolean): void;
export declare function setPlayerLeavePedBehind(player: number, toggle: boolean): void;
/**
 * Example from fm_mission_controler.ysc.c4:
 *
 * PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
 *
 * All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
 *
 * No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
 * @param player
 * @param toggle
 */
export declare function setPlayerLockon(player: number, toggle: boolean): void;
/**
 * Affects the range of auto aim target.
 * @param player
 * @param range
 */
export declare function setPlayerLockonRangeOverride(player: number, range: number): void;
/**
 * Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
 * @param player
 * @param value
 */
export declare function setPlayerMaxArmour(player: number, value: number): void;
export declare function setPlayerMaxExplosiveDamage(player: number, p1: number): void;
export declare function setPlayerMayNotEnterAnyVehicle(player: number): void;
export declare function setPlayerMayOnlyEnterThisVehicle(player: number, vehicle: number): void;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 * @param p2
 */
export declare function setPlayerMeleeWeaponDamageModifier(player: number, modifier: number, p2: boolean): void;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export declare function setPlayerMeleeWeaponDefenseModifier(player: number, modifier: number): void;
/**
 * Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
 * Make sure to request the model first and wait until it has loaded.
 * @param player
 * @param model
 */
export declare function setPlayerModel(player: number, model: number): void;
export declare function setPlayerNoiseMultiplier(player: number, multiplier: number): void;
export declare function setPlayerParachuteModelOverride(player: number, model: number): void;
export declare function setPlayerParachutePackModelOverride(player: number, model: number): void;
/**
 * tints 0- 13
 * 0 - unkown
 * 1 - unkown
 * 2 - unkown
 * 3 - unkown
 * 4 - unkown
 * @param player
 * @param tintIndex
 */
export declare function setPlayerParachutePackTintIndex(player: number, tintIndex: number): void;
export declare function setPlayerParachuteSmokeTrailColor(player: number, r: number, g: number, b: number): void;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 *
 * @param player
 * @param tintIndex
 */
export declare function setPlayerParachuteTintIndex(player: number, tintIndex: number): void;
/**
 * p1 was always 5.
 * p4 was always false.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export declare function setPlayerParachuteVariationOverride(player: number, p1: number, p2: number, p3: number, p4: boolean): void;
/**
 * Disabling/enabling a player from getting pickups. From the scripts:
 *
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
 *
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param player
 * @param pickupHash
 * @param toggle
 */
export declare function setPlayerPermittedToCollectPickupsOfType(player: number, pickupHash: number, toggle: boolean): void;
/**
 * example:
 *
 * flags: 0-6
 *
 * PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
 *
 * wouldnt the flag be the seatIndex?
 * @param player
 * @param flags
 */
export declare function setPlayerPhonePaletteIdx(player: number, flags: number): void;
export declare function setPlayerPreviousVariationData(player: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function setPlayerReserveParachuteModelOverride(player: number, model: number): void;
/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param index
 */
export declare function setPlayerReserveParachuteTintIndex(player: number, index: number): void;
export declare function setPlayerShortSwitchStyle(p0: number): void;
export declare function setPlayerSimulateAiming(player: number, toggle: boolean): void;
/**
 * Values around 1.0f to 2.0f used in game scripts.
 * @param player
 * @param multiplier
 */
export declare function setPlayerSneakingNoiseMultiplier(player: number, multiplier: number): void;
export declare function setPlayerSpectatedVehicleRadioOverride(p0: boolean): void;
export declare function setPlayerSprint(player: number, toggle: boolean): void;
export declare function setPlayerStealthPerceptionModifier(player: number, value: number): void;
/**
 * All names can be found in playerswitchestablishingshots.meta
 * @param name
 */
export declare function setPlayerSwitchEstablishingShot(name: string): void;
export declare function setPlayerSwitchOutro(cameraCoordX: number, cameraCoordY: number, cameraCoordZ: number, camRotationX: number, camRotationY: number, camRotationZ: number, camFov: number, camFarClip: number, rotationOrder: number): void;
export declare function setPlayerTargetLevel(targetLevel: number): void;
/**
 * Sets your targeting mode.
 * 0 = Assisted Aim - Full
 * 1 = Assisted Aim - Partial
 * 2 = Free Aim - Assisted
 * 3 = Free Aim
 * @param targetMode
 */
export declare function setPlayerTargetingMode(targetMode: number): void;
export declare function setPlayerTargettableForAirDefenceSphere(player: number, zoneId: number, enable: boolean): void;
export declare function setPlayerTcmodifierTransition(value: number): void;
/**
 * Set player team on deathmatch and last team standing..
 * @param player
 * @param team
 */
export declare function setPlayerTeam(player: number, team: number): void;
export declare function setPlayerUnderwaterBreathPercentRemaining(player: number, time: number): number;
export declare function setPlayerVehicleAlarmAudioActive(vehicle: number, toggle: boolean): void;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export declare function setPlayerVehicleDamageModifier(player: number, modifier: number): void;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export declare function setPlayerVehicleDefenseModifier(player: number, modifier: number): void;
/**
 * Unsets playerPed+330 if the current weapon has certain flags.
 * @param p0
 */
export declare function setPlayerVehicleWeaponToNonHoming(p0: number): void;
export declare function setPlayerVisibleLocally(player: number, bIncludePlayersVehicle: boolean): void;
/**
 * # Predominant call signatures
 * PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
 *
 * # Parameter value ranges
 * P0: PLAYER::PLAYER_ID()
 * P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
 * P2: Not set by any call
 * @param player
 * @param position
 * @param p2
 * @param p3
 */
export declare function setPlayerWantedCentrePosition(player: number, p2: boolean, p3: boolean): Vector3;
/**
 * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
 *
 * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
 *
 * disableNoMission-  Disables When Off Mission- appears to always be false
 *
 * @param player
 * @param wantedLevel
 * @param disableNoMission
 */
export declare function setPlayerWantedLevel(player: number, wantedLevel: number, disableNoMission: boolean): void;
/**
 * p2 is always false in R* scripts
 * @param player
 * @param wantedLevel
 * @param p2
 */
export declare function setPlayerWantedLevelNoDrop(player: number, wantedLevel: number, p2: boolean): void;
/**
 * Forces any pending wanted level to be applied to the specified player immediately.
 *
 * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
 *
 * Second parameter is unknown (always false).
 * @param player
 * @param p1
 */
export declare function setPlayerWantedLevelNow(player: number, p1: boolean): void;
/**
 * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
 *
 * Based on tests, it is unlikely to be a multiplier.
 *
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export declare function setPlayerWeaponDamageModifier(player: number, modifier: number): void;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export declare function setPlayerWeaponDefenseModifier(player: number, modifier: number): void;
/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export declare function setPlayerWeaponMinigunDefenseModifier(player: number, modifier: number): void;
export declare function setPlayerWeaponTakedownDefenseModifier(player: number, p1: number): void;
export declare function setPlayerpadShakesWhenControllerDisabled(toggle: boolean): void;
export declare function setPlayersLastVehicle(vehicle: number): void;
export declare function setPmWarningscreenActive(p0: boolean): void;
export declare function setPoliceFocusWillTrackVehicle(vehicle: number, toggle: boolean): void;
/**
 * The player will be ignored by the police if toggle is set to true
 * @param player
 * @param toggle
 */
export declare function setPoliceIgnorePlayer(player: number, toggle: boolean): void;
/**
 * If toggle is set to false:
 * The police won't be shown on the (mini)map
 *
 * If toggle is set to true:
 * The police will be shown on the (mini)map
 * @param toggle
 */
export declare function setPoliceRadarBlips(toggle: boolean): void;
/**
 * Min and max are usually 100.0 and 200.0
 * @param x
 * @param y
 * @param z
 * @param min
 * @param max
 */
export declare function setPopControlSphereThisFrame(x: number, y: number, z: number, min: number, max: number): void;
export declare function setPortablePickupPersist(pickup: number, toggle: boolean): void;
/**
 * Found in the b617d scripts, duplicates removed:
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
 *
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
 * @param p0
 * @param p1
 */
export declare function setPortalSettingsOverride(p0: string, p1: string): void;
export declare function setPositionForNullConvPed(p0: number, p1: number, p2: number, p3: number): void;
export declare function setPositionOffsetForRecordedVehiclePlayback(vehicle: number, x: number, y: number, z: number): void;
export declare function setPositionedPlayerVehicleRadioEmitterEnabled(p0: number): void;
/**
 * Sets profile setting 935
 * @param value
 */
export declare function setProfileSettingCreatorCtfDone(value: number): void;
/**
 * Sets profile setting 934
 * @param value
 */
export declare function setProfileSettingCreatorDmDone(value: number): void;
/**
 * Sets profile setting 933
 * @param value
 */
export declare function setProfileSettingCreatorRacesDone(value: number): void;
export declare function setProfileSettingPrologueComplete(): void;
/**
 * Sets profile setting 939
 */
export declare function setProfileSettingSpChopMissionComplete(): void;
export declare function setProjectilesShouldExplodeOnContact(entity: number, p1: number): void;
export declare function setPropLightColor(object: number, p1: boolean, r: number, g: number, b: number): boolean;
export declare function setPropTintIndex(p0: number, p1: number): void;
export declare function setPtfxForceVehicleInteriorFlag(p0: number): void;
export declare function setRaceTrackRender(toggle: boolean): void;
export declare function setRadarAsExteriorThisFrame(): void;
/**
 * List of interior hashes: https://pastebin.com/1FUyXNqY
 * Not for every interior zoom > 0 available.
 * @param interior
 * @param x
 * @param y
 * @param z
 * @param zoom
 */
export declare function setRadarAsInteriorThisFrame(interior: number, x: number, y: number, z: number, zoom: number): void;
/**
 * zoomLevel ranges from 0 to 1400 in R* Scripts
 * @param zoomLevel
 */
export declare function setRadarZoom(zoomLevel: number): void;
/**
 * zoom ranges from 0 to 90f in R* Scripts
 * @param zoom
 */
export declare function setRadarZoomPrecise(zoom: number): void;
export declare function setRadarZoomToBlip(blip: number, zoom: number): void;
export declare function setRadarZoomToDistance(zoom: number): void;
export declare function setRadioAutoUnfreeze(toggle: boolean): void;
export declare function setRadioFrontendFadeTime(fadeTime: number): void;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export declare function setRadioPositionAudioMute(p0: boolean): void;
/**
 * Tune Backwards...
 */
export declare function setRadioRetuneDown(): void;
/**
 * Tune Forward...
 */
export declare function setRadioRetuneUp(): void;
/**
 * Doesn't have an effect in Story Mode.
 * @param radioStation
 * @param toggle
 */
export declare function setRadioStationAsFavourite(radioStation: string, toggle: boolean): void;
/**
 * 6 calls in the b617d scripts, removed identical lines:
 *
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
 * @param radioStation
 * @param toggle
 */
export declare function setRadioStationMusicOnly(radioStation: string, toggle: boolean): void;
/**
 * Sets radio station by index.
 * @param radioStation
 */
export declare function setRadioToStationIndex(radioStation: number): void;
/**
 * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
 * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
 * @param stationName
 */
export declare function setRadioToStationName(stationName: string): void;
/**
 * Only found this one in the decompiled scripts:
 *
 * AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
 *
 * @param radioStation
 * @param radioTrack
 */
export declare function setRadioTrack(radioStation: string, radioTrack: string): void;
export declare function setRadioTrackWithStartOffset(radioStationName: string, mixName: string, p2: number): void;
/**
 * Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
 * @param blip
 * @param toggle
 */
export declare function setRadiusBlipEdge(blip: number, toggle: boolean): void;
/**
 * Works for both player and peds,
 *
 * enum eRagdollBlockingFlags
 * {
 * RBF_BULLET_IMPACT = 0,
 * RBF_VEHICLE_IMPACT = 1,
 * RBF_FIRE = 2,
 * RBF_ELECTROCUTION = 3,
 * RBF_PLAYER_IMPACT = 4,
 * RBF_EXPLOSION = 5,0
 * RBF_IMPACT_OBJECT = 6,
 * RBF_MELEE = 7,
 * RBF_RUBBER_BULLET = 8,
 * RBF_FALLING = 9,
 * RBF_WATER_JET = 10,
 * RBF_DROWNING = 11,
 * _0x9F52E2C4 = 12,
 * RBF_PLAYER_BUMP = 13,
 * RBF_PLAYER_RAGDOLL_BUMP = 14,
 * RBF_PED_RAGDOLL_BUMP = 15,
 * RBF_VEHICLE_GRAB = 16,
 * RBF_SMOKE_GRENADE = 17,
 * };
 *
 *
 * @param ped
 * @param blockingFlag
 */
export declare function setRagdollBlockingFlags(ped: number, blockingFlag: number): void;
/**
 * With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
 * With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
 * To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
 * @param intensity
 */
export declare function setRain(intensity: number): void;
export declare function setRandomBoats(toggle: boolean): void;
export declare function setRandomBoatsMp(toggle: boolean): void;
/**
 * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
 * Does nothing if the mission flag is set.
 * @param toggle
 */
export declare function setRandomEventFlag(toggle: boolean): void;
export declare function setRandomSeed(seed: number): void;
export declare function setRandomTrains(toggle: boolean): void;
export declare function setRandomVehicleDensityMultiplierThisFrame(multiplier: number): void;
export declare function setRandomWeatherType(): void;
export declare function setReducePedModelBudget(toggle: boolean): void;
export declare function setReduceVehicleModelBudget(toggle: boolean): void;
/**
 * Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
 * @param vehicle
 * @param enable
 */
export declare function setReducedSuspensionForce(vehicle: number, enable: boolean): void;
/**
 * Sets the relationship between two groups. This should be called twice (once for each group).
 *
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 *
 * Example:
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * @param relationship
 * @param group1
 * @param group2
 */
export declare function setRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void;
export declare function setRelationshipGroupAffectsWantedLevel(group: number, p1: boolean): void;
/**
 * Enables ghosting between specific players
 * @param player
 * @param p1
 */
export declare function setRemotePlayerAsGhost(player: number, p1: boolean): void;
export declare function setRemotePlayerVisibleInCutscene(player: number, locallyVisible: boolean): void;
export declare function setRenderHdOnly(toggle: boolean): void;
/**
 * Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
 * @param train
 * @param toggle
 */
export declare function setRenderTrainAsDerailed(train: number, toggle: boolean): void;
export declare function setReplaySystemPausedForSave(p0: boolean): void;
export declare function setRestartCoordOverride(x: number, y: number, z: number, heading: number): void;
export declare function setRestoreFocusEntity(p0: number): void;
/**
 * Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
 * @param toggle
 */
export declare function setRiotModeEnabled(toggle: boolean): void;
export declare function setRoadsBackToOriginal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
/**
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * bool p7 - always 1
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 */
export declare function setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: number): void;
/**
 * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param unknown1
 * @param unknown2
 * @param unknown3
 */
export declare function setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void;
/**
 * When nodeEnabled is set to false, all nodes in the area get disabled.
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
 * If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param nodeEnabled
 * @param unknown2
 */
export declare function setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, nodeEnabled: boolean, unknown2: boolean): void;
export declare function setRocketBoostActive(vehicle: number, active: boolean): void;
export declare function setRocketBoostFill(vehicle: number, percentage: number): void;
/**
 * Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
 * @param roomHashKey
 */
export declare function setRoomForGameViewportByKey(roomHashKey: number): void;
/**
 * Example of use (carmod_shop)
 * INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");
 * @param roomName
 */
export declare function setRoomForGameViewportByName(roomName: string): void;
/**
 * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
 *
 * Just call it one time, it is not required to be called once every tick.
 *
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * @param player
 * @param multiplier
 */
export declare function setRunSprintMultiplierForPlayer(player: number, multiplier: number): void;
export declare function setSaveHouse(savehouseHandle: number, p1: boolean, p2: boolean): void;
/**
 * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
 * @param ignoreVehicle
 */
export declare function setSaveMenuActive(ignoreVehicle: boolean): void;
/**
 * Sets profile setting 501
 * @param transactionId
 */
export declare function setSaveMigrationTransactionIdWarning(transactionId: number): void;
export declare function setSavegameListUniqueId(p0: number): void;
export declare function setScaleformMovieAsNoLongerNeeded(scaleformHandle: number): number;
export declare function setScaleformMovieToUseLargeRt(scaleformHandle: number, toggle: boolean): void;
/**
 * This native is used in some casino scripts to fit the scaleform in the rendertarget.
 * @param scaleformHandle
 * @param toggle
 */
export declare function setScaleformMovieToUseSuperLargeRt(scaleformHandle: number, toggle: boolean): void;
export declare function setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void;
/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
 * @param scenarioGroup
 * @param enabled
 */
export declare function setScenarioGroupEnabled(scenarioGroup: string, enabled: boolean): void;
export declare function setScenarioPedDensityMultiplierThisFrame(p0: number, p1: number): void;
export declare function setScenarioPedsSpawnInSphereArea(x: number, y: number, z: number, range: number, p4: number): void;
/**
 * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
 * @param value
 */
export declare function setScenarioPedsToBeReturnedByNextCommand(value: boolean): void;
/**
 * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * seems to enable/disable specific scenario-types from happening in the game world.
 *
 * Here are some scenario types from the scripts:
 * "WORLD_MOUNTAIN_LION_REST"
 * "WORLD_MOUNTAIN_LION_WANDER"
 * "DRIVE"
 * "WORLD_VEHICLE_POLICE_BIKE"
 * "WORLD_VEHICLE_POLICE_CAR"
 * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
 * "WORLD_VEHICLE_DRIVE_SOLO"
 * "WORLD_VEHICLE_BIKER"
 * "WORLD_VEHICLE_DRIVE_PASSENGERS"
 * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
 * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
 * "PROP_HUMAN_SEAT_CHAIR"
 * "WORLD_VEHICLE_ATTRACTOR"
 * "WORLD_HUMAN_LEANING"
 * "WORLD_HUMAN_HANG_OUT_STREET"
 * "WORLD_HUMAN_DRINKING"
 * "WORLD_HUMAN_SMOKING"
 * "WORLD_HUMAN_GUARD_STAND"
 * "WORLD_HUMAN_CLIPBOARD"
 * "WORLD_HUMAN_HIKER"
 * "WORLD_VEHICLE_EMPTY"
 * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
 * "WORLD_HUMAN_PAPARAZZI"
 * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
 * "WORLD_VEHICLE_PARK_PARALLEL"
 * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
 * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
 * "WORLD_VEHICLE_TRUCK_LOGS"
 *
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 * @param scenarioType
 * @param toggle
 */
export declare function setScenarioTypeEnabled(scenarioType: string, toggle: boolean): void;
export declare function setSceneStreamingTracksCamPosThisFrame(): void;
export declare function setScriptAsNoLongerNeeded(scriptName: string): void;
/**
 * Sets the cutscene's owning thread ID.
 * @param threadId
 */
export declare function setScriptCanStartCutscene(threadId: number): void;
export declare function setScriptFirePosition(coordX: number, coordY: number, coordZ: number): void;
/**
 * horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
 * verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
 *
 * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
 *
 * These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
 *
 * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
 *
 * For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
 *
 * To reset the value, use RESET_SCRIPT_GFX_ALIGN.
 * @param horizontalAlign
 * @param verticalAlign
 */
export declare function setScriptGfxAlign(horizontalAlign: number, verticalAlign: number): void;
/**
 * Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
 * @param x
 * @param y
 * @param w
 * @param h
 */
export declare function setScriptGfxAlignParams(x: number, y: number, w: number, h: number): void;
/**
 * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
 * @param toggle
 */
export declare function setScriptGfxDrawBehindPausemenu(toggle: boolean): void;
/**
 * Sets the draw order for script draw commands.
 *
 * Examples from decompiled scripts:
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
 *
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
 * @param drawOrder
 */
export declare function setScriptGfxDrawOrder(drawOrder: number): void;
/**
 * Sets GtaThread+0x14A
 * @param toggle
 */
export declare function setScriptHighPrio(toggle: boolean): void;
export declare function setScriptRampImpulseScale(vehicle: number, impulseScale: number): void;
export declare function setScriptRocketBoostRechargeTime(vehicle: number, seconds: number): void;
export declare function setScriptUpdateDoorAudio(doorHash: number, toggle: boolean): void;
/**
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
 * @param r
 * @param g
 * @param b
 * @param a
 */
export declare function setScriptVariableHudColour(r: number, g: number, b: number, a: number): void;
/**
 * Only called once in the decompiled scripts. Presumably activates the specified generator.
 * @param vehicleGenerator
 * @param enabled
 */
export declare function setScriptVehicleGenerator(vehicleGenerator: number, enabled: boolean): void;
export declare function setScriptWithNameHashAsNoLongerNeeded(scriptHash: number): void;
export declare function setScriptedAnimSeatOffset(ped: number, p1: number): void;
export declare function setScriptedCameraIsFirstPersonThisFrame(p0: boolean): void;
export declare function setScriptedConversionCoordThisFrame(x: number, y: number, z: number): void;
/**
 * Disables some other rendering (internal)
 */
export declare function setScriptsHaveCleanedUpForReplaySystem(): void;
/**
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
 * @param r
 * @param g
 * @param b
 * @param a
 */
export declare function setSecondScriptVariableHudColour(r: number, g: number, b: number, a: number): void;
/**
 * Toggles Heatvision on/off.
 * @param toggle
 */
export declare function setSeethrough(toggle: boolean): void;
export declare function setSequenceToRepeat(taskSequenceId: number, repeat: boolean): void;
/**
 * Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
 * @param vehicle
 */
export declare function setShortSlowdownForLanding(vehicle: number): void;
/**
 * A vehicle recording playback flag only used in jewelry_heist
 * @param vehicle
 * @param p1
 */
export declare function setShouldLerpFromAiToFullRecording(vehicle: number, p1: boolean): void;
/**
 * Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.
 * @param vehicle
 * @param shouldReset
 */
export declare function setShouldResetTurretInScriptedCameras(vehicle: number, shouldReset: boolean): void;
export declare function setSirenBypassMpDriverCheck(vehicle: number, toggle: boolean): void;
export declare function setSirenCanBeControlledByAudio(vehicle: number, p1: boolean): void;
export declare function setSirenWithNoDriver(vehicle: number, toggle: boolean): void;
export declare function setSkidmarkRangeScale(scale: number): void;
export declare function setSkipMinigunSpinUpAudio(p0: boolean): void;
/**
 * Disables the screen effects and sound effects when driving over a slowdown pad.
 * @param disabled
 */
export declare function setSlowDownEffectDisabled(disabled: boolean): void;
export declare function setSnow(level: number): void;
/**
 * HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
 * HUD::SET_SOCIAL_CLUB_TOUR("Missions");
 * HUD::SET_SOCIAL_CLUB_TOUR("General");
 * HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
 * @param name
 */
export declare function setSocialClubTour(name: string): void;
export declare function setSpecialAbilityMp(player: number, p1: number, p2: number): void;
export declare function setSpecialAbilityMultiplier(multiplier: number): void;
/**
 * It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
 * @param vehicle
 * @param toggle
 */
export declare function setSpecialFlightModeAllowed(vehicle: number, toggle: boolean): void;
/**
 * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
 *
 * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
 *
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
 * @param vehicle
 * @param ratio
 */
export declare function setSpecialFlightModeRatio(vehicle: number, ratio: number): void;
/**
 * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
 *
 * targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
 *
 * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
 *
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
 * @param vehicle
 * @param targetRatio
 */
export declare function setSpecialFlightModeTargetRatio(vehicle: number, targetRatio: number): void;
/**
 * Disables the screen effects and sound effects when driving over a speed boost pad.
 * @param disabled
 */
export declare function setSpeedBoostEffectDisabled(disabled: boolean): void;
export declare function setSrlForcePrestream(p0: number): void;
export declare function setSrlLongJumpMode(p0: boolean): void;
export declare function setSrlPostCutsceneCamera(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function setSrlReadaheadTimes(p0: number, p1: number, p2: number, p3: number): void;
export declare function setSrlTime(p0: number): void;
/**
 * Hardcoded to not work in multiplayer.
 *
 *
 * Used to lock/unlock doors to interior areas of the game.
 *
 * (Possible) Door Types:
 *
 * https://pastebin.com/9S2m3qA4
 *
 * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
 * Locked means that the heading is locked.
 * p6 is always 0.
 *
 * 225 door types, model names and coords found in stripclub.c4:
 * https://pastebin.com/gywnbzsH
 *
 * get door info: https://pastebin.com/i14rbekD
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 * @param p6
 */
export declare function setStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked: boolean, heading: number, p6: boolean): void;
/**
 * Defines the state of a destructible object.
 * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
 * State 2 == object just spawned
 * State 4 == Beginning of the animation
 * State 6 == Start animation
 * State 9 == End of the animation
 * @param object
 * @param state
 */
export declare function setStateOfRayfireMapObject(object: number, state: number): void;
/**
 * Example:
 * AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
 *
 * This turns off surrounding sounds not connected directly to peds.
 *
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param toggle
 */
export declare function setStaticEmitterEnabled(emitterName: string, toggle: boolean): void;
/**
 * Access to the store for shark cards etc...
 * @param toggle
 */
export declare function setStoreEnabled(toggle: boolean): void;
export declare function setStreamedTextureDictAsNoLongerNeeded(textureDict: string): void;
export declare function setStreaming(toggle: boolean): void;
export declare function setStuntJumpsCanTrigger(toggle: boolean): void;
export declare function setSubmarineCrushDepths(vehicle: number, p1: boolean, depth1: number, depth2: number, depth3: number): void;
export declare function setSuperJumpThisFrame(player: number): void;
/**
 * Swim speed multiplier.
 * Multiplier goes up to 1.49
 *
 * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
 *
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * @param player
 * @param multiplier
 */
export declare function setSwimMultiplierForPlayer(player: number, multiplier: number): void;
export declare function setSynchronizedSceneHoldLastFrame(sceneID: number, toggle: boolean): void;
export declare function setSynchronizedSceneLooped(sceneID: number, toggle: boolean): void;
export declare function setSynchronizedSceneOrigin(sceneID: number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p7: boolean): void;
export declare function setSynchronizedScenePhase(sceneID: number, phase: number): void;
export declare function setSynchronizedSceneRate(sceneID: number, rate: number): void;
export declare function setTableGamesCameraThisUpdate(hash: number): boolean;
export declare function setTakenPhotoIsMugshot(toggle: boolean): void;
export declare function setTaskMoveNetworkAnimSet(ped: number, clipSet: number, variableClipSet: number): void;
/**
 * Doesn't actually return anything.
 * @param ped
 * @param enable
 */
export declare function setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped: number, enable: boolean): boolean;
export declare function setTaskMoveNetworkSignalBool(ped: number, signalName: string, value: boolean): void;
/**
 * signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
 * p2 - From what i can see it goes up to 1f (maybe).
 *
 * Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
 * @param ped
 * @param signalName
 * @param value
 */
export declare function setTaskMoveNetworkSignalFloat(ped: number, signalName: string, value: number): void;
export declare function setTaskMoveNetworkSignalFloatLerpRate(ped: number, signalName: string, value: number): void;
export declare function setTaskMoveNetworkSignalLocalFloat(ped: number, signalName: string, value: number): void;
/**
 * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
 * Flag 1: Aggressive ramming of suspect
 * Flag 2: Ram attempts
 * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
 * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
 * @param ped
 * @param flag
 * @param set
 */
export declare function setTaskVehicleChaseBehaviorFlag(ped: number, flag: number, set: boolean): void;
export declare function setTaskVehicleChaseIdealPursuitDistance(ped: number, distance: number): void;
export declare function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane: number, height: number): void;
/**
 * This is not tested - it's just an assumption.
 * - Nac
 *
 * Doesn't seem to work.  I'll try with an int instead. --JT
 *
 * Read the scripts, im dumpass.
 *
 * if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
 * VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
 * }
 * @param vehicle
 * @param state
 */
export declare function setTaxiLights(vehicle: number, state: boolean): void;
export declare function setTeamPickupObject(object: number, p1: number, p2: boolean): void;
/**
 * From the scripts:
 *
 * MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);
 *
 * Related to tennis mode.
 * @param ped
 * @param p1
 * @param p2
 */
export declare function setTennisMoveNetworkSignalFloat(ped: number, p1: string, p2: number): void;
export declare function setTextCentre(align: boolean): void;
/**
 * colors you input not same as you think?
 * A: for some reason its R B G A
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export declare function setTextColour(red: number, green: number, blue: number, alpha: number): void;
export declare function setTextDropShadow(): void;
/**
 * distance - shadow distance in pixels, both horizontal and vertical
 * r, g, b, a - color
 * @param distance
 * @param r
 * @param g
 * @param b
 * @param a
 */
export declare function setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param r
 * @param g
 * @param b
 * @param a
 */
export declare function setTextEdge(p0: number, r: number, g: number, b: number, a: number): void;
/**
 * fonts that mess up your text where made for number values/misc stuff
 * @param fontType
 */
export declare function setTextFont(fontType: number): void;
export declare function setTextInputBoxEnabled(p0: boolean): void;
/**
 * Types -
 * 0: Center-Justify
 * 1: Left-Justify
 * 2: Right-Justify
 *
 * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
 * @param justifyType
 */
export declare function setTextJustification(justifyType: number): void;
export declare function setTextLeading(p0: number): void;
export declare function setTextOutline(): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export declare function setTextProportional(p0: boolean): void;
export declare function setTextRenderId(renderId: number): void;
export declare function setTextRightJustify(toggle: boolean): void;
/**
 * Size range : 0F to 1.0F
 * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
 * @param scale
 * @param size
 */
export declare function setTextScale(scale: number, size: number): void;
/**
 * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
 *
 * start - left boundry on screen position (0.0 - 1.0)
 * end - right boundry on screen position (0.0 - 1.0)
 * @param start
 * @param end
 */
export declare function setTextWrap(start: number, end: number): void;
export declare function setThirdPersonAimCamNearClipThisUpdate(p0: number): void;
/**
 * Seems to animate the gameplay camera zoom.
 *
 * Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
 * will animate the camera zooming in from 1000 meters away.
 *
 * Game scripts use it like this:
 *
 * // Setting this to 1 prevents V key from changing zoom
 * PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
 *
 * // These restrict how far you can move cam up/down left/right
 * CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);
 * CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);
 *
 * CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);
 * @param p0
 * @param distance
 */
export declare function setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0: number, distance: number): void;
/**
 * minimum: Degrees between -180f and 180f.
 * maximum: Degrees between -180f and 180f.
 *
 * Clamps the gameplay camera's current yaw.
 *
 * Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
 * @param minimum
 * @param maximum
 */
export declare function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum: number, maximum: number): void;
/**
 * minimum: Degrees between -90f and 90f.
 * maximum: Degrees between -90f and 90f.
 *
 * Clamps the gameplay camera's current pitch.
 *
 * Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
 * @param minimum
 * @param maximum
 */
export declare function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum: number, maximum: number): void;
/**
 * Sets bit 3 in GtaThread+0x150
 * @param toggle
 */
export declare function setThisIsATriggerScript(toggle: boolean): void;
export declare function setThisScriptCanBePaused(toggle: boolean): void;
export declare function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void;
/**
 * THREAD_PRIO_HIGHEST = 0
 * THREAD_PRIO_NORMAL = 1
 * THREAD_PRIO_LOWEST = 2
 * THREAD_PRIO_MANUAL_UPDATE = 100
 * @param priority
 */
export declare function setThisThreadPriority(priority: number): void;
export declare function setTickerJohnmarstonIsDone(): void;
/**
 * Maximum value is 1.
 * At a value of 0 the game will still run at a minimum time scale.
 *
 * Slow Motion 1: 0.6
 * Slow Motion 2: 0.4
 * Slow Motion 3: 0.2
 * @param timeScale
 */
export declare function setTimeScale(timeScale: number): void;
/**
 * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
 *
 * Parameters:
 * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
 *
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 */
export declare function setTimecycleModifier(modifierName: string): void;
export declare function setTimecycleModifierStrength(strength: number): void;
export declare function setTintIndexClosestBuildingOfType(x: number, y: number, z: number, radius: number, modelHash: number, textureVariation: number): boolean;
export declare function setTrackedPointInfo(point: number, x: number, y: number, z: number, radius: number): void;
export declare function setTrailerAttachmentEnabled(p0: number, p1: number): void;
export declare function setTrailerInverseMassScale(vehicle: number, p1: number): void;
export declare function setTrailerLegsLowered(vehicle: number): void;
/**
 * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
 * @param vehicle
 */
export declare function setTrailerLegsRaised(vehicle: number): void;
export declare function setTrainCruiseSpeed(train: number, speed: number): void;
export declare function setTrainSpeed(train: number, speed: number): void;
/**
 * Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
 *
 * trackIndex: 0 - 26
 * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
 * @param trackIndex
 * @param frequency
 */
export declare function setTrainTrackSpawnFrequency(trackIndex: number, frequency: number): void;
/**
 * Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
 * @param vehicle
 * @param transformRate
 */
export declare function setTransformRateForAnimation(vehicle: number, transformRate: number): void;
/**
 * When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
 * @param vehicle
 * @param toggle
 */
export declare function setTransformToSubmarineUsesAlternateInput(vehicle: number, toggle: boolean): void;
export declare function setTransitionOutOfTimecycleModifier(strength: number): void;
/**
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 * @param transition
 */
export declare function setTransitionTimecycleModifier(modifierName: string, transition: number): void;
export declare function setTreatAsAmbientPedForDriverLockon(ped: number, p1: boolean): void;
/**
 * Toggles specific flag on turret
 * @param vehicle
 * @param index
 * @param toggle
 */
export declare function setTurretHidden(vehicle: number, index: number, toggle: boolean): void;
/**
 * Probably changes tvs from being a 3d audio to being "global" audio
 * @param toggle
 */
export declare function setTvAudioFrontend(toggle: boolean): void;
export declare function setTvChannel(channel: number): void;
/**
 * Loads specified video sequence into the TV Channel
 * TV_Channel ranges from 0-2
 * VideoSequence can be any of the following:
 * "PL_STD_CNT" CNT Standard Channel
 * "PL_STD_WZL" Weazel Standard Channel
 * "PL_LO_CNT"
 * "PL_LO_WZL"
 * "PL_SP_WORKOUT"
 * "PL_SP_INV" - Jay Norris Assassination Mission Fail
 * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
 * "PL_LO_RS" - Righteous Slaughter Ad
 * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
 * "PL_SP_PLSH1_INTRO"
 * "PL_LES1_FAME_OR_SHAME"
 * "PL_STD_WZL_FOS_EP2"
 * "PL_MP_WEAZEL" - Weazel Logo on loop
 * "PL_MP_CCTV" - Generic CCTV loop
 *
 * Restart:
 * 0=video sequence continues as normal
 * 1=sequence restarts from beginning every time that channel is selected
 *
 *
 * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
 * https://pastebin.com/zUzGB6h7
 * @param tvChannel
 * @param playlistName
 * @param restart
 */
export declare function setTvChannelPlaylist(tvChannel: number, playlistName: string, restart: boolean): void;
export declare function setTvChannelPlaylistAtHour(tvChannel: number, playlistName: string, hour: number): void;
export declare function setTvPlayerWatchingThisFrame(p0: number): void;
export declare function setTvVolume(volume: number): void;
/**
 * SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param health
 */
export declare function setTyreHealth(vehicle: number, wheelIndex: number, health: number): void;
/**
 * Controls how much traction the wheel loses.
 *
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtds" (Soft): 0.05
 * "owrtdm" (Medium): 0.45
 * "owrtdh" (Hard): 0.8
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export declare function setTyreMaximumGripDifferenceDueToWearRate(vehicle: number, wheelIndex: number, multiplier: number): void;
/**
 * Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
 * Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export declare function setTyreWearRate(vehicle: number, wheelIndex: number, multiplier: number): void;
/**
 * Controls how fast the tires wear out.
 *
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtss" (Soft): 2.2
 * "owrtsm" (Medium): 1.7
 * "owrtsh" (Hard): 1.2
 *
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export declare function setTyreWearRateScale(vehicle: number, wheelIndex: number, multiplier: number): void;
export declare function setUseAdjustedMouseCoords(toggle: boolean): void;
export declare function setUseCameraHeadingForDesiredDirectionLockOnTest(ped: number, toggle: boolean): void;
export declare function setUseDesiredZCruiseSpeedForLanding(vehicle: number, toggle: boolean): void;
/**
 * Changes the car jump control to require a double-tap to activate.
 * @param toggle
 */
export declare function setUseDoubleClickForCarJump(toggle: boolean): void;
export declare function setUseHiDof(): void;
/**
 * Only used in R* Script fm_mission_controller_2020
 */
export declare function setUseHiDofOnSyncedSceneThisUpdate(): void;
/**
 * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
 * @param vehicle
 * @param toggle
 */
export declare function setUseHigherCarJump(vehicle: number, toggle: boolean): void;
/**
 * Toggles the Cayo Perico map.
 * @param toggle
 */
export declare function setUseIslandMap(toggle: boolean): void;
/**
 * PED_RAGDOLL_BUMP Proof?
 * @param entity
 * @param toggle
 */
export declare function setUseKinematicPhysics(entity: number, toggle: boolean): void;
export declare function setUseSetDestinationInPauseMap(toggle: boolean): void;
export declare function setUserRadioControlEnabled(toggle: boolean): void;
export declare function setVariableOnSound(soundId: number, variable: string, p2: number): void;
/**
 * From the scripts, p0:
 *
 * "ArmWrestlingIntensity",
 * "INOUT",
 * "Monkey_Stream",
 * "ZoomLevel"
 * @param variable
 * @param p1
 */
export declare function setVariableOnStream(variable: string, p1: number): void;
export declare function setVariableOnSynchSceneAudio(variableName: string, value: number): void;
/**
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
 * @param variableName
 * @param value
 */
export declare function setVariableOnUnderWaterStream(variableName: string, value: number): void;
export declare function setVehForcedRadioThisFrame(vehicle: number): void;
export declare function setVehHasNormalRadio(vehicle: number): void;
/**
 * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
 * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
 * @param vehicle
 * @param radioStation
 */
export declare function setVehRadioStation(vehicle: number, radioStation: string): void;
export declare function setVehicleActAsIfHasSirenOn(vehicle: number, p1: boolean): void;
export declare function setVehicleActAsIfHighSpeedForFragSmashing(vehicle: number, p1: boolean): void;
export declare function setVehicleActiveDuringPlayback(vehicle: number, toggle: boolean): void;
export declare function setVehicleActiveForPedNavigation(vehicle: number, toggle: boolean): void;
/**
 * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
 * Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleAiCanUseExclusiveSeats(vehicle: number, toggle: boolean): void;
export declare function setVehicleAlarm(vehicle: number, state: boolean): void;
export declare function setVehicleAllowHomingMissleLockon(vehicle: number, toggle: boolean, p2: boolean): void;
export declare function setVehicleAllowHomingMissleLockonSynced(vehicle: number, canBeLockedOn: boolean, p2: boolean): void;
/**
 * Makes the vehicle accept no passengers.
 * @param veh
 * @param toggle
 */
export declare function setVehicleAllowNoPassengersLockon(veh: number, toggle: boolean): void;
/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param vehicle
 */
export declare function setVehicleAsNoLongerNeeded(vehicle: number): number;
/**
 * intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
 * Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
 * @param vehicle
 * @param intensity
 */
export declare function setVehicleAudioBodyDamageFactor(vehicle: number, intensity: number): void;
export declare function setVehicleAudioEngineDamageFactor(vehicle: number, damageFactor: number): void;
export declare function setVehicleAutomaticallyAttaches(vehicle: number, p1: boolean, p2: number): number;
export declare function setVehicleAvoidPlayerVehicleRiotVanMission(p0: number): void;
export declare function setVehicleBlipThrottleRandomly(vehicle: number, p1: boolean): void;
/**
 * Controls how fast bobbleheads and tsurikawas move on each axis.
 *
 * p2 is probably z, but changing that value didn't seem to have a noticeable effect.
 * @param x
 * @param y
 * @param p2
 */
export declare function setVehicleBobbleheadVelocity(x: number, y: number, p2: number): void;
/**
 * p2 often set to 1000.0 in the decompiled scripts.
 * @param vehicle
 * @param value
 */
export declare function setVehicleBodyHealth(vehicle: number, value: number): void;
/**
 * Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * @param vehicle
 * @param bombCount
 */
export declare function setVehicleBombAmmo(vehicle: number, bombCount: number): void;
/**
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
 *
 * Will give a boost-soundeffect.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleBoostActive(vehicle: number, toggle: boolean): void;
export declare function setVehicleBrake(vehicle: number, toggle: boolean): void;
export declare function setVehicleBrakeLights(vehicle: number, toggle: boolean): void;
export declare function setVehicleBrokenPartsDontAffectAiHandling(vehicle: number, p1: boolean): void;
/**
 * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
 * @param vehicle
 * @param position
 * @param p2
 */
export declare function setVehicleBulldozerArmPosition(vehicle: number, position: number, p2: boolean): void;
/**
 * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleBurnout(vehicle: number, toggle: boolean): void;
/**
 * This has not yet been tested - it's just an assumption of what the types could be.
 * @param vehicle
 * @param state
 */
export declare function setVehicleCanBeTargetted(vehicle: number, state: boolean): void;
export declare function setVehicleCanBeUsedByFleeingPeds(vehicle: number, toggle: boolean): void;
export declare function setVehicleCanBeVisiblyDamaged(vehicle: number, state: boolean): void;
export declare function setVehicleCanBreak(vehicle: number, toggle: boolean): void;
export declare function setVehicleCanDeformWheels(vehicle: number, toggle: boolean): void;
export declare function setVehicleCanEjectPassengersIfLocked(p0: number, p1: number): void;
export declare function setVehicleCanEngineMissfire(vehicle: number, toggle: boolean): void;
export declare function setVehicleCanLeakOil(vehicle: number, toggle: boolean): void;
export declare function setVehicleCanLeakPetrol(vehicle: number, toggle: boolean): void;
export declare function setVehicleCanSaveInGarage(vehicle: number, toggle: boolean): void;
export declare function setVehicleCausesSwerving(vehicle: number, toggle: boolean): void;
export declare function setVehicleCeilingHeight(vehicle: number, height: number): void;
/**
 * <1.0 - Decreased torque
 * =1.0 - Default torque
 * >1.0 - Increased torque
 *
 * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
 *
 * value - is between 0.2 and 1.8 in the decompiled scripts.
 *
 * This needs to be called every frame to take effect.
 * @param vehicle
 * @param value
 */
export declare function setVehicleCheatPowerIncrease(vehicle: number, value: number): void;
/**
 * Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.
 * @param vehicle
 * @param colorCombination
 */
export declare function setVehicleColourCombination(vehicle: number, colorCombination: number): void;
/**
 * colorPrimary & colorSecondary are the paint index for the vehicle.
 * For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
 * -------------------------------------------------------------------------
 * Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
 *
 * Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param colorPrimary
 * @param colorSecondary
 */
export declare function setVehicleColours(vehicle: number, colorPrimary: number, colorSecondary: number): void;
/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
export declare function setVehicleCombatMode(toggle: boolean): void;
/**
 * SET_VEHICLE_CONVERSATIONS_PERSIST?
 * @param p0
 * @param p1
 */
export declare function setVehicleConversationsPersist(p0: boolean, p1: boolean): void;
export declare function setVehicleConversationsPersistNew(p0: boolean, p1: boolean, p2: boolean): void;
/**
 * Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
 * Use GET_VEHICLE_BOMB_AMMO to get the current amount.
 * @param vehicle
 * @param counterMeasureCount
 */
export declare function setVehicleCountermeasureAmmo(vehicle: number, counterMeasureCount: number): void;
export declare function setVehicleCustomPathNodeStreamingRadius(vehicle: number, p1: number): void;
/**
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export declare function setVehicleCustomPrimaryColour(vehicle: number, r: number, g: number, b: number): void;
/**
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export declare function setVehicleCustomSecondaryColour(vehicle: number, r: number, g: number, b: number): void;
/**
 * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
 *
 * Radius of effect damage applied in a sphere at impact location
 * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
 * @param vehicle
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param damage
 * @param radius
 * @param focusOnModel
 */
export declare function setVehicleDamage(vehicle: number, xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, focusOnModel: boolean): void;
export declare function setVehicleDamageScale(vehicle: number, p1: number): boolean;
export declare function setVehicleDamageScales(vehicle: number, p1: number, p2: number, p3: number, p4: number): void;
/**
 * This fixes the deformation of a vehicle but the vehicle health doesn't improve
 * @param vehicle
 */
export declare function setVehicleDeformationFixed(vehicle: number): void;
/**
 * Use this native inside a looped function.
 * Values:
 * - `0.0` = no vehicles on streets
 * - `1.0` = normal vehicles on streets
 * @param multiplier
 */
export declare function setVehicleDensityMultiplierThisFrame(multiplier: number): void;
/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
export declare function setVehicleDetonationMode(toggle: boolean): void;
/**
 * You can't use values greater than 15.0
 * Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
 * @param vehicle
 * @param dirtLevel
 */
export declare function setVehicleDirtLevel(vehicle: number, dirtLevel: number): void;
export declare function setVehicleDisableCollisionUponCreation(vehicle: number, disable: boolean): void;
export declare function setVehicleDisableHeightMapAvoidance(vehicle: number, p1: boolean): void;
export declare function setVehicleDisableTowing(vehicle: number, toggle: boolean): void;
export declare function setVehicleDontTerminateTaskWhenAchieved(vehicle: number): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 *
 * Usually used alongside other vehicle door natives.
 * @param vehicle
 * @param doorId
 * @param toggle
 */
export declare function setVehicleDoorAutoLock(vehicle: number, doorId: number, toggle: boolean): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param deleteDoor
 */
export declare function setVehicleDoorBroken(vehicle: number, doorId: number, deleteDoor: boolean): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param speed
 * @param angle
 */
export declare function setVehicleDoorControl(vehicle: number, doorId: number, speed: number, angle: number): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param p2
 * @param p3
 * @param p4
 */
export declare function setVehicleDoorLatched(vehicle: number, doorId: number, p2: boolean, p3: boolean, p4: boolean): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param loose
 * @param openInstantly
 */
export declare function setVehicleDoorOpen(vehicle: number, doorId: number, loose: boolean, openInstantly: boolean): void;
/**
 * enum eDoorId
 * {
 * VEH_EXT_DOOR_INVALID_ID = -1,
 * VEH_EXT_DOOR_DSIDE_F,
 * VEH_EXT_DOOR_DSIDE_R,
 * VEH_EXT_DOOR_PSIDE_F,
 * VEH_EXT_DOOR_PSIDE_R,
 * VEH_EXT_BONNET,
 * VEH_EXT_BOOT
 * };
 * @param vehicle
 * @param doorId
 * @param closeInstantly
 */
export declare function setVehicleDoorShut(vehicle: number, doorId: number, closeInstantly: boolean): void;
/**
 * enum eVehicleLockState
 * {
 * VEHICLELOCK_NONE,
 * VEHICLELOCK_UNLOCKED,
 * VEHICLELOCK_LOCKED,
 * VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
 * VEHICLELOCK_LOCKED_PLAYER_INSIDE,
 * VEHICLELOCK_LOCKED_INITIALLY,
 * VEHICLELOCK_FORCE_SHUT_DOORS,
 * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
 * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
 * VEHICLELOCK_LOCKED_NO_PASSENGERS,
 * VEHICLELOCK_CANNOT_ENTER
 * };
 * @param vehicle
 * @param doorLockStatus
 */
export declare function setVehicleDoorsLocked(vehicle: number, doorLockStatus: number): void;
/**
 * After some analysis, I've decided that these are what the parameters are.
 *
 * We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
 * l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
 * ...
 * VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleDoorsLockedForAllPlayers(vehicle: number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForAllTeams(vehicle: number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForNonScriptPlayers(vehicle: number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForPlayer(vehicle: number, player: number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForTeam(vehicle: number, team: number, toggle: boolean): void;
/**
 * Closes all doors of a vehicle:
 * @param vehicle
 * @param closeInstantly
 */
export declare function setVehicleDoorsShut(vehicle: number, closeInstantly: boolean): void;
/**
 * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
 *
 * youtu.be/3arlUxzHl5Y
 * i.imgur.com/WrNpYFs.jpg
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleDropsMoneyWhenBlownUp(vehicle: number, toggle: boolean): void;
export declare function setVehicleEngineCanDegrade(vehicle: number, toggle: boolean): void;
/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * Minimum: -4000
 * Maximum: 1000
 *
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * @param vehicle
 * @param health
 */
export declare function setVehicleEngineHealth(vehicle: number, health: number): void;
/**
 * Starts or stops the engine on the specified vehicle.
 *
 * vehicle: The vehicle to start or stop the engine on.
 * value: true to turn the vehicle on; false to turn it off.
 * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
 * disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
 *
 * from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
 * @param vehicle
 * @param value
 * @param instantly
 * @param disableAutoStart
 */
export declare function setVehicleEngineOn(vehicle: number, value: boolean, instantly: boolean, disableAutoStart: boolean): void;
/**
 * The parameter fade is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 * @param fade
 */
export declare function setVehicleEnveffScale(vehicle: number, fade: number): void;
/**
 * index: 0 - 1
 *
 * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
 * @param vehicle
 * @param ped
 * @param index
 */
export declare function setVehicleExclusiveDriver(vehicle: number, ped: number, index: number): void;
export declare function setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(vehicle: number, toggle: boolean): void;
/**
 * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleExplodesOnHighExplosionDamage(vehicle: number, toggle: boolean): void;
/**
 * Max value is 32767
 * @param vehicle
 * @param range
 */
export declare function setVehicleExtendedRemovalRange(vehicle: number, range: number): void;
/**
 * Available extraIds are 1-14, however none of the vehicles have extras above 12.
 * @param vehicle
 * @param extraId
 * @param disable
 */
export declare function setVehicleExtra(vehicle: number, extraId: number, disable: boolean): void;
export declare function setVehicleExtraColour5(vehicle: number, color: number): void;
export declare function setVehicleExtraColour6(vehicle: number, color: number): void;
/**
 * They use the same color indexs as SET_VEHICLE_COLOURS.
 * @param vehicle
 * @param pearlescentColor
 * @param wheelColor
 */
export declare function setVehicleExtraColours(vehicle: number, pearlescentColor: number, wheelColor: number): void;
/**
 * This fixes a vehicle.
 * If the vehicle's engine's broken then you cannot fix it with this native.
 * @param vehicle
 */
export declare function setVehicleFixed(vehicle: number): void;
export declare function setVehicleFlightNozzlePosition(vehicle: number, angleRatio: number): void;
export declare function setVehicleFlightNozzlePositionImmediate(vehicle: number, angle: number): void;
export declare function setVehicleForceAfterburner(vehicle: number, toggle: boolean): void;
/**
 * Sets some bit of vehicle
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleForceInteriorlight(vehicle: number, toggle: boolean): void;
export declare function setVehicleForceReverseWarning(p0: number, p1: number): void;
/**
 * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
 *
 * Speed is in meters per second
 * You can convert meters/s to mph here:
 * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
 * @param vehicle
 * @param speed
 */
export declare function setVehicleForwardSpeed(vehicle: number, speed: number): void;
/**
 * Seems to be identical to SET_VEHICLE_FORWARD_SPEED
 * @param vehicle
 * @param speed
 */
export declare function setVehicleForwardSpeedXy(vehicle: number, speed: number): void;
/**
 * Seems to be related to the metal parts, not tyres (like i was expecting lol)
 * @param vehicle
 * @param friction
 */
export declare function setVehicleFrictionOverride(vehicle: number, friction: number): void;
/**
 * It switch to highbeam when p1 is set to true.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleFullbeam(vehicle: number, toggle: boolean): void;
/**
 * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleGeneratesEngineShockingEvents(vehicle: number, toggle: boolean): void;
/**
 * Related to car generators & CPlayerSwitchMgrLong
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export declare function setVehicleGeneratorAreaOfInterest(x: number, y: number, z: number, radius: number): void;
export declare function setVehicleGravity(vehicle: number, toggle: boolean): void;
export declare function setVehicleHandbrake(vehicle: number, toggle: boolean): void;
/**
 * Use the "AIHandling" string found in handling.meta
 * @param vehicle
 * @param hash
 */
export declare function setVehicleHandlingOverride(vehicle: number, hash: number): void;
export declare function setVehicleHasBeenDrivenFlag(vehicle: number, toggle: boolean): void;
export declare function setVehicleHasBeenOwnedByPlayer(vehicle: number, owned: boolean): void;
/**
 * If set to true, prevents vehicle sirens from having sound, leaving only the lights.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleHasMutedSirens(vehicle: number, toggle: boolean): void;
/**
 * if true, axles won't bend.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleHasStrongAxles(vehicle: number, toggle: boolean): void;
export declare function setVehicleHasUnbreakableLights(vehicle: number, toggle: boolean): void;
/**
 * p1 can be either 0, 1 or 2.
 *
 * Determines how vehicle lights behave when toggled.
 *
 * 0 = Default (Lights can be toggled between off, normal and high beams)
 * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
 * 2 = Always On (Lights can be toggled between normal and high beams)
 * @param vehicle
 * @param p1
 */
export declare function setVehicleHeadlightShadows(vehicle: number, p1: number): void;
export declare function setVehicleHomingLockedontoState(p0: number, p1: number): void;
export declare function setVehicleHornSoundIndex(vehicle: number, value: number): void;
/**
 * Seems to copy some values in vehicle
 * @param vehicle
 * @param p1
 */
export declare function setVehicleImpatienceTimer(vehicle: number, p1: number): void;
/**
 * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleInCarModShop(vehicle: number, toggle: boolean): void;
export declare function setVehicleInactiveDuringPlayback(vehicle: number, toggle: boolean): void;
/**
 * Sets the turn signal enabled for a vehicle.
 * Set turnSignal to 1 for left light, 0 for right light.
 * @param vehicle
 * @param turnSignal
 * @param toggle
 */
export declare function setVehicleIndicatorLights(vehicle: number, turnSignal: number, toggle: boolean): void;
/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param doorLockStatus
 */
export declare function setVehicleIndividualDoorsLocked(vehicle: number, doorId: number, doorLockStatus: number): void;
export declare function setVehicleInfluencesWantedLevel(p0: number, p1: boolean): void;
export declare function setVehicleInteriorlight(vehicle: number, toggle: boolean): void;
/**
 * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleIsConsideredByPlayer(vehicle: number, toggle: boolean): void;
/**
 * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleIsRacing(vehicle: number, toggle: boolean): void;
export declare function setVehicleIsStolen(vehicle: number, isStolen: boolean): void;
/**
 * Sets the wanted state of this vehicle.
 * @param vehicle
 * @param state
 */
export declare function setVehicleIsWanted(vehicle: number, state: boolean): void;
export declare function setVehicleKeepEngineOnWhenAbandoned(vehicle: number, toggle: boolean): void;
export declare function setVehicleKersAllowed(vehicle: number, toggle: boolean): void;
/**
 * multiplier = brightness of head lights.
 * this value isn't capped afaik.
 *
 * multiplier = 0.0 no lights
 * multiplier = 1.0 default game value
 *
 * @param vehicle
 * @param multiplier
 */
export declare function setVehicleLightMultiplier(vehicle: number, multiplier: number): void;
/**
 * set's if the vehicle has lights or not.
 * not an on off toggle.
 * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
 * p1 = 1 ;vehicle doesn't have lights, always off
 * p1 = 2 ;vehicle has always on lights
 * p1 = 3 ;or even larger like 4,5,... normal lights like =1
 * note1: when using =2 on day it's lowbeam,highbeam
 * but at night it's lowbeam,lowbeam,highbeam
 * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
 * @param vehicle
 * @param state
 */
export declare function setVehicleLights(vehicle: number, state: number): void;
export declare function setVehicleLimitSpeedWhenPlayerInactive(vehicle: number, toggle: boolean): void;
export declare function setVehicleLivery(vehicle: number, livery: number): void;
/**
 * Used to set the secondary livery (the roof on Tornado Custom being one such example.)
 *
 * Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.
 * @param vehicle
 * @param livery
 */
export declare function setVehicleLivery2(vehicle: number, livery: number): void;
export declare function setVehicleLodMultiplier(vehicle: number, multiplier: number): void;
/**
 * To reset the max speed, set the `speed` value to `0.0` or lower.
 * @param vehicle
 * @param speed
 */
export declare function setVehicleMaxSpeed(vehicle: number, speed: number): void;
export declare function setVehicleMayBeUsedByGotoPointAnyMeans(vehicle: number, p1: boolean): void;
export declare function setVehicleMissileWarningEnabled(vehicle: number, toggle: boolean): void;
/**
 * In b944, there are 50 (0 - 49) mod types.
 *
 * Sets the vehicle mod.
 * The vehicle must have a mod kit first.
 *
 * Any out of range ModIndex is stock.
 *
 * #Mod Type
 * Spoilers - 0
 * Front Bumper - 1
 * Rear Bumper - 2
 * Side Skirt - 3
 * Exhaust - 4
 * Frame - 5
 * Grille - 6
 * Hood - 7
 * Fender - 8
 * Right Fender - 9
 * Roof - 10
 * Engine - 11
 * Brakes - 12
 * Transmission - 13
 * Horns - 14 (modIndex from 0 to 51)
 * Suspension - 15
 * Armor - 16
 * Front Wheels - 23
 * Back Wheels - 24 //only for motocycles
 * Plate holders - 25
 * Trim Design - 27
 * Ornaments - 28
 * Dial Design - 30
 * Steering Wheel - 33
 * Shifter Leavers - 34
 * Plaques - 35
 * Hydraulics - 38
 * Livery - 48
 *
 * ENUMS: https://pastebin.com/QzEAn02v
 * @param vehicle
 * @param modType
 * @param modIndex
 * @param customTires
 */
export declare function setVehicleMod(vehicle: number, modType: number, modIndex: number, customTires: boolean): void;
/**
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 *
 * color: number of the color.
 *
 * p3 seems to always be 0.
 *
 * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param paintType
 * @param color
 * @param pearlescentColor
 */
export declare function setVehicleModColor1(vehicle: number, paintType: number, color: number, pearlescentColor: number): void;
/**
 * Changes the secondary paint type and color
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 *
 * color: number of the color
 *
 * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param paintType
 * @param color
 */
export declare function setVehicleModColor2(vehicle: number, paintType: number, color: number): void;
/**
 * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
 *
 * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
 * @param vehicle
 * @param modKit
 */
export declare function setVehicleModKit(vehicle: number, modKit: number): void;
/**
 * Makes the vehicle stop spawning naturally in traffic. Here's an essential example:
 *
 * VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);
 *
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param model
 * @param suppressed
 */
export declare function setVehicleModelIsSuppressed(model: number, suppressed: boolean): void;
/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export declare function setVehicleModelPlayerWillExitScene(modelHash: number): void;
/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param vehicle
 * @param name
 */
export declare function setVehicleNameDebug(vehicle: number, name: string): void;
export declare function setVehicleNeedsToBeHotwired(vehicle: number, toggle: boolean): void;
/**
 * Sets the color of the neon lights of the specified vehicle.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export declare function setVehicleNeonColour(vehicle: number, r: number, g: number, b: number): void;
/**
 * Sets the neon lights of the specified vehicle on/off.
 *
 * Indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * @param vehicle
 * @param index
 * @param toggle
 */
export declare function setVehicleNeonEnabled(vehicle: number, index: number, toggle: boolean): void;
/**
 * Index references CVehicleModelColor
 * @param vehicle
 * @param index
 */
export declare function setVehicleNeonIndexColour(vehicle: number, index: number): void;
export declare function setVehicleNoExplosionDamageFromDriver(vehicle: number, toggle: boolean): void;
export declare function setVehicleNotStealableAmbiently(vehicle: number, p1: boolean): void;
/**
 * Sets a vehicle's license plate text.  8 chars maximum.
 *
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * char *plateText = "KING";
 * VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
 * @param vehicle
 * @param plateText
 */
export declare function setVehicleNumberPlateText(vehicle: number, plateText: string): void;
/**
 * Plates:
 * Blue/White - 0
 * Yellow/black - 1
 * Yellow/Blue - 2
 * Blue/White2 - 3
 * Blue/White3 - 4
 * Yankton - 5
 * @param vehicle
 * @param plateIndex
 */
export declare function setVehicleNumberPlateTextIndex(vehicle: number, plateIndex: number): void;
export declare function setVehicleOccupantsTakeExplosiveDamage(vehicle: number, toggle: boolean): void;
/**
 * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
 *
 * sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
 * @param vehicle
 * @param p1
 */
export declare function setVehicleOnGroundProperly(vehicle: number, p1: number): boolean;
/**
 * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
 * @param vehicle
 * @param killDriver
 * @param explodeOnImpact
 */
export declare function setVehicleOutOfControl(vehicle: number, killDriver: boolean, explodeOnImpact: boolean): void;
/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs
 * @param vehicle
 * @param health
 */
export declare function setVehiclePetrolTankHealth(vehicle: number, health: number): void;
export declare function setVehiclePopulationBudget(p0: number): void;
export declare function setVehicleProvidesCover(vehicle: number, toggle: boolean): void;
/**
 * can't seem to enable radio on cop cars etc
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleRadioEnabled(vehicle: number, toggle: boolean): void;
export declare function setVehicleRadioLoud(vehicle: number, toggle: boolean): void;
export declare function setVehicleReadyForCleanup(p0: number): void;
/**
 * Reduces grip significantly so it's hard to go anywhere.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleReduceGrip(vehicle: number, toggle: boolean): void;
/**
 * val is 0-3
 * Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
 * @param vehicle
 * @param val
 */
export declare function setVehicleReduceGripLevel(vehicle: number, val: number): void;
export declare function setVehicleRemoveAggressiveCarjackMission(p0: number): void;
export declare function setVehicleRespectsLocksWhenHasDriver(vehicle: number, p1: boolean): void;
export declare function setVehicleRudderBroken(vehicle: number, toggle: boolean): void;
/**
 * Only works during nighttime.
 * @param heli
 * @param toggle
 * @param canBeUsedByAI
 */
export declare function setVehicleSearchlight(heli: number, toggle: boolean, canBeUsedByAI: boolean): void;
/**
 * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
 *
 * WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
 * @param driver
 * @param entity
 * @param xTarget
 * @param yTarget
 * @param zTarget
 */
export declare function setVehicleShootAtTarget(driver: number, entity: number, xTarget: number, yTarget: number, zTarget: number): void;
/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
export declare function setVehicleShuntOnStick(toggle: boolean): void;
/**
 * Activate siren on vehicle (Only works if the vehicle has a siren).
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleSiren(vehicle: number, toggle: boolean): void;
export declare function setVehicleSlipstreamingShouldTimeOut(toggle: boolean): void;
export declare function setVehicleStartupRevSound(vehicle: number, p1: string, p2: string): void;
/**
 * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
 * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleStaysFrozenWhenCleanedUp(vehicle: number, toggle: boolean): void;
/**
 * Locks the vehicle's steering to the desired angle, explained below.
 *
 * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
 *
 * Steer bias:
 * -1.0 = full right
 * 0.0 = centered steering
 * 1.0 = full left
 * @param vehicle
 * @param value
 */
export declare function setVehicleSteerBias(vehicle: number, value: number): void;
export declare function setVehicleSteerForBuildings(vehicle: number, p1: number): void;
export declare function setVehicleSteeringBiasScalar(p0: number, p1: number): void;
/**
 * sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
 * CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
 * {
 * CVehicle *result; // rax@1
 *
 * result = EntityAsCVehicle(a1);
 * if ( result )
 * {
 * result->field_886 &= 0xEFu;
 * result->field_886 |= 16 * (a2 & 1);
 * }
 * return result;
 * }
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleStopInstantlyWhenPlayerInactive(vehicle: number, toggle: boolean): void;
/**
 * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleStrong(vehicle: number, toggle: boolean): void;
export declare function setVehicleTailLights(vehicle: number, toggle: boolean): void;
export declare function setVehicleTankStationary(vehicle: number, p1: boolean): void;
export declare function setVehicleTankTurretPosition(vehicle: number, position: number, p2: boolean): void;
export declare function setVehicleTimedExplosion(vehicle: number, ped: number, toggle: boolean): void;
/**
 * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
 * @param vehicle
 * @param position
 */
export declare function setVehicleTowTruckArmPosition(vehicle: number, position: number): void;
export declare function setVehicleTurretSpeedThisFrame(vehicle: number, speed: number): void;
export declare function setVehicleTurretTarget(vehicle: number, p1: boolean, x: number, y: number, z: number, p5: boolean): void;
/**
 * "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
 * to burst all tyres type it 8 times where p1 = 0 to 7.
 *
 * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
 *
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param index
 * @param onRim
 * @param p3
 */
export declare function setVehicleTyreBurst(vehicle: number, index: number, onRim: boolean, p3: number): void;
/**
 * tyreIndex = 0 to 4 on normal vehicles
 *
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param tyreIndex
 */
export declare function setVehicleTyreFixed(vehicle: number, tyreIndex: number): void;
/**
 * Sets the tire smoke's color of this vehicle.
 *
 * vehicle: The vehicle that is the target of this method.
 * r: The red level in the RGB color code.
 * g: The green level in the RGB color code.
 * b: The blue level in the RGB color code.
 *
 * Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export declare function setVehicleTyreSmokeColor(vehicle: number, r: number, g: number, b: number): void;
/**
 * Allows you to toggle bulletproof tires.
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleTyresCanBurst(vehicle: number, toggle: boolean): void;
export declare function setVehicleUndriveable(vehicle: number, toggle: boolean): void;
export declare function setVehicleUseAlternateHandling(vehicle: number, toggle: boolean): void;
/**
 * Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
 * @param toggle
 */
export declare function setVehicleUseBoostButtonForWheelRetract(toggle: boolean): void;
export declare function setVehicleUseCutsceneWheelCompression(p0: number, p1: boolean, p2: boolean, p3: boolean): boolean;
export declare function setVehicleUseMoreRestrictiveSpawnChecks(vehicle: number, p1: boolean): void;
export declare function setVehicleUsePlayerLightSettings(vehicle: number, toggle: boolean): void;
export declare function setVehicleUsedForPilotSchool(vehicle: number, toggle: boolean): void;
/**
 * vehicle must be a plane
 * @param vehicle
 * @param toggle
 */
export declare function setVehicleUsesLargeRearRamp(vehicle: number, toggle: boolean): void;
export declare function setVehicleUsesMpPlayerDamageMultiplier(p0: number, p1: number): void;
export declare function setVehicleWeaponCanTargetObjects(vehicle: number, toggle: boolean): void;
export declare function setVehicleWeaponDamageScale(vehicle: number, multiplier: number): boolean;
/**
 * Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
 * For example, you can "remove" any vehicle weapon from any vehicle.
 * ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
 * @param vehicle
 * @param weaponIndex
 * @param capacity
 */
export declare function setVehicleWeaponRestrictedAmmo(vehicle: number, weaponIndex: number, capacity: number): void;
/**
 * 0: Sport
 * 1: Muscle
 * 2: Lowrider
 * 3: SUV
 * 4: Offroad
 * 5: Tuner
 * 6: Bike Wheels
 * 7: High End
 * 8: Benny's Originals
 * 9: Benny's Bespoke
 * 10: Racing
 * 11: Street
 * 12: Track
 * @param vehicle
 * @param WheelType
 */
export declare function setVehicleWheelType(vehicle: number, WheelType: number): void;
export declare function setVehicleWheelsCanBreak(vehicle: number, enabled: boolean): void;
export declare function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle: number, toggle: boolean): void;
export declare function setVehicleWillForceOtherVehiclesToStop(vehicle: number, toggle: boolean): void;
export declare function setVehicleWillTellOthersToHurry(vehicle: number, p1: boolean): void;
/**
 * enum WindowTints
 * {
 * WINDOWTINT_NONE,
 * WINDOWTINT_PURE_BLACK,
 * WINDOWTINT_DARKSMOKE,
 * WINDOWTINT_LIGHTSMOKE,
 * WINDOWTINT_STOCK,
 * WINDOWTINT_LIMO,
 * WINDOWTINT_GREEN
 * };
 * Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param tint
 */
export declare function setVehicleWindowTint(vehicle: number, tint: number): void;
/**
 * `color`: is the paint index for the vehicle.
 * Paint index goes from 0 to 12.
 * Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
 * Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param colorIndex
 */
export declare function setVehicleXenonLightColorIndex(vehicle: number, colorIndex: number): void;
/**
 * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
 *
 * Ran after these 2 natives,
 * set_object_targettable(uParam0, 0);
 * set_entity_invincible(uParam0, 1);
 * @param entity
 * @param toggle
 */
export declare function setWaitForCollisionsBeforeProbe(entity: number, toggle: boolean): void;
/**
 * Max value is 1.0
 * @param player
 * @param difficulty
 */
export declare function setWantedLevelDifficulty(player: number, difficulty: number): void;
export declare function setWantedLevelHiddenEscapeTime(player: number, wantedLevel: number, lossTime: number): void;
export declare function setWantedLevelMultiplier(multiplier: number): void;
export declare function setWantedResponseNumPedsToSpawn(p0: number, p1: number): void;
/**
 * You can only use text entries. No custom text.
 *
 * Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
 * errorCode: shows an error code at the bottom left if nonzero
 * @param titleMsg
 * @param flags
 * @param promptMsg
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param showBackground
 * @param errorCode
 */
export declare function setWarningMessage(titleMsg: string, flags: number, promptMsg: string, p3: boolean, p4: number, p5: string, p6: string, showBackground: boolean, errorCode: number): void;
export declare function setWarningMessageOptionHighlight(p0: number): boolean;
/**
 * Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
 * Param names copied from the corresponding scaleform function "SET_LIST_ROW".
 * Example: https://i.imgur.com/arKvOYx.png
 * @param index
 * @param name
 * @param cash
 * @param rp
 * @param lvl
 * @param colour
 */
export declare function setWarningMessageOptionItems(index: number, name: string, cash: number, rp: number, lvl: number, colour: number): boolean;
/**
 * Shows a warning message on screen with a header.
 * Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
 * Example: https://i.imgur.com/ITJt8bJ.png
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param showBackground
 * @param p7
 * @param p8
 * @param p9
 */
export declare function setWarningMessageWithHeader(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, p4: boolean, p5: number, p8: boolean, p9: number): [number, number];
/**
 * You can use this native for custom input, without having to use any scaleform-related natives.
 * The native must be called on tick.
 * The entryHeader must be a valid label.
 * For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
 * Notes:
 * - additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
 * - additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
 * - additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
 * - showBackground: shows black background of the warning screen
 * - errorCode: shows an error code at the bottom left if nonzero
 * Example of usage:
 * SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
 * Screenshot:
 * https://imgur.com/a/IYA7vJ8
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param additionalIntInfo
 * @param additionalTextInfoLine1
 * @param additionalTextInfoLine2
 * @param showBackground
 * @param errorCode
 */
export declare function setWarningMessageWithHeaderAndSubstringFlags(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, p4: boolean, p5: number, additionalIntInfo: number, additionalTextInfoLine1: string, additionalTextInfoLine2: string, showBackground: boolean, errorCode: number): void;
/**
 * labelTitle: Label of the alert's title.
 * labelMsg: Label of the alert's message.
 * p2: This is an enum, check the description for a list.
 * p3: This is an enum, check the description for a list.
 * labelMsg2: Label of another message line
 * p5: usually 0
 * p6: usually -1
 * p7: usually 0
 * p8: unknown label
 * p9: unknown label
 * background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
 * errorCode: Error code, shown at the bottom left if set to value other than 0.
 *
 * instructionalKey enum list:
 * Buttons = {
 * Empty = 0,
 * Select = 1, -- (RETURN)
 * Ok = 2, -- (RETURN)
 * Yes = 4, -- (RETURN)
 * Back = 8, -- (ESC)
 * Cancel = 16, -- (ESC)
 * No = 32, -- (ESC)
 * RetrySpace = 64, -- (SPACE)
 * Restart = 128, -- (SPACE)
 * Skip = 256, -- (SPACE)
 * Quit = 512, -- (ESC)
 * Adjust = 1024, -- (ARROWS)
 * SpaceKey = 2048, -- (SPACE)
 * Share = 4096, -- (SPACE)
 * SignIn = 8192, -- (SPACE)
 * Continue = 16384, -- (RETURN)
 * AdjustLeftRight = 32768, -- (SCROLL L/R)
 * AdjustUpDown = 65536, -- (SCROLL U/D)
 * Overwrite = 131072, -- (SPACE)
 * SocialClubSignup = 262144, -- (RETURN)
 * Confirm = 524288, -- (RETURN)
 * Queue = 1048576, -- (RETURN)
 * RetryReturn = 2097152, -- (RETURN)
 * BackEsc = 4194304, -- (ESC)
 * SocialClub = 8388608, -- (RETURN)
 * Spectate = 16777216, -- (SPACE)
 * OkEsc = 33554432, -- (ESC)
 * CancelTransfer = 67108864, -- (ESC)
 * LoadingSpinner = 134217728,
 * NoReturnToGTA = 268435456, -- (ESC)
 * CancelEsc = 536870912, -- (ESC)
 * }
 *
 * Alt = {
 * Empty = 0,
 * No = 1, -- (SPACE)
 * Host = 2, -- (ESC)
 * SearchForJob = 4, -- (RETURN)
 * ReturnKey = 8, -- (TURN)
 * Freemode = 16, -- (ESC)
 * }
 *
 * Example: https://i.imgur.com/TvmNF4k.png
 * @param labelTitle
 * @param labelMessage
 * @param p2
 * @param p3
 * @param labelMessage2
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param background
 * @param errorCode
 */
export declare function setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle: string, labelMessage: string, p2: number, p3: number, labelMessage2: string, p5: boolean, p6: number, p7: number, p8: string, p9: string, background: boolean, errorCode: number): void;
export declare function setWarningMessageWithHeaderExtended(entryHeader: string, entryLine1: string, flags: number, entryLine2: string, p4: boolean, p5: number, showBg: boolean, p9: number, p10: number): [number, number];
/**
 * This native removes the current waypoint from the map.
 *
 * Example:
 * C#:
 * Function.Call(Hash.SET_WAYPOINT_OFF);
 *
 * C++:
 * HUD::SET_WAYPOINT_OFF();
 */
export declare function setWaypointOff(): void;
/**
 * Changes the selected ped aiming animation style.
 * Note : You must use GET_HASH_KEY!
 *
 * Strings to use with GET_HASH_KEY :
 *
 * "Ballistic",
 * "Default",
 * "Fat",
 * "Female",
 * "FirstPerson",
 * "FirstPersonAiming",
 * "FirstPersonFranklin",
 * "FirstPersonFranklinAiming",
 * "FirstPersonFranklinRNG",
 * "FirstPersonFranklinScope",
 * "FirstPersonMPFemale",
 * "FirstPersonMichael",
 * "FirstPersonMichaelAiming",
 * "FirstPersonMichaelRNG",
 * "FirstPersonMichaelScope",
 * "FirstPersonRNG",
 * "FirstPersonScope",
 * "FirstPersonTrevor",
 * "FirstPersonTrevorAiming",
 * "FirstPersonTrevorRNG",
 * "FirstPersonTrevorScope",
 * "Franklin",
 * "Gang",
 * "Gang1H",
 * "GangFemale",
 * "Hillbilly",
 * "MP_F_Freemode",
 * "Michael",
 * "SuperFat",
 * "Trevor"
 * @param ped
 * @param animStyle
 */
export declare function setWeaponAnimationOverride(ped: number, animStyle: number): void;
export declare function setWeaponAoeModifier(weaponHash: number, multiplier: number): void;
/**
 * Changes the weapon damage output by the given multiplier value. Must be run every frame.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param damageMultiplier
 */
export declare function setWeaponDamageModifier(weaponHash: number, damageMultiplier: number): void;
/**
 * ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);
 * @param p0
 * @param p1
 */
export declare function setWeaponEffectDurationModifier(p0: number, p1: number): void;
export declare function setWeaponImpactsApplyGreaterForce(object: number, p1: boolean): void;
export declare function setWeaponObjectCamoIndex(weaponObject: number, p1: number): void;
/**
 * Colors:
 * 0 = Gray
 * 1 = Dark Gray
 * 2 = Black
 * 3 = White
 * 4 = Blue
 * 5 = Cyan
 * 6 = Aqua
 * 7 = Cool Blue
 * 8 = Dark Blue
 * 9 = Royal Blue
 * 10 = Plum
 * 11 = Dark Purple
 * 12 = Purple
 * 13 = Red
 * 14 = Wine Red
 * 15 = Magenta
 * 16 = Pink
 * 17 = Salmon
 * 18 = Hot Pink
 * 19 = Rust Orange
 * 20 = Brown
 * 21 = Earth
 * 22 = Orange
 * 23 = Light Orange
 * 24 = Dark Yellow
 * 25 = Yellow
 * 26 = Light Brown
 * 27 = Lime Green
 * 28 = Olive
 * 29 = Moss
 * 30 = Turquoise
 * 31 = Dark Green
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponObject
 * @param camoComponentHash
 * @param colorIndex
 */
export declare function setWeaponObjectComponentTintIndex(weaponObject: number, camoComponentHash: number, colorIndex: number): void;
/**
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weapon
 * @param tintIndex
 */
export declare function setWeaponObjectTintIndex(weapon: number, tintIndex: number): void;
export declare function setWeatherPtfxOverrideCurrLevel(p0: number): void;
export declare function setWeatherPtfxUseOverrideSettings(p0: boolean): void;
/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
export declare function setWeatherTypeNow(weatherType: string): void;
/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
export declare function setWeatherTypeNowPersist(weatherType: string): void;
export declare function setWeatherTypeOvertimePersist(weatherType: string, time: number): void;
/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
export declare function setWeatherTypePersist(weatherType: string): void;
/**
 * Enables/disables the ability to wheelie on motorcycles.
 * @param vehicle
 * @param enabled
 */
export declare function setWheelieEnabled(vehicle: number, enabled: boolean): void;
export declare function setWheelsExtendedInstantly(vehicle: number): void;
export declare function setWheelsRetractedInstantly(vehicle: number): void;
export declare function setWidescreenBorders(p0: boolean, p1: number): void;
export declare function setWidescreenFormat(p0: number): void;
/**
 * Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
 * @param speed
 */
export declare function setWind(speed: number): void;
/**
 * The wind direction in radians
 * 180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
 * @param direction
 */
export declare function setWindDirection(direction: number): void;
/**
 * Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
 * @param speed
 */
export declare function setWindSpeed(speed: number): void;
export declare function setZoneEnabled(zoneId: number, toggle: boolean): void;
export declare function settimera(value: number): void;
export declare function settimerb(value: number): void;
export declare function setupFakeConeData(blip: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void;
export declare function setupShopPedApparelQuery(p0: number, p1: number, p2: number, p3: number): number;
/**
 * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
 *
 * componentId is between 0 and 11 and corresponds to the usual component slots.
 *
 * p1 could be the outfit number; unsure.
 *
 * p2 is usually -1; unknown function.
 *
 * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
 *
 * p4 is usually -1; unknown function.
 *
 * componentId is -1 when p3 is true in decompiled scripts.
 * @param character
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param componentId
 */
export declare function setupShopPedApparelQueryTu(character: number, p1: number, p2: number, p3: boolean, p4: number, componentId: number): number;
/**
 * characters
 *
 * 0: Michael
 * 1: Franklin
 * 2: Trevor
 * 3: MPMale
 * 4: MPFemale
 * @param character
 * @param p1
 */
export declare function setupShopPedOutfitQuery(character: number, p1: boolean): number;
/**
 * Possible shake types (updated b617d):
 *
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param cam
 * @param type
 * @param amplitude
 */
export declare function shakeCam(cam: number, type: string, amplitude: number): void;
/**
 * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param shakeType
 * @param amount
 */
export declare function shakeCinematicCam(shakeType: string, amount: number): void;
/**
 * Possible shake types (updated b617d):
 *
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param shakeName
 * @param intensity
 */
export declare function shakeGameplayCam(shakeName: string, intensity: number): void;
/**
 * CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
 *
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param p0
 * @param p1
 */
export declare function shakeScriptGlobal(p0: string, p1: number): void;
export declare function shiftLeft(value: number, bitShift: number): number;
export declare function shiftRight(value: number, bitShift: number): number;
export declare function shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number): void;
/**
 * entity - entity to ignore
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 */
export declare function shootSingleBulletBetweenCoordsIgnoreEntity(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: number): void;
/**
 * entity - entity to ignore
 * targetEntity - entity to home in on, if the weapon hash provided supports homing
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 * @param p15
 * @param targetEntity
 * @param p17
 * @param p18
 * @param p19
 * @param p20
 */
export declare function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: boolean, p15: boolean, targetEntity: number, p17: boolean, p18: number, p19: number, p20: number): void;
/**
 * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
 */
export declare function shouldUseMetricMeasurements(): boolean;
export declare function showAccountPicker(): void;
export declare function showContactInstructionalButton(toggle: boolean): void;
/**
 * Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
 * @param blip
 * @param toggle
 */
export declare function showCrewIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function showForSaleIconOnBlip(blip: number, toggle: boolean): void;
/**
 * Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
 * .Indicating that that player is a friend (in GTA:O). This color can not be changed.
 * To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
 * @param blip
 * @param toggle
 */
export declare function showFriendIndicatorOnBlip(blip: number, toggle: boolean): void;
/**
 * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
 * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
 * @param blip
 * @param toggle
 */
export declare function showGoldTickOnBlip(blip: number, toggle: boolean): void;
/**
 * Adds the GTA: Online player heading indicator to a blip.
 * @param blip
 * @param toggle
 */
export declare function showHeadingIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function showHeightOnBlip(blip: number, toggle: boolean): void;
/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * - 1 : WANTED_STARS
 * - 2 : WEAPON_ICON
 * - 3 : CASH
 * - 4 : MP_CASH
 * - 5 : MP_MESSAGE
 * - 6 : VEHICLE_NAME
 * - 7 : AREA_NAME
 * - 8 : VEHICLE_CLASS
 * - 9 : STREET_NAME
 * - 10 : HELP_TEXT
 * - 11 : FLOATING_HELP_TEXT_1
 * - 12 : FLOATING_HELP_TEXT_2
 * - 13 : CASH_CHANGE
 * - 14 : RETICLE
 * - 15 : SUBTITLE_TEXT
 * - 16 : RADIO_STATIONS
 * - 17 : SAVING_GAME
 * - 18 : GAME_STREAM
 * - 19 : WEAPON_WHEEL
 * - 20 : WEAPON_WHEEL_STATS
 * - 21 : HUD_COMPONENTS
 * - 22 : HUD_WEAPONS
 *
 * These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
 * @param id
 */
export declare function showHudComponentThisFrame(id: number): void;
export declare function showNumberOnBlip(blip: number, number: number): void;
/**
 * Highlights a blip by a cyan color circle.
 *
 * Color can be changed with SET_BLIP_SECONDARY_COLOUR
 * @param blip
 * @param toggle
 */
export declare function showOutlineIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function showScriptedHudComponentThisFrame(id: number): void;
export declare function showStartMissionInstructionalButton(toggle: boolean): void;
/**
 * Adds a green checkmark on top of a blip.
 * @param blip
 * @param toggle
 */
export declare function showTickOnBlip(blip: number, toggle: boolean): void;
/**
 * Starts a new singleplayer game (at the prologue).
 */
export declare function shutdownAndLaunchSinglePlayerGame(): void;
/**
 * In singleplayer this will re-load your game.
 *
 * In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
 *
 * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
 *
 * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
 */
export declare function shutdownAndLoadMostRecentSave(): boolean;
export declare function shutdownCreatorBudget(): void;
export declare function shutdownLoadingScreen(): void;
export declare function shutdownPcScriptedControls(): void;
export declare function shutdownSessionClearsAutoMultiplayer(toggle: boolean): void;
/**
 * This is to make the player walk without accepting input from INPUT.
 *
 * gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
 *
 * p4 is always 1 and p5 is always 0.
 *
 * C# Example :
 *
 * Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
 * @param player
 * @param amount
 * @param gaitType
 * @param speed
 * @param p4
 * @param p5
 * @param p6
 */
export declare function simulatePlayerInputGait(player: number, amount: number, gaitType: number, speed: number, p4: boolean, p5: boolean, p6: number): void;
export declare function sin(value: number): number;
export declare function skipRadioForward(): void;
/**
 * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
 * @param vehicle
 * @param time
 */
export declare function skipTimeInPlaybackRecordedVehicle(vehicle: number, time: number): void;
export declare function skipToEndAndStopPlaybackRecordedVehicle(vehicle: number): void;
export declare function skipToNextScriptedConversationLine(): void;
/**
 * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
 * @param t
 * @param x
 * @param y
 * @param z
 * @param w
 * @param x1
 * @param y1
 * @param z1
 * @param w1
 * @param outX
 * @param outY
 * @param outZ
 * @param outW
 */
export declare function slerpNearQuaternion(t: number, x: number, y: number, z: number, w: number, x1: number, y1: number, z1: number, w1: number): [number, number, number, number];
/**
 * Returns true if the object has finished moving.
 *
 * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
 *
 * See also: https://gtagmodding.com/opcode-database/opcode/034E/
 * Has to be looped until it returns true.
 * @param object
 * @param toX
 * @param toY
 * @param toZ
 * @param speedX
 * @param speedY
 * @param speedZ
 * @param collision
 */
export declare function slideObject(object: number, toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean;
/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
export declare function smashVehicleWindow(vehicle: number, windowIndex: number): void;
export declare function spawnpointsCancelSearch(): void;
export declare function spawnpointsGetNumSearchResults(): number;
export declare function spawnpointsGetSearchResult(randomInt: number): [number, number, number];
export declare function spawnpointsGetSearchResultFlags(p0: number, p1: number): number;
export declare function spawnpointsIsSearchActive(): boolean;
export declare function spawnpointsIsSearchComplete(): boolean;
export declare function spawnpointsIsSearchFailed(): boolean;
export declare function spawnpointsStartSearch(p0: number, p1: number, p2: number, p3: number, p4: number, interiorFlags: number, scale: number, duration: number): void;
export declare function spawnpointsStartSearchInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, interiorFlags: number, scale: number, duration: number): void;
/**
 * p1 is always 0 in the scripts
 * @param player
 * @param p1
 */
export declare function specialAbilityActivate(player: number, p1: number): void;
/**
 * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export declare function specialAbilityChargeAbsolute(player: number, p1: number, p2: boolean, p3: number): void;
/**
 * p1 appears to always be 1 (only comes up twice)
 * @param player
 * @param p1
 * @param p2
 */
export declare function specialAbilityChargeContinuous(player: number, p1: number, p2: number): void;
/**
 * 2 matches. p1 was always true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export declare function specialAbilityChargeLarge(player: number, p1: boolean, p2: boolean, p3: number): void;
/**
 * Only 1 match. Both p1 & p2 were true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export declare function specialAbilityChargeMedium(player: number, p1: boolean, p2: boolean, p3: number): void;
/**
 *
 * normalizedValue is from 0.0 - 1.0
 * p2 is always 1
 * @param player
 * @param normalizedValue
 * @param p2
 * @param p3
 */
export declare function specialAbilityChargeNormalized(player: number, normalizedValue: number, p2: boolean, p3: number): void;
export declare function specialAbilityChargeOnMissionFailed(player: number, p1: number): void;
/**
 * Every occurrence of p1 & p2 were both true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export declare function specialAbilityChargeSmall(player: number, p1: boolean, p2: boolean, p3: number): void;
export declare function specialAbilityDeactivate(player: number, p1: number): void;
export declare function specialAbilityDeactivateFast(player: number, p1: number): void;
/**
 * p1 is always 0 in the scripts
 * @param player
 * @param p1
 */
export declare function specialAbilityDeactivateMp(player: number, p1: number): void;
/**
 * p1 was always true.
 * @param player
 * @param p1
 * @param p2
 */
export declare function specialAbilityDepleteMeter(player: number, p1: boolean, p2: number): void;
/**
 * Also known as _RECHARGE_SPECIAL_ABILITY
 * @param player
 * @param p1
 * @param p2
 */
export declare function specialAbilityFillMeter(player: number, p1: boolean, p2: number): void;
export declare function specialAbilityLock(playerModel: number, p1: number): void;
export declare function specialAbilityReset(player: number, p1: number): void;
export declare function specialAbilityUnlock(playerModel: number, p1: number): void;
/**
 * p1 was always 1 (true).
 *
 * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
 * @param ped
 * @param p1
 */
export declare function specialFunctionDoNotUse(ped: number, p1: boolean): void;
export declare function sqrt(value: number): number;
export declare function stabiliseEntityAttachedToHeli(vehicle: number, entity: number, p2: number): void;
/**
 * Example:
 *
 * This will start the alarm at Fort Zancudo.
 *
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 *
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
 *
 * ----------
 *
 * It DOES make a difference but it has to do with the duration or something I dunno yet
 *
 * ----------
 *
 * Found in the b617d scripts:
 *
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
 * AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
 * AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
 * AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
 * AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
 * AUDIO::START_ALARM("PRISON_ALARMS", 0);
 * AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 * @param p2
 */
export declare function startAlarm(alarmName: string, p2: boolean): void;
/**
 * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
 *
 * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
export declare function startAudioScene(scene: string): boolean;
export declare function startBeingBoss(p0: number, p1: number): void;
export declare function startBeingGoon(p0: number, p1: number, p2: number): void;
/**
 * flags: Usually 0.
 * @param flags
 */
export declare function startCutscene(flags: number): void;
/**
 * flags: Usually 0.
 * @param x
 * @param y
 * @param z
 * @param flags
 */
export declare function startCutsceneAtCoords(x: number, y: number, z: number, flags: number): void;
export declare function startEndUserBenchmark(): void;
export declare function startEntityFire(entity: number): number;
/**
 * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 */
export declare function startExpensiveSynchronousShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number;
export declare function startFiringAmnesty(duration: number): void;
/**
 * Starts a new GPS custom-route, allowing you to plot lines on the map.
 * Lines are drawn directly between points.
 * The GPS custom route works like the GPS multi route, except it does not follow roads.
 * Example result: https://i.imgur.com/BDm5pzt.png
 * hudColor: The HUD color of the GPS path.
 * displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
 * followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
 * @param hudColor
 * @param displayOnFoot
 * @param followPlayer
 */
export declare function startGpsCustomRoute(hudColor: number, displayOnFoot: boolean, followPlayer: boolean): void;
/**
 * Starts a new GPS multi-route, allowing you to create custom GPS paths.
 * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
 * Once the player has passed a point, the GPS will no longer force its path through it.
 *
 * Works independently from the player-placed waypoint and blip routes.
 * Example result: https://i.imgur.com/ZZHQatX.png
 * hudColor: The HUD color of the GPS path.
 * routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
 * displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
 * @param hudColor
 * @param routeFromPlayer
 * @param displayOnFoot
 */
export declare function startGpsMultiRoute(hudColor: number, routeFromPlayer: boolean, displayOnFoot: boolean): void;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param r
 * @param g
 * @param b
 * @param a
 */
export declare function startNetworkedParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param r
 * @param g
 * @param b
 * @param a
 */
export declare function startNetworkedParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
export declare function startNetworkedParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): boolean;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export declare function startNetworkedParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export declare function startNetworkedParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
/**
 * Examples:
 * g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
 * l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
 * SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
 * SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
 * SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
 * SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
 *
 * Decompiled examples of usage when starting a script:
 *
 * SCRIPT::REQUEST_SCRIPT(a_0);
 * if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
 * SYSTEM::START_NEW_SCRIPT(a_0, v_3);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
 * return 1;
 * }
 *
 * or:
 *
 * v_2 = "MrsPhilips2";
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * SYSTEM::WAIT(0);
 * }
 * sub_8792(36);
 * SYSTEM::START_NEW_SCRIPT(v_2, 17000);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
 * @param scriptName
 * @param stackSize
 */
export declare function startNewScript(scriptName: string, stackSize: number): number;
/**
 * return : script thread id, 0 if failed
 * Pass pointer to struct of args in p1, size of struct goes into p2
 * @param scriptName
 * @param args
 * @param argCount
 * @param stackSize
 */
export declare function startNewScriptWithArgs(scriptName: string, argCount: number, stackSize: number): [number, number];
export declare function startNewScriptWithNameHash(scriptHash: number, stackSize: number): number;
export declare function startNewScriptWithNameHashAndArgs(scriptHash: number, argCount: number, stackSize: number): [number, number];
/**
 * GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
 *
 *
 * p11 seems to be always 0
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
export declare function startParticleFxLoopedAtCoord(effectName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): number;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export declare function startParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export declare function startParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export declare function startParticleFxLoopedOnPedBone(effectName: string, ped: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
/**
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
 *
 * Axis - Invert Axis Flags
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 *
 *
 * -------------------------------------------------------------------
 * C#
 *
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
 *
 * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
 *
 * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
 *
 * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
 *
 * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
 *
 * bool xaxis, yaxis, zaxis = To bool the axis values.
 *
 * example:
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export declare function startParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean;
/**
 * Starts a particle effect on an entity for example your player.
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 *
 * Example:
 * C#:
 * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
 *
 * Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
 * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
 *
 * -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export declare function startParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export declare function startParticleFxNonLoopedOnEntityBone(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
/**
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
 *
 * Axis - Invert Axis Flags
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export declare function startParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
export declare function startPetrolTrailDecals(p0: number): void;
/**
 * p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
 *
 * See REQUEST_VEHICLE_RECORDING
 * @param vehicle
 * @param recording
 * @param script
 * @param p3
 */
export declare function startPlaybackRecordedVehicle(vehicle: number, recording: number, script: string, p3: boolean): void;
/**
 * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
 *
 * FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
 * @param vehicle
 * @param recording
 * @param script
 * @param speed
 * @param drivingStyle
 */
export declare function startPlaybackRecordedVehicleUsingAi(vehicle: number, recording: number, script: string, speed: number, drivingStyle: number): void;
/**
 * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
 *
 * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
 * @param vehicle
 * @param recording
 * @param script
 * @param flags
 * @param time
 * @param drivingStyle
 */
export declare function startPlaybackRecordedVehicleWithFlags(vehicle: number, recording: number, script: string, flags: number, time: number, drivingStyle: number): void;
/**
 * // this enum comes directly from R* so don't edit this
 * enum ePlayerSwitchTypes
 * {
 * SWITCH_TYPE_AUTO,
 * SWITCH_TYPE_LONG,
 * SWITCH_TYPE_MEDIUM,
 * SWITCH_TYPE_SHORT
 * };
 *
 * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
 *
 * ----------------------------------------------------
 *
 * Examples from the decompiled scripts:
 *
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
 * STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
 * STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
 *
 * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
 *
 * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
 * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
 * @param from
 * @param to
 * @param flags
 * @param switchType
 */
export declare function startPlayerSwitch(from: number, to: number, flags: number, switchType: number): void;
/**
 * `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p5
 * @param findCollisionLand
 * @param p7
 */
export declare function startPlayerTeleport(player: number, x: number, y: number, z: number, heading: number, p5: boolean, findCollisionLand: boolean, p7: boolean): void;
export declare function startPreloadedConversation(): void;
/**
 * Starts recording a replay.
 * If mode is 0, turns on action replay.
 * If mode is 1, starts recording.
 * If already recording a replay, does nothing.
 * @param mode
 */
export declare function startReplayRecording(mode: number): void;
export declare function startRopeUnwindingFront(ropeId: number): void;
export declare function startRopeWinding(ropeId: number): void;
export declare function startSaveArrayWithSize(size: number, arrayName: string): number;
export declare function startSaveData(p1: number, p2: boolean): number;
export declare function startSaveStructWithSize(size: number, structName: string): number;
export declare function startScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
/**
 * Starts a fire:
 *
 * xyz: Location of fire
 * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
 * isGasFire: Whether or not the fire is powered by gasoline.
 * @param X
 * @param Y
 * @param Z
 * @param maxChildren
 * @param isGasFire
 */
export declare function startScriptFire(X: number, Y: number, Z: number, maxChildren: number, isGasFire: boolean): number;
export declare function startScriptPhoneConversation(p0: boolean, p1: boolean): void;
export declare function startShapeTestBound(entity: number, flags1: number, flags2: number): number;
export declare function startShapeTestBoundingBox(entity: number, flags1: number, flags2: number): number;
export declare function startShapeTestBox(x: number, y: number, z: number, dimX: number, dimY: number, dimZ: number, rotX: number, rotY: number, rotZ: number, p9: number, flags: number, entity: number, p12: number): number;
/**
 * Raycast from point to point, where the ray has a radius.
 *
 * flags:
 * vehicles=10
 * peds =12
 *
 * Iterating through flags yields many ped / vehicle/ object combinations
 *
 * p9 = 7, but no idea what it does
 *
 * Entity is an entity to ignore
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 * @param flags
 * @param entity
 * @param p9
 */
export declare function startShapeTestCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number;
/**
 * Asynchronously starts a line-of-sight (raycast) world probe shape test.
 *
 * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
 *
 * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 */
export declare function startShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number;
/**
 * Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
 *
 * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
 * @param pVec1
 * @param pVec2
 * @param flag
 * @param entity
 * @param flag2
 */
export declare function startShapeTestMouseCursorLosProbe(flag: number, entity: number, flag2: number): [number, Vector3, Vector3];
export declare function startShapeTestSweptSphere(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number;
export declare function startVehicleAlarm(vehicle: number): void;
/**
 * Sounds the horn for the specified vehicle.
 *
 * vehicle: The vehicle to activate the horn for.
 * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
 * duration: The duration to sound the horn, in milliseconds.
 *
 * Note: If a player is in the vehicle, it will only sound briefly.
 * @param vehicle
 * @param duration
 * @param mode
 * @param forever
 */
export declare function startVehicleHorn(vehicle: number, duration: number, mode: number, forever: boolean): void;
export declare function statClearDirtyReadDetected(): void;
export declare function statClearPendingSaves(p0: number): void;
/**
 * Example:
 *
 * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
 * STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
 * }
 * @param statSlot
 */
export declare function statClearSlotForReload(statSlot: number): boolean;
export declare function statCloudSlotLoadFailed(p0: number): boolean;
export declare function statCloudSlotLoadFailedCode(p0: number): number;
export declare function statCloudSlotSaveFailed(p0: number): boolean;
export declare function statCommunityGetHistory(statName: number, p1: number, outValue: number): [boolean, number];
export declare function statCommunityStartSynch(): boolean;
export declare function statCommunitySynchIsPending(): boolean;
/**
 * p0 is characterSlot? seems range from 0 to 2
 * @param p0
 */
export declare function statDeleteSlot(p0: number): boolean;
/**
 * Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
 */
export declare function statDisableStatsTracking(): void;
export declare function statEnableStatsTracking(): void;
export declare function statGetBlockSaves(): boolean;
export declare function statGetBool(statHash: number, p2: number): [boolean, boolean];
export declare function statGetCancelSaveMigrationStatus(): number;
/**
 * Fly low to the ground for the longest distance
 */
export declare function statGetChallengeFlyingDist(): number;
/**
 * Drive the furthest distance in a land vehicle without crashing
 */
export declare function statGetCurrentDriveNocrashDistance(): number;
/**
 * Reverse the longest distance without crashing
 */
export declare function statGetCurrentDrivingReverseDistance(): number;
/**
 * Perform the longest stoppie on a motorcycle
 */
export declare function statGetCurrentFrontWheelDistance(): number;
/**
 * Perform the longest jump in a land vehicle
 */
export declare function statGetCurrentJumpDistance(): number;
/**
 * Perform the most near misses with other vehicles in a land vehicle without crashing
 */
export declare function statGetCurrentNearMissNocrashPrecise(): number;
/**
 * Perform the longest wheelie on a motorcycle
 */
export declare function statGetCurrentRearWheelDistance(): number;
/**
 * Fall the longest distance with a parachute before opening it
 */
export declare function statGetCurrentSkydivingDistance(): number;
/**
 * Achieve the highest speed in a land vehicle
 */
export declare function statGetCurrentSpeed(): number;
/**
 * p3 is probably characterSlot or BOOL save, always -1
 * @param statHash
 * @param outValue
 * @param numFields
 * @param p3
 */
export declare function statGetDate(statHash: number, numFields: number, p3: number): [boolean, number];
export declare function statGetFloat(statHash: number, p2: number): [boolean, number];
export declare function statGetFlyingAltitude(outValue: number): [boolean, number];
/**
 * p2 appears to always be -1
 *
 * @param statHash
 * @param outValue
 * @param p2
 */
export declare function statGetInt(statHash: number, p2: number): [boolean, number];
export declare function statGetLicensePlate(statName: number): string;
export declare function statGetLoadSafeToProgressToMpFromSp(): boolean;
/**
 * p4 is probably characterSlot or BOOL save
 * @param statHash
 * @param outValue
 * @param p2
 * @param p3
 * @param p4
 */
export declare function statGetMaskedInt(statHash: number, p2: number, p3: number, p4: number): [boolean, number];
export declare function statGetNumberOfDays(statName: number): number;
export declare function statGetNumberOfHours(statName: number): number;
export declare function statGetNumberOfMinutes(statName: number): number;
export declare function statGetNumberOfSeconds(statName: number): number;
/**
 * p3 is probably characterSlot or BOOL save, always -1
 * @param statName
 * @param outX
 * @param outY
 * @param outZ
 * @param p4
 */
export declare function statGetPos(statName: number, p4: number): [boolean, number, number, number];
export declare function statGetRecordedValue(value: number): [boolean, number];
export declare function statGetSaveMigrationConsumeContentStatus(p0: number): [number, number];
export declare function statGetSaveMigrationStatus(data: number): [number, number];
/**
 * p1 is always -1 in the script files
 * @param statHash
 * @param p1
 */
export declare function statGetString(statHash: number, p1: number): string;
/**
 * Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId
 * @param statHash
 */
export declare function statGetUserId(statHash: number): string;
/**
 * Travel the furthest distance when bailing from a vehicle
 */
export declare function statGetVehicleBailDistance(): number;
export declare function statIncrement(statName: number, value: number): void;
/**
 * Or non-flyable area
 */
export declare function statIsPlayerVehicleAboveOcean(): boolean;
export declare function statIsRecordingStat(): boolean;
export declare function statIsStatsTrackingEnabled(): boolean;
export declare function statLoad(statSlot: number): boolean;
export declare function statLoadDirtyReadDetected(): boolean;
export declare function statLoadPending(statSlot: number): boolean;
/**
 * p0 seems to range from 0 to 7
 * @param p0
 */
export declare function statLocalResetAllOnlineCharacterStats(p0: number): void;
export declare function statMigrateCheckAlreadyDone(): boolean;
export declare function statMigrateCheckGetIsPlatformAvailable(p0: number): number;
export declare function statMigrateCheckGetPlatformStatus(p0: number, p1: number): [number, number];
export declare function statMigrateCheckStart(): boolean;
export declare function statMigrateClearForRestart(): void;
export declare function statMigrateSavegameGetStatus(): number;
/**
 * platformName must be one of the following: ps3, xbox360, ps4, xboxone
 * @param platformName
 */
export declare function statMigrateSavegameStart(platformName: string): boolean;
export declare function statNetworkIncrementOnSuicide(p0: number, p1: number): void;
/**
 * p0 seems to range from 0 to 7
 * @param p0
 */
export declare function statResetAllOnlineCharacterStats(p0: number): void;
/**
 * This function is hard-coded to always return 1.
 */
export declare function statRollbackSaveMigration(): boolean;
export declare function statSave(p0: number, p1: boolean, p2: number, p3: boolean): boolean;
export declare function statSaveMigrationCancelPendingOperation(): boolean;
export declare function statSaveMigrationConsumeContent(contentId: number, srcPlatform: string, srcGamerHandle: string): boolean;
export declare function statSavePending(): boolean;
export declare function statSavePendingOrRequested(): boolean;
export declare function statSetBlockSaves(toggle: boolean): void;
/**
 * Example:
 * STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
 * @param statName
 * @param value
 * @param save
 */
export declare function statSetBool(statName: number, value: boolean, save: boolean): boolean;
export declare function statSetCheatIsActive(): void;
/**
 * p1 always true.
 * @param statName
 * @param p1
 */
export declare function statSetCurrentPosixTime(statName: number, p1: boolean): boolean;
/**
 * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
 *
 * The structure looks like this:
 *
 * int year
 * int month
 * int day
 * int hour
 * int minute
 * int second
 * int millisecond
 *
 * The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
 * @param statName
 * @param value
 * @param numFields
 * @param save
 */
export declare function statSetDate(statName: number, numFields: number, save: boolean): [boolean, number];
/**
 * Example:
 * STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
 * @param statName
 * @param value
 * @param save
 */
export declare function statSetFloat(statName: number, value: number, save: boolean): boolean;
/**
 * The following values have been found in the decompiled scripts:
 * "RC_ABI1"
 * "RC_ABI2"
 * "RC_BA1"
 * "RC_BA2"
 * "RC_BA3"
 * "RC_BA3A"
 * "RC_BA3C"
 * "RC_BA4"
 * "RC_DRE1"
 * "RC_EPS1"
 * "RC_EPS2"
 * "RC_EPS3"
 * "RC_EPS4"
 * "RC_EPS5"
 * "RC_EPS6"
 * "RC_EPS7"
 * "RC_EPS8"
 * "RC_EXT1"
 * "RC_EXT2"
 * "RC_EXT3"
 * "RC_EXT4"
 * "RC_FAN1"
 * "RC_FAN2"
 * "RC_FAN3"
 * "RC_HAO1"
 * "RC_HUN1"
 * "RC_HUN2"
 * "RC_JOS1"
 * "RC_JOS2"
 * "RC_JOS3"
 * "RC_JOS4"
 * "RC_MAU1"
 * "RC_MIN1"
 * "RC_MIN2"
 * "RC_MIN3"
 * "RC_MRS1"
 * "RC_MRS2"
 * "RC_NI1"
 * "RC_NI1A"
 * "RC_NI1B"
 * "RC_NI1C"
 * "RC_NI1D"
 * "RC_NI2"
 * "RC_NI3"
 * "RC_OME1"
 * "RC_OME2"
 * "RC_PA1"
 * "RC_PA2"
 * "RC_PA3"
 * "RC_PA3A"
 * "RC_PA3B"
 * "RC_PA4"
 * "RC_RAM1"
 * "RC_RAM2"
 * "RC_RAM3"
 * "RC_RAM4"
 * "RC_RAM5"
 * "RC_SAS1"
 * "RC_TON1"
 * "RC_TON2"
 * "RC_TON3"
 * "RC_TON4"
 * "RC_TON5"
 * @param statName
 * @param value
 * @param save
 */
export declare function statSetGxtLabel(statName: number, value: string, save: boolean): boolean;
/**
 * Example:
 * STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);
 * @param statName
 * @param value
 * @param save
 */
export declare function statSetInt(statName: number, value: number, save: boolean): boolean;
export declare function statSetLicensePlate(statName: number, str: string): boolean;
export declare function statSetMaskedInt(statName: number, p1: number, p2: number, p3: number, save: boolean): boolean;
export declare function statSetOpenSavetypeInJob(p0: number): void;
export declare function statSetPos(statName: number, x: number, y: number, z: number, save: boolean): boolean;
/**
 * Does not take effect immediately, unfortunately.
 *
 * profileSetting seems to only be 936, 937 and 938 in scripts
 * @param profileSetting
 * @param value
 */
export declare function statSetProfileSettingValue(profileSetting: number, value: number): void;
export declare function statSetString(statName: number, value: string, save: boolean): boolean;
export declare function statSetUserId(statName: number, value: string, save: boolean): boolean;
export declare function statSlotIsLoaded(statSlot: number): boolean;
/**
 * enum StatTrackingType
 * {
 * LongestWheelie = 1,
 * LongestStoppie = 2,
 * NoCrashes = 3,
 * HighestSpeed = 4,
 * _MostFlips = 5,
 * _LongestSpin = 6,
 * _HighestJumpReached = 7,
 * LongestJump = 8,
 * _NearMissesNoCrash = 9,
 * LongestFallSurvived = 10,
 * LowestParachute = 11,
 * ReverseDriving = 12,
 * LongestFreefall = 13,
 * VehiclesStolen = 14,
 * _SomeCFireEventCount = 15,
 * _Unk16 = 16,
 * _LowFlyingTime = 17,
 * LowFlying = 18,
 * _InvertedFlyingTime = 19,
 * InvertedFlying = 20,
 * _PlaneSpinCount = 21,
 * MeleeKills = 22, // Players
 * _LongestSniperKill = 23,
 * SniperSkills = 24, // Players
 * DrivebyKills = 25, // Players
 * HeadshotKills = 26, // Players
 * LongestBail = 27,
 * _TotalRammedByCar = 28,
 * NearMissesPrecise = 29,
 * _FreefallTime = 30,
 * Unk31 = 31,
 * }
 *
 * enum StatTrackingValueType
 * {
 * Total,
 * Max,
 * Min
 * }
 * @param statType
 * @param valueType
 */
export declare function statStartRecordStat(statType: number, valueType: number): boolean;
export declare function statStopRecordStat(): boolean;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export declare function statsCompletedCharacterCreation(p0: number): void;
/**
 * Example:
 *
 * This will stop the alarm at Fort Zancudo.
 *
 * AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 *
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) has to be true (1) to have any effect.
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 * @param toggle
 */
export declare function stopAlarm(alarmName: string, toggle: boolean): void;
export declare function stopAllAlarms(stop: boolean): void;
export declare function stopAllGarageActivity(): void;
/**
 * Looks like p1 may be a flag, still need to do some research, though.
 * @param entity
 * @param priority
 * @param secondary
 */
export declare function stopAnimPlayback(entity: number, priority: number, secondary: boolean): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animationName
 * @param blendDelta
 */
export declare function stopAnimTask(entity: number, animDictionary: string, animationName: string, blendDelta: number): void;
export declare function stopAnyPedModelBeingSuppressed(): void;
/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
export declare function stopAudioScene(scene: string): void;
/**
 * ??
 */
export declare function stopAudioScenes(): void;
export declare function stopBinkMovie(binkMovie: number): void;
/**
 * Stops CTaskBringVehicleToHalt
 * @param vehicle
 */
export declare function stopBringingVehicleToHalt(vehicle: number): void;
export declare function stopCamPointing(cam: number): void;
export declare function stopCamShaking(cam: number, p1: boolean): void;
export declare function stopCinematicCamShaking(p0: boolean): void;
/**
 * Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
 * @param p0
 */
export declare function stopCinematicShot(p0: number): void;
export declare function stopCodeGameplayHint(p0: boolean): void;
/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export declare function stopControlShake(control: number): void;
export declare function stopCurrentPlayingAmbientSpeech(ped: number): void;
export declare function stopCurrentPlayingSpeech(ped: number): void;
export declare function stopCutscene(p0: boolean): void;
export declare function stopCutsceneAudio(): void;
export declare function stopCutsceneCamShaking(p0: number): void;
export declare function stopCutsceneImmediately(): void;
export declare function stopEndUserBenchmark(): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
 * @param entity
 * @param animation
 * @param animGroup
 * @param p3
 */
export declare function stopEntityAnim(entity: number, animation: string, animGroup: string, p3: number): boolean;
export declare function stopEntityFire(entity: number): void;
export declare function stopFireInRange(x: number, y: number, z: number, radius: number): void;
export declare function stopGameplayCamShaking(p0: boolean): void;
export declare function stopGameplayHint(p0: boolean): void;
/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export declare function stopGameplayHintBeingCancelledThisUpdate(p0: boolean): void;
/**
 * p1 is always 0 in the native scripts
 * @param ptfxHandle
 * @param p1
 */
export declare function stopParticleFxLooped(ptfxHandle: number, p1: boolean): void;
export declare function stopPedRingtone(ped: number): void;
export declare function stopPedSpeaking(ped: number, shaking: boolean): void;
export declare function stopPedSpeakingSynced(ped: number, p1: boolean): void;
export declare function stopPedWeaponFiringWhenDropped(ped: number): void;
export declare function stopPlaybackRecordedVehicle(vehicle: number): void;
export declare function stopPlayerSwitch(): void;
/**
 * Disables the player's teleportation
 */
export declare function stopPlayerTeleport(): void;
/**
 * This native makes the gameplay camera zoom into first person/third person with a special effect.
 * @param render
 * @param p1
 * @param p2
 * @param p3
 */
export declare function stopRenderingScriptCamsUsingCatchUp(render: boolean, p1: number, p2: number, p3: number): void;
/**
 * Stops recording and saves the recorded clip.
 */
export declare function stopReplayRecording(): void;
export declare function stopRopeUnwindingFront(ropeId: number): void;
export declare function stopRopeWinding(ropeId: number): void;
export declare function stopSaveArray(): void;
export declare function stopSaveData(): void;
export declare function stopSaveStruct(): void;
/**
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 * @param p0
 */
export declare function stopScriptGlobalShaking(p0: boolean): void;
export declare function stopScriptedConversation(p0: boolean): number;
/**
 * STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?
 */
export declare function stopSmokeGrenadeExplosionSounds(): void;
export declare function stopSound(soundId: number): void;
export declare function stopStream(): void;
export declare function stopSynchronizedAudioEvent(sceneID: number): boolean;
/**
 * p1 sync task id?
 * @param entity
 * @param p1
 * @param p2
 */
export declare function stopSynchronizedEntityAnim(entity: number, p1: number, p2: boolean): boolean;
export declare function stopSynchronizedMapEntityAnim(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
/**
 * Always returns zero.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export declare function streamvolCreateFrustum(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
/**
 * Always returns zero.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export declare function streamvolCreateLine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
/**
 * Always returns zero.
 * @param x
 * @param y
 * @param z
 * @param rad
 * @param p4
 * @param p5
 */
export declare function streamvolCreateSphere(x: number, y: number, z: number, rad: number, p4: number, p5: number): number;
export declare function streamvolDelete(unused: number): void;
export declare function streamvolHasLoaded(unused: number): boolean;
export declare function streamvolIsValid(unused: number): boolean;
/**
 * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
 *
 * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
 * @param string
 * @param outInteger
 */
export declare function stringToInt(string: string, outInteger: number): [boolean, number];
export declare function suppressAgitationEventsNextFrame(): void;
export declare function suppressAmbientPedAggressiveCleanupThisFrame(): void;
/**
 * crimeType: see REPORT_CRIME
 * @param player
 * @param crimeType
 */
export declare function suppressCrimeThisFrame(player: number, crimeType: number): void;
export declare function suppressFrontendRenderingThisFrame(): void;
export declare function suppressHdMapStreamingThisFrame(): void;
/**
 * This has been found in use in the decompiled files.
 * @param player
 */
export declare function suppressLosingWantedLevelIfHiddenThisFrame(player: number): void;
export declare function suppressNeonsOnVehicle(vehicle: number, toggle: boolean): void;
/**
 * enum ePickupRewardType
 * {
 * PICKUP_REWARD_TYPE_AMMO = (1 << 0),
 * PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
 * PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
 * PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
 * PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
 * PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
 * PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
 * PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
 * PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
 * PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
 * PICKUP_REWARD_TYPE_STAT = (1 << 8),
 * PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
 * PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
 * PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
 * };
 * @param rewardType
 * @param suppress
 */
export declare function suppressPickupRewardType(rewardType: number, suppress: boolean): void;
export declare function suppressPickupSoundForPickup(p0: number, p1: number): void;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 */
export declare function suppressShockingEventTypeNextFrame(eventType: number): void;
export declare function suppressShockingEventsNextFrame(): void;
export declare function suppressWitnessesCallingPoliceThisFrame(player: number): void;
export declare function supressRandomEventThisFrame(eventType: number, suppress: boolean): void;
/**
 * Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
 * @param vehicle
 * @param toggle
 */
export declare function swingBoatBoomFreely(vehicle: number, toggle: boolean): void;
/**
 * Sets the boat boom position for the `TR3` trailer.
 * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
 * To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
 * @param vehicle
 * @param ratio
 */
export declare function swingBoatBoomToRatio(vehicle: number, ratio: number): void;
/**
 * Same as INIT_PC_SCRIPTED_CONTROLS
 * @param schemeName
 */
export declare function switchPcScriptedControls(schemeName: string): boolean;
/**
 * doesn't act normally when used on mount chilliad
 * Flags is a bitflag:
 * 2^n - Enabled Functionality:
 * 0 - Skip camera rotate up
 * 3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
 * 6 - Invert Switch Direction (false = out, true = in)
 * 8 - Hang above ped
 *
 * switchType: 0 - 3
 * 0: 1 step towards ped
 * 1: 3 steps out from ped
 * 2: 1 step out from ped
 * 3: 1 step towards ped
 * @param ped
 * @param flags
 * @param switchType
 */
export declare function switchToMultiFirstpart(ped: number, flags: number, switchType: number): void;
export declare function switchToMultiSecondpart(ped: number): void;
/**
 * Toggles whether ambient trains can spawn on the specified track or not
 *
 * `trackId` is the internal id of the train track to switch.
 * `state` is whether ambient trains can spawn or not
 *
 * trackIds
 * 0 (`trains1.dat`) Main track around SA
 * 1 (`trains2.dat`) Davis Quartz Quarry branch
 * 2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
 * 3 (`trains4.dat`) Metro track circuit
 * 4 (`trains5.dat`) Branch in Mirror Park Railyard
 * 5 (`trains6.dat`) Branch in Mirror Park Railyard
 * 6 (`trains7.dat`) LS branch to Mirror Park Railyard
 * 7 (`trains8.dat`) Overground part of metro track along Forum Dr.
 * 8 (`trains9.dat`) Branch to Mirror Park Railyard
 * 9 (`trains10.dat`) Yankton train
 * 10 (`trains11.dat`) Part of metro track near mission row
 * 11 (`trains12.dat`) Yankton prologue mission train
 * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
 * @param trackId
 * @param state
 */
export declare function switchTrainTrack(trackId: number, state: boolean): void;
/**
 * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
 *
 * To enable the keys again, use `0x14621BB1DF14E2B2`.
 */
export declare function takeControlOfFrontend(): void;
export declare function takeOwnershipOfSynchronizedScene(scene: number): void;
export declare function tan(p0: number): number;
/**
 * Makes the specified ped achieve the specified heading.
 *
 * pedHandle: The handle of the ped to assign the task to.
 * heading: The desired heading.
 * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
 * @param ped
 * @param heading
 * @param timeout
 */
export declare function taskAchieveHeading(ped: number, heading: number, timeout: number): void;
export declare function taskAgitatedActionConfrontResponse(ped: number, ped2: number): void;
export declare function taskAimGunAtCoord(ped: number, x: number, y: number, z: number, time: number, instantBlendToAim: boolean, playAnimIntro: boolean): void;
/**
 * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * @param ped
 * @param entity
 * @param duration
 * @param instantBlendToAim
 */
export declare function taskAimGunAtEntity(ped: number, entity: number, duration: number, instantBlendToAim: boolean): void;
export declare function taskAimGunScripted(ped: number, scriptTask: number, disableBlockingClip: boolean, instantBlendToAim: boolean): void;
export declare function taskAimGunScriptedWithTarget(ped: number, target: number, x: number, y: number, z: number, gunTaskType: number, disableBlockingClip: boolean, forceAim: boolean): void;
/**
 * Example from "me_amanda1.ysc.c4":
 * TASK::TASK_ARREST_PED(l_19F  -- [[ This is a Ped ]]  , PLAYER::PLAYER_PED_ID());
 *
 * Example from "armenian1.ysc.c4":
 * if (!PED::IS_PED_INJURED(l_B18[0 -- [[1]] ])) {
 * TASK::TASK_ARREST_PED(l_B18[0 -- [[1]] ], PLAYER::PLAYER_PED_ID());
 * }
 *
 * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
 *
 *
 * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
 * @param ped
 * @param target
 */
export declare function taskArrestPed(ped: number, target: number): void;
/**
 * You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
 *
 * Working example
 * float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
 * TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
 *
 * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
 * @param pedDriver
 * @param vehicle
 * @param targetVehicle
 * @param targetPed
 * @param x
 * @param y
 * @param z
 * @param mission
 * @param maxSpeed
 * @param drivingStyle
 * @param targetReached
 * @param boatFlags
 */
export declare function taskBoatMission(pedDriver: number, vehicle: number, targetVehicle: number, targetPed: number, x: number, y: number, z: number, mission: number, maxSpeed: number, drivingStyle: number, targetReached: number, boatFlags: number): void;
/**
 * p2 tend to be 16, 17 or 1
 * p3 to p7 tend to be 0.0
 * @param ped
 * @param target
 * @param flags
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param headingDegs
 * @param idleTime
 */
export declare function taskChatToPed(ped: number, target: number, flags: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, headingDegs: number, idleTime: number): void;
export declare function taskClearDefensiveArea(ped: number): void;
export declare function taskClearLookAt(ped: number): void;
/**
 * Climbs or vaults the nearest thing.
 * usePlayerLaunchForce is unused.
 * @param ped
 * @param usePlayerLaunchForce
 */
export declare function taskClimb(ped: number, usePlayerLaunchForce: boolean): void;
export declare function taskClimbLadder(ped: number, fast: boolean): void;
/**
 * Despite its name, it only attacks ONE hated target. The one closest hated target.
 *
 * p2 seems to be always 0
 * @param ped
 * @param radius
 * @param combatFlags
 */
export declare function taskCombatHatedTargetsAroundPed(ped: number, radius: number, combatFlags: number): void;
export declare function taskCombatHatedTargetsAroundPedTimed(ped: number, radius: number, time: number, combatFlags: number): void;
/**
 * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param combatFlags
 */
export declare function taskCombatHatedTargetsInArea(ped: number, x: number, y: number, z: number, radius: number, combatFlags: number): void;
/**
 * Makes the specified ped attack the target ped.
 * p2 should be 0
 * p3 should be 16
 * @param ped
 * @param targetPed
 * @param combatFlags
 * @param threatResponseFlags
 */
export declare function taskCombatPed(ped: number, targetPed: number, combatFlags: number, threatResponseFlags: number): void;
export declare function taskCombatPedTimed(ped: number, target: number, time: number, flags: number): void;
export declare function taskCower(ped: number, duration: number): void;
/**
 * Example:
 *
 * TASK::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
 *
 *
 *
 *
 * Needs working example. Doesn't seem to do anything.
 *
 * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
 * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
 * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
 * @param driverPed
 * @param targetPed
 * @param targetVehicle
 * @param targetX
 * @param targetY
 * @param targetZ
 * @param distanceToShoot
 * @param pedAccuracy
 * @param pushUnderneathDrivingTaskIfDriving
 * @param firingPattern
 */
export declare function taskDriveBy(driverPed: number, targetPed: number, targetVehicle: number, targetX: number, targetY: number, targetZ: number, distanceToShoot: number, pedAccuracy: number, pushUnderneathDrivingTaskIfDriving: boolean, firingPattern: number): void;
/**
 * speed 1.0 = walk, 2.0 = run
 * p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
 * p6 is always 0
 *
 * Usage of seat
 * -1 = driver
 * 0 = passenger
 * 1 = left back seat
 * 2 = right back seat
 * 3 = outside left
 * 4 = outside right
 * @param ped
 * @param vehicle
 * @param timeout
 * @param seat
 * @param speed
 * @param flag
 * @param overrideEntryClipsetName
 */
export declare function taskEnterVehicle(ped: number, vehicle: number, timeout: number, seat: number, speed: number, flag: number, overrideEntryClipsetName: string): void;
export declare function taskEveryoneLeaveVehicle(vehicle: number): void;
/**
 * p1 is 1, 2, or 3 in scripts
 * @param ped
 * @param exitType
 * @param x
 * @param y
 * @param z
 */
export declare function taskExitCover(ped: number, exitType: number, x: number, y: number, z: number): void;
/**
 * MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
 *
 * A maximum of 8 points can be added.
 * @param x
 * @param y
 * @param z
 */
export declare function taskExtendRoute(x: number, y: number, z: number): void;
/**
 * MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
 */
export declare function taskFlushRoute(): void;
/**
 * If no timeout, set timeout to -1.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param moveBlendRatio
 * @param time
 * @param targetRadius
 * @param flags
 * @param targetHeading
 */
export declare function taskFollowNavMeshToCoord(ped: number, x: number, y: number, z: number, moveBlendRatio: number, time: number, targetRadius: number, flags: number, targetHeading: number): void;
export declare function taskFollowNavMeshToCoordAdvanced(ped: number, x: number, y: number, z: number, moveBlendRatio: number, time: number, targetRadius: number, flags: number, slideToCoordHeading: number, maxSlopeNavigable: number, clampMaxSearchDistance: number, targetHeading: number): void;
/**
 * MulleKD19: Makes the ped go on the created point route.
 *
 * ped: The ped to give the task to.
 * speed: The speed to move at in m/s.
 * int: Unknown. Can be 0, 1, 2 or 3.
 *
 * Example:
 * TASK_FLUSH_ROUTE();
 * TASK_EXTEND_ROUTE(0f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 10f, 70f);
 * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
 * @param ped
 * @param speed
 * @param mode
 */
export declare function taskFollowPointRoute(ped: number, speed: number, mode: number): void;
/**
 * p6 always -1
 * p7 always 10.0
 * p8 always 1
 * @param ped
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param movementSpeed
 * @param timeout
 * @param stoppingRange
 * @param persistFollowing
 */
export declare function taskFollowToOffsetOfEntity(ped: number, entity: number, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void;
export declare function taskFollowWaypointRecording(ped: number, name: string, p2: number, p3: number, p4: number): void;
/**
 * p2 always false
 *
 * [30/03/2017] ins1de :
 *
 * See FORCE_PED_MOTION_STATE
 * @param ped
 * @param state
 * @param forceRestart
 */
export declare function taskForceMotionState(ped: number, state: number, forceRestart: boolean): void;
export declare function taskGetOffBoat(ped: number, boat: number): void;
export declare function taskGoStraightToCoord(ped: number, x: number, y: number, z: number, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void;
export declare function taskGoStraightToCoordRelativeToEntity(ped: number, entity: number, x: number, y: number, z: number, moveBlendRatio: number, time: number): void;
/**
 * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
 *
 * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
 *
 * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
 *
 * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
 *
 * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
 *
 * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
 *
 * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
 *
 * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
 *
 * Example:
 *
 * enum AimFlag
 * {
 * AimAtFocusLocation,
 * AimAtGoToLocation
 * };
 *
 * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
 *
 * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
 *
 * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
 *
 * // 1st example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f  -- [[run]] , true  -- [[shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtGoToLocation, -957453492  -- [[FullAuto pattern]] );
 *
 * // 2nd example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f  -- [[walk]] , false  -- [[don't shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtFocusLocation, -957453492  -- [[FullAuto pattern]] );
 *
 *
 * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
 *
 * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
 * @param pedHandle
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param focusLocationX
 * @param focusLocationY
 * @param focusLocationZ
 * @param speed
 * @param shootAtEnemies
 * @param distanceToStopAt
 * @param noRoadsDistance
 * @param useNavMesh
 * @param navFlags
 * @param taskFlags
 * @param firingPattern
 */
export declare function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, focusLocationX: number, focusLocationY: number, focusLocationZ: number, speed: number, shootAtEnemies: boolean, distanceToStopAt: number, noRoadsDistance: number, useNavMesh: boolean, navFlags: number, taskFlags: number, firingPattern: number): void;
/**
 * example from fm_mission_controller
 *
 * TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
 *
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param moveBlendRatio
 * @param vehicle
 * @param useLongRangeVehiclePathing
 * @param drivingFlags
 * @param maxRangeToShootTargets
 */
export declare function taskGoToCoordAnyMeans(ped: number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number): void;
export declare function taskGoToCoordAnyMeansExtraParams(ped: number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, warpTimerMS: number): void;
export declare function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, cruiseSpeed: number, targetArriveDist: number): void;
/**
 * movement_speed: mostly 2f, but also 1/1.2f, etc.
 * p8: always false
 * p9: 2f
 * p10: 0.5f
 * p11: true
 * p12: 0 / 512 / 513, etc.
 * p13: 0
 * firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param aimAtX
 * @param aimAtY
 * @param aimAtZ
 * @param moveBlendRatio
 * @param shoot
 * @param targetRadius
 * @param slowDistance
 * @param useNavMesh
 * @param navFlags
 * @param instantBlendToAim
 * @param firingPattern
 */
export declare function taskGoToCoordWhileAimingAtCoord(ped: number, x: number, y: number, z: number, aimAtX: number, aimAtY: number, aimAtZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number): void;
export declare function taskGoToCoordWhileAimingAtEntity(ped: number, x: number, y: number, z: number, aimAtID: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number, time: number): void;
/**
 * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
 *
 * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
 *
 * Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
 *
 * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
 *
 * enum EGOTO_ENTITY_SCRIPT_FLAGS
 * {
 * EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
 * };
 * @param entity
 * @param target
 * @param duration
 * @param distance
 * @param moveBlendRatio
 * @param slowDownDistance
 * @param flags
 */
export declare function taskGoToEntity(entity: number, target: number, duration: number, distance: number, moveBlendRatio: number, slowDownDistance: number, flags: number): void;
export declare function taskGoToEntityWhileAimingAtCoord(ped: number, entity: number, aimX: number, aimY: number, aimZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number): void;
/**
 * shootatEntity:
 * If true, peds will shoot at Entity till it is dead.
 * If false, peds will just walk till they reach the entity and will cease shooting.
 * @param ped
 * @param entityToWalkTo
 * @param entityToAimAt
 * @param speed
 * @param shootatEntity
 * @param targetRadius
 * @param slowDistance
 * @param useNavMesh
 * @param instantBlendToAim
 * @param firingPattern
 */
export declare function taskGoToEntityWhileAimingAtEntity(ped: number, entityToWalkTo: number, entityToAimAt: number, speed: number, shootatEntity: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number): void;
/**
 * eg
 *
 * TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
 *
 * ped = Ped you want to perform this task.
 * target = the Entity they should aim at.
 * distanceToStopAt = distance from the target, where the ped should stop to aim.
 * StartAimingDist = distance where the ped should start to aim.
 * @param ped
 * @param target
 * @param distanceToStopAt
 * @param StartAimingDist
 */
export declare function taskGotoEntityAiming(ped: number, target: number, distanceToStopAt: number, StartAimingDist: number): void;
/**
 * enum ESEEK_ENTITY_OFFSET_FLAGS
 * {
 * ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
 * ESEEK_KEEP_TO_PAVEMENTS = 0x02
 * };
 * @param ped
 * @param entity
 * @param time
 * @param seekRadius
 * @param seekAngleDeg
 * @param moveBlendRatio
 * @param gotoEntityOffsetFlags
 */
export declare function taskGotoEntityOffset(ped: number, entity: number, time: number, seekRadius: number, seekAngleDeg: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void;
export declare function taskGotoEntityOffsetXy(ped: number, entity: number, duration: number, targetRadius: number, offsetX: number, offsetY: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void;
export declare function taskGuardAssignedDefensiveArea(ped: number, x: number, y: number, z: number, heading: number, maxPatrolProximity: number, timer: number): void;
/**
 * From re_prisonvanbreak:
 *
 * TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
 * @param ped
 * @param maxPatrolProximity
 * @param defensiveAreaRadius
 * @param setDefensiveArea
 */
export declare function taskGuardCurrentPosition(ped: number, maxPatrolProximity: number, defensiveAreaRadius: number, setDefensiveArea: boolean): void;
export declare function taskGuardSphereDefensiveArea(ped: number, defendPositionX: number, defendPositionY: number, defendPositionZ: number, heading: number, maxPatrolProximity: number, time: number, x: number, y: number, z: number, defensiveAreaRadius: number): void;
/**
 * In the scripts, p3 was always -1.
 *
 * p3 seems to be duration or timeout of turn animation.
 * Also facingPed can be 0 or -1 so ped will just raise hands up.
 * @param ped
 * @param duration
 * @param facingPed
 * @param timeToFacePed
 * @param flags
 */
export declare function taskHandsUp(ped: number, duration: number, facingPed: number, timeToFacePed: number, flags: number): void;
/**
 * Ped pilot should be in a heli.
 * EntityToFollow can be a vehicle or Ped.
 *
 * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
 *
 *
 * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
 * @param pilot
 * @param entityToFollow
 * @param x
 * @param y
 * @param z
 */
export declare function taskHeliChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void;
export declare function taskHeliEscortHeli(pilot: number, heli1: number, heli2: number, offsetX: number, offsetY: number, offsetZ: number): void;
/**
 * Must have targetVehicle, targetPed, OR destination X/Y/Z set
 * Will follow targeted vehicle/ped, or fly to destination
 * Set whichever is not being used to 0
 *
 *
 * Mission mode type:
 * - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
 * - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
 * - 8: Makes the heli flee from the ped/vehicle/coordinate
 * - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
 * - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
 * - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
 * - 20: Makes the heli land when near target ped. It won't resume chasing.
 * - 21: Emulates a helicopter crash
 * - 23: makes the heli circle erratically around ped
 *
 *
 * Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
 * You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
 *
 * If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT.
 *
 * Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
 *
 * Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
 *
 * Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
 * 1: Forces heading to face E
 * 2: Unknown
 * 4: Tight circles around coordinate destination
 * 8: Unknown
 * 16: Circles around coordinate destination facing towards destination
 * 32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
 * 64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
 * 128: Unknown
 * 256: Unknown
 * 512: Unknown
 * 1024: Unknown
 * 2048: Reverses direction of circling (mission type 9) to clockwise
 * 4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
 * 8192: Unknown
 *
 * Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
 *
 * Notes updated by PNWParksFan, May 2021
 *
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param maxSpeed
 * @param radius
 * @param targetHeading
 * @param maxHeight
 * @param minHeight
 * @param slowDownDistance
 * @param behaviorFlags
 */
export declare function taskHeliMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, maxSpeed: number, radius: number, targetHeading: number, maxHeight: number, minHeight: number, slowDownDistance: number, behaviorFlags: number): void;
/**
 * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
 *
 * v350: Ped ped, bool unused
 * v678: Ped ped, bool unused, bool flag1, bool flag2
 *
 * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
 * @param ped
 * @param usePlayerLaunchForce
 * @param doSuperJump
 * @param useFullSuperJumpForce
 */
export declare function taskJump(ped: number, usePlayerLaunchForce: boolean, doSuperJump: boolean, useFullSuperJumpForce: boolean): void;
/**
 * Flags are the same flags used in TASK_LEAVE_VEHICLE
 * @param ped
 * @param delayTime
 * @param flags
 */
export declare function taskLeaveAnyVehicle(ped: number, delayTime: number, flags: number): void;
/**
 * Flags from decompiled scripts:
 * 0 = normal exit and closes door.
 * 1 = normal exit and closes door.
 * 16 = teleports outside, door kept closed.
 * 64 = normal exit and closes door, maybe a bit slower animation than 0.
 * 256 = normal exit but does not close the door.
 * 4160 = ped is throwing himself out, even when the vehicle is still.
 * 262144 = ped moves to passenger seat first, then exits normally
 *
 * Others to be tried out: 320, 512, 131072.
 * @param ped
 * @param vehicle
 * @param flags
 */
export declare function taskLeaveVehicle(ped: number, vehicle: number, flags: number): void;
/**
 * enum eScriptLookatFlags
 * {
 * SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
 * SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
 * SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
 * SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
 * SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
 * SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
 * SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
 * SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
 * SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
 * SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
 * SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
 * SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
 * SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
 * SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes
 * SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
 * SLF_FROM_SCRIPT                = 32768, // internal use only
 * SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
 * };
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param flags
 * @param priority
 */
export declare function taskLookAtCoord(entity: number, x: number, y: number, z: number, duration: number, flags: number, priority: number): void;
/**
 * For flags, please refer to TASK_LOOK_AT_COORD.
 * @param ped
 * @param lookAt
 * @param duration
 * @param flags
 * @param priority
 */
export declare function taskLookAtEntity(ped: number, lookAt: number, duration: number, flags: number, priority: number): void;
/**
 * Example:
 * TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
 * @param ped
 * @param network
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotOrder
 * @param blendDuration
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
export declare function taskMoveNetworkAdvancedByName(ped: number, network: string, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): void;
export declare function taskMoveNetworkAdvancedByNameWithInitParams(ped: number, network: string, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, dictionary: string, flags: number): number;
/**
 * Example:
 * TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
 * @param ped
 * @param task
 * @param multiplier
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
export declare function taskMoveNetworkByName(ped: number, task: string, multiplier: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): void;
/**
 * Used only once in the scripts (am_mp_nightclub)
 * @param ped
 * @param network
 * @param initialParameters
 * @param blendDuration
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
export declare function taskMoveNetworkByNameWithInitParams(ped: number, network: string, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): number;
/**
 * The given ped will try to open the nearest door to 'seat'.
 * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
 * @param ped
 * @param vehicle
 * @param timeOut
 * @param seat
 * @param speed
 */
export declare function taskOpenVehicleDoor(ped: number, vehicle: number, timeOut: number, seat: number, speed: number): void;
/**
 * Second parameter is unused.
 *
 * second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
 * @param ped
 * @param giveParachuteItem
 * @param instant
 */
export declare function taskParachute(ped: number, giveParachuteItem: boolean, instant: boolean): void;
/**
 * makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export declare function taskParachuteToTarget(ped: number, x: number, y: number, z: number): void;
/**
 * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
 *
 * "miss_Tower_01" (this went from 01 - 10)
 * "miss_Ass0" (0, 4, 6, 3)
 * "MISS_PATROL_8"
 *
 * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
 *
 *
 * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
 * From the scripts
 *
 * TASK::OPEN_PATROL_ROUTE("miss_Ass0");
 * TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0 -- [[3]] ], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1 -- [[3]] ], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2 -- [[3]] ], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_LINK(0, 1);
 * TASK::ADD_PATROL_ROUTE_LINK(1, 2);
 * TASK::ADD_PATROL_ROUTE_LINK(2, 0);
 * TASK::CLOSE_PATROL_ROUTE();
 * TASK::CREATE_PATROL_ROUTE();
 *
 *
 * @param ped
 * @param patrolRouteName
 * @param alertState
 * @param canChatToPeds
 * @param useHeadLookAt
 */
export declare function taskPatrol(ped: number, patrolRouteName: string, alertState: number, canChatToPeds: boolean, useHeadLookAt: boolean): void;
/**
 * Stand still (?)
 * @param ped
 * @param ms
 */
export declare function taskPause(ped: number, ms: number): void;
export declare function taskPedSlideToCoord(ped: number, x: number, y: number, z: number, heading: number, speed: number): void;
export declare function taskPedSlideToCoordHdgRate(ped: number, x: number, y: number, z: number, heading: number, speed: number, headingChangeRate: number): void;
export declare function taskPerformSequence(ped: number, taskSequenceId: number): void;
export declare function taskPerformSequenceFromProgress(ped: number, taskIndex: number, progress1: number, progress2: number): void;
export declare function taskPerformSequenceLocally(ped: number, taskSequenceId: number): void;
export declare function taskPlaneChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void;
export declare function taskPlaneGotoPreciseVtol(ped: number, vehicle: number, x: number, y: number, z: number, flightHeight: number, minHeightAboveTerrain: number, useDesiredOrientation: boolean, desiredOrientation: number, autopilot: boolean): void;
export declare function taskPlaneLand(pilot: number, plane: number, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void;
/**
 * EXAMPLE USAGE:
 *
 * Fly around target (Precautiously, keeps high altitude):
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
 *
 * Fly around target (Dangerously, keeps VERY low altitude):
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
 *
 * Fly directly into target:
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
 *
 * EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
 *
 * 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
 * Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
 *
 * VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
 *
 * 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
 * 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
 * 300+ =  Vehicle behaves entirely like a normal gameplay plane.
 *
 * 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
 *
 * Scenario: Destination is an Entity on ground level, wide open field
 * -5000 = Pilot kamikazes directly into Entity
 * -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
 * -200 = Pilot flies lower than average around Entity.
 * 0 = Pilot flies around Entity, normal altitude
 * 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
 *
 * -- Valid mission types found in the exe: --
 *
 * 0 = None
 * 1 = Unk
 * 2 = CTaskVehicleRam
 * 3 = CTaskVehicleBlock
 * 4 = CTaskVehicleGoToPlane
 * 5 = CTaskVehicleStop
 * 6 = CTaskVehicleAttack
 * 7 = CTaskVehicleFollow
 * 8 = CTaskVehicleFleeAirborne
 * 9= CTaskVehicleCircle
 * 10 = CTaskVehicleEscort
 * 15 = CTaskVehicleFollowRecording
 * 16 = CTaskVehiclePoliceBehaviour
 * 17 = CTaskVehicleCrash
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param angularDrag
 * @param targetReached
 * @param targetHeading
 * @param maxZ
 * @param minZ
 * @param precise
 */
export declare function taskPlaneMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, angularDrag: number, targetReached: number, targetHeading: number, maxZ: number, minZ: number, precise: boolean): void;
export declare function taskPlaneTaxi(pilot: number, aircraft: number, x: number, y: number, z: number, cruiseSpeed: number, targetReached: number): void;
export declare function taskPlantBomb(ped: number, x: number, y: number, z: number, heading: number): void;
/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 *
 * float speed > normal speed is 8.0f
 * ----------------------
 *
 * float speedMultiplier > multiply the playback speed
 * ----------------------
 *
 * int duration: time in millisecond
 * ----------------------
 * -1 _ _ _ _ _ _ _> Default (see flag)
 * 0 _ _ _ _ _ _ _ > Not play at all
 * Small value _ _ > Slow down animation speed
 * Other _ _ _ _ _ > freeze player control until specific time (ms) has
 * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
 * _ _ _ _ _ _ _ _ _ controllable.)
 *
 * int flag:
 * ----------------------
 * enum eAnimationFlags
 * {
 * ANIM_FLAG_NORMAL = 0,
 * ANIM_FLAG_REPEAT = 1,
 * ANIM_FLAG_STOP_LAST_FRAME = 2,
 * ANIM_FLAG_UPPERBODY = 16,
 * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
 * ANIM_FLAG_CANCELABLE = 120,
 * };
 * Odd number : loop infinitely
 * Even number : Freeze at last frame
 * Multiple of 4: Freeze at last frame but controllable
 *
 * 01 to 15 > Full body
 * 10 to 31 > Upper body
 * 32 to 47 > Full body > Controllable
 * 48 to 63 > Upper body > Controllable
 * ...
 * 001 to 255 > Normal
 * 256 to 511 > Garbled
 * ...
 *
 * playbackRate:
 *
 * values are between 0.0 and 1.0
 *
 *
 * lockX:
 *
 * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
 * > 1 for mini@sprunk
 *
 *
 * lockY:
 *
 * 0 in most cases
 * 1 for missfam5_yoga, missfra1mcs_2_crew_react
 *
 *
 * lockZ:
 *
 * 0 for single player
 * Can be 1 but only for MP
 * @param ped
 * @param animDictionary
 * @param animationName
 * @param blendInSpeed
 * @param blendOutSpeed
 * @param duration
 * @param flag
 * @param playbackRate
 * @param lockX
 * @param lockY
 * @param lockZ
 */
export declare function taskPlayAnim(ped: number, animDictionary: string, animationName: string, blendInSpeed: number, blendOutSpeed: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void;
/**
 * It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param animEnterSpeed
 * @param animExitSpeed
 * @param duration
 * @param flag
 * @param animTime
 * @param rotOrder
 * @param ikFlags
 */
export declare function taskPlayAnimAdvanced(ped: number, animDict: string, animName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, animEnterSpeed: number, animExitSpeed: number, duration: number, flag: number, animTime: number, rotOrder: number, ikFlags: number): void;
/**
 * Example from the scripts:
 * TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
 *
 * =========================================================
 * ^^ No offense, but Idk how that would really help anyone.
 *
 * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
 *
 * Known boneMaskTypes'
 * "BONEMASK_HEADONLY"
 * "BONEMASK_HEAD_NECK_AND_ARMS"
 * "BONEMASK_HEAD_NECK_AND_L_ARM"
 * "BONEMASK_HEAD_NECK_AND_R_ARM"
 *
 * p4 known args - 0.0f, 0.5f, 0.25f
 * p5 known args - 0.0f, 0.25f
 * p6 known args - 1 if a global if check is passed.
 * p7 known args - 1 if a global if check is passed.
 *
 * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
 * =========================================================
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animation
 * @param boneMaskType
 * @param blendInDuration
 * @param blendOutDuration
 * @param isLooping
 * @param holdLastFrame
 */
export declare function taskPlayPhoneGestureAnimation(ped: number, animDict: string, animation: string, boneMaskType: string, blendInDuration: number, blendOutDuration: number, isLooping: boolean, holdLastFrame: boolean): void;
export declare function taskPutPedDirectlyIntoCover(ped: number, x: number, y: number, z: number, time: number, allowPeekingAndFiring: boolean, blendInDuration: number, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number, doEntry: boolean): void;
/**
 * from armenian3.c4
 *
 * TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
 *
 * @param ped
 * @param meleeTarget
 * @param blendInDuration
 * @param timeInMelee
 * @param strafePhaseSync
 * @param aiCombatFlags
 */
export declare function taskPutPedDirectlyIntoMelee(ped: number, meleeTarget: number, blendInDuration: number, timeInMelee: number, strafePhaseSync: number, aiCombatFlags: number): void;
/**
 * Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
 * p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param minZ
 * @param ropeHandle
 * @param clipSet
 * @param p10
 */
export declare function taskRappelDownWallUsingClipsetOverride(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, minZ: number, ropeHandle: number, clipSet: string, p10: number): void;
/**
 * minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
 *
 * Only appears twice in the scripts.
 *
 * TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
 * TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);
 * @param ped
 * @param minHeightAboveGround
 */
export declare function taskRappelFromHeli(ped: number, minHeightAboveGround: number): void;
export declare function taskReactAndFleePed(ped: number, fleeTarget: number): void;
/**
 * The 2nd param (drawWeapon) is not implemented.
 *
 * -----------------------------------------------------------------------
 *
 * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
 *
 * if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
 * TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
 * }
 * @param ped
 * @param drawWeapon
 */
export declare function taskReloadWeapon(ped: number, drawWeapon: boolean): void;
/**
 * From fm_mission_controller.c:
 * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
 * vVar28 = {0.094f, 0.02f, -0.005f};
 * vVar29 = {-92.24f, 63.64f, 150.24f};
 * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
 * set_entity_lod_dist(net_to_ent(uVar30), 500);
 * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
 * Var31.imm_4 = 1065353216;
 * Var31.imm_5 = 1065353216;
 * Var31.imm_9 = 1065353216;
 * Var31.imm_10 = 1065353216;
 * Var31.imm_14 = 1065353216;
 * Var31.imm_15 = 1065353216;
 * Var31.imm_17 = 1040187392;
 * Var31.imm_18 = 1040187392;
 * Var31.imm_19 = -1;
 * Var32.imm_4 = 1065353216;
 * Var32.imm_5 = 1065353216;
 * Var32.imm_9 = 1065353216;
 * Var32.imm_10 = 1065353216;
 * Var32.imm_14 = 1065353216;
 * Var32.imm_15 = 1065353216;
 * Var32.imm_17 = 1040187392;
 * Var32.imm_18 = 1040187392;
 * Var32.imm_19 = -1;
 * Var31 = 1;
 * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
 * Var31.imm_2 = "idle";
 * Var31.imm_20 = 1048633;
 * Var31.imm_4 = 0.5f;
 * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
 * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
 * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
 * remove_anim_dict("anim@heists@biolab@");
 * @param ped
 * @param priorityLowData
 * @param priorityMidData
 * @param priorityHighData
 * @param blendInDelta
 * @param blendOutDelta
 */
export declare function taskScriptedAnimation(ped: number, blendInDelta: number, blendOutDelta: number): [number, number, number];
export declare function taskSeekCoverFromPed(ped: number, target: number, duration: number, allowPeekingAndFiring: boolean): void;
export declare function taskSeekCoverFromPos(ped: number, x: number, y: number, z: number, duration: number, allowPeekingAndFiring: boolean): void;
/**
 * p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
 *
 * from michael2:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
 *
 *
 * appears to be shorter variation
 * from michael3:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param timeout
 * @param shortRoute
 */
export declare function taskSeekCoverToCoords(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, timeout: number, shortRoute: boolean): void;
/**
 * p5 is always -1
 * @param ped
 * @param coverpoint
 * @param x
 * @param y
 * @param z
 * @param time
 * @param allowPeekingAndFiring
 */
export declare function taskSeekCoverToCoverPoint(ped: number, coverpoint: number, x: number, y: number, z: number, time: number, allowPeekingAndFiring: boolean): void;
/**
 * I cant believe I have to define this, this is one of the best natives.
 *
 * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
 *
 * Since it is a task, every time the native is called the ped will stop for a moment.
 * @param ped
 * @param toggle
 */
export declare function taskSetBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void;
/**
 * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
 * @param ped
 * @param decisionMakerId
 */
export declare function taskSetDecisionMaker(ped: number, decisionMakerId: number): void;
export declare function taskSetSphereDefensiveArea(ped: number, x: number, y: number, z: number, radius: number): void;
export declare function taskShockingEventReact(ped: number, eventHandle: number): void;
/**
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param firingPattern
 */
export declare function taskShootAtCoord(ped: number, x: number, y: number, z: number, duration: number, firingPattern: number): void;
/**
 * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
 * Entity aimedentity;
 * Player player = PLAYER::PLAYER_ID();
 * PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
 *
 * //bg is an array of peds
 * TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
 *
 * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
 *
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * @param entity
 * @param target
 * @param duration
 * @param firingPattern
 */
export declare function taskShootAtEntity(entity: number, target: number, duration: number, firingPattern: number): void;
/**
 * Makes the specified ped shuffle to the next vehicle seat.
 * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
 * @param ped
 * @param vehicle
 * @param useAlternateShuffle
 */
export declare function taskShuffleToNextVehicleSeat(ped: number, vehicle: number, useAlternateShuffle: boolean): void;
export declare function taskSkyDive(ped: number, instant: boolean): void;
/**
 * Makes the specified ped flee the specified distance from the specified position.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param time
 * @param preferPavements
 * @param quitIfOutOfRange
 */
export declare function taskSmartFleeCoord(ped: number, x: number, y: number, z: number, distance: number, time: number, preferPavements: boolean, quitIfOutOfRange: boolean): void;
/**
 * Makes a ped run away from another ped (fleeTarget).
 *
 * distance = ped will flee this distance.
 * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
 * @param ped
 * @param fleeTarget
 * @param safeDistance
 * @param fleeTime
 * @param preferPavements
 * @param updateToNearestHatedPed
 */
export declare function taskSmartFleePed(ped: number, fleeTarget: number, safeDistance: number, fleeTime: number, preferPavements: boolean, updateToNearestHatedPed: boolean): void;
/**
 * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param scenarioName
 */
export declare function taskStandGuard(ped: number, x: number, y: number, z: number, heading: number, scenarioName: string): void;
/**
 * Makes the specified ped stand still for (time) milliseconds.
 * @param ped
 * @param time
 */
export declare function taskStandStill(ped: number, time: number): void;
/**
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 *
 * Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
 * ---------------
 * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
 *
 * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
 *
 * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
 *
 * I have no idea what the last 3 parameters are, but I'll try to find out.
 *
 * -going on the last 3 parameters, they appear to always be "0, 0, 1"
 *
 * p6 -1 also used in scrips
 *
 * p7 used for sitting scenarios
 *
 * p8 teleports ped to position
 * @param ped
 * @param scenarioName
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param duration
 * @param sittingScenario
 * @param teleport
 */
export declare function taskStartScenarioAtPosition(ped: number, scenarioName: string, x: number, y: number, z: number, heading: number, duration: number, sittingScenario: boolean, teleport: boolean): void;
/**
 * Plays a scenario on a Ped at their current location.
 *
 * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
 * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
 *
 * ----
 *
 * From "am_hold_up.ysc.c4" at line 339:
 *
 * TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
 *
 * I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
 * WORLD_HUMAN_SMOKING
 * WORLD_HUMAN_HANG_OUT_STREET
 * WORLD_HUMAN_STAND_MOBILE
 *
 * This makes sense, as these are what I commonly see when going by a liquor store.
 * -------------------------
 * List of scenarioNames: https://pastebin.com/6mrYTdQv
 * (^ Thank you so fucking much for this)
 *
 * Also these:
 * WORLD_FISH_FLEE
 * DRIVE
 * WORLD_HUMAN_HIKER
 * WORLD_VEHICLE_ATTRACTOR
 * WORLD_VEHICLE_BICYCLE_MOUNTAIN
 * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
 * WORLD_VEHICLE_BIKER
 * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
 * WORLD_VEHICLE_CONSTRUCTION_SOLO
 * WORLD_VEHICLE_DRIVE_PASSENGERS
 * WORLD_VEHICLE_DRIVE_SOLO
 * WORLD_VEHICLE_EMPTY
 * WORLD_VEHICLE_PARK_PARALLEL
 * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
 * WORLD_VEHICLE_POLICE_BIKE
 * WORLD_VEHICLE_POLICE_CAR
 * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
 * WORLD_VEHICLE_SALTON_DIRT_BIKE
 * WORLD_VEHICLE_TRUCK_LOGS
 *
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * @param ped
 * @param scenarioName
 * @param unkDelay
 * @param playEnterAnim
 */
export declare function taskStartScenarioInPlace(ped: number, scenarioName: string, unkDelay: number, playEnterAnim: boolean): void;
/**
 * Makes the ped run to take cover
 * @param ped
 */
export declare function taskStayInCover(ped: number): void;
/**
 * known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
 * @param killer
 * @param target
 * @param stealthKillActionResultHash
 * @param desiredMoveBlendRatio
 * @param stealthFlags
 */
export declare function taskStealthKill(killer: number, target: number, stealthKillActionResultHash: number, desiredMoveBlendRatio: number, stealthFlags: number): void;
export declare function taskStopPhoneGestureAnimation(ped: number, blendOutOverride: number): void;
/**
 * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
 *
 * p0 is always 0, p5 is always 1
 *
 * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
 *
 * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
 * @param ped
 * @param submarine
 * @param x
 * @param y
 * @param z
 * @param autopilot
 */
export declare function taskSubmarineGotoAndStop(ped: number, submarine: number, x: number, y: number, z: number, autopilot: boolean): void;
export declare function taskSwapWeapon(ped: number, drawWeapon: boolean): void;
/**
 * This function is called on peds in vehicles.
 *
 * anim: animation name
 * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
 * p5: no idea what it does but is usually -1
 * @param ped
 * @param animDict
 * @param lowAnimName
 * @param medAnimName
 * @param hiAnimName
 * @param runtime
 * @param targetEntity
 * @param turnRate
 * @param blendInDuration
 */
export declare function taskSweepAimEntity(ped: number, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: number, targetEntity: number, turnRate: number, blendInDuration: number): void;
export declare function taskSweepAimPosition(ped: number, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: number, x: number, y: number, z: number, turnRate: number, blendInDuration: number): void;
/**
 * TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
 *
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param scene
 * @param animDictionary
 * @param animationName
 * @param blendIn
 * @param blendOut
 * @param flags
 * @param ragdollBlockingFlags
 * @param moverBlendDelta
 * @param ikFlags
 */
export declare function taskSynchronizedScene(ped: number, scene: number, animDictionary: string, animationName: string, blendIn: number, blendOut: number, flags: number, ragdollBlockingFlags: number, moverBlendDelta: number, ikFlags: number): void;
/**
 * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
 *
 * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
 * ---
 * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
 * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
 * ----------------------------------------------------
 * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param ignoreCollisionEntityIndex
 * @param createInvincibleProjectile
 */
export declare function taskThrowProjectile(ped: number, x: number, y: number, z: number, ignoreCollisionEntityIndex: number, createInvincibleProjectile: boolean): void;
/**
 * used in sequence task
 *
 * both parameters seems to be always 0
 * @param ped
 * @param toggleType
 */
export declare function taskToggleDuck(ped: number, toggleType: number): void;
/**
 * duration in milliseconds
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export declare function taskTurnPedToFaceCoord(ped: number, x: number, y: number, z: number, duration: number): void;
/**
 * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * @param ped
 * @param entity
 * @param duration
 */
export declare function taskTurnPedToFaceEntity(ped: number, entity: number, duration: number): void;
/**
 * Actually has 3 params, not 2.
 *
 * p0: Ped
 * p1: int (or bool?)
 * p2: int
 * @param ped
 * @param usePhone
 * @param desiredPhoneMode
 */
export declare function taskUseMobilePhone(ped: number, usePhone: boolean, desiredPhoneMode: number): void;
export declare function taskUseMobilePhoneTimed(ped: number, duration: number): void;
/**
 * p5 is always 0 in scripts
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param maxRange
 * @param timeToLeave
 */
export declare function taskUseNearestScenarioChainToCoord(ped: number, x: number, y: number, z: number, maxRange: number, timeToLeave: number): void;
/**
 * p5 is always -1 or 0 in scripts
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param timeToLeave
 */
export declare function taskUseNearestScenarioChainToCoordWarp(ped: number, x: number, y: number, z: number, radius: number, timeToLeave: number): void;
/**
 * Updated variables
 *
 * An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param duration
 */
export declare function taskUseNearestScenarioToCoord(ped: number, x: number, y: number, z: number, distance: number, duration: number): void;
export declare function taskUseNearestScenarioToCoordWarp(ped: number, x: number, y: number, z: number, radius: number, timeToLeave: number): void;
export declare function taskVehicleAimAtCoord(ped: number, x: number, y: number, z: number): void;
export declare function taskVehicleAimAtPed(ped: number, target: number): void;
/**
 * chases targetEnt fast and aggressively
 * --
 * Makes ped (needs to be in vehicle) chase targetEnt.
 * @param driver
 * @param targetEnt
 */
export declare function taskVehicleChase(driver: number, targetEnt: number): void;
/**
 * info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p6
 * @param vehicleModel
 * @param drivingMode
 * @param stopRange
 * @param straightLineDistance
 */
export declare function taskVehicleDriveToCoord(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, p6: number, vehicleModel: number, drivingMode: number, stopRange: number, straightLineDistance: number): void;
export declare function taskVehicleDriveToCoordLongrange(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, driveMode: number, stopRange: number): void;
export declare function taskVehicleDriveWander(ped: number, vehicle: number, speed: number, drivingStyle: number): void;
/**
 * Makes a ped follow the targetVehicle with <minDistance> in between.
 *
 * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
 *
 * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
 * -1 = behind
 * 0 = ahead
 * 1 = left
 * 2 = right
 * 3 = back left
 * 4 = back right
 *
 * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
 *
 * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param vehicle
 * @param targetVehicle
 * @param mode
 * @param speed
 * @param drivingStyle
 * @param minDistance
 * @param minHeightAboveTerrain
 * @param noRoadsDistance
 */
export declare function taskVehicleEscort(ped: number, vehicle: number, targetVehicle: number, mode: number, speed: number, drivingStyle: number, minDistance: number, minHeightAboveTerrain: number, noRoadsDistance: number): void;
/**
 * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
 *
 * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
 * @param driver
 * @param vehicle
 * @param targetEntity
 * @param speed
 * @param drivingStyle
 * @param minDistance
 */
export declare function taskVehicleFollow(driver: number, vehicle: number, targetEntity: number, speed: number, drivingStyle: number, minDistance: number): void;
/**
 *
 *
 * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
 * p3 = 786468
 * p4 = 0
 * p5 = 16
 * p6 = -1 (angle?)
 * p7/8/9 = usually v3.zero
 * p10 = bool (repeat?)
 * p11 = 1073741824
 *
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param ped
 * @param vehicle
 * @param WPRecording
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export declare function taskVehicleFollowWaypointRecording(ped: number, vehicle: number, WPRecording: string, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: number): void;
/**
 * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
 *
 * WARNING:
 * A behaviorFlag value of 0 will result in a clunky, stupid driver!
 *
 * Recommended settings:
 * speed = 30.0f,
 * behaviorFlag = 156,
 * stoppingRange = 5.0f;
 *
 * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
 *
 * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
 *
 * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param behaviorFlag
 * @param stoppingRange
 */
export declare function taskVehicleGotoNavmesh(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, behaviorFlag: number, stoppingRange: number): void;
/**
 * pilot, vehicle and altitude are rather self-explanatory.
 *
 * p4: is unused variable in the function.
 *
 * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
 *
 * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
 *
 * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
 *
 * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
 *
 * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
 * @param pilot
 * @param vehicle
 * @param entityToFollow
 * @param targetSpeed
 * @param drivingFlags
 * @param radius
 * @param altitude
 * @param heliFlags
 */
export declare function taskVehicleHeliProtect(pilot: number, vehicle: number, entityToFollow: number, targetSpeed: number, drivingFlags: number, radius: number, altitude: number, heliFlags: number): void;
/**
 * missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * @param driver
 * @param vehicle
 * @param vehicleTarget
 * @param missionType
 * @param cruiseSpeed
 * @param drivingStyle
 * @param targetReached
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
export declare function taskVehicleMission(driver: number, vehicle: number, vehicleTarget: number, missionType: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void;
/**
 * See TASK_VEHICLE_MISSION
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param mission
 * @param cruiseSpeed
 * @param drivingStyle
 * @param targetReached
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
export declare function taskVehicleMissionCoorsTarget(ped: number, vehicle: number, x: number, y: number, z: number, mission: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void;
/**
 * See TASK_VEHICLE_MISSION
 * @param ped
 * @param vehicle
 * @param pedTarget
 * @param missionType
 * @param maxSpeed
 * @param drivingStyle
 * @param minDistance
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
export declare function taskVehicleMissionPedTarget(ped: number, vehicle: number, pedTarget: number, missionType: number, maxSpeed: number, drivingStyle: number, minDistance: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void;
/**
 * Modes:
 * 0 - ignore heading
 * 1 - park forward
 * 2 - park backwards
 *
 * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
 *
 * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param mode
 * @param radius
 * @param keepEngineOn
 */
export declare function taskVehiclePark(ped: number, vehicle: number, x: number, y: number, z: number, heading: number, mode: number, radius: number, keepEngineOn: boolean): void;
/**
 * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
 *
 * Here's how its used -
 *
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
 *
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0 -- [[1]] ], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
 *
 * FYI : Speedo is the name of van in which chop was put in the mission.
 * @param vehicle
 * @param animationSet
 * @param animationName
 */
export declare function taskVehiclePlayAnim(vehicle: number, animationSet: string, animationName: string): void;
export declare function taskVehicleShootAtCoord(ped: number, x: number, y: number, z: number, fireTolerance: number): void;
export declare function taskVehicleShootAtPed(ped: number, target: number, fireTolerance: number): void;
/**
 * '1 - brake
 * '3 - brake + reverse
 * '4 - turn left 90 + braking
 * '5 - turn right 90 + braking
 * '6 - brake strong (handbrake?) until time ends
 * '7 - turn left + accelerate
 * '8 - turn right + accelerate
 * '9 - weak acceleration
 * '10 - turn left + restore wheel pos to center in the end
 * '11 - turn right + restore wheel pos to center in the end
 * '13 - turn left + go reverse
 * '14 - turn left + go reverse
 * '16 - crash the game after like 2 seconds :)
 * '17 - keep actual state, game crashed after few tries
 * '18 - game crash
 * '19 - strong brake + turn left/right
 * '20 - weak brake + turn left then turn right
 * '21 - weak brake + turn right then turn left
 * '22 - brake + reverse
 * '23 - accelerate fast
 * '24 - brake
 * '25 - brake turning left then when almost stopping it turns left more
 * '26 - brake turning right then when almost stopping it turns right more
 * '27 - brake until car stop or until time ends
 * '28 - brake + strong reverse acceleration
 * '30 - performs a burnout (brake until stop + brake and accelerate)
 * '31 - accelerate + handbrake
 * '32 - accelerate very strong
 *
 * Seems to be this:
 * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
 * @param driver
 * @param vehicle
 * @param action
 * @param time
 */
export declare function taskVehicleTempAction(driver: number, vehicle: number, action: number, time: number): void;
export declare function taskWanderInArea(ped: number, x: number, y: number, z: number, radius: number, minimalLength: number, timeBetweenWalks: number): void;
export declare function taskWanderSpecific(ped: number, conditionalAnimGroupStr: string, conditionalAnimStr: string, heading: number): void;
/**
 * Makes ped walk around the area.
 *
 * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
 * @param ped
 * @param heading
 * @param flags
 */
export declare function taskWanderStandard(ped: number, heading: number, flags: number): void;
export declare function taskWarpPedDirectlyIntoCover(ped: number, time: number, allowPeekingAndFiring: boolean, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number): void;
/**
 * Seat Numbers
 * -------------------------------
 * Driver = -1
 * Any = -2
 * Left-Rear = 1
 * Right-Front = 0
 * Right-Rear = 2
 * Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
 * @param ped
 * @param vehicle
 * @param seat
 */
export declare function taskWarpPedIntoVehicle(ped: number, vehicle: number, seat: number): void;
/**
 * EX: Function.Call(Ped1, Ped2, Time, 0);
 *
 * The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
 *
 *
 *
 * Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
 * @param ped
 * @param target
 * @param minFireLoops
 * @param startState
 * @param forceShootOnGround
 * @param shootFromGroundTimer
 */
export declare function taskWrithe(ped: number, target: number, minFireLoops: number, startState: number, forceShootOnGround: boolean, shootFromGroundTimer: number): void;
export declare function tellGroupPedsInAreaToAttack(ped: number, p1: number, p2: number, hash: number, p4: number, p5: number): void;
export declare function terminateAllScriptsWithThisName(scriptName: string): void;
export declare function terminateThisThread(): void;
export declare function terminateThread(threadId: number): void;
/**
 * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
 * This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
 * @param toggle
 */
export declare function terraingridActivate(toggle: boolean): void;
/**
 * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
 * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * @param lowR
 * @param lowG
 * @param lowB
 * @param lowAlpha
 * @param r
 * @param g
 * @param b
 * @param alpha
 * @param highR
 * @param highG
 * @param highB
 * @param highAlpha
 */
export declare function terraingridSetColours(lowR: number, lowG: number, lowB: number, lowAlpha: number, r: number, g: number, b: number, alpha: number, highR: number, highG: number, highB: number, highAlpha: number): void;
/**
 * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
 * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
 *
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 *
 * This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
 * The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
 * normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
 *
 * Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
 * @param x
 * @param y
 * @param z
 * @param forwardX
 * @param forwardY
 * @param forwardZ
 * @param sizeX
 * @param sizeY
 * @param sizeZ
 * @param gridScale
 * @param glowIntensity
 * @param normalHeight
 * @param heightDiff
 */
export declare function terraingridSetParams(x: number, y: number, z: number, forwardX: number, forwardY: number, forwardZ: number, sizeX: number, sizeY: number, sizeZ: number, gridScale: number, glowIntensity: number, normalHeight: number, heightDiff: number): void;
/**
 * enum eScriptWaterTestResult
 * {
 * SCRIPT_WATER_TEST_RESULT_NONE,
 * SCRIPT_WATER_TEST_RESULT_WATER,
 * SCRIPT_WATER_TEST_RESULT_BLOCKED,
 * };
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param waterHeight
 */
export declare function testProbeAgainstAllWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, waterHeight: number): [number, number];
export declare function testProbeAgainstWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, result: Vector3): [boolean, Vector3];
/**
 * See TEST_PROBE_AGAINST_ALL_WATER.
 * @param x
 * @param y
 * @param z
 * @param flags
 * @param waterHeight
 */
export declare function testVerticalProbeAgainstAllWater(x: number, y: number, z: number, flags: number, waterHeight: number): [number, number];
export declare function textureDownloadGetName(p0: number): string;
export declare function textureDownloadHasFailed(p0: number): boolean;
export declare function textureDownloadRelease(p0: number): void;
export declare function textureDownloadRequest(filePath: string, name: string, p3: boolean): [number, number];
/**
 * Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
 */
export declare function thefeedAutoPostGametipsOff(): void;
/**
 * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
 */
export declare function thefeedAutoPostGametipsOn(): void;
export declare function thefeedClearFrozenPost(): void;
export declare function thefeedFlushQueue(): void;
/**
 * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 */
export declare function thefeedForceRenderOff(): void;
export declare function thefeedForceRenderOn(): void;
/**
 * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
 */
export declare function thefeedFreezeNextPost(): void;
/**
 * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
 */
export declare function thefeedGetLastShownPhoneActivatableFeedId(): number;
/**
 * Stops loading screen tips shown by invoking `THEFEED_SHOW`
 */
export declare function thefeedHide(): void;
/**
 * Once called each frame hides all above radar notifications.
 */
export declare function thefeedHideThisFrame(): void;
export declare function thefeedIsPaused(): boolean;
export declare function thefeedOnlyShowTooltips(toggle: boolean): void;
export declare function thefeedPause(): void;
/**
 * Removes a notification instantly instead of waiting for it to disappear
 * @param notificationId
 */
export declare function thefeedRemoveItem(notificationId: number): void;
export declare function thefeedReportLogoOff(): void;
export declare function thefeedReportLogoOn(): void;
export declare function thefeedResetAllParameters(): void;
export declare function thefeedResume(): void;
/**
 * From the decompiled scripts:
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);
 *
 * sets background color for the next notification
 * 6 = red
 * 184 = green
 * 190 = yellow
 *
 * Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
 * @param hudColorIndex
 */
export declare function thefeedSetBackgroundColorForNextPost(hudColorIndex: number): void;
/**
 * Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
 * @param count
 */
export declare function thefeedSetFlashDurationParameterForNextMessage(count: number): void;
export declare function thefeedSetRgbaParameterForNextMessage(red: number, green: number, blue: number, alpha: number): void;
export declare function thefeedSetScriptedMenuHeight(pos: number): void;
export declare function thefeedSetSnapFeedItemPositions(p0: boolean): void;
export declare function thefeedSetVibrateParameterForNextMessage(toggle: boolean): void;
/**
 * Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
 */
export declare function thefeedShow(): void;
/**
 * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
 * @param txdString1
 * @param txnString1
 * @param txdString2
 * @param txnString2
 */
export declare function thefeedUpdateItemTexture(txdString1: string, txnString1: string, txdString2: string, txnString2: string): void;
/**
 * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
 */
export declare function timera(): number;
export declare function timerb(): number;
/**
 * Gets the current frame time.
 */
export declare function timestep(): number;
export declare function titleTextureDownloadRequest(filePath: string, name: string, p2: boolean): number;
export declare function toFloat(value: number): number;
export declare function togglePausedRenderphases(toggle: boolean): void;
export declare function togglePlayerDamageOverlay(toggle: boolean): void;
export declare function toggleScenarioPedCowerInPlace(ped: number, toggle: boolean): void;
/**
 * Toggles some stunt jump stuff.
 * @param toggle
 */
export declare function toggleShowOptionalStuntJumpCamera(toggle: boolean): void;
export declare function toggleStealthRadar(toggle: boolean): void;
/**
 * Toggles:
 * UNK17 - 17
 * Turbo - 18
 * UNK19 - 19
 * Tire Smoke - 20
 * UNK21 - 21
 * Xenon Headlights - 22
 * @param vehicle
 * @param modType
 * @param toggle
 */
export declare function toggleVehicleMod(vehicle: number, modType: number, toggle: boolean): void;
export declare function trackObjectVisibility(object: number): void;
/**
 * in script hook .net
 *
 * Vehicle v = ...;
 * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
 * @param vehicle
 */
export declare function trackVehicleVisibility(vehicle: number): void;
/**
 * Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param noAnimation
 */
export declare function transformToCar(vehicle: number, noAnimation: boolean): void;
/**
 * Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param noAnimation
 */
export declare function transformToSubmarine(vehicle: number, noAnimation: boolean): boolean;
/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export declare function triggerCommerceDataFetch(p0: number): void;
export declare function triggerIdleAnimationOnPed(ped: number): void;
/**
 * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
 *
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
export declare function triggerMusicEvent(eventName: string): boolean;
export declare function triggerPedScenarioPanicexittoflee(p0: number, p1: number, p2: number, p3: number): boolean;
/**
 * time in ms to transition to fully blurred screen
 * @param transitionTime
 */
export declare function triggerScreenblurFadeIn(transitionTime: number): boolean;
/**
 * time in ms to transition from fully blurred to normal
 * @param transitionTime
 */
export declare function triggerScreenblurFadeOut(transitionTime: number): boolean;
/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 *
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 *
 * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
export declare function triggerScriptEvent(eventGroup: number, eventDataSize: number, playerBits: number): number;
export declare function triggerSirenAudio(vehicle: number): void;
export declare function triggerSonarBlip(posX: number, posY: number, posZ: number, radius: number, p4: number): void;
/**
 * p1: 0..16
 * @param vehicle
 * @param p1
 * @param p2
 */
export declare function triggerVehiclePartBrokenCameraShake(vehicle: number, p1: number, p2: number): void;
export declare function ugcCancelQuery(): void;
export declare function ugcClearCreateResult(): void;
export declare function ugcClearModifyResult(): void;
export declare function ugcClearOfflineQuery(): void;
export declare function ugcClearQueryResults(): void;
export declare function ugcCopyContent(): [boolean, number, number];
export declare function ugcCreateContent(dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean, p7: number): [boolean, number];
export declare function ugcCreateMission(contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean, p5: number): boolean;
export declare function ugcDidCreateSucceed(): boolean;
export declare function ugcDidDescriptionRequestSucceed(p0: number): boolean;
export declare function ugcDidGetSucceed(): boolean;
export declare function ugcDidModifySucceed(): boolean;
export declare function ugcDidQueryCreatorsSucceed(): boolean;
export declare function ugcGetBookmarkedContent(p0: number, p1: number, p2: string, p3: number): [boolean, number];
export declare function ugcGetCachedDescription(p0: number, p1: number): string;
export declare function ugcGetContentCategory(p0: number): number;
export declare function ugcGetContentCreatedByLocalPlayer(p0: number): boolean;
export declare function ugcGetContentCreatorGamerHandle(p0: number, p1: number): [boolean, number];
export declare function ugcGetContentDescriptionHash(p0: number): number;
export declare function ugcGetContentFileVersion(p0: number, p1: number): number;
export declare function ugcGetContentHasHiResPhoto(p0: number): boolean;
export declare function ugcGetContentHasLoResPhoto(p0: number): boolean;
export declare function ugcGetContentHasPlayerBookmarked(p0: number): boolean;
export declare function ugcGetContentHasPlayerRecord(p0: number): boolean;
export declare function ugcGetContentHash(): number;
/**
 * Return the mission id of a job.
 * @param p0
 */
export declare function ugcGetContentId(p0: number): string;
export declare function ugcGetContentIsPublished(p0: number): boolean;
export declare function ugcGetContentIsUsingScNickname(p0: number): boolean;
export declare function ugcGetContentIsVerified(p0: number): boolean;
export declare function ugcGetContentLanguage(p0: number): number;
export declare function ugcGetContentName(p0: number): string;
export declare function ugcGetContentNum(): number;
export declare function ugcGetContentPath(p0: number, p1: number): string;
export declare function ugcGetContentRating(p0: number, p1: number): number;
export declare function ugcGetContentRatingCount(p0: number, p1: number): number;
export declare function ugcGetContentRatingNegativeCount(p0: number, p1: number): number;
export declare function ugcGetContentRatingPositiveCount(p0: number, p1: number): number;
export declare function ugcGetContentTotal(): number;
export declare function ugcGetContentUpdatedDate(p0: number, p1: number): number;
export declare function ugcGetContentUserId(p0: number): string;
export declare function ugcGetContentUserName(p0: number): string;
export declare function ugcGetCreateContentId(): string;
export declare function ugcGetCreateResult(): number;
export declare function ugcGetCreatorNum(): number;
export declare function ugcGetCreatorsByUserId(): [boolean, number, number];
export declare function ugcGetCrewContent(p0: number, p1: number, p2: number, p3: string, p4: number): [boolean, number];
export declare function ugcGetFriendContent(p0: number, p1: number, p2: string, p3: number): [boolean, number];
export declare function ugcGetGetByCategory(p0: number, p1: number, p2: number, p3: string, p4: number): [boolean, number];
export declare function ugcGetGetByContentId(contentId: string, contentTypeName: string): boolean;
export declare function ugcGetGetByContentIds(dataCount: number, contentTypeName: string): [boolean, number];
export declare function ugcGetModifyResult(): number;
export declare function ugcGetMostRecentlyCreatedContent(p0: number, p1: number): [boolean, number, number];
export declare function ugcGetMostRecentlyPlayedContent(p0: number, p1: number): [boolean, number, number];
export declare function ugcGetMyContent(p0: number, p1: number, p2: string, p3: number): [boolean, number];
export declare function ugcGetQueryResult(): number;
/**
 * Return the root content id of a job.
 * @param p0
 */
export declare function ugcGetRootContentId(p0: number): string;
export declare function ugcGetTopRatedContent(p0: number, p1: number): [boolean, number, number];
export declare function ugcHasCreateFinished(): boolean;
export declare function ugcHasDescriptionRequestFinished(p0: number): boolean;
export declare function ugcHasGetFinished(): boolean;
export declare function ugcHasModifyFinished(): boolean;
export declare function ugcHasQueryCreatorsFinished(): boolean;
export declare function ugcIsCreating(): boolean;
export declare function ugcIsDescriptionRequestInProgress(p0: number): boolean;
export declare function ugcIsGetting(): boolean;
export declare function ugcIsLanguageSupported(p0: number): boolean;
export declare function ugcIsModifying(): boolean;
export declare function ugcLoadOfflineQuery(p0: number): boolean;
export declare function ugcPublish(contentId: string, baseContentId: string, contentTypeName: string): boolean;
export declare function ugcQueryByCategory(p0: number, p1: number, p2: number, p3: string, p4: number, p5: boolean): boolean;
export declare function ugcQueryByContentId(contentId: string, latestVersion: boolean, contentTypeName: string): boolean;
export declare function ugcQueryByContentIds(count: number, latestVersion: boolean, contentTypeName: string): [boolean, number];
export declare function ugcQueryMostRecentlyCreatedContent(offset: number, count: number, contentTypeName: string, p3: number): boolean;
export declare function ugcQueryMyContent(p0: number, p1: number, p3: number, p4: number, p5: number): [boolean, number];
export declare function ugcReleaseAllCachedDescriptions(): void;
export declare function ugcReleaseCachedDescription(p0: number): boolean;
export declare function ugcRequestCachedDescription(p0: number): number;
export declare function ugcRequestContentDataFromIndex(p0: number, p1: number): number;
export declare function ugcRequestContentDataFromParams(contentTypeName: string, contentId: string, p2: number, p3: number, p4: number): number;
export declare function ugcSetBookmarked(contentId: string, bookmarked: boolean, contentTypeName: string): boolean;
export declare function ugcSetDeleted(p1: boolean, p2: string): [boolean, number];
export declare function ugcSetPlayerData(contentId: string, rating: number, contentTypeName: string, p3: number): boolean;
export declare function ugcSetQueryDataFromOffline(p0: boolean): void;
export declare function ugcSetUsingOfflineContent(p0: boolean): void;
export declare function ugcTextureDownloadRequest(p0: string, p1: number, p2: number, p3: number, p4: string, p5: boolean): number;
export declare function ugcUpdateContent(contentId: string, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, p7: number): [boolean, number];
export declare function ugcUpdateMission(contentId: string, contentName: string, description: string, tagsCsv: string, contentTypeName: string, p5: number): boolean;
export declare function ugcWasQueryForceCancelled(): boolean;
/**
 * It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
 *
 * presetName was always "CELEBRATION_WINNER"
 * All presets can be found in common\data\ui\uiscenes.meta
 * @param presetName
 * @param ped
 * @param slot
 * @param posX
 * @param posY
 * @param posZ
 */
export declare function ui3dsceneAssignPedToSlot(presetName: string, ped: number, slot: number, posX: number, posY: number, posZ: number): boolean;
export declare function ui3dsceneClearPatchedData(): void;
export declare function ui3dsceneIsAvailable(): boolean;
export declare function ui3dsceneMakePushedPresetPersistent(toggle: boolean): void;
/**
 * All presets can be found in common\data\ui\uiscenes.meta
 * @param presetName
 */
export declare function ui3dscenePushPreset(presetName: string): boolean;
/**
 * Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
 */
export declare function uiStartedEndUserBenchmark(): boolean;
/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param name
 * @param eventType
 */
export declare function unblockDecisionMakerEvent(name: number, eventType: number): void;
export declare function unblockSpeechContextGroup(p0: string): void;
export declare function uncuffPed(ped: number): void;
export declare function unfreezeRadioStation(radioStation: string): void;
export declare function unhintAmbientAudioBank(): void;
export declare function unhintNamedScriptAudioBank(audioBank: string): void;
export declare function unhintScriptAudioBank(): void;
export declare function unloadAllCloudHats(): void;
export declare function unloadCloudHat(name: string, p1: number): void;
export declare function unlockMinimapAngle(): void;
export declare function unlockMinimapPosition(): void;
/**
 * "news" that play on the radio after you've done something in story mode(?)
 * @param newsStory
 */
export declare function unlockMissionNewsStory(newsStory: number): void;
/**
 * AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
 * @param radioStation
 * @param trackListName
 */
export declare function unlockRadioStationTrackList(radioStation: string, trackListName: string): void;
export declare function unpatchDecalDiffuseMap(decalType: number): void;
export declare function unpausePlaybackRecordedVehicle(vehicle: number): void;
/**
 * Does something similar to INTERIOR::DISABLE_INTERIOR.
 *
 * You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
 * @param interior
 */
export declare function unpinInterior(interior: number): void;
export declare function unpinRopeVertex(ropeId: number, vertex: number): void;
/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export declare function unregisterPedheadshot(id: number): void;
export declare function unregisterScriptVariable(variable: number): number;
/**
 * This native does absolutely nothing, just a nullsub
 */
export declare function unregisterScriptWithAudio(): void;
export declare function unrequestTennisBanks(): void;
export declare function updateLightsOnEntity(entity: number): void;
export declare function updateNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void;
/**
 * Returns the current status of the onscreen keyboard, and updates the output.
 *
 * Status Codes:
 *
 * -1: Keyboard isn't active
 * 0: User still editing
 * 1: User has finished editing
 * 2: User has canceled editing
 */
export declare function updateOnscreenKeyboard(): number;
/**
 * See SET_PED_HEAD_BLEND_DATA().
 * @param ped
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 */
export declare function updatePedHeadBlendData(ped: number, shapeMix: number, skinMix: number, thirdMix: number): void;
export declare function updatePlayerTeleport(player: number): boolean;
/**
 * Does nothing (it's a nullsub).
 */
export declare function updateRadarZoomToBlip(): void;
export declare function updateSoundCoord(soundId: number, x: number, y: number, z: number): void;
export declare function updateSpecialAbilityFromStat(player: number, p1: number): void;
export declare function updateTaskAimGunScriptedTarget(ped: number, target: number, x: number, y: number, z: number, disableBlockingClip: boolean): void;
export declare function updateTaskHandsUpDuration(ped: number, duration: number): void;
export declare function updateTaskSweepAimEntity(ped: number, entity: number): void;
export declare function updateTaskSweepAimPosition(ped: number, x: number, y: number, z: number): void;
/**
 * Just a nullsub (i.e. does absolutely nothing) since build 1604.
 * @param enableMixes
 */
export declare function updateUnlockableDjRadioTracks(enableMixes: boolean): void;
/**
 * This native is used in both singleplayer and multiplayer scripts.
 *
 * Always used like this in scripts
 * PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());
 * @param player
 */
export declare function updateWantedPositionThisFrame(player: number): void;
export declare function useActiveCameraForTimeslicingCentre(): void;
/**
 * Sets gameplay camera to hash
 * @param camName
 */
export declare function useDedicatedStuntCameraThisUpdate(camName: string): void;
/**
 * Related to displaying cash on the HUD
 * Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
 * @param toggle
 */
export declare function useFakeMpCash(toggle: boolean): void;
export declare function useFootstepScriptSweeteners(ped: number, p1: boolean, hash: number): void;
/**
 * From the b678d decompiled scripts:
 *
 * GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");
 *
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param name
 */
export declare function useParticleFxAsset(name: string): void;
export declare function usePlayerColourInsteadOfTeamColour(toggle: boolean): void;
export declare function useScriptCamForAmbientPopulationOriginThisFrame(p0: boolean, p1: boolean): void;
export declare function useSirenAsHorn(vehicle: number, toggle: boolean): void;
/**
 * Forces footstep tracks on all surfaces.
 * @param toggle
 */
export declare function useSnowFootVfxWhenUnsheltered(toggle: boolean): void;
/**
 * Forces vehicle trails on all surfaces.
 * @param toggle
 */
export declare function useSnowWheelVfxWhenUnsheltered(toggle: boolean): void;
export declare function useVehicleCamStuntSettingsThisUpdate(): void;
export declare function useVehicleTargetingReticule(p0: number): void;
export declare function useWaypointRecordingAsAssistedMovementRoute(name: string, p1: boolean, p2: number, p3: number): void;
export declare function usingMissionCreator(toggle: boolean): void;
/**
 * Calculates distance between vectors.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function vdist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
/**
 * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export declare function vdist2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
/**
 * calls from vehicle to net.
 *
 * @param vehicle
 */
export declare function vehToNet(vehicle: number): number;
export declare function vehicleSetEnableNormaliseRampCarVerticalVeloctiy(p0: number, p1: number): void;
export declare function vehicleSetEnableRampCarSideImpulse(p0: number, p1: number): void;
export declare function vehicleSetExtenableSideTargetRatio(p0: number, p1: number): number;
export declare function vehicleSetJetWashForceEnabled(p0: number): void;
export declare function vehicleSetOverrideExtenableSideRatio(p0: number, p1: number): number;
export declare function vehicleSetOverrideSideRatio(p0: number, p1: number): number;
/**
 * Parachute models:
 * - sr_prop_specraces_para_s_01
 * - imp_prop_impexp_para_s (SecuroServ; Default)
 * Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
 * @param vehicle
 * @param modelHash
 */
export declare function vehicleSetParachuteModelOverride(vehicle: number, modelHash: number): void;
/**
 * Variations available for the generic parachute (sr_prop_specraces_para_s_01):
 * - 0: Rainbow
 * - 1: Red
 * - 2: White, blue, yellow
 * - 3: Black, red, white
 * - 4: Red, white, blue
 * - 5: Blue
 * - 6: Black
 * - 7: Black, yellow
 * @param vehicle
 * @param textureVariation
 */
export declare function vehicleSetParachuteModelTintIndex(vehicle: number, textureVariation: number): void;
export declare function vehicleSetRampAndRammingCarsTakeDamage(vehicle: number, toggle: boolean): void;
export declare function vehicleStartParachuting(vehicle: number, active: boolean): void;
export declare function vehicleWaypointPlaybackOverrideSpeed(vehicle: number, speed: number): void;
export declare function vehicleWaypointPlaybackPause(vehicle: number): void;
export declare function vehicleWaypointPlaybackResume(vehicle: number): void;
export declare function vehicleWaypointPlaybackUseDefaultSpeed(vehicle: number): void;
/**
 * Calculates the magnitude of a vector.
 * @param x
 * @param y
 * @param z
 */
export declare function vmag(x: number, y: number, z: number): number;
/**
 * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
 * @param x
 * @param y
 * @param z
 */
export declare function vmag2(x: number, y: number, z: number): number;
/**
 * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
 * @param ms
 */
export declare function wait(ms: number): void;
export declare function wasCutsceneSkipped(): boolean;
export declare function wasFlyCamConstrainedOnPreviousUdpate(cam: number): boolean;
export declare function wasPedKilledByStealth(ped: number): boolean;
export declare function wasPedKilledByTakedown(ped: number): boolean;
export declare function wasPedKnockedOut(ped: number): boolean;
/**
 * Despite this function's name, it simply returns whether the specified handle is a Ped.
 * @param ped
 */
export declare function wasPedSkeletonUpdated(ped: number): boolean;
/**
 * This function is hard-coded to always return 1.
 * @param p0
 */
export declare function wasVcWithdrawalSuccessful(p0: number): boolean;
export declare function washDecalsFromVehicle(vehicle: number, p1: number): void;
export declare function washDecalsInRange(x: number, y: number, z: number, range: number, p4: number): void;
export declare function waterOverrideFadeIn(p0: number): void;
export declare function waterOverrideFadeOut(p0: number): void;
export declare function waterOverrideSetOceannoiseminamplitude(minAmplitude: number): void;
export declare function waterOverrideSetOceanwaveamplitude(amplitude: number): void;
export declare function waterOverrideSetOceanwavemaxamplitude(maxAmplitude: number): void;
export declare function waterOverrideSetOceanwaveminamplitude(minAmplitude: number): void;
export declare function waterOverrideSetRipplebumpiness(bumpiness: number): void;
export declare function waterOverrideSetRippledisturb(disturb: number): void;
export declare function waterOverrideSetRipplemaxbumpiness(maxBumpiness: number): void;
export declare function waterOverrideSetRippleminbumpiness(minBumpiness: number): void;
export declare function waterOverrideSetShorewaveamplitude(amplitude: number): void;
export declare function waterOverrideSetShorewavemaxamplitude(maxAmplitude: number): void;
export declare function waterOverrideSetShorewaveminamplitude(minAmplitude: number): void;
/**
 * This seems to edit the water wave, intensity around your current location.
 *
 * 0.0f = Normal
 * 1.0f = So Calm and Smooth, a boat will stay still.
 * 3.0f = Really Intense.
 * @param strength
 */
export declare function waterOverrideSetStrength(strength: number): void;
export declare function waterReflectionSetScriptObjectVisibility(p0: number): void;
export declare function waypointPlaybackGetIsPaused(p0: number): boolean;
export declare function waypointPlaybackOverrideSpeed(p0: number, p1: number, p2: boolean): void;
export declare function waypointPlaybackPause(p0: number, p1: boolean, p2: boolean): void;
export declare function waypointPlaybackResume(p0: number, p1: boolean, p2: number, p3: number): void;
export declare function waypointPlaybackStartAimingAtCoord(ped: number, x: number, y: number, z: number, p4: boolean): void;
export declare function waypointPlaybackStartAimingAtPed(ped: number, target: number, p2: boolean): void;
export declare function waypointPlaybackStartShootingAtCoord(ped: number, x: number, y: number, z: number, p4: boolean, firingPattern: number): void;
export declare function waypointPlaybackStartShootingAtPed(ped: number, ped2: number, p2: boolean, p3: boolean): void;
export declare function waypointPlaybackStopAimingOrShooting(ped: number): void;
export declare function waypointPlaybackUseDefaultSpeed(p0: number): void;
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param x
 * @param y
 * @param z
 * @param point
 */
export declare function waypointRecordingGetClosestWaypoint(name: string, x: number, y: number, z: number, point: number): [boolean, number];
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param point
 * @param coord
 */
export declare function waypointRecordingGetCoord(name: string, point: number, coord: Vector3): [boolean, Vector3];
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param points
 */
export declare function waypointRecordingGetNumPoints(name: string, points: number): [boolean, number];
/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 * @param point
 */
export declare function waypointRecordingGetSpeedAtPoint(name: string, point: number): number;
/**
 * Does nothing and always returns 0.
 * @param amount
 */
export declare function withdrawVc(amount: number): number;
export declare function wouldEntityBeOccluded(entityModelHash: number, x: number, y: number, z: number, p4: boolean): boolean;
