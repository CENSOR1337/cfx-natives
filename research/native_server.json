{
  "0x388fde9a": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<param name=\"seatIndex\">See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669).</param>\n<returns>The ped in the specified seat of the passed vehicle. Returns 0 if the specified seat is not occupied.</returns>\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_PED_IN_VEHICLE_SEAT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "seatIndex",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x388fde9a",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x804b9f7b": {
    "doc": "!\n<summary>\nReturns the internal build number of the current game being executed.\n\nPossible values:\n\n*   FiveM\n    *   1604\n    *   2060\n    *   2189\n    *   2372\n    *   2545\n    *   2612\n    *   2699\n    *   2802\n    *   2944\n*   RedM\n    *   1311\n    *   1355\n    *   1436\n    *   1491\n*   LibertyM\n    *   43\n*   FXServer\n    *   0\n</summary>\n<returns>The build number, or **0** if no build number is known.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_GAME_BUILD_NUMBER",
    "arguments": [],
    "aliases": [],
    "hash": "0x804b9f7b",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x389ef71": {
    "name": "CREATE_PED",
    "ogHash": "0xD49F9B0955C367DE",
    "doc": "!\n<summary>\nCreates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\n(e.g. using REQUEST_MODEL).\n</summary>\n<param name=\"pedType\">Unused. Peds get set to CIVMALE/CIVFEMALE/etc. no matter the value specified.</param>\n<param name=\"modelHash\">The model of ped to spawn.</param>\n<param name=\"x\">Spawn coordinate X component.</param>\n<param name=\"y\">Spawn coordinate Y component.</param>\n<param name=\"z\">Spawn coordinate Z component.</param>\n<param name=\"heading\">Heading to face towards, in degrees.</param>\n<param name=\"isNetwork\">Whether to create a network object for the ped. If false, the ped exists only locally.</param>\n<param name=\"bScriptHostPed\">Whether to register the ped as pinned to the script host in the R\\* network model.</param>\n<returns>A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "pedType",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "modelHash",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "heading",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isNetwork",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "bScriptHostPed",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Entity", "nativeType": "int" },
    "hash": "0x389ef71"
  },
  "0x6ccd2564": {
    "doc": "!\n<summary>\nCan be used to get a console variable of type `char*`, for example a string.\n</summary>\n<param name=\"varName\">The console variable to look up.</param>\n<param name=\"default_\">The default value to set if none is found.</param>\n<returns>Returns the convar value if it can be found, otherwise it returns the assigned `default`.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_CONVAR",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "varName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "default_",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6ccd2564",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x96f93cce": {
    "doc": "!\n<summary>\nRequests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance\nwill open the browser prompting further purchase details.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n<param name=\"skuId\">The ID of the SKU.</param>\n\t",
    "name": "REQUEST_PLAYER_COMMERCE_SESSION",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "skuId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x96f93cce",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9049db44": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<returns>Returns whether or not the boat is wrecked.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_BOAT_WRECKED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9049db44",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb7ba82dc": {
    "doc": "!\n\t",
    "name": "SET_MAP_NAME",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "mapName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb7ba82dc",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x499747b6": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x499747b6",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xc1c0855a": {
    "doc": "!\n<summary>\nApplies a force to the specified entity.\n\n**List of force types (p1)**:\n\n```\npublic enum ForceType\n{\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\n```\n\nResearch/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).\n</summary>\n<param name=\"entity\">The entity you want to apply a force on</param>\n<param name=\"forceType\">See native description above for a list of commonly used values</param>\n<param name=\"x\">Force amount (X)</param>\n<param name=\"y\">Force amount (Y)</param>\n<param name=\"z\">Force amount (Z)</param>\n<param name=\"offX\">Rotation/offset force (X)</param>\n<param name=\"offY\">Rotation/offset force (Y)</param>\n<param name=\"offZ\">Rotation/offset force (Z)</param>\n<param name=\"boneIndex\">(Often 0) Entity bone index</param>\n<param name=\"isDirectionRel\">(Usually false) Vector defined in local (body-fixed) coordinate frame</param>\n<param name=\"ignoreUpVec\">(Usually true)</param>\n<param name=\"isForceRel\">(Usually true) When true, force gets multiplied with the objects mass and different objects will have the same acceleration</param>\n<param name=\"p12\">(Usually false)</param>\n<param name=\"p13\">(Usually true)</param>\n\t",
    "rpc": true,
    "name": "APPLY_FORCE_TO_ENTITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "forceType",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "offX",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "offY",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "offZ",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "boneIndex",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isDirectionRel",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "ignoreUpVec",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isForceRel",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p12",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p13",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc1c0855a",
    "ogHash": "0xC5F68BE9613E2D18",
    "apiset": ["server"]
  },
  "0xbc045625": {
    "doc": "!\n<summary>\nImmediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.\n</summary>\n<param name=\"ped\">Ped id.</param>\n\t",
    "rpc": true,
    "name": "CLEAR_PED_TASKS_IMMEDIATELY",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbc045625",
    "ogHash": "0xAAA34F8A7CB32098",
    "apiset": ["server"]
  },
  "0xfc30ddff": {
    "doc": "!\n<summary>\nThis native gets an entity's population type.\n</summary>\n<param name=\"entity\">the entity to obtain the population type from</param>\n<returns>Returns the population type ID, defined by the below enumeration:```cpp\nenum ePopulationType\n{\n\tPOPTYPE_UNKNOWN = 0,\n\tPOPTYPE_RANDOM_PERMANENT,\n\tPOPTYPE_RANDOM_PARKED,\n\tPOPTYPE_RANDOM_PATROL,\n\tPOPTYPE_RANDOM_SCENARIO,\n\tPOPTYPE_RANDOM_AMBIENT,\n\tPOPTYPE_PERMANENT,\n\tPOPTYPE_MISSION,\n\tPOPTYPE_REPLAY,\n\tPOPTYPE_CACHE,\n\tPOPTYPE_TOOL\n};\n```</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_ENTITY_POPULATION_TYPE",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfc30ddff",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xfe1589f9": {
    "doc": "!\n<summary>\nGets the entity that this entity is attached to.\n</summary>\n<param name=\"entity\">The entity to check.</param>\n<returns>The attached entity handle. 0 returned if the entity is not attached.</returns>\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_ENTITY_ATTACHED_TO",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfe1589f9",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2e310acd": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "VERIFY_PASSWORD_HASH",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "password",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "hash",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2e310acd",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xd3a183a3": {
    "doc": "!\n<summary>\nIt overrides the default distance culling radius of an entity. Set to `0.0` to reset.\nIf you want to interact with an entity outside of your players' scopes set the radius to a huge number.\n\n**WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)\n</summary>\n<param name=\"entity\">The entity handle to override the distance culling radius.</param>\n<param name=\"radius\">The new distance culling radius.</param>\n\t",
    "name": "SET_ENTITY_DISTANCE_CULLING_RADIUS",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "radius",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd3a183a3",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x6ae51d4b": {
    "doc": "!\n<summary>\nEquivalent to CREATE_VEHICLE, but it uses 'server setter' logic (like the former CREATE_AUTOMOBILE) as a workaround for\nreliability concerns regarding entity creation RPC.\n\nUnlike CREATE_AUTOMOBILE, this supports other vehicle types as well.\n</summary>\n<param name=\"modelHash\">The model of vehicle to spawn.</param>\n<param name=\"type\">The appropriate vehicle type for the model info. Can be one of `automobile`, `bike`, `boat`, `heli`, `plane`, `submarine`, `trailer`, and (potentially), `train`. This should be the same type as the `type` field in `vehicles.meta`.</param>\n<param name=\"x\">Spawn coordinate X component.</param>\n<param name=\"y\">Spawn coordinate Y component.</param>\n<param name=\"z\">Spawn coordinate Z component.</param>\n<param name=\"heading\">Heading to face towards, in degrees.</param>\n<returns>A script handle for the vehicle.</returns>\n\t",
    "returns": {
      "nativeType": "int",
      "name": "Vehicle",
      "parent": { "name": "Entity", "nativeType": "int" }
    },
    "name": "CREATE_VEHICLE_SERVER_SETTER",
    "arguments": [
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "modelHash",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "type",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "heading",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6ae51d4b",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa41bc13d": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<returns>See the client-side [GET_HELI_TAIL_ROTOR_HEALTH](https://docs.fivem.net/natives/?\\_0xAE8CE82A4219AC8C) for the return value.</returns>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_HELI_TAIL_ROTOR_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa41bc13d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x1382fcea": {
    "doc": "!\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_VEHICLE_STEERING_ANGLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1382fcea",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xa56135e0": {
    "doc": "!\n<summary>\nOn the server this will return the players source, on the client it will return the player handle.\n</summary>\n<param name=\"bagName\">An internal state bag ID from the argument to a state bag change handler.</param>\n<returns>The player handle or 0 if the state bag name did not refer to a player, or the player does not exist.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_FROM_STATE_BAG_NAME",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "bagName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa56135e0",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xc8a9ce08": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_FROM_INDEX",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc8a9ce08",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xf292858c": {
    "doc": "!\n<summary>\nUsed to replicate a server variable onto clients.\n</summary>\n<param name=\"varName\">The console variable name.</param>\n<param name=\"value\">The value to set for the given console variable.</param>\n\t",
    "name": "SET_CONVAR_REPLICATED",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "varName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf292858c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9e35dab6": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "NETWORK_GET_NETWORK_ID_FROM_ENTITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9e35dab6",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x412aa00d": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "REMOVE_WEAPON_COMPONENT_FROM_PED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "weaponHash",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "componentHash",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x412aa00d",
    "ogHash": "0x1E8BE90C74FB4C09",
    "apiset": ["server"]
  },
  "0xde3316ab": {
    "doc": "!\n<summary>\nClear a ped's tasks. Stop animations and other tasks created by scripts.\n</summary>\n<param name=\"ped\">Ped id. Use PlayerPedId() for your own character.</param>\n\t",
    "rpc": true,
    "name": "CLEAR_PED_TASKS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xde3316ab",
    "ogHash": "0xE1EF3C1216AFF2CD",
    "apiset": ["server"]
  },
  "0x40321b83": {
    "doc": "!\n<param name=\"ped\">The target ped.</param>\n<returns>Whether or not the ped is stealthy.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "GET_PED_STEALTH_MOVEMENT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x40321b83",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x636f097f": {
    "doc": "!\n<summary>\nScans the resources in the specified resource root. This function is only available in the 'monitor mode' process and is\nnot available for user resources.\n</summary>\n<param name=\"rootPath\">The resource directory to scan.</param>\n<param name=\"callback\">A callback that will receive an object with results.</param>\n\t",
    "name": "SCAN_RESOURCE_ROOT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "rootPath",
        "annotations": {}
      },
      {
        "type": { "name": "func", "nativeType": "func" },
        "name": "callback",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x636f097f",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xfee404f9": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_ENDPOINT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfee404f9",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x13d53892": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_WINDOW_TINT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x13d53892",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x29b440dc": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "START_RESOURCE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x29b440dc",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7995539e": {
    "doc": "!\n<summary>\nRequests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "name": "LOAD_PLAYER_COMMERCE_DATA_EXT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7995539e",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4d52fe5b": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_INVOKING_RESOURCE",
    "arguments": [],
    "aliases": [],
    "hash": "0x4d52fe5b",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xa61c8fc6": {
    "doc": "!\n<summary>\nGet an identifier from a player by the type of the identifier.\n</summary>\n<param name=\"playerSrc\">The player to get the identifier for</param>\n<param name=\"identifierType\">The string to match in an identifier, this can be `\"license\"` for example.</param>\n<returns>The identifier that matches the string provided</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_IDENTIFIER_BY_TYPE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "identifierType",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa61c8fc6",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xce51ac2c": {
    "doc": "!\n<summary>\nSets whether or not the specified routing bucket has automatically-created population enabled.\n</summary>\n<param name=\"bucketId\">The routing bucket ID to adjust.</param>\n<param name=\"mode\">`true` to enable population, `false` to disable population.</param>\n\t",
    "name": "SET_ROUTING_BUCKET_POPULATION_ENABLED",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "bucketId",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "mode",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xce51ac2c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xfbde9fd8": {
    "doc": "!\n<summary>\nGets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\\_0xE6B0E8CFC3633BF0) native for a description of lock on states.\n</summary>\n<param name=\"vehicle\">The vehicle to check.</param>\n<returns>The lock on state.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_HOMING_LOCKON_STATE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfbde9fd8",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7a6462f4": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "NETWORK_GET_VOICE_PROXIMITY_OVERRIDE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7a6462f4",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x863f27b": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_NUM_RESOURCES",
    "arguments": [],
    "aliases": [],
    "hash": "0x863f27b",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xd72cef2": {
    "doc": "!\n<summary>\n```lua\nenum_VehicleLockStatus = {\n    None = 0,\n    Locked = 2,\n    LockedForPlayer = 3,\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\n}\n```\n\nIt should be [noted](https://forum.cfx.re/t/4863241) that while the [client-side command](#\\_0x25BC98A59C2EA962) and its\nsetter distinguish between states 0 (unset) and 1 (unlocked), the game will synchronize both as state 0, so the server-side\ncommand will return only '0' if unlocked.\n</summary>\n<param name=\"vehicle\">A vehicle handle.</param>\n<returns>The door lock status for the specified vehicle.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_DOOR_LOCK_STATUS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd72cef2",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x526fee31": {
    "doc": "!\n<summary>\nReturns the owner ID of the specified entity.\n</summary>\n<param name=\"entity\">The entity to get the owner for.</param>\n<returns>On the server, the server ID of the entity owner. On the client, returns the player/slot ID of the entity owner.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "NETWORK_GET_ENTITY_OWNER",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x526fee31",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x35bdceea": {
    "doc": "!\n<summary>\nA getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938).\n</summary>\n<param name=\"key\">The key to fetch</param>\n<returns>The floating-point value stored under the specified key, or 0.0 if not found.</returns>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_RESOURCE_KVP_FLOAT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x35bdceea",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x80a9e7a7": {
    "doc": "!\n<param name=\"ped\">The ped handle.</param>\n<param name=\"x\">The x coordinate.</param>\n<param name=\"y\">The y coordinate.</param>\n<param name=\"z\">The z coordinate.</param>\n<param name=\"speed\">The ped movement speed.</param>\n<param name=\"timeout\">\\-1 , other values appear to break the ped movement.</param>\n<param name=\"targetHeading\">The heading you want the ped to be on x,y,z coord.</param>\n<param name=\"distanceToSlide\">The distance from x,y,z where the ped will start sliding.</param>\n\t",
    "rpc": true,
    "name": "TASK_GO_STRAIGHT_TO_COORD",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "speed",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "timeout",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "targetHeading",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "distanceToSlide",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x80a9e7a7",
    "ogHash": "0xD76B57B44F1E6F8B",
    "apiset": ["server"]
  },
  "0x98eff6f1": {
    "doc": "!\n<summary>\nThis native converts the passed string to a hash.\n</summary>\n\t",
    "returns": { "name": "Hash", "nativeType": "int" },
    "name": "GET_HASH_KEY",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "model",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x98eff6f1",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9d77259e": {
    "doc": "!\n<summary>\n```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "r",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "g",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "b",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9d77259e",
    "ogHash": "0x36CED73BFED89754",
    "apiset": ["server"]
  },
  "0x54ea5bcc": {
    "doc": "!\n<summary>\n```\nThis executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);  \nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "CLEAR_PLAYER_WANTED_LEVEL",
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "player",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x54ea5bcc",
    "ogHash": "0xB302540597885499",
    "apiset": ["server"]
  },
  "0xdedae23d": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PLAYER_ACE_ALLOWED",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "object",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdedae23d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2b2fcc28": {
    "doc": "!\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_VEHICLE_BODY_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2b2fcc28",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xac4ef23d": {
    "doc": "!\n<summary>\nSee the client-side [IS_VEHICLE_WINDOW_INTACT](https://docs.fivem.net/natives/?\\_0x46E571A0E20D01F1) for a window indexes list.\n</summary>\n<param name=\"vehicle\">The target vehicle.</param>\n<param name=\"windowIndex\">The window index.</param>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_VEHICLE_WINDOW_INTACT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "windowIndex",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xac4ef23d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xbf90df1a": {
    "doc": "!\n<summary>\n```\nNativeDB Added Parameter 4: BOOL p3\n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_AMMO",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "weaponHash",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "ammo",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbf90df1a",
    "ogHash": "0x14E56BC5B5DB6A19",
    "apiset": ["server"]
  },
  "0xcf9a2ff": {
    "doc": "!\n<summary>\nNonsynchronous [SET_RESOURCE_KVP](#\\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).\n</summary>\n<param name=\"key\">The key to set</param>\n<param name=\"value\">The value to write</param>\n\t",
    "name": "SET_RESOURCE_KVP_NO_SYNC",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xcf9a2ff",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4cdd35d0": {
    "doc": "!\n<summary>\n```\n// Source GTA VC miss2 leak, matching constants for 0/2/4, testing\n// They use 10 in am_mp_property_int, don't know what it does atm.\nenum eCarLock {\n    CARLOCK_NONE = 0,\n    CARLOCK_UNLOCKED = 1,\n    CARLOCK_LOCKED = 2,\n    CARLOCK_LOCKOUT_PLAYER_ONLY = 3,\n    CARLOCK_LOCKED_PLAYER_INSIDE = 4,\n    CARLOCK_LOCKED_INITIALLY = 5,\n    CARLOCK_FORCE_SHUT_DOORS = 6,\n    CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7\n};\n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_DOORS_LOCKED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "doorLockStatus",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4cdd35d0",
    "ogHash": "0xB664292EAECF7FA6",
    "apiset": ["server"]
  },
  "0xd5c39ee6": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<returns>Returns whether or not the boat is anchored and frozen.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_BOAT_ANCHORED_AND_FROZEN",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd5c39ee6",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x95070fa": {
    "doc": "!\n<param name=\"train\">The entity handle.</param>\n<returns>The train engine carriage.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_TRAIN_CARRIAGE_ENGINE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "train",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x95070fa",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x3bb78f05": {
    "doc": "!\n<summary>\nInternal function for ensuring an entity has a state bag.\n</summary>\n\t",
    "name": "ENSURE_ENTITY_STATE_BAG",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x3bb78f05",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xc4d88a85": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "GIVE_WEAPON_TO_PED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "weaponHash",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "ammoCount",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isHidden",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "bForceInHand",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc4d88a85",
    "ogHash": "0xBF0FD6E56C964FCB",
    "apiset": ["server"]
  },
  "0x84adf9eb": {
    "doc": "!\n<summary>\nGet the entity that killed the ped. This native is used server side when using OneSync.\n</summary>\n<param name=\"ped\">The target ped</param>\n<returns>The entity id. Returns 0 if the ped has no killer.</returns>\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_PED_SOURCE_OF_DEATH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x84adf9eb",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9cfbe10d": {
    "doc": "!\n<summary>\n```cpp\n// Potential names and hash collisions included as comments\nenum ePedConfigFlags {\n\t_0x67D1A445 = 0,\n\t_0xC63DE95E = 1,\n\tCPED_CONFIG_FLAG_NoCriticalHits = 2,\n\tCPED_CONFIG_FLAG_DrownsInWater = 3,\n\tCPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,\n\t_0x37D196F4 = 5,\n\t_0xE2462399 = 6,\n\tCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\n\t_0xEDDEB838 = 8,\n\t_0xB398B6FD = 9,\n\t_0xF6664E68 = 10,\n\t_0xA05E7CA3 = 11,\n\t_0xCE394045 = 12,\n\tCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\n\t_0xCD8D1411 = 14,\n\t_0xB031F1A9 = 15,\n\t_0xFE65BEE3 = 16,\n\tCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\n\t_0x380165BD = 18,\n\t_0x07C045C7 = 19,\n\t_0x583B5E2D = 20,\n\t_0x475EDA58 = 21,\n\t_0x8629D05B = 22,\n\t_0x1522968B = 23,\n\tCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\n\t_0x4CC09C4B = 25,\n\t_0x034F3053 = 26,\n\t_0xD91BA7CC = 27,\n\t_0x5C8DC66E = 28,\n\t_0x8902EAA0 = 29,\n\t_0x6580B9D2 = 30,\n\t_0x0EF7A297 = 31,\n\t_0x6BF86E5B = 32,\n\tCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\n\tCPED_CONFIG_FLAG_HasHelmet = 34,\n\tCPED_CONFIG_FLAG_UseHelmet = 35,\n\t_0xEEB3D630 = 36,\n\t_0xB130D17B = 37,\n\t_0x5F071200 = 38,\n\tCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\n\t_0xC287AAFF = 40,\n\t_0x203328CC = 41,\n\tCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\n\tCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\n\tCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\n\t_0xEC4A8ACF = 45,\n\t_0xDB115BFA = 46,\n\tCPED_CONFIG_FLAG_PedBeingDeleted = 47,\n\tCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\n\t_0xF8E99565 = 49,\n\t_0xDD17FEE6 = 50,\n\t_0x7ED9B2C9 = 51,\n\t_0x655E8618 = 52,\n\t_0x5A6C1F6E = 53,\n\t_0xD749FC41 = 54,\n\t_0x357F63F3 = 55,\n\t_0xC5E60961 = 56,\n\t_0x29275C3E = 57,\n\tCPED_CONFIG_FLAG_IsFiring = 58,\n\tCPED_CONFIG_FLAG_WasFiring = 59,\n\tCPED_CONFIG_FLAG_IsStanding = 60,\n\tCPED_CONFIG_FLAG_WasStanding = 61,\n\tCPED_CONFIG_FLAG_InVehicle = 62,\n\tCPED_CONFIG_FLAG_OnMount = 63,\n\tCPED_CONFIG_FLAG_AttachedToVehicle = 64,\n\tCPED_CONFIG_FLAG_IsSwimming = 65,\n\tCPED_CONFIG_FLAG_WasSwimming = 66,\n\tCPED_CONFIG_FLAG_IsSkiing = 67,\n\tCPED_CONFIG_FLAG_IsSitting = 68,\n\tCPED_CONFIG_FLAG_KilledByStealth = 69,\n\tCPED_CONFIG_FLAG_KilledByTakedown = 70,\n\tCPED_CONFIG_FLAG_Knockedout = 71,\n\t_0x3E3C4560 = 72,\n\t_0x2994C7B7 = 73,\n\t_0x6D59D275 = 74,\n\tCPED_CONFIG_FLAG_UsingCoverPoint = 75,\n\tCPED_CONFIG_FLAG_IsInTheAir = 76,\n\t_0x2D493FB7 = 77,\n\tCPED_CONFIG_FLAG_IsAimingGun = 78,\n\t_0x14D69875 = 79,\n\t_0x40B05311 = 80,\n\t_0x8B230BC5 = 81,\n\t_0xC74E5842 = 82,\n\t_0x9EA86147 = 83,\n\t_0x674C746C = 84,\n\t_0x3E56A8C2 = 85,\n\t_0xC144A1EF = 86,\n\t_0x0548512D = 87,\n\t_0x31C93909 = 88,\n\t_0xA0269315 = 89,\n\t_0xD4D59D4D = 90,\n\t_0x411D4420 = 91,\n\t_0xDF4AEF0D = 92,\n\tCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\n\t_0x300E4CD3 = 94,\n\t_0xF1C5BF04 = 95,\n\t_0x89C2EF13 = 96,\n\tCPED_CONFIG_FLAG_VaultFromCover = 97,\n\t_0x02A852C8 = 98,\n\t_0x3D9407F1 = 99,\n\t_0x319B4558 = 100,\n\tCPED_CONFIG_FLAG_ForcedAim = 101,\n\t_0xB942D71A = 102,\n\t_0xD26C55A8 = 103,\n\t_0xB89E703B = 104,\n\tCPED_CONFIG_FLAG_ForceReload = 105,\n\t_0xD9E73DA2 = 106,\n\t_0xFF71DC2C = 107,\n\t_0x1E27E8D8 = 108,\n\t_0xF2C53966 = 109,\n\t_0xC4DBE247 = 110,\n\t_0x83C0A4BF = 111,\n\t_0x0E0FAF8C = 112,\n\t_0x26616660 = 113,\n\t_0x43B80B79 = 114,\n\t_0x0D2A9309 = 115,\n\t_0x12C1C983 = 116,\n\tCPED_CONFIG_FLAG_BumpedByPlayer = 117,\n\t_0xE586D504 = 118,\n\t_0x52374204 = 119,\n\tCPED_CONFIG_FLAG_IsHandCuffed = 120,\n\tCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\n\tCPED_CONFIG_FLAG_DisableMelee = 122,\n\t_0xFE714397 = 123,\n\t_0xB3E660BD = 124,\n\t_0x5FED6BFD = 125,\n\t_0xC9D6F66F = 126,\n\t_0x519BC986 = 127,\n\tCPED_CONFIG_FLAG_CanBeAgitated = 128,\n\t_0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult\n\t_0xDAB70E9F = 130,\n\t_0xE569438A = 131,\n\t_0xBBC77D6D = 132,\n\t_0xCB59EF0F = 133,\n\t_0x8C5EA971 = 134,\n\tCPED_CONFIG_FLAG_IsScuba = 135,\n\tCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\n\t_0xDCE59B58 = 137,\n\tCPED_CONFIG_FLAG_RidingTrain = 138,\n\tCPED_CONFIG_FLAG_ArrestResult = 139,\n\tCPED_CONFIG_FLAG_CanAttackFriendly = 140,\n\t_0x98A4BE43 = 141,\n\t_0x6901E731 = 142,\n\t_0x9EC9BF6C = 143,\n\t_0x42841A8F = 144,\n\tCPED_CONFIG_FLAG_ShootingAnimFlag = 145,\n\tCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\n\tCPED_CONFIG_FLAG_StairsDetected = 147,\n\tCPED_CONFIG_FLAG_SlopeDetected = 148,\n\t_0x1A15670B = 149,\n\t_0x61786EE5 = 150,\n\t_0xCB9186BD = 151,\n\t_0xF0710152 = 152,\n\t_0x43DFE310 = 153,\n\t_0xC43C624E = 154,\n\tCPED_CONFIG_FLAG_CanPerformArrest = 155,\n\tCPED_CONFIG_FLAG_CanPerformUncuff = 156,\n\tCPED_CONFIG_FLAG_CanBeArrested = 157,\n\t_0xF7960FF5 = 158,\n\t_0x59564113 = 159,\n\t_0x0C6C3099 = 160,\n\t_0x645F927A = 161,\n\t_0xA86549B9 = 162,\n\t_0x8AAF337A = 163,\n\t_0x13BAA6E7 = 164,\n\t_0x5FB9D1F5 = 165,\n\tCPED_CONFIG_FLAG_IsInjured = 166,\n\t_0x6398A20B = 167,\n\t_0xD8072639 = 168,\n\t_0xA05B1845 = 169,\n\t_0x83F6D220 = 170,\n\t_0xD8430331 = 171,\n\t_0x4B547520 = 172,\n\t_0xE66E1406 = 173,\n\t_0x1C4BFE0C = 174,\n\t_0x90008BFA = 175,\n\t_0x07C7A910 = 176,\n\t_0xF15F8191 = 177,\n\t_0xCE4E8BE2 = 178,\n\t_0x1D46E4F2 = 179,\n\tCPED_CONFIG_FLAG_IsInCustody = 180,\n\t_0xE4FD9B3A = 181,\n\t_0x67AE0812 = 182,\n\tCPED_CONFIG_FLAG_IsAgitated = 183,\n\tCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\n\t_0x7B2D325E = 185,\n\tCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\n\tCPED_CONFIG_FLAG_HasHurtStarted = 187,\n\tCPED_CONFIG_FLAG_DisableHurt = 188,\n\tCPED_CONFIG_FLAG_PlayerIsWeird = 189,\n\t_0x32FC208B = 190,\n\t_0x0C296E5A = 191,\n\t_0xE63B73EC = 192,\n\t_0x04E9CC80 = 193,\n\tCPED_CONFIG_FLAG_UsingScenario = 194,\n\tCPED_CONFIG_FLAG_VisibleOnScreen = 195,\n\t_0xD88C58A1 = 196,\n\t_0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide\n\t_0xEA02B420 = 198,\n\t_0x3F559CFF = 199,\n\t_0x8C55D029 = 200,\n\t_0x5E6466F6 = 201,\n\t_0xEB5AD706 = 202,\n\t_0x0EDDDDE7 = 203,\n\t_0xA64F7B1D = 204,\n\t_0x48532CBA = 205,\n\t_0xAA25A9E7 = 206,\n\t_0x415B26B9 = 207,\n\tCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\n\tCPED_CONFIG_FLAG_DodgedPlayer = 209,\n\t_0x67405504 = 210,\n\t_0x75DDD68C = 211,\n\t_0x2AD879B4 = 212,\n\t_0x51486F91 = 213,\n\t_0x32F79E21 = 214,\n\t_0xBF099213 = 215,\n\t_0x054AC8E2 = 216,\n\t_0x14E495CC = 217,\n\t_0x3C7DF9DF = 218,\n\t_0x848FFEF2 = 219,\n\tCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\n\t_0x2618E1CF = 221,\n\t_0x84F722FA = 222,\n\t_0xD1B87B1F = 223,\n\t_0x728AA918 = 224,\n\tCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\n\tCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\n\t_0x59E91185 = 227,\n\t_0x1EA7225F = 228,\n\tCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\n\t_0x6DCA7D88 = 230,\n\t_0xFC3E572D = 231,\n\t_0x08E9F9CF = 232,\n\t_0x2D3BA52D = 233,\n\t_0xFD2F53EA = 234,\n\t_0x31A1B03B = 235,\n\tCPED_CONFIG_FLAG_IsHoldingProp = 236,\n\t_0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead\n\t_0xCE57C9A3 = 238,\n\t_0x26149198 = 239,\n\t_0x1B33B598 = 240,\n\t_0x719B6E87 = 241,\n\t_0x13E8E8E8 = 242,\n\t_0xF29739AE = 243,\n\t_0xABEA8A74 = 244,\n\t_0xB60EA2BA = 245,\n\t_0x536B0950 = 246,\n\t_0x0C754ACA = 247,\n\tCPED_CONFIG_FLAG_DisableVehicleSeatRandomAnimations = 248,\n\t_0x12659168 = 249,\n\t_0x1BDF2F04 = 250,\n\t_0x7728FAA3 = 251,\n\t_0x6A807ED8 = 252,\n\tCPED_CONFIG_FLAG_OnStairs = 253,\n\t_0xE1A2F73F = 254,\n\t_0x5B3697C8 = 255,\n\t_0xF1EB20A9 = 256,\n\t_0x8B7DF407 = 257,\n\t_0x329DCF1A = 258,\n\t_0x8D90DD1B = 259,\n\t_0xB8A292B7 = 260,\n\t_0x8374B087 = 261,\n\t_0x2AF558F0 = 262,\n\t_0x82251455 = 263,\n\t_0x30CF498B = 264,\n\t_0xE1CD50AF = 265,\n\t_0x72E4AE48 = 266,\n\t_0xC2657EA1 = 267,\n\t_0x29FF6030 = 268,\n\t_0x8248A5EC = 269,\n\tCPED_CONFIG_FLAG_OnStairSlope = 270,\n\t_0xA0897933 = 271,\n\tCPED_CONFIG_FLAG_DontBlipCop = 272,\n\tCPED_CONFIG_FLAG_ClimbedShiftedFence = 273,\n\t_0xF7823618 = 274,\n\t_0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped\n\tCPED_CONFIG_FLAG_EdgeDetected = 276,\n\t_0x92B67896 = 277,\n\t_0xCAD677C9 = 278,\n\tCPED_CONFIG_FLAG_AvoidTearGas = 279,\n\t_0x5276AC7B = 280,\n\t_0x1032692A = 281,\n\t_0xDA23E7F1 = 282,\n\t_0x9139724D = 283,\n\t_0xA1457461 = 284,\n\t_0x4186E095 = 285,\n\t_0xAC68E2EB = 286,\n\tCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\n\tCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\n\t_0x1B9EE8A1 = 289,\n\t_0xF3F5758C = 290,\n\t_0x2A9307F1 = 291,\n\t_0x7403D216 = 292,\n\t_0xA06A3C6C = 293,\n\tCPED_CONFIG_FLAG_DisableShockingEvents = 294,\n\t_0xF8DA25A5 = 295,\n\t_0x7EF55802 = 296,\n\t_0xB31F1187 = 297,\n\t_0x84315402 = 298,\n\t_0x0FD69867 = 299,\n\t_0xC7829B67 = 300,\n\tCPED_CONFIG_FLAG_DisablePedConstraints = 301,\n\t_0x6D23CF25 = 302,\n\t_0x2ADA871B = 303,\n\t_0x47BC8A58 = 304,\n\t_0xEB692FA5 = 305,\n\t_0x4A133C50 = 306,\n\t_0xC58099C3 = 307,\n\t_0xF3D76D41 = 308,\n\t_0xB0EEE9F2 = 309,\n\tCPED_CONFIG_FLAG_IsInCluster = 310,\n\t_0x0FA153EF = 311,\n\t_0xD73F5CD3 = 312,\n\t_0xD4136C22 = 313,\n\t_0xE404CA6B = 314,\n\t_0xB9597446 = 315,\n\t_0xD5C98277 = 316,\n\t_0xD5060A9C = 317,\n\t_0x3E5F1CBB = 318,\n\t_0xD8BE1D54 = 319,\n\t_0x0B1F191F = 320,\n\t_0xC995167A = 321,\n\tCPED_CONFIG_FLAG_HasHighHeels = 322,\n\t_0x86B01E54 = 323,\n\t_0x3A56FE15 = 324,\n\t_0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario\n\t_0xBBF47729 = 326,\n\t_0x22B668A8 = 327,\n\t_0x2624D4D4 = 328,\n\tCPED_CONFIG_FLAG_DisableTalkTo = 329,\n\tCPED_CONFIG_FLAG_DontBlip = 330,\n\tCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\n\t_0x630F55F3 = 332,\n\t_0x150468FD = 333,\n\t_0x914EBD6B = 334,\n\t_0x79AF3B6D = 335,\n\t_0x75C7A632 = 336,\n\t_0x52D530E2 = 337,\n\t_0xDB2A90E0 = 338,\n\t_0x5922763D = 339,\n\t_0x12ADB567 = 340,\n\t_0x105C8518 = 341,\n\t_0x106F703D = 342,\n\t_0xED152C3E = 343,\n\t_0xA0EFE6A8 = 344,\n\t_0xBF348C82 = 345,\n\t_0xCDDFE830 = 346,\n\t_0x7B59BD9B = 347,\n\t_0x0124C788 = 348,\n\tCPED_CONFIG_FLAG_EquipJetpack = 349,\n\t_0x08D361A5 = 350,\n\t_0xE13D1F7C = 351,\n\t_0x40E25FB9 = 352,\n\t_0x930629D9 = 353,\n\t_0xECCF0C7F = 354,\n\t_0xB6E9613B = 355,\n\t_0x490C0478 = 356,\n\t_0xE8865BEA = 357,\n\t_0xF3C34A29 = 358,\n\tCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\n\t_0xF660E115 = 360,\n\t_0xAB0E6DED = 361,\n\tCPED_CONFIG_FLAG_HasReserveParachute = 362,\n\tCPED_CONFIG_FLAG_UseReserveParachute = 363,\n\t_0x5C5D9CD3 = 364,\n\t_0x8F7701F3 = 365,\n\t_0xBC4436AD = 366,\n\t_0xD7E07D37 = 367,\n\t_0x03C4FD24 = 368,\n\t_0x7675789A = 369,\n\t_0xB7288A88 = 370,\n\t_0xC06B6291 = 371,\n\t_0x95A4A805 = 372,\n\t_0xA8E9A042 = 373,\n\tCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\n\t_0xBAC674B3 = 375,\n\t_0x147F1FFB = 376,\n\t_0x4376DD79 = 377,\n\t_0xCD3DB518 = 378,\n\t_0xFE4BA4B6 = 379,\n\t_0x5DF03A55 = 380,\n\t_0xBCD816CD = 381,\n\t_0xCF02DD69 = 382,\n\t_0xF73AFA2E = 383,\n\t_0x80B9A9D0 = 384,\n\t_0xF601F7EE = 385,\n\t_0xA91350FC = 386,\n\t_0x3AB23B96 = 387,\n\tCPED_CONFIG_FLAG_IsClimbingLadder = 388,\n\tCPED_CONFIG_FLAG_HasBareFeet = 389,\n\t_0xB4B1CD4C = 390,\n\t_0x5459AFB8 = 391,\n\t_0x54F27667 = 392,\n\t_0xC11D3E8F = 393,\n\t_0x5419EB3E = 394,\n\t_0x82D8DBB4 = 395,\n\t_0x33B02D2F = 396,\n\t_0xAE66176D = 397,\n\t_0xA2692593 = 398,\n\t_0x714C7E31 = 399,\n\t_0xEC488AC7 = 400,\n\t_0xAE398504 = 401,\n\t_0xABC58D72 = 402,\n\t_0x5E5B9591 = 403,\n\t_0x6BA1091E = 404,\n\t_0x77840177 = 405,\n\t_0x1C7ACAC4 = 406,\n\t_0x124420E9 = 407,\n\t_0x75A65587 = 408,\n\t_0xDFD2D55B = 409,\n\t_0xBDD39919 = 410,\n\t_0x43DEC267 = 411,\n\t_0xE42B7797 = 412,\n\tCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\n\t_0x4F8149F5 = 414,\n\t_0xDD9ECA7A = 415,\n\t_0x9E7EF9D2 = 416,\n\t_0x2C6ED942 = 417,\n\tCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\n\t_0xA488727D = 419,\n\t_0xCFF5F6DE = 420,\n\t_0x6D614599 = 421,\n\tCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\n\t_0xFE401D26 = 423,\n\tCPED_CONFIG_FLAG_FallsLikeAircraft = 424,\n\t_0x2B42AE82 = 425,\n\t_0x7A95734F = 426,\n\t_0xDF4D8617 = 427,\n\t_0x578F1F14 = 428,\n\tCPED_CONFIG_FLAG_DisableStartEngine = 429,\n\tCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\n\t_0x153C9500 = 431,\n\t_0xCB7A632E = 432,\n\t_0xDE727981 = 433,\n\tCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\n\t_0x12BBB935 = 435,\n\t_0xAD0A1277 = 436,\n\t_0xEA6AA46A = 437,\n\tCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\n\t_0xCB7F3A1E = 439,\n\t_0x50178878 = 440,\n\t_0x051B4F0D = 441,\n\t_0x2FC3DECC = 442,\n\t_0xC0030B0B = 443,\n\t_0xBBDAF1E9 = 444,\n\t_0x944FE59C = 445,\n\t_0x506FBA39 = 446,\n\t_0xDD45FE84 = 447,\n\t_0xE698AE75 = 448,\n\t_0x199633F8 = 449,\n\tCPED_CONFIG_FLAG_PedIsArresting = 450,\n\tCPED_CONFIG_FLAG_IsDecoyPed = 451,\n\t_0x3A251D83 = 452,\n\t_0xA56F6986 = 453,\n\t_0x1D19C622 = 454,\n\t_0xB68D3EAB = 455,\n\tCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\n\t_0x4BD5EBAD = 457,\n}\n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_CONFIG_FLAG",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flagId",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9cfbe10d",
    "ogHash": "0x1913FE4CBF41C463",
    "apiset": ["server"]
  },
  "0x374827c2": {
    "doc": "!\n<summary>\n```\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_GO_TO_ENTITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "target",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "duration",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "distance",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "speed",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p5",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p6",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x374827c2",
    "ogHash": "0x6A071245EB0D1882",
    "apiset": ["server"]
  },
  "0x262663c5": {
    "doc": "!\n<summary>\nCreate a permanent voice channel.\n</summary>\n<param name=\"id\">ID of the channel.</param>\n\t",
    "name": "MUMBLE_CREATE_CHANNEL",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "id",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x262663c5",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x680c90ee": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n<returns>A boolean to tell if the player is invincible.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "GET_PLAYER_INVINCIBLE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x680c90ee",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa0dbd08d": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_DASHBOARD_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "color",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0xa0dbd08d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x829f2e2": {
    "doc": "!\n<summary>\nThis native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hats\n**1**: Glasses\n**2**: Ears\n**6**: Watches\n**7**: Bracelets\n\nList of Prop IDs\n\n```cpp\n// Props\nenum eAnchorPoints\n{\n    ANCHOR_HEAD = 0, // \"p_head\"\n    ANCHOR_EYES = 1, // \"p_eyes\"\n    ANCHOR_EARS = 2, // \"p_ears\"\n    ANCHOR_MOUTH = 3, // \"p_mouth\"\n    ANCHOR_LEFT_HAND = 4, // \"p_lhand\"\n    ANCHOR_RIGHT_HAND = 5, // \"p_rhand\"\n    ANCHOR_LEFT_WRIST = 6, // \"p_lwrist\"\n    ANCHOR_RIGHT_WRIST = 7, // \"p_rwrist\"\n    ANCHOR_HIP = 8, // \"p_lhip\"\n    ANCHOR_LEFT_FOOT = 9, // \"p_lfoot\"\n    ANCHOR_RIGHT_FOOT = 10, // \"p_rfoot\"\n    ANCHOR_PH_L_HAND = 11, // \"ph_lhand\"\n    ANCHOR_PH_R_HAND = 12, // \"ph_rhand\"\n    NUM_ANCHORS = 13,\n};\n```\n</summary>\n<param name=\"ped\">The ped handle.</param>\n<param name=\"componentId\">The component that you want to set. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80).</param>\n<param name=\"drawableId\">The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47).</param>\n<param name=\"textureId\">The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171).</param>\n<param name=\"attach\">Attached or not.</param>\n\t",
    "rpc": true,
    "name": "SET_PED_PROP_INDEX",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "componentId",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "drawableId",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "textureId",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "attach",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x829f2e2",
    "ogHash": "0x93376B65A266EB5F",
    "apiset": ["server"]
  },
  "0x54c06897": {
    "doc": "!\n<summary>\nGets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.\n</summary>\n<param name=\"playerSrc\">A player.</param>\n<param name=\"index\">Index between 0 and GET_NUM_PLAYER_TOKENS.</param>\n<returns>A token value.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_TOKEN",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x54c06897",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x70559ac7": {
    "doc": "!\n<summary>\n```\nApplies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\ncollection - PedDecorationCollection filename hash\noverlay - Item name hash\nExample:\nEntry inside \"mpbeach_overlays.xml\" -\n<Item>\n  <uvPos x=\"0.500000\" y=\"0.500000\" />\n  <scale x=\"0.600000\" y=\"0.500000\" />\n  <rotation value=\"0.000000\" />\n  <nameHash>FM_Hair_Fuzz</nameHash>\n  <txdHash>mp_hair_fuzz</txdHash>\n  <txtHash>mp_hair_fuzz</txtHash>\n  <zone>ZONE_HEAD</zone>\n  <type>TYPE_TATTOO</type>\n  <faction>FM</faction>\n  <garment>All</garment>\n  <gender>GENDER_DONTCARE</gender>\n  <award />\n  <awardLevel />\n</Item>\nCode:\nPED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n```\n</summary>\n\t",
    "rpc": true,
    "name": "ADD_PED_DECORATION_FROM_HASHES",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "collection",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "overlay",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x70559ac7",
    "ogHash": "0x5F5D1665E352A839",
    "apiset": ["server"]
  },
  "0x80e4659b": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_EXTRA_COLOURS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "pearlescentColor",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "wheelColor",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0x80e4659b",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xe52d9680": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_GUID",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe52d9680",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x776e864": {
    "doc": "!\n<summary>\nGets the amount of metadata values with the specified key existing in the specified resource's manifest.\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)\n</summary>\n<param name=\"resourceName\">The resource name.</param>\n<param name=\"metadataKey\">The key to look up in the resource manifest.</param>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_NUM_RESOURCE_METADATA",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "metadataKey",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x776e864",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xf97b1c93": {
    "doc": "!\n\t",
    "name": "ENABLE_ENHANCED_HOST_SUPPORT",
    "arguments": [
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "enabled",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf97b1c93",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x42098b5": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_VEHICLE_EXTRA_TURNED_ON",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "extraId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x42098b5",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x84fe084": {
    "doc": "!\n<summary>\nGets the script task command currently assigned to the ped.\n</summary>\n<param name=\"ped\">The target ped.</param>\n<returns>The script task command currently assigned to the ped. A value of 0x811E343C denotes no script task is assigned.</returns>\n\t",
    "returns": { "name": "Hash", "nativeType": "int" },
    "name": "GET_PED_SCRIPT_TASK_COMMAND",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x84fe084",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x561c060b": {
    "doc": "!\n\t",
    "name": "EXECUTE_COMMAND",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "commandString",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x561c060b",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x6b171e87": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "PERFORM_HTTP_REQUEST_INTERNAL_EX",
    "arguments": [
      {
        "type": { "name": "object", "nativeType": "object" },
        "name": "requestData",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6b171e87",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb39ca35c": {
    "doc": "!\n<summary>\nScope exit for profiler.\n</summary>\n\t",
    "name": "PROFILER_EXIT_SCOPE",
    "arguments": [],
    "aliases": [],
    "hash": "0xb39ca35c",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x91310870": {
    "doc": "!\n<summary>\nThe backing function for TriggerEvent.\n</summary>\n\t",
    "name": "TRIGGER_EVENT_INTERNAL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventPayload",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "payloadLength",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x91310870",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x25eb5873": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_VEHICLE_SIREN_ON",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x25eb5873",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x65c16d57": {
    "doc": "!\n<summary>\nFreezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.\n</summary>\n<param name=\"entity\">The entity to freeze/unfreeze.</param>\n<param name=\"toggle\">Freeze or unfreeze entity.</param>\n\t",
    "rpc": true,
    "name": "FREEZE_ENTITY_POSITION",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "toggle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x65c16d57",
    "ogHash": "0x428CA6DBD1094446",
    "apiset": ["server"]
  },
  "0x62fc38d0": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x62fc38d0",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xd8c3c1cd": {
    "doc": "!\n<summary>\nRemoves the blip from your map.\n</summary>\n<param name=\"blip\">Blip handle to remove.</param>\n\t",
    "rpc": true,
    "name": "REMOVE_BLIP",
    "arguments": [
      {
        "annotations": {},
        "type": { "name": "Blip", "nativeType": "int" },
        "name": "blip",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0xd8c3c1cd",
    "ogHash": "0x86A652570E5F25DD",
    "apiset": ["server"]
  },
  "0x429461c3": {
    "doc": "!\n<summary>\nReturns whether or not the specified player has enough information to start a commerce session for.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n<returns>True or false.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "CAN_PLAYER_START_COMMERCE_SESSION",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x429461c3",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb88a73ad": {
    "doc": "!\n<summary>\nSchedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.\n</summary>\n<param name=\"resourceName\">The resource to tick.</param>\n\t",
    "name": "SCHEDULE_RESOURCE_TICK",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb88a73ad",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x3e1e286d": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "GIVE_WEAPON_COMPONENT_TO_PED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "weaponHash",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "componentHash",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x3e1e286d",
    "ogHash": "0xD966D51AA5B28BB9",
    "apiset": ["server"]
  },
  "0xa0f2201f": {
    "doc": "!\n<summary>\nSets the entity lockdown mode for a specific routing bucket.\n\nLockdown modes are:\n\n| Mode       | Meaning                                                    |\n| ---------- | ---------------------------------------------------------- |\n| `strict`   | No entities can be created by clients at all.              |\n| `relaxed`  | Only script-owned entities created by clients are blocked. |\n| `inactive` | Clients can create any entity they want.                   |\n</summary>\n<param name=\"bucketId\">The routing bucket ID to adjust.</param>\n<param name=\"mode\">One of aforementioned modes.</param>\n\t",
    "name": "SET_ROUTING_BUCKET_ENTITY_LOCKDOWN_MODE",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "bucketId",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "mode",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa0f2201f",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xe8522d58": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_VEHICLE_NUMBER_PLATE_TEXT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe8522d58",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4152c90": {
    "doc": "!\n<summary>\nNonsynchronous [DELETE_RESOURCE_KVP](#\\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).\n</summary>\n<param name=\"key\">The key to delete</param>\n\t",
    "name": "DELETE_RESOURCE_KVP_NO_SYNC",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4152c90",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4626756c": {
    "name": "ADD_BLIP_FOR_RADIUS",
    "ogHash": "0x46818D79B1F7499A",
    "doc": "!\n<summary>\nCreate a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\\_0xC6F43D0E))\n\nExample image:\n![example](https://i.imgur.com/9hQl3DB.png)\n</summary>\n<param name=\"posX\">The x position of the blip (you can also send a vector3 instead of the bulk coordinates)</param>\n<param name=\"posY\">The y position of the blip (you can also send a vector3 instead of the bulk coordinates)</param>\n<param name=\"posZ\">The z position of the blip (you can also send a vector3 instead of the bulk coordinates)</param>\n<param name=\"radius\">The number that defines the radius of the blip circle</param>\n<returns>The blip handle that can be manipulated with every `SetBlip` natives</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "posX",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "posY",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "posZ",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "radius",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Blip", "nativeType": "int" },
    "hash": "0x4626756c"
  },
  "0xd17afcd8": {
    "doc": "!\n<summary>\n```\nFlags:\nSPC_AMBIENT_SCRIPT = (1 << 1),\nSPC_CLEAR_TASKS = (1 << 2),\nSPC_REMOVE_FIRES = (1 << 3),\nSPC_REMOVE_EXPLOSIONS = (1 << 4),\nSPC_REMOVE_PROJECTILES = (1 << 5),\nSPC_DEACTIVATE_GADGETS = (1 << 6),\nSPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),\nSPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),\nSPC_ALLOW_PLAYER_DAMAGE = (1 << 9),\nSPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),\nSPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),\nSPC_ALLOW_PAD_SHAKE = (1 << 12)\nSee: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt\n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PLAYER_CONTROL",
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "player",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "bHasControl",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flags",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd17afcd8",
    "ogHash": "0x8D32347D6D4C40A2",
    "apiset": ["server"]
  },
  "0x288ad228": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x288ad228",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2ce311a7": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PED_ARMOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2ce311a7",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xec09db1b": {
    "doc": "!\n<summary>\nUsed for freemode (online) characters.\n\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over\n</summary>\n\t",
    "rpc": true,
    "name": "_SET_PED_EYE_COLOR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xec09db1b",
    "ogHash": "0x50B56988B170AFDF",
    "apiset": ["server"]
  },
  "0x12038599": {
    "doc": "!\n<summary>\nReturns whether or not the player exists\n</summary>\n<returns>True if the player exists, false otherwise</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "DOES_PLAYER_EXIST",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x12038599",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb8278882": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "SET_CURRENT_PED_WEAPON",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "weaponHash",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "bForceInHand",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb8278882",
    "ogHash": "0xADF692B254977C0C",
    "apiset": ["server"]
  },
  "0xb1bd08d": {
    "doc": "!\n<summary>\nGets the entity type (as an integer), which can be one of the following defined down below:\n\n**The following entities will return type `1`:**\n\n*   Ped\n*   Player\n*   Animal (Red Dead Redemption 2)\n*   Horse (Red Dead Redemption 2)\n\n**The following entities will return type `2`:**\n\n*   Automobile\n*   Bike\n*   Boat\n*   Heli\n*   Plane\n*   Submarine\n*   Trailer\n*   Train\n*   DraftVeh (Red Dead Redemption 2)\n\n**The following entities will return type `3`:**\n\n*   Object\n*   Door\n*   Pickup\n\nOtherwise, a value of `0` will be returned.\n</summary>\n<param name=\"entity\">The entity to get the type of.</param>\n<returns>The entity type returned as an integer value.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_ENTITY_TYPE",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb1bd08d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xdd75460a": {
    "name": "CREATE_VEHICLE",
    "ogHash": "0xAF35D0D2583051B0",
    "doc": "!\n<summary>\nCreates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating\nscript as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n```\nNativeDB Added Parameter 8: BOOL p7\n```\n</summary>\n<param name=\"modelHash\">The model of vehicle to spawn.</param>\n<param name=\"x\">Spawn coordinate X component.</param>\n<param name=\"y\">Spawn coordinate Y component.</param>\n<param name=\"z\">Spawn coordinate Z component.</param>\n<param name=\"heading\">Heading to face towards, in degrees.</param>\n<param name=\"isNetwork\">Whether to create a network object for the vehicle. If false, the vehicle exists only locally.</param>\n<param name=\"netMissionEntity\">Whether to register the vehicle as pinned to the script host in the R\\* network model.</param>\n<returns>A script handle (fwScriptGuid index) for the vehicle, or `0` if the vehicle failed to be created.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "modelHash",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "heading",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isNetwork",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "netMissionEntity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Entity", "nativeType": "int" },
    "hash": "0xdd75460a"
  },
  "0x1d5d50c2": {
    "doc": "!\n<summary>\nChecks if the player is currently muted\n</summary>\n<param name=\"playerSrc\">The player to get the mute state for</param>\n<returns>Whether or not the player is muted</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "MUMBLE_IS_PLAYER_MUTED",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1d5d50c2",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x167aba27": {
    "doc": "!\n<summary>\nRequests whether or not the player owns the specified SKU.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n<param name=\"skuId\">The ID of the SKU.</param>\n<returns>A boolean.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "DOES_PLAYER_OWN_SKU",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "skuId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x167aba27",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xd7147656": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_HEADLIGHTS_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd7147656",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x5240da5a": {
    "doc": "!\n<summary>\nA getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B).\n</summary>\n<param name=\"key\">The key to fetch</param>\n<returns>The string value stored under the specified key, or nil/null if not found.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_RESOURCE_KVP_STRING",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x5240da5a",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xc7d2c20c": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n<returns>A boolean.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PLAYER_USING_SUPER_JUMP",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc7d2c20c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x5ab552c6": {
    "doc": "!\n<summary>\n[Animations list](https://alexguirre.github.io/animations-list/)\n\n```\nfloat blendInSpeed > normal speed is 8.0f\n----------------------  \nfloat blendOutSpeed > normal speed is 8.0f\n----------------------  \nint duration: time in millisecond  \n----------------------  \n-1 _ _ _ _ _ _ _> Default (see flag)  \n0 _ _ _ _ _ _ _ > Not play at all  \nSmall value _ _ > Slow down animation speed  \nOther _ _ _ _ _ > freeze player control until specific time (ms) has   \n_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be   \n_ _ _ _ _ _ _ _ _ controllable.)  \nint flag:  \n----------------------  \nenum eAnimationFlags  \n{  \n ANIM_FLAG_NORMAL = 0,  \n   ANIM_FLAG_REPEAT = 1,  \n   ANIM_FLAG_STOP_LAST_FRAME = 2,  \n   ANIM_FLAG_UPPERBODY = 16,  \n   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,  \n   ANIM_FLAG_CANCELABLE = 120,  \n};  \nOdd number : loop infinitely  \nEven number : Freeze at last frame  \nMultiple of 4: Freeze at last frame but controllable  \n01 to 15 > Full body  \n10 to 31 > Upper body  \n32 to 47 > Full body > Controllable  \n48 to 63 > Upper body > Controllable  \n...  \n001 to 255 > Normal  \n256 to 511 > Garbled  \n...  \nplaybackRate:  \nvalues are between 0.0 and 1.0  \nlockX:    \n0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3  \n> 1 for mini@sprunk  \nlockY:  \n0 in most cases   \n1 for missfam5_yoga, missfra1mcs_2_crew_react  \nlockZ:   \n    0 for single player   \n    Can be 1 but only for MP  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_PLAY_ANIM",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "animDictionary",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "animationName",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "blendInSpeed",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "blendOutSpeed",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "duration",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flag",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "playbackRate",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "lockX",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "lockY",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "lockZ",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x5ab552c6",
    "ogHash": "0xEA47FE3719165B94",
    "apiset": ["server"]
  },
  "0xe0ff064d": {
    "doc": "!\n<summary>\nSet the heading of an entity in degrees also known as \"Yaw\".\n</summary>\n<param name=\"entity\">The entity to set the heading for.</param>\n<param name=\"heading\">The heading in degrees.</param>\n\t",
    "rpc": true,
    "name": "SET_ENTITY_HEADING",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "heading",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe0ff064d",
    "ogHash": "0x8E2530AA8ADA980E",
    "apiset": ["server"]
  },
  "0x332169f5": {
    "doc": "!\n<summary>\nReturns all vehicle handles known to the server.\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```\n</summary>\n<returns>An object containing a list of vehicle handles.</returns>\n\t",
    "returns": { "name": "object", "nativeType": "object" },
    "name": "GET_ALL_VEHICLES",
    "arguments": [],
    "aliases": [],
    "hash": "0x332169f5",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb7f70784": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_ENTITY_SCRIPT",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb7f70784",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x60746b88": {
    "doc": "!\n<summary>\nFor more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.\n\n**Other information:**\n\nIDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>\n\nThis native function is often called prior to calling natives such as:\n\n*   [`SetPedHairColor`](#0xBB43F090)\n*   [`SetPedHeadOverlayColor`](#0x78935A27)\n*   [`SetPedHeadOverlay`](#0xD28DBA90)\n*   [`SetPedFaceFeature`](#0x6C8D4458)\n</summary>\n<param name=\"ped\">The ped entity</param>\n<param name=\"shapeFirstID\">Controls the shape of the first ped's face</param>\n<param name=\"shapeSecondID\">Controls the shape of the second ped's face</param>\n<param name=\"shapeThirdID\">Controls the shape of the third ped's face</param>\n<param name=\"skinFirstID\">Controls the first id's skin tone</param>\n<param name=\"skinSecondID\">Controls the second id's skin tone</param>\n<param name=\"skinThirdID\">Controls the third id's skin tone</param>\n<param name=\"shapeMix\">0.0 - 1.0 Of whose characteristics to take Mother -> Father (shapeFirstID and shapeSecondID)</param>\n<param name=\"skinMix\">0.0 - 1.0 Of whose characteristics to take Mother -> Father (skinFirstID and skinSecondID)</param>\n<param name=\"thirdMix\">Overrides the others in favor of the third IDs.</param>\n<param name=\"isParent\">IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.</param>\n\t",
    "rpc": true,
    "name": "SET_PED_HEAD_BLEND_DATA",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "shapeFirstID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "shapeSecondID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "shapeThirdID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "skinFirstID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "skinSecondID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "skinThirdID",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "shapeMix",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "skinMix",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "thirdMix",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isParent",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x60746b88",
    "ogHash": "0x9414E18B9434C2FE",
    "apiset": ["server"]
  },
  "0xdf70b41b": {
    "doc": "!\n<summary>\nSets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.\n</summary>\n<param name=\"entity\">The entity to change coordinates for.</param>\n<param name=\"xPos\">The X coordinate.</param>\n<param name=\"yPos\">The Y coordinate.</param>\n<param name=\"zPos\">The Z coordinate, ground level.</param>\n<param name=\"alive\">Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.</param>\n<param name=\"deadFlag\">Whether to disable physics for dead peds, too, and not just living peds.</param>\n<param name=\"ragdollFlag\">A special flag used for ragdolling peds.</param>\n<param name=\"clearArea\">Whether to clear any entities in the target area.</param>\n\t",
    "rpc": true,
    "name": "SET_ENTITY_COORDS",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "xPos",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "yPos",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "zPos",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "alive",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "deadFlag",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "ragdollFlag",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "clearArea",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdf70b41b",
    "ogHash": "0x06843DA7060A026B",
    "apiset": ["server"]
  },
  "0xf4e2079d": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "DUPLICATE_FUNCTION_REFERENCE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "referenceIdentity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf4e2079d",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xd4f7b05c": {
    "doc": "!\n<summary>\nThis native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\n**1**: Mask\n**2**: Hair\n**3**: Torso\n**4**: Leg\n**5**: Parachute / bag\n**6**: Shoes\n**7**: Accessory\n**8**: Undershirt\n**9**: Kevlar\n**10**: Badge\n**11**: Torso 2\n\nList of Component IDs\n\n```cpp\n// Components\nenum ePedVarComp\n{\n    PV_COMP_INVALID = 0xFFFFFFFF,\n    PV_COMP_HEAD = 0, // \"HEAD\"\n    PV_COMP_BERD = 1, // \"BEARD\"\n    PV_COMP_HAIR = 2, // \"HAIR\"\n    PV_COMP_UPPR = 3, // \"UPPER\"\n    PV_COMP_LOWR = 4, // \"LOWER\"\n    PV_COMP_HAND = 5, // \"HAND\"\n    PV_COMP_FEET = 6, // \"FEET\"\n    PV_COMP_TEEF = 7, // \"TEETH\"\n    PV_COMP_ACCS = 8, // \"ACCESSORIES\"\n    PV_COMP_TASK = 9, // \"TASK\"\n    PV_COMP_DECL = 10, // \"DECL\"\n    PV_COMP_JBIB = 11, // \"JBIB\"\n    PV_COMP_MAX = 12,\n};\n```\n</summary>\n<param name=\"ped\">The ped handle.</param>\n<param name=\"componentId\">The component that you want to set.</param>\n<param name=\"drawableId\">The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842).</param>\n<param name=\"textureId\">The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD).</param>\n<param name=\"paletteId\">0 to 3.</param>\n\t",
    "rpc": true,
    "name": "SET_PED_COMPONENT_VARIATION",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "componentId",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "drawableId",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "textureId",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "paletteId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd4f7b05c",
    "ogHash": "0x262B14F48D29DE80",
    "apiset": ["server"]
  },
  "0xf1543251": {
    "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER",
    "ns": "CFX",
    "doc": "!\n<summary>\nA getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\\_0x2D83BC011CA14A3C).\n</summary>\n<param name=\"playerId\">The player index.</param>\n<returns>The value of player weapon defense modifier.</returns>\n\t",
    "game": "gta5",
    "apiset": ["shared"],
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "playerId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "float", "nativeType": "float" },
    "hash": "0xf1543251"
  },
  "0xc833bbe1": {
    "doc": "!\n<param name=\"ped\">The target ped.</param>\n<returns>Whether or not the ped is ragdolling.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_PED_RAGDOLL",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc833bbe1",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xdd379006": {
    "doc": "!\n<param name=\"prefix\">A prefix match</param>\n<returns>A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "START_FIND_KVP",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "prefix",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdd379006",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x9c9a3be0": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "HAS_ENTITY_BEEN_MARKED_AS_NO_LONGER_NEEDED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9c9a3be0",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7dc6d022": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "GET_IS_VEHICLE_ENGINE_RUNNING",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7dc6d022",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa635f451": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "CLEAR_PED_SECONDARY_TASK",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa635f451",
    "ogHash": "0x176CECF6F920D707",
    "apiset": ["server"]
  },
  "0xdef0480b": {
    "doc": "!\n<summary>\nRequests whether or not the player owns the specified package.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n<param name=\"skuId\">The package ID on Tebex.</param>\n<returns>A boolean.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "DOES_PLAYER_OWN_SKU_EXT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "skuId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdef0480b",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4039b485": {
    "doc": "!\n<summary>\nReturns the current state of the specified resource.\n</summary>\n<param name=\"resourceName\">The name of the resource.</param>\n<returns>The resource state. One of `\"missing\", \"started\", \"starting\", \"stopped\", \"stopping\", \"uninitialized\" or \"unknown\"`.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_RESOURCE_STATE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4039b485",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xc866a984": {
    "doc": "!\n<summary>\n```\nSets Ped Default Clothes  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_DEFAULT_COMPONENT_VARIATION",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc866a984",
    "ogHash": "0x45EEE61580806D63",
    "apiset": ["server"]
  },
  "0x44b0e5e2": {
    "doc": "!\n<summary>\nGets the stage of the peds scripted task.\n</summary>\n<param name=\"ped\">The target ped.</param>\n<returns>The stage of the ped's scripted task. A value of 3 denotes no script task is assigned.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PED_SCRIPT_TASK_STAGE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x44b0e5e2",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x400f9556": {
    "doc": "!\n<param name=\"vehicle\">The vehicle to set the plate for</param>\n<param name=\"plateText\">The text to set the plate to, 8 chars maximum</param>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_NUMBER_PLATE_TEXT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "plateText",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x400f9556",
    "ogHash": "0x95A88F0B409CDA47",
    "apiset": ["server"]
  },
  "0x920c2517": {
    "doc": "!\n<summary>\n```\np2 often set to 1000.0 in the decompiled scripts.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_BODY_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x920c2517",
    "ogHash": "0xB77D05AC8C78AADB",
    "apiset": ["server"]
  },
  "0x1d14f4fe": {
    "doc": "!\n<summary>\nRequests whether or not the commerce data for the specified player has loaded from Tebex.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n<returns>A boolean.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PLAYER_COMMERCE_INFO_LOADED_EXT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1d14f4fe",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x774a4c54": {
    "doc": "!\n<summary>\nSet the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.\n\nAs per usual, make sure to request the model first and wait until it has loaded.\n</summary>\n<param name=\"player\">The player to set the model for</param>\n<param name=\"model\">The model to use</param>\n\t",
    "rpc": true,
    "name": "SET_PLAYER_MODEL",
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "player",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "model",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x774a4c54",
    "ogHash": "0x00A1CADD00108836",
    "apiset": ["server"]
  },
  "0xdfb9a2a2": {
    "doc": "!\n<summary>\n```\nSimply sets you as invincible (Health will not deplete).  \nUse 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:  \n*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PLAYER_INVINCIBLE",
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "player",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "toggle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdfb9a2a2",
    "ogHash": "0x239528EACDC3E7DE",
    "apiset": ["server"]
  },
  "0xd4bef069": {
    "doc": "!\n<summary>\nReturns all commands that are registered in the command system.\nThe data returned adheres to the following layout:\n\n```\n[\n{\n\"name\": \"cmdlist\"\n},\n{\n\"name\": \"command1\"\n}\n]\n```\n</summary>\n<returns>An object containing registered commands.</returns>\n\t",
    "returns": { "name": "object", "nativeType": "object" },
    "name": "GET_REGISTERED_COMMANDS",
    "arguments": [],
    "aliases": [],
    "hash": "0xd4bef069",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x1e35dbba": {
    "doc": "!\n\t",
    "name": "TEMP_BAN_PLAYER",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "reason",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1e35dbba",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xefeed13c": {
    "doc": "!\n<param name=\"ped\">The target ped.</param>\n<returns>Whether or not the ped is strafing.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_PED_STRAFING",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xefeed13c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8e3222b7": {
    "doc": "!\n<summary>\nOnly works for vehicle and peds\n</summary>\n<param name=\"entity\">The entity to check the health of</param>\n<returns>If the entity is a vehicle it will return 0-1000\nIf the entity is a ped it will return 0-200\nIf the entity is an object it will return 0</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_ENTITY_HEALTH",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8e3222b7",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xdbdd79fa": {
    "doc": "!\n<summary>\nFlags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_LEAVE_ANY_VEHICLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p1",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flags",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdbdd79fa",
    "ogHash": "0x504D54DF3F6F2247",
    "apiset": ["server"]
  },
  "0x65d4a35d": {
    "doc": "!\n<param name=\"seatIndex\">See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669).</param>\n\t",
    "rpc": true,
    "name": "TASK_WARP_PED_INTO_VEHICLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "seatIndex",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x65d4a35d",
    "ogHash": "0x9A7D091411C5F684",
    "apiset": ["server"]
  },
  "0x557b586a": {
    "doc": "!\n<summary>\nA getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8).\n</summary>\n<param name=\"key\">The key to fetch</param>\n<returns>The integer value stored under the specified key, or 0 if not found.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_RESOURCE_KVP_INT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x557b586a",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x535db43f": {
    "doc": "!\n<summary>\nGet the last entity that damaged the ped. This native is used server side when using OneSync.\n</summary>\n<param name=\"ped\">The target ped</param>\n<returns>The entity id. Returns 0 if the ped has not been damaged recently.</returns>\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_PED_SOURCE_OF_DAMAGE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x535db43f",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x5b912c3f": {
    "doc": "!\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "NETWORK_GET_ENTITY_FROM_NETWORK_ID",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "netId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x5b912c3f",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x63d13184": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_NUM_PLAYER_INDICES",
    "arguments": [],
    "aliases": [],
    "hash": "0x63d13184",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xe5e9ebbb": {
    "doc": "!\n<summary>\nReturns the name of the currently executing resource.\n</summary>\n<returns>The name of the resource.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_CURRENT_RESOURCE_NAME",
    "arguments": [],
    "aliases": [],
    "hash": "0xe5e9ebbb",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xcf24c52e": {
    "doc": "!\n<summary>\nGets whether or not this is the CitizenFX server.\n</summary>\n<returns>A boolean value.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_DUPLICITY_VERSION",
    "arguments": [],
    "aliases": [],
    "hash": "0xcf24c52e",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xfa29d35d": {
    "doc": "!\n<summary>\nCancels the currently executing event.\n</summary>\n\t",
    "name": "CANCEL_EVENT",
    "arguments": [],
    "aliases": [],
    "hash": "0xfa29d35d",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x25865633": {
    "doc": "!\n<param name=\"ped\">The target ped.</param>\n<returns>Whether or not the ped is handcuffed.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_PED_HANDCUFFED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x25865633",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8154e470": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_MAX_HEALTH",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8154e470",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x63458c27": {
    "doc": "!\n\t",
    "returns": { "name": "Hash", "nativeType": "int" },
    "name": "GET_PED_CAUSE_OF_DEATH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x63458c27",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x120b4ed5": {
    "doc": "!\n<summary>\nThis native checks if the given entity is visible.\n</summary>\n<returns>Returns `true` if the entity is visible, `false` otherwise.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_ENTITY_VISIBLE",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x120b4ed5",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x90892ded": {
    "doc": "!\n<summary>\nPrints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of\nserver monitoring utilities.\n</summary>\n<param name=\"jsonString\">JSON data to submit as `payload` in the `script_structured_trace` event.</param>\n\t",
    "name": "PRINT_STRUCTURED_TRACE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "jsonString",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x90892ded",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x89a3881a": {
    "doc": "!\n<summary>\n```\nThis will return true if the player is evading wanted level, meaning that the wanted level stars are blink.\nOtherwise will return false.\n\nIf the player is not wanted, it simply returns false.\n```\n</summary>\n<param name=\"playerSrc\">The target player</param>\n<returns>boolean value, depending if the player is evading his wanted level or not.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PLAYER_EVADING_WANTED_LEVEL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x89a3881a",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xfaa3d236": {
    "doc": "!\n<summary>\nDeletes the specified entity.\n</summary>\n<param name=\"entity\">The entity to delete.</param>\n\t",
    "name": "DELETE_ENTITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfaa3d236",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xac0631c9": {
    "doc": "!\n<summary>\n```\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\nEntity aimedentity;\nPlayer player = PLAYER::PLAYER_ID();\nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);\n//bg is an array of peds\nTASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_SHOOT_AT_ENTITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "target",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "duration",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "firingPattern",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xac0631c9",
    "ogHash": "0x08DA95E8298AE772",
    "apiset": ["server"]
  },
  "0xe41595ce": {
    "doc": "!\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_VEHICLE_PETROL_TANK_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe41595ce",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2b84d1c4": {
    "doc": "!\n<summary>\n```\nExample:\nTASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\nNeeds working example. Doesn't seem to do anything.\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_DRIVE_BY",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "driverPed",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "targetPed",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "targetVehicle",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "targetX",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "targetY",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "targetZ",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "distanceToShoot",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "pedAccuracy",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p8",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "firingPattern",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2b84d1c4",
    "ogHash": "0x2F8AF0E82773A171",
    "apiset": ["server"]
  },
  "0xedbe6add": {
    "doc": "!\n<summary>\nA getter for [FREEZE_ENTITY_POSITION](#\\_0x428CA6DBD1094446).\n</summary>\n<param name=\"entity\">The entity to check for</param>\n<returns>Boolean stating if it is frozen or not.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_ENTITY_POSITION_FROZEN",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xedbe6add",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x3ff247a2": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "r",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "g",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "b",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0x3ff247a2",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xe27c97a0": {
    "doc": "!\n<summary>\nNonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.\n\nThis native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.\n</summary>\n\t",
    "name": "FLUSH_RESOURCE_KVP",
    "arguments": [],
    "aliases": [],
    "hash": "0xe27c97a0",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x6a2b1e8": {
    "doc": "!\n<summary>\nA setter for [GET_RESOURCE_KVP_INT](#\\_0x557B586A).\n</summary>\n<param name=\"key\">The key to set</param>\n<param name=\"value\">The value to write</param>\n\t",
    "name": "SET_RESOURCE_KVP_INT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6a2b1e8",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x57037960": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_RADIO_STATION_INDEX",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x57037960",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4b8285cf": {
    "doc": "!\n<param name=\"train\">The entity handle.</param>\n<returns>The carriage index. -1 returned if invalid result.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_TRAIN_CARRIAGE_INDEX",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "train",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4b8285cf",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7ade63e1": {
    "doc": "!\n<summary>\n```\nGets the amount of time player has spent evading the cops.\nCounter starts and increments only when cops are chasing the player.\nIf the player is evading, the timer will pause.\n```\n</summary>\n<param name=\"playerSrc\">The target player</param>\n<param name=\"lastPursuit\">False = CurrentPursuit, True = LastPursuit</param>\n<returns>Returns -1, if the player is not wanted or wasn't in pursuit before, depending on the lastPursuit parameter\nReturns 0, if lastPursuit == False and the player has a wanted level, but the pursuit has not started yet\nOtherwise, will return the milliseconds of the pursuit.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_TIME_IN_PURSUIT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "lastPursuit",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7ade63e1",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa273060e": {
    "doc": "!\n<summary>\nReturns the type of the passed vehicle.\n\n### Vehicle types\n\n*   automobile\n*   bike\n*   boat\n*   heli\n*   plane\n*   submarine\n*   trailer\n*   train\n</summary>\n<param name=\"vehicle\">The vehicle's entity handle.</param>\n<returns>If the entity is a vehicle, the vehicle type. If it is not a vehicle, the return value will be null.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_VEHICLE_TYPE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa273060e",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7f4563d3": {
    "doc": "!\n<summary>\nGets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.\nA ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.\n</summary>\n<param name=\"ped\">The target ped.</param>\n<param name=\"index\">A zero-based index with a maximum value of 7.</param>\n<returns>The type of the specific task.\n1604: A value of 530 denotes no script task is assigned or an invalid input was given.\n2060+: A value of 531 denotes no script task is assigned or an invalid input was given.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PED_SPECIFIC_TASK_TYPE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7f4563d3",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9bf8a73f": {
    "doc": "!\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "GET_ENTITY_ROTATION_VELOCITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9bf8a73f",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x48c80210": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_VEHICLE_TYRE_BURST",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "wheelID",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "completely",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x48c80210",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x619e4a3d": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_NUM_PLAYER_TOKENS",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x619e4a3d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa8f63eab": {
    "doc": "!\n<summary>\nRequests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "name": "LOAD_PLAYER_COMMERCE_DATA",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa8f63eab",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x1c2b9fef": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "r",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "g",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "b",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0x1c2b9fef",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xdafcb3ec": {
    "doc": "!\n\t",
    "returns": { "name": "Hash", "nativeType": "int" },
    "name": "GET_ENTITY_MODEL",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xdafcb3ec",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa6f02670": {
    "doc": "!\n<summary>\nSee the client-side [GET_LANDING_GEAR_STATE](#\\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states.\n</summary>\n<param name=\"vehicle\">The vehicle to check.</param>\n<returns>The current state of the vehicles landing gear.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_LANDING_GEAR_STATE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa6f02670",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xf5c6330c": {
    "doc": "!\n<summary>\nSets the handler for HTTP requests made to the executing resource.\n\nExample request URL: `http://localhost:30120/http-test/ping` - this request will be sent to the `http-test` resource with the `/ping` path.\n\nThe handler function assumes the following signature:\n\n```ts\nfunction HttpHandler(\n  request: {\n    address: string;\n    headers: Record<string, string>;\n    method: string;\n    path: string;\n    setDataHandler(handler: (data: string) => void): void;\n    setDataHandler(handler: (data: ArrayBuffer) => void, binary: 'binary'): void;\n    setCancelHandler(handler: () => void): void;\n  },\n  response: {\n    writeHead(code: number, headers?: Record<string, string | string[]>): void;\n    write(data: string): void;\n    send(data?: string): void;\n  }\n): void;\n```\n\n*   **request**: The request object.\n    *   **address**: The IP address of the request sender.\n    *   **path**: The path to where the request was sent.\n    *   **headers**: The headers sent with the request.\n    *   **method**: The request method.\n    *   **setDataHandler**: Sets the handler for when a data body is passed with the request. Additionally you can pass the `'binary'` argument to receive a `BufferArray` in JavaScript or `System.Byte[]` in C# (has no effect in Lua).\n    *   **setCancelHandler**: Sets the handler for when the request is cancelled.\n*   **response**: An object to control the response.\n    *   **writeHead**: Sets the status code & headers of the response. Can be only called once and won't work if called after running other response functions.\n    *   **write**: Writes to the response body without sending it. Can be called multiple times.\n    *   **send**: Writes to the response body and then sends it along with the status code & headers, finishing the request.\n</summary>\n<param name=\"handler\">The handler function.</param>\n\t",
    "name": "SET_HTTP_HANDLER",
    "arguments": [
      {
        "type": { "name": "func", "nativeType": "func" },
        "name": "handler",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf5c6330c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xec82a51d": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_LIVERY",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xec82a51d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9f1c4383": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_INSTANCE_ID",
    "arguments": [],
    "aliases": [],
    "hash": "0x9f1c4383",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xda58d7ae": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_WHEEL_TYPE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xda58d7ae",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x404794ca": {
    "doc": "!\n<summary>\nThis native checks if the given ped is a player.\n</summary>\n<returns>Returns `true` if the ped is a player, `false` otherwise.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PED_A_PLAYER",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x404794ca",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x1dc50247": {
    "doc": "!\n<summary>\nCurrently it only works when set to \"all players\".\n</summary>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1dc50247",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa44ce817": {
    "doc": "!\n<summary>\nParameter `p1` does not seem to be used or referenced in game binaries.\\\n**Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.\n</summary>\n<param name=\"ped\">The ped entity</param>\n\t",
    "rpc": true,
    "name": "REMOVE_ALL_PED_WEAPONS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p1",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa44ce817",
    "ogHash": "0xF25DF915FA38C5F3",
    "apiset": ["server"]
  },
  "0x986b65ff": {
    "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2",
    "ns": "CFX",
    "doc": "!\n<summary>\nA getter for [\\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\\_2](#\\_0xBCFDE9EDE4CF27DC).\n</summary>\n<param name=\"playerId\">The player index.</param>\n<returns>The value of player weapon defense modifier 2.</returns>\n\t",
    "game": "gta5",
    "apiset": ["shared"],
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "playerId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "float", "nativeType": "float" },
    "hash": "0x986b65ff"
  },
  "0xd233a168": {
    "doc": "!\n<summary>\nAn internal function which allows the current resource's HLL script runtimes to receive state for the specified event.\n</summary>\n<param name=\"eventName\">An event name, or \"\\*\" to disable HLL event filtering for this resource.</param>\n\t",
    "name": "REGISTER_RESOURCE_AS_EVENT_HANDLER",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd233a168",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xfd15c065": {
    "doc": "!\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_VEHICLE_DIRT_LEVEL",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfd15c065",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8d50e33a": {
    "doc": "!\n<summary>\nInternal function for setting a state bag value.\n</summary>\n\t",
    "name": "SET_STATE_BAG_VALUE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "bagName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "keyName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "valueData",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "valueLength",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "replicated",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8d50e33a",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x83cb5052": {
    "doc": "!\n<summary>\np4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\n**Else**: CTaskNMBalance\n</summary>\n<param name=\"time1\">Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.</param>\n\t",
    "rpc": true,
    "name": "SET_PED_TO_RAGDOLL",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "time1",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "time2",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "ragdollType",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p4",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p5",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p6",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x83cb5052",
    "ogHash": "0xAE99FB955581844A",
    "apiset": ["server"]
  },
  "0x70b35890": {
    "doc": "!\n<summary>\nThe backing function for TriggerLatentClientEvent.\n</summary>\n\t",
    "name": "TRIGGER_LATENT_CLIENT_EVENT_INTERNAL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventTarget",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventPayload",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "payloadLength",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "bps",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x70b35890",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8880038a": {
    "doc": "!\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_VEHICLE_ENGINE_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8880038a",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2f7a49e6": {
    "doc": "!\n<summary>\nThe backing function for TriggerClientEvent.\n</summary>\n\t",
    "name": "TRIGGER_CLIENT_EVENT_INTERNAL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventTarget",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "eventPayload",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "payloadLength",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2f7a49e6",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x601c22e3": {
    "doc": "!\n<summary>\n```\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_SHOOT_AT_COORD",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "duration",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "firingPattern",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x601c22e3",
    "ogHash": "0x46A6CC01E0826106",
    "apiset": ["server"]
  },
  "0xcf1384c4": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "SET_PED_CAN_RAGDOLL",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "toggle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xcf1384c4",
    "ogHash": "0xB128377056A54E2A",
    "apiset": ["server"]
  },
  "0x3ddeb0e6": {
    "doc": "!\n<summary>\nIt's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).\n\n[Animations list](https://alexguirre.github.io/animations-list/)\n</summary>\n<param name=\"ped\">The target ped</param>\n<param name=\"animDict\">Name of the animation dictionary</param>\n<param name=\"animName\">Name of the animation</param>\n<param name=\"posX\">Initial X position of the task</param>\n<param name=\"posY\">Initial Y position of the task</param>\n<param name=\"posZ\">Initial Z position of the task</param>\n<param name=\"rotX\">Initial X rotation of the task, doesn't seem to have any effect</param>\n<param name=\"rotY\">Initial Y rotation of the task, doesn't seem to have any effect</param>\n<param name=\"rotZ\">Initial Z rotation of the task</param>\n<param name=\"animEnterSpeed\">Adjust character speed to fully enter animation</param>\n<param name=\"animExitSpeed\">Adjust character speed to fully exit animation (useless `ClearPedTasksImmediately()` is called)</param>\n<param name=\"duration\">Time in milliseconds</param>\n<param name=\"animTime\">Value between 0.0 and 1.0, lets you start an animation from the given point</param>\n\t",
    "rpc": true,
    "name": "TASK_PLAY_ANIM_ADVANCED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "animDict",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "animName",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "posX",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "posY",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "posZ",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "rotX",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "rotY",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "rotZ",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "animEnterSpeed",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "animExitSpeed",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "duration",
        "annotations": {}
      },
      {
        "type": { "name": "Any", "nativeType": "int" },
        "name": "flag",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "animTime",
        "annotations": {}
      },
      {
        "type": { "name": "Any", "nativeType": "int" },
        "name": "p14",
        "annotations": {}
      },
      {
        "type": { "name": "Any", "nativeType": "int" },
        "name": "p15",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x3ddeb0e6",
    "ogHash": "0x83CDB10EA29B370B",
    "apiset": ["server"]
  },
  "0x7b1141c6": {
    "doc": "!\n<summary>\n```\nFlags from decompiled scripts:  \n0 = normal exit and closes door.  \n1 = normal exit and closes door.  \n16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)\n64 = normal exit and closes door, maybe a bit slower animation than 0.  \n256 = normal exit but does not close the door.  \n4160 = ped is throwing himself out, even when the vehicle is still.  \n262144 = ped moves to passenger seat first, then exits normally  \nOthers to be tried out: 320, 512, 131072.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_LEAVE_VEHICLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flags",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7b1141c6",
    "ogHash": "0xD3DBCE61A490BE02",
    "apiset": ["server"]
  },
  "0x5ae7eda2": {
    "doc": "!\n<param name=\"ped\">The target ped.</param>\n<returns>Whether or not the ped is using action mode.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_PED_USING_ACTION_MODE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x5ae7eda2",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa4ea0691": {
    "doc": "!\n<summary>\nGets the current game timer in milliseconds.\n</summary>\n<returns>The game time.</returns>\n\t",
    "returns": { "nativeType": "int", "name": "long", "subType": "long" },
    "name": "GET_GAME_TIMER",
    "arguments": [],
    "aliases": [],
    "hash": "0xa4ea0691",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8dcc19c5": {
    "doc": "!\n<summary>\n```\nIn the scripts, p3 was always -1.  \np3 seems to be duration or timeout of turn animation.  \nAlso facingPed can be 0 or -1 so ped will just raise hands up.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_HANDS_UP",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "duration",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "facingPed",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p3",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p4",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8dcc19c5",
    "ogHash": "0xF2EAB31979A7F910",
    "apiset": ["server"]
  },
  "0xf91df93b": {
    "doc": "!\n<summary>\n```\nexample from fm_mission_controller\nTASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);\n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_GO_TO_COORD_ANY_MEANS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "speed",
        "annotations": {}
      },
      {
        "type": { "name": "Any", "nativeType": "int" },
        "name": "p5",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p6",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "walkingStyle",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p8",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf91df93b",
    "ogHash": "0x5BC448CB78FA3E88",
    "apiset": ["server"]
  },
  "0xc1971f30": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "TASK_EVERYONE_LEAVE_VEHICLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc1971f30",
    "ogHash": "0x7F93691AB4B92272",
    "apiset": ["server"]
  },
  "0x637f4c75": {
    "doc": "!\n<summary>\nReturns the value of a state bag key.\n</summary>\n<returns>Value.</returns>\n\t",
    "returns": { "name": "object", "nativeType": "object" },
    "name": "GET_STATE_BAG_VALUE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "bagName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x637f4c75",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xccff3b6e": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_INTERIOR_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "color",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0xccff3b6e",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x26aeb707": {
    "doc": "!\n<summary>\nNonsynchronous [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).\n</summary>\n<param name=\"key\">The key to set</param>\n<param name=\"value\">The value to write</param>\n\t",
    "name": "SET_RESOURCE_KVP_INT_NO_SYNC",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x26aeb707",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb8689b4e": {
    "doc": "!\n<summary>\n```\nspeed 1.0 = walk, 2.0 = run  \np5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle  \np6 is always 0  \n```\n</summary>\n<param name=\"seatIndex\">See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669).</param>\n\t",
    "rpc": true,
    "name": "TASK_ENTER_VEHICLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "timeout",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "seatIndex",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "speed",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flag",
        "annotations": {}
      },
      {
        "type": { "name": "Any", "nativeType": "int" },
        "name": "p6",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb8689b4e",
    "ogHash": "0xC20E50AA46D09CA8",
    "apiset": ["server"]
  },
  "0xcb0d8932": {
    "doc": "!\n<summary>\n```\nMakes the specified ped attack the target ped.  \np2 should be 0  \np3 should be 16  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "TASK_COMBAT_PED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "targetPed",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p2",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p3",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xcb0d8932",
    "ogHash": "0xF166E48407BAC484",
    "apiset": ["server"]
  },
  "0x21783161": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "STOP_RESOURCE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x21783161",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x1647f1cb": {
    "doc": "!\n<summary>\nGets the current coordinates for a specified entity. This native is used server side when using OneSync.\n\nSee [GET_ENTITY_COORDS](#\\_0x3FEF770D40960D5A) for client side.\n</summary>\n<param name=\"entity\">The entity to get the coordinates from.</param>\n<returns>The current entity coordinates.</returns>\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "GET_ENTITY_COORDS",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1647f1cb",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x6e35c49c": {
    "doc": "!\n<returns>A number from 0 to 7.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_DOOR_STATUS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6e35c49c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x635e5289": {
    "doc": "!\n<summary>\nSets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.\n</summary>\n<param name=\"entity\">The entity to set the routing bucket for.</param>\n<param name=\"bucket\">The bucket ID.</param>\n\t",
    "name": "SET_ENTITY_ROUTING_BUCKET",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "bucket",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x635e5289",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2b39128b": {
    "doc": "!\n<summary>\nSets the dirt level of the passed vehicle.\n</summary>\n<param name=\"vehicle\">The vehicle to set.</param>\n<param name=\"dirtLevel\">A number between 0.0 and 15.0 representing the vehicles dirt level.</param>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_DIRT_LEVEL",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "dirtLevel",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2b39128b",
    "ogHash": "0x79D3B596FE44EE8B",
    "apiset": ["server"]
  },
  "0x8df9f9bc": {
    "doc": "!\n<summary>\n```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "r",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "g",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "b",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8df9f9bc",
    "ogHash": "0x7141766F91D15BEA",
    "apiset": ["server"]
  },
  "0x57f24253": {
    "doc": "!\n<summary>\ncolorPrimary & colorSecondary are the paint indexes for the vehicle.\n\nFor a list of valid paint indexes, view: pastebin.com/pwHci0xK\n</summary>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_COLOURS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorPrimary",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorSecondary",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x57f24253",
    "ogHash": "0x4F1D4BE3A7F24601",
    "apiset": ["server"]
  },
  "0x23473ea4": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PASSWORD_HASH",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "password",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x23473ea4",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa557aead": {
    "doc": "!\n<summary>\nSets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\n\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)\n</summary>\n<param name=\"vehicle\">The vehicle to modify.</param>\n<param name=\"colorCombination\">One of the default color values of the vehicle.</param>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_COLOUR_COMBINATION",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorCombination",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa557aead",
    "ogHash": "0x33E8CD3322E2FE31",
    "apiset": ["server"]
  },
  "0x387246b7": {
    "doc": "!\n<param name=\"findIndex\">The index of the resource (starting at 0)</param>\n<returns>The resource name as a `string`</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_RESOURCE_BY_FIND_INDEX",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "findIndex",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x387246b7",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xe4e83a5b": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "HAS_VEHICLE_BEEN_OWNED_BY_PLAYER",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe4e83a5b",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x61dcf017": {
    "doc": "!\n<summary>\nReturns the physical on-disk path of the specified resource.\n</summary>\n<param name=\"resourceName\">The name of the resource.</param>\n<returns>The resource directory name, possibly without trailing slash.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_RESOURCE_PATH",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x61dcf017",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9add2938": {
    "doc": "!\n<summary>\nA setter for [GET_RESOURCE_KVP_FLOAT](#\\_0x35BDCEEA).\n</summary>\n<param name=\"key\">The key to set</param>\n<param name=\"value\">The value to write</param>\n\t",
    "name": "SET_RESOURCE_KVP_FLOAT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9add2938",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xbdcdd163": {
    "doc": "!\n<summary>\n```\nReturns given players wanted level server-side.\n```\n</summary>\n<param name=\"playerSrc\">The target player</param>\n<returns>The wanted level</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_WANTED_LEVEL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbdcdd163",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9c37f220": {
    "doc": "!\n<summary>\n```\nThis native removes a specified weapon from your selected ped.  \nWeapon Hashes: pastebin.com/0wwDZgkF  \nExample:  \nC#:  \nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);  \nC++:  \nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);  \nThe code above removes the knife from the player.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "REMOVE_WEAPON_FROM_PED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "weaponHash",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9c37f220",
    "ogHash": "0x4899CB088EDF59B8",
    "apiset": ["server"]
  },
  "0x972cc383": {
    "doc": "!\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_ENTITY_HEADING",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x972cc383",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x21c7a35b": {
    "doc": "!\n<summary>\nA setter for [GET_RESOURCE_KVP_STRING](#\\_0x5240DA5A).\n</summary>\n<param name=\"key\">The key to set</param>\n<param name=\"value\">The value to write</param>\n\t",
    "name": "SET_RESOURCE_KVP",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x21c7a35b",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x8689a825": {
    "name": "GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER",
    "ns": "CFX",
    "doc": "!\n<summary>\nA getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\\_0x4A3DC7ECCC321032).\n</summary>\n<param name=\"playerId\">The player index.</param>\n<returns>Returns player melee weapon damage modifier value.</returns>\n\t",
    "game": "gta5",
    "apiset": ["shared"],
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "playerId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "float", "nativeType": "float" },
    "hash": "0x8689a825"
  },
  "0xb7a0914b": {
    "doc": "!\n<summary>\n```\nCall SET_PLAYER_WANTED_LEVEL_NOW for immediate effect  \nwantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files  \ndisableNoMission-  Disables When Off Mission- appears to always be false  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PLAYER_WANTED_LEVEL",
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "player",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "wantedLevel",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "disableNoMission",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb7a0914b",
    "ogHash": "0x39FF19C64EF7DA5B",
    "apiset": ["server"]
  },
  "0x6504eb38": {
    "doc": "!\n<summary>\nSets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.\n</summary>\n<param name=\"playerSrc\">The player to set the routing bucket for.</param>\n<param name=\"bucket\">The bucket ID.</param>\n\t",
    "name": "SET_PLAYER_ROUTING_BUCKET",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "bucket",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6504eb38",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2a50657": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_MAX_ARMOUR",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2a50657",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x964bab1d": {
    "doc": "!\n<summary>\nGets the metadata value at a specified key/index from a resource's manifest.\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)\n</summary>\n<param name=\"resourceName\">The resource name.</param>\n<param name=\"metadataKey\">The key in the resource manifest.</param>\n<param name=\"index\">The value index, in a range from \\[0..GET_NUM_RESOURCE_METDATA-1].</param>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_RESOURCE_METADATA",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "metadataKey",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x964bab1d",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xf01e2aab": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<returns>See the client-side [GET_HELI_MAIN_ROTOR_HEALTH](https://docs.fivem.net/natives/?\\_0xE4CB7541F413D2C5) for the return value.</returns>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_HELI_MAIN_ROTOR_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf01e2aab",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xb8af3137": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<returns>Returns whether or not the target vehicle has been damaged by bullets.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "HAS_VEHICLE_BEEN_DAMAGED_BY_BULLETS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb8af3137",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8a2fbad4": {
    "doc": "!\n<summary>\nSets the culling radius for the specified player.\nSet to `0.0` to reset.\n\n**WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)\n</summary>\n<param name=\"playerSrc\">The player to set the culling radius for.</param>\n<param name=\"radius\">The radius.</param>\n\t",
    "name": "SET_PLAYER_CULLING_RADIUS",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "radius",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8a2fbad4",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xfa12e286": {
    "doc": "!\n<summary>\n```\nReturn variable is never used in R*'s scripts.  \nNot sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.  \nx, y, and z are coordinates, most likely to where the ped will fall.  \np7 is probably the force of the fall, but untested, so I left the variable name the same.  \np8 to p13 are always 0f in R*'s scripts.  \n(Simplified) Example of the usage of the function from R*'s scripts:  \nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_TO_RAGDOLL_WITH_FALL",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "time",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p2",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "ragdollType",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p7",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p8",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p9",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p10",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p11",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p12",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "p13",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xfa12e286",
    "ogHash": "0xD76632D99E4966C8",
    "apiset": ["server"]
  },
  "0xc795a4a9": {
    "doc": "!\n<summary>\nScope entry for profiler.\n</summary>\n<param name=\"scopeName\">Scope name.</param>\n\t",
    "name": "PROFILER_ENTER_SCOPE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "scopeName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc795a4a9",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x58382a19": {
    "doc": "!\n<summary>\nReturns whether or not the currently executing event was canceled.\n</summary>\n<returns>A boolean.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "WAS_EVENT_CANCELED",
    "arguments": [],
    "aliases": [],
    "hash": "0x58382a19",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x9862b266": {
    "doc": "!\n<summary>\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.\n</summary>\n<param name=\"resourceName\">The resource to add the asset to.</param>\n<param name=\"fileName\">A file name in the resource.</param>\n<returns>A cache string to pass to `REGISTER_STREAMING_FILE_FROM_CACHE` on the client.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "REGISTER_RESOURCE_ASSET",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "fileName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9862b266",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9e1e4798": {
    "doc": "!\n<summary>\nGets the current speed of the entity in meters per second.\n\n```\nTo convert to MPH: speed * 2.236936\nTo convert to KPH: speed * 3.6\n```\n</summary>\n<param name=\"entity\">The entity to get the speed of</param>\n<returns>The speed of the entity in meters per second</returns>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_ENTITY_SPEED",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9e1e4798",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x5ba35aaf": {
    "doc": "!\n<summary>\nAdds a handler for changes to a state bag.\n\nThe function called expects to match the following signature:\n\n```ts\nfunction StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);\n```\n\n*   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`\n    or `localEntity:Handle`.\n*   **key**: The changed key.\n*   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.\n*   **reserved**: Currently unused.\n*   **replicated**: Whether the set is meant to be replicated.\n\nAt this time, the change handler can't opt to reject changes.\n\nIf bagName refers to an entity, use [GET_ENTITY_FROM_STATE_BAG_NAME](?\\_0x4BDF1868) to get the entity handle\nIf bagName refers to a player, use [GET_PLAYER_FROM_STATE_BAG_NAME](?\\_0xA56135E0) to get the player handle\n</summary>\n<param name=\"keyFilter\">The key to check for, or null for no filter.</param>\n<param name=\"bagFilter\">The bag ID to check for such as `entity:65535`, or null for no filter.</param>\n<param name=\"handler\">The handler function.</param>\n<returns>A cookie to remove the change handler.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "ADD_STATE_BAG_CHANGE_HANDLER",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "keyFilter",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "bagFilter",
        "annotations": {}
      },
      {
        "type": { "name": "func", "nativeType": "func" },
        "name": "handler",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x5ba35aaf",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xcff6ff66": {
    "doc": "!\n<summary>\nPED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\nKnown values:\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_RESET_FLAG",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "flagId",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "doReset",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xcff6ff66",
    "ogHash": "0xC1E8A365BF3B29F2",
    "apiset": ["server"]
  },
  "0x935c0ab2": {
    "doc": "!\n<summary>\nCan be used to get a console variable casted back to `int` (an integer value).\n</summary>\n<param name=\"varName\">The console variable to look up.</param>\n<param name=\"default_\">The default value to set if none is found (variable not set using [SET_CONVAR](#\\_0x341B16D2), or not accessible).</param>\n<returns>Returns the convar value if it can be found, otherwise it returns the assigned `default`.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_CONVAR_INT",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "varName",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "default_",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x935c0ab2",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xe3318e0e": {
    "doc": "!\n<param name=\"ped\">The ped handle.</param>\n\t",
    "rpc": true,
    "name": "SET_PED_RANDOM_PROPS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe3318e0e",
    "ogHash": "0xC44AA05345C992C6",
    "apiset": ["server"]
  },
  "0x1e546224": {
    "doc": "!\n<summary>\nReturns the first owner ID of the specified entity.\n</summary>\n<param name=\"entity\">The entity to get the first owner for.</param>\n<returns>The server ID of the first entity owner.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "NETWORK_GET_FIRST_ENTITY_OWNER",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1e546224",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7c278621": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "GET_VEHICLE_LIGHTS_STATE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "lightsOn",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "highbeamsOn",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0x7c278621",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x7389b5df": {
    "doc": "!\n<param name=\"key\">The key to delete</param>\n\t",
    "name": "DELETE_RESOURCE_KVP",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7389b5df",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x7500c79": {
    "doc": "!\n<param name=\"seatIndex\">See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669). -2 for the first available seat.</param>\n\t",
    "rpc": true,
    "name": "SET_PED_INTO_VEHICLE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "seatIndex",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7500c79",
    "ogHash": "0xF75B0D629E1C063D",
    "apiset": ["server"]
  },
  "0x78935a27": {
    "doc": "!\n<summary>\n```\nUsed for freemode (online) characters. \nCalled after SET_PED_HEAD_OVERLAY().  \n```\n\n**Note:**\n\nYou may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n</summary>\n<param name=\"ped\">The ped entity</param>\n<param name=\"overlayID\">An integer representing the overlay id</param>\n<param name=\"colorType\">1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.</param>\n<param name=\"colorID\">An integer representing the primary color id</param>\n<param name=\"secondColorID\">An integer representing the secondary color id</param>\n\t",
    "rpc": true,
    "name": "_SET_PED_HEAD_OVERLAY_COLOR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "overlayID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorType",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "secondColorID",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x78935a27",
    "ogHash": "0x497BF74A7B9CB952",
    "apiset": ["server"]
  },
  "0xd28dba90": {
    "doc": "!\n<summary>\n```\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.   \noverlayID       Part                  Index, to disable  \n0               Blemishes             0 - 23, 255  \n1               Facial Hair           0 - 28, 255  \n2               Eyebrows              0 - 33, 255  \n3               Ageing                0 - 14, 255  \n4               Makeup                0 - 74, 255  \n5               Blush                 0 - 6, 255  \n6               Complexion            0 - 11, 255  \n7               Sun Damage            0 - 10, 255  \n8               Lipstick              0 - 9, 255  \n9               Moles/Freckles        0 - 17, 255  \n10              Chest Hair            0 - 16, 255  \n11              Body Blemishes        0 - 11, 255  \n12              Add Body Blemishes    0 - 1, 255  \n```\n\n**Note:**\n\nYou may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n</summary>\n<param name=\"ped\">The ped entity</param>\n<param name=\"overlayID\">The overlay id displayed up above.</param>\n<param name=\"index\">An integer representing the index (from 0 to `_GET_NUM_OVERLAY_VALUES(overlayID)-1`)</param>\n<param name=\"opacity\">A float ranging from 0.0 to 1.0</param>\n\t",
    "rpc": true,
    "name": "SET_PED_HEAD_OVERLAY",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "overlayID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "opacity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd28dba90",
    "ogHash": "0x48F44967FA05CC1E",
    "apiset": ["server"]
  },
  "0xbb43f090": {
    "doc": "!\n<summary>\n```\nUsed for freemode (online) characters.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "_SET_PED_HAIR_COLOR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorID",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "highlightColorID",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbb43f090",
    "ogHash": "0x4CFFC65454C93A49",
    "apiset": ["server"]
  },
  "0xbb340d04": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_VEHICLE_ENGINE_STARTING",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbb340d04",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xb8584fef": {
    "doc": "!\n<summary>\nReturns all peds handles known to the server.\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```\n</summary>\n<returns>An object containing a list of peds handles.</returns>\n\t",
    "returns": { "name": "object", "nativeType": "object" },
    "name": "GET_ALL_PEDS",
    "arguments": [],
    "aliases": [],
    "hash": "0xb8584fef",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x98d244": {
    "doc": "!\n<summary>\nGets the current fake wanted level for a specified player. This native is used server side when using OneSync.\n</summary>\n<param name=\"playerSrc\">The target player</param>\n<returns>The fake wanted level</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_FAKE_WANTED_LEVEL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x98d244",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9873e404": {
    "doc": "!\n<param name=\"playerSrc\">The player handle</param>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_TEAM",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9873e404",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x6c8d4458": {
    "doc": "!\n<summary>\nSets the various freemode face features, e.g. nose length, chin shape.\n\n**Indexes (From 0 to 19):**\n\nParentheses indicate morph scale/direction as in (-1.0 to 1.0)\n\n*   **0**: Nose Width (Thin/Wide)\n*   **1**: Nose Peak (Up/Down)\n*   **2**: Nose Length (Long/Short)\n*   **3**: Nose Bone Curveness (Crooked/Curved)\n*   **4**: Nose Tip (Up/Down)\n*   **5**: Nose Bone Twist (Left/Right)\n*   **6**: Eyebrow (Up/Down)\n*   **7**: Eyebrow (In/Out)\n*   **8**: Cheek Bones (Up/Down)\n*   **9**: Cheek Sideways Bone Size (In/Out)\n*   **10**: Cheek Bones Width (Puffed/Gaunt)\n*   **11**: Eye Opening (Both) (Wide/Squinted)\n*   **12**: Lip Thickness (Both) (Fat/Thin)\n*   **13**: Jaw Bone Width (Narrow/Wide)\n*   **14**: Jaw Bone Shape (Round/Square)\n*   **15**: Chin Bone (Up/Down)\n*   **16**: Chin Bone Length (In/Out or Backward/Forward)\n*   **17**: Chin Bone Shape (Pointed/Square)\n*   **18**: Chin Hole (Chin Bum)\n*   **19**: Neck Thickness (Thin/Thick)\n\n**Note:**\n\nYou may need to call [`SetPedHeadBlendData`](#0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n</summary>\n<param name=\"ped\">The ped entity</param>\n<param name=\"index\">An integer ranging from 0 to 19</param>\n<param name=\"scale\">A float ranging from -1.0 to 1.0</param>\n\t",
    "rpc": true,
    "name": "_SET_PED_FACE_FEATURE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "index",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "scale",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6c8d4458",
    "ogHash": "0x71A5C1DBA060049E",
    "apiset": ["server"]
  },
  "0x40d82d88": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_COLOURS",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorPrimary",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "colorSecondary",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0x40d82d88",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8e8cc653": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "PERFORM_HTTP_REQUEST_INTERNAL",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "requestData",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "requestDataLength",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8e8cc653",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x433c765d": {
    "doc": "!\n<summary>\nGets the current camera rotation for a specified player. This native is used server side when using OneSync.\n</summary>\n<param name=\"playerSrc\">The player handle.</param>\n<returns>The player's camera rotation. Values are in radians.</returns>\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "GET_PLAYER_CAMERA_ROTATION",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x433c765d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xd7ec8760": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd7ec8760",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x43f15989": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<returns>Returns whether or not the boat sinks when wrecked.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "DOES_BOAT_SINK_WHEN_WRECKED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x43f15989",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xd36be661": {
    "doc": "!\n<summary>\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRemoves a handler for changes to a state bag.\n</summary>\n<param name=\"cookie\">The cookie.</param>\n\t",
    "name": "REMOVE_STATE_BAG_CHANGE_HANDLER",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "cookie",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd36be661",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x7ebb9929": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_ACE_ALLOWED",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "object",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7ebb9929",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x8a632bd8": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "TASK_REACT_AND_FLEE_PED",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "fleeTarget",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8a632bd8",
    "ogHash": "0x72C896464915D1B1",
    "apiset": ["server"]
  },
  "0xad40ad55": {
    "doc": "!\n<summary>\nGets the flight nozzel position for the specified vehicle. See the client-side [\\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\\_0xDA62027C8BDB326E) native for usage examples.\n</summary>\n<param name=\"vehicle\">The vehicle to check.</param>\n<returns>The flight nozzel position between 0.0 (flying normally) and 1.0 (VTOL mode)</returns>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_VEHICLE_FLIGHT_NOZZLE_POSITION",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xad40ad55",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x3ac90869": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "DOES_ENTITY_EXIST",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Object",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x3ac90869",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xc7ae6aa1": {
    "doc": "!\n<summary>\nCurrently it only works with peds.\n</summary>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_ENTITY_MAX_HEALTH",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc7ae6aa1",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xc14c9b6b": {
    "doc": "!\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "GET_ENTITY_VELOCITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc14c9b6b",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xed4b0486": {
    "doc": "!\n<summary>\nGets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.\n</summary>\n<param name=\"entity\">The entity to get the routing bucket for.</param>\n<returns>The routing bucket ID.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_ENTITY_ROUTING_BUCKET",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xed4b0486",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4e3a0cc4": {
    "doc": "!\n<summary>\n```\nSets the armor of the specified ped.  \nped: The Ped to set the armor of.  \namount: A value between 0 and 100 indicating the value to set the Ped's armor to.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_ARMOUR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "amount",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4e3a0cc4",
    "ogHash": "0xCEA04D83135264CC",
    "apiset": ["server"]
  },
  "0x6228f159": {
    "name": "_ADD_BLIP_FOR_AREA",
    "ogHash": "0xCE5D0E5E315DB238",
    "doc": "!\n<summary>\nAdds a rectangular blip for the specified coordinates/area.\n\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\n\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\n\nExample image:\n![minimap](https://w.wew.wtf/pdcjig.png)\n![big map](https://w.wew.wtf/zgcjcm.png)\n\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)\n</summary>\n<param name=\"x\">The X coordinate of the center of the blip.</param>\n<param name=\"y\">The Y coordinate of the center of the blip.</param>\n<param name=\"z\">The Z coordinate of the center of the blip.</param>\n<param name=\"width\">The width of the blip.</param>\n<param name=\"height\">The height of the blip.</param>\n<returns>A handle to the blip.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "width",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "height",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Blip", "nativeType": "int" },
    "hash": "0x6228f159"
  },
  "0xf90b7469": {
    "doc": "!\n\t",
    "name": "SET_GAME_TYPE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "gametypeName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf90b7469",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2d23d743": {
    "doc": "!\n<param name=\"ped\">The ped handle.</param>\n<param name=\"propId\">The prop id you want to clear from the ped. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F).</param>\n\t",
    "rpc": true,
    "name": "CLEAR_PED_PROP",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "propId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x2d23d743",
    "ogHash": "0x0943E5B8E078E76E",
    "apiset": ["server"]
  },
  "0xe57429fa": {
    "doc": "!\n<summary>\nReturns the current console output buffer.\n</summary>\n<returns>The most recent game console output, as a string.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_CONSOLE_BUFFER",
    "arguments": [],
    "aliases": [],
    "hash": "0xe57429fa",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xd240123e": {
    "doc": "!\n<summary>\nReturns a hash of selected ped weapon.\n</summary>\n<param name=\"ped\">The target ped.</param>\n<returns>The weapon hash.</returns>\n\t",
    "returns": { "name": "Hash", "nativeType": "int" },
    "name": "GET_SELECTED_PED_WEAPON",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xd240123e",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8147fea7": {
    "doc": "!\n<summary>\nSee eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)\n</summary>\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_DOOR_BROKEN",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "doorIndex",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "deleteDoor",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8147fea7",
    "ogHash": "0xD4D4F6A4AB575A33",
    "apiset": ["server"]
  },
  "0xc6f43d0e": {
    "name": "ADD_BLIP_FOR_COORD",
    "ogHash": "0x5A039BB0BCA604B6",
    "doc": "!\n<summary>\nCreates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.\n</summary>\n<param name=\"x\">The X coordinate to create the blip on.</param>\n<param name=\"y\">The Y coordinate.</param>\n<param name=\"z\">The Z coordinate.</param>\n<returns>A blip handle.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Blip", "nativeType": "int" },
    "hash": "0xc6f43d0e"
  },
  "0x285b43ca": {
    "doc": "!\n<summary>\nRegisters a build task factory for resources.\nThe function should return an object (msgpack map) with the following fields:\n\n```\n{\n// returns whether the specific resource should be built\nshouldBuild = func(resourceName: string): bool,\n\n// asynchronously start building the specific resource.\n// call cb when completed\nbuild = func(resourceName: string, cb: func(success: bool, status: string): void): void\n}\n```\n</summary>\n<param name=\"factoryId\">The identifier for the build task.</param>\n<param name=\"factoryFn\">The factory function.</param>\n\t",
    "name": "REGISTER_RESOURCE_BUILD_TASK_FACTORY",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "factoryId",
        "annotations": {}
      },
      {
        "type": { "name": "func", "nativeType": "func" },
        "name": "factoryFn",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x285b43ca",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa345efe": {
    "doc": "!\n<param name=\"rotationOrder\">The order yaw pitch roll are applied, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9).</param>\n\t",
    "rpc": true,
    "name": "SET_ENTITY_ROTATION",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "pitch",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "roll",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "yaw",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "rotationOrder",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "p5",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa345efe",
    "ogHash": "0x8524A8B0171D5E07",
    "apiset": ["server"]
  },
  "0xe8eaa18b": {
    "doc": "!\n<summary>\nReturns the current game being executed.\n\nPossible values:\n\n| Return value | Meaning                        |\n| ------------ | ------------------------------ |\n| `fxserver`   | Server-side code ('Duplicity') |\n| `fivem`      | FiveM for GTA V                |\n| `libertym`   | LibertyM for GTA IV            |\n| `redm`       | RedM for Red Dead Redemption 2 |\n</summary>\n<returns>The game the script environment is running in.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_GAME_NAME",
    "arguments": [],
    "aliases": [],
    "hash": "0xe8eaa18b",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x9f7f8d36": {
    "doc": "!\n<summary>\nIt allows to flag an entity to ignore the request control filter policy.\n</summary>\n<param name=\"entity\">The entity handle to ignore the request control filter.</param>\n<param name=\"ignore\">Define if the entity ignores the request control filter policy.</param>\n\t",
    "name": "SET_ENTITY_IGNORE_REQUEST_CONTROL_FILTER",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "bool", "nativeType": "bool" },
        "name": "ignore",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9f7f8d36",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x13b6855d": {
    "doc": "!\n\t",
    "name": "FLAG_SERVER_AS_PRIVATE",
    "arguments": [
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "private_",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x13b6855d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xe8c0c629": {
    "doc": "!\n<param name=\"entity\">The target entity.</param>\n<returns>Returns whether or not entity collisions are disabled.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "GET_ENTITY_COLLISION_DISABLED",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xe8c0c629",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xbefe93f4": {
    "doc": "!\n<summary>\nRequests whether or not the commerce data for the specified player has loaded.\n</summary>\n<param name=\"playerSrc\">The player handle</param>\n<returns>A boolean.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PLAYER_COMMERCE_INFO_LOADED",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbefe93f4",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x52441c34": {
    "doc": "!\n<summary>\nGets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.\n</summary>\n<param name=\"playerSrc\">The player to get the routing bucket for.</param>\n<returns>The routing bucket ID.</returns>\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_ROUTING_BUCKET",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x52441c34",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xa45b6c8d": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PED_MAX_HEALTH",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa45b6c8d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x9338d547": {
    "doc": "!\n\t",
    "name": "SET_CONVAR_SERVER_INFO",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "varName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x9338d547",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x341b16d2": {
    "doc": "!\n\t",
    "name": "SET_CONVAR",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "varName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x341b16d2",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8dbbb0b9": {
    "doc": "!\n<summary>\n<!--\n_loc1_.map((name, idx) => `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\\n')\n-->\n\nSets the displayed sprite for a specific blip.\n\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.\n</summary>\n<param name=\"blip\">The blip to change.</param>\n<param name=\"spriteId\">The sprite ID to set.</param>\n\t",
    "rpc": true,
    "name": "SET_BLIP_SPRITE",
    "arguments": [
      {
        "type": { "name": "Blip", "nativeType": "int" },
        "name": "blip",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "spriteId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8dbbb0b9",
    "ogHash": "0xDF735600A4696DAF",
    "apiset": ["server"]
  },
  "0xa09e7e7b": {
    "doc": "!\n<summary>\nWrites the specified data to a file in the specified resource.\nUsing a length of `-1` will automatically detect the length assuming the data is a C string.\n</summary>\n<param name=\"resourceName\">The name of the resource.</param>\n<param name=\"fileName\">The name of the file.</param>\n<param name=\"data\">The data to write to the file.</param>\n<param name=\"dataLength\">The length of the written data.</param>\n<returns>A value indicating if the write succeeded.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "SAVE_RESOURCE_FILE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "fileName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "data",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "dataLength",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xa09e7e7b",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x30822554": {
    "name": "ADD_BLIP_FOR_ENTITY",
    "ogHash": "0x5CDE92C702A8FCE7",
    "doc": "!\n<summary>\nCreate a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\\_0xC6F43D0E) to make it blue (friend).\\\nCan be used for objects, vehicles and peds.\n\nExample of enemy:\n![enemy](https://i.imgur.com/fl78svv.png)\nExample of friend:\n![friend](https://i.imgur.com/Q16ho5d.png)\n</summary>\n<param name=\"entity\">The entity handle to create the blip.</param>\n<returns>A blip handle.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Blip", "nativeType": "int" },
    "hash": "0x30822554"
  },
  "0x2f7aa05c": {
    "name": "CREATE_OBJECT",
    "ogHash": "0x509D5878EB39E842",
    "doc": "!\n<summary>\nCreates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n</summary>\n<param name=\"modelHash\">The model to spawn.</param>\n<param name=\"x\">Spawn coordinate X component.</param>\n<param name=\"y\">Spawn coordinate Y component.</param>\n<param name=\"z\">Spawn coordinate Z component, 'ground level'.</param>\n<param name=\"isNetwork\">Whether to create a network object for the object. If false, the object exists only locally.</param>\n<param name=\"netMissionEntity\">Whether to register the object as pinned to the script host in the R\\* network model.</param>\n<param name=\"doorFlag\">False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode.</param>\n<returns>A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "modelHash",
        "annotations": { "cs_type": "int" }
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isNetwork",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "netMissionEntity",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "doorFlag",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Entity", "nativeType": "int" },
    "hash": "0x2f7aa05c"
  },
  "0x72ff2e73": {
    "name": "GET_BLIP_SPRITE",
    "arguments": [
      { "name": "self", "type": { "name": "int", "nativeType": "int" } }
    ],
    "aliases": [],
    "hash": "0x72ff2e73",
    "returns": { "name": "int", "nativeType": "int" },
    "apiset": ["server"]
  },
  "0x1e86f206": {
    "doc": "!\n\t",
    "name": "DELETE_FUNCTION_REFERENCE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "referenceIdentity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x1e86f206",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x5fa79b0f": {
    "doc": "!\n<summary>\nRegistered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\\_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)\n</summary>\n<param name=\"commandName\">The command you want to register.</param>\n<param name=\"handler\">A handler function that gets called whenever the command is executed.</param>\n<param name=\"restricted\">If this is a server command and you set this to true, then players will need the command.yourCommandName ace permission to execute this command.</param>\n\t",
    "name": "REGISTER_COMMAND",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "commandName",
        "annotations": {}
      },
      {
        "type": { "name": "func", "nativeType": "func" },
        "name": "handler",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "restricted",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x5fa79b0f",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xff5a1988": {
    "doc": "!\n<summary>\n```\nNote that the third parameter(denoted as z) is \"up and down\" with positive numbers encouraging upwards movement.\n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_ENTITY_VELOCITY",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xff5a1988",
    "ogHash": "0x1C99BB7B6E96D16F",
    "apiset": ["server"]
  },
  "0x281b5448": {
    "doc": "!\n<summary>\nRegisters a listener for console output messages.\n</summary>\n<param name=\"listener\">A function of `(channel: string, message: string) => void`. The message might contain `\\n`.</param>\n\t",
    "name": "REGISTER_CONSOLE_LISTENER",
    "arguments": [
      {
        "type": { "name": "func", "nativeType": "func" },
        "name": "listener",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x281b5448",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4bdf1867": {
    "doc": "!\n<summary>\nReturns the entity handle for the specified state bag name. For use with [ADD_STATE_BAG_CHANGE_HANDLER](?\\_0x5BA35AAF).\n</summary>\n<param name=\"bagName\">An internal state bag ID from the argument to a state bag change handler.</param>\n<returns>The entity handle or 0 if the state bag name did not refer to an entity, or the entity does not exist.</returns>\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_ENTITY_FROM_STATE_BAG_NAME",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "bagName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4bdf1867",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x7302dbcf": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_IDENTIFIER",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "identifier",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x7302dbcf",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x2a3d7cda": {
    "name": "GET_PLAYER_WEAPON_DAMAGE_MODIFIER",
    "ns": "CFX",
    "doc": "!\n<summary>\nA getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\\_0xCE07B9F7817AADA3).\n</summary>\n<param name=\"playerId\">The player index.</param>\n<returns>The value of player weapon damage modifier.</returns>\n\t",
    "game": "gta5",
    "apiset": ["shared"],
    "arguments": [
      {
        "type": { "name": "Player", "nativeType": "string" },
        "name": "playerId",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "float", "nativeType": "float" },
    "hash": "0x2a3d7cda"
  },
  "0xf8b7d7bb": {
    "doc": "!\n<summary>\nReturns true if the profiler is active.\n</summary>\n<returns>True or false.</returns>\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "PROFILER_IS_RECORDING",
    "arguments": [],
    "aliases": [],
    "hash": "0xf8b7d7bb",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xf7c6792d": {
    "doc": "!\n<param name=\"vehicle\">The target vehicle.</param>\n<param name=\"seatIndex\">See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669).</param>\n<returns>The last ped in the specified seat of the passed vehicle. Returns 0 if the specified seat was never occupied or the last ped does not exist anymore.</returns>\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_LAST_PED_IN_VEHICLE_SEAT",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "seatIndex",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xf7c6792d",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4111ba46": {
    "doc": "!\n<summary>\n```\np1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.  \n```\n</summary>\n\t",
    "rpc": true,
    "name": "SET_PED_RANDOM_COMPONENT_VARIATION",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "p1",
        "annotations": { "cs_type": "BOOL" }
      }
    ],
    "aliases": [],
    "hash": "0x4111ba46",
    "ogHash": "0xC8A9481A01E63C28",
    "apiset": ["server"]
  },
  "0xcc6c2eb1": {
    "doc": "!\n<summary>\nMutes or unmutes the specified player\n</summary>\n<param name=\"playerSrc\">The player to set the mute state of</param>\n<param name=\"toggle\">Whether to mute or unmute the player</param>\n\t",
    "name": "MUMBLE_SET_PLAYER_MUTED",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "bool", "nativeType": "bool" },
        "name": "toggle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xcc6c2eb1",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x76a9ee1f": {
    "doc": "!\n<summary>\nReads the contents of a text file in a specified resource.\nIf executed on the client, this file has to be included in `files` in the resource manifest.\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`\n</summary>\n<param name=\"resourceName\">The resource name.</param>\n<param name=\"fileName\">The file in the resource.</param>\n<returns>The file contents</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "LOAD_RESOURCE_FILE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "resourceName",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "fileName",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x76a9ee1f",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x24877d84": {
    "doc": "!\n\t",
    "rpc": true,
    "name": "SET_VEHICLE_ALARM",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "state",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x24877d84",
    "ogHash": "0xCDE5E70C1DDB954C",
    "apiset": ["server"]
  },
  "0xba0613e1": {
    "doc": "!\n\t",
    "name": "DROP_PLAYER",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "reason",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xba0613e1",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x58040420": {
    "name": "CREATE_OBJECT_NO_OFFSET",
    "ogHash": "0x9A294B2138ABB884",
    "doc": "!\n<summary>\nCreates an object (prop) with the specified model centered at the specified position.\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n</summary>\n<param name=\"modelHash\">The model to spawn.</param>\n<param name=\"x\">Spawn coordinate X component.</param>\n<param name=\"y\">Spawn coordinate Y component.</param>\n<param name=\"z\">Spawn coordinate Z component.</param>\n<param name=\"isNetwork\">Whether to create a network object for the object. If false, the object exists only locally.</param>\n<param name=\"netMissionEntity\">Whether to register the object as pinned to the script host in the R\\* network model.</param>\n<param name=\"doorFlag\">False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode.</param>\n<returns>A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created.</returns>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "modelHash",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "x",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "y",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "z",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isNetwork",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "netMissionEntity",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "doorFlag",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Entity", "nativeType": "int" },
    "hash": "0x58040420"
  },
  "0x821f2d2c": {
    "doc": "!\n<summary>\nGets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.\n</summary>\n<param name=\"playerSrc\">The target player</param>\n<returns>The player's position known by police. Vector zero if the player has no wanted level.</returns>\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "GET_PLAYER_WANTED_CENTRE_POSITION",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x821f2d2c",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x483b013c": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "GET_VEHICLE_HANDBRAKE",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x483b013c",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xb3210203": {
    "doc": "!\n<param name=\"handle\">The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)</param>\n<returns>None.</returns>\n\t",
    "name": "END_FIND_KVP",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "handle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xb3210203",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x406b4b20": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_PLAYER_NAME",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x406b4b20",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x427e8e6a": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_LAST_MSG",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x427e8e6a",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x5f70f5a3": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "GET_HOST_ID",
    "arguments": [],
    "aliases": [],
    "hash": "0x5f70f5a3",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x3000f092": {
    "name": "CREATE_PED_INSIDE_VEHICLE",
    "ogHash": "0x7DD959874C1FD534",
    "doc": "!\n<param name=\"pedType\">See [`CREATE_PED`](#\\_0xD49F9B0955C367DE)</param>\n\t",
    "rpc": true,
    "apiset": ["server"],
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "pedType",
        "annotations": {}
      },
      {
        "type": { "name": "Hash", "nativeType": "int" },
        "name": "modelHash",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "seat",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "isNetwork",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "bScriptHostPed",
        "annotations": {}
      }
    ],
    "aliases": [],
    "returns": { "name": "Entity", "nativeType": "int" },
    "hash": "0x3000f092"
  },
  "0x76876154": {
    "doc": "!\n<param name=\"ped\">The target ped.</param>\n<returns>Whether or not the ped's flash light is on.</returns>\n\t",
    "returns": { "name": "bool", "nativeType": "bool" },
    "name": "IS_FLASH_LIGHT_ON",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x76876154",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x6e31e993": {
    "doc": "!\n\t",
    "returns": { "name": "Entity", "nativeType": "int" },
    "name": "GET_PLAYER_PED",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x6e31e993",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xff1290d4": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_PLAYER_PING",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xff1290d4",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xbd7bebc5": {
    "doc": "!\n<param name=\"handle\">The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)</param>\n<returns>None.</returns>\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "FIND_KVP",
    "arguments": [
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "handle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xbd7bebc5",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0xc182f76e": {
    "doc": "!\n<param name=\"ped\">The target ped</param>\n<returns>Returns ped's desired heading.</returns>\n\t",
    "returns": { "name": "float", "nativeType": "float" },
    "name": "GET_PED_DESIRED_HEADING",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xc182f76e",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xe3551879": {
    "doc": "!\n\t",
    "returns": { "name": "charPtr", "nativeType": "string" },
    "name": "INVOKE_FUNCTION_REFERENCE",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "referenceIdentity",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "argsSerialized",
        "annotations": {}
      },
      {
        "type": { "name": "int", "nativeType": "int" },
        "name": "argsLength",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "retvalLength",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0xe3551879",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x3517bfbe": {
    "doc": "!\n<summary>\nNonsynchronous [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).\n</summary>\n<param name=\"key\">The key to set</param>\n<param name=\"value\">The value to write</param>\n\t",
    "name": "SET_RESOURCE_KVP_FLOAT_NO_SYNC",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "key",
        "annotations": {}
      },
      {
        "type": { "name": "float", "nativeType": "float" },
        "name": "value",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x3517bfbe",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x872cf42": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_VEHICLE_ROOF_LIVERY",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x872cf42",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xafe92319": {
    "doc": "!\n<summary>\nGets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.\n</summary>\n<param name=\"ped\">The target ped</param>\n<param name=\"lastVehicle\">False = CurrentVehicle, True = LastVehicle</param>\n<returns>The vehicle id. Returns 0 if the ped is/was not in a vehicle.</returns>\n\t",
    "returns": {
      "nativeType": "int",
      "name": "Vehicle",
      "parent": { "name": "Entity", "nativeType": "int" }
    },
    "name": "GET_VEHICLE_PED_IS_IN",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Ped",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "ped",
        "annotations": {}
      },
      {
        "type": { "name": "BOOL", "nativeType": "bool" },
        "name": "lastVehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xafe92319",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x4a557117": {
    "doc": "!\n<summary>\nGets the vehicle that is locked on to for the specified vehicle.\n</summary>\n<param name=\"vehicle\">The vehicle to check.</param>\n<returns>The vehicle that is locked on. 0 returned if no vehicle is locked on.</returns>\n\t",
    "returns": {
      "nativeType": "int",
      "name": "Vehicle",
      "parent": { "name": "Entity", "nativeType": "int" }
    },
    "name": "GET_VEHICLE_LOCK_ON_TARGET",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x4a557117",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x37cf52ce": {
    "doc": "!\n\t",
    "returns": { "name": "BOOL", "nativeType": "bool" },
    "name": "IS_PRINCIPAL_ACE_ALLOWED",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "principal",
        "annotations": {}
      },
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "object",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x37cf52ce",
    "ns": "CFX",
    "apiset": ["shared"]
  },
  "0x75280015": {
    "doc": "!\n\t",
    "name": "GET_VEHICLE_TYRE_SMOKE_COLOR",
    "arguments": [
      {
        "type": {
          "nativeType": "int",
          "name": "Vehicle",
          "parent": { "name": "Entity", "nativeType": "int" }
        },
        "name": "vehicle",
        "annotations": {}
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "r",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "g",
        "pointer": true
      },
      {
        "annotations": {},
        "type": { "name": "int", "nativeType": "int" },
        "name": "b",
        "pointer": true
      }
    ],
    "aliases": [],
    "hash": "0x75280015",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0xff7f66ab": {
    "doc": "!\n\t",
    "returns": { "name": "int", "nativeType": "int" },
    "name": "GET_NUM_PLAYER_IDENTIFIERS",
    "arguments": [
      {
        "type": { "name": "charPtr", "nativeType": "string" },
        "name": "playerSrc",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0xff7f66ab",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x6886c3fe": {
    "doc": "!\n<summary>\nReturns all object handles known to the server.\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```\n</summary>\n<returns>An object containing a list of object handles.</returns>\n\t",
    "returns": { "name": "object", "nativeType": "object" },
    "name": "GET_ALL_OBJECTS",
    "arguments": [],
    "aliases": [],
    "hash": "0x6886c3fe",
    "ns": "CFX",
    "apiset": ["server"]
  },
  "0x8ff45b04": {
    "doc": "!\n\t",
    "returns": { "name": "Vector3", "nativeType": "vector3" },
    "name": "GET_ENTITY_ROTATION",
    "arguments": [
      {
        "type": { "name": "Entity", "nativeType": "int" },
        "name": "entity",
        "annotations": {}
      }
    ],
    "aliases": [],
    "hash": "0x8ff45b04",
    "ns": "CFX",
    "apiset": ["server"]
  }
}
